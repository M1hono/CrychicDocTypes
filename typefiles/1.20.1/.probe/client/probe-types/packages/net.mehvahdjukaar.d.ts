declare module "packages/net/mehvahdjukaar/supplementaries/reg/$ModCommands" {
import {$CommandSourceStack, $CommandSourceStack$Type} from "packages/net/minecraft/commands/$CommandSourceStack"
import {$CommandBuildContext, $CommandBuildContext$Type} from "packages/net/minecraft/commands/$CommandBuildContext"
import {$Commands$CommandSelection, $Commands$CommandSelection$Type} from "packages/net/minecraft/commands/$Commands$CommandSelection"
import {$CommandDispatcher, $CommandDispatcher$Type} from "packages/com/mojang/brigadier/$CommandDispatcher"

export class $ModCommands {

constructor()

public static "register"(dispatcher: $CommandDispatcher$Type<($CommandSourceStack$Type)>, context: $CommandBuildContext$Type, selection: $Commands$CommandSelection$Type): void
public static "init"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModCommands$Type = ($ModCommands);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModCommands_ = $ModCommands$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/items/$RopeItem" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$BlockItem, $BlockItem$Type} from "packages/net/minecraft/world/item/$BlockItem"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$AdditionalItemPlacement, $AdditionalItemPlacement$Type} from "packages/net/mehvahdjukaar/moonlight/api/item/additional_placements/$AdditionalItemPlacement"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $RopeItem extends $BlockItem {
static readonly "BLOCK_ENTITY_TAG": string
static readonly "BLOCK_STATE_TAG": string
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(block: $Block$Type, properties: $Item$Properties$Type)

public "place"(context: $BlockPlaceContext$Type): $InteractionResult
public "moonlight$addAdditionalBehavior"(arg0: $AdditionalItemPlacement$Type): void
public "moonlight$getAdditionalBehavior"(): $AdditionalItemPlacement
public "moonlight$getClientAnimationExtension"(): any
public "moonlight$setClientAnimationExtension"(arg0: any): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RopeItem$Type = ($RopeItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RopeItem_ = $RopeItem$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/cannon/$CannonChargeOverlay" {
import {$Gui, $Gui$Type} from "packages/net/minecraft/client/gui/$Gui"
import {$Minecraft, $Minecraft$Type} from "packages/net/minecraft/client/$Minecraft"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $CannonChargeOverlay extends $Gui {
static readonly "GUI_ICONS_LOCATION": $ResourceLocation
readonly "minecraft": $Minecraft
 "vignetteBrightness": float
 "screenWidth": integer
 "screenHeight": integer


public "renderBar"(graphics: $GuiGraphics$Type, partialTicks: float, screenWidth: integer, screenHeight: integer): void
public "setupOverlayRenderState"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CannonChargeOverlay$Type = ($CannonChargeOverlay);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CannonChargeOverlay_ = $CannonChargeOverlay$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/blocks/$RopeBlock" {
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$AbstractRopeBlock, $AbstractRopeBlock$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/blocks/$AbstractRopeBlock"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $RopeBlock extends $AbstractRopeBlock {
static readonly "NORTH": $BooleanProperty
static readonly "SOUTH": $BooleanProperty
static readonly "WEST": $BooleanProperty
static readonly "EAST": $BooleanProperty
static readonly "UP": $BooleanProperty
static readonly "DOWN": $BooleanProperty
static readonly "FACING_TO_PROPERTY_MAP": $Map<($Direction), ($BooleanProperty)>
static readonly "COLLISION_SHAPE": $VoxelShape
static readonly "KNOT": $BooleanProperty
static readonly "WATERLOGGED": $BooleanProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(properties: $BlockBehaviour$Properties$Type)

public "setConnection"(dir: $Direction$Type, state: $BlockState$Type, value: boolean): $BlockState
public "hasConnection"(dir: $Direction$Type, state: $BlockState$Type): boolean
public static "canConnectDown"(downState: $BlockState$Type): boolean
public static "isSupportingCeiling"(upState: $BlockState$Type, pos: $BlockPos$Type, world: $LevelReader$Type): boolean
public static "isSupportingCeiling"(pos: $BlockPos$Type, world: $LevelReader$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RopeBlock$Type = ($RopeBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RopeBlock_ = $RopeBlock$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/events/overrides/$CompassItemBehavior" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$ItemUseOverride, $ItemUseOverride$Type} from "packages/net/mehvahdjukaar/supplementaries/common/events/overrides/$ItemUseOverride"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $CompassItemBehavior implements $ItemUseOverride {


public "isEnabled"(): boolean
public "appliesToItem"(item: $Item$Type): boolean
public "tryPerformingAction"(world: $Level$Type, player: $Player$Type, hand: $InteractionHand$Type, stack: $ItemStack$Type, hit: $BlockHitResult$Type): $InteractionResult
public "getTooltip"(): $MutableComponent
get "enabled"(): boolean
get "tooltip"(): $MutableComponent
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CompassItemBehavior$Type = ($CompassItemBehavior);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CompassItemBehavior_ = $CompassItemBehavior$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/items/$AltimeterItem" {
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$ICustomItemRendererProvider, $ICustomItemRendererProvider$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/$ICustomItemRendererProvider"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ItemStackRenderer, $ItemStackRenderer$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/$ItemStackRenderer"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$InteractionResultHolder, $InteractionResultHolder$Type} from "packages/net/minecraft/world/$InteractionResultHolder"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $AltimeterItem extends $Item implements $ICustomItemRendererProvider {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(properties: $Item$Properties$Type)

public "use"(level: $Level$Type, player: $Player$Type, usedHand: $InteractionHand$Type): $InteractionResultHolder<($ItemStack)>
public "getRendererFactory"(): $Supplier<($ItemStackRenderer)>
/**
 * 
 * @deprecated
 */
public "registerFabricRenderer"(): void
get "rendererFactory"(): $Supplier<($ItemStackRenderer)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AltimeterItem$Type = ($AltimeterItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AltimeterItem_ = $AltimeterItem$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/block/$IRecolorable" {
import {$DyeColor, $DyeColor$Type} from "packages/net/minecraft/world/item/$DyeColor"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export interface $IRecolorable {

 "tryRecolor"(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: $DyeColor$Type): boolean
 "isDefaultColor"(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type): boolean
}

export namespace $IRecolorable {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IRecolorable$Type = ($IRecolorable);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IRecolorable_ = $IRecolorable$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/blocks/$CandleHolderBlock" {
import {$IntegerProperty, $IntegerProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$IntegerProperty"
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Mirror, $Mirror$Type} from "packages/net/minecraft/world/level/block/$Mirror"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$PathComputationType, $PathComputationType$Type} from "packages/net/minecraft/world/level/pathfinder/$PathComputationType"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$DyeColor, $DyeColor$Type} from "packages/net/minecraft/world/item/$DyeColor"
import {$LightUpWaterBlock, $LightUpWaterBlock$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/blocks/$LightUpWaterBlock"
import {$List, $List$Type} from "packages/java/util/$List"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"
import {$DirectionProperty, $DirectionProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$DirectionProperty"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$ParticleType, $ParticleType$Type} from "packages/net/minecraft/core/particles/$ParticleType"
import {$CollisionContext, $CollisionContext$Type} from "packages/net/minecraft/world/phys/shapes/$CollisionContext"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$IColored, $IColored$Type} from "packages/net/mehvahdjukaar/moonlight/api/block/$IColored"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$EnumProperty, $EnumProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$EnumProperty"
import {$AttachFace, $AttachFace$Type} from "packages/net/minecraft/world/level/block/state/properties/$AttachFace"
import {$Rotation, $Rotation$Type} from "packages/net/minecraft/world/level/block/$Rotation"

export class $CandleHolderBlock extends $LightUpWaterBlock implements $IColored {
static readonly "FACING": $DirectionProperty
static readonly "FACE": $EnumProperty<($AttachFace)>
static readonly "CANDLES": $IntegerProperty
static readonly "WATERLOGGED": $BooleanProperty
static readonly "LIT": $BooleanProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(color: $DyeColor$Type, properties: $BlockBehaviour$Properties$Type)
constructor(color: $DyeColor$Type, properties: $BlockBehaviour$Properties$Type, particle: $Supplier$Type<($ParticleType$Type<(any)>)>)

public "supportsBlankColor"(): boolean
public "getStateForPlacement"(context: $BlockPlaceContext$Type): $BlockState
public "appendHoverText"(stack: $ItemStack$Type, worldIn: $BlockGetter$Type, tooltip: $List$Type<($Component$Type)>, flagIn: $TooltipFlag$Type): void
public "getColor"(): $DyeColor
public "isPathfindable"(state: $BlockState$Type, worldIn: $BlockGetter$Type, pos: $BlockPos$Type, type: $PathComputationType$Type): boolean
public "updateShape"(stateIn: $BlockState$Type, facing: $Direction$Type, facingState: $BlockState$Type, worldIn: $LevelAccessor$Type, currentPos: $BlockPos$Type, facingPos: $BlockPos$Type): $BlockState
public "canBeReplaced"(state: $BlockState$Type, useContext: $BlockPlaceContext$Type): boolean
public "rotate"(state: $BlockState$Type, rot: $Rotation$Type): $BlockState
public "mirror"(state: $BlockState$Type, mirrorIn: $Mirror$Type): $BlockState
public "canSurvive"(state: $BlockState$Type, worldIn: $LevelReader$Type, pos: $BlockPos$Type): boolean
public "getCollisionShape"(state: $BlockState$Type, level: $BlockGetter$Type, pos: $BlockPos$Type, context: $CollisionContext$Type): $VoxelShape
public "getShape"(state: $BlockState$Type, worldIn: $BlockGetter$Type, pos: $BlockPos$Type, context: $CollisionContext$Type): $VoxelShape
public "animateTick"(state: $BlockState$Type, level: $Level$Type, pos: $BlockPos$Type, rand: $RandomSource$Type): void
public static "isSideSolidForDirection"(reader: $LevelReader$Type, pos: $BlockPos$Type, direction: $Direction$Type): boolean
public "playExtinguishSound"(world: $LevelAccessor$Type, pos: $BlockPos$Type): void
public "spawnSmokeParticles"(state: $BlockState$Type, pos: $BlockPos$Type, level: $LevelAccessor$Type): void
public "canBeExtinguishedBy"(item: $ItemStack$Type): boolean
/**
 * 
 * @deprecated
 */
public "changeItemColor"(color: $DyeColor$Type): $Item
get "color"(): $DyeColor
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CandleHolderBlock$Type = ($CandleHolderBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CandleHolderBlock_ = $CandleHolderBlock$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/events/behaviors/$CauldronDyeWater" {
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$BlockUse, $BlockUse$Type} from "packages/net/mehvahdjukaar/amendments/events/behaviors/$BlockUse"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"

export class $CauldronDyeWater implements $BlockUse {

constructor()

public "isEnabled"(): boolean
public "appliesToBlock"(block: $Block$Type): boolean
public "tryPerformingAction"(state: $BlockState$Type, pos: $BlockPos$Type, level: $Level$Type, player: $Player$Type, hand: $InteractionHand$Type, stack: $ItemStack$Type, hit: $BlockHitResult$Type): $InteractionResult
public "altersWorld"(): boolean
get "enabled"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CauldronDyeWater$Type = ($CauldronDyeWater);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CauldronDyeWater_ = $CauldronDyeWater$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/misc/globe/$GlobeData" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$SavedData, $SavedData$Type} from "packages/net/minecraft/world/level/saveddata/$SavedData"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"

export class $GlobeData extends $SavedData {
static readonly "DATA_NAME": string
readonly "globePixels": ((byte)[])[]
readonly "seed": long

constructor(seed: long)
constructor(tag: $CompoundTag$Type)

public static "get"(world: $Level$Type): $GlobeData
public static "set"(level: $ServerLevel$Type, pData: $GlobeData$Type): void
public "sendToClient"(world: $Level$Type): void
public "save"(nbt: $CompoundTag$Type): $CompoundTag
public static "setClientData"(data: $GlobeData$Type): void
public static "sendDataToClient"(player: $ServerPlayer$Type): void
set "clientData"(value: $GlobeData$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GlobeData$Type = ($GlobeData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GlobeData_ = $GlobeData$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/integration/forge/$FlywheelCompatImpl" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $FlywheelCompatImpl {

constructor()

public static "setupClient"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FlywheelCompatImpl$Type = ($FlywheelCompatImpl);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FlywheelCompatImpl_ = $FlywheelCompatImpl$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/block_models/$FrameBlockBakedModel" {
import {$ModelData, $ModelData$Type} from "packages/net/minecraftforge/client/model/data/$ModelData"
import {$ModelState, $ModelState$Type} from "packages/net/minecraft/client/resources/model/$ModelState"
import {$ItemTransforms, $ItemTransforms$Type} from "packages/net/minecraft/client/renderer/block/model/$ItemTransforms"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$ExtraModelData, $ExtraModelData$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$ExtraModelData"
import {$CustomBakedModel, $CustomBakedModel$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$CustomBakedModel"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BakedModel, $BakedModel$Type} from "packages/net/minecraft/client/resources/model/$BakedModel"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$RenderType, $RenderType$Type} from "packages/net/minecraft/client/renderer/$RenderType"
import {$ItemOverrides, $ItemOverrides$Type} from "packages/net/minecraft/client/renderer/block/model/$ItemOverrides"
import {$ItemDisplayContext, $ItemDisplayContext$Type} from "packages/net/minecraft/world/item/$ItemDisplayContext"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$List, $List$Type} from "packages/java/util/$List"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$ChunkRenderTypeSet, $ChunkRenderTypeSet$Type} from "packages/net/minecraftforge/client/$ChunkRenderTypeSet"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockAndTintGetter, $BlockAndTintGetter$Type} from "packages/net/minecraft/world/level/$BlockAndTintGetter"
import {$BakedQuad, $BakedQuad$Type} from "packages/net/minecraft/client/renderer/block/model/$BakedQuad"
import {$TextureAtlasSprite, $TextureAtlasSprite$Type} from "packages/net/minecraft/client/renderer/texture/$TextureAtlasSprite"

export class $FrameBlockBakedModel implements $CustomBakedModel {

constructor(overlay: $BakedModel$Type, state: $ModelState$Type)

public "usesBlockLight"(): boolean
public "isGui3d"(): boolean
public "getBlockQuads"(state: $BlockState$Type, side: $Direction$Type, rand: $RandomSource$Type, renderType: $RenderType$Type, data: $ExtraModelData$Type): $List<($BakedQuad)>
public "getBlockParticle"(extraModelData: $ExtraModelData$Type): $TextureAtlasSprite
public "isCustomRenderer"(): boolean
public "getOverrides"(): $ItemOverrides
public "getTransforms"(): $ItemTransforms
public "useAmbientOcclusion"(): boolean
public "getParticleIcon"(): $TextureAtlasSprite
public "getQuads"(state: $BlockState$Type, side: $Direction$Type, rand: $RandomSource$Type): $List<(any)>
public "getQuads"(state: $BlockState$Type, side: $Direction$Type, rand: $RandomSource$Type, modelData: $ModelData$Type, type: $RenderType$Type): $List<(any)>
public "getParticleIcon"(data: $ModelData$Type): $TextureAtlasSprite
public "getModelData"(level: $BlockAndTintGetter$Type, pos: $BlockPos$Type, state: $BlockState$Type, modelData: $ModelData$Type): $ModelData
public "getModelData"(originalData: $ExtraModelData$Type, stack: $ItemStack$Type): $ExtraModelData
public "getModelData"(tileData: $ExtraModelData$Type, pos: $BlockPos$Type, state: $BlockState$Type, level: $BlockAndTintGetter$Type): $ExtraModelData
public "useAmbientOcclusion"(arg0: $BlockState$Type, arg1: $RenderType$Type): boolean
public "useAmbientOcclusion"(arg0: $BlockState$Type): boolean
public "getRenderTypes"(arg0: $ItemStack$Type, arg1: boolean): $List<($RenderType)>
public "getRenderTypes"(arg0: $BlockState$Type, arg1: $RandomSource$Type, arg2: $ModelData$Type): $ChunkRenderTypeSet
public "getRenderPasses"(arg0: $ItemStack$Type, arg1: boolean): $List<($BakedModel)>
public "applyTransform"(arg0: $ItemDisplayContext$Type, arg1: $PoseStack$Type, arg2: boolean): $BakedModel
public "useAmbientOcclusionWithLightEmission"(arg0: $BlockState$Type, arg1: $RenderType$Type): boolean
get "gui3d"(): boolean
get "customRenderer"(): boolean
get "overrides"(): $ItemOverrides
get "transforms"(): $ItemTransforms
get "particleIcon"(): $TextureAtlasSprite
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FrameBlockBakedModel$Type = ($FrameBlockBakedModel);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FrameBlockBakedModel_ = $FrameBlockBakedModel$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/events/forge/$ClientEventsForge" {
import {$InputEvent$Key, $InputEvent$Key$Type} from "packages/net/minecraftforge/client/event/$InputEvent$Key"
import {$RenderGuiOverlayEvent$Pre, $RenderGuiOverlayEvent$Pre$Type} from "packages/net/minecraftforge/client/event/$RenderGuiOverlayEvent$Pre"
import {$InputEvent$InteractionKeyMappingTriggered, $InputEvent$InteractionKeyMappingTriggered$Type} from "packages/net/minecraftforge/client/event/$InputEvent$InteractionKeyMappingTriggered"
import {$RegisterGuiOverlaysEvent, $RegisterGuiOverlaysEvent$Type} from "packages/net/minecraftforge/client/event/$RegisterGuiOverlaysEvent"
import {$ViewportEvent$ComputeCameraAngles, $ViewportEvent$ComputeCameraAngles$Type} from "packages/net/minecraftforge/client/event/$ViewportEvent$ComputeCameraAngles"
import {$RenderHandEvent, $RenderHandEvent$Type} from "packages/net/minecraftforge/client/event/$RenderHandEvent"
import {$EntityRenderersEvent$CreateSkullModels, $EntityRenderersEvent$CreateSkullModels$Type} from "packages/net/minecraftforge/client/event/$EntityRenderersEvent$CreateSkullModels"
import {$ItemTooltipEvent, $ItemTooltipEvent$Type} from "packages/net/minecraftforge/event/entity/player/$ItemTooltipEvent"
import {$MovementInputUpdateEvent, $MovementInputUpdateEvent$Type} from "packages/net/minecraftforge/client/event/$MovementInputUpdateEvent"
import {$RenderTooltipEvent$GatherComponents, $RenderTooltipEvent$GatherComponents$Type} from "packages/net/minecraftforge/client/event/$RenderTooltipEvent$GatherComponents"
import {$TextureStitchEvent$Post, $TextureStitchEvent$Post$Type} from "packages/net/minecraftforge/client/event/$TextureStitchEvent$Post"
import {$ScreenEvent$Init$Post, $ScreenEvent$Init$Post$Type} from "packages/net/minecraftforge/client/event/$ScreenEvent$Init$Post"
import {$EntityRenderersEvent$AddLayers, $EntityRenderersEvent$AddLayers$Type} from "packages/net/minecraftforge/client/event/$EntityRenderersEvent$AddLayers"
import {$InputEvent$MouseScrollingEvent, $InputEvent$MouseScrollingEvent$Type} from "packages/net/minecraftforge/client/event/$InputEvent$MouseScrollingEvent"
import {$ScreenEvent$Opening, $ScreenEvent$Opening$Type} from "packages/net/minecraftforge/client/event/$ScreenEvent$Opening"
import {$TickEvent$ClientTickEvent, $TickEvent$ClientTickEvent$Type} from "packages/net/minecraftforge/event/$TickEvent$ClientTickEvent"
import {$SoundEvent$SoundSourceEvent, $SoundEvent$SoundSourceEvent$Type} from "packages/net/minecraftforge/client/event/sound/$SoundEvent$SoundSourceEvent"

export class $ClientEventsForge {

constructor()

public static "init"(): void
public static "onGatherTooltipComponents"(event: $RenderTooltipEvent$GatherComponents$Type): void
public static "clientTick"(event: $TickEvent$ClientTickEvent$Type): void
public static "onRegisterSkullModels"(event: $EntityRenderersEvent$CreateSkullModels$Type): void
public static "onRenderGuiOverlayPre"(event: $RenderGuiOverlayEvent$Pre$Type): void
public static "onMouseScrolled"(event: $InputEvent$MouseScrollingEvent$Type): void
public static "onAddLayers"(event: $EntityRenderersEvent$AddLayers$Type): void
public static "onClickInput"(event: $InputEvent$InteractionKeyMappingTriggered$Type): void
public static "onCameraSetup"(event: $ViewportEvent$ComputeCameraAngles$Type): void
public static "itemTooltip"(event: $ItemTooltipEvent$Type): void
public static "renderHandEvent"(event: $RenderHandEvent$Type): void
public static "onKeyPress"(event: $InputEvent$Key$Type): void
public static "onKeyPress"(event: $MovementInputUpdateEvent$Type): void
public static "onPackReload"(event: $TextureStitchEvent$Post$Type): void
public static "onAddGuiLayers"(event: $RegisterGuiOverlaysEvent$Type): void
public static "screenInit"(event: $ScreenEvent$Init$Post$Type): void
public static "onSoundPlay"(event: $SoundEvent$SoundSourceEvent$Type): void
public static "onPlayerDeath"(event: $ScreenEvent$Opening$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientEventsForge$Type = ($ClientEventsForge);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientEventsForge_ = $ClientEventsForge$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/fluids/$SoftFluidStack" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Fluid, $Fluid$Type} from "packages/net/minecraft/world/level/material/$Fluid"
import {$Tag, $Tag$Type} from "packages/net/minecraft/nbt/$Tag"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"
import {$Codec, $Codec$Type} from "packages/com/mojang/serialization/$Codec"
import {$SoftFluid, $SoftFluid$Type} from "packages/net/mehvahdjukaar/moonlight/api/fluids/$SoftFluid"
import {$FluidState, $FluidState$Type} from "packages/net/minecraft/world/level/material/$FluidState"
import {$Holder, $Holder$Type} from "packages/net/minecraft/core/$Holder"
import {$FluidContainerList, $FluidContainerList$Type} from "packages/net/mehvahdjukaar/moonlight/api/fluids/$FluidContainerList"
import {$FluidContainerList$Category, $FluidContainerList$Category$Type} from "packages/net/mehvahdjukaar/moonlight/api/fluids/$FluidContainerList$Category"
import {$FoodProvider, $FoodProvider$Type} from "packages/net/mehvahdjukaar/moonlight/api/fluids/$FoodProvider"
import {$Pair, $Pair$Type} from "packages/com/mojang/datafixers/util/$Pair"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockAndTintGetter, $BlockAndTintGetter$Type} from "packages/net/minecraft/world/level/$BlockAndTintGetter"

export class $SoftFluidStack {
static readonly "CODEC": $Codec<($SoftFluidStack)>

/**
 * 
 * @deprecated
 */
constructor(fluid: $Holder$Type<($SoftFluid$Type)>)
/**
 * 
 * @deprecated
 */
constructor(fluid: $Holder$Type<($SoftFluid$Type)>, count: integer)
/**
 * 
 * @deprecated
 */
constructor(fluid: $Holder$Type<($SoftFluid$Type)>, count: integer, tag: $CompoundTag$Type)

public "equals"(o: any): boolean
public "toString"(): string
public "hashCode"(): integer
public static "load"(tag: $CompoundTag$Type): $SoftFluidStack
public "isEmpty"(): boolean
public "split"(amount: integer): $SoftFluidStack
public static "of"(fluid: $Holder$Type<($SoftFluid$Type)>, count: integer): $SoftFluidStack
public static "of"(fluid: $Holder$Type<($SoftFluid$Type)>, count: integer, tag: $CompoundTag$Type): $SoftFluidStack
public static "of"(fluid: $Holder$Type<($SoftFluid$Type)>): $SoftFluidStack
public static "empty"(): $SoftFluidStack
public "save"(compoundTag: $CompoundTag$Type): $CompoundTag
public "copy"(): $SoftFluidStack
public "is"(tag: $TagKey$Type<($SoftFluid$Type)>): boolean
public "is"(fluid: $SoftFluid$Type): boolean
public "is"(fluid: $Holder$Type<($SoftFluid$Type)>): boolean
public "grow"(amount: integer): void
public "getCount"(): integer
public "getTag"(): $CompoundTag
public "getStillColor"(world: $BlockAndTintGetter$Type, pos: $BlockPos$Type): integer
public "addTagElement"(key: string, tag: $Tag$Type): void
public "getParticleColor"(world: $BlockAndTintGetter$Type, pos: $BlockPos$Type): integer
public "getFlowingColor"(world: $BlockAndTintGetter$Type, pos: $BlockPos$Type): integer
public "toItem"(emptyContainer: $ItemStack$Type, dontModifyStack: boolean): $Pair<($ItemStack), ($FluidContainerList$Category)>
public static "fromFluid"(fluid: $FluidState$Type): $SoftFluidStack
public static "fromFluid"(fluid: $Fluid$Type, amount: integer, tag: $CompoundTag$Type): $SoftFluidStack
public "getOrCreateTagElement"(key: string): $CompoundTag
public "isEquivalent"(fluid: $Fluid$Type): boolean
public static "bucket"(fluid: $Holder$Type<($SoftFluid$Type)>): $SoftFluidStack
public "getContainerList"(): $FluidContainerList
public "getFoodProvider"(): $FoodProvider
public "getVanillaFluid"(): $Fluid
public "hasTag"(): boolean
public static "fromItem"(itemStack: $ItemStack$Type): $Pair<($SoftFluidStack), ($FluidContainerList$Category)>
public "copyWithCount"(count: integer): $SoftFluidStack
public static "bowl"(fluid: $Holder$Type<($SoftFluid$Type)>): $SoftFluidStack
public static "bottle"(fluid: $Holder$Type<($SoftFluid$Type)>): $SoftFluidStack
public "shrink"(amount: integer): void
public "setTag"(tag: $CompoundTag$Type): void
/**
 * 
 * @deprecated
 */
public "getFluid"(): $Holder<($SoftFluid)>
public "isFluidStackTagEqual"(other: $SoftFluidStack$Type): boolean
public "fluid"(): $SoftFluid
public "isFluidEqual"(other: $SoftFluidStack$Type): boolean
public "getOrCreateTag"(): $CompoundTag
public static "invalidateEmptyInstance"(): void
public "getHolder"(): $Holder<($SoftFluid)>
public "setCount"(count: integer): void
get "count"(): integer
get "tag"(): $CompoundTag
get "containerList"(): $FluidContainerList
get "foodProvider"(): $FoodProvider
get "vanillaFluid"(): $Fluid
set "tag"(value: $CompoundTag$Type)
get "orCreateTag"(): $CompoundTag
get "holder"(): $Holder<($SoftFluid)>
set "count"(value: integer)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SoftFluidStack$Type = ($SoftFluidStack);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SoftFluidStack_ = $SoftFluidStack$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/renderers/tiles/$WindVaneBlockTileRenderer" {
import {$BlockEntityRendererProvider$Context, $BlockEntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/blockentity/$BlockEntityRendererProvider$Context"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$WindVaneBlockTile, $WindVaneBlockTile$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$WindVaneBlockTile"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$LayerDefinition, $LayerDefinition$Type} from "packages/net/minecraft/client/model/geom/builders/$LayerDefinition"
import {$BlockEntityRenderer, $BlockEntityRenderer$Type} from "packages/net/minecraft/client/renderer/blockentity/$BlockEntityRenderer"

export class $WindVaneBlockTileRenderer implements $BlockEntityRenderer<($WindVaneBlockTile)> {

constructor(context: $BlockEntityRendererProvider$Context$Type)

public "render"(tile: $WindVaneBlockTile$Type, partialTicks: float, matrixStackIn: $PoseStack$Type, bufferIn: $MultiBufferSource$Type, combinedLightIn: integer, combinedOverlayIn: integer): void
public static "createMesh"(): $LayerDefinition
public "shouldRender"(arg0: $WindVaneBlockTile$Type, arg1: $Vec3$Type): boolean
public "shouldRenderOffScreen"(arg0: $WindVaneBlockTile$Type): boolean
public "getViewDistance"(): integer
get "viewDistance"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WindVaneBlockTileRenderer$Type = ($WindVaneBlockTileRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WindVaneBlockTileRenderer_ = $WindVaneBlockTileRenderer$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/fluids/$SoftFluidRegistry" {
import {$RegistryAccess, $RegistryAccess$Type} from "packages/net/minecraft/core/$RegistryAccess"
import {$Holder, $Holder$Type} from "packages/net/minecraft/core/$Holder"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$Registry, $Registry$Type} from "packages/net/minecraft/core/$Registry"
import {$Holder$Reference, $Holder$Reference$Type} from "packages/net/minecraft/core/$Holder$Reference"
import {$ResourceKey, $ResourceKey$Type} from "packages/net/minecraft/resources/$ResourceKey"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$SoftFluid, $SoftFluid$Type} from "packages/net/mehvahdjukaar/moonlight/api/fluids/$SoftFluid"
import {$Map$Entry, $Map$Entry$Type} from "packages/java/util/$Map$Entry"

export class $SoftFluidRegistry {
static readonly "KEY": $ResourceKey<($Registry<($SoftFluid)>)>

constructor()

public static "empty"(): $SoftFluid
public static "getEntries"(): $Set<($Map$Entry<($ResourceKey<($SoftFluid)>), ($SoftFluid)>)>
public static "getEmpty"(): $Holder<($SoftFluid)>
public static "getHolders"(): $Collection<($Holder$Reference<($SoftFluid)>)>
public static "getOptionalHolder"(id: $ResourceLocation$Type): $Optional<($Holder$Reference<($SoftFluid)>)>
public static "hackyGetRegistry"(): $Registry<($SoftFluid)>
public static "getRegistry"(registryAccess: $RegistryAccess$Type): $Registry<($SoftFluid)>
public static "getHolder"(id: $ResourceLocation$Type): $Holder<($SoftFluid)>
public static "getValues"(): $Collection<($SoftFluid)>
get "entries"(): $Set<($Map$Entry<($ResourceKey<($SoftFluid)>), ($SoftFluid)>)>
get "holders"(): $Collection<($Holder$Reference<($SoftFluid)>)>
get "values"(): $Collection<($SoftFluid)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SoftFluidRegistry$Type = ($SoftFluidRegistry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SoftFluidRegistry_ = $SoftFluidRegistry$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/fluids/$SoftFluidTank" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$InteractionResultHolder, $InteractionResultHolder$Type} from "packages/net/minecraft/world/$InteractionResultHolder"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$SoftFluidStack, $SoftFluidStack$Type} from "packages/net/mehvahdjukaar/moonlight/api/fluids/$SoftFluidStack"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockAndTintGetter, $BlockAndTintGetter$Type} from "packages/net/minecraft/world/level/$BlockAndTintGetter"
import {$SoftFluid, $SoftFluid$Type} from "packages/net/mehvahdjukaar/moonlight/api/fluids/$SoftFluid"

export class $SoftFluidTank {
static readonly "BOTTLE_COUNT": integer
static readonly "BOWL_COUNT": integer
static readonly "BUCKET_COUNT": integer


public "load"(compound: $CompoundTag$Type): void
public "clear"(): void
public "isEmpty"(): boolean
public "save"(compound: $CompoundTag$Type): $CompoundTag
public static "create"(capacity: integer): $SoftFluidTank
public "getSpace"(): integer
public "getCapacity"(): integer
/**
 * 
 * @deprecated
 */
public "getParticleColor"(world: $BlockAndTintGetter$Type, pos: $BlockPos$Type): integer
public "getComparatorOutput"(): integer
public "isFull"(): boolean
public "containsFood"(): boolean
public "tryDrinkUpFluid"(player: $Player$Type, world: $Level$Type): boolean
public "getCachedParticleColor"(world: $BlockAndTintGetter$Type, pos: $BlockPos$Type): integer
public "addFluid"(stack: $SoftFluidStack$Type, simulate: boolean): integer
/**
 * 
 * @deprecated
 */
public "addFluid"(stack: $SoftFluidStack$Type): boolean
public "getHeight"(maxHeight: float): float
public "removeFluid"(amount: integer, simulate: boolean): $SoftFluidStack
/**
 * 
 * @deprecated
 */
public "getTintColor"(world: $BlockAndTintGetter$Type, pos: $BlockPos$Type): integer
public "getCachedFlowingColor"(world: $BlockAndTintGetter$Type, pos: $BlockPos$Type): integer
public static "getLiquidCountFromItem"(i: $Item$Type): integer
public "isFluidCompatible"(fluidStack: $SoftFluidStack$Type): boolean
public "refreshTintCache"(): void
public "drainItem"(filledContainerStack: $ItemStack$Type, world: $Level$Type, pos: $BlockPos$Type, simulate: boolean): $InteractionResultHolder<($ItemStack)>
public "drainItem"(filledContainer: $ItemStack$Type, level: $Level$Type, pos: $BlockPos$Type, simulate: boolean, playSound: boolean): $InteractionResultHolder<($ItemStack)>
public "copyContent"(other: $SoftFluidTank$Type): void
/**
 * 
 * @deprecated
 */
public "getFlowingTint"(world: $BlockAndTintGetter$Type, pos: $BlockPos$Type): integer
public "fillBowl"(world: $Level$Type, pos: $BlockPos$Type): $InteractionResultHolder<($ItemStack)>
public "fillBucket"(world: $Level$Type, pos: $BlockPos$Type): $InteractionResultHolder<($ItemStack)>
public "getFluidCount"(): integer
/**
 * 
 * @deprecated
 */
public "canAddSoftFluid"(fluidStack: $SoftFluidStack$Type): boolean
/**
 * 
 * @deprecated
 */
public "transferFluid"(destination: $SoftFluidTank$Type): boolean
/**
 * 
 * @deprecated
 */
public "transferFluid"(destination: $SoftFluidTank$Type, amount: integer): boolean
public "getFluidValue"(): $SoftFluid
public "capCapacity"(): void
public "getCachedStillColor"(world: $BlockAndTintGetter$Type, pos: $BlockPos$Type): integer
public "setFluid"(fluid: $SoftFluidStack$Type): void
public "fillBottle"(world: $Level$Type, pos: $BlockPos$Type): $InteractionResultHolder<($ItemStack)>
public "fillItem"(emptyContainer: $ItemStack$Type, level: $Level$Type, pos: $BlockPos$Type, simulate: boolean, playSound: boolean): $InteractionResultHolder<($ItemStack)>
public "fillItem"(emptyContainer: $ItemStack$Type, world: $Level$Type, pos: $BlockPos$Type, simulate: boolean): $InteractionResultHolder<($ItemStack)>
public "interactWithPlayer"(player: $Player$Type, hand: $InteractionHand$Type, world: $Level$Type, pos: $BlockPos$Type): boolean
public "interactWithItem"(stack: $ItemStack$Type, world: $Level$Type, pos: $BlockPos$Type, simulate: boolean): $ItemStack
public "getFluid"(): $SoftFluidStack
get "empty"(): boolean
get "space"(): integer
get "capacity"(): integer
get "comparatorOutput"(): integer
get "full"(): boolean
get "fluidCount"(): integer
get "fluidValue"(): $SoftFluid
set "fluid"(value: $SoftFluidStack$Type)
get "fluid"(): $SoftFluidStack
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SoftFluidTank$Type = ($SoftFluidTank);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SoftFluidTank_ = $SoftFluidTank$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/api/$ICatchableMob" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Holder, $Holder$Type} from "packages/net/minecraft/core/$Holder"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$CapturedMobInstance, $CapturedMobInstance$Type} from "packages/net/mehvahdjukaar/supplementaries/api/$CapturedMobInstance"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$SoftFluid, $SoftFluid$Type} from "packages/net/mehvahdjukaar/moonlight/api/fluids/$SoftFluid"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export interface $ICatchableMob {

 "onCaptured"(entity: $Entity$Type, player: $Player$Type, stack: $ItemStack$Type): void
 "shouldHover"(self: $Entity$Type, waterlogged: boolean): boolean
 "renderAs2DFish"(): boolean
 "shouldRenderWithFluid"(): $Optional<($Holder<($SoftFluid)>)>
 "getHitBoxWidthIncrement"(self: $Entity$Type): float
 "createCapturedMobInstance"<T extends $Entity>(self: T, containerWidth: float, containerHeight: float): $CapturedMobInstance<(T)>
 "getHitBoxHeightIncrement"(self: $Entity$Type): float
 "getFishTextureIndex"(): integer
 "canBeCaughtWithItem"(self: $Entity$Type, item: $Item$Type, player: $Player$Type): boolean
 "getLightLevel"(world: $Level$Type, pos: $BlockPos$Type): integer
}

export namespace $ICatchableMob {
const DEFAULT: $ICatchableMob
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ICatchableMob$Type = ($ICatchableMob);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ICatchableMob_ = $ICatchableMob$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/items/$QuiverItem$Data" {
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export interface $QuiverItem$Data {

 "removeOneStack"(): $Optional<($ItemStack)>
 "getSelectedSlot"(): integer
 "getSelected"(supporterArrows: $Predicate$Type<($ItemStack$Type)>): $ItemStack
 "getSelected"(): $ItemStack
 "cycle"(): boolean
 "cycle"(clockWise: boolean): boolean
 "cycle"(slotsMoved: integer): boolean
 "getContentView"(): $List<($ItemStack)>
 "updateSelectedIfNeeded"(): void
 "getSelectedArrowCount"(): integer
 "consumeArrow"(): void
 "setSelectedSlot"(arg0: integer): void
 "canAcceptItem"(toInsert: $ItemStack$Type): boolean
 "tryAdding"(arg0: $ItemStack$Type, arg1: boolean): $ItemStack
 "tryAdding"(pInsertedStack: $ItemStack$Type): $ItemStack
}

export namespace $QuiverItem$Data {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $QuiverItem$Data$Type = ($QuiverItem$Data);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $QuiverItem$Data_ = $QuiverItem$Data$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/core/$Moonlight" {
import {$RegistryAccess, $RegistryAccess$Type} from "packages/net/minecraft/core/$RegistryAccess"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$MapItemSavedData, $MapItemSavedData$Type} from "packages/net/minecraft/world/level/saveddata/maps/$MapItemSavedData"
import {$Logger, $Logger$Type} from "packages/org/apache/logging/log4j/$Logger"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$ThreadLocal, $ThreadLocal$Type} from "packages/java/lang/$ThreadLocal"

export class $Moonlight {
static readonly "MOD_ID": string
static readonly "LOGGER": $Logger
static readonly "HAS_BEEN_INIT": boolean
static readonly "CAN_EARLY_RELOAD_HACK": $ThreadLocal<(boolean)>

constructor()

public static "res"(name: string): $ResourceLocation
public static "afterDataReload"(registryAccess: $RegistryAccess$Type): void
public static "beforeServerStart"(): void
public static "assertInitPhase"(): void
public static "commonInit"(): void
public static "onPlayerCloned"(oldPlayer: $Player$Type, newPlayer: $Player$Type, wasDeath: boolean): void
public static "getMapDataFromKnownKeys"(level: $ServerLevel$Type, mapId: integer): $MapItemSavedData
public static "checkDatapackRegistry"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Moonlight$Type = ($Moonlight);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Moonlight_ = $Moonlight$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/platform/configs/forge/$ConfigBuilderImpl$StringJsonConfigValue" {
import {$JsonElement, $JsonElement$Type} from "packages/com/google/gson/$JsonElement"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$ConfigBuilderImpl, $ConfigBuilderImpl$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/configs/forge/$ConfigBuilderImpl"

export class $ConfigBuilderImpl$StringJsonConfigValue implements $Supplier<($JsonElement)> {


public "get"(): $JsonElement
public static "define"(cfg: $ConfigBuilderImpl$Type, path: string, defaultValue: $JsonElement$Type): $ConfigBuilderImpl$StringJsonConfigValue
public static "define"(cfg: $ConfigBuilderImpl$Type, path: string, defaultValueSupplier: $Supplier$Type<($JsonElement$Type)>): $ConfigBuilderImpl$StringJsonConfigValue
public "hasBeenReset"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ConfigBuilderImpl$StringJsonConfigValue$Type = ($ConfigBuilderImpl$StringJsonConfigValue);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ConfigBuilderImpl$StringJsonConfigValue_ = $ConfigBuilderImpl$StringJsonConfigValue$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/blocks/$StructureTempBlock" {
import {$EntityBlock, $EntityBlock$Type} from "packages/net/minecraft/world/level/block/$EntityBlock"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$BlockEntityTicker, $BlockEntityTicker$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityTicker"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$GameEventListener, $GameEventListener$Type} from "packages/net/minecraft/world/level/gameevent/$GameEventListener"
import {$RenderShape, $RenderShape$Type} from "packages/net/minecraft/world/level/block/$RenderShape"

export class $StructureTempBlock extends $Block implements $EntityBlock {
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(properties: $BlockBehaviour$Properties$Type)

public "getTicker"<T extends $BlockEntity>(pLevel: $Level$Type, pState: $BlockState$Type, pBlockEntityType: $BlockEntityType$Type<(T)>): $BlockEntityTicker<(T)>
public "getRenderShape"(state: $BlockState$Type): $RenderShape
public "newBlockEntity"(pPos: $BlockPos$Type, pState: $BlockState$Type): $BlockEntity
public "getListener"<T extends $BlockEntity>(arg0: $ServerLevel$Type, arg1: T): $GameEventListener
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $StructureTempBlock$Type = ($StructureTempBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $StructureTempBlock_ = $StructureTempBlock$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/blocks/$FlippedBlock" {
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"

export class $FlippedBlock extends $Block {
static readonly "FLIPPED": $BooleanProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(properties: $BlockBehaviour$Properties$Type)

public "getStateForPlacement"(context: $BlockPlaceContext$Type): $BlockState
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FlippedBlock$Type = ($FlippedBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FlippedBlock_ = $FlippedBlock$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/dispenser/$FakePlayerUseItemBehavior" {
import {$DispenserHelper$AdditionalDispenserBehavior, $DispenserHelper$AdditionalDispenserBehavior$Type} from "packages/net/mehvahdjukaar/moonlight/api/util/$DispenserHelper$AdditionalDispenserBehavior"
import {$BlockSource, $BlockSource$Type} from "packages/net/minecraft/core/$BlockSource"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $FakePlayerUseItemBehavior extends $DispenserHelper$AdditionalDispenserBehavior {


public static "bootStrap"(): void
public static "setEntityPokingOutOfBlock"(arg0: $BlockSource$Type, arg1: $Entity$Type, arg2: $Direction$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FakePlayerUseItemBehavior$Type = ($FakePlayerUseItemBehavior);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FakePlayerUseItemBehavior_ = $FakePlayerUseItemBehavior$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/events/$ClientEvents" {
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Minecraft, $Minecraft$Type} from "packages/net/minecraft/client/$Minecraft"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $ClientEvents {

constructor()

public static "onItemTooltip"(itemStack: $ItemStack$Type, tooltipFlag: $TooltipFlag$Type, components: $List$Type<($Component$Type)>): void
public static "onEntityLoad"(entity: $Entity$Type, clientLevel: $Level$Type): void
public static "onClientTick"(minecraft: $Minecraft$Type): void
public static "isIsOnRope"(): boolean
public static "addConfigButton"(screen: $Screen$Type, listeners: $List$Type<(any)>, adder: $Consumer$Type<($GuiEventListener$Type)>): void
public static "onFirstScreen"(screen: $Screen$Type): void
get "isOnRope"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientEvents$Type = ($ClientEvents);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientEvents_ = $ClientEvents$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/forge/$VillagerScareStuff" {
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$BehaviorControl, $BehaviorControl$Type} from "packages/net/minecraft/world/entity/ai/behavior/$BehaviorControl"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $VillagerScareStuff {

constructor()

public static "init"(): void
public static "setup"(): void
public static "scareVillagers"(level: $LevelAccessor$Type, pos: $BlockPos$Type): void
public static "createCamlDownBehavior"(): $BehaviorControl<($LivingEntity)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $VillagerScareStuff$Type = ($VillagerScareStuff);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $VillagerScareStuff_ = $VillagerScareStuff$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/blocks/$FlaxBlock" {
import {$IntegerProperty, $IntegerProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$IntegerProperty"
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$DoubleBlockHalf, $DoubleBlockHalf$Type} from "packages/net/minecraft/world/level/block/state/properties/$DoubleBlockHalf"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$CollisionContext, $CollisionContext$Type} from "packages/net/minecraft/world/phys/shapes/$CollisionContext"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$IBeeGrowable, $IBeeGrowable$Type} from "packages/net/mehvahdjukaar/moonlight/api/block/$IBeeGrowable"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$EnumProperty, $EnumProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$EnumProperty"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$CropBlock, $CropBlock$Type} from "packages/net/minecraft/world/level/block/$CropBlock"

export class $FlaxBlock extends $CropBlock implements $IBeeGrowable {
static readonly "DOUBLE_AGE": integer
static readonly "HALF": $EnumProperty<($DoubleBlockHalf)>
static readonly "MAX_AGE": integer
static readonly "AGE": $IntegerProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(properties: $BlockBehaviour$Properties$Type)

public "getPollinated"(level: $Level$Type, pos: $BlockPos$Type, state: $BlockState$Type): boolean
public "playerDestroy"(worldIn: $Level$Type, player: $Player$Type, pos: $BlockPos$Type, state: $BlockState$Type, te: $BlockEntity$Type, stack: $ItemStack$Type): void
public "playerWillDestroy"(worldIn: $Level$Type, pos: $BlockPos$Type, state: $BlockState$Type, player: $Player$Type): void
public "isSingle"(state: $BlockState$Type): boolean
public "updateShape"(stateIn: $BlockState$Type, facing: $Direction$Type, facingState: $BlockState$Type, worldIn: $LevelAccessor$Type, currentPos: $BlockPos$Type, facingPos: $BlockPos$Type): $BlockState
public "use"(state: $BlockState$Type, world: $Level$Type, pos: $BlockPos$Type, player: $Player$Type, hand: $InteractionHand$Type, rayTraceResult: $BlockHitResult$Type): $InteractionResult
public "canBeReplaced"(pState: $BlockState$Type, pUseContext: $BlockPlaceContext$Type): boolean
public "canSurvive"(state: $BlockState$Type, worldIn: $LevelReader$Type, pos: $BlockPos$Type): boolean
public "randomTick"(state: $BlockState$Type, level: $ServerLevel$Type, pos: $BlockPos$Type, random: $RandomSource$Type): void
public "getShape"(state: $BlockState$Type, worldIn: $BlockGetter$Type, pos: $BlockPos$Type, context: $CollisionContext$Type): $VoxelShape
public "growCrops"(level: $Level$Type, pos: $BlockPos$Type, state: $BlockState$Type): void
public "isValidBonemealTarget"(worldIn: $LevelReader$Type, pos: $BlockPos$Type, state: $BlockState$Type, isClient: boolean): boolean
public "placeAt"(worldIn: $LevelAccessor$Type, pos: $BlockPos$Type, flags: integer): void
public "growCropBy"(level: $Level$Type, pos: $BlockPos$Type, state: $BlockState$Type, increment: integer): void
public "canGrowUp"(worldIn: $BlockGetter$Type, downPos: $BlockPos$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FlaxBlock$Type = ($FlaxBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FlaxBlock_ = $FlaxBlock$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/misc/$ForgeOverride" {
import {$Annotation, $Annotation$Type} from "packages/java/lang/annotation/$Annotation"
import {$Class, $Class$Type} from "packages/java/lang/$Class"

export interface $ForgeOverride extends $Annotation {

 "equals"(arg0: any): boolean
 "toString"(): string
 "hashCode"(): integer
 "annotationType"(): $Class<(any)>
}

export namespace $ForgeOverride {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ForgeOverride$Type = ($ForgeOverride);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ForgeOverride_ = $ForgeOverride$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/misc/map_markers/client/$ColoredDecorationRenderer" {
import {$ColoredDecoration, $ColoredDecoration$Type} from "packages/net/mehvahdjukaar/supplementaries/common/misc/map_markers/$ColoredDecoration"
import {$DecorationRenderer, $DecorationRenderer$Type} from "packages/net/mehvahdjukaar/moonlight/api/map/client/$DecorationRenderer"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $ColoredDecorationRenderer extends $DecorationRenderer<($ColoredDecoration)> {

constructor(texture: $ResourceLocation$Type)

public "getColor"(decoration: $ColoredDecoration$Type): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ColoredDecorationRenderer$Type = ($ColoredDecorationRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ColoredDecorationRenderer_ = $ColoredDecorationRenderer$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/client/model/$NestedModelLoader" {
import {$Material, $Material$Type} from "packages/net/minecraft/client/resources/model/$Material"
import {$JsonObject, $JsonObject$Type} from "packages/com/google/gson/$JsonObject"
import {$JsonElement, $JsonElement$Type} from "packages/com/google/gson/$JsonElement"
import {$ModelState, $ModelState$Type} from "packages/net/minecraft/client/resources/model/$ModelState"
import {$ModelBaker, $ModelBaker$Type} from "packages/net/minecraft/client/resources/model/$ModelBaker"
import {$CustomBakedModel, $CustomBakedModel$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$CustomBakedModel"
import {$BakedModel, $BakedModel$Type} from "packages/net/minecraft/client/resources/model/$BakedModel"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$CustomModelLoader, $CustomModelLoader$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$CustomModelLoader"
import {$BiFunction, $BiFunction$Type} from "packages/java/util/function/$BiFunction"
import {$CustomGeometry, $CustomGeometry$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$CustomGeometry"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$JsonDeserializationContext, $JsonDeserializationContext$Type} from "packages/com/google/gson/$JsonDeserializationContext"
import {$TextureAtlasSprite, $TextureAtlasSprite$Type} from "packages/net/minecraft/client/renderer/texture/$TextureAtlasSprite"

export class $NestedModelLoader implements $CustomModelLoader {

/**
 * 
 * @deprecated
 */
constructor(modelPath: string, bakedModelFactory: $Function$Type<($BakedModel$Type), ($CustomBakedModel$Type)>)
constructor(modelPath: string, bakedModelFactory: $BiFunction$Type<($BakedModel$Type), ($ModelState$Type), ($CustomBakedModel$Type)>)

public "deserialize"(json: $JsonObject$Type, context: $JsonDeserializationContext$Type): $CustomGeometry
/**
 * 
 * @deprecated
 */
public static "parseModel"(j: $JsonElement$Type, modelBaker: $ModelBaker$Type, spriteGetter: $Function$Type<($Material$Type), ($TextureAtlasSprite$Type)>, transform: $ModelState$Type, location: $ResourceLocation$Type): $BakedModel
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $NestedModelLoader$Type = ($NestedModelLoader);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $NestedModelLoader_ = $NestedModelLoader$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/misc/globe/$GlobeTextureGenerator$Pos" {
import {$Record, $Record$Type} from "packages/java/lang/$Record"

export class $GlobeTextureGenerator$Pos extends $Record {


public "equals"(o: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "x"(): integer
public "y"(): integer
public "left"(): $GlobeTextureGenerator$Pos
public "right"(): $GlobeTextureGenerator$Pos
public "up"(): $GlobeTextureGenerator$Pos
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GlobeTextureGenerator$Pos$Type = ($GlobeTextureGenerator$Pos);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GlobeTextureGenerator$Pos_ = $GlobeTextureGenerator$Pos$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/platform/network/forge/$ChannelHandlerImpl" {
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$Message, $Message$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/network/$Message"
import {$IntSupplier, $IntSupplier$Type} from "packages/java/util/function/$IntSupplier"
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$NetworkDir, $NetworkDir$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/network/$NetworkDir"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$ChannelHandler, $ChannelHandler$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/network/$ChannelHandler"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$SimpleChannel, $SimpleChannel$Type} from "packages/net/minecraftforge/network/simple/$SimpleChannel"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $ChannelHandlerImpl extends $ChannelHandler {
readonly "channel": $SimpleChannel

constructor(modId: string, v: $IntSupplier$Type)

public "register"<M extends $Message>(dir: $NetworkDir$Type, messageClass: $Class$Type<(M)>, decoder: $Function$Type<($FriendlyByteBuf$Type), (M)>): void
public "sendToClientPlayer"(serverPlayer: $ServerPlayer$Type, message: $Message$Type): void
public "sendToAllClientPlayersInRange"(level: $Level$Type, pos: $BlockPos$Type, radius: double, message: $Message$Type): void
public "sentToAllClientPlayersTrackingEntityAndSelf"(target: $Entity$Type, message: $Message$Type): void
public static "createChannel"(channelMame: string, version: $IntSupplier$Type): $ChannelHandler
public "sendToServer"(message: $Message$Type): void
public "sendToAllClientPlayers"(message: $Message$Type): void
public "sentToAllClientPlayersTrackingEntity"(target: $Entity$Type, message: $Message$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ChannelHandlerImpl$Type = ($ChannelHandlerImpl);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ChannelHandlerImpl_ = $ChannelHandlerImpl$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/events/overrides/$FDStickBehavior" {
import {$BlockUseOverride, $BlockUseOverride$Type} from "packages/net/mehvahdjukaar/supplementaries/common/events/overrides/$BlockUseOverride"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"

export class $FDStickBehavior implements $BlockUseOverride {


public "isEnabled"(): boolean
public "appliesToBlock"(block: $Block$Type): boolean
public "altersWorld"(): boolean
public "tryPerformingAction"(state: $BlockState$Type, pos: $BlockPos$Type, level: $Level$Type, player: $Player$Type, hand: $InteractionHand$Type, stack: $ItemStack$Type, hit: $BlockHitResult$Type): $InteractionResult
get "enabled"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FDStickBehavior$Type = ($FDStickBehavior);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FDStickBehavior_ = $FDStickBehavior$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/renderers/entities/models/$IRootModel" {
import {$ModelPart, $ModelPart$Type} from "packages/net/minecraft/client/model/geom/$ModelPart"

export interface $IRootModel {

 "getRoot"(): $ModelPart

(): $ModelPart
}

export namespace $IRootModel {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IRootModel$Type = ($IRootModel);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IRootModel_ = $IRootModel$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/misc/$RegSupplier" {
import {$Holder, $Holder$Type} from "packages/net/minecraft/core/$Holder"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$ResourceKey, $ResourceKey$Type} from "packages/net/minecraft/resources/$ResourceKey"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"

export interface $RegSupplier<T> extends $Supplier<(T)> {

 "get"(): T
 "getKey"(): $ResourceKey<(T)>
 "getId"(): $ResourceLocation
 "is"(tag: $TagKey$Type<(T)>): boolean
 "getHolder"(): $Holder<(T)>
}

export namespace $RegSupplier {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RegSupplier$Type<T> = ($RegSupplier<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RegSupplier_<T> = $RegSupplier$Type<(T)>;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$GlobeBlockTile" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$GlobeManager$Model, $GlobeManager$Model$Type} from "packages/net/mehvahdjukaar/supplementaries/client/$GlobeManager$Model"
import {$ClientboundBlockEntityDataPacket, $ClientboundBlockEntityDataPacket$Type} from "packages/net/minecraft/network/protocol/game/$ClientboundBlockEntityDataPacket"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$Pair, $Pair$Type} from "packages/com/mojang/datafixers/util/$Pair"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Nameable, $Nameable$Type} from "packages/net/minecraft/world/$Nameable"

export class $GlobeBlockTile extends $BlockEntity implements $Nameable {
 "blockState": $BlockState

constructor(pos: $BlockPos$Type, state: $BlockState$Type)

public static "tick"(pLevel: $Level$Type, pPos: $BlockPos$Type, pState: $BlockState$Type, tile: $GlobeBlockTile$Type): void
public "spin"(): void
public "getName"(): $Component
public "getRotation"(partialTicks: float): float
public "getFaceRot"(): integer
public "getRenderData"(): $Pair<($GlobeManager$Model), ($ResourceLocation)>
public "getDefaultName"(): $Component
public "getUpdatePacket"(): $ClientboundBlockEntityDataPacket
public "isSpinningVeryFast"(): boolean
public "toggleShearing"(): void
public "isSepia"(): boolean
public "getSignalPower"(): integer
public "setCustomName"(name: $Component$Type): void
public "load"(compound: $CompoundTag$Type): void
public "m_183515_"(tag: $CompoundTag$Type): void
public "getDirection"(): $Direction
public "getCustomName"(): $Component
public "triggerEvent"(id: integer, type: integer): boolean
public "getUpdateTag"(): $CompoundTag
public "getDisplayName"(): $Component
public "hasCustomName"(): boolean
get "name"(): $Component
get "faceRot"(): integer
get "renderData"(): $Pair<($GlobeManager$Model), ($ResourceLocation)>
get "defaultName"(): $Component
get "updatePacket"(): $ClientboundBlockEntityDataPacket
get "spinningVeryFast"(): boolean
get "sepia"(): boolean
get "signalPower"(): integer
set "customName"(value: $Component$Type)
get "direction"(): $Direction
get "customName"(): $Component
get "updateTag"(): $CompoundTag
get "displayName"(): $Component
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GlobeBlockTile$Type = ($GlobeBlockTile);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GlobeBlockTile_ = $GlobeBlockTile$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/core/recipe/$ShapelessRecipeTemplate" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$JsonObject, $JsonObject$Type} from "packages/com/google/gson/$JsonObject"
import {$IRecipeTemplate, $IRecipeTemplate$Type} from "packages/net/mehvahdjukaar/moonlight/api/resources/recipe/$IRecipeTemplate"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ShapelessRecipeBuilder$Result, $ShapelessRecipeBuilder$Result$Type} from "packages/net/minecraft/data/recipes/$ShapelessRecipeBuilder$Result"
import {$Ingredient, $Ingredient$Type} from "packages/net/minecraft/world/item/crafting/$Ingredient"
import {$RecipeCategory, $RecipeCategory$Type} from "packages/net/minecraft/data/recipes/$RecipeCategory"
import {$CraftingBookCategory, $CraftingBookCategory$Type} from "packages/net/minecraft/world/item/crafting/$CraftingBookCategory"
import {$BlockType, $BlockType$Type} from "packages/net/mehvahdjukaar/moonlight/api/set/$BlockType"

export class $ShapelessRecipeTemplate implements $IRecipeTemplate<($ShapelessRecipeBuilder$Result)> {
readonly "result": $Item
readonly "count": integer
readonly "group": string
readonly "ingredients": $List<($Ingredient)>
readonly "category": $CraftingBookCategory

constructor(json: $JsonObject$Type)

public "addCondition"(condition: any): void
public "getConditions"(): $List<(any)>
public "createSimilar"<T extends $BlockType>(originalMat: T, destinationMat: T, unlockItem: $Item$Type): $ShapelessRecipeBuilder$Result
public static "convertIngredients"<T extends $BlockType>(originalMat: T, destinationMat: T, ing: $Ingredient$Type): $Ingredient
public "determineBookCategory"(recipeCategory: $CraftingBookCategory$Type): $RecipeCategory
get "conditions"(): $List<(any)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ShapelessRecipeTemplate$Type = ($ShapelessRecipeTemplate);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ShapelessRecipeTemplate_ = $ShapelessRecipeTemplate$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/resources/recipe/forge/$OptionalRecipeCondition" {
import {$JsonObject, $JsonObject$Type} from "packages/com/google/gson/$JsonObject"
import {$IConditionSerializer, $IConditionSerializer$Type} from "packages/net/minecraftforge/common/crafting/conditions/$IConditionSerializer"
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$OptionalRecipeCondition$Instance, $OptionalRecipeCondition$Instance$Type} from "packages/net/mehvahdjukaar/moonlight/api/resources/recipe/forge/$OptionalRecipeCondition$Instance"

export class $OptionalRecipeCondition implements $IConditionSerializer<($OptionalRecipeCondition$Instance)> {

constructor(id: $ResourceLocation$Type, predicate: $Predicate$Type<(string)>)

public "write"(json: $JsonObject$Type, value: $OptionalRecipeCondition$Instance$Type): void
public "getID"(): $ResourceLocation
public "getJson"(arg0: $OptionalRecipeCondition$Instance$Type): $JsonObject
get "iD"(): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $OptionalRecipeCondition$Type = ($OptionalRecipeCondition);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $OptionalRecipeCondition_ = $OptionalRecipeCondition$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/renderers/color/$ColorHelper" {
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$ResourceManager, $ResourceManager$Type} from "packages/net/minecraft/server/packs/resources/$ResourceManager"
import {$HSLColor, $HSLColor$Type} from "packages/net/mehvahdjukaar/moonlight/api/util/math/colors/$HSLColor"

export class $ColorHelper {

constructor()

public static "pack"(rgb: (float)[]): integer
public static "getRandomBrightColor"(random: $RandomSource$Type): integer
public static "refreshBubbleColors"(manager: $ResourceManager$Type): void
public static "getRainbowColor"(division: float): integer
public static "prettyfyColor"(hsl: $HSLColor$Type): $HSLColor
public static "getRainbowColorPost"(division: float): integer
public static "normalizeHSLSaturation"(saturation: float, lightness: float): float
public static "getBubbleColor"(phase: float): (float)[]
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ColorHelper$Type = ($ColorHelper);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ColorHelper_ = $ColorHelper$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/integration/forge/configured/$ModConfigScreen" {
import {$Comparator, $Comparator$Type} from "packages/java/util/$Comparator"
import {$FormattedCharSequence, $FormattedCharSequence$Type} from "packages/net/minecraft/util/$FormattedCharSequence"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$IModConfig, $IModConfig$Type} from "packages/com/mrcrayfish/configured/api/$IModConfig"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$CustomConfigScreen, $CustomConfigScreen$Type} from "packages/net/mehvahdjukaar/moonlight/api/integration/configured/$CustomConfigScreen"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$CustomConfigSelectScreen, $CustomConfigSelectScreen$Type} from "packages/net/mehvahdjukaar/moonlight/api/integration/configured/$CustomConfigSelectScreen"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$ListMenuScreen$Item, $ListMenuScreen$Item$Type} from "packages/com/mrcrayfish/configured/client/screen/$ListMenuScreen$Item"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$List, $List$Type} from "packages/java/util/$List"

export class $ModConfigScreen extends $CustomConfigScreen {
readonly "mainIcon": $ItemStack
static readonly "TOOLTIP_WIDTH": integer
static readonly "SORT_ALPHABETICALLY": $Comparator<($ListMenuScreen$Item)>
static readonly "CONFIGURED_LOGO": $ResourceLocation
 "tooltipText": $List<($FormattedCharSequence)>
 "tooltipOutlineColour": integer
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering

constructor(parent: $CustomConfigSelectScreen$Type, config: $IModConfig$Type)
constructor(modId: string, mainIcon: $ItemStack$Type, background: $ResourceLocation$Type, title: $Component$Type, parent: $Screen$Type, config: $IModConfig$Type)

public "onSave"(): void
public "createSubScreen"(title: $Component$Type): $CustomConfigScreen
public static "loadTexture"(arg0: any, arg1: $ResourceLocation$Type): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModConfigScreen$Type = ($ModConfigScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModConfigScreen_ = $ModConfigScreen$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$BellowsBlockTile$AirType" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $BellowsBlockTile$AirType extends $Enum<($BellowsBlockTile$AirType)> {
static readonly "AIR": $BellowsBlockTile$AirType
static readonly "BUBBLE": $BellowsBlockTile$AirType
static readonly "SOAP": $BellowsBlockTile$AirType


public static "values"(): ($BellowsBlockTile$AirType)[]
public static "valueOf"(name: string): $BellowsBlockTile$AirType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BellowsBlockTile$AirType$Type = (("bubble") | ("air") | ("soap")) | ($BellowsBlockTile$AirType);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BellowsBlockTile$AirType_ = $BellowsBlockTile$AirType$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/items/$AntiqueInkItem" {
import {$SignBlockEntity, $SignBlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$SignBlockEntity"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$SignApplicator, $SignApplicator$Type} from "packages/net/minecraft/world/item/$SignApplicator"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$SignText, $SignText$Type} from "packages/net/minecraft/world/level/block/entity/$SignText"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $AntiqueInkItem extends $Item implements $SignApplicator {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(properties: $Item$Properties$Type)

public static "isEnabled"(): boolean
public static "hasAntiqueInk"(stack: $ItemStack$Type): boolean
public static "setAntiqueInk"(stack: $ItemStack$Type, ink: boolean): void
public static "setAntiqueInk"(tile: $BlockEntity$Type, ink: boolean): void
public "tryApplyToSign"(level: $Level$Type, signBlockEntity: $SignBlockEntity$Type, front: boolean, player: $Player$Type): boolean
public static "toggleAntiqueInkOnSigns"(world: $Level$Type, player: $Player$Type, pos: $BlockPos$Type, tile: $BlockEntity$Type, newState: boolean): boolean
public "canApplyToSign"(arg0: $SignText$Type, arg1: $Player$Type): boolean
get "enabled"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AntiqueInkItem$Type = ($AntiqueInkItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AntiqueInkItem_ = $AntiqueInkItem$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/common/block/$ModCauldronBlock" {
import {$IntegerProperty, $IntegerProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$IntegerProperty"
import {$EntityBlock, $EntityBlock$Type} from "packages/net/minecraft/world/level/block/$EntityBlock"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$SoftFluidStack, $SoftFluidStack$Type} from "packages/net/mehvahdjukaar/moonlight/api/fluids/$SoftFluidStack"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$AbstractCauldronBlock, $AbstractCauldronBlock$Type} from "packages/net/minecraft/world/level/block/$AbstractCauldronBlock"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Biome$Precipitation, $Biome$Precipitation$Type} from "packages/net/minecraft/world/level/biome/$Biome$Precipitation"
import {$ParticleOptions, $ParticleOptions$Type} from "packages/net/minecraft/core/particles/$ParticleOptions"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$CauldronInteraction, $CauldronInteraction$Type} from "packages/net/minecraft/core/cauldron/$CauldronInteraction"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$BlockEntityTicker, $BlockEntityTicker$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityTicker"
import {$GameEventListener, $GameEventListener$Type} from "packages/net/minecraft/world/level/gameevent/$GameEventListener"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $ModCauldronBlock extends $AbstractCauldronBlock implements $EntityBlock {
readonly "interactions": $Map<($Item), ($CauldronInteraction)>
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(properties: $BlockBehaviour$Properties$Type)

public "getLevelProperty"(): $IntegerProperty
public "updateStateOnFluidChange"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type, arg3: $SoftFluidStack$Type): $BlockState
public "asItem"(): $Item
public "handlePrecipitation"(state: $BlockState$Type, level: $Level$Type, pos: $BlockPos$Type, precipitation: $Biome$Precipitation$Type): void
public "fallOn"(level: $Level$Type, state: $BlockState$Type, pos: $BlockPos$Type, entity: $Entity$Type, fallDistance: float): void
public "doCraftItem"(level: $Level$Type, pos: $BlockPos$Type, player: $Player$Type, hand: $InteractionHand$Type, fluid: $SoftFluidStack$Type, itemStack: $ItemStack$Type, crafted: $ItemStack$Type, layerPerItem: float, itemCountMultiplier: integer): boolean
public "getAnalogOutputSignal"(state: $BlockState$Type, level: $Level$Type, pos: $BlockPos$Type): integer
public "entityInside"(state: $BlockState$Type, level: $Level$Type, pos: $BlockPos$Type, entity: $Entity$Type): void
public static "addSurfaceParticles"(type: $ParticleOptions$Type, level: $Level$Type, pos: $BlockPos$Type, count: integer, surface: double, rand: $RandomSource$Type, r: float, g: float, b: float): void
public static "playSplashAnimation"(level: $Level$Type, pos: $BlockPos$Type, e: $Entity$Type, waterLevel: double, color: integer, light: integer): void
public static "playExtinguishSound"(level: $Level$Type, pos: $BlockPos$Type, entity: $Entity$Type): void
public "newBlockEntity"(pos: $BlockPos$Type, state: $BlockState$Type): $BlockEntity
public "getTicker"<T extends $BlockEntity>(arg0: $Level$Type, arg1: $BlockState$Type, arg2: $BlockEntityType$Type<(T)>): $BlockEntityTicker<(T)>
public "getListener"<T extends $BlockEntity>(arg0: $ServerLevel$Type, arg1: T): $GameEventListener
get "levelProperty"(): $IntegerProperty
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModCauldronBlock$Type = ($ModCauldronBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModCauldronBlock_ = $ModCauldronBlock$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/events/$ServerEvents" {
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$EntityHitResult, $EntityHitResult$Type} from "packages/net/minecraft/world/phys/$EntityHitResult"
import {$IFireConsumeBlockEvent, $IFireConsumeBlockEvent$Type} from "packages/net/mehvahdjukaar/moonlight/api/events/$IFireConsumeBlockEvent"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$RegistryAccess, $RegistryAccess$Type} from "packages/net/minecraft/core/$RegistryAccess"
import {$InteractionResultHolder, $InteractionResultHolder$Type} from "packages/net/minecraft/world/$InteractionResultHolder"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$AbstractArrow, $AbstractArrow$Type} from "packages/net/minecraft/world/entity/projectile/$AbstractArrow"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$ItemEntity, $ItemEntity$Type} from "packages/net/minecraft/world/entity/item/$ItemEntity"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $ServerEvents {

constructor()

public static "onUseItem"(player: $Player$Type, level: $Level$Type, hand: $InteractionHand$Type): $InteractionResultHolder<($ItemStack)>
public static "onRightClickBlock"(player: $Player$Type, level: $Level$Type, hand: $InteractionHand$Type, hitResult: $BlockHitResult$Type): $InteractionResult
public static "onCommonTagUpdate"(registryAccess: $RegistryAccess$Type, client: boolean): void
public static "onPlayerLoggedIn"(player: $ServerPlayer$Type): void
public static "onDataSyncToPlayer"(player: $ServerPlayer$Type, joined: boolean): void
public static "onArrowPickup"(arrow: $AbstractArrow$Type, player: $Player$Type, pickup: $Supplier$Type<($ItemStack$Type)>): boolean
public static "onFireConsume"(event: $IFireConsumeBlockEvent$Type): void
public static "onEntityLoad"(entity: $Entity$Type, serverLevel: $ServerLevel$Type): void
public static "onRightClickEntity"(player: $Player$Type, level: $Level$Type, hand: $InteractionHand$Type, entity: $Entity$Type, entityHitResult: $EntityHitResult$Type): $InteractionResult
public static "serverPlayerTick"(player: $Player$Type): void
public static "clientPlayerTick"(player: $Player$Type): void
public static "onRightClickBlockHP"(player: $Player$Type, level: $Level$Type, hand: $InteractionHand$Type, hitResult: $BlockHitResult$Type): $InteractionResult
public static "onItemPickup"(itemEntity: $ItemEntity$Type, player: $Player$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ServerEvents$Type = ($ServerEvents);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ServerEvents_ = $ServerEvents$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/events/forge/$LightningStruckBlockEvent" {
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$ListenerList, $ListenerList$Type} from "packages/net/minecraftforge/eventbus/$ListenerList"
import {$ILightningStruckBlockEvent, $ILightningStruckBlockEvent$Type} from "packages/net/mehvahdjukaar/moonlight/api/events/$ILightningStruckBlockEvent"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockEvent, $BlockEvent$Type} from "packages/net/minecraftforge/event/level/$BlockEvent"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$LightningBolt, $LightningBolt$Type} from "packages/net/minecraft/world/entity/$LightningBolt"

export class $LightningStruckBlockEvent extends $BlockEvent implements $ILightningStruckBlockEvent {

constructor()
constructor(state: $BlockState$Type, level: $LevelAccessor$Type, pos: $BlockPos$Type, entity: $LightningBolt$Type)

public "getEntity"(): $LightningBolt
public "getListenerList"(): $ListenerList
public "getState"(): $BlockState
public static "create"(state: $BlockState$Type, level: $LevelAccessor$Type, pos: $BlockPos$Type, entity: $LightningBolt$Type): $ILightningStruckBlockEvent
public "getLevel"(): $LevelAccessor
public "getPos"(): $BlockPos
get "entity"(): $LightningBolt
get "listenerList"(): $ListenerList
get "state"(): $BlockState
get "level"(): $LevelAccessor
get "pos"(): $BlockPos
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LightningStruckBlockEvent$Type = ($LightningStruckBlockEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LightningStruckBlockEvent_ = $LightningStruckBlockEvent$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/faucet/$FaucetSource$Fluid" {
import {$FaucetSource, $FaucetSource$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/faucet/$FaucetSource"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$FluidOffer, $FluidOffer$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/faucet/$FluidOffer"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$FluidState, $FluidState$Type} from "packages/net/minecraft/world/level/material/$FluidState"

export interface $FaucetSource$Fluid extends $FaucetSource<($FluidState)> {

 "drain"(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $Direction$Type, arg3: $FluidState$Type, arg4: integer): void
 "getProvidedFluid"(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $Direction$Type, arg3: $FluidState$Type): $FluidOffer
}

export namespace $FaucetSource$Fluid {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FaucetSource$Fluid$Type = ($FaucetSource$Fluid);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FaucetSource$Fluid_ = $FaucetSource$Fluid$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/common/$IBellConnections" {
import {$IBellConnections$BellConnection, $IBellConnections$BellConnection$Type} from "packages/net/mehvahdjukaar/amendments/common/$IBellConnections$BellConnection"

export interface $IBellConnections {

 "amendments$setConnected"(arg0: $IBellConnections$BellConnection$Type): void
 "amendments$getConnected"(): $IBellConnections$BellConnection
}

export namespace $IBellConnections {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IBellConnections$Type = ($IBellConnections);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IBellConnections_ = $IBellConnections$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/common/entity/$FallingLanternEntity$FallMode" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $FallingLanternEntity$FallMode extends $Enum<($FallingLanternEntity$FallMode)> {
static readonly "ON": $FallingLanternEntity$FallMode
static readonly "OFF": $FallingLanternEntity$FallMode
static readonly "NO_FIRE": $FallingLanternEntity$FallMode


public static "values"(): ($FallingLanternEntity$FallMode)[]
public static "valueOf"(name: string): $FallingLanternEntity$FallMode
public "isOn"(): boolean
public "hasFire"(): boolean
get "on"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FallingLanternEntity$FallMode$Type = (("no_fire") | ("off") | ("on")) | ($FallingLanternEntity$FallMode);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FallingLanternEntity$FallMode_ = $FallingLanternEntity$FallMode$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/util/math/$MthUtils" {
import {$Vec3i, $Vec3i$Type} from "packages/net/minecraft/core/$Vec3i"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$AABB, $AABB$Type} from "packages/net/minecraft/world/phys/$AABB"
import {$BaseColor, $BaseColor$Type} from "packages/net/mehvahdjukaar/moonlight/api/util/math/colors/$BaseColor"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $MthUtils {
static readonly "PHI": float

constructor()

public static "wrapRad"(pValue: double): double
public static "wrapRad"(pValue: float): float
public static "nextWeighted"(rand: $RandomSource$Type, max: float, bias: float): float
public static "nextWeighted"(rand: $RandomSource$Type, max: float, bias: float, min: float): float
public static "nextWeighted"(rand: $RandomSource$Type, max: float): float
public static "averageAngles"(...angles: (float)[]): float
public static "collideWithSweptAABB"(myPos: $Vec3$Type, myBox: $AABB$Type, movement: $Vec3$Type, level: $Level$Type): $BlockHitResult
public static "collideWithSweptAABB"(myPos: $Vec3$Type, myBox: $AABB$Type, movement: $Vec3$Type, level: $Level$Type, maxStep: double): $BlockHitResult
public static "collideWithSweptAABB"(entity: $Entity$Type, movement: $Vec3$Type, maxStep: double): $BlockHitResult
public static "getNormalFrom3DData"(direction: integer): $Vec3
public static "polarToCartesian"(a: float, r: float): (float)[]
public static "signedAngleDiff"(to: double, from: double): float
public static "changeBasisN"(newBasisYVector: $Vec3$Type, rot: $Vec3$Type): $Vec3
public static "lerpColorScale"<T extends $BaseColor<(T)>>(palette: $List$Type<(T)>, phase: float): T
public static "changeBasis"(newX: $Vec3$Type, newY: $Vec3$Type, newZ: $Vec3$Type, rot: $Vec3$Type): $Vec3
public static "V3itoV3"(v: $Vec3i$Type): $Vec3
public static "moveVoxelShape"(source: $VoxelShape$Type, v: $Vec3$Type): $VoxelShape
public static "lambertW0"(x: double): double
public static "normalizedExponent"(t: float, curve: float): float
public static "lambertW1"(x: double): double
public static "rotateVec3"(vec: $Vec3$Type, dir: $Direction$Type): $Vec3
public static "rotateVoxelShape"(source: $VoxelShape$Type, direction: $Direction$Type): $VoxelShape
public static "getRoll"(vec3: $Vec3$Type): double
public static "getPitch"(vec3: $Vec3$Type): double
public static "getYaw"(vec3: $Vec3$Type): double
public static "isWithinRectangle"(x: integer, y: integer, width: integer, height: integer, mouseX: integer, mouseY: integer): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MthUtils$Type = ($MthUtils);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MthUtils_ = $MthUtils$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/common/item/placement/$WallLanternPlacement" {
import {$AdditionalItemPlacement, $AdditionalItemPlacement$Type} from "packages/net/mehvahdjukaar/moonlight/api/item/additional_placements/$AdditionalItemPlacement"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"

export class $WallLanternPlacement extends $AdditionalItemPlacement {

constructor()

public "overridePlace"(pContext: $BlockPlaceContext$Type): $InteractionResult
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WallLanternPlacement$Type = ($WallLanternPlacement);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WallLanternPlacement_ = $WallLanternPlacement$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/platform/$ClientHelper$BlockEntityRendererEvent" {
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$BlockEntityRendererProvider, $BlockEntityRendererProvider$Type} from "packages/net/minecraft/client/renderer/blockentity/$BlockEntityRendererProvider"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"

export interface $ClientHelper$BlockEntityRendererEvent {

 "register"<E extends $BlockEntity>(arg0: $BlockEntityType$Type<(any)>, arg1: $BlockEntityRendererProvider$Type<(E)>): void

(arg0: $BlockEntityType$Type<(any)>, arg1: $BlockEntityRendererProvider$Type<(E)>): void
}

export namespace $ClientHelper$BlockEntityRendererEvent {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientHelper$BlockEntityRendererEvent$Type = ($ClientHelper$BlockEntityRendererEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientHelper$BlockEntityRendererEvent_ = $ClientHelper$BlockEntityRendererEvent$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/block/$ISoftFluidProvider" {
import {$SoftFluidStack, $SoftFluidStack$Type} from "packages/net/mehvahdjukaar/moonlight/api/fluids/$SoftFluidStack"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export interface $ISoftFluidProvider {

 "getProvidedFluid"(arg0: $Level$Type, arg1: $BlockState$Type, arg2: $BlockPos$Type): $SoftFluidStack
 "consumeProvidedFluid"(arg0: $Level$Type, arg1: $BlockState$Type, arg2: $BlockPos$Type): void
}

export namespace $ISoftFluidProvider {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ISoftFluidProvider$Type = ($ISoftFluidProvider);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ISoftFluidProvider_ = $ISoftFluidProvider$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/common/network/$SyncLecternBookMessage" {
import {$Message, $Message$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/network/$Message"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$ChannelHandler$Context, $ChannelHandler$Context$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/network/$ChannelHandler$Context"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $SyncLecternBookMessage implements $Message {

constructor(pos: $BlockPos$Type, list: $List$Type<(string)>, optional: $Optional$Type<(string)>, takeBook: boolean)
constructor(buffer: $FriendlyByteBuf$Type)

public "handle"(context: $ChannelHandler$Context$Type): void
public "writeToBuffer"(buffer: $FriendlyByteBuf$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SyncLecternBookMessage$Type = ($SyncLecternBookMessage);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SyncLecternBookMessage_ = $SyncLecternBookMessage$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$FlowerBoxBlockTile" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Connection, $Connection$Type} from "packages/net/minecraft/network/$Connection"
import {$ModelData, $ModelData$Type} from "packages/net/minecraftforge/client/model/data/$ModelData"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$ExtraModelData, $ExtraModelData$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$ExtraModelData"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ClientboundBlockEntityDataPacket, $ClientboundBlockEntityDataPacket$Type} from "packages/net/minecraft/network/protocol/game/$ClientboundBlockEntityDataPacket"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$ExtraModelData$Builder, $ExtraModelData$Builder$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$ExtraModelData$Builder"
import {$IExtraModelDataProvider, $IExtraModelDataProvider$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$IExtraModelDataProvider"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$IBlockHolder, $IBlockHolder$Type} from "packages/net/mehvahdjukaar/moonlight/api/block/$IBlockHolder"
import {$ModelDataKey, $ModelDataKey$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$ModelDataKey"
import {$LockCode, $LockCode$Type} from "packages/net/minecraft/world/$LockCode"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$ItemDisplayTile, $ItemDisplayTile$Type} from "packages/net/mehvahdjukaar/moonlight/api/block/$ItemDisplayTile"
import {$AABB, $AABB$Type} from "packages/net/minecraft/world/phys/$AABB"

export class $FlowerBoxBlockTile extends $ItemDisplayTile implements $IBlockHolder, $IExtraModelDataProvider {
static readonly "FLOWER_0": $ModelDataKey<($BlockState)>
static readonly "FLOWER_1": $ModelDataKey<($BlockState)>
static readonly "FLOWER_2": $ModelDataKey<($BlockState)>
static readonly "LOOT_TABLE_TAG": string
static readonly "LOOT_TABLE_SEED_TAG": string
 "lootTable": $ResourceLocation
 "lootTableSeed": long
 "lockKey": $LockCode
 "blockState": $BlockState

constructor(pos: $BlockPos$Type, state: $BlockState$Type)

public "updateClientVisualsOnLoad"(): void
public "getHeldBlock"(index: integer): $BlockState
public "getYaw"(): float
public "getDirection"(): $Direction
public "canPlaceItem"(index: integer, stack: $ItemStack$Type): boolean
public "m_6820_"(): $Component
public "getRenderBoundingBox"(): $AABB
public "addExtraModelData"(builder: $ExtraModelData$Builder$Type): void
public "afterDataPacket"(oldData: $ExtraModelData$Type): void
public "getAddItemSound"(): $SoundEvent
public "setHeldBlock"(state: $BlockState$Type, index: integer): boolean
public "setItem"(slot: integer, stack: $ItemStack$Type): void
public "getHeldBlock"(): $BlockState
public "setHeldBlock"(state: $BlockState$Type): boolean
public "requestModelReload"(): void
/**
 * 
 * @deprecated
 */
public "getExtraModelData"(): $ExtraModelData
public "onDataPacket"(net: $Connection$Type, pkt: $ClientboundBlockEntityDataPacket$Type): void
public "getModelData"(): $ModelData
public "getPersistentData"(): $CompoundTag
public "onChunkUnloaded"(): void
public static "stillValidBlockEntity"(arg0: $BlockEntity$Type, arg1: $Player$Type, arg2: integer): boolean
public static "stillValidBlockEntity"(arg0: $BlockEntity$Type, arg1: $Player$Type): boolean
public static "tryClear"(arg0: any): void
get "yaw"(): float
get "direction"(): $Direction
get "renderBoundingBox"(): $AABB
get "addItemSound"(): $SoundEvent
get "heldBlock"(): $BlockState
set "heldBlock"(value: $BlockState$Type)
get "extraModelData"(): $ExtraModelData
get "modelData"(): $ModelData
get "persistentData"(): $CompoundTag
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FlowerBoxBlockTile$Type = ($FlowerBoxBlockTile);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FlowerBoxBlockTile_ = $FlowerBoxBlockTile$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/faucet/$LavaCauldronInteraction" {
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$FluidOffer, $FluidOffer$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/faucet/$FluidOffer"
import {$FaucetTarget$BlState, $FaucetTarget$BlState$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/faucet/$FaucetTarget$BlState"
import {$SoftFluidStack, $SoftFluidStack$Type} from "packages/net/mehvahdjukaar/moonlight/api/fluids/$SoftFluidStack"
import {$FaucetSource$BlState, $FaucetSource$BlState$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/faucet/$FaucetSource$BlState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $LavaCauldronInteraction implements $FaucetTarget$BlState, $FaucetSource$BlState {


public "fill"(level: $Level$Type, pos: $BlockPos$Type, state: $BlockState$Type, fluid: $SoftFluidStack$Type, minAmount: integer): integer
public "drain"(level: $Level$Type, pos: $BlockPos$Type, dir: $Direction$Type, source: $BlockState$Type, amount: integer): void
public "getProvidedFluid"(level: $Level$Type, pos: $BlockPos$Type, dir: $Direction$Type, source: $BlockState$Type): $FluidOffer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LavaCauldronInteraction$Type = ($LavaCauldronInteraction);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LavaCauldronInteraction_ = $LavaCauldronInteraction$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/block/$ModLiquidBlock" {
import {$IntegerProperty, $IntegerProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$IntegerProperty"
import {$ImmutableList, $ImmutableList$Type} from "packages/com/google/common/collect/$ImmutableList"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$LiquidBlock, $LiquidBlock$Type} from "packages/net/minecraft/world/level/block/$LiquidBlock"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $ModLiquidBlock extends $LiquidBlock {
static readonly "LEVEL": $IntegerProperty
static readonly "STABLE_SHAPE": $VoxelShape
static readonly "POSSIBLE_FLOW_DIRECTIONS": $ImmutableList<($Direction)>
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(supplier: $Supplier$Type<(any)>, arg: $BlockBehaviour$Properties$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModLiquidBlock$Type = ($ModLiquidBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModLiquidBlock_ = $ModLiquidBlock$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/platform/network/$NetworkDir" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $NetworkDir extends $Enum<($NetworkDir)> {
static readonly "PLAY_TO_SERVER": $NetworkDir
static readonly "PLAY_TO_CLIENT": $NetworkDir
static readonly "BOTH": $NetworkDir


public static "values"(): ($NetworkDir)[]
public static "valueOf"(name: string): $NetworkDir
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $NetworkDir$Type = (("play_to_server") | ("play_to_client") | ("both")) | ($NetworkDir);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $NetworkDir_ = $NetworkDir$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/items/crafting/$SoapClearRecipe" {
import {$RegistryAccess, $RegistryAccess$Type} from "packages/net/minecraft/core/$RegistryAccess"
import {$RecipeSerializer, $RecipeSerializer$Type} from "packages/net/minecraft/world/item/crafting/$RecipeSerializer"
import {$CustomRecipe, $CustomRecipe$Type} from "packages/net/minecraft/world/item/crafting/$CustomRecipe"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$CraftingContainer, $CraftingContainer$Type} from "packages/net/minecraft/world/inventory/$CraftingContainer"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$CraftingBookCategory, $CraftingBookCategory$Type} from "packages/net/minecraft/world/item/crafting/$CraftingBookCategory"

export class $SoapClearRecipe extends $CustomRecipe {

constructor(resourceLocation: $ResourceLocation$Type, category: $CraftingBookCategory$Type)

public "matches"(craftingContainer: $CraftingContainer$Type, level: $Level$Type): boolean
public "canCraftInDimensions"(x: integer, y: integer): boolean
public "getSerializer"(): $RecipeSerializer<(any)>
public "assemble"(craftingContainer: $CraftingContainer$Type, registryAccess: $RegistryAccess$Type): $ItemStack
get "serializer"(): $RecipeSerializer<(any)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SoapClearRecipe$Type = ($SoapClearRecipe);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SoapClearRecipe_ = $SoapClearRecipe$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/item/$IFirstPersonAnimationProvider" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$HumanoidArm, $HumanoidArm$Type} from "packages/net/minecraft/world/entity/$HumanoidArm"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export interface $IFirstPersonAnimationProvider {

 "animateItemFirstPerson"(entity: $Player$Type, stack: $ItemStack$Type, hand: $InteractionHand$Type, arm: $HumanoidArm$Type, poseStack: $PoseStack$Type, partialTicks: float, pitch: float, attackAnim: float, handHeight: float): void
/**
 * 
 * @deprecated
 */
 "animateItemFirstPerson"(entity: $LivingEntity$Type, stack: $ItemStack$Type, hand: $InteractionHand$Type, matrixStack: $PoseStack$Type, partialTicks: float, pitch: float, attackAnim: float, handHeight: float): void
}

export namespace $IFirstPersonAnimationProvider {
function get(target: $Item$Type): $IFirstPersonAnimationProvider
function attachToItem(target: $Item$Type, object: $IFirstPersonAnimationProvider$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IFirstPersonAnimationProvider$Type = ($IFirstPersonAnimationProvider);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IFirstPersonAnimationProvider_ = $IFirstPersonAnimationProvider$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/misc/$CodecMapRegistry" {
import {$Comparable, $Comparable$Type} from "packages/java/lang/$Comparable"
import {$MapCodec, $MapCodec$Type} from "packages/com/mojang/serialization/$MapCodec"
import {$UnboundedMapCodec, $UnboundedMapCodec$Type} from "packages/com/mojang/serialization/codecs/$UnboundedMapCodec"
import {$MapEncoder, $MapEncoder$Type} from "packages/com/mojang/serialization/$MapEncoder"
import {$Keyable, $Keyable$Type} from "packages/com/mojang/serialization/$Keyable"
import {$Encoder, $Encoder$Type} from "packages/com/mojang/serialization/$Encoder"
import {$MapRegistry, $MapRegistry$Type} from "packages/net/mehvahdjukaar/moonlight/api/misc/$MapRegistry"
import {$Either, $Either$Type} from "packages/com/mojang/datafixers/util/$Either"
import {$Decoder$Boxed, $Decoder$Boxed$Type} from "packages/com/mojang/serialization/$Decoder$Boxed"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$MapDecoder, $MapDecoder$Type} from "packages/com/mojang/serialization/$MapDecoder"
import {$Codec, $Codec$Type} from "packages/com/mojang/serialization/$Codec"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$DataResult, $DataResult$Type} from "packages/com/mojang/serialization/$DataResult"
import {$Decoder$Simple, $Decoder$Simple$Type} from "packages/com/mojang/serialization/$Decoder$Simple"
import {$List, $List$Type} from "packages/java/util/$List"
import {$SimpleMapCodec, $SimpleMapCodec$Type} from "packages/com/mojang/serialization/codecs/$SimpleMapCodec"
import {$Decoder$Terminal, $Decoder$Terminal$Type} from "packages/com/mojang/serialization/$Decoder$Terminal"
import {$Decoder, $Decoder$Type} from "packages/com/mojang/serialization/$Decoder"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$Pair, $Pair$Type} from "packages/com/mojang/datafixers/util/$Pair"

export class $CodecMapRegistry<T> extends $MapRegistry<($Codec<(any)>)> {

constructor(name: string)
constructor()

public "register"<B extends T>(name: string, value: $Codec$Type<(B)>): $Codec<(B)>
public "register"<B extends T>(name: $ResourceLocation$Type, value: $Codec$Type<(B)>): $Codec<(B)>
public static "of"<A>(arg0: $MapEncoder$Type<(A)>, arg1: $MapDecoder$Type<(A)>, arg2: $Supplier$Type<(string)>): $MapCodec<(A)>
public static "of"<A>(arg0: $MapEncoder$Type<(A)>, arg1: $MapDecoder$Type<(A)>): $MapCodec<(A)>
public static "of"<A>(arg0: $Encoder$Type<(A)>, arg1: $Decoder$Type<(A)>, arg2: string): $Codec<(A)>
public static "of"<A>(arg0: $Encoder$Type<(A)>, arg1: $Decoder$Type<(A)>): $Codec<(A)>
public static "list"<E>(arg0: $Codec$Type<(E)>): $Codec<($List<(E)>)>
public static "checkRange"<N extends (number) & ($Comparable<(N)>)>(arg0: N, arg1: N): $Function<(N), ($DataResult<(N)>)>
public static "unit"<A>(arg0: A): $Codec<(A)>
public static "unit"<A>(arg0: $Supplier$Type<(A)>): $Codec<(A)>
public static "pair"<F, S>(arg0: $Codec$Type<(F)>, arg1: $Codec$Type<(S)>): $Codec<($Pair<(F), (S)>)>
public static "optionalField"<F>(arg0: string, arg1: $Codec$Type<(F)>): $MapCodec<($Optional<(F)>)>
public static "compoundList"<K, V>(arg0: $Codec$Type<(K)>, arg1: $Codec$Type<(V)>): $Codec<($List<($Pair<(K), (V)>)>)>
public static "either"<F, S>(arg0: $Codec$Type<(F)>, arg1: $Codec$Type<(S)>): $Codec<($Either<(F), (S)>)>
public static "mapPair"<F, S>(arg0: $MapCodec$Type<(F)>, arg1: $MapCodec$Type<(S)>): $MapCodec<($Pair<(F), (S)>)>
public static "mapEither"<F, S>(arg0: $MapCodec$Type<(F)>, arg1: $MapCodec$Type<(S)>): $MapCodec<($Either<(F), (S)>)>
public static "unboundedMap"<K, V>(arg0: $Codec$Type<(K)>, arg1: $Codec$Type<(V)>): $UnboundedMapCodec<(K), (V)>
public static "simpleMap"<K, V>(arg0: $Codec$Type<(K)>, arg1: $Codec$Type<(V)>, arg2: $Keyable$Type): $SimpleMapCodec<(K), (V)>
public static "doubleRange"(arg0: double, arg1: double): $Codec<(double)>
public static "floatRange"(arg0: float, arg1: float): $Codec<(float)>
public static "intRange"(arg0: integer, arg1: integer): $Codec<(integer)>
public static "empty"<A>(): $MapEncoder<(A)>
public static "error"<A>(arg0: string): $Encoder<(A)>
public static "ofBoxed"<A>(arg0: $Decoder$Boxed$Type<(any)>): $Decoder<(A)>
public static "ofTerminal"<A>(arg0: $Decoder$Terminal$Type<(any)>): $Decoder<(A)>
public static "ofSimple"<A>(arg0: $Decoder$Simple$Type<(any)>): $Decoder<(A)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CodecMapRegistry$Type<T> = ($CodecMapRegistry<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CodecMapRegistry_<T> = $CodecMapRegistry$Type<(T)>;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/util/$FakePlayerManager" {
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$GameProfile, $GameProfile$Type} from "packages/com/mojang/authlib/$GameProfile"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $FakePlayerManager {

constructor()

public static "get"(id: $GameProfile$Type, entity: $Entity$Type): $Player
public static "get"(id: $GameProfile$Type, copyPosFrom: $Entity$Type, copyRotFrom: $Entity$Type): $Player
public static "get"(id: $GameProfile$Type, level: $Level$Type): $Player
public static "getDefault"(copyPosFrom: $Entity$Type, copyRotFrom: $Entity$Type): $Player
public static "getDefault"(entity: $Entity$Type): $Player
public static "getDefault"(level: $Level$Type): $Player
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FakePlayerManager$Type = ($FakePlayerManager);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FakePlayerManager_ = $FakePlayerManager$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/misc/map_markers/markers/$CeilingBannerMarker" {
import {$ColoredMarker, $ColoredMarker$Type} from "packages/net/mehvahdjukaar/supplementaries/common/misc/map_markers/markers/$ColoredMarker"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$DyeColor, $DyeColor$Type} from "packages/net/minecraft/world/item/$DyeColor"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $CeilingBannerMarker extends $ColoredMarker {
static readonly "HAS_SMALL_TEXTURE_FLAG": integer

constructor()
constructor(pos: $BlockPos$Type, color: $DyeColor$Type, name: $Component$Type)

public static "getFromWorld"(world: $BlockGetter$Type, pos: $BlockPos$Type): $CeilingBannerMarker
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CeilingBannerMarker$Type = ($CeilingBannerMarker);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CeilingBannerMarker_ = $CeilingBannerMarker$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/integration/create/$ItemDisplayDisplaySource" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$SingleLineDisplaySource, $SingleLineDisplaySource$Type} from "packages/com/simibubi/create/content/redstone/displayLink/source/$SingleLineDisplaySource"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $ItemDisplayDisplaySource extends $SingleLineDisplaySource {
static readonly "EMPTY": $List<($MutableComponent)>
static readonly "EMPTY_LINE": $MutableComponent
static readonly "WHITESPACE": $MutableComponent
 "id": $ResourceLocation

constructor()

public "getPassiveRefreshTicks"(): integer
get "passiveRefreshTicks"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ItemDisplayDisplaySource$Type = ($ItemDisplayDisplaySource);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ItemDisplayDisplaySource_ = $ItemDisplayDisplaySource$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/core/$ClientConfigs" {
import {$ConfigSpec, $ConfigSpec$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/configs/$ConfigSpec"
import {$ClientConfigs$ShadeFix, $ClientConfigs$ShadeFix$Type} from "packages/net/mehvahdjukaar/moonlight/core/$ClientConfigs$ShadeFix"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"

export class $ClientConfigs {
static readonly "MERGE_PACKS": $Supplier<(boolean)>
static readonly "LAZY_MAP_DATA": $Supplier<(boolean)>
static readonly "MAPS_MIPMAP": $Supplier<(integer)>
static readonly "FIX_SHADE": $Supplier<($ClientConfigs$ShadeFix)>
static readonly "CONFIG": $ConfigSpec

constructor()

public static "init"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientConfigs$Type = ($ClientConfigs);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientConfigs_ = $ClientConfigs$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/events/behaviors/$SkullCandleConversion" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$ItemUseOnBlock, $ItemUseOnBlock$Type} from "packages/net/mehvahdjukaar/amendments/events/behaviors/$ItemUseOnBlock"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $SkullCandleConversion implements $ItemUseOnBlock {

constructor()

public static "isCorrectCandle"(item: $Item$Type): boolean
public "isEnabled"(): boolean
public "placesBlock"(): boolean
public "appliesToItem"(item: $Item$Type): boolean
public "altersWorld"(): boolean
public "tryPerformingAction"(world: $Level$Type, player: $Player$Type, hand: $InteractionHand$Type, stack: $ItemStack$Type, hit: $BlockHitResult$Type): $InteractionResult
public "getTooltip"(): $MutableComponent
public "shouldBlockMapToItem"(item: $Item$Type): boolean
get "enabled"(): boolean
get "tooltip"(): $MutableComponent
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SkullCandleConversion$Type = ($SkullCandleConversion);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SkullCandleConversion_ = $SkullCandleConversion$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/resources/assets/$LangBuilder" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$JsonElement, $JsonElement$Type} from "packages/com/google/gson/$JsonElement"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Registry, $Registry$Type} from "packages/net/minecraft/core/$Registry"
import {$AfterLanguageLoadEvent, $AfterLanguageLoadEvent$Type} from "packages/net/mehvahdjukaar/moonlight/api/events/$AfterLanguageLoadEvent"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$BlockType, $BlockType$Type} from "packages/net/mehvahdjukaar/moonlight/api/set/$BlockType"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $LangBuilder {

constructor()

public "addEntry"<T>(reg: $Registry$Type<(T)>, entry: T, translation: string): void
public "addEntry"(item: $Item$Type, translation: string): void
public "addEntry"(entityType: $EntityType$Type<(any)>, translation: string): void
public "addEntry"(block: $Block$Type, translation: string): void
public "entries"(): $Map<(string), (string)>
public "build"(): $JsonElement
public static "addDynamicEntry"(lang: $AfterLanguageLoadEvent$Type, key: string, type: $BlockType$Type, item: $Item$Type): void
public static "addDynamicEntry"(lang: $AfterLanguageLoadEvent$Type, key: string, type: $BlockType$Type, block: $Block$Type): void
public static "addDynamicEntry"(lang: $AfterLanguageLoadEvent$Type, key: string, type: $BlockType$Type, entityType: $EntityType$Type<(any)>): void
public "addGenericEntry"(key: string, translation: string): void
public "addSimpleEntry"<T>(reg: $Registry$Type<(T)>, entry: T): void
public static "getReadableName"(name: string): string
public static "getReadableComponent"(key: string, ...arg1: (string)[]): $Component
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LangBuilder$Type = ($LangBuilder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LangBuilder_ = $LangBuilder$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/resources/textures/$ImageTransformer$Builder" {
import {$ImageTransformer, $ImageTransformer$Type} from "packages/net/mehvahdjukaar/moonlight/api/resources/textures/$ImageTransformer"

export class $ImageTransformer$Builder {


public "build"(): $ImageTransformer
public "copyRect"(startX: integer, startY: integer, width: integer, height: integer, targetX: integer, targetY: integer): $ImageTransformer$Builder
public "copyRect"(startX: integer, startY: integer, width: integer, height: integer, targetX: integer, targetY: integer, targetW: integer, targetH: integer): $ImageTransformer$Builder
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ImageTransformer$Builder$Type = ($ImageTransformer$Builder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ImageTransformer$Builder_ = $ImageTransformer$Builder$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/integration/create/$SpeakerBlockDisplayTarget" {
import {$DisplayTarget, $DisplayTarget$Type} from "packages/com/simibubi/create/content/redstone/displayLink/target/$DisplayTarget"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$DisplayLinkContext, $DisplayLinkContext$Type} from "packages/com/simibubi/create/content/redstone/displayLink/$DisplayLinkContext"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$DisplayTargetStats, $DisplayTargetStats$Type} from "packages/com/simibubi/create/content/redstone/displayLink/target/$DisplayTargetStats"

export class $SpeakerBlockDisplayTarget extends $DisplayTarget {
 "id": $ResourceLocation

constructor()

public "provideStats"(context: $DisplayLinkContext$Type): $DisplayTargetStats
public "acceptText"(line: integer, text: $List$Type<($MutableComponent$Type)>, context: $DisplayLinkContext$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SpeakerBlockDisplayTarget$Type = ($SpeakerBlockDisplayTarget);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SpeakerBlockDisplayTarget_ = $SpeakerBlockDisplayTarget$Type;
}}
declare module "packages/net/mehvahdjukaar/dummmmmmy/common/$CritRecord" {
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $CritRecord {

constructor(critter: $Entity$Type, mult: float)

public "matches"(source: $DamageSource$Type): boolean
public "getMultiplier"(): float
public "addSource"(source: $DamageSource$Type): void
public "canCompleteWith"(source: $DamageSource$Type): boolean
get "multiplier"(): float
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CritRecord$Type = ($CritRecord);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CritRecord_ = $CritRecord$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/renderers/items/$FlagItemRenderer" {
import {$ItemDisplayContext, $ItemDisplayContext$Type} from "packages/net/minecraft/world/item/$ItemDisplayContext"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$ItemStackRenderer, $ItemStackRenderer$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/$ItemStackRenderer"

export class $FlagItemRenderer extends $ItemStackRenderer {

constructor()

public "renderByItem"(stack: $ItemStack$Type, transformType: $ItemDisplayContext$Type, matrixStackIn: $PoseStack$Type, bufferIn: $MultiBufferSource$Type, combinedLightIn: integer, combinedOverlayIn: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FlagItemRenderer$Type = ($FlagItemRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FlagItemRenderer_ = $FlagItemRenderer$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/forge/$AmendmentsClientImpl" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $AmendmentsClientImpl {

constructor()

public static "hasFixedNormals"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AmendmentsClientImpl$Type = ($AmendmentsClientImpl);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AmendmentsClientImpl_ = $AmendmentsClientImpl$Type;
}}
declare module "packages/net/mehvahdjukaar/dummmmmmy/network/$ClientBoundUpdateAnimationMessage" {
import {$Message, $Message$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/network/$Message"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$ChannelHandler$Context, $ChannelHandler$Context$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/network/$ChannelHandler$Context"

export class $ClientBoundUpdateAnimationMessage implements $Message {

constructor(buf: $FriendlyByteBuf$Type)
constructor(id: integer, shakeAmount: float)

public "handle"(context: $ChannelHandler$Context$Type): void
public "writeToBuffer"(buf: $FriendlyByteBuf$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientBoundUpdateAnimationMessage$Type = ($ClientBoundUpdateAnimationMessage);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientBoundUpdateAnimationMessage_ = $ClientBoundUpdateAnimationMessage$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/integration/$BumblezoneCompat" {
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $BumblezoneCompat {

constructor()

public static "turnToSugarWater"(level: $Level$Type, pos: $BlockPos$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BumblezoneCompat$Type = ($BumblezoneCompat);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BumblezoneCompat_ = $BumblezoneCompat$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/utils/forge/$FluidsUtilImpl" {
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$SoftFluidStack, $SoftFluidStack$Type} from "packages/net/mehvahdjukaar/moonlight/api/fluids/$SoftFluidStack"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $FluidsUtilImpl {

constructor()

public static "extractFluidFromTank"(tileBack: $BlockEntity$Type, dir: $Direction$Type, amount: integer): boolean
public static "fillFluidTank"(tileBelow: $BlockEntity$Type, fluid: $SoftFluidStack$Type, minAmount: integer): integer
public static "hasFluidHandler"(level: $Level$Type, pos: $BlockPos$Type, dir: $Direction$Type): boolean
public static "getFluidInTank"(level: $Level$Type, pos: $BlockPos$Type, dir: $Direction$Type, source: $BlockEntity$Type): $SoftFluidStack
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FluidsUtilImpl$Type = ($FluidsUtilImpl);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FluidsUtilImpl_ = $FluidsUtilImpl$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/client/$ClientResourceGenerator" {
import {$DynamicResourcePack, $DynamicResourcePack$Type} from "packages/net/mehvahdjukaar/moonlight/api/resources/pack/$DynamicResourcePack"
import {$Logger, $Logger$Type} from "packages/org/apache/logging/log4j/$Logger"
import {$AfterLanguageLoadEvent, $AfterLanguageLoadEvent$Type} from "packages/net/mehvahdjukaar/moonlight/api/events/$AfterLanguageLoadEvent"
import {$Palette, $Palette$Type} from "packages/net/mehvahdjukaar/moonlight/api/resources/textures/$Palette"
import {$ResourceManager, $ResourceManager$Type} from "packages/net/minecraft/server/packs/resources/$ResourceManager"
import {$DynClientResourcesGenerator, $DynClientResourcesGenerator$Type} from "packages/net/mehvahdjukaar/moonlight/api/resources/pack/$DynClientResourcesGenerator"

export class $ClientResourceGenerator extends $DynClientResourcesGenerator {
readonly "dynamicPack": T

constructor()

public "getLogger"(): $Logger
public static "amendPalette"(p: $Palette$Type): void
public "addDynamicTranslations"(languageEvent: $AfterLanguageLoadEvent$Type): void
public "dependsOnLoadedPacks"(): boolean
public "regenerateDynamicAssets"(manager: $ResourceManager$Type): void
get "logger"(): $Logger
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientResourceGenerator$Type = ($ClientResourceGenerator);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientResourceGenerator_ = $ClientResourceGenerator$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/blocks/$AbstractRopeBlock" {
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$Fluid, $Fluid$Type} from "packages/net/minecraft/world/level/material/$Fluid"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$Mirror, $Mirror$Type} from "packages/net/minecraft/world/level/block/$Mirror"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$WaterBlock, $WaterBlock$Type} from "packages/net/mehvahdjukaar/moonlight/api/block/$WaterBlock"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$CollisionContext, $CollisionContext$Type} from "packages/net/minecraft/world/phys/shapes/$CollisionContext"
import {$IRopeConnection, $IRopeConnection$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/$IRopeConnection"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$Rotation, $Rotation$Type} from "packages/net/minecraft/world/level/block/$Rotation"

export class $AbstractRopeBlock extends $WaterBlock implements $IRopeConnection {
static readonly "COLLISION_SHAPE": $VoxelShape
static readonly "KNOT": $BooleanProperty
static readonly "WATERLOGGED": $BooleanProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(properties: $BlockBehaviour$Properties$Type)

public "canSideAcceptConnection"(state: $BlockState$Type, direction: $Direction$Type): boolean
public "setConnection"(arg0: $Direction$Type, arg1: $BlockState$Type, arg2: boolean): $BlockState
public "getStateForPlacement"(context: $BlockPlaceContext$Type): $BlockState
public "isLadder"(state: $BlockState$Type, world: $LevelReader$Type, pos: $BlockPos$Type, entity: $LivingEntity$Type): boolean
public "shouldConnectToDir"(thisState: $BlockState$Type, currentPos: $BlockPos$Type, world: $LevelReader$Type, dir: $Direction$Type): boolean
public "hasConnection"(arg0: $Direction$Type, arg1: $BlockState$Type): boolean
public "hasMiddleKnot"(state: $BlockState$Type): boolean
public "getFireSpreadSpeed"(state: $BlockState$Type, world: $BlockGetter$Type, pos: $BlockPos$Type, face: $Direction$Type): integer
public "getFlammability"(state: $BlockState$Type, world: $BlockGetter$Type, pos: $BlockPos$Type, face: $Direction$Type): integer
public "skipRendering"(pState: $BlockState$Type, pAdjacentBlockState: $BlockState$Type, pSide: $Direction$Type): boolean
public "onPlace"(state: $BlockState$Type, worldIn: $Level$Type, pos: $BlockPos$Type, oldState: $BlockState$Type, isMoving: boolean): void
public "updateShape"(stateIn: $BlockState$Type, facing: $Direction$Type, facingState: $BlockState$Type, worldIn: $LevelAccessor$Type, currentPos: $BlockPos$Type, facingPos: $BlockPos$Type): $BlockState
public "use"(state: $BlockState$Type, world: $Level$Type, pos: $BlockPos$Type, player: $Player$Type, handIn: $InteractionHand$Type, hit: $BlockHitResult$Type): $InteractionResult
public "rotate"(state: $BlockState$Type, rotation: $Rotation$Type): $BlockState
public "mirror"(state: $BlockState$Type, mirror: $Mirror$Type): $BlockState
public "canBeReplaced"(state: $BlockState$Type, fluid: $Fluid$Type): boolean
public "canSurvive"(state: $BlockState$Type, world: $LevelReader$Type, pos: $BlockPos$Type): boolean
public "getCollisionShape"(state: $BlockState$Type, worldIn: $BlockGetter$Type, pos: $BlockPos$Type, context: $CollisionContext$Type): $VoxelShape
public "getShape"(state: $BlockState$Type, worldIn: $BlockGetter$Type, pos: $BlockPos$Type, context: $CollisionContext$Type): $VoxelShape
public "tick"(state: $BlockState$Type, level: $ServerLevel$Type, pos: $BlockPos$Type, rand: $RandomSource$Type): void
public "entityInside"(state: $BlockState$Type, worldIn: $Level$Type, pos: $BlockPos$Type, entityIn: $Entity$Type): void
public "shouldConnectToFace"(thisState: $BlockState$Type, facingState: $BlockState$Type, facingPos: $BlockPos$Type, dir: $Direction$Type, world: $LevelReader$Type): boolean
public static "canConnectDown"(downState: $BlockState$Type): boolean
public static "isSupportingCeiling"(upState: $BlockState$Type, pos: $BlockPos$Type, world: $LevelReader$Type): boolean
public static "isSupportingCeiling"(pos: $BlockPos$Type, world: $LevelReader$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AbstractRopeBlock$Type = ($AbstractRopeBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AbstractRopeBlock_ = $AbstractRopeBlock$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/client/texture_renderer/$RenderedTexturesManager" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$FrameBufferBackedDynamicTexture, $FrameBufferBackedDynamicTexture$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/texture_renderer/$FrameBufferBackedDynamicTexture"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$NativeImage, $NativeImage$Type} from "packages/com/mojang/blaze3d/platform/$NativeImage"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $RenderedTexturesManager {

constructor()

public static "clearCache"(): void
public static "drawItem"(tex: $FrameBufferBackedDynamicTexture$Type, stack: $ItemStack$Type): void
public static "requestTexture"(id: $ResourceLocation$Type, textureSize: integer, textureDrawingFunction: $Consumer$Type<($FrameBufferBackedDynamicTexture$Type)>, updateEachFrame: boolean): $FrameBufferBackedDynamicTexture
public static "drawAsInGUI"(tex: $FrameBufferBackedDynamicTexture$Type, drawFunction: $Consumer$Type<($PoseStack$Type)>): void
public static "drawNormalized"(tex: $FrameBufferBackedDynamicTexture$Type, drawFunction: $Consumer$Type<($PoseStack$Type)>): void
public static "requestFlatItemStackTexture"(res: $ResourceLocation$Type, stack: $ItemStack$Type, size: integer): $FrameBufferBackedDynamicTexture
public static "requestFlatItemTexture"(item: $Item$Type, size: integer): $FrameBufferBackedDynamicTexture
public static "requestFlatItemTexture"(item: $Item$Type, size: integer, postProcessing: $Consumer$Type<($NativeImage$Type)>): $FrameBufferBackedDynamicTexture
public static "requestFlatItemTexture"(id: $ResourceLocation$Type, item: $Item$Type, size: integer, postProcessing: $Consumer$Type<($NativeImage$Type)>, updateEachFrame: boolean): $FrameBufferBackedDynamicTexture
public static "requestFlatItemTexture"(id: $ResourceLocation$Type, item: $Item$Type, size: integer, postProcessing: $Consumer$Type<($NativeImage$Type)>): $FrameBufferBackedDynamicTexture
public static "drawTexture"(tex: $FrameBufferBackedDynamicTexture$Type, texture: $ResourceLocation$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RenderedTexturesManager$Type = ($RenderedTexturesManager);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RenderedTexturesManager_ = $RenderedTexturesManager$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/misc/mob_container/$DataDefinedCatchableMob$CaptureSettings" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$DataDefinedCatchableMob$CatchMode, $DataDefinedCatchableMob$CatchMode$Type} from "packages/net/mehvahdjukaar/supplementaries/common/misc/mob_container/$DataDefinedCatchableMob$CatchMode"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $DataDefinedCatchableMob$CaptureSettings extends $Record {


public "equals"(o: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "canCapture"(entity: $Entity$Type, item: $Item$Type): boolean
public "cageMode"(): $DataDefinedCatchableMob$CatchMode
public "jarMode"(): $DataDefinedCatchableMob$CatchMode
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DataDefinedCatchableMob$CaptureSettings$Type = ($DataDefinedCatchableMob$CaptureSettings);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DataDefinedCatchableMob$CaptureSettings_ = $DataDefinedCatchableMob$CaptureSettings$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/misc/mob_container/$DataDefinedCatchableMob$TickMode" {
import {$StringRepresentable$EnumCodec, $StringRepresentable$EnumCodec$Type} from "packages/net/minecraft/util/$StringRepresentable$EnumCodec"
import {$StringRepresentable, $StringRepresentable$Type} from "packages/net/minecraft/util/$StringRepresentable"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$Keyable, $Keyable$Type} from "packages/com/mojang/serialization/$Keyable"
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$Codec, $Codec$Type} from "packages/com/mojang/serialization/$Codec"

export class $DataDefinedCatchableMob$TickMode extends $Enum<($DataDefinedCatchableMob$TickMode)> implements $StringRepresentable {
static readonly "NONE": $DataDefinedCatchableMob$TickMode
static readonly "SERVER": $DataDefinedCatchableMob$TickMode
static readonly "CLIENT": $DataDefinedCatchableMob$TickMode
static readonly "BOTH": $DataDefinedCatchableMob$TickMode
static readonly "CODEC": $Codec<($DataDefinedCatchableMob$TickMode)>


public static "values"(): ($DataDefinedCatchableMob$TickMode)[]
public static "valueOf"(name: string): $DataDefinedCatchableMob$TickMode
public "getSerializedName"(): string
public static "fromEnumWithMapping"<E extends ($Enum<(E)>) & ($StringRepresentable)>(arg0: $Supplier$Type<((E)[])>, arg1: $Function$Type<(string), (string)>): $StringRepresentable$EnumCodec<(E)>
public static "keys"(arg0: ($StringRepresentable$Type)[]): $Keyable
public static "fromEnum"<E extends ($Enum<(E)>) & ($StringRepresentable)>(arg0: $Supplier$Type<((E)[])>): $StringRepresentable$EnumCodec<(E)>
get "serializedName"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DataDefinedCatchableMob$TickMode$Type = (("server") | ("client") | ("none") | ("both")) | ($DataDefinedCatchableMob$TickMode);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DataDefinedCatchableMob$TickMode_ = $DataDefinedCatchableMob$TickMode$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/faucet/$FaucetTarget$Fluid" {
import {$FaucetTarget, $FaucetTarget$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/faucet/$FaucetTarget"
import {$SoftFluidStack, $SoftFluidStack$Type} from "packages/net/mehvahdjukaar/moonlight/api/fluids/$SoftFluidStack"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$FluidState, $FluidState$Type} from "packages/net/minecraft/world/level/material/$FluidState"

export interface $FaucetTarget$Fluid extends $FaucetTarget<($FluidState)> {

 "fill"(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $FluidState$Type, arg3: $SoftFluidStack$Type, arg4: integer): integer

(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $FluidState$Type, arg3: $SoftFluidStack$Type, arg4: integer): integer
}

export namespace $FaucetTarget$Fluid {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FaucetTarget$Fluid$Type = ($FaucetTarget$Fluid);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FaucetTarget$Fluid_ = $FaucetTarget$Fluid$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/resources/recipe/forge/$OptionalRecipeCondition$Instance" {
import {$JsonElement, $JsonElement$Type} from "packages/com/google/gson/$JsonElement"
import {$ICondition$IContext, $ICondition$IContext$Type} from "packages/net/minecraftforge/common/crafting/conditions/$ICondition$IContext"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$ICondition, $ICondition$Type} from "packages/net/minecraftforge/common/crafting/conditions/$ICondition"

export class $OptionalRecipeCondition$Instance implements $ICondition {


public "test"(context: $ICondition$IContext$Type): boolean
public "getID"(): $ResourceLocation
public static "shouldRegisterEntry"(arg0: $JsonElement$Type): boolean
get "iD"(): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $OptionalRecipeCondition$Instance$Type = ($OptionalRecipeCondition$Instance);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $OptionalRecipeCondition$Instance_ = $OptionalRecipeCondition$Instance$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/platform/$ForgeHelper" {
import {$BaseRailBlock, $BaseRailBlock$Type} from "packages/net/minecraft/world/level/block/$BaseRailBlock"
import {$DynamicOps, $DynamicOps$Type} from "packages/com/mojang/serialization/$DynamicOps"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$Projectile, $Projectile$Type} from "packages/net/minecraft/world/entity/projectile/$Projectile"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$DyeColor, $DyeColor$Type} from "packages/net/minecraft/world/item/$DyeColor"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$AbstractMinecart, $AbstractMinecart$Type} from "packages/net/minecraft/world/entity/vehicle/$AbstractMinecart"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Animal, $Animal$Type} from "packages/net/minecraft/world/entity/animal/$Animal"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$FinishedRecipe, $FinishedRecipe$Type} from "packages/net/minecraft/data/recipes/$FinishedRecipe"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$RailShape, $RailShape$Type} from "packages/net/minecraft/world/level/block/state/properties/$RailShape"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$LootPool$Builder, $LootPool$Builder$Type} from "packages/net/minecraft/world/level/storage/loot/$LootPool$Builder"
import {$HitResult, $HitResult$Type} from "packages/net/minecraft/world/phys/$HitResult"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$Rotation, $Rotation$Type} from "packages/net/minecraft/world/level/block/$Rotation"
import {$Explosion, $Explosion$Type} from "packages/net/minecraft/world/level/$Explosion"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $ForgeHelper {

constructor()

public static "addConditionOps"<T>(ops: $DynamicOps$Type<(T)>): $DynamicOps<(T)>
public static "areStacksEqual"(stack: $ItemStack$Type, other: $ItemStack$Type, sameNbt: boolean): boolean
public static "isDye"(itemstack: $ItemStack$Type): boolean
public static "reviveEntity"(entity: $Entity$Type): void
public static "getReachDistance"(entity: $LivingEntity$Type): double
/**
 * 
 * @deprecated
 */
public static "addRecipeConditions"(originalRecipe: $FinishedRecipe$Type, conditions: $List$Type<(any)>): $FinishedRecipe
public static "canHarvestBlock"(state: $BlockState$Type, level: $ServerLevel$Type, pos: $BlockPos$Type, player: $ServerPlayer$Type): boolean
public static "onExplosionStart"(level: $Level$Type, explosion: $Explosion$Type): boolean
public static "rotateBlock"(state: $BlockState$Type, world: $Level$Type, targetPos: $BlockPos$Type, rot: $Rotation$Type): $BlockState
public static "onRightClickBlock"(player: $Player$Type, hand: $InteractionHand$Type, below: $BlockPos$Type, rayTraceResult: $BlockHitResult$Type): $InteractionResult
public static "getExplosionResistance"(state: $BlockState$Type, level: $Level$Type, pos: $BlockPos$Type, explosion: $Explosion$Type): float
public static "canDropFromExplosion"(blockstate: $BlockState$Type, level: $Level$Type, blockpos: $BlockPos$Type, explosion: $Explosion$Type): boolean
public static "getCraftingRemainingItem"(itemstack: $ItemStack$Type): $Optional<($ItemStack)>
public static "getFriction"(state: $BlockState$Type, level: $LevelReader$Type, pos: $BlockPos$Type, entity: $Entity$Type): float
public static "isCurativeItem"(stack: $ItemStack$Type, effect: $MobEffectInstance$Type): boolean
public static "getLightEmission"(state: $BlockState$Type, level: $Level$Type, pos: $BlockPos$Type): integer
public static "canItemStack"(i: $ItemStack$Type, i1: $ItemStack$Type): boolean
public static "setPoolName"(pool: $LootPool$Builder$Type, name: string): void
public static "getColor"(stack: $ItemStack$Type): $DyeColor
public static "isFireSource"(blockState: $BlockState$Type, level: $Level$Type, pos: $BlockPos$Type, up: $Direction$Type): boolean
public static "canEntityDestroy"(level: $Level$Type, blockPos: $BlockPos$Type, animal: $Animal$Type): boolean
public static "onBlockExploded"(blockstate: $BlockState$Type, level: $Level$Type, blockpos: $BlockPos$Type, explosion: $Explosion$Type): void
public static "onCropsGrowPost"(level: $ServerLevel$Type, pos: $BlockPos$Type, state: $BlockState$Type): void
public static "onCropsGrowPre"(level: $ServerLevel$Type, pos: $BlockPos$Type, state: $BlockState$Type, b: boolean): boolean
public static "onExplosionDetonate"(level: $Level$Type, explosion: $Explosion$Type, entities: $List$Type<($Entity$Type)>, diameter: double): void
public static "onEquipmentChange"(entity: $LivingEntity$Type, slot: $EquipmentSlot$Type, from: $ItemStack$Type, to: $ItemStack$Type): void
public static "canEquipItem"(entity: $LivingEntity$Type, stack: $ItemStack$Type, slot: $EquipmentSlot$Type): boolean
public static "onProjectileImpact"(improvedProjectileEntity: $Projectile$Type, blockHitResult: $HitResult$Type): boolean
public static "onLivingConvert"(frFom: $LivingEntity$Type, to: $LivingEntity$Type): void
public static "canLivingConvert"(entity: $LivingEntity$Type, outcome: $EntityType$Type<(any)>, timer: $Consumer$Type<(integer)>): boolean
public static "isMultipartEntity"(e: $Entity$Type): boolean
public static "getBlockItemMap"(): $Map<($Block), ($Item)>
public static "getRailDirection"(railBlock: $BaseRailBlock$Type, blockstate: $BlockState$Type, level: $Level$Type, blockpos: $BlockPos$Type, o: $AbstractMinecart$Type): $RailShape
get "blockItemMap"(): $Map<($Block), ($Item)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ForgeHelper$Type = ($ForgeHelper);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ForgeHelper_ = $ForgeHelper$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/renderers/entities/layers/$HatStandArmorLayer" {
import {$HatStandEntity, $HatStandEntity$Type} from "packages/net/mehvahdjukaar/supplementaries/common/entities/$HatStandEntity"
import {$HumanoidModel, $HumanoidModel$Type} from "packages/net/minecraft/client/model/$HumanoidModel"
import {$RenderLayerParent, $RenderLayerParent$Type} from "packages/net/minecraft/client/renderer/entity/$RenderLayerParent"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$HumanoidArmorLayer, $HumanoidArmorLayer$Type} from "packages/net/minecraft/client/renderer/entity/layers/$HumanoidArmorLayer"
import {$ModelManager, $ModelManager$Type} from "packages/net/minecraft/client/resources/model/$ModelManager"

export class $HatStandArmorLayer<T extends $HatStandEntity, A extends $HumanoidModel<(T)>> extends $HumanoidArmorLayer<(T), (A), (A)> {

constructor(renderLayerParent: $RenderLayerParent$Type<(T), (A)>, modelHelmet: A, modelManager: $ModelManager$Type)

public "render"(matrixStack: $PoseStack$Type, buffer: $MultiBufferSource$Type, packedLight: integer, livingEntity: T, limbSwing: float, limbSwingAmount: float, partialTicks: float, ageInTicks: float, netHeadYaw: float, headPitch: float): void
public "m_117125_"(modelIn: A, slotIn: $EquipmentSlot$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $HatStandArmorLayer$Type<T, A> = ($HatStandArmorLayer<(T), (A)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $HatStandArmorLayer_<T, A> = $HatStandArmorLayer$Type<(T), (A)>;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/renderers/tiles/$BellowsBlockTileRenderer" {
import {$BlockEntityRendererProvider$Context, $BlockEntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/blockentity/$BlockEntityRendererProvider$Context"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$BellowsBlockTile, $BellowsBlockTile$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$BellowsBlockTile"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$LayerDefinition, $LayerDefinition$Type} from "packages/net/minecraft/client/model/geom/builders/$LayerDefinition"
import {$BlockEntityRenderer, $BlockEntityRenderer$Type} from "packages/net/minecraft/client/renderer/blockentity/$BlockEntityRenderer"

export class $BellowsBlockTileRenderer implements $BlockEntityRenderer<($BellowsBlockTile)> {

constructor(context: $BlockEntityRendererProvider$Context$Type)

public "getViewDistance"(): integer
public "render"(tile: $BellowsBlockTile$Type, partialTicks: float, poseStack: $PoseStack$Type, bufferIn: $MultiBufferSource$Type, combinedLightIn: integer, combinedOverlayIn: integer): void
public static "createMesh"(): $LayerDefinition
public "shouldRender"(arg0: $BellowsBlockTile$Type, arg1: $Vec3$Type): boolean
public "shouldRenderOffScreen"(arg0: $BellowsBlockTile$Type): boolean
get "viewDistance"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BellowsBlockTileRenderer$Type = ($BellowsBlockTileRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BellowsBlockTileRenderer_ = $BellowsBlockTileRenderer$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/client/model/$CauldronModelLoader" {
import {$Material, $Material$Type} from "packages/net/minecraft/client/resources/model/$Material"
import {$JsonObject, $JsonObject$Type} from "packages/com/google/gson/$JsonObject"
import {$JsonElement, $JsonElement$Type} from "packages/com/google/gson/$JsonElement"
import {$ModelBaker, $ModelBaker$Type} from "packages/net/minecraft/client/resources/model/$ModelBaker"
import {$ModelState, $ModelState$Type} from "packages/net/minecraft/client/resources/model/$ModelState"
import {$BakedModel, $BakedModel$Type} from "packages/net/minecraft/client/resources/model/$BakedModel"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$CustomModelLoader, $CustomModelLoader$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$CustomModelLoader"
import {$CustomGeometry, $CustomGeometry$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$CustomGeometry"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$JsonDeserializationContext, $JsonDeserializationContext$Type} from "packages/com/google/gson/$JsonDeserializationContext"
import {$TextureAtlasSprite, $TextureAtlasSprite$Type} from "packages/net/minecraft/client/renderer/texture/$TextureAtlasSprite"

export class $CauldronModelLoader implements $CustomModelLoader {

constructor()

public "deserialize"(json: $JsonObject$Type, jsonDeserializationContext: $JsonDeserializationContext$Type): $CustomGeometry
public static "parseModel"(j: $JsonElement$Type, modelBaker: $ModelBaker$Type, spriteGetter: $Function$Type<($Material$Type), ($TextureAtlasSprite$Type)>, transform: $ModelState$Type, location: $ResourceLocation$Type): $BakedModel
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CauldronModelLoader$Type = ($CauldronModelLoader);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CauldronModelLoader_ = $CauldronModelLoader$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/integration/$SuppCompat" {
import {$Material, $Material$Type} from "packages/net/minecraft/client/resources/model/$Material"
import {$BannerPatternItem, $BannerPatternItem$Type} from "packages/net/minecraft/world/item/$BannerPatternItem"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$SkullBlock, $SkullBlock$Type} from "packages/net/minecraft/world/level/block/$SkullBlock"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $SuppCompat {

constructor()

public static "setup"(): void
public static "getSignColorMult"(): float
public static "getFlagMaterial"(bannerPatternItem: $BannerPatternItem$Type): $Material
public static "canConnectDown"(neighborState: $BlockState$Type): boolean
public static "spawnCakeParticles"(level: $Level$Type, pos: $BlockPos$Type, rand: $RandomSource$Type): void
public static "isSupportingCeiling"(upState: $BlockState$Type, pos: $BlockPos$Type, world: $LevelReader$Type): boolean
public static "createMiniExplosion"(level: $Level$Type, pos: $BlockPos$Type, b: boolean): void
public static "addOptionalOwnership"(world: $Level$Type, pos: $BlockPos$Type, entity: $LivingEntity$Type): void
public static "canBannerAttachToRope"(state: $BlockState$Type, above: $BlockState$Type): boolean
public static "isVerticalStick"(state: $BlockState$Type, facing: $Direction$Type): boolean
public static "isCandleHolder"(block: $Block$Type): boolean
public static "isSconce"(block: $Block$Type): boolean
public static "isEndermanHead"(skull: $SkullBlock$Type): boolean
public static "isRope"(block: $Block$Type): boolean
get "signColorMult"(): float
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SuppCompat$Type = ($SuppCompat);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SuppCompat_ = $SuppCompat$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/$IWaxable" {
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export interface $IWaxable {

 "isWaxed"(): boolean
 "tryWaxing"(level: $Level$Type, pos: $BlockPos$Type, player: $Player$Type, hand: $InteractionHand$Type): $InteractionResult
 "setWaxed"(arg0: boolean): void
}

export namespace $IWaxable {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IWaxable$Type = ($IWaxable);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IWaxable_ = $IWaxable$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/events/forge/$IFireConsumeBlockEventImpl" {
import {$IFireConsumeBlockEvent, $IFireConsumeBlockEvent$Type} from "packages/net/mehvahdjukaar/moonlight/api/events/$IFireConsumeBlockEvent"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $IFireConsumeBlockEventImpl {

constructor()

public static "create"(pos: $BlockPos$Type, level: $Level$Type, state: $BlockState$Type, chance: integer, age: integer, face: $Direction$Type): $IFireConsumeBlockEvent
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IFireConsumeBlockEventImpl$Type = ($IFireConsumeBlockEventImpl);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IFireConsumeBlockEventImpl_ = $IFireConsumeBlockEventImpl$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/misc/$ColoredMapHandler$Counter" {
import {$CustomMapData$DirtyCounter, $CustomMapData$DirtyCounter$Type} from "packages/net/mehvahdjukaar/moonlight/api/map/$CustomMapData$DirtyCounter"

export class $ColoredMapHandler$Counter implements $CustomMapData$DirtyCounter {


public "isDirty"(): boolean
public "clearDirty"(): void
public "markDirty"(x: integer, z: integer, changedBiome: boolean, changedBlock: boolean): void
get "dirty"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ColoredMapHandler$Counter$Type = ($ColoredMapHandler$Counter);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ColoredMapHandler$Counter_ = $ColoredMapHandler$Counter$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/configs/$ConfigUtils" {
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"

export class $ConfigUtils {

constructor()

public static "clientRequestServerConfigReload"(): void
public static "openModConfigs"(): void
public static "configScreenReload"(player: $ServerPlayer$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ConfigUtils$Type = ($ConfigUtils);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ConfigUtils_ = $ConfigUtils$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/client/$TextureCache" {
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$ItemLike, $ItemLike$Type} from "packages/net/minecraft/world/level/$ItemLike"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $TextureCache {

constructor()

public static "add"(block: $ItemLike$Type, t: string): void
public static "clear"(): void
public static "getCached"(block: $ItemLike$Type, texturePredicate: $Predicate$Type<(string)>): string
public static "registerSpecialTextureForBlock"(block: $ItemLike$Type, id: string, texturePath: $ResourceLocation$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TextureCache$Type = ($TextureCache);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TextureCache_ = $TextureCache$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/faucet/$SappyLogInteraction" {
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$FluidOffer, $FluidOffer$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/faucet/$FluidOffer"
import {$FaucetSource$BlState, $FaucetSource$BlState$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/faucet/$FaucetSource$BlState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $SappyLogInteraction implements $FaucetSource$BlState {


public "drain"(level: $Level$Type, pos: $BlockPos$Type, dir: $Direction$Type, state: $BlockState$Type, amount: integer): void
public "getProvidedFluid"(level: $Level$Type, pos: $BlockPos$Type, dir: $Direction$Type, state: $BlockState$Type): $FluidOffer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SappyLogInteraction$Type = ($SappyLogInteraction);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SappyLogInteraction_ = $SappyLogInteraction$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/particles/$SugarParticle" {
import {$ClientLevel, $ClientLevel$Type} from "packages/net/minecraft/client/multiplayer/$ClientLevel"
import {$ParticleRenderType, $ParticleRenderType$Type} from "packages/net/minecraft/client/particle/$ParticleRenderType"
import {$TerrainParticle, $TerrainParticle$Type} from "packages/net/minecraft/client/particle/$TerrainParticle"

export class $SugarParticle extends $TerrainParticle {
static readonly "TERRAIN_SHEET_OPAQUE": $ParticleRenderType
 "x": double
 "y": double
 "z": double
 "xd": double
 "yd": double
 "zd": double
 "age": integer
 "rCol": float
 "gCol": float
 "bCol": float

constructor(clientLevel: $ClientLevel$Type, x: double, y: double, z: double, speedX: double, speedY: double, speedZ: double)

public "getRenderType"(): $ParticleRenderType
public "tick"(): void
get "renderType"(): $ParticleRenderType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SugarParticle$Type = ($SugarParticle);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SugarParticle_ = $SugarParticle$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/fluids/$SoftFluid" {
import {$Fluid, $Fluid$Type} from "packages/net/minecraft/world/level/material/$Fluid"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$SoftFluid$Builder, $SoftFluid$Builder$Type} from "packages/net/mehvahdjukaar/moonlight/api/fluids/$SoftFluid$Builder"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Codec, $Codec$Type} from "packages/com/mojang/serialization/$Codec"
import {$SoftFluid$TintMethod, $SoftFluid$TintMethod$Type} from "packages/net/mehvahdjukaar/moonlight/api/fluids/$SoftFluid$TintMethod"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Holder, $Holder$Type} from "packages/net/minecraft/core/$Holder"
import {$FluidContainerList, $FluidContainerList$Type} from "packages/net/mehvahdjukaar/moonlight/api/fluids/$FluidContainerList"
import {$Triplet, $Triplet$Type} from "packages/net/mehvahdjukaar/moonlight/api/misc/$Triplet"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$FoodProvider, $FoodProvider$Type} from "packages/net/mehvahdjukaar/moonlight/api/fluids/$FoodProvider"

export class $SoftFluid {
readonly "isGenerated": boolean
static readonly "BOTTLE_COUNT": integer
static readonly "BOWL_COUNT": integer
static readonly "BUCKET_COUNT": integer
static readonly "WATER_BUCKET_COUNT": integer
static readonly "HOLDER_CODEC": $Codec<($Holder<($SoftFluid)>)>
static readonly "COMPONENT_CODEC": $Codec<($Component)>
static readonly "CODEC": $Codec<($SoftFluid)>


/**
 * 
 * @deprecated
 */
public "isEmpty"(): boolean
public "isEnabled"(): boolean
public "getFlowingTexture"(): $ResourceLocation
public "getLuminosity"(): integer
public static "addFluidSpecificAttributes"(builder: $SoftFluid$Builder$Type, fluid: $Fluid$Type): void
public "getAverageTextureTintColor"(): integer
public "getTintColor"(): integer
public "getStillTexture"(): $ResourceLocation
public "isEquivalent"(fluid: $Fluid$Type): boolean
public "getTranslatedName"(): $Component
public "getTintMethod"(): $SoftFluid$TintMethod
public "getContainerList"(): $FluidContainerList
public "getEmissivity"(): integer
public "getEmptyContainer"(filledContainer: $Item$Type): $Optional<($Item)>
public "isEmptyFluid"(): boolean
public "getFoodProvider"(): $FoodProvider
/**
 * 
 * @deprecated
 */
public "getFromMod"(): string
public "getTextureOverride"(): $ResourceLocation
/**
 * 
 * @deprecated
 */
public "getForgeFluid"(): $Fluid
public "getNbtKeyFromItem"(): $List<(string)>
public static "getRenderingData"(useTexturesFrom: $ResourceLocation$Type): $Triplet<($ResourceLocation), ($ResourceLocation), (integer)>
public "getVanillaFluid"(): $Fluid
public "getFilledContainer"(emptyContainer: $Item$Type): $Optional<($Item)>
public "isFood"(): boolean
public "isColored"(): boolean
/**
 * 
 * @deprecated
 */
public "getTranslationKey"(): string
public "getEquivalentFluids"(): $List<($Fluid)>
get "empty"(): boolean
get "enabled"(): boolean
get "flowingTexture"(): $ResourceLocation
get "luminosity"(): integer
get "averageTextureTintColor"(): integer
get "tintColor"(): integer
get "stillTexture"(): $ResourceLocation
get "translatedName"(): $Component
get "tintMethod"(): $SoftFluid$TintMethod
get "containerList"(): $FluidContainerList
get "emissivity"(): integer
get "emptyFluid"(): boolean
get "foodProvider"(): $FoodProvider
get "fromMod"(): string
get "textureOverride"(): $ResourceLocation
get "forgeFluid"(): $Fluid
get "nbtKeyFromItem"(): $List<(string)>
get "vanillaFluid"(): $Fluid
get "food"(): boolean
get "colored"(): boolean
get "translationKey"(): string
get "equivalentFluids"(): $List<($Fluid)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SoftFluid$Type = ($SoftFluid);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SoftFluid_ = $SoftFluid$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/core/databuddy/$ConfigHelper$ConfigObject" {
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"

export class $ConfigHelper$ConfigObject<T> implements $Supplier<(T)> {


public "get"(): T
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ConfigHelper$ConfigObject$Type<T> = ($ConfigHelper$ConfigObject<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ConfigHelper$ConfigObject_<T> = $ConfigHelper$ConfigObject$Type<(T)>;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/cannon/$CannonTrajectory" {
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$Vec2, $Vec2$Type} from "packages/net/minecraft/world/phys/$Vec2"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $CannonTrajectory extends $Record {

constructor(point: $Vec2$Type, pitch: float, finalTime: double, miss: boolean, gravity: float, drag: float, v0x: float, v0y: float)

public static "arcY"(t: double, g: float, d: float, V0y: float): double
public static "arcX"(t: double, g: float, d: float, V0x: float): double
public "v0y"(): float
public "v0x"(): float
public "equals"(o: any): boolean
public "toString"(): string
public "hashCode"(): integer
public static "of"(point: $Vec2$Type, pitch: float, finalTime: double, miss: boolean, gravity: float, drag: float, pow: float): $CannonTrajectory
public "point"(): $Vec2
public "getY"(t: double): double
public "pitch"(): float
public "getX"(t: double): double
public "miss"(): boolean
public "finalTime"(): double
public "gravity"(): float
public "drag"(): float
public "getHitPos"(cannonPos: $BlockPos$Type, yaw: float): $BlockPos
public static "findBest"(targetPoint: $Vec2$Type, gravity: float, drag: float, initialPow: float, preferShootingDown: boolean, minPitch: float, maxPitch: float): $CannonTrajectory
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CannonTrajectory$Type = ($CannonTrajectory);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CannonTrajectory_ = $CannonTrajectory$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/blocks/$BellowsBlock" {
import {$IntegerProperty, $IntegerProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$IntegerProperty"
import {$EntityBlock, $EntityBlock$Type} from "packages/net/minecraft/world/level/block/$EntityBlock"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Mirror, $Mirror$Type} from "packages/net/minecraft/world/level/block/$Mirror"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$PathComputationType, $PathComputationType$Type} from "packages/net/minecraft/world/level/pathfinder/$PathComputationType"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"
import {$DirectionProperty, $DirectionProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$DirectionProperty"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$CollisionContext, $CollisionContext$Type} from "packages/net/minecraft/world/phys/shapes/$CollisionContext"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$Rotation, $Rotation$Type} from "packages/net/minecraft/world/level/block/$Rotation"
import {$BlockEntityTicker, $BlockEntityTicker$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityTicker"
import {$GameEventListener, $GameEventListener$Type} from "packages/net/minecraft/world/level/gameevent/$GameEventListener"
import {$RenderShape, $RenderShape$Type} from "packages/net/minecraft/world/level/block/$RenderShape"

export class $BellowsBlock extends $Block implements $EntityBlock {
static readonly "FACING": $DirectionProperty
static readonly "POWER": $IntegerProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(properties: $BlockBehaviour$Properties$Type)

public "getTicker"<T extends $BlockEntity>(pLevel: $Level$Type, pState: $BlockState$Type, pBlockEntityType: $BlockEntityType$Type<(T)>): $BlockEntityTicker<(T)>
public "propagatesSkylightDown"(state: $BlockState$Type, reader: $BlockGetter$Type, pos: $BlockPos$Type): boolean
public "getStateForPlacement"(context: $BlockPlaceContext$Type): $BlockState
public "setPlacedBy"(world: $Level$Type, pos: $BlockPos$Type, state: $BlockState$Type, placer: $LivingEntity$Type, stack: $ItemStack$Type): void
public "stepOn"(worldIn: $Level$Type, pos: $BlockPos$Type, state: $BlockState$Type, entityIn: $Entity$Type): void
public "updatePower"(state: $BlockState$Type, world: $Level$Type, pos: $BlockPos$Type): void
public "isPathfindable"(state: $BlockState$Type, worldIn: $BlockGetter$Type, pos: $BlockPos$Type, type: $PathComputationType$Type): boolean
public "neighborChanged"(state: $BlockState$Type, world: $Level$Type, pos: $BlockPos$Type, neighborBlock: $Block$Type, fromPos: $BlockPos$Type, moving: boolean): void
public "use"(state: $BlockState$Type, level: $Level$Type, pos: $BlockPos$Type, player: $Player$Type, hand: $InteractionHand$Type, hit: $BlockHitResult$Type): $InteractionResult
public "getRenderShape"(state: $BlockState$Type): $RenderShape
public "rotate"(state: $BlockState$Type, rot: $Rotation$Type): $BlockState
public "mirror"(state: $BlockState$Type, mirrorIn: $Mirror$Type): $BlockState
public "getOcclusionShape"(state: $BlockState$Type, worldIn: $BlockGetter$Type, pos: $BlockPos$Type): $VoxelShape
public "getCollisionShape"(state: $BlockState$Type, worldIn: $BlockGetter$Type, pos: $BlockPos$Type, context: $CollisionContext$Type): $VoxelShape
public "entityInside"(state: $BlockState$Type, worldIn: $Level$Type, pos: $BlockPos$Type, entityIn: $Entity$Type): void
public static "createVoxelShapeY"(height: float): $VoxelShape
public static "createVoxelShapeXZ"(height: float): $VoxelShape
public "newBlockEntity"(pPos: $BlockPos$Type, pState: $BlockState$Type): $BlockEntity
public "getListener"<T extends $BlockEntity>(arg0: $ServerLevel$Type, arg1: T): $GameEventListener
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BellowsBlock$Type = ($BellowsBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BellowsBlock_ = $BellowsBlock$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/items/crafting/$PresentDyeRecipe" {
import {$RegistryAccess, $RegistryAccess$Type} from "packages/net/minecraft/core/$RegistryAccess"
import {$RecipeSerializer, $RecipeSerializer$Type} from "packages/net/minecraft/world/item/crafting/$RecipeSerializer"
import {$CustomRecipe, $CustomRecipe$Type} from "packages/net/minecraft/world/item/crafting/$CustomRecipe"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$CraftingContainer, $CraftingContainer$Type} from "packages/net/minecraft/world/inventory/$CraftingContainer"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$CraftingBookCategory, $CraftingBookCategory$Type} from "packages/net/minecraft/world/item/crafting/$CraftingBookCategory"

export class $PresentDyeRecipe extends $CustomRecipe {

constructor(resourceLocation: $ResourceLocation$Type, category: $CraftingBookCategory$Type)

public "matches"(craftingContainer: $CraftingContainer$Type, level: $Level$Type): boolean
public "canCraftInDimensions"(width: integer, height: integer): boolean
public "getSerializer"(): $RecipeSerializer<(any)>
public "assemble"(craftingContainer: $CraftingContainer$Type, registryAccess: $RegistryAccess$Type): $ItemStack
get "serializer"(): $RecipeSerializer<(any)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PresentDyeRecipe$Type = ($PresentDyeRecipe);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PresentDyeRecipe_ = $PresentDyeRecipe$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/misc/$TriFunction" {
import {$Function, $Function$Type} from "packages/java/util/function/$Function"

export interface $TriFunction<T, U, V, R> {

 "apply"(arg0: T, arg1: U, arg2: V): R
 "andThen"<W>(after: $Function$Type<(any), (any)>): $TriFunction<(T), (U), (V), (W)>

(arg0: T, arg1: U, arg2: V): R
}

export namespace $TriFunction {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TriFunction$Type<T, U, V, R> = ($TriFunction<(T), (U), (V), (R)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TriFunction_<T, U, V, R> = $TriFunction$Type<(T), (U), (V), (R)>;
}}
declare module "packages/net/mehvahdjukaar/amendments/events/behaviors/$HangingSignDisplayItem" {
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$BlockUse, $BlockUse$Type} from "packages/net/mehvahdjukaar/amendments/events/behaviors/$BlockUse"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"

export class $HangingSignDisplayItem implements $BlockUse {
static readonly "INSTANCE": $HangingSignDisplayItem

constructor()

public "isEnabled"(): boolean
public "appliesToBlock"(block: $Block$Type): boolean
public "tryPerformingAction"(state: $BlockState$Type, pos: $BlockPos$Type, level: $Level$Type, player: $Player$Type, hand: $InteractionHand$Type, stack: $ItemStack$Type, hit: $BlockHitResult$Type): $InteractionResult
public "altersWorld"(): boolean
get "enabled"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $HangingSignDisplayItem$Type = ($HangingSignDisplayItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $HangingSignDisplayItem_ = $HangingSignDisplayItem$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/particles/$BombExplosionParticle" {
import {$ParticleRenderType, $ParticleRenderType$Type} from "packages/net/minecraft/client/particle/$ParticleRenderType"
import {$TextureSheetParticle, $TextureSheetParticle$Type} from "packages/net/minecraft/client/particle/$TextureSheetParticle"

export class $BombExplosionParticle extends $TextureSheetParticle {
 "x": double
 "y": double
 "z": double
 "xd": double
 "yd": double
 "zd": double
 "age": integer
 "rCol": float
 "gCol": float
 "bCol": float


public "m_6355_"(partialTick: float): integer
public "getRenderType"(): $ParticleRenderType
public "tick"(): void
get "renderType"(): $ParticleRenderType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BombExplosionParticle$Type = ($BombExplosionParticle);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BombExplosionParticle_ = $BombExplosionParticle$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/set/$BlockTypeRegistry" {
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$AfterLanguageLoadEvent, $AfterLanguageLoadEvent$Type} from "packages/net/mehvahdjukaar/moonlight/api/events/$AfterLanguageLoadEvent"
import {$ItemLike, $ItemLike$Type} from "packages/net/minecraft/world/level/$ItemLike"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$BlockType, $BlockType$Type} from "packages/net/mehvahdjukaar/moonlight/api/set/$BlockType"
import {$BlockType$SetFinder, $BlockType$SetFinder$Type} from "packages/net/mehvahdjukaar/moonlight/api/set/$BlockType$SetFinder"

export class $BlockTypeRegistry<T extends $BlockType> {


public "get"(res: $ResourceLocation$Type): T
public "getType"(): $Class<(T)>
public "typeName"(): string
public "getFinders"(): $Collection<($BlockType$SetFinder<(T)>)>
public "registerBlockType"(newType: T): void
public "addFinder"(finder: $BlockType$SetFinder$Type<(T)>): void
public "getFromNBT"(name: string): T
public "buildAll"(): void
public "onBlockInit"(): void
public "getBlockTypeOf"(itemLike: $ItemLike$Type): T
public "addRemover"(id: $ResourceLocation$Type): void
public "onItemInit"(): void
public "getDefaultType"(): T
public "addTypeTranslations"(language: $AfterLanguageLoadEvent$Type): void
public "detectTypeFromBlock"(arg0: $Block$Type, arg1: $ResourceLocation$Type): $Optional<(T)>
public "getValues"(): $Collection<(T)>
get "type"(): $Class<(T)>
get "finders"(): $Collection<($BlockType$SetFinder<(T)>)>
get "defaultType"(): T
get "values"(): $Collection<(T)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BlockTypeRegistry$Type<T> = ($BlockTypeRegistry<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BlockTypeRegistry_<T> = $BlockTypeRegistry$Type<(T)>;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/integration/$CompatWoodTypes" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $CompatWoodTypes {

constructor()

public static "init"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CompatWoodTypes$Type = ($CompatWoodTypes);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CompatWoodTypes_ = $CompatWoodTypes$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/client/$WallLanternModelsManager" {
import {$ClientHelper$SpecialModelEvent, $ClientHelper$SpecialModelEvent$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/$ClientHelper$SpecialModelEvent"
import {$BlockModelShaper, $BlockModelShaper$Type} from "packages/net/minecraft/client/renderer/block/$BlockModelShaper"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BakedModel, $BakedModel$Type} from "packages/net/minecraft/client/resources/model/$BakedModel"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$ResourceManager, $ResourceManager$Type} from "packages/net/minecraft/server/packs/resources/$ResourceManager"
import {$TextureAtlasSprite, $TextureAtlasSprite$Type} from "packages/net/minecraft/client/renderer/texture/$TextureAtlasSprite"

export class $WallLanternModelsManager {

constructor()

public static "refreshModels"(manager: $ResourceManager$Type): void
public static "getTexture"(block: $Block$Type): $TextureAtlasSprite
public static "getModel"(blockModelShaper: $BlockModelShaper$Type, lantern: $BlockState$Type): $BakedModel
public static "registerSpecialModels"(event: $ClientHelper$SpecialModelEvent$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WallLanternModelsManager$Type = ($WallLanternModelsManager);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WallLanternModelsManager_ = $WallLanternModelsManager$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/blocks/$CogBlock" {
import {$IntegerProperty, $IntegerProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$IntegerProperty"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $CogBlock extends $Block {
static readonly "POWER": $IntegerProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(properties: $BlockBehaviour$Properties$Type)

public "setPlacedBy"(worldIn: $Level$Type, pos: $BlockPos$Type, state: $BlockState$Type, placer: $LivingEntity$Type, stack: $ItemStack$Type): void
public "updatePower"(state: $BlockState$Type, world: $Level$Type, pos: $BlockPos$Type): void
public "neighborChanged"(state: $BlockState$Type, world: $Level$Type, pos: $BlockPos$Type, neighborBlock: $Block$Type, fromPos: $BlockPos$Type, moving: boolean): void
public "isSignalSource"(state: $BlockState$Type): boolean
public "getSignal"(blockState: $BlockState$Type, blockAccess: $BlockGetter$Type, pos: $BlockPos$Type, side: $Direction$Type): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CogBlock$Type = ($CogBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CogBlock_ = $CogBlock$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/particles/$BombExplosionEmitterParticle" {
import {$NoRenderParticle, $NoRenderParticle$Type} from "packages/net/minecraft/client/particle/$NoRenderParticle"

export class $BombExplosionEmitterParticle extends $NoRenderParticle {
 "x": double
 "y": double
 "z": double
 "xd": double
 "yd": double
 "zd": double
 "age": integer
 "rCol": float
 "gCol": float
 "bCol": float


public "tick"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BombExplosionEmitterParticle$Type = ($BombExplosionEmitterParticle);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BombExplosionEmitterParticle_ = $BombExplosionEmitterParticle$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$HourGlassBlockTile" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$HourglassTimeData, $HourglassTimeData$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/hourglass/$HourglassTimeData"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$LockCode, $LockCode$Type} from "packages/net/minecraft/world/$LockCode"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$ItemDisplayTile, $ItemDisplayTile$Type} from "packages/net/mehvahdjukaar/moonlight/api/block/$ItemDisplayTile"

export class $HourGlassBlockTile extends $ItemDisplayTile {
static readonly "LOOT_TABLE_TAG": string
static readonly "LOOT_TABLE_SEED_TAG": string
 "lootTable": $ResourceLocation
 "lootTableSeed": long
 "lockKey": $LockCode
 "blockState": $BlockState

constructor(pos: $BlockPos$Type, state: $BlockState$Type)

public static "tick"(pLevel: $Level$Type, pPos: $BlockPos$Type, pState: $BlockState$Type, tile: $HourGlassBlockTile$Type): void
public "getTexture"(): $ResourceLocation
public "getProgress"(partialTicks: float): float
public "updateTileOnInventoryChanged"(): void
public "canTakeItemThroughFace"(index: integer, stack: $ItemStack$Type, direction: $Direction$Type): boolean
public "getSlotsForFace"(side: $Direction$Type): (integer)[]
public "canPlaceItemThroughFace"(index: integer, stack: $ItemStack$Type, direction: $Direction$Type): boolean
public "load"(compound: $CompoundTag$Type): void
public "m_183515_"(tag: $CompoundTag$Type): void
public "getPower"(): integer
public "getDirection"(): $Direction
public "canPlaceItem"(index: integer, stack: $ItemStack$Type): boolean
public "m_6820_"(): $Component
public "getSandData"(): $HourglassTimeData
public "getAddItemSound"(): $SoundEvent
public static "stillValidBlockEntity"(arg0: $BlockEntity$Type, arg1: $Player$Type, arg2: integer): boolean
public static "stillValidBlockEntity"(arg0: $BlockEntity$Type, arg1: $Player$Type): boolean
public static "tryClear"(arg0: any): void
get "texture"(): $ResourceLocation
get "power"(): integer
get "direction"(): $Direction
get "sandData"(): $HourglassTimeData
get "addItemSound"(): $SoundEvent
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $HourGlassBlockTile$Type = ($HourGlassBlockTile);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $HourGlassBlockTile_ = $HourGlassBlockTile$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/platform/$ClientHelper$ParticleFactory" {
import {$ParticleProvider, $ParticleProvider$Type} from "packages/net/minecraft/client/particle/$ParticleProvider"
import {$SpriteSet, $SpriteSet$Type} from "packages/net/minecraft/client/particle/$SpriteSet"
import {$ParticleOptions, $ParticleOptions$Type} from "packages/net/minecraft/core/particles/$ParticleOptions"

export interface $ClientHelper$ParticleFactory<T extends $ParticleOptions> {

 "create"(arg0: $SpriteSet$Type): $ParticleProvider<(T)>

(arg0: $SpriteSet$Type): $ParticleProvider<(T)>
}

export namespace $ClientHelper$ParticleFactory {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientHelper$ParticleFactory$Type<T> = ($ClientHelper$ParticleFactory<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientHelper$ParticleFactory_<T> = $ClientHelper$ParticleFactory$Type<(T)>;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/renderers/items/$BlackboardItemRenderer" {
import {$ItemDisplayContext, $ItemDisplayContext$Type} from "packages/net/minecraft/world/item/$ItemDisplayContext"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$ItemStackRenderer, $ItemStackRenderer$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/$ItemStackRenderer"

export class $BlackboardItemRenderer extends $ItemStackRenderer {

constructor()

public "renderByItem"(stack: $ItemStack$Type, transformType: $ItemDisplayContext$Type, matrixStackIn: $PoseStack$Type, bufferIn: $MultiBufferSource$Type, combinedLightIn: integer, combinedOverlayIn: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BlackboardItemRenderer$Type = ($BlackboardItemRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BlackboardItemRenderer_ = $BlackboardItemRenderer$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/dispenser/$GunpowderBehavior" {
import {$DispenserHelper$AdditionalDispenserBehavior, $DispenserHelper$AdditionalDispenserBehavior$Type} from "packages/net/mehvahdjukaar/moonlight/api/util/$DispenserHelper$AdditionalDispenserBehavior"
import {$BlockSource, $BlockSource$Type} from "packages/net/minecraft/core/$BlockSource"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $GunpowderBehavior extends $DispenserHelper$AdditionalDispenserBehavior {


public static "bootStrap"(): void
public static "setEntityPokingOutOfBlock"(arg0: $BlockSource$Type, arg1: $Entity$Type, arg2: $Direction$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GunpowderBehavior$Type = ($GunpowderBehavior);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GunpowderBehavior_ = $GunpowderBehavior$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/fluids/$FluidContainerList" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$FluidContainerList$Category, $FluidContainerList$Category$Type} from "packages/net/mehvahdjukaar/moonlight/api/fluids/$FluidContainerList$Category"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"

export class $FluidContainerList {

constructor(categoryList: $List$Type<($FluidContainerList$Category$Type)>)
constructor()

public "getPossibleEmpty"(): $Collection<($Item)>
public "getCategoryFromFilled"(filledContainer: $Item$Type): $Optional<($FluidContainerList$Category)>
public "getCategoryFromEmpty"(emptyContainer: $Item$Type): $Optional<($FluidContainerList$Category)>
public "getPossibleFilled"(): $Collection<($Item)>
public "getEmpty"(filledContainer: $Item$Type): $Optional<($Item)>
public "getCategories"(): $Collection<($FluidContainerList$Category)>
public "getFilled"(emptyContainer: $Item$Type): $Optional<($Item)>
get "possibleEmpty"(): $Collection<($Item)>
get "possibleFilled"(): $Collection<($Item)>
get "categories"(): $Collection<($FluidContainerList$Category)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FluidContainerList$Type = ($FluidContainerList);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FluidContainerList_ = $FluidContainerList$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/items/tooltip_components/$SherdTooltip" {
import {$TooltipComponent, $TooltipComponent$Type} from "packages/net/minecraft/world/inventory/tooltip/$TooltipComponent"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$ResourceKey, $ResourceKey$Type} from "packages/net/minecraft/resources/$ResourceKey"

export class $SherdTooltip extends $Record implements $TooltipComponent {

constructor(sherd: $ResourceKey$Type<(string)>)

public "equals"(o: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "sherd"(): $ResourceKey<(string)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SherdTooltip$Type = ($SherdTooltip);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SherdTooltip_ = $SherdTooltip$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/fluids/$SoftFluid$TintMethod" {
import {$StringRepresentable$EnumCodec, $StringRepresentable$EnumCodec$Type} from "packages/net/minecraft/util/$StringRepresentable$EnumCodec"
import {$StringRepresentable, $StringRepresentable$Type} from "packages/net/minecraft/util/$StringRepresentable"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$Keyable, $Keyable$Type} from "packages/com/mojang/serialization/$Keyable"
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$Codec, $Codec$Type} from "packages/com/mojang/serialization/$Codec"

export class $SoftFluid$TintMethod extends $Enum<($SoftFluid$TintMethod)> implements $StringRepresentable {
static readonly "NO_TINT": $SoftFluid$TintMethod
static readonly "FLOWING": $SoftFluid$TintMethod
static readonly "STILL_AND_FLOWING": $SoftFluid$TintMethod
static readonly "CODEC": $Codec<($SoftFluid$TintMethod)>


public static "values"(): ($SoftFluid$TintMethod)[]
public static "valueOf"(name: string): $SoftFluid$TintMethod
public "appliesToFlowing"(): boolean
public "getSerializedName"(): string
public "appliesToStill"(): boolean
public static "fromEnumWithMapping"<E extends ($Enum<(E)>) & ($StringRepresentable)>(arg0: $Supplier$Type<((E)[])>, arg1: $Function$Type<(string), (string)>): $StringRepresentable$EnumCodec<(E)>
public static "keys"(arg0: ($StringRepresentable$Type)[]): $Keyable
public static "fromEnum"<E extends ($Enum<(E)>) & ($StringRepresentable)>(arg0: $Supplier$Type<((E)[])>): $StringRepresentable$EnumCodec<(E)>
get "serializedName"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SoftFluid$TintMethod$Type = (("no_tint") | ("still_and_flowing") | ("flowing")) | ($SoftFluid$TintMethod);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SoftFluid$TintMethod_ = $SoftFluid$TintMethod$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/$Amendments" {
import {$RegistryAccess, $RegistryAccess$Type} from "packages/net/minecraft/core/$RegistryAccess"
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Logger, $Logger$Type} from "packages/org/apache/logging/log4j/$Logger"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$SoftFluid, $SoftFluid$Type} from "packages/net/mehvahdjukaar/moonlight/api/fluids/$SoftFluid"

export class $Amendments {
static readonly "MOD_ID": string
static readonly "LOGGER": $Logger
static readonly "OLD_MODS": $List<(string)>

constructor()

public static "res"(name: string): $ResourceLocation
public static "init"(): void
public static "onCommonTagUpdate"(registryAccess: $RegistryAccess$Type, client: boolean): void
public static "canConnectDown"(neighborState: $BlockState$Type, level: $LevelAccessor$Type, pos: $BlockPos$Type): boolean
public static "registerFluidBehavior"(f: $SoftFluid$Type): void
public static "isSupportingCeiling"(pos: $BlockPos$Type, world: $LevelReader$Type): boolean
public static "isSupportingCeiling"(upState: $BlockState$Type, pos: $BlockPos$Type, world: $LevelReader$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Amendments$Type = ($Amendments);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Amendments_ = $Amendments$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/$ModRenderTypes" {
import {$RenderStateShard$OverlayStateShard, $RenderStateShard$OverlayStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$OverlayStateShard"
import {$RenderStateShard$TexturingStateShard, $RenderStateShard$TexturingStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$TexturingStateShard"
import {$RenderStateShard$LineStateShard, $RenderStateShard$LineStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$LineStateShard"
import {$RenderStateShard$TextureStateShard, $RenderStateShard$TextureStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$TextureStateShard"
import {$RenderStateShard$EmptyTextureStateShard, $RenderStateShard$EmptyTextureStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$EmptyTextureStateShard"
import {$RenderStateShard$LightmapStateShard, $RenderStateShard$LightmapStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$LightmapStateShard"
import {$RenderStateShard$LayeringStateShard, $RenderStateShard$LayeringStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$LayeringStateShard"
import {$RenderStateShard$WriteMaskStateShard, $RenderStateShard$WriteMaskStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$WriteMaskStateShard"
import {$Runnable, $Runnable$Type} from "packages/java/lang/$Runnable"
import {$RenderType$CompositeRenderType, $RenderType$CompositeRenderType$Type} from "packages/net/minecraft/client/renderer/$RenderType$CompositeRenderType"
import {$VertexFormat, $VertexFormat$Type} from "packages/com/mojang/blaze3d/vertex/$VertexFormat"
import {$RenderType, $RenderType$Type} from "packages/net/minecraft/client/renderer/$RenderType"
import {$RenderStateShard$OutputStateShard, $RenderStateShard$OutputStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$OutputStateShard"
import {$RenderStateShard$ColorLogicStateShard, $RenderStateShard$ColorLogicStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$ColorLogicStateShard"
import {$VertexFormat$Mode, $VertexFormat$Mode$Type} from "packages/com/mojang/blaze3d/vertex/$VertexFormat$Mode"
import {$RenderStateShard$ShaderStateShard, $RenderStateShard$ShaderStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$ShaderStateShard"
import {$RenderStateShard$DepthTestStateShard, $RenderStateShard$DepthTestStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$DepthTestStateShard"
import {$DrawBuffer, $DrawBuffer$Type} from "packages/com/jozufozu/flywheel/backend/instancing/$DrawBuffer"
import {$RenderStateShard$TransparencyStateShard, $RenderStateShard$TransparencyStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$TransparencyStateShard"
import {$RenderStateShard$CullStateShard, $RenderStateShard$CullStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$CullStateShard"

export class $ModRenderTypes extends $RenderType {
static readonly "CANNON_TRAJECTORY": $RenderType
static readonly "CANNON_TRAJECTORY_RED": $RenderType
static readonly "BIG_BUFFER_SIZE": integer
static readonly "MEDIUM_BUFFER_SIZE": integer
static readonly "SMALL_BUFFER_SIZE": integer
static readonly "TRANSIENT_BUFFER_SIZE": integer
static readonly "LINES": $RenderType$CompositeRenderType
static readonly "LINE_STRIP": $RenderType$CompositeRenderType
 "sortOnUpload": boolean
static readonly "VIEW_SCALE_Z_EPSILON": float
static readonly "MAX_ENCHANTMENT_GLINT_SPEED_MILLIS": double
readonly "name": string
 "setupState": $Runnable
static readonly "NO_TRANSPARENCY": $RenderStateShard$TransparencyStateShard
static readonly "ADDITIVE_TRANSPARENCY": $RenderStateShard$TransparencyStateShard
static readonly "LIGHTNING_TRANSPARENCY": $RenderStateShard$TransparencyStateShard
static readonly "GLINT_TRANSPARENCY": $RenderStateShard$TransparencyStateShard
static readonly "CRUMBLING_TRANSPARENCY": $RenderStateShard$TransparencyStateShard
static readonly "TRANSLUCENT_TRANSPARENCY": $RenderStateShard$TransparencyStateShard
static readonly "NO_SHADER": $RenderStateShard$ShaderStateShard
static readonly "POSITION_COLOR_LIGHTMAP_SHADER": $RenderStateShard$ShaderStateShard
static readonly "POSITION_SHADER": $RenderStateShard$ShaderStateShard
static readonly "POSITION_COLOR_TEX_SHADER": $RenderStateShard$ShaderStateShard
static readonly "POSITION_TEX_SHADER": $RenderStateShard$ShaderStateShard
static readonly "POSITION_COLOR_TEX_LIGHTMAP_SHADER": $RenderStateShard$ShaderStateShard
static readonly "POSITION_COLOR_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_SOLID_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_CUTOUT_MIPPED_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_CUTOUT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_TRANSLUCENT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_TRANSLUCENT_MOVING_BLOCK_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_TRANSLUCENT_NO_CRUMBLING_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ARMOR_CUTOUT_NO_CULL_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_SOLID_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_CUTOUT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_CUTOUT_NO_CULL_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_CUTOUT_NO_CULL_Z_OFFSET_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ITEM_ENTITY_TRANSLUCENT_CULL_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_TRANSLUCENT_CULL_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_TRANSLUCENT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_TRANSLUCENT_EMISSIVE_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_SMOOTH_CUTOUT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_BEACON_BEAM_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_DECAL_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_NO_OUTLINE_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_SHADOW_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_ALPHA_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_EYES_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENERGY_SWIRL_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_LEASH_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_WATER_MASK_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_OUTLINE_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ARMOR_GLINT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ARMOR_ENTITY_GLINT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_GLINT_TRANSLUCENT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_GLINT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_GLINT_DIRECT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_GLINT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_GLINT_DIRECT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_CRUMBLING_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_TEXT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_TEXT_BACKGROUND_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_TEXT_INTENSITY_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_TEXT_SEE_THROUGH_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_TEXT_BACKGROUND_SEE_THROUGH_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_TEXT_INTENSITY_SEE_THROUGH_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_LIGHTNING_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_TRIPWIRE_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_END_PORTAL_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_END_GATEWAY_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_LINES_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_GUI_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_GUI_OVERLAY_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_GUI_TEXT_HIGHLIGHT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_GUI_GHOST_RECIPE_OVERLAY_SHADER": $RenderStateShard$ShaderStateShard
static readonly "BLOCK_SHEET_MIPPED": $RenderStateShard$TextureStateShard
static readonly "BLOCK_SHEET": $RenderStateShard$TextureStateShard
static readonly "NO_TEXTURE": $RenderStateShard$EmptyTextureStateShard
static readonly "DEFAULT_TEXTURING": $RenderStateShard$TexturingStateShard
static readonly "GLINT_TEXTURING": $RenderStateShard$TexturingStateShard
static readonly "ENTITY_GLINT_TEXTURING": $RenderStateShard$TexturingStateShard
static readonly "LIGHTMAP": $RenderStateShard$LightmapStateShard
static readonly "NO_LIGHTMAP": $RenderStateShard$LightmapStateShard
static readonly "OVERLAY": $RenderStateShard$OverlayStateShard
static readonly "NO_OVERLAY": $RenderStateShard$OverlayStateShard
static readonly "CULL": $RenderStateShard$CullStateShard
static readonly "NO_CULL": $RenderStateShard$CullStateShard
static readonly "NO_DEPTH_TEST": $RenderStateShard$DepthTestStateShard
static readonly "EQUAL_DEPTH_TEST": $RenderStateShard$DepthTestStateShard
static readonly "LEQUAL_DEPTH_TEST": $RenderStateShard$DepthTestStateShard
static readonly "GREATER_DEPTH_TEST": $RenderStateShard$DepthTestStateShard
static readonly "COLOR_DEPTH_WRITE": $RenderStateShard$WriteMaskStateShard
static readonly "COLOR_WRITE": $RenderStateShard$WriteMaskStateShard
static readonly "DEPTH_WRITE": $RenderStateShard$WriteMaskStateShard
static readonly "NO_LAYERING": $RenderStateShard$LayeringStateShard
static readonly "POLYGON_OFFSET_LAYERING": $RenderStateShard$LayeringStateShard
static readonly "VIEW_OFFSET_Z_LAYERING": $RenderStateShard$LayeringStateShard
static readonly "MAIN_TARGET": $RenderStateShard$OutputStateShard
static readonly "OUTLINE_TARGET": $RenderStateShard$OutputStateShard
static readonly "TRANSLUCENT_TARGET": $RenderStateShard$OutputStateShard
static readonly "PARTICLES_TARGET": $RenderStateShard$OutputStateShard
static readonly "WEATHER_TARGET": $RenderStateShard$OutputStateShard
static readonly "CLOUDS_TARGET": $RenderStateShard$OutputStateShard
static readonly "ITEM_ENTITY_TARGET": $RenderStateShard$OutputStateShard
static readonly "DEFAULT_LINE": $RenderStateShard$LineStateShard
static readonly "NO_COLOR_LOGIC": $RenderStateShard$ColorLogicStateShard
static readonly "OR_REVERSE_COLOR_LOGIC": $RenderStateShard$ColorLogicStateShard

constructor(string: string, vertexFormat: $VertexFormat$Type, mode: $VertexFormat$Mode$Type, i: integer, bl: boolean, bl2: boolean, runnable: $Runnable$Type, runnable2: $Runnable$Type)

public static "getDrawBuffer"(arg0: $RenderType$Type): $DrawBuffer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModRenderTypes$Type = ($ModRenderTypes);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModRenderTypes_ = $ModRenderTypes$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/fluids/forge/$SoftFluidColorsImpl" {
import {$SoftFluidStack, $SoftFluidStack$Type} from "packages/net/mehvahdjukaar/moonlight/api/fluids/$SoftFluidStack"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockAndTintGetter, $BlockAndTintGetter$Type} from "packages/net/minecraft/world/level/$BlockAndTintGetter"

export class $SoftFluidColorsImpl {

constructor()

public static "getSpecialColor"(stack: $SoftFluidStack$Type, world: $BlockAndTintGetter$Type, pos: $BlockPos$Type): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SoftFluidColorsImpl$Type = ($SoftFluidColorsImpl);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SoftFluidColorsImpl_ = $SoftFluidColorsImpl$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/client/colors/$CrossbowColor" {
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ItemColor, $ItemColor$Type} from "packages/net/minecraft/client/color/item/$ItemColor"

export class $CrossbowColor implements $ItemColor {

constructor()

public "getColor"(stack: $ItemStack$Type, tint: integer): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CrossbowColor$Type = ($CrossbowColor);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CrossbowColor_ = $CrossbowColor$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/platform/forge/$PlatHelperImpl" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$SpawnEggItem, $SpawnEggItem$Type} from "packages/net/minecraft/world/item/$SpawnEggItem"
import {$Field, $Field$Type} from "packages/java/lang/reflect/$Field"
import {$Pack, $Pack$Type} from "packages/net/minecraft/server/packs/repository/$Pack"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$FoodProperties, $FoodProperties$Type} from "packages/net/minecraft/world/food/$FoodProperties"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$List, $List$Type} from "packages/java/util/$List"
import {$SimpleParticleType, $SimpleParticleType$Type} from "packages/net/minecraft/core/particles/$SimpleParticleType"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$Packet, $Packet$Type} from "packages/net/minecraft/network/protocol/$Packet"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$Method, $Method$Type} from "packages/java/lang/reflect/$Method"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$PlatHelper$Side, $PlatHelper$Side$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/$PlatHelper$Side"
import {$PackType, $PackType$Type} from "packages/net/minecraft/server/packs/$PackType"
import {$PlatHelper$Platform, $PlatHelper$Platform$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/$PlatHelper$Platform"
import {$MenuProvider, $MenuProvider$Type} from "packages/net/minecraft/world/$MenuProvider"
import {$PreparableReloadListener, $PreparableReloadListener$Type} from "packages/net/minecraft/server/packs/resources/$PreparableReloadListener"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$Runnable, $Runnable$Type} from "packages/java/lang/$Runnable"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$ClientGamePacketListener, $ClientGamePacketListener$Type} from "packages/net/minecraft/network/protocol/game/$ClientGamePacketListener"
import {$MinecraftServer, $MinecraftServer$Type} from "packages/net/minecraft/server/$MinecraftServer"
import {$FlowerPotBlock, $FlowerPotBlock$Type} from "packages/net/minecraft/world/level/block/$FlowerPotBlock"
import {$GameProfile, $GameProfile$Type} from "packages/com/mojang/authlib/$GameProfile"
import {$MobCategory, $MobCategory$Type} from "packages/net/minecraft/world/entity/$MobCategory"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$JsonElement, $JsonElement$Type} from "packages/com/google/gson/$JsonElement"
import {$Path, $Path$Type} from "packages/java/nio/file/$Path"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$EntityType$EntityFactory, $EntityType$EntityFactory$Type} from "packages/net/minecraft/world/entity/$EntityType$EntityFactory"
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$RecordItem, $RecordItem$Type} from "packages/net/minecraft/world/item/$RecordItem"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$PlatHelper$BlockEntitySupplier, $PlatHelper$BlockEntitySupplier$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/$PlatHelper$BlockEntitySupplier"

export class $PlatHelperImpl {

constructor()

public static "isInitializing"(): boolean
public static "getPlatform"(): $PlatHelper$Platform
public static "getGamePath"(): $Path
public static "newSpawnEgg"(entityType: $Supplier$Type<(any)>, color: integer, outerColor: integer, properties: $Item$Properties$Type): $SpawnEggItem
public static "getModFilePath"(modId: string): $Path
public static "isMobGriefingOn"(level: $Level$Type, entity: $Entity$Type): boolean
public static "getInstalledMods"(): $List<(string)>
public static "newEntityType"<E extends $Entity>(name: string, factory: $EntityType$EntityFactory$Type<(E)>, category: $MobCategory$Type, width: float, height: float, clientTrackingRange: integer, velocityUpdates: boolean, updateInterval: integer): $EntityType<(E)>
public static "newFlowerPot"(emptyPot: $Supplier$Type<($FlowerPotBlock$Type)>, supplier: $Supplier$Type<(any)>, properties: $BlockBehaviour$Properties$Type): $FlowerPotBlock
public static "getModPageUrl"(modId: string): string
public static "isModLoadingValid"(): boolean
public static "newMusicDisc"(power: integer, soundSupplier: $Supplier$Type<($SoundEvent$Type)>, properties: $Item$Properties$Type, duration: integer): $RecordItem
public static "getCurrentServer"(): $MinecraftServer
public static "findMethod"(clazz: $Class$Type<(any)>, methodName: string, ...parameterTypes: ($Class$Type<(any)>)[]): $Method
public static "isAreaLoaded"(level: $LevelReader$Type, pos: $BlockPos$Type, maxRange: integer): boolean
public static "isDev"(): boolean
public static "addCommonSetup"(commonSetup: $Runnable$Type): void
public static "getPhysicalSide"(): $PlatHelper$Side
public static "isData"(): boolean
public static "getFoodProperties"(food: $Item$Type, stack: $ItemStack$Type, player: $Player$Type): $FoodProperties
public static "getBurnTime"(stack: $ItemStack$Type): integer
public static "getModVersion"(modId: string): string
public static "getFlammability"(state: $BlockState$Type, level: $BlockGetter$Type, pos: $BlockPos$Type, face: $Direction$Type): integer
public static "newParticle"(): $SimpleParticleType
public static "newBlockEntityType"<T extends $BlockEntity>(blockEntitySupplier: $PlatHelper$BlockEntitySupplier$Type<(T)>, ...validBlocks: ($Block$Type)[]): $BlockEntityType<(T)>
public static "getModName"(modId: string): string
public static "findField"<T>(clazz: $Class$Type<(any)>, fieldName: string): $Field
public static "isModLoaded"(name: string): boolean
public static "getEntitySpawnPacket"(entity: $Entity$Type): $Packet<($ClientGamePacketListener)>
public static "registerResourcePack"(packType: $PackType$Type, packSupplier: $Supplier$Type<($Pack$Type)>): void
public static "evaluateRecipeCondition"(jo: $JsonElement$Type): boolean
public static "getFakeServerPlayer"(id: $GameProfile$Type, level: $ServerLevel$Type): $Player
public static "addCommonSetupAsync"(commonSetup: $Runnable$Type): void
public static "addServerReloadListener"(listener: $PreparableReloadListener$Type, location: $ResourceLocation$Type): void
public static "openCustomMenu"(player: $ServerPlayer$Type, menuProvider: $MenuProvider$Type, extraDataProvider: $Consumer$Type<($FriendlyByteBuf$Type)>): void
get "initializing"(): boolean
get "platform"(): $PlatHelper$Platform
get "gamePath"(): $Path
get "installedMods"(): $List<(string)>
get "modLoadingValid"(): boolean
get "currentServer"(): $MinecraftServer
get "dev"(): boolean
get "physicalSide"(): $PlatHelper$Side
get "data"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PlatHelperImpl$Type = ($PlatHelperImpl);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PlatHelperImpl_ = $PlatHelperImpl$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/renderers/tiles/$NoticeBoardBlockTileRenderer" {
import {$ItemRenderer, $ItemRenderer$Type} from "packages/net/minecraft/client/renderer/entity/$ItemRenderer"
import {$NoticeBoardBlockTile, $NoticeBoardBlockTile$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$NoticeBoardBlockTile"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$LOD, $LOD$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/util/$LOD"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MapRenderer, $MapRenderer$Type} from "packages/net/minecraft/client/gui/$MapRenderer"
import {$Font, $Font$Type} from "packages/net/minecraft/client/gui/$Font"
import {$BlockEntityRendererProvider$Context, $BlockEntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/blockentity/$BlockEntityRendererProvider$Context"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockEntityRenderer, $BlockEntityRenderer$Type} from "packages/net/minecraft/client/renderer/blockentity/$BlockEntityRenderer"

export class $NoticeBoardBlockTileRenderer implements $BlockEntityRenderer<($NoticeBoardBlockTile)> {

constructor(context: $BlockEntityRendererProvider$Context$Type)

public static "renderNoticeBoardContent"(mapRenderer: $MapRenderer$Type, font: $Font$Type, itemRenderer: $ItemRenderer$Type, tile: $NoticeBoardBlockTile$Type, poseStack: $PoseStack$Type, buffer: $MultiBufferSource$Type, frontLight: integer, overlay: integer, stack: $ItemStack$Type, dir: $Direction$Type, lod: $LOD$Type): void
public "render"(tile: $NoticeBoardBlockTile$Type, partialTicks: float, poseStack: $PoseStack$Type, buffer: $MultiBufferSource$Type, combinedLightIn: integer, overlay: integer): void
public "getFrontLight"(world: $Level$Type, pos: $BlockPos$Type, dir: $Direction$Type): integer
public "shouldRender"(arg0: $NoticeBoardBlockTile$Type, arg1: $Vec3$Type): boolean
public "shouldRenderOffScreen"(arg0: $NoticeBoardBlockTile$Type): boolean
public "getViewDistance"(): integer
get "viewDistance"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $NoticeBoardBlockTileRenderer$Type = ($NoticeBoardBlockTileRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $NoticeBoardBlockTileRenderer_ = $NoticeBoardBlockTileRenderer$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/map/$MapDataRegistry" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$TriFunction, $TriFunction$Type} from "packages/net/mehvahdjukaar/moonlight/api/misc/$TriFunction"
import {$MapBlockMarker, $MapBlockMarker$Type} from "packages/net/mehvahdjukaar/moonlight/api/map/markers/$MapBlockMarker"
import {$Registry, $Registry$Type} from "packages/net/minecraft/core/$Registry"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$BiFunction, $BiFunction$Type} from "packages/java/util/function/$BiFunction"
import {$RegistryAccess, $RegistryAccess$Type} from "packages/net/minecraft/core/$RegistryAccess"
import {$Holder, $Holder$Type} from "packages/net/minecraft/core/$Holder"
import {$Structure, $Structure$Type} from "packages/net/minecraft/world/level/levelgen/structure/$Structure"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$CustomDecorationType, $CustomDecorationType$Type} from "packages/net/mehvahdjukaar/moonlight/api/map/type/$CustomDecorationType"
import {$MapItemSavedData, $MapItemSavedData$Type} from "packages/net/minecraft/world/level/saveddata/maps/$MapItemSavedData"
import {$CustomMapData$Type, $CustomMapData$Type$Type} from "packages/net/mehvahdjukaar/moonlight/api/map/$CustomMapData$Type"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$CustomMapData, $CustomMapData$Type} from "packages/net/mehvahdjukaar/moonlight/api/map/$CustomMapData"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$ResourceKey, $ResourceKey$Type} from "packages/net/minecraft/resources/$ResourceKey"
import {$MapDecorationType, $MapDecorationType$Type} from "packages/net/mehvahdjukaar/moonlight/api/map/type/$MapDecorationType"

export class $MapDataRegistry {
static readonly "REGISTRY_KEY": $ResourceKey<($Registry<($MapDecorationType<(any), (any)>)>)>

constructor()

public static "get"(id: $ResourceLocation$Type): $MapDecorationType<(any), (any)>
public static "getCustomType"(resourceLocation: $ResourceLocation$Type): $CustomDecorationType<(any), (any)>
public static "readMarker"(tag: $CompoundTag$Type): $MapBlockMarker<(any)>
public static "getOptional"(id: $ResourceLocation$Type): $Optional<($MapDecorationType<(any), (any)>)>
public static "registerCustomType"(factoryId: $ResourceLocation$Type, decorationTypeFactory: $Supplier$Type<($CustomDecorationType$Type<(any), (any)>)>): void
/**
 * 
 * @deprecated
 */
public static "registerCustomType"<T extends $CustomDecorationType<(any), (any)>>(decorationType: T): T
public static "getAssociatedType"(structure: $Holder$Type<($Structure$Type)>): $MapDecorationType<(any), (any)>
public static "getDefaultType"(): $MapDecorationType<(any), (any)>
public static "addDynamicClientMarkersEvent"(event: $BiFunction$Type<(integer), ($MapItemSavedData$Type), ($Set$Type<($MapBlockMarker$Type<(any)>)>)>): void
public static "registerCustomMapSavedData"<T extends $CustomMapData<(any)>>(id: $ResourceLocation$Type, factory: $Supplier$Type<(T)>): $CustomMapData$Type<(T)>
public static "registerCustomMapSavedData"<T extends $CustomMapData<(any)>>(type: $CustomMapData$Type$Type<(T)>): $CustomMapData$Type<(T)>
public static "addDynamicServerMarkersEvent"(event: $TriFunction$Type<($Player$Type), (integer), ($MapItemSavedData$Type), ($Set$Type<($MapBlockMarker$Type<(any)>)>)>): void
public static "getRegistry"(registryAccess: $RegistryAccess$Type): $Registry<($MapDecorationType<(any), (any)>)>
get "defaultType"(): $MapDecorationType<(any), (any)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MapDataRegistry$Type = ($MapDataRegistry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MapDataRegistry_ = $MapDataRegistry$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/misc/mob_container/$MobContainer" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Pair, $Pair$Type} from "packages/org/apache/commons/lang3/tuple/$Pair"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$MobContainer$MobNBTData, $MobContainer$MobNBTData$Type} from "packages/net/mehvahdjukaar/supplementaries/common/misc/mob_container/$MobContainer$MobNBTData"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$SoftFluid, $SoftFluid$Type} from "packages/net/mehvahdjukaar/moonlight/api/fluids/$SoftFluid"
import {$MobContainer$MobNBTData$Entity, $MobContainer$MobNBTData$Entity$Type} from "packages/net/mehvahdjukaar/supplementaries/common/misc/mob_container/$MobContainer$MobNBTData$Entity"
import {$Holder, $Holder$Type} from "packages/net/minecraft/core/$Holder"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $MobContainer {

constructor(width: float, height: float, isAquarium: boolean)

public static "createEntityFromNBT"(tag: $CompoundTag$Type, id: $UUID$Type, world: $Level$Type): $Entity
public "load"(tag: $CompoundTag$Type): void
public "clear"(): void
public "isEmpty"(): boolean
public "save"(tag: $CompoundTag$Type): $CompoundTag
public "tick"(pLevel: $Level$Type, pPos: $BlockPos$Type): void
public "getData"(): $MobContainer$MobNBTData
public "shouldRenderWithFluid"(): $Optional<($Holder<($SoftFluid)>)>
public static "createMobHolderItemTag"(mob: $Entity$Type, blockW: float, blockH: float, bucketStack: $ItemStack$Type, isAquarium: boolean): $CompoundTag
public "getDisplayedMob"(): $Entity
public "interactWithBucket"(stack: $ItemStack$Type, world: $Level$Type, pos: $BlockPos$Type, player: $Player$Type, hand: $InteractionHand$Type): boolean
public "onInteract"(world: $Level$Type, pos: $BlockPos$Type, player: $Player$Type, hand: $InteractionHand$Type): $InteractionResult
public static "calculateMobDimensionsForContainer"(mob: $Entity$Type, blockW: float, blockH: float, waterlogged: boolean): $Pair<(float), (float)>
public static "createStaticMob"(data: $MobContainer$MobNBTData$Entity$Type, world: $Level$Type, pos: $BlockPos$Type): $Entity
public "updateLightLevel"(level: $Level$Type, pos: $BlockPos$Type): void
get "empty"(): boolean
get "data"(): $MobContainer$MobNBTData
get "displayedMob"(): $Entity
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MobContainer$Type = ($MobContainer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MobContainer_ = $MobContainer$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/misc/mob_container/$CapturedMobHandler" {
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$SimpleJsonResourceReloadListener, $SimpleJsonResourceReloadListener$Type} from "packages/net/minecraft/server/packs/resources/$SimpleJsonResourceReloadListener"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$DataDefinedCatchableMob, $DataDefinedCatchableMob$Type} from "packages/net/mehvahdjukaar/supplementaries/common/misc/mob_container/$DataDefinedCatchableMob"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$ICatchableMob, $ICatchableMob$Type} from "packages/net/mehvahdjukaar/supplementaries/api/$ICatchableMob"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $CapturedMobHandler extends $SimpleJsonResourceReloadListener {
static readonly "RELOAD_INSTANCE": $CapturedMobHandler


public static "addCommandMob"(name: string): void
public static "getDataCap"(type: $EntityType$Type<(any)>, isFish: boolean): $ICatchableMob
public static "isCommandMob"(entity: string): boolean
public static "getCatchableMobCapOrDefault"(entity: $Entity$Type): $ICatchableMob
public static "saveFile"(data: $DataDefinedCatchableMob$Type): void
public static "acceptClientData"(list: $Set$Type<($DataDefinedCatchableMob$Type)>, defaultFish: $DataDefinedCatchableMob$Type): void
public static "sendDataToClient"(player: $ServerPlayer$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CapturedMobHandler$Type = ($CapturedMobHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CapturedMobHandler_ = $CapturedMobHandler$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/entities/trades/$AdventurerMapsHandler" {
import {$HolderSet, $HolderSet$Type} from "packages/net/minecraft/core/$HolderSet"
import {$Holder, $Holder$Type} from "packages/net/minecraft/core/$Holder"
import {$Structure, $Structure$Type} from "packages/net/minecraft/world/level/levelgen/structure/$Structure"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $AdventurerMapsHandler {
static readonly "SEARCH_RADIUS": integer

constructor()

public static "createCustomMapForTrade"(level: $Level$Type, pos: $BlockPos$Type, destinations: $HolderSet$Type<($Structure$Type)>, mapName: string, mapColor: integer, mapMarker: $ResourceLocation$Type): $ItemStack
public static "createStructureMap"(level: $ServerLevel$Type, pos: $BlockPos$Type, structure: $Holder$Type<($Structure$Type)>, zoom: integer, decoration: $ResourceLocation$Type, name: string, color: integer): $ItemStack
public static "createMapOrQuill"(serverLevel: $ServerLevel$Type, pos: $BlockPos$Type, targets: $HolderSet$Type<($Structure$Type)>, radius: integer, skipKnown: boolean, zoom: integer, mapMarker: $ResourceLocation$Type, name: string, color: integer): $ItemStack
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AdventurerMapsHandler$Type = ($AdventurerMapsHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AdventurerMapsHandler_ = $AdventurerMapsHandler$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/$ITextHolderProvider" {
import {$IOnePlayerGui, $IOnePlayerGui$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/$IOnePlayerGui"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$IWashable, $IWashable$Type} from "packages/net/mehvahdjukaar/moonlight/api/block/$IWashable"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$TextHolder, $TextHolder$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/$TextHolder"
import {$FilteredText, $FilteredText$Type} from "packages/net/minecraft/server/network/$FilteredText"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$List, $List$Type} from "packages/java/util/$List"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$IWaxable, $IWaxable$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/$IWaxable"

export interface $ITextHolderProvider extends $IOnePlayerGui, $IWashable, $IWaxable {

 "getTextHolder"(arg0: integer): $TextHolder
 "getTextHolder"(): $TextHolder
 "tryOpeningEditGui"(player: $ServerPlayer$Type, pos: $BlockPos$Type): boolean
 "textHoldersCount"(): integer
 "tryAcceptingClientText"(pos: $BlockPos$Type, player: $ServerPlayer$Type, filteredText: $List$Type<($List$Type<($FilteredText$Type)>)>): boolean
 "interactWithTextHolder"(index: integer, level: $Level$Type, pos: $BlockPos$Type, state: $BlockState$Type, player: $Player$Type, hand: $InteractionHand$Type): $InteractionResult
 "tryWash"(level: $Level$Type, pos: $BlockPos$Type, state: $BlockState$Type): boolean
 "setPlayerWhoMayEdit"(arg0: $UUID$Type): void
 "playerIsTooFarAwayToEdit"(level: $Level$Type, pos: $BlockPos$Type, uUID: $UUID$Type): boolean
 "shouldUseContainerMenu"(): boolean
 "getPlayerWhoMayEdit"(): $UUID
 "validatePlayerWhoMayEdit"(level: $Level$Type, pos: $BlockPos$Type): void
 "isOtherPlayerEditing"(player: $Player$Type): boolean
 "isWaxed"(): boolean
 "tryWaxing"(level: $Level$Type, pos: $BlockPos$Type, player: $Player$Type, hand: $InteractionHand$Type): $InteractionResult
 "setWaxed"(arg0: boolean): void
/**
 * 
 * @deprecated
 */
 "openScreen"(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $Player$Type): void
 "openScreen"(level: $Level$Type, pos: $BlockPos$Type, player: $Player$Type, direction: $Direction$Type): void
 "sendOpenGuiPacket"(level: $Level$Type, pos: $BlockPos$Type, player: $Player$Type, hitFace: $Direction$Type): void
 "sendOpenGuiPacket"(level: $Level$Type, pos: $BlockPos$Type, player: $Player$Type): void
}

export namespace $ITextHolderProvider {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ITextHolderProvider$Type = ($ITextHolderProvider);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ITextHolderProvider_ = $ITextHolderProvider$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/integration/forge/$EnchantRedesignCompatImpl" {
import {$VertexConsumer, $VertexConsumer$Type} from "packages/com/mojang/blaze3d/vertex/$VertexConsumer"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"

export class $EnchantRedesignCompatImpl {

constructor()

public static "getBookColoredFoil"(stack: $ItemStack$Type, buffer: $MultiBufferSource$Type): $VertexConsumer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EnchantRedesignCompatImpl$Type = ($EnchantRedesignCompatImpl);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EnchantRedesignCompatImpl_ = $EnchantRedesignCompatImpl$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/faucet/$SoftFluidProviderInteraction" {
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$FluidOffer, $FluidOffer$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/faucet/$FluidOffer"
import {$FaucetTarget$BlState, $FaucetTarget$BlState$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/faucet/$FaucetTarget$BlState"
import {$SoftFluidStack, $SoftFluidStack$Type} from "packages/net/mehvahdjukaar/moonlight/api/fluids/$SoftFluidStack"
import {$FaucetSource$BlState, $FaucetSource$BlState$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/faucet/$FaucetSource$BlState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $SoftFluidProviderInteraction implements $FaucetTarget$BlState, $FaucetSource$BlState {


public "fill"(level: $Level$Type, pos: $BlockPos$Type, state: $BlockState$Type, fluid: $SoftFluidStack$Type, minAmount: integer): integer
public "drain"(level: $Level$Type, pos: $BlockPos$Type, dir: $Direction$Type, state: $BlockState$Type, amount: integer): void
public "getProvidedFluid"(level: $Level$Type, pos: $BlockPos$Type, dir: $Direction$Type, state: $BlockState$Type): $FluidOffer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SoftFluidProviderInteraction$Type = ($SoftFluidProviderInteraction);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SoftFluidProviderInteraction_ = $SoftFluidProviderInteraction$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/misc/mob_container/$MobContainer$MobNBTData$Entity" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$MobContainer$MobNBTData, $MobContainer$MobNBTData$Type} from "packages/net/mehvahdjukaar/supplementaries/common/misc/mob_container/$MobContainer$MobNBTData"

export class $MobContainer$MobNBTData$Entity extends $MobContainer$MobNBTData {
readonly "mobTag": $CompoundTag


public "getScale"(): float
get "scale"(): float
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MobContainer$MobNBTData$Entity$Type = ($MobContainer$MobNBTData$Entity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MobContainer$MobNBTData$Entity_ = $MobContainer$MobNBTData$Entity$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/set/$BlockSetAPI$BlockTypeRegistryCallback" {
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$Registrator, $Registrator$Type} from "packages/net/mehvahdjukaar/moonlight/api/misc/$Registrator"
import {$BlockType, $BlockType$Type} from "packages/net/mehvahdjukaar/moonlight/api/set/$BlockType"

export interface $BlockSetAPI$BlockTypeRegistryCallback<E, T extends $BlockType> {

 "accept"(arg0: $Registrator$Type<(E)>, arg1: $Collection$Type<(T)>): void

(arg0: $Registrator$Type<(E)>, arg1: $Collection$Type<(T)>): void
}

export namespace $BlockSetAPI$BlockTypeRegistryCallback {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BlockSetAPI$BlockTypeRegistryCallback$Type<E, T> = ($BlockSetAPI$BlockTypeRegistryCallback<(E), (T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BlockSetAPI$BlockTypeRegistryCallback_<E, T> = $BlockSetAPI$BlockTypeRegistryCallback$Type<(E), (T)>;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/integration/configured/$CustomConfigScreen$FolderWrapper" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$ConfigScreen$FolderItem, $ConfigScreen$FolderItem$Type} from "packages/com/mrcrayfish/configured/client/screen/$ConfigScreen$FolderItem"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $CustomConfigScreen$FolderWrapper extends $ConfigScreen$FolderItem {


public "children"(): $List<(any)>
public "render"(graphics: $GuiGraphics$Type, x: integer, top: integer, left: integer, width: integer, height: integer, mouseX: integer, mouseY: integer, hovered: boolean, partialTicks: float): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CustomConfigScreen$FolderWrapper$Type = ($CustomConfigScreen$FolderWrapper);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CustomConfigScreen$FolderWrapper_ = $CustomConfigScreen$FolderWrapper$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/common/block/$ToolHookBlock" {
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$EntityBlock, $EntityBlock$Type} from "packages/net/minecraft/world/level/block/$EntityBlock"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Mirror, $Mirror$Type} from "packages/net/minecraft/world/level/block/$Mirror"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"
import {$DirectionProperty, $DirectionProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$DirectionProperty"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$CollisionContext, $CollisionContext$Type} from "packages/net/minecraft/world/phys/shapes/$CollisionContext"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$HitResult, $HitResult$Type} from "packages/net/minecraft/world/phys/$HitResult"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$Rotation, $Rotation$Type} from "packages/net/minecraft/world/level/block/$Rotation"
import {$BlockEntityTicker, $BlockEntityTicker$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityTicker"
import {$GameEventListener, $GameEventListener$Type} from "packages/net/minecraft/world/level/gameevent/$GameEventListener"

export class $ToolHookBlock extends $Block implements $EntityBlock {
static readonly "FACING": $DirectionProperty
static readonly "NORTH_AABB": $VoxelShape
static readonly "SOUTH_AABB": $VoxelShape
static readonly "WEST_AABB": $VoxelShape
static readonly "EAST_AABB": $VoxelShape
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(properties: $BlockBehaviour$Properties$Type)

public "getStateForPlacement"(context: $BlockPlaceContext$Type): $BlockState
public "getCloneItemStack"(state: $BlockState$Type, target: $HitResult$Type, world: $BlockGetter$Type, pos: $BlockPos$Type, player: $Player$Type): $ItemStack
public "updateShape"(state: $BlockState$Type, direction: $Direction$Type, neighborState: $BlockState$Type, level: $LevelAccessor$Type, pos: $BlockPos$Type, neighborPos: $BlockPos$Type): $BlockState
public "use"(state: $BlockState$Type, level: $Level$Type, pos: $BlockPos$Type, player: $Player$Type, hand: $InteractionHand$Type, hit: $BlockHitResult$Type): $InteractionResult
public "onRemove"(state: $BlockState$Type, world: $Level$Type, pos: $BlockPos$Type, newState: $BlockState$Type, isMoving: boolean): void
public "rotate"(state: $BlockState$Type, rotation: $Rotation$Type): $BlockState
public "mirror"(state: $BlockState$Type, mirror: $Mirror$Type): $BlockState
public "canSurvive"(state: $BlockState$Type, level: $LevelReader$Type, pos: $BlockPos$Type): boolean
public "getShape"(state: $BlockState$Type, level: $BlockGetter$Type, pos: $BlockPos$Type, context: $CollisionContext$Type): $VoxelShape
public "newBlockEntity"(pos: $BlockPos$Type, state: $BlockState$Type): $BlockEntity
public "getTicker"<T extends $BlockEntity>(arg0: $Level$Type, arg1: $BlockState$Type, arg2: $BlockEntityType$Type<(T)>): $BlockEntityTicker<(T)>
public "getListener"<T extends $BlockEntity>(arg0: $ServerLevel$Type, arg1: T): $GameEventListener
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ToolHookBlock$Type = ($ToolHookBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ToolHookBlock_ = $ToolHookBlock$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/renderers/entities/funny/$JarredHeadLayer" {
import {$HeadedModel, $HeadedModel$Type} from "packages/net/minecraft/client/model/$HeadedModel"
import {$RenderLayer, $RenderLayer$Type} from "packages/net/minecraft/client/renderer/entity/layers/$RenderLayer"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$HumanoidModel, $HumanoidModel$Type} from "packages/net/minecraft/client/model/$HumanoidModel"
import {$RenderLayerParent, $RenderLayerParent$Type} from "packages/net/minecraft/client/renderer/entity/$RenderLayerParent"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$EntityModelSet, $EntityModelSet$Type} from "packages/net/minecraft/client/model/geom/$EntityModelSet"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$LayerDefinition, $LayerDefinition$Type} from "packages/net/minecraft/client/model/geom/builders/$LayerDefinition"

export class $JarredHeadLayer<T extends $Player, M extends ($HumanoidModel<(T)>) & ($HeadedModel)> extends $RenderLayer<(T), (M)> {

constructor(renderLayerParent: $RenderLayerParent$Type<(T), (M)>, entityModelSet: $EntityModelSet$Type)

public "render"(matrixStack: $PoseStack$Type, buffer: $MultiBufferSource$Type, packedLight: integer, player: T, limbSwing: float, limbSwingAmount: float, partialTick: float, ageInTicks: float, netHeadYaw: float, headPitch: float): void
public static "createMesh"(): $LayerDefinition
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $JarredHeadLayer$Type<T, M> = ($JarredHeadLayer<(T), (M)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $JarredHeadLayer_<T, M> = $JarredHeadLayer$Type<(T), (M)>;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/item/additional_placements/$AdditionalItemPlacementsAPI$Event" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$AdditionalItemPlacement, $AdditionalItemPlacement$Type} from "packages/net/mehvahdjukaar/moonlight/api/item/additional_placements/$AdditionalItemPlacement"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"

export interface $AdditionalItemPlacementsAPI$Event {

 "register"(arg0: $Item$Type, arg1: $AdditionalItemPlacement$Type): void
 "registerSimple"(target: $Item$Type, toPlace: $Block$Type): void

(arg0: $Item$Type, arg1: $AdditionalItemPlacement$Type): void
}

export namespace $AdditionalItemPlacementsAPI$Event {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AdditionalItemPlacementsAPI$Event$Type = ($AdditionalItemPlacementsAPI$Event);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AdditionalItemPlacementsAPI$Event_ = $AdditionalItemPlacementsAPI$Event$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/blocks/$AshenBasaltBlock" {
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$LootParams$Builder, $LootParams$Builder$Type} from "packages/net/minecraft/world/level/storage/loot/$LootParams$Builder"
import {$List, $List$Type} from "packages/java/util/$List"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $AshenBasaltBlock extends $Block {
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(properties: $BlockBehaviour$Properties$Type)

public "getCloneItemStack"(level: $BlockGetter$Type, pos: $BlockPos$Type, state: $BlockState$Type): $ItemStack
public "updateShape"(state: $BlockState$Type, direction: $Direction$Type, neighborState: $BlockState$Type, level: $LevelAccessor$Type, currentPos: $BlockPos$Type, neighborPos: $BlockPos$Type): $BlockState
public "getDrops"(state: $BlockState$Type, builder: $LootParams$Builder$Type): $List<($ItemStack)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AshenBasaltBlock$Type = ($AshenBasaltBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AshenBasaltBlock_ = $AshenBasaltBlock$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/entities/$BombEntity$BombType" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$BombExplosion, $BombExplosion$Type} from "packages/net/mehvahdjukaar/supplementaries/common/misc/explosion/$BombExplosion"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$BombEntity, $BombEntity$Type} from "packages/net/mehvahdjukaar/supplementaries/common/entities/$BombEntity"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$BombEntity$BreakingMode, $BombEntity$BreakingMode$Type} from "packages/net/mehvahdjukaar/supplementaries/common/entities/$BombEntity$BreakingMode"

export class $BombEntity$BombType extends $Enum<($BombEntity$BombType)> {
static readonly "NORMAL": $BombEntity$BombType
static readonly "BLUE": $BombEntity$BombType
static readonly "SPIKY": $BombEntity$BombType
readonly "item": $Supplier<($Item)>
readonly "itemOn": $Supplier<($Item)>


public static "values"(): ($BombEntity$BombType)[]
public static "valueOf"(name: string): $BombEntity$BombType
public "getRadius"(): double
public "getDisplayStack"(active: boolean): $ItemStack
public "volume"(): float
public "spawnExtraParticles"(bomb: $BombEntity$Type): void
public "isInstantlyActivated"(): boolean
public "breakMode"(): $BombEntity$BreakingMode
public "applyStatusEffects"(entity: $LivingEntity$Type, distSq: double): void
public "afterExploded"(exp: $BombExplosion$Type, level: $Level$Type): void
get "radius"(): double
get "instantlyActivated"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BombEntity$BombType$Type = (("normal") | ("spiky") | ("blue")) | ($BombEntity$BombType);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BombEntity$BombType_ = $BombEntity$BombType$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/client/util/$RenderUtil" {
import {$ItemRenderer, $ItemRenderer$Type} from "packages/net/minecraft/client/renderer/entity/$ItemRenderer"
import {$VertexConsumer, $VertexConsumer$Type} from "packages/com/mojang/blaze3d/vertex/$VertexConsumer"
import {$BlockRenderDispatcher, $BlockRenderDispatcher$Type} from "packages/net/minecraft/client/renderer/block/$BlockRenderDispatcher"
import {$MultiBufferSource$BufferSource, $MultiBufferSource$BufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource$BufferSource"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BakedModel, $BakedModel$Type} from "packages/net/minecraft/client/resources/model/$BakedModel"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$RenderType, $RenderType$Type} from "packages/net/minecraft/client/renderer/$RenderType"
import {$BiConsumer, $BiConsumer$Type} from "packages/java/util/function/$BiConsumer"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$TextureAtlasSprite, $TextureAtlasSprite$Type} from "packages/net/minecraft/client/renderer/texture/$TextureAtlasSprite"

export class $RenderUtil {

constructor()

public static "blitSpriteSection"(graphics: $GuiGraphics$Type, x: integer, y: integer, w: integer, h: integer, u: float, v: float, uW: integer, vH: integer, sprite: $TextureAtlasSprite$Type): void
public static "renderSprite"(stack: $PoseStack$Type, vertexBuilder: $VertexConsumer$Type, light: integer, index: integer, b: integer, g: integer, r: integer, sprite: $TextureAtlasSprite$Type): void
public static "renderSprite"(stack: $PoseStack$Type, vertexBuilder: $VertexConsumer$Type, light: integer, index: integer, b: integer, g: integer, r: integer, a: integer, sprite: $TextureAtlasSprite$Type): void
public static "getGuiDummy"(poseStack: $PoseStack$Type): $GuiGraphics
/**
 * 
 * @deprecated
 */
public static "renderBlockModel"(modelLocation: $ResourceLocation$Type, matrixStack: $PoseStack$Type, buffer: $MultiBufferSource$Type, blockRenderer: $BlockRenderDispatcher$Type, light: integer, overlay: integer, cutout: boolean): void
/**
 * 
 * @deprecated
 */
public static "renderGuiItem"(model: $BakedModel$Type, stack: $ItemStack$Type, renderer: $ItemRenderer$Type, combinedLight: integer, pCombinedOverlay: integer, poseStack: $PoseStack$Type, buffer: $MultiBufferSource$BufferSource$Type, flatItem: boolean): void
public static "renderBlock"(seed: long, poseStack: $PoseStack$Type, buffer: $MultiBufferSource$Type, state: $BlockState$Type, level: $Level$Type, pos: $BlockPos$Type, dispatcher: $BlockRenderDispatcher$Type): void
public static "renderBlock"(model: $BakedModel$Type, seed: long, poseStack: $PoseStack$Type, buffer: $MultiBufferSource$Type, state: $BlockState$Type, level: $Level$Type, pos: $BlockPos$Type, dispatcher: $BlockRenderDispatcher$Type): void
public static "getTextColorRenderType"(texture: $ResourceLocation$Type): $RenderType
public static "renderModel"(modelLocation: $ResourceLocation$Type, matrixStack: $PoseStack$Type, buffer: $MultiBufferSource$Type, blockRenderer: $BlockRenderDispatcher$Type, light: integer, overlay: integer, cutout: boolean): void
public static "getEntityCutoutMipmapRenderType"(texture: $ResourceLocation$Type): $RenderType
public static "setDynamicTexturesToUseMipmap"(mipMap: boolean): void
public static "getEntitySolidMipmapRenderType"(texture: $ResourceLocation$Type): $RenderType
public static "getTextMipmapRenderType"(texture: $ResourceLocation$Type): $RenderType
public static "renderGuiItemRelative"(poseStack: $PoseStack$Type, stack: $ItemStack$Type, x: integer, y: integer, renderer: $ItemRenderer$Type, movement: $BiConsumer$Type<($PoseStack$Type), ($BakedModel$Type)>): void
public static "renderGuiItemRelative"(poseStack: $PoseStack$Type, stack: $ItemStack$Type, x: integer, y: integer, renderer: $ItemRenderer$Type, movement: $BiConsumer$Type<($PoseStack$Type), ($BakedModel$Type)>, combinedLight: integer, pCombinedOverlay: integer): void
set "dynamicTexturesToUseMipmap"(value: boolean)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RenderUtil$Type = ($RenderUtil);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RenderUtil_ = $RenderUtil$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/network/$ClientBoundSyncHourglassPacket" {
import {$Message, $Message$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/network/$Message"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$ChannelHandler$Context, $ChannelHandler$Context$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/network/$ChannelHandler$Context"
import {$HourglassTimeData, $HourglassTimeData$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/hourglass/$HourglassTimeData"

export class $ClientBoundSyncHourglassPacket implements $Message {

constructor(songs: $Collection$Type<($HourglassTimeData$Type)>)
constructor(buf: $FriendlyByteBuf$Type)

public "handle"(context: $ChannelHandler$Context$Type): void
public "writeToBuffer"(buf: $FriendlyByteBuf$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientBoundSyncHourglassPacket$Type = ($ClientBoundSyncHourglassPacket);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientBoundSyncHourglassPacket_ = $ClientBoundSyncHourglassPacket$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/integration/$ThinAirCompat" {
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"

export class $ThinAirCompat {

constructor()

public static "isAirLantern"(pState: $BlockState$Type): boolean
public static "maybeSetAirQuality"(state: $BlockState$Type, pos: $Vec3$Type, level: $Level$Type): $BlockState
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ThinAirCompat$Type = ($ThinAirCompat);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ThinAirCompat_ = $ThinAirCompat$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/integration/$ClaimCompat" {
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $ClaimCompat {
static "ON": boolean

constructor()

public static "canReplace"(player: $Player$Type, pos: $BlockPos$Type): boolean
public static "canPlace"(player: $Player$Type, pos: $BlockPos$Type): boolean
public "_canBreak"(player: $Player$Type, pos: $BlockPos$Type): boolean
public "_canPlace"(player: $Player$Type, pos: $BlockPos$Type): boolean
public "_canReplace"(player: $Player$Type, pos: $BlockPos$Type): boolean
public "_canInteract"(player: $Player$Type, targetPos: $BlockPos$Type): boolean
public "_canAttack"(player: $Player$Type, victim: $Entity$Type): boolean
public static "canInteract"(player: $Player$Type, targetPos: $BlockPos$Type): boolean
public static "canBreak"(player: $Player$Type, pos: $BlockPos$Type): boolean
public static "canAttack"(player: $Player$Type, victim: $Entity$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClaimCompat$Type = ($ClaimCompat);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClaimCompat_ = $ClaimCompat$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/api/$IQuiverEntity" {
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export interface $IQuiverEntity {

 "supplementaries$getQuiver"(): $ItemStack
 "supplementaries$hasQuiver"(): boolean
 "supplementaries$setQuiver"(arg0: $ItemStack$Type): void
}

export namespace $IQuiverEntity {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IQuiverEntity$Type = ($IQuiverEntity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IQuiverEntity_ = $IQuiverEntity$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/platform/configs/$ConfigBuilder" {
import {$ConfigType, $ConfigType$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/configs/$ConfigType"
import {$ConfigSpec, $ConfigSpec$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/configs/$ConfigSpec"
import {$JsonElement, $JsonElement$Type} from "packages/com/google/gson/$JsonElement"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Runnable, $Runnable$Type} from "packages/java/lang/$Runnable"
import {$Codec, $Codec$Type} from "packages/com/mojang/serialization/$Codec"
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$Supplier as $Supplier$0, $Supplier$Type as $Supplier$0$Type} from "packages/com/google/common/base/$Supplier"

export class $ConfigBuilder {
static readonly "STRING_CHECK": $Predicate<(any)>
static readonly "LIST_STRING_CHECK": $Predicate<(any)>


public "getName"(): $ResourceLocation
public "comment"(comment: string): $ConfigBuilder
public static "create"(name: $ResourceLocation$Type, type: $ConfigType$Type): $ConfigBuilder
public static "create"(modId: string, type: $ConfigType$Type): $ConfigBuilder
public "build"(): $ConfigSpec
public "push"(arg0: string): $ConfigBuilder
public "pop"(): $ConfigBuilder
public "description"(name: string): $Component
public "currentCategory"(): string
public "defineColor"(arg0: string, arg1: integer): $Supplier<(integer)>
public "setSynced"(): $ConfigBuilder
public "tooltipKey"(name: string): string
public "buildAndRegister"(): $ConfigSpec
public "define"(arg0: string, arg1: integer, arg2: integer, arg3: integer): $Supplier<(integer)>
public "define"(arg0: string, arg1: double, arg2: double, arg3: double): $Supplier<(double)>
public "define"(name: string, defaultValue: $ResourceLocation$Type): $Supplier<($ResourceLocation)>
public "define"(arg0: string, arg1: boolean): $Supplier<(boolean)>
public "define"<T extends string>(arg0: string, arg1: $List$Type<(any)>, arg2: $Predicate$Type<(any)>): $Supplier<($List<(string)>)>
public "define"<V extends $Enum<(V)>>(arg0: string, arg1: V): $Supplier<(V)>
public "define"<T extends string>(name: string, defaultValue: $List$Type<(any)>): $Supplier<($List<(string)>)>
public "define"(name: string, defaultValue: string): $Supplier<(string)>
public "define"(arg0: string, arg1: string, arg2: $Predicate$Type<(any)>): $Supplier<(string)>
public "tooltip"(name: string): $Component
public "defineJson"(arg0: string, arg1: $JsonElement$Type): $Supplier<($JsonElement)>
public "defineJson"(arg0: string, arg1: $Supplier$Type<($JsonElement$Type)>): $Supplier<($JsonElement)>
public "onChange"(callback: $Runnable$Type): $ConfigBuilder
public "translationKey"(name: string): string
public "setWriteJsons"<T extends $ConfigBuilder>(): T
public "defineMap"(name: string, def: $Map$Type<(string), (string)>): $Supplier<($Map<(string), (string)>)>
public "defineIDMap"(name: string, def: $Map$Type<($ResourceLocation$Type), ($ResourceLocation$Type)>): $Supplier<($Map<($ResourceLocation), ($ResourceLocation)>)>
public "defineObjectList"<T>(name: string, defaultSupplier: $Supplier$0$Type<($List$Type<(T)>)>, codec: $Codec$Type<(T)>): $Supplier<($List<(T)>)>
public "defineObject"<T>(arg0: string, arg1: $Supplier$0$Type<(T)>, arg2: $Codec$Type<(T)>): $Supplier<(T)>
public "gameRestart"(): $ConfigBuilder
public "worldReload"(): $ConfigBuilder
get "name"(): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ConfigBuilder$Type = ($ConfigBuilder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ConfigBuilder_ = $ConfigBuilder$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/client/gui/$LinkButton" {
import {$TextAndImageButton, $TextAndImageButton$Type} from "packages/net/minecraft/client/gui/components/$TextAndImageButton"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $LinkButton {
static readonly "MISC_ICONS": $ResourceLocation

constructor()

public static "create"(texture: $ResourceLocation$Type, textureW: integer, textureH: integer, iconW: integer, iconH: integer, parent: $Screen$Type, x: integer, y: integer, uInd: integer, vInd: integer, url: string, tooltip: string): $TextAndImageButton
public static "create"(parent: $Screen$Type, x: integer, y: integer, uInd: integer, vInd: integer, url: string, tooltip: string): $TextAndImageButton
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LinkButton$Type = ($LinkButton);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LinkButton_ = $LinkButton$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/renderers/tiles/$SignPostBlockTileRenderer" {
import {$VertexConsumer, $VertexConsumer$Type} from "packages/com/mojang/blaze3d/vertex/$VertexConsumer"
import {$BlockEntityRendererProvider$Context, $BlockEntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/blockentity/$BlockEntityRendererProvider$Context"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$SignPostBlockTile$Sign, $SignPostBlockTile$Sign$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$SignPostBlockTile$Sign"
import {$WoodType, $WoodType$Type} from "packages/net/mehvahdjukaar/moonlight/api/set/wood/$WoodType"
import {$SignPostBlockTile, $SignPostBlockTile$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$SignPostBlockTile"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$BakedModel, $BakedModel$Type} from "packages/net/minecraft/client/resources/model/$BakedModel"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$BlockEntityRenderer, $BlockEntityRenderer$Type} from "packages/net/minecraft/client/renderer/blockentity/$BlockEntityRenderer"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $SignPostBlockTileRenderer implements $BlockEntityRenderer<($SignPostBlockTile)> {
static readonly "MODELS": $Map<($WoodType), ($BakedModel)>

constructor(context: $BlockEntityRendererProvider$Context$Type)

public "getViewDistance"(): integer
public "render"(tile: $SignPostBlockTile$Type, partialTicks: float, poseStack: $PoseStack$Type, bufferIn: $MultiBufferSource$Type, combinedLightIn: integer, combinedOverlayIn: integer): void
public static "renderSign"(posestack: $PoseStack$Type, builder: $VertexConsumer$Type, light: integer, overlay: integer, sign: $SignPostBlockTile$Sign$Type, slim: boolean): void
public static "renderSigns"(poseStack: $PoseStack$Type, builder: $VertexConsumer$Type, combinedLightIn: integer, combinedOverlayIn: integer, signUp: $SignPostBlockTile$Sign$Type, signDown: $SignPostBlockTile$Sign$Type, slim: boolean): void
public "shouldRender"(arg0: $SignPostBlockTile$Type, arg1: $Vec3$Type): boolean
public "shouldRenderOffScreen"(arg0: $SignPostBlockTile$Type): boolean
get "viewDistance"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SignPostBlockTileRenderer$Type = ($SignPostBlockTileRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SignPostBlockTileRenderer_ = $SignPostBlockTileRenderer$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/block/$ISoftFluidTankProvider" {
import {$SoftFluidTank, $SoftFluidTank$Type} from "packages/net/mehvahdjukaar/moonlight/api/fluids/$SoftFluidTank"

export interface $ISoftFluidTankProvider {

 "canInteractWithSoftFluidTank"(): boolean
 "getSoftFluidTank"(): $SoftFluidTank

(): boolean
}

export namespace $ISoftFluidTankProvider {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ISoftFluidTankProvider$Type = ($ISoftFluidTankProvider);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ISoftFluidTankProvider_ = $ISoftFluidTankProvider$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/events/$ModEvents" {
import {$InteractionResultHolder, $InteractionResultHolder$Type} from "packages/net/minecraft/world/$InteractionResultHolder"
import {$EntityHitResult, $EntityHitResult$Type} from "packages/net/minecraft/world/phys/$EntityHitResult"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $ModEvents {

constructor()

public static "onAttackEntity"(player: $Player$Type, level: $Level$Type, hand: $InteractionHand$Type, target: $Entity$Type, entityHitResult: $EntityHitResult$Type): $InteractionResult
public static "onUseItem"(player: $Player$Type, level: $Level$Type, hand: $InteractionHand$Type): $InteractionResultHolder<($ItemStack)>
public static "onRightClickBlock"(player: $Player$Type, level: $Level$Type, hand: $InteractionHand$Type, hitResult: $BlockHitResult$Type): $InteractionResult
public static "onRightClickBlockHP"(player: $Player$Type, level: $Level$Type, hand: $InteractionHand$Type, hitResult: $BlockHitResult$Type): $InteractionResult
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModEvents$Type = ($ModEvents);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModEvents_ = $ModEvents$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/events/behaviors/$BellChainRing" {
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$BlockUse, $BlockUse$Type} from "packages/net/mehvahdjukaar/amendments/events/behaviors/$BlockUse"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"

export class $BellChainRing implements $BlockUse {


public static "findAndRingBell"(world: $Level$Type, pos: $BlockPos$Type, player: $Player$Type, it: integer, predicate: $Predicate$Type<($BlockState$Type)>): boolean
public "isEnabled"(): boolean
public "appliesToBlock"(block: $Block$Type): boolean
public "tryPerformingAction"(state: $BlockState$Type, pos: $BlockPos$Type, world: $Level$Type, player: $Player$Type, hand: $InteractionHand$Type, stack: $ItemStack$Type, hit: $BlockHitResult$Type): $InteractionResult
public "altersWorld"(): boolean
get "enabled"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BellChainRing$Type = ($BellChainRing);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BellChainRing_ = $BellChainRing$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/client/gui/$InkButton" {
import {$LecternBookEditScreen, $LecternBookEditScreen$Type} from "packages/net/mehvahdjukaar/amendments/client/gui/$LecternBookEditScreen"
import {$AbstractWidget, $AbstractWidget$Type} from "packages/net/minecraft/client/gui/components/$AbstractWidget"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$ChatFormatting, $ChatFormatting$Type} from "packages/net/minecraft/$ChatFormatting"
import {$InkButton$Ink, $InkButton$Ink$Type} from "packages/net/mehvahdjukaar/amendments/client/gui/$InkButton$Ink"

export class $InkButton extends $AbstractWidget {
static readonly "WIDGETS_LOCATION": $ResourceLocation
static readonly "ACCESSIBILITY_TEXTURE": $ResourceLocation
 "height": integer
 "x": integer
 "y": integer
 "active": boolean
 "visible": boolean
static readonly "UNSET_FG_COLOR": integer

constructor(screen: $LecternBookEditScreen$Type)

public "getType"(): $InkButton$Ink
public "getChatFormatting"(): $ChatFormatting
public "onClick"(mouseX: double, mouseY: double, button: integer): void
public "onClick"(mouseX: double, mouseY: double): void
get "type"(): $InkButton$Ink
get "chatFormatting"(): $ChatFormatting
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $InkButton$Type = ($InkButton);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $InkButton_ = $InkButton$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/$GlobeManager" {
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ResourceManager, $ResourceManager$Type} from "packages/net/minecraft/server/packs/resources/$ResourceManager"
import {$RenderType, $RenderType$Type} from "packages/net/minecraft/client/renderer/$RenderType"

export class $GlobeManager {

constructor()

public static "getRenderType"(world: $Level$Type, sepia: boolean): $RenderType
public static "refreshColorsAndTextures"(manager: $ResourceManager$Type): void
public static "refreshTextures"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GlobeManager$Type = ($GlobeManager);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GlobeManager_ = $GlobeManager$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/blocks/$FrameBraceBlock" {
import {$IntegerProperty, $IntegerProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$IntegerProperty"
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$List, $List$Type} from "packages/java/util/$List"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$FrameBlock, $FrameBlock$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/blocks/$FrameBlock"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"

export class $FrameBraceBlock extends $FrameBlock {
static readonly "FLIPPED": $BooleanProperty
static readonly "FRAMED_BLOCKS": $List<($Block)>
static readonly "HAS_BLOCK": $BooleanProperty
static readonly "LIGHT_LEVEL": $IntegerProperty
static readonly "WATERLOGGED": $BooleanProperty
static readonly "OCCLUSION_SHAPE": $VoxelShape
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(properties: $BlockBehaviour$Properties$Type)

public "applyRotationLock"(world: $Level$Type, blockPos: $BlockPos$Type, state: $BlockState$Type, direction: $Direction$Type, half: integer): $BlockState
public "getStateForPlacement"(context: $BlockPlaceContext$Type): $BlockState
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FrameBraceBlock$Type = ($FrameBraceBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FrameBraceBlock_ = $FrameBraceBlock$Type;
}}
declare module "packages/net/mehvahdjukaar/modelfix/$ModelFixGeom" {
import {$BlockElement, $BlockElement$Type} from "packages/net/minecraft/client/renderer/block/model/$BlockElement"
import {$ItemModelGenerator$Span, $ItemModelGenerator$Span$Type} from "packages/net/minecraft/client/renderer/block/model/$ItemModelGenerator$Span"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$CallbackInfoReturnable, $CallbackInfoReturnable$Type} from "packages/org/spongepowered/asm/mixin/injection/callback/$CallbackInfoReturnable"
import {$ItemModelGenerator$SpanFacing, $ItemModelGenerator$SpanFacing$Type} from "packages/net/minecraft/client/renderer/block/model/$ItemModelGenerator$SpanFacing"

export class $ModelFixGeom {

constructor()

public static "getShrinkRatio"(atlasLocation: $ResourceLocation$Type, defaultValue: float, returnValue: float): float
public static "enlargeFaces"(cir: $CallbackInfoReturnable$Type<($List$Type<($BlockElement$Type)>)>): void
public static "createOrExpandSpan"(listSpans: $List$Type<($ItemModelGenerator$Span$Type)>, spanFacing: $ItemModelGenerator$SpanFacing$Type, pixelX: integer, pixelY: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModelFixGeom$Type = ($ModelFixGeom);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModelFixGeom_ = $ModelFixGeom$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$UrnBlockTile" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$LockCode, $LockCode$Type} from "packages/net/minecraft/world/$LockCode"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$ItemDisplayTile, $ItemDisplayTile$Type} from "packages/net/mehvahdjukaar/moonlight/api/block/$ItemDisplayTile"

export class $UrnBlockTile extends $ItemDisplayTile {
static readonly "LOOT_TABLE_TAG": string
static readonly "LOOT_TABLE_SEED_TAG": string
 "lootTable": $ResourceLocation
 "lootTableSeed": long
 "lockKey": $LockCode
 "blockState": $BlockState

constructor(pos: $BlockPos$Type, state: $BlockState$Type)

public "canTakeItemThroughFace"(index: integer, stack: $ItemStack$Type, direction: $Direction$Type): boolean
public "m_6820_"(): $Component
public "getAddItemSound"(): $SoundEvent
public static "stillValidBlockEntity"(arg0: $BlockEntity$Type, arg1: $Player$Type, arg2: integer): boolean
public static "stillValidBlockEntity"(arg0: $BlockEntity$Type, arg1: $Player$Type): boolean
public static "tryClear"(arg0: any): void
get "addItemSound"(): $SoundEvent
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $UrnBlockTile$Type = ($UrnBlockTile);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $UrnBlockTile_ = $UrnBlockTile$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/entities/trades/$RocketItemListing" {
import {$MerchantOffer, $MerchantOffer$Type} from "packages/net/minecraft/world/item/trading/$MerchantOffer"
import {$ModItemListing, $ModItemListing$Type} from "packages/net/mehvahdjukaar/moonlight/api/trades/$ModItemListing"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Codec, $Codec$Type} from "packages/com/mojang/serialization/$Codec"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $RocketItemListing extends $Record implements $ModItemListing {
static readonly "CODEC": $Codec<($RocketItemListing)>

constructor(emeralds: $ItemStack$Type, priceSecondary: $ItemStack$Type, rockets: integer, maxTrades: integer, xp: integer, priceMult: float, level: integer)

public "equals"(o: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "xp"(): integer
public "level"(): integer
public "getLevel"(): integer
public "priceMult"(): float
public "emeralds"(): $ItemStack
public "maxTrades"(): integer
public "rockets"(): integer
public "priceSecondary"(): $ItemStack
public static "createDefault"(price: $ItemStack$Type, price2: $ItemStack$Type, rockets: integer, maxTrades: integer, xp: $Optional$Type<(integer)>, priceMult: float, level: integer): $RocketItemListing
public "getOffer"(entity: $Entity$Type, random: $RandomSource$Type): $MerchantOffer
public "getCodec"(): $Codec<(any)>
public "isValid"(): boolean
public static "defaultXp"(buying: boolean, villagerLevel: integer): integer
get "codec"(): $Codec<(any)>
get "valid"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RocketItemListing$Type = ($RocketItemListing);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RocketItemListing_ = $RocketItemListing$Type;
}}
declare module "packages/net/mehvahdjukaar/dummmmmmy/$DummmmmmyClient" {
import {$ModelLayerLocation, $ModelLayerLocation$Type} from "packages/net/minecraft/client/model/geom/$ModelLayerLocation"

export class $DummmmmmyClient {
static readonly "DUMMY_BODY": $ModelLayerLocation
static readonly "DUMMY_ARMOR_OUTER": $ModelLayerLocation
static readonly "DUMMY_ARMOR_INNER": $ModelLayerLocation

constructor()

public static "init"(): void
public static "setup"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DummmmmmyClient$Type = ($DummmmmmyClient);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DummmmmmyClient_ = $DummmmmmyClient$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/utils/$BlockPredicate" {
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Codec, $Codec$Type} from "packages/com/mojang/serialization/$Codec"

export interface $BlockPredicate extends $Predicate<($BlockState)> {

 "test"(arg0: $BlockState$Type): boolean
 "or"(arg0: $Predicate$Type<(any)>): $Predicate<($BlockState)>
 "negate"(): $Predicate<($BlockState)>
 "and"(arg0: $Predicate$Type<(any)>): $Predicate<($BlockState)>

(s: string): $BlockPredicate
}

export namespace $BlockPredicate {
const CODEC: $Codec<($BlockPredicate)>
function create(s: string): $BlockPredicate
function not<T>(arg0: $Predicate$Type<(any)>): $Predicate<($BlockState)>
function isEqual<T>(arg0: any): $Predicate<($BlockState)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BlockPredicate$Type = ($BlockPredicate);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BlockPredicate_ = $BlockPredicate$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/cannon/$CannonTrajectoryRenderer" {
import {$CannonBlockTile, $CannonBlockTile$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$CannonBlockTile"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"

export class $CannonTrajectoryRenderer {

constructor()

public static "render"(blockEntity: $CannonBlockTile$Type, poseStack: $PoseStack$Type, buffer: $MultiBufferSource$Type, packedLight: integer, packedOverlay: integer, partialTicks: float, yaw: float): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CannonTrajectoryRenderer$Type = ($CannonTrajectoryRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CannonTrajectoryRenderer_ = $CannonTrajectoryRenderer$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/trades/$RemoveNonDataListingListing" {
import {$MerchantOffer, $MerchantOffer$Type} from "packages/net/minecraft/world/item/trading/$MerchantOffer"
import {$ModItemListing, $ModItemListing$Type} from "packages/net/mehvahdjukaar/moonlight/api/trades/$ModItemListing"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$Codec, $Codec$Type} from "packages/com/mojang/serialization/$Codec"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $RemoveNonDataListingListing extends $Record implements $ModItemListing {
static readonly "CODEC": $Codec<($RemoveNonDataListingListing)>

constructor(level: integer)

public "equals"(o: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "level"(): integer
public "isValid"(): boolean
public "getLevel"(): integer
public "getOffer"(trader: $Entity$Type, random: $RandomSource$Type): $MerchantOffer
public "getCodec"(): $Codec<(any)>
public static "defaultXp"(buying: boolean, villagerLevel: integer): integer
get "valid"(): boolean
get "codec"(): $Codec<(any)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RemoveNonDataListingListing$Type = ($RemoveNonDataListingListing);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RemoveNonDataListingListing_ = $RemoveNonDataListingListing$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/particles/$ConfettiParticle" {
import {$ParticleRenderType, $ParticleRenderType$Type} from "packages/net/minecraft/client/particle/$ParticleRenderType"
import {$TextureSheetParticle, $TextureSheetParticle$Type} from "packages/net/minecraft/client/particle/$TextureSheetParticle"

export class $ConfettiParticle extends $TextureSheetParticle {
 "x": double
 "y": double
 "z": double
 "xd": double
 "yd": double
 "zd": double
 "age": integer
 "rCol": float
 "gCol": float
 "bCol": float


public "getRenderType"(): $ParticleRenderType
public "tick"(): void
get "renderType"(): $ParticleRenderType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ConfettiParticle$Type = ($ConfettiParticle);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ConfettiParticle_ = $ConfettiParticle$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/$SuppClientPlatformStuff" {
import {$ISlider, $ISlider$Type} from "packages/net/mehvahdjukaar/supplementaries/client/screens/widgets/$ISlider"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$ShaderInstance, $ShaderInstance$Type} from "packages/net/minecraft/client/renderer/$ShaderInstance"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$RenderType, $RenderType$Type} from "packages/net/minecraft/client/renderer/$RenderType"

export class $SuppClientPlatformStuff {

constructor()

public static "getNoiseShader"(): $ShaderInstance
public static "staticNoise"(location: $ResourceLocation$Type): $RenderType
public static "createSlider"(x: integer, y: integer, width: integer, height: integer, prefix: $Component$Type, suffix: $Component$Type, minValue: double, maxValue: double, currentValue: double, stepSize: double, precision: integer, drawString: boolean): $ISlider
get "noiseShader"(): $ShaderInstance
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SuppClientPlatformStuff$Type = ($SuppClientPlatformStuff);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SuppClientPlatformStuff_ = $SuppClientPlatformStuff$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/items/tooltip_components/$InventoryTooltip" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$TooltipComponent, $TooltipComponent$Type} from "packages/net/minecraft/world/inventory/tooltip/$TooltipComponent"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Record, $Record$Type} from "packages/java/lang/$Record"

export class $InventoryTooltip extends $Record implements $TooltipComponent {

constructor(tag: $CompoundTag$Type, item: $Item$Type, size: integer)

public "equals"(o: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "size"(): integer
public "tag"(): $CompoundTag
public "item"(): $Item
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $InventoryTooltip$Type = ($InventoryTooltip);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $InventoryTooltip_ = $InventoryTooltip$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/events/overrides/$XPBottlingBehavior" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$ItemUseOnBlockOverride, $ItemUseOnBlockOverride$Type} from "packages/net/mehvahdjukaar/supplementaries/common/events/overrides/$ItemUseOnBlockOverride"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $XPBottlingBehavior implements $ItemUseOnBlockOverride {


public "isEnabled"(): boolean
public "appliesToItem"(item: $Item$Type): boolean
public "tryPerformingAction"(world: $Level$Type, player: $Player$Type, hand: $InteractionHand$Type, stack: $ItemStack$Type, hit: $BlockHitResult$Type): $InteractionResult
public "getTooltip"(): $MutableComponent
public "placesBlock"(): boolean
public "altersWorld"(): boolean
public "shouldBlockMapToItem"(item: $Item$Type): boolean
get "enabled"(): boolean
get "tooltip"(): $MutableComponent
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $XPBottlingBehavior$Type = ($XPBottlingBehavior);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $XPBottlingBehavior_ = $XPBottlingBehavior$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/events/overrides/$ItemUseOverride" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export interface $ItemUseOverride {

 "isEnabled"(): boolean
 "getTooltip"(): $MutableComponent
 "appliesToItem"(arg0: $Item$Type): boolean
 "tryPerformingAction"(arg0: $Level$Type, arg1: $Player$Type, arg2: $InteractionHand$Type, arg3: $ItemStack$Type, arg4: $BlockHitResult$Type): $InteractionResult
}

export namespace $ItemUseOverride {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ItemUseOverride$Type = ($ItemUseOverride);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ItemUseOverride_ = $ItemUseOverride$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/platform/$ClientHelper$BlockColorEvent" {
import {$BlockColor, $BlockColor$Type} from "packages/net/minecraft/client/color/block/$BlockColor"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$BlockAndTintGetter, $BlockAndTintGetter$Type} from "packages/net/minecraft/world/level/$BlockAndTintGetter"

export interface $ClientHelper$BlockColorEvent {

 "register"(arg0: $BlockColor$Type, ...arg1: ($Block$Type)[]): void
 "getColor"(arg0: $BlockState$Type, arg1: $BlockAndTintGetter$Type, arg2: $BlockPos$Type, arg3: integer): integer
}

export namespace $ClientHelper$BlockColorEvent {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientHelper$BlockColorEvent$Type = ($ClientHelper$BlockColorEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientHelper$BlockColorEvent_ = $ClientHelper$BlockColorEvent$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/misc/mob_container/$MobContainer$MobNBTData" {
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $MobContainer$MobNBTData {


public "getName"(): string
public "is2DFish"(): boolean
public "getFishTexture"(): integer
public "getFluidID"(): $ResourceLocation
get "name"(): string
get "2DFish"(): boolean
get "fishTexture"(): integer
get "fluidID"(): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MobContainer$MobNBTData$Type = ($MobContainer$MobNBTData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MobContainer$MobNBTData_ = $MobContainer$MobNBTData$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/core/map/forge/$MapDataInternalImpl" {
import {$DataPackRegistryEvent$NewRegistry, $DataPackRegistryEvent$NewRegistry$Type} from "packages/net/minecraftforge/registries/$DataPackRegistryEvent$NewRegistry"

export class $MapDataInternalImpl {

constructor()

public static "init"(): void
public static "registerDataPackRegistry"(event: $DataPackRegistryEvent$NewRegistry$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MapDataInternalImpl$Type = ($MapDataInternalImpl);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MapDataInternalImpl_ = $MapDataInternalImpl$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/misc/explosion/$BombExplosion" {
import {$ExplosionDamageCalculator, $ExplosionDamageCalculator$Type} from "packages/net/minecraft/world/level/$ExplosionDamageCalculator"
import {$Explosion$BlockInteraction, $Explosion$BlockInteraction$Type} from "packages/net/minecraft/world/level/$Explosion$BlockInteraction"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$Explosion, $Explosion$Type} from "packages/net/minecraft/world/level/$Explosion"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BombEntity$BombType, $BombEntity$BombType$Type} from "packages/net/mehvahdjukaar/supplementaries/common/entities/$BombEntity$BombType"
import {$ObjectArrayList, $ObjectArrayList$Type} from "packages/it/unimi/dsi/fastutil/objects/$ObjectArrayList"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $BombExplosion extends $Explosion {
readonly "fire": boolean
readonly "blockInteraction": $Explosion$BlockInteraction
readonly "level": $Level
readonly "x": double
readonly "y": double
readonly "z": double
 "source": $Entity
 "radius": float
 "damageSource": $DamageSource
readonly "damageCalculator": $ExplosionDamageCalculator

constructor(world: $Level$Type, entity: $Entity$Type, context: $ExplosionDamageCalculator$Type, x: double, y: double, z: double, radius: float, bombType: $BombEntity$BombType$Type, interaction: $Explosion$BlockInteraction$Type)

public "explode"(): void
public "doFinalizeExplosion"(): void
public "getToBlow"(): $ObjectArrayList<($BlockPos)>
get "toBlow"(): $ObjectArrayList<($BlockPos)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BombExplosion$Type = ($BombExplosion);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BombExplosion_ = $BombExplosion$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/integration/$CaveEnhancementsCompat" {
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$CaveEnhancementsCompat$SpectacleCandleHolderTile, $CaveEnhancementsCompat$SpectacleCandleHolderTile$Type} from "packages/net/mehvahdjukaar/supplementaries/integration/$CaveEnhancementsCompat$SpectacleCandleHolderTile"

export class $CaveEnhancementsCompat {

constructor()

public static "tick"(level: $Level$Type, pos: $BlockPos$Type, state: $BlockState$Type): void
public static "tick"(level: $Level$Type, pos: $BlockPos$Type, state: $BlockState$Type, e: $CaveEnhancementsCompat$SpectacleCandleHolderTile$Type): void
public static "registerCandle"(id: $ResourceLocation$Type): void
public static "setupClient"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CaveEnhancementsCompat$Type = ($CaveEnhancementsCompat);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CaveEnhancementsCompat_ = $CaveEnhancementsCompat$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/dispenser/$ThrowableBricksBehavior" {
import {$DispenserHelper$AdditionalDispenserBehavior, $DispenserHelper$AdditionalDispenserBehavior$Type} from "packages/net/mehvahdjukaar/moonlight/api/util/$DispenserHelper$AdditionalDispenserBehavior"
import {$BlockSource, $BlockSource$Type} from "packages/net/minecraft/core/$BlockSource"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $ThrowableBricksBehavior extends $DispenserHelper$AdditionalDispenserBehavior {


public static "bootStrap"(): void
public static "setEntityPokingOutOfBlock"(arg0: $BlockSource$Type, arg1: $Entity$Type, arg2: $Direction$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ThrowableBricksBehavior$Type = ($ThrowableBricksBehavior);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ThrowableBricksBehavior_ = $ThrowableBricksBehavior$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/core/misc/$IHoldingPlayerExtension" {
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$CustomMapData$Type, $CustomMapData$Type$Type} from "packages/net/mehvahdjukaar/moonlight/api/map/$CustomMapData$Type"
import {$CustomMapData$DirtyCounter, $CustomMapData$DirtyCounter$Type} from "packages/net/mehvahdjukaar/moonlight/api/map/$CustomMapData$DirtyCounter"

export interface $IHoldingPlayerExtension {

 "moonlight$setCustomDataDirty"<H extends $CustomMapData$DirtyCounter>(arg0: $CustomMapData$Type$Type<(any)>, arg1: $Consumer$Type<(H)>): void
 "moonlight$setCustomMarkersDirty"(): void
}

export namespace $IHoldingPlayerExtension {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IHoldingPlayerExtension$Type = ($IHoldingPlayerExtension);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IHoldingPlayerExtension_ = $IHoldingPlayerExtension$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/events/overrides/$MapMarkerBehavior" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$ItemUseOnBlockOverride, $ItemUseOnBlockOverride$Type} from "packages/net/mehvahdjukaar/supplementaries/common/events/overrides/$ItemUseOnBlockOverride"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $MapMarkerBehavior implements $ItemUseOnBlockOverride {


public "isEnabled"(): boolean
public "appliesToItem"(item: $Item$Type): boolean
public "tryPerformingAction"(level: $Level$Type, player: $Player$Type, hand: $InteractionHand$Type, stack: $ItemStack$Type, hit: $BlockHitResult$Type): $InteractionResult
public "getTooltip"(): $MutableComponent
public "placesBlock"(): boolean
public "altersWorld"(): boolean
public "shouldBlockMapToItem"(item: $Item$Type): boolean
get "enabled"(): boolean
get "tooltip"(): $MutableComponent
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MapMarkerBehavior$Type = ($MapMarkerBehavior);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MapMarkerBehavior_ = $MapMarkerBehavior$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/client/util/$VertexUtil" {
import {$VertexConsumer, $VertexConsumer$Type} from "packages/com/mojang/blaze3d/vertex/$VertexConsumer"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Matrix4f, $Matrix4f$Type} from "packages/org/joml/$Matrix4f"
import {$Matrix3f, $Matrix3f$Type} from "packages/org/joml/$Matrix3f"
import {$IntUnaryOperator, $IntUnaryOperator$Type} from "packages/java/util/function/$IntUnaryOperator"
import {$BakedQuad, $BakedQuad$Type} from "packages/net/minecraft/client/renderer/block/model/$BakedQuad"
import {$TextureAtlasSprite, $TextureAtlasSprite$Type} from "packages/net/minecraft/client/renderer/texture/$TextureAtlasSprite"

export class $VertexUtil {

constructor()

public static "addQuad"(builder: $VertexConsumer$Type, poseStack: $PoseStack$Type, x0: float, y0: float, x1: float, y1: float, lu: integer, lv: integer): void
public static "addQuad"(builder: $VertexConsumer$Type, poseStack: $PoseStack$Type, x0: float, y0: float, x1: float, y1: float, r: integer, g: integer, b: integer, a: integer, lu: integer, lv: integer): void
public static "addQuad"(builder: $VertexConsumer$Type, poseStack: $PoseStack$Type, x0: float, y0: float, x1: float, y1: float, u0: float, v0: float, u1: float, v1: float, r: integer, g: integer, b: integer, a: integer, lu: integer, lv: integer): void
public static "addCube"(builder: $VertexConsumer$Type, poseStack: $PoseStack$Type, uOff: float, vOff: float, width: float, height: float, light: integer, color: integer): void
public static "addCube"(builder: $VertexConsumer$Type, poseStack: $PoseStack$Type, uOff: float, vOff: float, w: float, h: float, combinedLightIn: integer, color: integer, alpha: float, up: boolean, down: boolean, wrap: boolean): void
public static "addCube"(builder: $VertexConsumer$Type, poseStack: $PoseStack$Type, minU: float, minV: float, maxU: float, maxV: float, w: float, h: float, combinedLightIn: integer, color: integer, alpha: float, up: boolean, down: boolean, wrap: boolean): void
public static "addCube"(builder: $VertexConsumer$Type, poseStack: $PoseStack$Type, width: float, height: float, light: integer, color: integer): void
/**
 * 
 * @deprecated
 */
public static "transformVertices"(v: (integer)[], transform: $Matrix3f$Type): void
/**
 * 
 * @deprecated
 */
public static "transformVertices"(v: (integer)[], transform: $Matrix4f$Type): void
public static "vert"(builder: $VertexConsumer$Type, poseStack: $PoseStack$Type, x: float, y: float, z: float, u: float, v: float, r: float, g: float, b: float, a: float, lu: integer, lv: integer, nx: float, ny: float, nz: float): void
/**
 * 
 * @deprecated
 */
public static "recolorVertices"(v: (integer)[], indexToABGR: $IntUnaryOperator$Type): void
/**
 * 
 * @deprecated
 */
public static "recolorVertices"(v: (integer)[], ABGR: integer): void
/**
 * 
 * @deprecated
 */
public static "swapSprite"(quads: $List$Type<($BakedQuad$Type)>, sprite: $TextureAtlasSprite$Type): $List<($BakedQuad)>
/**
 * 
 * @deprecated
 */
public static "swapSprite"(q: $BakedQuad$Type, sprite: $TextureAtlasSprite$Type): $BakedQuad
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $VertexUtil$Type = ($VertexUtil);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $VertexUtil_ = $VertexUtil$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/core/network/$ClientBoundSyncConfigsMessage" {
import {$Message, $Message$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/network/$Message"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$ChannelHandler$Context, $ChannelHandler$Context$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/network/$ChannelHandler$Context"

export class $ClientBoundSyncConfigsMessage implements $Message {
readonly "fineName": string
readonly "modId": string
readonly "configData": (byte)[]

constructor(buf: $FriendlyByteBuf$Type)
constructor(configFileData: (byte)[], fileName: string, modId: string)

public "handle"(context: $ChannelHandler$Context$Type): void
public "writeToBuffer"(buf: $FriendlyByteBuf$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientBoundSyncConfigsMessage$Type = ($ClientBoundSyncConfigsMessage);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientBoundSyncConfigsMessage_ = $ClientBoundSyncConfigsMessage$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/$Supplementaries" {
import {$Logger, $Logger$Type} from "packages/org/apache/logging/log4j/$Logger"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $Supplementaries {
static readonly "MOD_ID": string
static readonly "LOGGER": $Logger

constructor()

public static "str"(n: string): string
public static "res"(n: string): $ResourceLocation
public static "error"(): void
public static "commonInit"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Supplementaries$Type = ($Supplementaries);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Supplementaries_ = $Supplementaries$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/set/$BlocksColorAPI" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$HolderSet, $HolderSet$Type} from "packages/net/minecraft/core/$HolderSet"
import {$DyeColor, $DyeColor$Type} from "packages/net/minecraft/world/item/$DyeColor"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Stream, $Stream$Type} from "packages/java/util/stream/$Stream"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$EnumMap, $EnumMap$Type} from "packages/java/util/$EnumMap"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $BlocksColorAPI {
static readonly "SORTED_COLORS": $List<($DyeColor)>

constructor()

public static "getKey"(block: $Block$Type): string
public static "getKey"(item: $Item$Type): string
public static "ordered"<T>(map: $Map$Type<($DyeColor$Type), (T)>): $Stream<(T)>
public static "getItemKeys"(): $Set<(string)>
public static "registerItemColorSet"(key: $ResourceLocation$Type, items: $EnumMap$Type<($DyeColor$Type), ($Item$Type)>, defaultItem: $Item$Type): void
public static "registerBlockColorSet"(key: $ResourceLocation$Type, blocks: $EnumMap$Type<($DyeColor$Type), ($Block$Type)>, defaultBlock: $Block$Type): void
public static "isDefaultColor"(block: $Block$Type): boolean
public static "isDefaultColor"(item: $Item$Type): boolean
public static "getColor"(item: $Item$Type): $DyeColor
public static "getColor"(block: $Block$Type): $DyeColor
public static "getColoredItem"(key: string, color: $DyeColor$Type): $Item
public static "getBlockHolderSet"(key: string): $HolderSet<($Block)>
public static "getItemHolderSet"(key: string): $HolderSet<($Item)>
public static "getBlockKeys"(): $Set<(string)>
public static "changeColor"(old: $Block$Type, newColor: $DyeColor$Type): $Block
public static "changeColor"(old: $Item$Type, newColor: $DyeColor$Type): $Item
public static "getColoredBlock"(key: string, color: $DyeColor$Type): $Block
get "itemKeys"(): $Set<(string)>
get "blockKeys"(): $Set<(string)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BlocksColorAPI$Type = ($BlocksColorAPI);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BlocksColorAPI_ = $BlocksColorAPI$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/block/$IOwnerProtected" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"

export interface $IOwnerProtected {

 "isPublic"(): boolean
 "getOwner"(): $UUID
 "setOwner"(arg0: $UUID$Type): void
 "isOwnedBy"(player: $Player$Type): boolean
 "isAccessibleBy"(player: $Player$Type): boolean
 "loadOwner"(tag: $CompoundTag$Type): void
 "saveOwner"(tag: $CompoundTag$Type): void
 "isNotOwnedBy"(player: $Player$Type): boolean
}

export namespace $IOwnerProtected {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IOwnerProtected$Type = ($IOwnerProtected);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IOwnerProtected_ = $IOwnerProtected$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/integration/forge/$CreateCompatImpl" {
import {$MovementContext, $MovementContext$Type} from "packages/com/simibubi/create/content/contraptions/behaviour/$MovementContext"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $CreateCompatImpl {

constructor()

public static "setupClient"(): void
public static "isContraption"(context: $MovementContext$Type, passenger: $Entity$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CreateCompatImpl$Type = ($CreateCompatImpl);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CreateCompatImpl_ = $CreateCompatImpl$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$BellowsBlockTile" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$BellowsBlockTile$AirType, $BellowsBlockTile$AirType$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$BellowsBlockTile$AirType"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ClientboundBlockEntityDataPacket, $ClientboundBlockEntityDataPacket$Type} from "packages/net/minecraft/network/protocol/game/$ClientboundBlockEntityDataPacket"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$AABB, $AABB$Type} from "packages/net/minecraft/world/phys/$AABB"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $BellowsBlockTile extends $BlockEntity {
 "blockState": $BlockState

constructor(pos: $BlockPos$Type, state: $BlockState$Type)

public static "tick"(level: $Level$Type, pos: $BlockPos$Type, state: $BlockState$Type, tile: $BellowsBlockTile$Type): void
public "getHeight"(partialTicks: float): float
public "spawnParticle"(world: $Level$Type, pos: $BlockPos$Type, dir: $Direction$Type, airType: $BellowsBlockTile$AirType$Type): void
public "getUpdatePacket"(): $ClientboundBlockEntityDataPacket
public "load"(compound: $CompoundTag$Type): void
public "m_183515_"(compound: $CompoundTag$Type): void
public "getDirection"(): $Direction
public "getRenderBoundingBox"(): $AABB
public "inLineOfSight"(entity: $Entity$Type, facing: $Direction$Type, level: $Level$Type): boolean
public "onSteppedOn"(entityIn: $Entity$Type): void
public "setManualPress"(): void
public "getUpdateTag"(): $CompoundTag
get "updatePacket"(): $ClientboundBlockEntityDataPacket
get "direction"(): $Direction
get "renderBoundingBox"(): $AABB
get "updateTag"(): $CompoundTag
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BellowsBlockTile$Type = ($BellowsBlockTile);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BellowsBlockTile_ = $BellowsBlockTile$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/misc/mob_container/$BuiltinAnimation" {
import {$BuiltinAnimation$Type, $BuiltinAnimation$Type$Type} from "packages/net/mehvahdjukaar/supplementaries/common/misc/mob_container/$BuiltinAnimation$Type"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $BuiltinAnimation<T extends $Entity> {

constructor()

public static "get"<E extends $Entity>(entity: E, type: $BuiltinAnimation$Type$Type): $BuiltinAnimation<(E)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BuiltinAnimation$Type<T> = ($BuiltinAnimation<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BuiltinAnimation_<T> = $BuiltinAnimation$Type<(T)>;
}}
declare module "packages/net/mehvahdjukaar/amendments/common/block/$WallCandleSkullBlock" {
import {$IntegerProperty, $IntegerProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$IntegerProperty"
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$IRecolorable, $IRecolorable$Type} from "packages/net/mehvahdjukaar/moonlight/api/block/$IRecolorable"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$ParticleType, $ParticleType$Type} from "packages/net/minecraft/core/particles/$ParticleType"
import {$CollisionContext, $CollisionContext$Type} from "packages/net/minecraft/world/phys/shapes/$CollisionContext"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$Mirror, $Mirror$Type} from "packages/net/minecraft/world/level/block/$Mirror"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$DyeColor, $DyeColor$Type} from "packages/net/minecraft/world/item/$DyeColor"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$Rotation, $Rotation$Type} from "packages/net/minecraft/world/level/block/$Rotation"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$AbstractCandleSkullBlock, $AbstractCandleSkullBlock$Type} from "packages/net/mehvahdjukaar/amendments/common/block/$AbstractCandleSkullBlock"
import {$DirectionProperty, $DirectionProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$DirectionProperty"

export class $WallCandleSkullBlock extends $AbstractCandleSkullBlock implements $IRecolorable {
static readonly "FACING": $DirectionProperty
static readonly "CANDLES": $IntegerProperty
static readonly "LIT": $BooleanProperty
static readonly "LIGHT_PER_CANDLE": integer
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(properties: $BlockBehaviour$Properties$Type)
constructor(properties: $BlockBehaviour$Properties$Type, particle: $Supplier$Type<($ParticleType$Type<(any)>)>)

public "tryRecolor"(level: $Level$Type, blockPos: $BlockPos$Type, blockState: $BlockState$Type, dyeColor: $DyeColor$Type): boolean
public "isDefaultColor"(level: $Level$Type, blockPos: $BlockPos$Type, blockState: $BlockState$Type): boolean
public "rotate"(state: $BlockState$Type, rotation: $Rotation$Type): $BlockState
public "mirror"(state: $BlockState$Type, mirror: $Mirror$Type): $BlockState
public "getShape"(pState: $BlockState$Type, pLevel: $BlockGetter$Type, pPos: $BlockPos$Type, pContext: $CollisionContext$Type): $VoxelShape
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WallCandleSkullBlock$Type = ($WallCandleSkullBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WallCandleSkullBlock_ = $WallCandleSkullBlock$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/common/tile/$EnhancedSkullBlockTile" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$SkullBlockEntity, $SkullBlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$SkullBlockEntity"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ClientboundBlockEntityDataPacket, $ClientboundBlockEntityDataPacket$Type} from "packages/net/minecraft/network/protocol/game/$ClientboundBlockEntityDataPacket"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $EnhancedSkullBlockTile extends $BlockEntity {
 "blockState": $BlockState

constructor(type: $BlockEntityType$Type<(any)>, pWorldPosition: $BlockPos$Type, pBlockState: $BlockState$Type)

public "initialize"(oldTile: $SkullBlockEntity$Type, stack: $ItemStack$Type, player: $Player$Type, hand: $InteractionHand$Type): void
public "getUpdatePacket"(): $ClientboundBlockEntityDataPacket
public "load"(tag: $CompoundTag$Type): void
public "m_183515_"(tag: $CompoundTag$Type): void
public "getSkullItem"(): $ItemStack
public "getSkullTile"(): $BlockEntity
public "getSkull"(): $BlockState
public "getUpdateTag"(): $CompoundTag
get "updatePacket"(): $ClientboundBlockEntityDataPacket
get "skullItem"(): $ItemStack
get "skullTile"(): $BlockEntity
get "skull"(): $BlockState
get "updateTag"(): $CompoundTag
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EnhancedSkullBlockTile$Type = ($EnhancedSkullBlockTile);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EnhancedSkullBlockTile_ = $EnhancedSkullBlockTile$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/network/$ModNetwork" {
import {$ChannelHandler, $ChannelHandler$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/network/$ChannelHandler"

export class $ModNetwork {
static readonly "CHANNEL": $ChannelHandler

constructor()

public static "init"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModNetwork$Type = ($ModNetwork);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModNetwork_ = $ModNetwork$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/core/criteria_triggers/$OptionalAdvancementTrigger" {
import {$JsonObject, $JsonObject$Type} from "packages/com/google/gson/$JsonObject"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$SimpleCriterionTrigger, $SimpleCriterionTrigger$Type} from "packages/net/minecraft/advancements/critereon/$SimpleCriterionTrigger"
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$OptionalAdvancementTrigger$Instance, $OptionalAdvancementTrigger$Instance$Type} from "packages/net/mehvahdjukaar/moonlight/core/criteria_triggers/$OptionalAdvancementTrigger$Instance"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$DeserializationContext, $DeserializationContext$Type} from "packages/net/minecraft/advancements/critereon/$DeserializationContext"
import {$ContextAwarePredicate, $ContextAwarePredicate$Type} from "packages/net/minecraft/advancements/critereon/$ContextAwarePredicate"

export class $OptionalAdvancementTrigger extends $SimpleCriterionTrigger<($OptionalAdvancementTrigger$Instance)> {

constructor(id: $ResourceLocation$Type, predicate: $Predicate$Type<(string)>)

public "trigger"(playerEntity: $ServerPlayer$Type, stack: $ItemStack$Type): void
public "createInstance"(json: $JsonObject$Type, predicate: $ContextAwarePredicate$Type, deserializationContext: $DeserializationContext$Type): $OptionalAdvancementTrigger$Instance
public "getId"(): $ResourceLocation
get "id"(): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $OptionalAdvancementTrigger$Type = ($OptionalAdvancementTrigger);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $OptionalAdvancementTrigger_ = $OptionalAdvancementTrigger$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/platform/$ClientHelper$ItemDecoratorEvent" {
import {$ItemLike, $ItemLike$Type} from "packages/net/minecraft/world/level/$ItemLike"
import {$IItemDecoratorRenderer, $IItemDecoratorRenderer$Type} from "packages/net/mehvahdjukaar/moonlight/api/item/$IItemDecoratorRenderer"

export interface $ClientHelper$ItemDecoratorEvent {

 "register"(arg0: $ItemLike$Type, arg1: $IItemDecoratorRenderer$Type): void

(arg0: $ItemLike$Type, arg1: $IItemDecoratorRenderer$Type): void
}

export namespace $ClientHelper$ItemDecoratorEvent {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientHelper$ItemDecoratorEvent$Type = ($ClientHelper$ItemDecoratorEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientHelper$ItemDecoratorEvent_ = $ClientHelper$ItemDecoratorEvent$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/items/$BombItem" {
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Rarity, $Rarity$Type} from "packages/net/minecraft/world/item/$Rarity"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$InteractionResultHolder, $InteractionResultHolder$Type} from "packages/net/minecraft/world/$InteractionResultHolder"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$BombEntity$BombType, $BombEntity$BombType$Type} from "packages/net/mehvahdjukaar/supplementaries/common/entities/$BombEntity$BombType"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $BombItem extends $Item {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(builder: $Item$Properties$Type)
constructor(builder: $Item$Properties$Type, type: $BombEntity$BombType$Type, glint: boolean)

public "getType"(): $BombEntity$BombType
public "use"(worldIn: $Level$Type, playerIn: $Player$Type, handIn: $InteractionHand$Type): $InteractionResultHolder<($ItemStack)>
public "isFoil"(stack: $ItemStack$Type): boolean
public "getRarity"(stack: $ItemStack$Type): $Rarity
get "type"(): $BombEntity$BombType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BombItem$Type = ($BombItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BombItem_ = $BombItem$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/core/$MoonlightClient" {
import {$DynamicTexturePack, $DynamicTexturePack$Type} from "packages/net/mehvahdjukaar/moonlight/api/resources/pack/$DynamicTexturePack"

export class $MoonlightClient {

constructor()

public static "maybeMergePack"(pack: $DynamicTexturePack$Type): $DynamicTexturePack
public static "afterTextureReload"(): void
public static "setMipMap"(b: boolean): void
public static "isMapMipMap"(): boolean
public static "initClient"(): void
public static "afterRenderGui"(): void
public static "beforeRenderGui"(): void
set "mipMap"(value: boolean)
get "mapMipMap"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MoonlightClient$Type = ($MoonlightClient);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MoonlightClient_ = $MoonlightClient$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/commands/$MapMarkerCommand" {
import {$CommandSourceStack, $CommandSourceStack$Type} from "packages/net/minecraft/commands/$CommandSourceStack"
import {$CommandBuildContext, $CommandBuildContext$Type} from "packages/net/minecraft/commands/$CommandBuildContext"
import {$ArgumentBuilder, $ArgumentBuilder$Type} from "packages/com/mojang/brigadier/builder/$ArgumentBuilder"
import {$CommandDispatcher, $CommandDispatcher$Type} from "packages/com/mojang/brigadier/$CommandDispatcher"
import {$CommandContext, $CommandContext$Type} from "packages/com/mojang/brigadier/context/$CommandContext"

export class $MapMarkerCommand {

constructor()

public static "register"(dispatcher: $CommandDispatcher$Type<($CommandSourceStack$Type)>, context: $CommandBuildContext$Type): $ArgumentBuilder<($CommandSourceStack), (any)>
public static "addMapMarker"(context: $CommandContext$Type<($CommandSourceStack$Type)>): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MapMarkerCommand$Type = ($MapMarkerCommand);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MapMarkerCommand_ = $MapMarkerCommand$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/reg/$LootTablesInjects" {
import {$LootTablesInjects$TableType, $LootTablesInjects$TableType$Type} from "packages/net/mehvahdjukaar/supplementaries/reg/$LootTablesInjects$TableType"

export class $LootTablesInjects {

constructor()

public static "init"(): void
public static "setup"(): void
public static "getType"(name: string): $LootTablesInjects$TableType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LootTablesInjects$Type = ($LootTablesInjects);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LootTablesInjects_ = $LootTablesInjects$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/platform/$RegHelper$CommandRegistration" {
import {$CommandSourceStack, $CommandSourceStack$Type} from "packages/net/minecraft/commands/$CommandSourceStack"
import {$CommandBuildContext, $CommandBuildContext$Type} from "packages/net/minecraft/commands/$CommandBuildContext"
import {$Commands$CommandSelection, $Commands$CommandSelection$Type} from "packages/net/minecraft/commands/$Commands$CommandSelection"
import {$CommandDispatcher, $CommandDispatcher$Type} from "packages/com/mojang/brigadier/$CommandDispatcher"

export interface $RegHelper$CommandRegistration {

 "accept"(arg0: $CommandDispatcher$Type<($CommandSourceStack$Type)>, arg1: $CommandBuildContext$Type, arg2: $Commands$CommandSelection$Type): void

(arg0: $CommandDispatcher$Type<($CommandSourceStack$Type)>, arg1: $CommandBuildContext$Type, arg2: $Commands$CommandSelection$Type): void
}

export namespace $RegHelper$CommandRegistration {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RegHelper$CommandRegistration$Type = ($RegHelper$CommandRegistration);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RegHelper$CommandRegistration_ = $RegHelper$CommandRegistration$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/reg/$ModBlockProperties$SignAttachment" {
import {$StringRepresentable$EnumCodec, $StringRepresentable$EnumCodec$Type} from "packages/net/minecraft/util/$StringRepresentable$EnumCodec"
import {$StringRepresentable, $StringRepresentable$Type} from "packages/net/minecraft/util/$StringRepresentable"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$Keyable, $Keyable$Type} from "packages/com/mojang/serialization/$Keyable"
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$ModBlockProperties$BlockAttachment, $ModBlockProperties$BlockAttachment$Type} from "packages/net/mehvahdjukaar/amendments/reg/$ModBlockProperties$BlockAttachment"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"

export class $ModBlockProperties$SignAttachment extends $Enum<($ModBlockProperties$SignAttachment)> implements $StringRepresentable {
static readonly "CEILING": $ModBlockProperties$SignAttachment
static readonly "BLOCK_BLOCK": $ModBlockProperties$SignAttachment
static readonly "BLOCK_BEAM": $ModBlockProperties$SignAttachment
static readonly "BLOCK_WALL": $ModBlockProperties$SignAttachment
static readonly "BLOCK_PALISADE": $ModBlockProperties$SignAttachment
static readonly "BLOCK_POST": $ModBlockProperties$SignAttachment
static readonly "BEAM_BLOCK": $ModBlockProperties$SignAttachment
static readonly "BEAM_BEAM": $ModBlockProperties$SignAttachment
static readonly "BEAM_WALL": $ModBlockProperties$SignAttachment
static readonly "BEAM_PALISADE": $ModBlockProperties$SignAttachment
static readonly "BEAM_POST": $ModBlockProperties$SignAttachment
static readonly "WALL_BLOCK": $ModBlockProperties$SignAttachment
static readonly "WALL_BEAM": $ModBlockProperties$SignAttachment
static readonly "WALL_WALL": $ModBlockProperties$SignAttachment
static readonly "WALL_PALISADE": $ModBlockProperties$SignAttachment
static readonly "WALL_POST": $ModBlockProperties$SignAttachment
static readonly "PALISADE_BLOCK": $ModBlockProperties$SignAttachment
static readonly "PALISADE_BEAM": $ModBlockProperties$SignAttachment
static readonly "PALISADE_WALL": $ModBlockProperties$SignAttachment
static readonly "PALISADE_PALISADE": $ModBlockProperties$SignAttachment
static readonly "PALISADE_POST": $ModBlockProperties$SignAttachment
static readonly "POST_BLOCK": $ModBlockProperties$SignAttachment
static readonly "POST_BEAM": $ModBlockProperties$SignAttachment
static readonly "POST_WALL": $ModBlockProperties$SignAttachment
static readonly "POST_PALISADE": $ModBlockProperties$SignAttachment
static readonly "POST_POST": $ModBlockProperties$SignAttachment
static readonly "STICK_BLOCK": $ModBlockProperties$SignAttachment
static readonly "STICK_BEAM": $ModBlockProperties$SignAttachment
static readonly "STICK_WALL": $ModBlockProperties$SignAttachment
static readonly "STICK_PALISADE": $ModBlockProperties$SignAttachment
static readonly "STICK_POST": $ModBlockProperties$SignAttachment
static readonly "STICK_STICK": $ModBlockProperties$SignAttachment
static readonly "BLOCK_STICK": $ModBlockProperties$SignAttachment
static readonly "BEAM_STICK": $ModBlockProperties$SignAttachment
static readonly "WALL_STICK": $ModBlockProperties$SignAttachment
static readonly "PALISADE_STICK": $ModBlockProperties$SignAttachment
static readonly "POST_STICK": $ModBlockProperties$SignAttachment
readonly "left": $ModBlockProperties$BlockAttachment
readonly "right": $ModBlockProperties$BlockAttachment


public "toString"(): string
public static "values"(): ($ModBlockProperties$SignAttachment)[]
public static "valueOf"(name: string): $ModBlockProperties$SignAttachment
public "getSerializedName"(): string
public "withAttachment"(left: boolean, attachment: $ModBlockProperties$BlockAttachment$Type): $ModBlockProperties$SignAttachment
public static "fromEnumWithMapping"<E extends ($Enum<(E)>) & ($StringRepresentable)>(arg0: $Supplier$Type<((E)[])>, arg1: $Function$Type<(string), (string)>): $StringRepresentable$EnumCodec<(E)>
public static "keys"(arg0: ($StringRepresentable$Type)[]): $Keyable
public static "fromEnum"<E extends ($Enum<(E)>) & ($StringRepresentable)>(arg0: $Supplier$Type<((E)[])>): $StringRepresentable$EnumCodec<(E)>
get "serializedName"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModBlockProperties$SignAttachment$Type = (("wall_stick") | ("palisade_wall") | ("palisade_stick") | ("beam_post") | ("stick_post") | ("stick_block") | ("block_beam") | ("wall_post") | ("block_wall") | ("wall_palisade") | ("palisade_beam") | ("beam_beam") | ("beam_palisade") | ("post_block") | ("beam_block") | ("palisade_block") | ("stick_beam") | ("beam_stick") | ("wall_wall") | ("post_stick") | ("ceiling") | ("beam_wall") | ("stick_palisade") | ("palisade_post") | ("block_palisade") | ("stick_stick") | ("block_block") | ("post_wall") | ("wall_beam") | ("post_beam") | ("stick_wall") | ("block_stick") | ("post_palisade") | ("palisade_palisade") | ("wall_block") | ("post_post") | ("block_post")) | ($ModBlockProperties$SignAttachment);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModBlockProperties$SignAttachment_ = $ModBlockProperties$SignAttachment$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/misc/map_markers/markers/$ColoredMarker" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$ColoredDecoration, $ColoredDecoration$Type} from "packages/net/mehvahdjukaar/supplementaries/common/misc/map_markers/$ColoredDecoration"
import {$MapBlockMarker, $MapBlockMarker$Type} from "packages/net/mehvahdjukaar/moonlight/api/map/markers/$MapBlockMarker"

export class $ColoredMarker extends $MapBlockMarker<($ColoredDecoration)> {
static readonly "HAS_SMALL_TEXTURE_FLAG": integer


public "equals"(other: any): boolean
public "hashCode"(): integer
public "loadFromNBT"(compound: $CompoundTag$Type): void
public "saveToNBT"(): $CompoundTag
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ColoredMarker$Type = ($ColoredMarker);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ColoredMarker_ = $ColoredMarker$Type;
}}
declare module "packages/net/mehvahdjukaar/modelfix/moonlight_configs/$ConfigSpec" {
import {$Path, $Path$Type} from "packages/java/nio/file/$Path"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$InputStream, $InputStream$Type} from "packages/java/io/$InputStream"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$ConfigType, $ConfigType$Type} from "packages/net/mehvahdjukaar/modelfix/moonlight_configs/$ConfigType"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $ConfigSpec {


public "register"(): void
public "getFileName"(): string
public "isLoaded"(): boolean
public "loadFromFile"(): void
public "isSynced"(): boolean
public "syncConfigsToPlayer"(player: $ServerPlayer$Type): void
public "sendSyncedConfigsToAllPlayers"(): void
public "getFullPath"(): $Path
public static "getSpec"(modId: string, type: $ConfigType$Type): $ConfigSpec
public "hasConfigScreen"(): boolean
public static "addTrackedSpec"(spec: $ConfigSpec$Type): void
public "getConfigType"(): $ConfigType
public "loadFromBytes"(arg0: $InputStream$Type): void
public "makeScreen"(parent: $Screen$Type): $Screen
public "makeScreen"(arg0: $Screen$Type, arg1: $ResourceLocation$Type): $Screen
public "getModId"(): string
get "fileName"(): string
get "loaded"(): boolean
get "synced"(): boolean
get "fullPath"(): $Path
get "configType"(): $ConfigType
get "modId"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ConfigSpec$Type = ($ConfigSpec);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ConfigSpec_ = $ConfigSpec$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/resources/textures/$SpriteUtils" {
import {$RGBColor, $RGBColor$Type} from "packages/net/mehvahdjukaar/moonlight/api/util/math/colors/$RGBColor"
import {$BiConsumer, $BiConsumer$Type} from "packages/java/util/function/$BiConsumer"
import {$TextureImage, $TextureImage$Type} from "packages/net/mehvahdjukaar/moonlight/api/resources/textures/$TextureImage"
import {$UnaryOperator, $UnaryOperator$Type} from "packages/java/util/function/$UnaryOperator"
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$List, $List$Type} from "packages/java/util/$List"
import {$NativeImage, $NativeImage$Type} from "packages/com/mojang/blaze3d/platform/$NativeImage"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$ResourceManager, $ResourceManager$Type} from "packages/net/minecraft/server/packs/resources/$ResourceManager"
import {$Palette, $Palette$Type} from "packages/net/mehvahdjukaar/moonlight/api/resources/textures/$Palette"
import {$IntUnaryOperator, $IntUnaryOperator$Type} from "packages/java/util/function/$IntUnaryOperator"

export class $SpriteUtils {
/**
 * 
 * @deprecated
 */
static readonly "LOOKS_LIKE_TOP_LOG_TEXTURE": $Predicate<(string)>
/**
 * 
 * @deprecated
 */
static readonly "LOOKS_LIKE_SIDE_LOG_TEXTURE": $Predicate<(string)>
/**
 * 
 * @deprecated
 */
static readonly "LOOKS_LIKE_LEAF_TEXTURE": $Predicate<(string)>

constructor()

/**
 * 
 * @deprecated
 */
public static "getLuminance"(r: integer, g: integer, b: integer): float
public static "readImage"(manager: $ResourceManager$Type, resourceLocation: $ResourceLocation$Type): $NativeImage
public static "extrapolateWoodItemPalette"(palette: $Palette$Type): void
public static "extrapolateWoodItemPalette"(planksTexture: $TextureImage$Type): $Palette
public static "averageColor"(image: $NativeImage$Type): $RGBColor
public static "extrapolateSignBlockPalette"(palette: $Palette$Type): void
public static "extrapolateSignBlockPalette"(planksTexture: $TextureImage$Type): $List<($Palette)>
public static "grayscaleImage"(image: $NativeImage$Type): void
public static "forEachPixel"(image: $NativeImage$Type, arg1: $BiConsumer$Type<(integer), (integer)>): void
public static "mergeSimilarColors"(image: $NativeImage$Type, tolerance: float): void
public static "reduceColors"(image: $NativeImage$Type, sizeFn: $IntUnaryOperator$Type): void
/**
 * 
 * @deprecated
 */
public static "reduceColors"(image: $NativeImage$Type, sizeFn: $UnaryOperator$Type<(integer)>): void
public static "savePaletteStrip"(manager: $ResourceManager$Type, colors: $List$Type<(integer)>): $TextureImage
public static "parsePaletteStrip"(manager: $ResourceManager$Type, fullTexturePath: $ResourceLocation$Type, expectColors: integer): $List<(integer)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SpriteUtils$Type = ($SpriteUtils);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SpriteUtils_ = $SpriteUtils$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/common/block/$HangingFlowerPotBlock" {
import {$IntegerProperty, $IntegerProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$IntegerProperty"
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$EntityBlock, $EntityBlock$Type} from "packages/net/minecraft/world/level/block/$EntityBlock"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$PathComputationType, $PathComputationType$Type} from "packages/net/minecraft/world/level/pathfinder/$PathComputationType"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$List, $List$Type} from "packages/java/util/$List"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$CollisionContext, $CollisionContext$Type} from "packages/net/minecraft/world/phys/shapes/$CollisionContext"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$LootParams$Builder, $LootParams$Builder$Type} from "packages/net/minecraft/world/level/storage/loot/$LootParams$Builder"
import {$BlockEntityTicker, $BlockEntityTicker$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityTicker"
import {$GameEventListener, $GameEventListener$Type} from "packages/net/minecraft/world/level/gameevent/$GameEventListener"

export class $HangingFlowerPotBlock extends $Block implements $EntityBlock {
static readonly "LIGHT_LEVEL": $IntegerProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(properties: $BlockBehaviour$Properties$Type)

public "getStateForPlacement"(context: $BlockPlaceContext$Type): $BlockState
public "setPlacedBy"(world: $Level$Type, pos: $BlockPos$Type, state: $BlockState$Type, entity: $LivingEntity$Type, stack: $ItemStack$Type): void
public "getCloneItemStack"(level: $BlockGetter$Type, pos: $BlockPos$Type, state: $BlockState$Type): $ItemStack
public "getName"(): $MutableComponent
public "isPathfindable"(state: $BlockState$Type, worldIn: $BlockGetter$Type, pos: $BlockPos$Type, type: $PathComputationType$Type): boolean
public "updateShape"(stateIn: $BlockState$Type, facing: $Direction$Type, facingState: $BlockState$Type, worldIn: $LevelAccessor$Type, currentPos: $BlockPos$Type, facingPos: $BlockPos$Type): $BlockState
public "use"(state: $BlockState$Type, level: $Level$Type, pos: $BlockPos$Type, player: $Player$Type, handIn: $InteractionHand$Type, hit: $BlockHitResult$Type): $InteractionResult
public "getDrops"(state: $BlockState$Type, builder: $LootParams$Builder$Type): $List<($ItemStack)>
public "getOcclusionShape"(state: $BlockState$Type, worldIn: $BlockGetter$Type, pos: $BlockPos$Type): $VoxelShape
public "canSurvive"(state: $BlockState$Type, worldIn: $LevelReader$Type, pos: $BlockPos$Type): boolean
public "getShape"(state: $BlockState$Type, worldIn: $BlockGetter$Type, pos: $BlockPos$Type, context: $CollisionContext$Type): $VoxelShape
public "newBlockEntity"(pPos: $BlockPos$Type, pState: $BlockState$Type): $BlockEntity
public static "playPlantSound"(level: $Level$Type, pos: $BlockPos$Type, player: $Player$Type): void
public "getTicker"<T extends $BlockEntity>(arg0: $Level$Type, arg1: $BlockState$Type, arg2: $BlockEntityType$Type<(T)>): $BlockEntityTicker<(T)>
public "getListener"<T extends $BlockEntity>(arg0: $ServerLevel$Type, arg1: T): $GameEventListener
get "name"(): $MutableComponent
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $HangingFlowerPotBlock$Type = ($HangingFlowerPotBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $HangingFlowerPotBlock_ = $HangingFlowerPotBlock$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/blocks/$CrankBlock" {
import {$IntegerProperty, $IntegerProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$IntegerProperty"
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$Mirror, $Mirror$Type} from "packages/net/minecraft/world/level/block/$Mirror"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$PathComputationType, $PathComputationType$Type} from "packages/net/minecraft/world/level/pathfinder/$PathComputationType"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$WaterBlock, $WaterBlock$Type} from "packages/net/mehvahdjukaar/moonlight/api/block/$WaterBlock"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"
import {$DirectionProperty, $DirectionProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$DirectionProperty"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$CollisionContext, $CollisionContext$Type} from "packages/net/minecraft/world/phys/shapes/$CollisionContext"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$Rotation, $Rotation$Type} from "packages/net/minecraft/world/level/block/$Rotation"

export class $CrankBlock extends $WaterBlock {
static readonly "FACING": $DirectionProperty
static readonly "POWER": $IntegerProperty
static readonly "WATERLOGGED": $BooleanProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(properties: $BlockBehaviour$Properties$Type)

public "activate"(state: $BlockState$Type, world: $Level$Type, pos: $BlockPos$Type, ccw: boolean): void
public "getStateForPlacement"(context: $BlockPlaceContext$Type): $BlockState
public "isPathfindable"(state: $BlockState$Type, reader: $BlockGetter$Type, pos: $BlockPos$Type, pathType: $PathComputationType$Type): boolean
public "updateShape"(stateIn: $BlockState$Type, facing: $Direction$Type, facingState: $BlockState$Type, worldIn: $LevelAccessor$Type, currentPos: $BlockPos$Type, facingPos: $BlockPos$Type): $BlockState
public "use"(state: $BlockState$Type, worldIn: $Level$Type, pos: $BlockPos$Type, player: $Player$Type, handIn: $InteractionHand$Type, hit: $BlockHitResult$Type): $InteractionResult
public "isSignalSource"(state: $BlockState$Type): boolean
public "useShapeForLightOcclusion"(state: $BlockState$Type): boolean
public "onRemove"(state: $BlockState$Type, worldIn: $Level$Type, pos: $BlockPos$Type, newState: $BlockState$Type, isMoving: boolean): void
public "rotate"(state: $BlockState$Type, rot: $Rotation$Type): $BlockState
public "mirror"(state: $BlockState$Type, mirrorIn: $Mirror$Type): $BlockState
public "canSurvive"(state: $BlockState$Type, worldIn: $LevelReader$Type, pos: $BlockPos$Type): boolean
public "getShape"(state: $BlockState$Type, world: $BlockGetter$Type, pos: $BlockPos$Type, context: $CollisionContext$Type): $VoxelShape
public "getSignal"(blockState: $BlockState$Type, blockAccess: $BlockGetter$Type, pos: $BlockPos$Type, side: $Direction$Type): integer
public "getDirectSignal"(blockState: $BlockState$Type, blockAccess: $BlockGetter$Type, pos: $BlockPos$Type, side: $Direction$Type): integer
public "animateTick"(stateIn: $BlockState$Type, worldIn: $Level$Type, pos: $BlockPos$Type, rand: $RandomSource$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CrankBlock$Type = ($CrankBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CrankBlock_ = $CrankBlock$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/entities/$ThrowableBrickEntity" {
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Packet, $Packet$Type} from "packages/net/minecraft/network/protocol/$Packet"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$ImprovedProjectileEntity, $ImprovedProjectileEntity$Type} from "packages/net/mehvahdjukaar/moonlight/api/entity/$ImprovedProjectileEntity"
import {$ClientGamePacketListener, $ClientGamePacketListener$Type} from "packages/net/minecraft/network/protocol/game/$ClientGamePacketListener"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $ThrowableBrickEntity extends $ImprovedProjectileEntity {
/**
 * 
 * @deprecated
 */
 "touchedGround": boolean
/**
 * 
 * @deprecated
 */
 "groundTime": integer
 "ownerUUID": $UUID
 "cachedOwner": $Entity
 "leftOwner": boolean
 "hasBeenShot": boolean
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(worldIn: $Level$Type, x: double, y: double, z: double)
constructor(worldIn: $Level$Type, throwerIn: $LivingEntity$Type)
constructor(type: $EntityType$Type<(any)>, world: $Level$Type)

public "handleEntityEvent"(id: byte): void
public "getAddEntityPacket"(): $Packet<($ClientGamePacketListener)>
get "addEntityPacket"(): $Packet<($ClientGamePacketListener)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ThrowableBrickEntity$Type = ($ThrowableBrickEntity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ThrowableBrickEntity_ = $ThrowableBrickEntity$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/worldgen/$StructureLocator" {
import {$HolderSet, $HolderSet$Type} from "packages/net/minecraft/core/$HolderSet"
import {$Structure, $Structure$Type} from "packages/net/minecraft/world/level/levelgen/structure/$Structure"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$StructureLocator$LocatedStruct, $StructureLocator$LocatedStruct$Type} from "packages/net/mehvahdjukaar/supplementaries/common/worldgen/$StructureLocator$LocatedStruct"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"

export class $StructureLocator {

constructor()

public static "findNearestMapFeatures"(level: $ServerLevel$Type, tagKey: $TagKey$Type<($Structure$Type)>, pos: $BlockPos$Type, maximumChunkDistance: integer, newlyGenerated: boolean, requiredCount: integer, maxSearches: integer): $List<($StructureLocator$LocatedStruct)>
public static "findNearestMapFeatures"(level: $ServerLevel$Type, taggedStructures: $HolderSet$Type<($Structure$Type)>, pos: $BlockPos$Type, maximumChunkDistance: integer, newlyGenerated: boolean, requiredCount: integer, selectRandom: boolean, exitEarly: boolean): $List<($StructureLocator$LocatedStruct)>
public static "findNearestRandomMapFeature"(level: $ServerLevel$Type, targets: $HolderSet$Type<($Structure$Type)>, pos: $BlockPos$Type, maximumChunkDistance: integer, newlyGenerated: boolean): $StructureLocator$LocatedStruct
public "findRandomMapFeature"(tagKey: $TagKey$Type<($Structure$Type)>, pos: $BlockPos$Type, radius: integer, unexplored: boolean, level: $ServerLevel$Type): $BlockPos
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $StructureLocator$Type = ($StructureLocator);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $StructureLocator_ = $StructureLocator$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/core/misc/forge/$ModLootModifiers" {
import {$DeferredRegister, $DeferredRegister$Type} from "packages/net/minecraftforge/registries/$DeferredRegister"
import {$RegistryObject, $RegistryObject$Type} from "packages/net/minecraftforge/registries/$RegistryObject"
import {$Codec, $Codec$Type} from "packages/com/mojang/serialization/$Codec"

export class $ModLootModifiers {
static readonly "LOOT_MODIFIERS": $DeferredRegister<($Codec<(any)>)>
static readonly "ADD_ITEM_GLM": $RegistryObject<($Codec<(any)>)>
static readonly "REPLACE_ITEM_GLM": $RegistryObject<($Codec<(any)>)>
static readonly "ADD_TABLE": $RegistryObject<($Codec<(any)>)>

constructor()

public static "register"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModLootModifiers$Type = ($ModLootModifiers);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModLootModifiers_ = $ModLootModifiers$Type;
}}
declare module "packages/net/mehvahdjukaar/dummmmmmy/configs/$CritMode" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $CritMode extends $Enum<($CritMode)> {
static readonly "OFF": $CritMode
static readonly "COLOR": $CritMode
static readonly "COLOR_AND_MULTIPLIER": $CritMode


public static "values"(): ($CritMode)[]
public static "valueOf"(name: string): $CritMode
public static "encodeIntFloatToDouble"(integerPart: integer, floatPart: float): double
public static "extractIntegerPart"(encodedDouble: double): integer
public static "extractFloatPart"(encodedDouble: double): float
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CritMode$Type = (("color") | ("off") | ("color_and_multiplier")) | ($CritMode);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CritMode_ = $CritMode$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/item/additional_placements/$AdditionalItemPlacement" {
import {$UseOnContext, $UseOnContext$Type} from "packages/net/minecraft/world/item/context/$UseOnContext"
import {$BlockPlacerItem, $BlockPlacerItem$Type} from "packages/net/mehvahdjukaar/moonlight/api/item/additional_placements/$BlockPlacerItem"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"
import {$FoodProperties, $FoodProperties$Type} from "packages/net/minecraft/world/food/$FoodProperties"

export class $AdditionalItemPlacement {

constructor(placeable: $Block$Type)

public "overrideUseOn"(pContext: $UseOnContext$Type, foodProperties: $FoodProperties$Type): $InteractionResult
public "getPlacedBlock"(): $Block
public static "getBlockPlacer"(): $BlockPlacerItem
public "overrideGetPlacementState"(pContext: $BlockPlaceContext$Type): $BlockState
public "overrideUpdatePlacementContext"(context: $BlockPlaceContext$Type): $BlockPlaceContext
public "overridePlace"(pContext: $BlockPlaceContext$Type): $InteractionResult
get "placedBlock"(): $Block
get "blockPlacer"(): $BlockPlacerItem
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AdditionalItemPlacement$Type = ($AdditionalItemPlacement);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AdditionalItemPlacement_ = $AdditionalItemPlacement$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/misc/$IContainerProvider" {
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"

export interface $IContainerProvider {

 "getContainer"(): $Container

(): $Container
}

export namespace $IContainerProvider {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IContainerProvider$Type = ($IContainerProvider);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IContainerProvider_ = $IContainerProvider$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/common/$PendulumAnimation" {
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$PendulumAnimation$Config, $PendulumAnimation$Config$Type} from "packages/net/mehvahdjukaar/amendments/common/$PendulumAnimation$Config"
import {$Vector3f, $Vector3f$Type} from "packages/org/joml/$Vector3f"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$SwingAnimation, $SwingAnimation$Type} from "packages/net/mehvahdjukaar/amendments/common/$SwingAnimation"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $PendulumAnimation extends $SwingAnimation {

constructor(config: $Supplier$Type<($PendulumAnimation$Config$Type)>, axisGetter: $Function$Type<($BlockState$Type), ($Vector3f$Type)>)

public "reset"(): void
public "tick"(level: $Level$Type, pos: $BlockPos$Type, state: $BlockState$Type): void
public "getAngle"(partialTicks: float): float
public "addImpulse"(vel: double): void
public "hitByEntity"(entity: $Entity$Type, state: $BlockState$Type, pos: $BlockPos$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PendulumAnimation$Type = ($PendulumAnimation);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PendulumAnimation_ = $PendulumAnimation$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/integration/$FarmersRespriteCompat" {
import {$IntegerProperty, $IntegerProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$IntegerProperty"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"

export class $FarmersRespriteCompat {

constructor()

public static "isKettle"(block: $BlockState$Type): boolean
public static "getWaterLevel"(): $IntegerProperty
get "waterLevel"(): $IntegerProperty
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FarmersRespriteCompat$Type = ($FarmersRespriteCompat);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FarmersRespriteCompat_ = $FarmersRespriteCompat$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$PresentBlockTile" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$AbstractContainerMenu, $AbstractContainerMenu$Type} from "packages/net/minecraft/world/inventory/$AbstractContainerMenu"
import {$LockCode, $LockCode$Type} from "packages/net/minecraft/world/$LockCode"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"
import {$AbstractPresentBlockTile, $AbstractPresentBlockTile$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$AbstractPresentBlockTile"

export class $PresentBlockTile extends $AbstractPresentBlockTile {
static readonly "PUBLIC_KEY": string
static readonly "LOOT_TABLE_TAG": string
static readonly "LOOT_TABLE_SEED_TAG": string
 "lootTable": $ResourceLocation
 "lootTableSeed": long
 "lockKey": $LockCode
 "blockState": $BlockState

constructor(pos: $BlockPos$Type, state: $BlockState$Type)

public "getDescription"(): string
public "setSender"(sender: string): void
public "setRecipient"(recipient: string): void
public "canHoldItems"(): boolean
public "setPublic"(): void
public static "getSenderMessage"(sender: string): $Component
public "getSenderMessage"(): $Component
public "getRecipient"(): string
public "updateState"(shouldPack: boolean, newRecipient: string, sender: string, description: string): void
public "isPacked"(): boolean
public "interact"(level: $Level$Type, pos: $BlockPos$Type, state: $BlockState$Type, player: $Player$Type): $InteractionResult
public "load"(tag: $CompoundTag$Type): void
public "m_183515_"(tag: $CompoundTag$Type): void
public "getRecipientMessage"(): $Component
public static "getRecipientMessage"(recipient: string): $Component
public "m_6555_"(id: integer, player: $Inventory$Type): $AbstractContainerMenu
public "m_6820_"(): $Component
public "canOpen"(player: $Player$Type): boolean
public "getSender"(): string
public "setChanged"(): void
public static "stillValidBlockEntity"(arg0: $BlockEntity$Type, arg1: $Player$Type, arg2: integer): boolean
public static "stillValidBlockEntity"(arg0: $BlockEntity$Type, arg1: $Player$Type): boolean
public static "tryClear"(arg0: any): void
get "description"(): string
set "sender"(value: string)
set "recipient"(value: string)
get "senderMessage"(): $Component
get "recipient"(): string
get "packed"(): boolean
get "recipientMessage"(): $Component
get "sender"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PresentBlockTile$Type = ($PresentBlockTile);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PresentBlockTile_ = $PresentBlockTile$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/resources/pack/$DynamicTexturePack" {
import {$JsonElement, $JsonElement$Type} from "packages/com/google/gson/$JsonElement"
import {$DynamicResourcePack, $DynamicResourcePack$Type} from "packages/net/mehvahdjukaar/moonlight/api/resources/pack/$DynamicResourcePack"
import {$LangBuilder, $LangBuilder$Type} from "packages/net/mehvahdjukaar/moonlight/api/resources/assets/$LangBuilder"
import {$TextureImage, $TextureImage$Type} from "packages/net/mehvahdjukaar/moonlight/api/resources/textures/$TextureImage"
import {$Pack$Position, $Pack$Position$Type} from "packages/net/minecraft/server/packs/repository/$Pack$Position"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $DynamicTexturePack extends $DynamicResourcePack {

constructor(name: $ResourceLocation$Type, position: $Pack$Position$Type, fixed: boolean, hidden: boolean)
constructor(name: $ResourceLocation$Type)

public "addBlockModel"(modelLocation: $ResourceLocation$Type, model: $JsonElement$Type): void
public "addItemModel"(modelLocation: $ResourceLocation$Type, model: $JsonElement$Type): void
public "addAndCloseTexture"(path: $ResourceLocation$Type, image: $TextureImage$Type): void
public "addAndCloseTexture"(path: $ResourceLocation$Type, image: $TextureImage$Type, isOnAtlas: boolean): void
public "addBlockState"(modelLocation: $ResourceLocation$Type, model: $JsonElement$Type): void
public "addLang"(langName: $ResourceLocation$Type, builder: $LangBuilder$Type): void
public "addLang"(langName: $ResourceLocation$Type, language: $JsonElement$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DynamicTexturePack$Type = ($DynamicTexturePack);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DynamicTexturePack_ = $DynamicTexturePack$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/client/util/$TextUtil$RenderProperties" {
import {$DyeColor, $DyeColor$Type} from "packages/net/minecraft/world/item/$DyeColor"
import {$BooleanSupplier, $BooleanSupplier$Type} from "packages/java/util/function/$BooleanSupplier"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$Style, $Style$Type} from "packages/net/minecraft/network/chat/$Style"

export class $TextUtil$RenderProperties extends $Record {

/**
 * 
 * @deprecated
 */
constructor(color: $DyeColor$Type, outline: boolean, combinedLight: integer, style: $Style$Type, isVeryNear: $BooleanSupplier$Type)
constructor(textColor: integer, darkenedColor: integer, outline: boolean, light: integer, style: $Style$Type)

public "equals"(o: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "style"(): $Style
public "light"(): integer
public "darkenedColor"(): integer
public "outline"(): boolean
public "textColor"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TextUtil$RenderProperties$Type = ($TextUtil$RenderProperties);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TextUtil$RenderProperties_ = $TextUtil$RenderProperties$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/$LeatherPatternTexturesRegistry" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $LeatherPatternTexturesRegistry {

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LeatherPatternTexturesRegistry$Type = ($LeatherPatternTexturesRegistry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LeatherPatternTexturesRegistry_ = $LeatherPatternTexturesRegistry$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/map/client/$MapDecorationClientManager" {
import {$VertexConsumer, $VertexConsumer$Type} from "packages/com/mojang/blaze3d/vertex/$VertexConsumer"
import {$TextureAtlasHolder, $TextureAtlasHolder$Type} from "packages/net/minecraft/client/resources/$TextureAtlasHolder"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$RenderType, $RenderType$Type} from "packages/net/minecraft/client/renderer/$RenderType"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$DecorationRenderer, $DecorationRenderer$Type} from "packages/net/mehvahdjukaar/moonlight/api/map/client/$DecorationRenderer"
import {$CustomMapDecoration, $CustomMapDecoration$Type} from "packages/net/mehvahdjukaar/moonlight/api/map/$CustomMapDecoration"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$MapItemSavedData, $MapItemSavedData$Type} from "packages/net/minecraft/world/level/saveddata/maps/$MapItemSavedData"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$MapDecorationType, $MapDecorationType$Type} from "packages/net/mehvahdjukaar/moonlight/api/map/type/$MapDecorationType"
import {$TextureAtlasSprite, $TextureAtlasSprite$Type} from "packages/net/minecraft/client/renderer/texture/$TextureAtlasSprite"

export class $MapDecorationClientManager extends $TextureAtlasHolder {
static readonly "LOCATION_MAP_MARKERS": $ResourceLocation
static readonly "MAP_MARKERS_RENDER_TYPE": $RenderType

constructor()

public static "render"<T extends $CustomMapDecoration>(decoration: T, matrixStack: $PoseStack$Type, vertexBuilder: $VertexConsumer$Type, buffer: $MultiBufferSource$Type, mapData: $MapItemSavedData$Type, isOnFrame: boolean, light: integer, index: integer): boolean
public static "getAtlasSprite"(location: $ResourceLocation$Type): $TextureAtlasSprite
public static "getRenderer"<E extends $CustomMapDecoration>(decoration: E): $DecorationRenderer<(E)>
public static "getRenderer"<E extends $CustomMapDecoration, T extends $MapDecorationType<(E), (any)>>(type: T): $DecorationRenderer<(E)>
/**
 * 
 * @deprecated
 */
public static "registerCustomRenderer"<T extends $CustomMapDecoration>(type: $MapDecorationType$Type<(T), (any)>, renderer: $DecorationRenderer$Type<(T)>): void
public static "registerCustomRenderer"<T extends $CustomMapDecoration>(typeFactoryId: $ResourceLocation$Type, renderer: $Function$Type<($ResourceLocation$Type), ($DecorationRenderer$Type<(T)>)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MapDecorationClientManager$Type = ($MapDecorationClientManager);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MapDecorationClientManager_ = $MapDecorationClientManager$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$AbstractPresentBlockTile" {
import {$IWeakContainer, $IWeakContainer$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/$IWeakContainer"
import {$Packet, $Packet$Type} from "packages/net/minecraft/network/protocol/$Packet"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$ClientGamePacketListener, $ClientGamePacketListener$Type} from "packages/net/minecraft/network/protocol/game/$ClientGamePacketListener"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$AbstractContainerMenu, $AbstractContainerMenu$Type} from "packages/net/minecraft/world/inventory/$AbstractContainerMenu"
import {$OpeneableContainerBlockEntity, $OpeneableContainerBlockEntity$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$OpeneableContainerBlockEntity"
import {$LockCode, $LockCode$Type} from "packages/net/minecraft/world/$LockCode"
import {$ItemLike, $ItemLike$Type} from "packages/net/minecraft/world/level/$ItemLike"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"

export class $AbstractPresentBlockTile extends $OpeneableContainerBlockEntity implements $IWeakContainer {
static readonly "LOOT_TABLE_TAG": string
static readonly "LOOT_TABLE_SEED_TAG": string
 "lootTable": $ResourceLocation
 "lootTableSeed": long
 "lockKey": $LockCode
 "blockState": $BlockState


public "getPresentItem"(block: $ItemLike$Type): $ItemStack
public "canTakeItemThroughFace"(index: integer, stack: $ItemStack$Type, direction: $Direction$Type): boolean
public "canPlaceItemThroughFace"(index: integer, stack: $ItemStack$Type, direction: $Direction$Type): boolean
public "interact"(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: $Player$Type): $InteractionResult
public "canPlaceItem"(index: integer, stack: $ItemStack$Type): boolean
public "m_6555_"(id: integer, inv: $Inventory$Type): $AbstractContainerMenu
public "getUpdatePacket"(): $Packet<($ClientGamePacketListener)>
public "canHoldItems"(): boolean
public "setChanged"(): void
public static "stillValidBlockEntity"(arg0: $BlockEntity$Type, arg1: $Player$Type, arg2: integer): boolean
public static "stillValidBlockEntity"(arg0: $BlockEntity$Type, arg1: $Player$Type): boolean
public static "tryClear"(arg0: any): void
get "updatePacket"(): $Packet<($ClientGamePacketListener)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AbstractPresentBlockTile$Type = ($AbstractPresentBlockTile);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AbstractPresentBlockTile_ = $AbstractPresentBlockTile$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/block/$ModStairBlock" {
import {$Half, $Half$Type} from "packages/net/minecraft/world/level/block/state/properties/$Half"
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$StairsShape, $StairsShape$Type} from "packages/net/minecraft/world/level/block/state/properties/$StairsShape"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$EnumProperty, $EnumProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$EnumProperty"
import {$StairBlock, $StairBlock$Type} from "packages/net/minecraft/world/level/block/$StairBlock"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$DirectionProperty, $DirectionProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$DirectionProperty"

export class $ModStairBlock extends $StairBlock {
static readonly "FACING": $DirectionProperty
static readonly "HALF": $EnumProperty<($Half)>
static readonly "SHAPE": $EnumProperty<($StairsShape)>
static readonly "WATERLOGGED": $BooleanProperty
readonly "baseState": $BlockState
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(baseBlock: $Supplier$Type<($Block$Type)>, settings: $BlockBehaviour$Properties$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModStairBlock$Type = ($ModStairBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModStairBlock_ = $ModStairBlock$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/core/network/$ModMessages" {
import {$ChannelHandler, $ChannelHandler$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/network/$ChannelHandler"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $ModMessages {
static readonly "SPAWN_PACKET_ID": $ResourceLocation
static readonly "CHANNEL": $ChannelHandler

constructor()

public static "init"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModMessages$Type = ($ModMessages);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModMessages_ = $ModMessages$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/faucet/$BrewingStandInteraction" {
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$FaucetTarget$Tile, $FaucetTarget$Tile$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/faucet/$FaucetTarget$Tile"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$FluidOffer, $FluidOffer$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/faucet/$FluidOffer"
import {$SoftFluidStack, $SoftFluidStack$Type} from "packages/net/mehvahdjukaar/moonlight/api/fluids/$SoftFluidStack"
import {$FaucetSource$Tile, $FaucetSource$Tile$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/faucet/$FaucetSource$Tile"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $BrewingStandInteraction implements $FaucetSource$Tile, $FaucetTarget$Tile {


public "fill"(level: $Level$Type, pos: $BlockPos$Type, tile: $BlockEntity$Type, fluid: $SoftFluidStack$Type, minAmount: integer): integer
public "drain"(level: $Level$Type, pos: $BlockPos$Type, dir: $Direction$Type, tile: $BlockEntity$Type, amount: integer): void
public "getProvidedFluid"(level: $Level$Type, pos: $BlockPos$Type, dir: $Direction$Type, tile: $BlockEntity$Type): $FluidOffer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BrewingStandInteraction$Type = ($BrewingStandInteraction);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BrewingStandInteraction_ = $BrewingStandInteraction$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/reg/$ModMenuTypes" {
import {$PresentContainerMenu, $PresentContainerMenu$Type} from "packages/net/mehvahdjukaar/supplementaries/common/inventories/$PresentContainerMenu"
import {$CannonContainerMenu, $CannonContainerMenu$Type} from "packages/net/mehvahdjukaar/supplementaries/common/inventories/$CannonContainerMenu"
import {$VariableSizeContainerMenu, $VariableSizeContainerMenu$Type} from "packages/net/mehvahdjukaar/supplementaries/common/inventories/$VariableSizeContainerMenu"
import {$NoticeBoardContainerMenu, $NoticeBoardContainerMenu$Type} from "packages/net/mehvahdjukaar/supplementaries/common/inventories/$NoticeBoardContainerMenu"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$MenuType, $MenuType$Type} from "packages/net/minecraft/world/inventory/$MenuType"
import {$TrappedPresentContainerMenu, $TrappedPresentContainerMenu$Type} from "packages/net/mehvahdjukaar/supplementaries/common/inventories/$TrappedPresentContainerMenu"
import {$RedMerchantMenu, $RedMerchantMenu$Type} from "packages/net/mehvahdjukaar/supplementaries/common/inventories/$RedMerchantMenu"
import {$SafeContainerMenu, $SafeContainerMenu$Type} from "packages/net/mehvahdjukaar/supplementaries/common/inventories/$SafeContainerMenu"
import {$PulleyContainerMenu, $PulleyContainerMenu$Type} from "packages/net/mehvahdjukaar/supplementaries/common/inventories/$PulleyContainerMenu"

export class $ModMenuTypes {
static readonly "PRESENT_BLOCK": $Supplier<($MenuType<($PresentContainerMenu)>)>
static readonly "TRAPPED_PRESENT_BLOCK": $Supplier<($MenuType<($TrappedPresentContainerMenu)>)>
static readonly "NOTICE_BOARD": $Supplier<($MenuType<($NoticeBoardContainerMenu)>)>
static readonly "VARIABLE_SIZE": $Supplier<($MenuType<($VariableSizeContainerMenu)>)>
static readonly "SAFE": $Supplier<($MenuType<($SafeContainerMenu)>)>
static readonly "PULLEY_BLOCK": $Supplier<($MenuType<($PulleyContainerMenu)>)>
static readonly "CANNON": $Supplier<($MenuType<($CannonContainerMenu)>)>
static readonly "RED_MERCHANT": $Supplier<($MenuType<($RedMerchantMenu)>)>

constructor()

public static "init"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModMenuTypes$Type = ($ModMenuTypes);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModMenuTypes_ = $ModMenuTypes$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/$ModBlockProperties$Winding" {
import {$StringRepresentable$EnumCodec, $StringRepresentable$EnumCodec$Type} from "packages/net/minecraft/util/$StringRepresentable$EnumCodec"
import {$StringRepresentable, $StringRepresentable$Type} from "packages/net/minecraft/util/$StringRepresentable"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$Keyable, $Keyable$Type} from "packages/com/mojang/serialization/$Keyable"
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"

export class $ModBlockProperties$Winding extends $Enum<($ModBlockProperties$Winding)> implements $StringRepresentable {
static readonly "NONE": $ModBlockProperties$Winding
static readonly "CHAIN": $ModBlockProperties$Winding
static readonly "ROPE": $ModBlockProperties$Winding


public static "values"(): ($ModBlockProperties$Winding)[]
public static "valueOf"(name: string): $ModBlockProperties$Winding
public "getSerializedName"(): string
public static "fromEnumWithMapping"<E extends ($Enum<(E)>) & ($StringRepresentable)>(arg0: $Supplier$Type<((E)[])>, arg1: $Function$Type<(string), (string)>): $StringRepresentable$EnumCodec<(E)>
public static "keys"(arg0: ($StringRepresentable$Type)[]): $Keyable
public static "fromEnum"<E extends ($Enum<(E)>) & ($StringRepresentable)>(arg0: $Supplier$Type<((E)[])>): $StringRepresentable$EnumCodec<(E)>
get "serializedName"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModBlockProperties$Winding$Type = (("chain") | ("rope") | ("none")) | ($ModBlockProperties$Winding);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModBlockProperties$Winding_ = $ModBlockProperties$Winding$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/common/recipe/$CauldronRecipe" {
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$ShapelessRecipe, $ShapelessRecipe$Type} from "packages/net/minecraft/world/item/crafting/$ShapelessRecipe"
import {$Ingredient, $Ingredient$Type} from "packages/net/minecraft/world/item/crafting/$Ingredient"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$CraftingBookCategory, $CraftingBookCategory$Type} from "packages/net/minecraft/world/item/crafting/$CraftingBookCategory"

export class $CauldronRecipe extends $ShapelessRecipe {
readonly "group": string
readonly "result": $ItemStack
readonly "ingredients": $NonNullList<($Ingredient)>

constructor(id: $ResourceLocation$Type, group: string, category: $CraftingBookCategory$Type, result: $ItemStack$Type, ingredients: $NonNullList$Type<($Ingredient$Type)>)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CauldronRecipe$Type = ($CauldronRecipe);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CauldronRecipe_ = $CauldronRecipe$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/network/$ClientBoundParticlePacket$EventType" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $ClientBoundParticlePacket$EventType extends $Enum<($ClientBoundParticlePacket$EventType)> {
static readonly "BUBBLE_BLOW": $ClientBoundParticlePacket$EventType
static readonly "BUBBLE_CLEAN": $ClientBoundParticlePacket$EventType
static readonly "BUBBLE_CLEAN_ENTITY": $ClientBoundParticlePacket$EventType
static readonly "DISPENSER_MINECART": $ClientBoundParticlePacket$EventType
static readonly "FLINT_BLOCK_IGNITE": $ClientBoundParticlePacket$EventType
static readonly "WAX_ON": $ClientBoundParticlePacket$EventType


public static "values"(): ($ClientBoundParticlePacket$EventType)[]
public static "valueOf"(name: string): $ClientBoundParticlePacket$EventType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientBoundParticlePacket$EventType$Type = (("dispenser_minecart") | ("bubble_blow") | ("bubble_clean_entity") | ("bubble_clean") | ("flint_block_ignite") | ("wax_on")) | ($ClientBoundParticlePacket$EventType);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientBoundParticlePacket$EventType_ = $ClientBoundParticlePacket$EventType$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/events/behaviors/$ItemUse" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export interface $ItemUse {

 "isEnabled"(): boolean
 "getTooltip"(): $MutableComponent
 "appliesToItem"(arg0: $Item$Type): boolean
 "tryPerformingAction"(arg0: $Level$Type, arg1: $Player$Type, arg2: $InteractionHand$Type, arg3: $ItemStack$Type, arg4: $BlockHitResult$Type): $InteractionResult
}

export namespace $ItemUse {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ItemUse$Type = ($ItemUse);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ItemUse_ = $ItemUse$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/misc/map_markers/$ColoredDecoration" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$DyeColor, $DyeColor$Type} from "packages/net/minecraft/world/item/$DyeColor"
import {$CustomMapDecoration, $CustomMapDecoration$Type} from "packages/net/mehvahdjukaar/moonlight/api/map/$CustomMapDecoration"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$MapDecorationType, $MapDecorationType$Type} from "packages/net/mehvahdjukaar/moonlight/api/map/type/$MapDecorationType"

export class $ColoredDecoration extends $CustomMapDecoration {

constructor(type: $MapDecorationType$Type<(any), (any)>, x: byte, y: byte, rot: byte, displayName: $Component$Type, color: $DyeColor$Type)
constructor(type: $MapDecorationType$Type<(any), (any)>, buffer: $FriendlyByteBuf$Type)

public "saveToBuffer"(buffer: $FriendlyByteBuf$Type): void
public "getColor"(): $DyeColor
public "getColorValue"(): integer
get "color"(): $DyeColor
get "colorValue"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ColoredDecoration$Type = ($ColoredDecoration);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ColoredDecoration_ = $ColoredDecoration$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/blocks/$GoldTrapdoorBlock" {
import {$Half, $Half$Type} from "packages/net/minecraft/world/level/block/state/properties/$Half"
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$TrapDoorBlock, $TrapDoorBlock$Type} from "packages/net/minecraft/world/level/block/$TrapDoorBlock"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$EnumProperty, $EnumProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$EnumProperty"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"
import {$DirectionProperty, $DirectionProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$DirectionProperty"
import {$BlockSetType, $BlockSetType$Type} from "packages/net/minecraft/world/level/block/state/properties/$BlockSetType"

export class $GoldTrapdoorBlock extends $TrapDoorBlock {
static readonly "OPEN": $BooleanProperty
static readonly "HALF": $EnumProperty<($Half)>
static readonly "POWERED": $BooleanProperty
static readonly "WATERLOGGED": $BooleanProperty
readonly "type": $BlockSetType
static readonly "FACING": $DirectionProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(properties: $BlockBehaviour$Properties$Type)

public "getStateForPlacement"(context: $BlockPlaceContext$Type): $BlockState
public "neighborChanged"(state: $BlockState$Type, worldIn: $Level$Type, pos: $BlockPos$Type, blockIn: $Block$Type, fromPos: $BlockPos$Type, isMoving: boolean): void
public "use"(state: $BlockState$Type, worldIn: $Level$Type, pos: $BlockPos$Type, player: $Player$Type, handIn: $InteractionHand$Type, hit: $BlockHitResult$Type): $InteractionResult
public "canBeOpened"(state: $BlockState$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GoldTrapdoorBlock$Type = ($GoldTrapdoorBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GoldTrapdoorBlock_ = $GoldTrapdoorBlock$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/client/model/$IExtraModelDataProvider" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$LazyOptional, $LazyOptional$Type} from "packages/net/minecraftforge/common/util/$LazyOptional"
import {$Connection, $Connection$Type} from "packages/net/minecraft/network/$Connection"
import {$ModelData, $ModelData$Type} from "packages/net/minecraftforge/client/model/data/$ModelData"
import {$ExtraModelData, $ExtraModelData$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$ExtraModelData"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$IForgeBlockEntity, $IForgeBlockEntity$Type} from "packages/net/minecraftforge/common/extensions/$IForgeBlockEntity"
import {$ClientboundBlockEntityDataPacket, $ClientboundBlockEntityDataPacket$Type} from "packages/net/minecraft/network/protocol/game/$ClientboundBlockEntityDataPacket"
import {$Capability, $Capability$Type} from "packages/net/minecraftforge/common/capabilities/$Capability"
import {$ExtraModelData$Builder, $ExtraModelData$Builder$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$ExtraModelData$Builder"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$AABB, $AABB$Type} from "packages/net/minecraft/world/phys/$AABB"

export interface $IExtraModelDataProvider extends $IForgeBlockEntity {

 "addExtraModelData"(builder: $ExtraModelData$Builder$Type): void
 "requestModelReload"(): void
/**
 * 
 * @deprecated
 */
 "getExtraModelData"(): $ExtraModelData
 "afterDataPacket"(oldData: $ExtraModelData$Type): void
 "onDataPacket"(net: $Connection$Type, pkt: $ClientboundBlockEntityDataPacket$Type): void
 "getModelData"(): $ModelData
 "getPersistentData"(): $CompoundTag
 "onLoad"(): void
 "hasCustomOutlineRendering"(arg0: $Player$Type): boolean
 "getRenderBoundingBox"(): $AABB
 "requestModelDataUpdate"(): void
 "deserializeNBT"(arg0: $CompoundTag$Type): void
 "serializeNBT"(): $CompoundTag
 "onChunkUnloaded"(): void
 "handleUpdateTag"(arg0: $CompoundTag$Type): void
 "getCapability"<T>(arg0: $Capability$Type<(T)>, arg1: $Direction$Type): $LazyOptional<(T)>
 "getCapability"<T>(arg0: $Capability$Type<(T)>): $LazyOptional<(T)>
}

export namespace $IExtraModelDataProvider {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IExtraModelDataProvider$Type = ($IExtraModelDataProvider);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IExtraModelDataProvider_ = $IExtraModelDataProvider$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/tooltip/$BannerPatternTooltipComponent" {
import {$TooltipComponent, $TooltipComponent$Type} from "packages/net/minecraft/world/inventory/tooltip/$TooltipComponent"
import {$FormattedCharSequence, $FormattedCharSequence$Type} from "packages/net/minecraft/util/$FormattedCharSequence"
import {$Font, $Font$Type} from "packages/net/minecraft/client/gui/$Font"
import {$MultiBufferSource$BufferSource, $MultiBufferSource$BufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource$BufferSource"
import {$Matrix4f, $Matrix4f$Type} from "packages/org/joml/$Matrix4f"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$ClientTooltipComponent, $ClientTooltipComponent$Type} from "packages/net/minecraft/client/gui/screens/inventory/tooltip/$ClientTooltipComponent"
import {$BannerPatternTooltip, $BannerPatternTooltip$Type} from "packages/net/mehvahdjukaar/supplementaries/common/items/tooltip_components/$BannerPatternTooltip"

export class $BannerPatternTooltipComponent implements $ClientTooltipComponent {

constructor(tooltip: $BannerPatternTooltip$Type)

public "getWidth"(pFont: $Font$Type): integer
public "getHeight"(): integer
public "renderImage"(pFont: $Font$Type, x: integer, y: integer, graphics: $GuiGraphics$Type): void
public static "create"(arg0: $TooltipComponent$Type): $ClientTooltipComponent
public "renderText"(arg0: $Font$Type, arg1: integer, arg2: integer, arg3: $Matrix4f$Type, arg4: $MultiBufferSource$BufferSource$Type): void
public static "create"(arg0: $FormattedCharSequence$Type): $ClientTooltipComponent
get "height"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BannerPatternTooltipComponent$Type = ($BannerPatternTooltipComponent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BannerPatternTooltipComponent_ = $BannerPatternTooltipComponent$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/core/mixins/accessor/$BrainAccessor" {
import {$Behavior, $Behavior$Type} from "packages/net/minecraft/world/entity/ai/behavior/$Behavior"
import {$SensorType, $SensorType$Type} from "packages/net/minecraft/world/entity/ai/sensing/$SensorType"
import {$Sensor, $Sensor$Type} from "packages/net/minecraft/world/entity/ai/sensing/$Sensor"
import {$Activity, $Activity$Type} from "packages/net/minecraft/world/entity/schedule/$Activity"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export interface $BrainAccessor<E extends $LivingEntity> {

 "getAvailableBehaviorsByPriority"(): $Map<(integer), ($Map<($Activity), ($Set<($Behavior<(any)>)>)>)>
 "getSensors"(): $Map<($SensorType<(any)>), ($Sensor<(any)>)>
}

export namespace $BrainAccessor {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BrainAccessor$Type<E> = ($BrainAccessor<(E)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BrainAccessor_<E> = $BrainAccessor$Type<(E)>;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/renderers/tiles/$ClockBlockTileRenderer" {
import {$BlockEntityRendererProvider$Context, $BlockEntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/blockentity/$BlockEntityRendererProvider$Context"
import {$ClockBlockTile, $ClockBlockTile$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$ClockBlockTile"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$ModelPart, $ModelPart$Type} from "packages/net/minecraft/client/model/geom/$ModelPart"
import {$LayerDefinition, $LayerDefinition$Type} from "packages/net/minecraft/client/model/geom/builders/$LayerDefinition"
import {$BlockEntityRenderer, $BlockEntityRenderer$Type} from "packages/net/minecraft/client/renderer/blockentity/$BlockEntityRenderer"

export class $ClockBlockTileRenderer implements $BlockEntityRenderer<($ClockBlockTile)> {
readonly "hourHand": $ModelPart
readonly "minuteHand": $ModelPart

constructor(context: $BlockEntityRendererProvider$Context$Type)

public "render"(tile: $ClockBlockTile$Type, partialTicks: float, poseStack: $PoseStack$Type, bufferIn: $MultiBufferSource$Type, combinedLightIn: integer, combinedOverlayIn: integer): void
public static "createMesh"(): $LayerDefinition
public "shouldRender"(arg0: $ClockBlockTile$Type, arg1: $Vec3$Type): boolean
public "shouldRenderOffScreen"(arg0: $ClockBlockTile$Type): boolean
public "getViewDistance"(): integer
get "viewDistance"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClockBlockTileRenderer$Type = ($ClockBlockTileRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClockBlockTileRenderer_ = $ClockBlockTileRenderer$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/items/crafting/$FlagFromBannerRecipe" {
import {$RegistryAccess, $RegistryAccess$Type} from "packages/net/minecraft/core/$RegistryAccess"
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$RecipeSerializer, $RecipeSerializer$Type} from "packages/net/minecraft/world/item/crafting/$RecipeSerializer"
import {$CustomRecipe, $CustomRecipe$Type} from "packages/net/minecraft/world/item/crafting/$CustomRecipe"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$CraftingContainer, $CraftingContainer$Type} from "packages/net/minecraft/world/inventory/$CraftingContainer"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$CraftingBookCategory, $CraftingBookCategory$Type} from "packages/net/minecraft/world/item/crafting/$CraftingBookCategory"

export class $FlagFromBannerRecipe extends $CustomRecipe {

constructor(idIn: $ResourceLocation$Type, category: $CraftingBookCategory$Type)

public "matches"(inv: $CraftingContainer$Type, world: $Level$Type): boolean
public "getRemainingItems"(inv: $CraftingContainer$Type): $NonNullList<($ItemStack)>
public "canCraftInDimensions"(width: integer, height: integer): boolean
public "getSerializer"(): $RecipeSerializer<(any)>
public "assemble"(inv: $CraftingContainer$Type, access: $RegistryAccess$Type): $ItemStack
get "serializer"(): $RecipeSerializer<(any)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FlagFromBannerRecipe$Type = ($FlagFromBannerRecipe);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FlagFromBannerRecipe_ = $FlagFromBannerRecipe$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/common/tile/$HangingSignTileExtension" {
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$ModBlockProperties$PostType, $ModBlockProperties$PostType$Type} from "packages/net/mehvahdjukaar/amendments/reg/$ModBlockProperties$PostType"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$SwingAnimation, $SwingAnimation$Type} from "packages/net/mehvahdjukaar/amendments/common/$SwingAnimation"

export class $HangingSignTileExtension {

constructor(state: $BlockState$Type)

public "load"(tag: $CompoundTag$Type): void
public "getLeftAttachment"(): $ModBlockProperties$PostType
public "getRightAttachment"(): $ModBlockProperties$PostType
public "clientTick"(level: $Level$Type, pos: $BlockPos$Type, state: $BlockState$Type): void
public "saveAdditional"(tag: $CompoundTag$Type): void
public "getClientAnimation"(): $SwingAnimation
public "getFrontItem"(): $ItemStack
public "updateAttachments"(level: $Level$Type, pos: $BlockPos$Type, state: $BlockState$Type): void
public "canSwing"(): boolean
public "getBackItem"(): $ItemStack
public "updateShape"(state: $BlockState$Type, direction: $Direction$Type, neighborState: $BlockState$Type, level: $LevelAccessor$Type, pos: $BlockPos$Type, neighborPos: $BlockPos$Type): void
public "setBackItem"(backItem: $ItemStack$Type): void
public "setFrontItem"(frontItem: $ItemStack$Type): void
get "leftAttachment"(): $ModBlockProperties$PostType
get "rightAttachment"(): $ModBlockProperties$PostType
get "clientAnimation"(): $SwingAnimation
get "frontItem"(): $ItemStack
get "backItem"(): $ItemStack
set "backItem"(value: $ItemStack$Type)
set "frontItem"(value: $ItemStack$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $HangingSignTileExtension$Type = ($HangingSignTileExtension);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $HangingSignTileExtension_ = $HangingSignTileExtension$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/client/model/$HangingPotBakedModel" {
import {$ModelData, $ModelData$Type} from "packages/net/minecraftforge/client/model/data/$ModelData"
import {$ModelState, $ModelState$Type} from "packages/net/minecraft/client/resources/model/$ModelState"
import {$ItemTransforms, $ItemTransforms$Type} from "packages/net/minecraft/client/renderer/block/model/$ItemTransforms"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$ExtraModelData, $ExtraModelData$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$ExtraModelData"
import {$CustomBakedModel, $CustomBakedModel$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$CustomBakedModel"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BakedModel, $BakedModel$Type} from "packages/net/minecraft/client/resources/model/$BakedModel"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$RenderType, $RenderType$Type} from "packages/net/minecraft/client/renderer/$RenderType"
import {$ItemOverrides, $ItemOverrides$Type} from "packages/net/minecraft/client/renderer/block/model/$ItemOverrides"
import {$ItemDisplayContext, $ItemDisplayContext$Type} from "packages/net/minecraft/world/item/$ItemDisplayContext"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$List, $List$Type} from "packages/java/util/$List"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$ChunkRenderTypeSet, $ChunkRenderTypeSet$Type} from "packages/net/minecraftforge/client/$ChunkRenderTypeSet"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockAndTintGetter, $BlockAndTintGetter$Type} from "packages/net/minecraft/world/level/$BlockAndTintGetter"
import {$BakedQuad, $BakedQuad$Type} from "packages/net/minecraft/client/renderer/block/model/$BakedQuad"
import {$TextureAtlasSprite, $TextureAtlasSprite$Type} from "packages/net/minecraft/client/renderer/texture/$TextureAtlasSprite"

export class $HangingPotBakedModel implements $CustomBakedModel {

constructor(rope: $BakedModel$Type, state: $ModelState$Type)

public "usesBlockLight"(): boolean
public "isGui3d"(): boolean
public "getBlockQuads"(state: $BlockState$Type, side: $Direction$Type, rand: $RandomSource$Type, renderType: $RenderType$Type, data: $ExtraModelData$Type): $List<($BakedQuad)>
public "getBlockParticle"(data: $ExtraModelData$Type): $TextureAtlasSprite
public "isCustomRenderer"(): boolean
public "getOverrides"(): $ItemOverrides
public "getTransforms"(): $ItemTransforms
public "useAmbientOcclusion"(): boolean
public "getParticleIcon"(): $TextureAtlasSprite
public "getQuads"(state: $BlockState$Type, side: $Direction$Type, rand: $RandomSource$Type): $List<(any)>
public "getQuads"(state: $BlockState$Type, side: $Direction$Type, rand: $RandomSource$Type, modelData: $ModelData$Type, type: $RenderType$Type): $List<(any)>
public "getParticleIcon"(data: $ModelData$Type): $TextureAtlasSprite
public "getModelData"(level: $BlockAndTintGetter$Type, pos: $BlockPos$Type, state: $BlockState$Type, modelData: $ModelData$Type): $ModelData
public "getModelData"(originalData: $ExtraModelData$Type, stack: $ItemStack$Type): $ExtraModelData
public "getModelData"(tileData: $ExtraModelData$Type, pos: $BlockPos$Type, state: $BlockState$Type, level: $BlockAndTintGetter$Type): $ExtraModelData
public "useAmbientOcclusion"(arg0: $BlockState$Type, arg1: $RenderType$Type): boolean
public "useAmbientOcclusion"(arg0: $BlockState$Type): boolean
public "getRenderTypes"(arg0: $ItemStack$Type, arg1: boolean): $List<($RenderType)>
public "getRenderTypes"(arg0: $BlockState$Type, arg1: $RandomSource$Type, arg2: $ModelData$Type): $ChunkRenderTypeSet
public "getRenderPasses"(arg0: $ItemStack$Type, arg1: boolean): $List<($BakedModel)>
public "applyTransform"(arg0: $ItemDisplayContext$Type, arg1: $PoseStack$Type, arg2: boolean): $BakedModel
public "useAmbientOcclusionWithLightEmission"(arg0: $BlockState$Type, arg1: $RenderType$Type): boolean
get "gui3d"(): boolean
get "customRenderer"(): boolean
get "overrides"(): $ItemOverrides
get "transforms"(): $ItemTransforms
get "particleIcon"(): $TextureAtlasSprite
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $HangingPotBakedModel$Type = ($HangingPotBakedModel);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $HangingPotBakedModel_ = $HangingPotBakedModel$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/fluids/$SoftFluid$Builder" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$Fluid, $Fluid$Type} from "packages/net/minecraft/world/level/material/$Fluid"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$FluidContainerList, $FluidContainerList$Type} from "packages/net/mehvahdjukaar/moonlight/api/fluids/$FluidContainerList"
import {$FoodProvider, $FoodProvider$Type} from "packages/net/mehvahdjukaar/moonlight/api/fluids/$FoodProvider"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$SoftFluid, $SoftFluid$Type} from "packages/net/mehvahdjukaar/moonlight/api/fluids/$SoftFluid"
import {$SoftFluid$TintMethod, $SoftFluid$TintMethod$Type} from "packages/net/mehvahdjukaar/moonlight/api/fluids/$SoftFluid$TintMethod"

export class $SoftFluid$Builder {

constructor(stillTexture: $ResourceLocation$Type, flowingTexture: $ResourceLocation$Type)
constructor(fluid: $Fluid$Type)

public "color"(tintColor: integer): $SoftFluid$Builder
public "build"(): $SoftFluid
public "containerItem"(filledItem: $Item$Type, emptyItem: $Item$Type, itemCapacity: integer): $SoftFluid$Builder
public "containerItem"(filledItem: $Item$Type, emptyItem: $Item$Type, itemCapacity: integer, fillSound: $SoundEvent$Type, emptySound: $SoundEvent$Type): $SoftFluid$Builder
public "tinted"(): $SoftFluid$Builder
public "onlyFlowingTinted"(): $SoftFluid$Builder
public "addEqFluid"(fluid: $Fluid$Type): $SoftFluid$Builder
public "noTint"(): $SoftFluid$Builder
public "stew"(item: $Item$Type): $SoftFluid$Builder
public "translation"(component: $Component$Type): $SoftFluid$Builder
public "food"(item: $Item$Type): $SoftFluid$Builder
public "food"(item: $Item$Type, foodDivider: integer): $SoftFluid$Builder
public "food"(foodProvider: $FoodProvider$Type): $SoftFluid$Builder
public "emptyHandContainerItem"(filledItem: $Item$Type, itemCapacity: integer): $SoftFluid$Builder
public "containers"(containerList: $FluidContainerList$Type): $SoftFluid$Builder
public "bucket"(item: $Item$Type): $SoftFluid$Builder
public "textures"(still: $ResourceLocation$Type, flow: $ResourceLocation$Type): $SoftFluid$Builder
public "luminosity"(luminosity: integer): $SoftFluid$Builder
public "tintMethod"(tint: $SoftFluid$TintMethod$Type): $SoftFluid$Builder
public "emissivity"(emissivity: integer): $SoftFluid$Builder
public "copyTexturesFrom"(fluidRes: string): $SoftFluid$Builder
public "copyTexturesFrom"(fluidRes: $ResourceLocation$Type): $SoftFluid$Builder
public "keepNBTFromItem"(...NBTkey: (string)[]): $SoftFluid$Builder
/**
 * 
 * @deprecated
 */
public "fromMod"(s: string): $SoftFluid$Builder
/**
 * 
 * @deprecated
 */
public "translationKey"(translationKey: string): $SoftFluid$Builder
public "bowl"(item: $Item$Type): $SoftFluid$Builder
public "bottle"(item: $Item$Type): $SoftFluid$Builder
public "drink"(item: $Item$Type): $SoftFluid$Builder
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SoftFluid$Builder$Type = ($SoftFluid$Builder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SoftFluid$Builder_ = $SoftFluid$Builder$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/blocks/$NetheriteTrapdoorBlock" {
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$Fluid, $Fluid$Type} from "packages/net/minecraft/world/level/material/$Fluid"
import {$EntityBlock, $EntityBlock$Type} from "packages/net/minecraft/world/level/block/$EntityBlock"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$ILavaAndWaterLoggable, $ILavaAndWaterLoggable$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/$ILavaAndWaterLoggable"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$TrapDoorBlock, $TrapDoorBlock$Type} from "packages/net/minecraft/world/level/block/$TrapDoorBlock"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$FluidState, $FluidState$Type} from "packages/net/minecraft/world/level/material/$FluidState"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$List, $List$Type} from "packages/java/util/$List"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"
import {$DirectionProperty, $DirectionProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$DirectionProperty"
import {$Half, $Half$Type} from "packages/net/minecraft/world/level/block/state/properties/$Half"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$EnumProperty, $EnumProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$EnumProperty"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$SoundType, $SoundType$Type} from "packages/net/minecraft/world/level/block/$SoundType"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$BlockEntityTicker, $BlockEntityTicker$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityTicker"
import {$GameEventListener, $GameEventListener$Type} from "packages/net/minecraft/world/level/gameevent/$GameEventListener"
import {$BlockSetType, $BlockSetType$Type} from "packages/net/minecraft/world/level/block/state/properties/$BlockSetType"

export class $NetheriteTrapdoorBlock extends $TrapDoorBlock implements $ILavaAndWaterLoggable, $EntityBlock {
static readonly "LAVALOGGED": $BooleanProperty
static readonly "OPEN": $BooleanProperty
static readonly "HALF": $EnumProperty<($Half)>
static readonly "POWERED": $BooleanProperty
static readonly "WATERLOGGED": $BooleanProperty
readonly "type": $BlockSetType
static readonly "FACING": $DirectionProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(properties: $BlockBehaviour$Properties$Type)

public "takeLiquid"(p_204508_1_: $LevelAccessor$Type, p_204508_2_: $BlockPos$Type, p_204508_3_: $BlockState$Type): $Fluid
public "getStateForPlacement"(context: $BlockPlaceContext$Type): $BlockState
public "appendHoverText"(stack: $ItemStack$Type, worldIn: $BlockGetter$Type, tooltip: $List$Type<($Component$Type)>, flagIn: $TooltipFlag$Type): void
public "getSoundType"(state: $BlockState$Type): $SoundType
public "neighborChanged"(state: $BlockState$Type, worldIn: $Level$Type, pos: $BlockPos$Type, blockIn: $Block$Type, fromPos: $BlockPos$Type, isMoving: boolean): void
public "updateShape"(pState: $BlockState$Type, direction: $Direction$Type, pFacingState: $BlockState$Type, pLevel: $LevelAccessor$Type, pCurrentPos: $BlockPos$Type, pFacingPos: $BlockPos$Type): $BlockState
public "use"(state: $BlockState$Type, worldIn: $Level$Type, pos: $BlockPos$Type, player: $Player$Type, handIn: $InteractionHand$Type, hit: $BlockHitResult$Type): $InteractionResult
public "getFluidState"(state: $BlockState$Type): $FluidState
public "getPickupSound"(): $Optional<($SoundEvent)>
public "canPlaceLiquid"(p_204510_1_: $BlockGetter$Type, p_204510_2_: $BlockPos$Type, p_204510_3_: $BlockState$Type, p_204510_4_: $Fluid$Type): boolean
public "placeLiquid"(p_204509_1_: $LevelAccessor$Type, p_204509_2_: $BlockPos$Type, p_204509_3_: $BlockState$Type, p_204509_4_: $FluidState$Type): boolean
public "pickupBlock"(pLevel: $LevelAccessor$Type, pPos: $BlockPos$Type, pState: $BlockState$Type): $ItemStack
public "newBlockEntity"(pPos: $BlockPos$Type, pState: $BlockState$Type): $BlockEntity
public "getTicker"<T extends $BlockEntity>(arg0: $Level$Type, arg1: $BlockState$Type, arg2: $BlockEntityType$Type<(T)>): $BlockEntityTicker<(T)>
public "getListener"<T extends $BlockEntity>(arg0: $ServerLevel$Type, arg1: T): $GameEventListener
get "pickupSound"(): $Optional<($SoundEvent)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $NetheriteTrapdoorBlock$Type = ($NetheriteTrapdoorBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $NetheriteTrapdoorBlock_ = $NetheriteTrapdoorBlock$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/common/tile/$CarpetedBlockTile" {
import {$MimicBlockTile, $MimicBlockTile$Type} from "packages/net/mehvahdjukaar/moonlight/api/block/$MimicBlockTile"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$SoundType, $SoundType$Type} from "packages/net/minecraft/world/level/block/$SoundType"
import {$ModelDataKey, $ModelDataKey$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$ModelDataKey"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$ExtraModelData$Builder, $ExtraModelData$Builder$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$ExtraModelData$Builder"

export class $CarpetedBlockTile extends $MimicBlockTile {
static readonly "CARPET_KEY": $ModelDataKey<($BlockState)>
static readonly "MIMIC_KEY": $ModelDataKey<($BlockState)>
 "blockState": $BlockState

constructor(pos: $BlockPos$Type, state: $BlockState$Type)

public "initialize"(stairs: $BlockState$Type, carpet: $BlockState$Type): void
public "getSoundType"(): $SoundType
public "setCarpet"(carpet: $BlockState$Type): void
public "getHeldBlock"(index: integer): $BlockState
public "load"(compound: $CompoundTag$Type): void
public "m_183515_"(tag: $CompoundTag$Type): void
public "getCarpet"(): $BlockState
public "addExtraModelData"(builder: $ExtraModelData$Builder$Type): void
public "setHeldBlock"(state: $BlockState$Type, index: integer): boolean
get "soundType"(): $SoundType
set "carpet"(value: $BlockState$Type)
get "carpet"(): $BlockState
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CarpetedBlockTile$Type = ($CarpetedBlockTile);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CarpetedBlockTile_ = $CarpetedBlockTile$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/items/tooltip_components/$QuiverTooltip" {
import {$TooltipComponent, $TooltipComponent$Type} from "packages/net/minecraft/world/inventory/tooltip/$TooltipComponent"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export class $QuiverTooltip extends $Record implements $TooltipComponent {

constructor(stacks: $List$Type<($ItemStack$Type)>, selected: integer)

public "equals"(o: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "selected"(): integer
public "stacks"(): $List<($ItemStack)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $QuiverTooltip$Type = ($QuiverTooltip);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $QuiverTooltip_ = $QuiverTooltip$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/utils/$ItemsUtil" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$ClickAction, $ClickAction$Type} from "packages/net/minecraft/world/inventory/$ClickAction"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$IKeyLockable$KeyStatus, $IKeyLockable$KeyStatus$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/$IKeyLockable$KeyStatus"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$SoundType, $SoundType$Type} from "packages/net/minecraft/world/level/block/$SoundType"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"

export class $ItemsUtil {

constructor()

public static "addToContainerItem"(player: $Player$Type, containerStack: $ItemStack$Type, stack: $ItemStack$Type, slot: $Slot$Type, simulate: boolean, inSlot: boolean): boolean
public static "loadBlockEntityFromItem"(tag: $CompoundTag$Type, item: $Item$Type): $BlockEntity
public static "place"(item: $Item$Type, pContext: $BlockPlaceContext$Type): $InteractionResult
public static "place"(context: $BlockPlaceContext$Type, blockToPlace: $Block$Type, placeSound: $SoundType$Type): $InteractionResult
public static "place"(context: $BlockPlaceContext$Type, blockToPlace: $Block$Type): $InteractionResult
public static "tryInteractingWithContainerItem"(containerStack: $ItemStack$Type, incoming: $ItemStack$Type, slot: $Slot$Type, action: $ClickAction$Type, player: $Player$Type, inSlot: boolean): boolean
public static "getEncumbermentFromInventory"(stack: $ItemStack$Type, player: $ServerPlayer$Type): float
public static "tryAddingItem"(stack: $ItemStack$Type, level: $Level$Type, direction: $Direction$Type, container: any): $ItemStack
public static "tryExtractingItem"(level: $Level$Type, dir: $Direction$Type, container: any): $ItemStack
public static "addStackToExisting"(player: $Player$Type, stack: $ItemStack$Type, avoidHands: boolean): void
public static "getPlacementState"(context: $BlockPlaceContext$Type, block: $Block$Type): $BlockState
public static "hasKeyInInventory"(player: $Player$Type, key: string): $IKeyLockable$KeyStatus
public static "extractFromContainerItemIntoSlot"(player: $Player$Type, containerStack: $ItemStack$Type, slot: $Slot$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ItemsUtil$Type = ($ItemsUtil);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ItemsUtil_ = $ItemsUtil$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/items/$FluteItem" {
import {$HeadedModel, $HeadedModel$Type} from "packages/net/minecraft/client/model/$HeadedModel"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$IFirstPersonAnimationProvider, $IFirstPersonAnimationProvider$Type} from "packages/net/mehvahdjukaar/moonlight/api/item/$IFirstPersonAnimationProvider"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$List, $List$Type} from "packages/java/util/$List"
import {$IThirdPersonSpecialItemRenderer, $IThirdPersonSpecialItemRenderer$Type} from "packages/net/mehvahdjukaar/moonlight/api/item/$IThirdPersonSpecialItemRenderer"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$HumanoidArm, $HumanoidArm$Type} from "packages/net/minecraft/world/entity/$HumanoidArm"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$HumanoidModel, $HumanoidModel$Type} from "packages/net/minecraft/client/model/$HumanoidModel"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$InteractionResultHolder, $InteractionResultHolder$Type} from "packages/net/minecraft/world/$InteractionResultHolder"
import {$InstrumentItem, $InstrumentItem$Type} from "packages/net/mehvahdjukaar/supplementaries/common/items/$InstrumentItem"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$ArmedModel, $ArmedModel$Type} from "packages/net/minecraft/client/model/$ArmedModel"
import {$EntityModel, $EntityModel$Type} from "packages/net/minecraft/client/model/$EntityModel"
import {$IThirdPersonAnimationProvider, $IThirdPersonAnimationProvider$Type} from "packages/net/mehvahdjukaar/moonlight/api/item/$IThirdPersonAnimationProvider"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $FluteItem extends $InstrumentItem implements $IThirdPersonAnimationProvider, $IThirdPersonSpecialItemRenderer, $IFirstPersonAnimationProvider {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(properties: $Item$Properties$Type)

public "spawnNoteParticle"(level: $Level$Type, entity: $LivingEntity$Type, note: integer): void
public static "getMaxHeadXRot"(xRot: float): float
public "use"(level: $Level$Type, player: $Player$Type, handIn: $InteractionHand$Type): $InteractionResultHolder<($ItemStack)>
public "releaseUsing"(pStack: $ItemStack$Type, pLevel: $Level$Type, entity: $LivingEntity$Type, pTimeCharged: integer): void
public "isFoil"(pStack: $ItemStack$Type): boolean
public "appendHoverText"(stack: $ItemStack$Type, worldIn: $Level$Type, tooltip: $List$Type<($Component$Type)>, flagIn: $TooltipFlag$Type): void
public "isValidRepairItem"(pStack: $ItemStack$Type, pRepairCandidate: $ItemStack$Type): boolean
public "animateItemFirstPerson"(entity: $LivingEntity$Type, stack: $ItemStack$Type, hand: $InteractionHand$Type, matrixStack: $PoseStack$Type, partialTicks: float, pitch: float, attackAnim: float, handHeight: float): void
public "renderThirdPersonItem"<T extends $Player, M extends ($EntityModel<(T)>) & ($ArmedModel) & ($HeadedModel)>(parentModel: M, entity: $LivingEntity$Type, stack: $ItemStack$Type, humanoidArm: $HumanoidArm$Type, poseStack: $PoseStack$Type, bufferSource: $MultiBufferSource$Type, light: integer): void
public "isTwoHanded"(): boolean
public "poseLeftArm"<T extends $LivingEntity>(stack: $ItemStack$Type, model: $HumanoidModel$Type<(T)>, entity: T, mainHand: $HumanoidArm$Type): boolean
public "poseRightArm"<T extends $LivingEntity>(stack: $ItemStack$Type, model: $HumanoidModel$Type<(T)>, entity: T, mainHand: $HumanoidArm$Type): boolean
public static "interactWithPet"(stack: $ItemStack$Type, player: $Player$Type, target: $Entity$Type, hand: $InteractionHand$Type): boolean
public static "get"(target: $Item$Type): $IThirdPersonAnimationProvider
public static "attachToItem"(target: $Item$Type, object: $IThirdPersonAnimationProvider$Type): void
public static "attachToItem"(target: $Item$Type, object: $IThirdPersonSpecialItemRenderer$Type): void
public static "attachToItem"(target: $Item$Type, object: $IFirstPersonAnimationProvider$Type): void
public "animateItemFirstPerson"(entity: $Player$Type, stack: $ItemStack$Type, hand: $InteractionHand$Type, arm: $HumanoidArm$Type, poseStack: $PoseStack$Type, partialTicks: float, pitch: float, attackAnim: float, handHeight: float): void
get "twoHanded"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FluteItem$Type = ($FluteItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FluteItem_ = $FluteItem$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/resources/pack/$DynClientResourcesGenerator" {
import {$DynamicResourcePack, $DynamicResourcePack$Type} from "packages/net/mehvahdjukaar/moonlight/api/resources/pack/$DynamicResourcePack"
import {$TextureImage, $TextureImage$Type} from "packages/net/mehvahdjukaar/moonlight/api/resources/textures/$TextureImage"
import {$DynResourceGenerator, $DynResourceGenerator$Type} from "packages/net/mehvahdjukaar/moonlight/api/resources/pack/$DynResourceGenerator"
import {$DynamicTexturePack, $DynamicTexturePack$Type} from "packages/net/mehvahdjukaar/moonlight/api/resources/pack/$DynamicTexturePack"
import {$AfterLanguageLoadEvent, $AfterLanguageLoadEvent$Type} from "packages/net/mehvahdjukaar/moonlight/api/events/$AfterLanguageLoadEvent"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$ResourceManager, $ResourceManager$Type} from "packages/net/minecraft/server/packs/resources/$ResourceManager"

export class $DynClientResourcesGenerator extends $DynResourceGenerator<($DynamicTexturePack)> {
readonly "dynamicPack": T


public "register"(): void
public "addDynamicTranslations"(languageEvent: $AfterLanguageLoadEvent$Type): void
public "alreadyHasTextureAtLocation"(manager: $ResourceManager$Type, res: $ResourceLocation$Type): boolean
public "addTextureIfNotPresent"(manager: $ResourceManager$Type, relativePath: string, textureSupplier: $Supplier$Type<($TextureImage$Type)>): void
public "addTextureIfNotPresent"(manager: $ResourceManager$Type, relativePath: string, textureSupplier: $Supplier$Type<($TextureImage$Type)>, isOnAtlas: boolean): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DynClientResourcesGenerator$Type = ($DynClientResourcesGenerator);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DynClientResourcesGenerator_ = $DynClientResourcesGenerator$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/integration/forge/$AlexCavesCompatImpl" {
import {$DataObjectReference, $DataObjectReference$Type} from "packages/net/mehvahdjukaar/moonlight/api/misc/$DataObjectReference"
import {$SoftFluidStack, $SoftFluidStack$Type} from "packages/net/mehvahdjukaar/moonlight/api/fluids/$SoftFluidStack"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$Method, $Method$Type} from "packages/java/lang/reflect/$Method"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$SoftFluid, $SoftFluid$Type} from "packages/net/mehvahdjukaar/moonlight/api/fluids/$SoftFluid"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $AlexCavesCompatImpl {
static "ACID": $DataObjectReference<($SoftFluid)>
static readonly "SET_H": $Method

constructor()

public static "acidDamage"(fluid: $SoftFluidStack$Type, level: $Level$Type, pos: $BlockPos$Type, state: $BlockState$Type, entity: $Entity$Type): void
public static "acidParticles"(fluid: $SoftFluidStack$Type, level: $Level$Type, pos: $BlockPos$Type, rand: $RandomSource$Type, height: double): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AlexCavesCompatImpl$Type = ($AlexCavesCompatImpl);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AlexCavesCompatImpl_ = $AlexCavesCompatImpl$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/items/$AbstractMobContainerItem" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$UseOnContext, $UseOnContext$Type} from "packages/net/minecraft/world/item/context/$UseOnContext"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$BlockItem, $BlockItem$Type} from "packages/net/minecraft/world/item/$BlockItem"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$List, $List$Type} from "packages/java/util/$List"
import {$AdditionalItemPlacement, $AdditionalItemPlacement$Type} from "packages/net/mehvahdjukaar/moonlight/api/item/additional_placements/$AdditionalItemPlacement"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $AbstractMobContainerItem extends $BlockItem {
static readonly "BLOCK_ENTITY_TAG": string
static readonly "BLOCK_STATE_TAG": string
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any


public "isFull"(stack: $ItemStack$Type): boolean
public "canItemCatch"(arg0: $Entity$Type): boolean
public "saveEntityInItem"(entity: $Entity$Type, currentStack: $ItemStack$Type, bucketStack: $ItemStack$Type): $ItemStack
public "isAquarium"(): boolean
public "playReleaseSound"(world: $Level$Type, v: $Vec3$Type): void
public "playCatchSound"(player: $Player$Type): void
public "playFailSound"(player: $Player$Type): void
public "blocksPlacement"(): boolean
public "getMobContainerHeight"(): float
public "getMobContainerWidth"(): float
public "addPlacementTooltip"(tooltip: $List$Type<($Component$Type)>): void
public "useOn"(context: $UseOnContext$Type): $InteractionResult
public "appendHoverText"(stack: $ItemStack$Type, worldIn: $Level$Type, tooltip: $List$Type<($Component$Type)>, flagIn: $TooltipFlag$Type): void
public "canFitInsideContainerItems"(): boolean
public "onLeftClickEntity"(stack: $ItemStack$Type, player: $Player$Type, entity: $Entity$Type): boolean
public "place"(context: $BlockPlaceContext$Type): $InteractionResult
public "getMaxStackSize"(stack: $ItemStack$Type): integer
public "doInteract"(stack: $ItemStack$Type, player: $Player$Type, entity: $Entity$Type, hand: $InteractionHand$Type): $InteractionResult
public "moonlight$addAdditionalBehavior"(arg0: $AdditionalItemPlacement$Type): void
public "moonlight$getAdditionalBehavior"(): $AdditionalItemPlacement
public "moonlight$getClientAnimationExtension"(): any
public "moonlight$setClientAnimationExtension"(arg0: any): void
get "aquarium"(): boolean
get "mobContainerHeight"(): float
get "mobContainerWidth"(): float
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AbstractMobContainerItem$Type = ($AbstractMobContainerItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AbstractMobContainerItem_ = $AbstractMobContainerItem$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/faucet/$FaucetTarget$Tile" {
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$FaucetTarget, $FaucetTarget$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/faucet/$FaucetTarget"
import {$SoftFluidStack, $SoftFluidStack$Type} from "packages/net/mehvahdjukaar/moonlight/api/fluids/$SoftFluidStack"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export interface $FaucetTarget$Tile extends $FaucetTarget<($BlockEntity)> {

 "fill"(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $BlockEntity$Type, arg3: $SoftFluidStack$Type, arg4: integer): integer

(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $BlockEntity$Type, arg3: $SoftFluidStack$Type, arg4: integer): integer
}

export namespace $FaucetTarget$Tile {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FaucetTarget$Tile$Type = ($FaucetTarget$Tile);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FaucetTarget$Tile_ = $FaucetTarget$Tile$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/particles/$SpeakerSoundParticle" {
import {$ParticleRenderType, $ParticleRenderType$Type} from "packages/net/minecraft/client/particle/$ParticleRenderType"
import {$TextureSheetParticle, $TextureSheetParticle$Type} from "packages/net/minecraft/client/particle/$TextureSheetParticle"

export class $SpeakerSoundParticle extends $TextureSheetParticle {
 "x": double
 "y": double
 "z": double
 "xd": double
 "yd": double
 "zd": double
 "age": integer
 "rCol": float
 "gCol": float
 "bCol": float


public "getQuadSize"(scaleFactor: float): float
public "getRenderType"(): $ParticleRenderType
public "tick"(): void
get "renderType"(): $ParticleRenderType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SpeakerSoundParticle$Type = ($SpeakerSoundParticle);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SpeakerSoundParticle_ = $SpeakerSoundParticle$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/entities/trades/$StructureMapListing" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$HolderSet, $HolderSet$Type} from "packages/net/minecraft/core/$HolderSet"
import {$MerchantOffer, $MerchantOffer$Type} from "packages/net/minecraft/world/item/trading/$MerchantOffer"
import {$ModItemListing, $ModItemListing$Type} from "packages/net/mehvahdjukaar/moonlight/api/trades/$ModItemListing"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$Structure, $Structure$Type} from "packages/net/minecraft/world/level/levelgen/structure/$Structure"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Codec, $Codec$Type} from "packages/com/mojang/serialization/$Codec"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $StructureMapListing extends $Record implements $ModItemListing {
static readonly "CODEC": $Codec<($StructureMapListing)>

constructor(cost: $Item$Type, minPrice: integer, maxPrice: integer, cost2: $ItemStack$Type, structure: $HolderSet$Type<($Structure$Type)>, maxTrades: integer, priceMult: float, level: integer, mapName: string, mapColor: integer, mapMarker: $ResourceLocation$Type)

public "equals"(o: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "level"(): integer
public "getLevel"(): integer
public "priceMult"(): float
public "maxTrades"(): integer
public "mapMarker"(): $ResourceLocation
public "cost2"(): $ItemStack
public "mapName"(): string
public "cost"(): $Item
public "structure"(): $HolderSet<($Structure)>
public "getOffer"(entity: $Entity$Type, random: $RandomSource$Type): $MerchantOffer
public "minPrice"(): integer
public "maxPrice"(): integer
public "getCodec"(): $Codec<(any)>
public "mapColor"(): integer
public "isValid"(): boolean
public static "defaultXp"(buying: boolean, villagerLevel: integer): integer
get "codec"(): $Codec<(any)>
get "valid"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $StructureMapListing$Type = ($StructureMapListing);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $StructureMapListing_ = $StructureMapListing$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/client/util/$LOD" {
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$Camera, $Camera$Type} from "packages/net/minecraft/client/$Camera"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $LOD {
static readonly "MAX": $LOD
static readonly "BUFFER": integer
static readonly "VERY_NEAR_DIST": integer
static readonly "NEAR_DIST": integer
static readonly "NEAR_MED_DIST": integer
static readonly "MEDIUM_DIST": integer
static readonly "FAR_DIST": integer

constructor(cameraPos: $Vec3$Type, pos: $BlockPos$Type)
constructor(camera: $Camera$Type, pos: $BlockPos$Type)

public "isVeryNear"(): boolean
/**
 * 
 * @deprecated
 */
public static "isOutOfFocus"(cameraPos: $Vec3$Type, pos: $BlockPos$Type, blockYaw: float): boolean
/**
 * 
 * @deprecated
 */
public static "isOutOfFocus"(cameraPos: $Vec3$Type, pos: $BlockPos$Type, blockYaw: float, degMargin: float, dir: $Direction$Type, offset: float): boolean
/**
 * 
 * @deprecated
 */
public static "isOutOfFocus"(relativeAngle: float, blockYaw: float, degMargin: float): boolean
public "isNearMed"(): boolean
public static "getRelativeAngle"(cameraPos: $Vec3$Type, pos: $BlockPos$Type, dir: $Direction$Type, offset: float): float
public static "getRelativeAngle"(cameraPos: $Vec3$Type, pos: $BlockPos$Type): float
public "isNear"(): boolean
public static "isScoping"(): boolean
public "isMedium"(): boolean
public "isFar"(): boolean
get "veryNear"(): boolean
get "nearMed"(): boolean
get "near"(): boolean
get "scoping"(): boolean
get "medium"(): boolean
get "far"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LOD$Type = ($LOD);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LOD_ = $LOD$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/items/loot/$CurseLootFunction" {
import {$LootContext, $LootContext$Type} from "packages/net/minecraft/world/level/storage/loot/$LootContext"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$LootItemFunctionType, $LootItemFunctionType$Type} from "packages/net/minecraft/world/level/storage/loot/functions/$LootItemFunctionType"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$BiFunction, $BiFunction$Type} from "packages/java/util/function/$BiFunction"
import {$LootItemConditionalFunction, $LootItemConditionalFunction$Type} from "packages/net/minecraft/world/level/storage/loot/functions/$LootItemConditionalFunction"

export class $CurseLootFunction extends $LootItemConditionalFunction {


public static "setup"(): void
public "getType"(): $LootItemFunctionType
public "m_7372_"(pStack: $ItemStack$Type, pContext: $LootContext$Type): $ItemStack
public static "decorate"(arg0: $BiFunction$Type<($ItemStack$Type), ($LootContext$Type), ($ItemStack$Type)>, arg1: $Consumer$Type<($ItemStack$Type)>, arg2: $LootContext$Type): $Consumer<($ItemStack)>
get "type"(): $LootItemFunctionType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CurseLootFunction$Type = ($CurseLootFunction);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CurseLootFunction_ = $CurseLootFunction$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/client/anim/$SwingAnimation" {
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $SwingAnimation {


public "reset"(): void
public "tick"(arg0: boolean): void
public "hit"(arg0: $Vec3$Type, arg1: double): boolean
public "addPositiveImpulse"(arg0: float): void
public "getAngle"(arg0: float): float
public "addImpulse"(arg0: float): void
public "hitByEntity"(arg0: $Entity$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SwingAnimation$Type = ($SwingAnimation);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SwingAnimation_ = $SwingAnimation$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/particles/$SudsParticle" {
import {$BubbleBlockParticle, $BubbleBlockParticle$Type} from "packages/net/mehvahdjukaar/supplementaries/client/particles/$BubbleBlockParticle"

export class $SudsParticle extends $BubbleBlockParticle {
 "x": double
 "y": double
 "z": double
 "xd": double
 "yd": double
 "zd": double
 "age": integer
 "rCol": float
 "gCol": float
 "bCol": float


public "getQuadSize"(age: float): float
public "tick"(): void
public "updateSprite"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SudsParticle$Type = ($SudsParticle);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SudsParticle_ = $SudsParticle$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/misc/explosion/$GunpowderExplosion" {
import {$ExplosionDamageCalculator, $ExplosionDamageCalculator$Type} from "packages/net/minecraft/world/level/$ExplosionDamageCalculator"
import {$Explosion$BlockInteraction, $Explosion$BlockInteraction$Type} from "packages/net/minecraft/world/level/$Explosion$BlockInteraction"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$Explosion, $Explosion$Type} from "packages/net/minecraft/world/level/$Explosion"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$ObjectArrayList, $ObjectArrayList$Type} from "packages/it/unimi/dsi/fastutil/objects/$ObjectArrayList"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $GunpowderExplosion extends $Explosion {
readonly "fire": boolean
readonly "blockInteraction": $Explosion$BlockInteraction
readonly "level": $Level
readonly "x": double
readonly "y": double
readonly "z": double
 "source": $Entity
 "radius": float
 "damageSource": $DamageSource
readonly "damageCalculator": $ExplosionDamageCalculator

constructor(world: $Level$Type, entity: $Entity$Type, x: double, y: double, z: double, size: float)

public "finalizeExplosion"(spawnFire: boolean): void
public "explode"(): void
public static "igniteTntHack"(level: $Level$Type, blockpos: $BlockPos$Type, tnt: $Block$Type): void
public "getToBlow"(): $ObjectArrayList<($BlockPos)>
get "toBlow"(): $ObjectArrayList<($BlockPos)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GunpowderExplosion$Type = ($GunpowderExplosion);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GunpowderExplosion_ = $GunpowderExplosion$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/network/$ClientBoundSyncAmbientLightPacket" {
import {$RegistryAccess, $RegistryAccess$Type} from "packages/net/minecraft/core/$RegistryAccess"
import {$Message, $Message$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/network/$Message"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$ChannelHandler$Context, $ChannelHandler$Context$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/network/$ChannelHandler$Context"

export class $ClientBoundSyncAmbientLightPacket implements $Message {

constructor(registryAccess: $RegistryAccess$Type)
constructor(buf: $FriendlyByteBuf$Type)

public "handle"(context: $ChannelHandler$Context$Type): void
public "writeToBuffer"(buf: $FriendlyByteBuf$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientBoundSyncAmbientLightPacket$Type = ($ClientBoundSyncAmbientLightPacket);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientBoundSyncAmbientLightPacket_ = $ClientBoundSyncAmbientLightPacket$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/blocks/$LightUpWaterBlock" {
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$Fluid, $Fluid$Type} from "packages/net/minecraft/world/level/material/$Fluid"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$SimpleWaterloggedBlock, $SimpleWaterloggedBlock$Type} from "packages/net/minecraft/world/level/block/$SimpleWaterloggedBlock"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$FluidState, $FluidState$Type} from "packages/net/minecraft/world/level/material/$FluidState"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$LightUpBlock, $LightUpBlock$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/blocks/$LightUpBlock"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$ILightable$FireSourceType, $ILightable$FireSourceType$Type} from "packages/net/mehvahdjukaar/moonlight/api/block/$ILightable$FireSourceType"

export class $LightUpWaterBlock extends $LightUpBlock implements $SimpleWaterloggedBlock {
static readonly "WATERLOGGED": $BooleanProperty
static readonly "LIT": $BooleanProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation


public "getStateForPlacement"(context: $BlockPlaceContext$Type): $BlockState
public "updateShape"(stateIn: $BlockState$Type, facing: $Direction$Type, facingState: $BlockState$Type, worldIn: $LevelAccessor$Type, currentPos: $BlockPos$Type, facingPos: $BlockPos$Type): $BlockState
public "use"(state: $BlockState$Type, worldIn: $Level$Type, pos: $BlockPos$Type, player: $Player$Type, handIn: $InteractionHand$Type, hit: $BlockHitResult$Type): $InteractionResult
public "getFluidState"(state: $BlockState$Type): $FluidState
public "lightUp"(entity: $Entity$Type, state: $BlockState$Type, pos: $BlockPos$Type, world: $LevelAccessor$Type, fireSourceType: $ILightable$FireSourceType$Type): boolean
public "placeLiquid"(worldIn: $LevelAccessor$Type, pos: $BlockPos$Type, state: $BlockState$Type, fluidStateIn: $FluidState$Type): boolean
public "getPickupSound"(): $Optional<($SoundEvent)>
public "canPlaceLiquid"(arg0: $BlockGetter$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: $Fluid$Type): boolean
public "pickupBlock"(arg0: $LevelAccessor$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type): $ItemStack
public "getPickupSound"(arg0: $BlockState$Type): $Optional<($SoundEvent)>
get "pickupSound"(): $Optional<($SoundEvent)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LightUpWaterBlock$Type = ($LightUpWaterBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LightUpWaterBlock_ = $LightUpWaterBlock$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/faucet/$FaucetItemSource" {
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export interface $FaucetItemSource {

 "tryExtractItem"(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: $Direction$Type, arg4: $BlockEntity$Type): $ItemStack

(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: $Direction$Type, arg4: $BlockEntity$Type): $ItemStack
}

export namespace $FaucetItemSource {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FaucetItemSource$Type = ($FaucetItemSource);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FaucetItemSource_ = $FaucetItemSource$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/items/$SackItem" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$ClickAction, $ClickAction$Type} from "packages/net/minecraft/world/inventory/$ClickAction"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$TooltipComponent, $TooltipComponent$Type} from "packages/net/minecraft/world/inventory/tooltip/$TooltipComponent"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$BlockItem, $BlockItem$Type} from "packages/net/minecraft/world/item/$BlockItem"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$SlotAccess, $SlotAccess$Type} from "packages/net/minecraft/world/entity/$SlotAccess"
import {$List, $List$Type} from "packages/java/util/$List"
import {$AdditionalItemPlacement, $AdditionalItemPlacement$Type} from "packages/net/mehvahdjukaar/moonlight/api/item/additional_placements/$AdditionalItemPlacement"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$ItemEntity, $ItemEntity$Type} from "packages/net/minecraft/world/entity/item/$ItemEntity"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $SackItem extends $BlockItem {
static readonly "BLOCK_ENTITY_TAG": string
static readonly "BLOCK_STATE_TAG": string
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(blockIn: $Block$Type, builder: $Item$Properties$Type)

public static "getEncumber"(slotItem: $ItemStack$Type): float
public "onDestroyed"(pItemEntity: $ItemEntity$Type): void
public "overrideStackedOnOther"(stack: $ItemStack$Type, slot: $Slot$Type, action: $ClickAction$Type, player: $Player$Type): boolean
public "overrideOtherStackedOnMe"(stack: $ItemStack$Type, incoming: $ItemStack$Type, slot: $Slot$Type, action: $ClickAction$Type, player: $Player$Type, accessor: $SlotAccess$Type): boolean
public "inventoryTick"(stack: $ItemStack$Type, worldIn: $Level$Type, entityIn: $Entity$Type, itemSlot: integer, isSelected: boolean): void
public "getTooltipImage"(pStack: $ItemStack$Type): $Optional<($TooltipComponent)>
public "appendHoverText"(stack: $ItemStack$Type, worldIn: $Level$Type, tooltip: $List$Type<($Component$Type)>, flagIn: $TooltipFlag$Type): void
public "canFitInsideContainerItems"(): boolean
public "moonlight$addAdditionalBehavior"(arg0: $AdditionalItemPlacement$Type): void
public "moonlight$getAdditionalBehavior"(): $AdditionalItemPlacement
public "moonlight$getClientAnimationExtension"(): any
public "moonlight$setClientAnimationExtension"(arg0: any): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SackItem$Type = ($SackItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SackItem_ = $SackItem$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/set/leaves/$LeavesType" {
import {$WoodType, $WoodType$Type} from "packages/net/mehvahdjukaar/moonlight/api/set/wood/$WoodType"
import {$ItemLike, $ItemLike$Type} from "packages/net/minecraft/world/level/$ItemLike"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Codec, $Codec$Type} from "packages/com/mojang/serialization/$Codec"
import {$BlockType, $BlockType$Type} from "packages/net/mehvahdjukaar/moonlight/api/set/$BlockType"

export class $LeavesType extends $BlockType {
static readonly "CODEC": $Codec<($LeavesType)>
readonly "leaves": $Block
readonly "id": $ResourceLocation


public "getWoodType"(): $WoodType
public "getTranslationKey"(): string
public "initializeChildrenBlocks"(): void
public "initializeChildrenItems"(): void
public "mainChild"(): $ItemLike
get "woodType"(): $WoodType
get "translationKey"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LeavesType$Type = ($LeavesType);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LeavesType_ = $LeavesType$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/fluids/$ModFlowingFluid" {
import {$IntegerProperty, $IntegerProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$IntegerProperty"
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$Fluid, $Fluid$Type} from "packages/net/minecraft/world/level/material/$Fluid"
import {$FlowingFluid, $FlowingFluid$Type} from "packages/net/minecraft/world/level/material/$FlowingFluid"
import {$ModFlowingFluid$Properties, $ModFlowingFluid$Properties$Type} from "packages/net/mehvahdjukaar/moonlight/api/fluids/$ModFlowingFluid$Properties"
import {$ModFluidRenderProperties, $ModFluidRenderProperties$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/$ModFluidRenderProperties"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$FluidType, $FluidType$Type} from "packages/net/minecraftforge/fluids/$FluidType"
import {$FluidState, $FluidState$Type} from "packages/net/minecraft/world/level/material/$FluidState"

export class $ModFlowingFluid extends $FlowingFluid {
readonly "hasCustomFluidType": boolean
static readonly "FALLING": $BooleanProperty
static readonly "LEVEL": $IntegerProperty
static readonly "FLUID_STATE_REGISTRY": $IdMapper<($FluidState)>


public static "properties"(): $ModFlowingFluid$Properties
public "getFluidType"(): $FluidType
public "isSame"(fluidIn: $Fluid$Type): boolean
public "getFlowing"(): $Fluid
public "getSource"(): $Fluid
public "createRenderProperties"(): $ModFluidRenderProperties
get "fluidType"(): $FluidType
get "flowing"(): $Fluid
get "source"(): $Fluid
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModFlowingFluid$Type = ($ModFlowingFluid);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModFlowingFluid_ = $ModFlowingFluid$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/platform/configs/forge/$ConfigSpecWrapper" {
import {$ConfigType, $ConfigType$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/configs/$ConfigType"
import {$ConfigSpec, $ConfigSpec$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/configs/$ConfigSpec"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Path, $Path$Type} from "packages/java/nio/file/$Path"
import {$ForgeConfigSpec$ConfigValue, $ForgeConfigSpec$ConfigValue$Type} from "packages/net/minecraftforge/common/$ForgeConfigSpec$ConfigValue"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Runnable, $Runnable$Type} from "packages/java/lang/$Runnable"
import {$ForgeConfigSpec, $ForgeConfigSpec$Type} from "packages/net/minecraftforge/common/$ForgeConfigSpec"
import {$ModConfig, $ModConfig$Type} from "packages/net/minecraftforge/fml/config/$ModConfig"
import {$List, $List$Type} from "packages/java/util/$List"
import {$InputStream, $InputStream$Type} from "packages/java/io/$InputStream"
import {$ConfigBuilderImpl$SpecialValue, $ConfigBuilderImpl$SpecialValue$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/configs/forge/$ConfigBuilderImpl$SpecialValue"
import {$ModConfig$Type, $ModConfig$Type$Type} from "packages/net/minecraftforge/fml/config/$ModConfig$Type"

export class $ConfigSpecWrapper extends $ConfigSpec {

constructor(name: $ResourceLocation$Type, spec: $ForgeConfigSpec$Type, type: $ConfigType$Type, synced: boolean, onChange: $Runnable$Type, requireRestart: $List$Type<($ForgeConfigSpec$ConfigValue$Type<(any)>)>, specialValues: $List$Type<($ConfigBuilderImpl$SpecialValue$Type<(any), (any)>)>)

public "getName"(): $Component
public "register"(): void
public "isLoaded"(): boolean
public "loadFromFile"(): void
public "requiresGameRestart"(value: $ForgeConfigSpec$ConfigValue$Type<(any)>): boolean
public "getModConfig"(): $ModConfig
public "getModConfigType"(): $ModConfig$Type
public "getFullPath"(): $Path
public "getSpec"(): $ForgeConfigSpec
public "hasConfigScreen"(): boolean
public "loadFromBytes"(stream: $InputStream$Type): void
public "makeScreen"(parent: $Screen$Type, background: $ResourceLocation$Type): $Screen
get "name"(): $Component
get "loaded"(): boolean
get "modConfig"(): $ModConfig
get "modConfigType"(): $ModConfig$Type
get "fullPath"(): $Path
get "spec"(): $ForgeConfigSpec
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ConfigSpecWrapper$Type = ($ConfigSpecWrapper);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ConfigSpecWrapper_ = $ConfigSpecWrapper$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/util/$DummyBlockGetter" {
import {$ModelDataManager, $ModelDataManager$Type} from "packages/net/minecraftforge/client/model/data/$ModelDataManager"
import {$LevelHeightAccessor, $LevelHeightAccessor$Type} from "packages/net/minecraft/world/level/$LevelHeightAccessor"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$ClipBlockStateContext, $ClipBlockStateContext$Type} from "packages/net/minecraft/world/level/$ClipBlockStateContext"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$BiFunction, $BiFunction$Type} from "packages/java/util/function/$BiFunction"
import {$FluidState, $FluidState$Type} from "packages/net/minecraft/world/level/material/$FluidState"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$Stream, $Stream$Type} from "packages/java/util/stream/$Stream"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$ClipContext, $ClipContext$Type} from "packages/net/minecraft/world/level/$ClipContext"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$AABB, $AABB$Type} from "packages/net/minecraft/world/phys/$AABB"

export class $DummyBlockGetter implements $BlockGetter {
static readonly "INSTANCE": $BlockGetter

constructor()

public "getBlockEntity"(pos: $BlockPos$Type): $BlockEntity
public "getFluidState"(pos: $BlockPos$Type): $FluidState
public "getHeight"(): integer
public "getMinBuildHeight"(): integer
public "getBlockState"(pos: $BlockPos$Type): $BlockState
public "getBlockEntity"<T extends $BlockEntity>(arg0: $BlockPos$Type, arg1: $BlockEntityType$Type<(T)>): $Optional<(T)>
public "getBlockStates"(arg0: $AABB$Type): $Stream<($BlockState)>
public "getMaxLightLevel"(): integer
public "isBlockInLine"(arg0: $ClipBlockStateContext$Type): $BlockHitResult
public "clipWithInteractionOverride"(arg0: $Vec3$Type, arg1: $Vec3$Type, arg2: $BlockPos$Type, arg3: $VoxelShape$Type, arg4: $BlockState$Type): $BlockHitResult
public "getLightEmission"(arg0: $BlockPos$Type): integer
public static "traverseBlocks"<T, C>(arg0: $Vec3$Type, arg1: $Vec3$Type, arg2: C, arg3: $BiFunction$Type<(C), ($BlockPos$Type), (T)>, arg4: $Function$Type<(C), (T)>): T
public "getBlockFloorHeight"(arg0: $VoxelShape$Type, arg1: $Supplier$Type<($VoxelShape$Type)>): double
public "getBlockFloorHeight"(arg0: $BlockPos$Type): double
public "clip"(arg0: $ClipContext$Type): $BlockHitResult
public "getSectionsCount"(): integer
public "isOutsideBuildHeight"(arg0: integer): boolean
public "getMinSection"(): integer
public "getMaxSection"(): integer
public "getSectionIndexFromSectionY"(arg0: integer): integer
public "getSectionYFromSectionIndex"(arg0: integer): integer
public "getSectionIndex"(arg0: integer): integer
public static "create"(arg0: integer, arg1: integer): $LevelHeightAccessor
public "isOutsideBuildHeight"(arg0: $BlockPos$Type): boolean
public "getMaxBuildHeight"(): integer
public "getExistingBlockEntity"(arg0: $BlockPos$Type): $BlockEntity
public "getModelDataManager"(): $ModelDataManager
get "height"(): integer
get "minBuildHeight"(): integer
get "maxLightLevel"(): integer
get "sectionsCount"(): integer
get "minSection"(): integer
get "maxSection"(): integer
get "maxBuildHeight"(): integer
get "modelDataManager"(): $ModelDataManager
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DummyBlockGetter$Type = ($DummyBlockGetter);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DummyBlockGetter_ = $DummyBlockGetter$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/blocks/$BubbleBlock" {
import {$EntityBlock, $EntityBlock$Type} from "packages/net/minecraft/world/level/block/$EntityBlock"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$CollisionContext, $CollisionContext$Type} from "packages/net/minecraft/world/phys/shapes/$CollisionContext"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$BlockEntityTicker, $BlockEntityTicker$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityTicker"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"
import {$GameEventListener, $GameEventListener$Type} from "packages/net/minecraft/world/level/gameevent/$GameEventListener"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $BubbleBlock extends $Block implements $EntityBlock {
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(properties: $BlockBehaviour$Properties$Type)

public "getTicker"<T extends $BlockEntity>(level: $Level$Type, state: $BlockState$Type, tBlockEntityType: $BlockEntityType$Type<(T)>): $BlockEntityTicker<(T)>
public "addLandingEffects"(state1: $BlockState$Type, worldserver: $ServerLevel$Type, pos: $BlockPos$Type, state2: $BlockState$Type, entity: $LivingEntity$Type, numberOfParticles: integer): boolean
public "propagatesSkylightDown"(state: $BlockState$Type, blockGetter: $BlockGetter$Type, pos: $BlockPos$Type): boolean
public "isPossibleToRespawnInThis"(blockState: $BlockState$Type): boolean
public "stepOn"(level: $Level$Type, pos: $BlockPos$Type, state: $BlockState$Type, entity: $Entity$Type): void
public "fallOn"(level: $Level$Type, state: $BlockState$Type, pos: $BlockPos$Type, entity: $Entity$Type, v: float): void
public "makeParticle"(pos: $BlockPos$Type, level: $Level$Type): void
public "breakBubble"(level: $ServerLevel$Type, pos: $BlockPos$Type, state: $BlockState$Type): void
public "sendParticles"(pos: $BlockPos$Type, level: $ServerLevel$Type): void
public "canBeReplaced"(state: $BlockState$Type, placeContext: $BlockPlaceContext$Type): boolean
public "getCollisionShape"(state: $BlockState$Type, getter: $BlockGetter$Type, pos: $BlockPos$Type, collisionContext: $CollisionContext$Type): $VoxelShape
public "getShape"(state: $BlockState$Type, blockGetter: $BlockGetter$Type, pos: $BlockPos$Type, collisionContext: $CollisionContext$Type): $VoxelShape
public "tick"(state: $BlockState$Type, serverLevel: $ServerLevel$Type, pos: $BlockPos$Type, random: $RandomSource$Type): void
public "entityInside"(state: $BlockState$Type, level: $Level$Type, pos: $BlockPos$Type, entity: $Entity$Type): void
public "newBlockEntity"(pos: $BlockPos$Type, state: $BlockState$Type): $BlockEntity
public "getListener"<T extends $BlockEntity>(arg0: $ServerLevel$Type, arg1: T): $GameEventListener
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BubbleBlock$Type = ($BubbleBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BubbleBlock_ = $BubbleBlock$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/map/markers/$SimpleMapBlockMarker" {
import {$CustomMapDecoration, $CustomMapDecoration$Type} from "packages/net/mehvahdjukaar/moonlight/api/map/$CustomMapDecoration"
import {$MapBlockMarker, $MapBlockMarker$Type} from "packages/net/mehvahdjukaar/moonlight/api/map/markers/$MapBlockMarker"
import {$MapDecorationType, $MapDecorationType$Type} from "packages/net/mehvahdjukaar/moonlight/api/map/type/$MapDecorationType"

export class $SimpleMapBlockMarker extends $MapBlockMarker<($CustomMapDecoration)> {
static readonly "HAS_SMALL_TEXTURE_FLAG": integer

constructor(type: $MapDecorationType$Type<($CustomMapDecoration$Type), (any)>)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SimpleMapBlockMarker$Type = ($SimpleMapBlockMarker);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SimpleMapBlockMarker_ = $SimpleMapBlockMarker$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/blocks/$CageBlock" {
import {$IntegerProperty, $IntegerProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$IntegerProperty"
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$EntityBlock, $EntityBlock$Type} from "packages/net/minecraft/world/level/block/$EntityBlock"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Mirror, $Mirror$Type} from "packages/net/minecraft/world/level/block/$Mirror"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$CageBlockTile, $CageBlockTile$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$CageBlockTile"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$WaterBlock, $WaterBlock$Type} from "packages/net/mehvahdjukaar/moonlight/api/block/$WaterBlock"
import {$List, $List$Type} from "packages/java/util/$List"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"
import {$DirectionProperty, $DirectionProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$DirectionProperty"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$CollisionContext, $CollisionContext$Type} from "packages/net/minecraft/world/phys/shapes/$CollisionContext"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$LootParams$Builder, $LootParams$Builder$Type} from "packages/net/minecraft/world/level/storage/loot/$LootParams$Builder"
import {$Rotation, $Rotation$Type} from "packages/net/minecraft/world/level/block/$Rotation"
import {$MenuProvider, $MenuProvider$Type} from "packages/net/minecraft/world/$MenuProvider"
import {$BlockEntityTicker, $BlockEntityTicker$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityTicker"
import {$GameEventListener, $GameEventListener$Type} from "packages/net/minecraft/world/level/gameevent/$GameEventListener"
import {$RenderShape, $RenderShape$Type} from "packages/net/minecraft/world/level/block/$RenderShape"

export class $CageBlock extends $WaterBlock implements $EntityBlock {
static readonly "FACING": $DirectionProperty
static readonly "LIGHT_LEVEL": $IntegerProperty
static readonly "WATERLOGGED": $BooleanProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(properties: $BlockBehaviour$Properties$Type)

public "getTicker"<T extends $BlockEntity>(pLevel: $Level$Type, pState: $BlockState$Type, pBlockEntityType: $BlockEntityType$Type<(T)>): $BlockEntityTicker<(T)>
public "getCageItem"(te: $CageBlockTile$Type): $ItemStack
public "getStateForPlacement"(context: $BlockPlaceContext$Type): $BlockState
public "getCloneItemStack"(level: $BlockGetter$Type, pos: $BlockPos$Type, state: $BlockState$Type): $ItemStack
public "use"(state: $BlockState$Type, world: $Level$Type, pos: $BlockPos$Type, player: $Player$Type, hand: $InteractionHand$Type, hit: $BlockHitResult$Type): $InteractionResult
public "getRenderShape"(state: $BlockState$Type): $RenderShape
public "hasAnalogOutputSignal"(state: $BlockState$Type): boolean
public "rotate"(state: $BlockState$Type, rot: $Rotation$Type): $BlockState
public "mirror"(state: $BlockState$Type, mirrorIn: $Mirror$Type): $BlockState
public "getDrops"(state: $BlockState$Type, builder: $LootParams$Builder$Type): $List<($ItemStack)>
public "getMenuProvider"(state: $BlockState$Type, worldIn: $Level$Type, pos: $BlockPos$Type): $MenuProvider
public "getAnalogOutputSignal"(blockState: $BlockState$Type, worldIn: $Level$Type, pos: $BlockPos$Type): integer
public "getShape"(state: $BlockState$Type, world: $BlockGetter$Type, pos: $BlockPos$Type, context: $CollisionContext$Type): $VoxelShape
public "newBlockEntity"(pPos: $BlockPos$Type, pState: $BlockState$Type): $BlockEntity
public "getListener"<T extends $BlockEntity>(arg0: $ServerLevel$Type, arg1: T): $GameEventListener
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CageBlock$Type = ($CageBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CageBlock_ = $CageBlock$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/client/$ItemStackRenderer" {
import {$BlockEntityWithoutLevelRenderer, $BlockEntityWithoutLevelRenderer$Type} from "packages/net/minecraft/client/renderer/$BlockEntityWithoutLevelRenderer"
import {$ItemDisplayContext, $ItemDisplayContext$Type} from "packages/net/minecraft/world/item/$ItemDisplayContext"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"

export class $ItemStackRenderer extends $BlockEntityWithoutLevelRenderer {


public "renderByItem"(arg0: $ItemStack$Type, arg1: $ItemDisplayContext$Type, arg2: $PoseStack$Type, arg3: $MultiBufferSource$Type, arg4: integer, arg5: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ItemStackRenderer$Type = ($ItemStackRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ItemStackRenderer_ = $ItemStackRenderer$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/events/overrides/$SuppAdditionalPlacement" {
import {$AdditionalItemPlacement, $AdditionalItemPlacement$Type} from "packages/net/mehvahdjukaar/moonlight/api/item/additional_placements/$AdditionalItemPlacement"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"

export class $SuppAdditionalPlacement extends $AdditionalItemPlacement {

constructor(placeable: $Block$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SuppAdditionalPlacement$Type = ($SuppAdditionalPlacement);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SuppAdditionalPlacement_ = $SuppAdditionalPlacement$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/misc/$Triplet" {
import {$Record, $Record$Type} from "packages/java/lang/$Record"

export class $Triplet<L, M, R> extends $Record {

constructor(left: L, middle: M, right: R)

public "equals"(o: any): boolean
public "toString"(): string
public "hashCode"(): integer
public static "of"<A, B, C>(left: A, middle: B, right: C): $Triplet<(A), (B), (C)>
public "left"(): L
public "right"(): R
public "middle"(): M
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Triplet$Type<L, M, R> = ($Triplet<(L), (M), (R)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Triplet_<L, M, R> = $Triplet$Type<(L), (M), (R)>;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/items/$BlackboardItem" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$ICustomItemRendererProvider, $ICustomItemRendererProvider$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/$ICustomItemRendererProvider"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ItemStackRenderer, $ItemStackRenderer$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/$ItemStackRenderer"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$TooltipComponent, $TooltipComponent$Type} from "packages/net/minecraft/world/inventory/tooltip/$TooltipComponent"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$BlockItem, $BlockItem$Type} from "packages/net/minecraft/world/item/$BlockItem"
import {$List, $List$Type} from "packages/java/util/$List"
import {$AdditionalItemPlacement, $AdditionalItemPlacement$Type} from "packages/net/mehvahdjukaar/moonlight/api/item/additional_placements/$AdditionalItemPlacement"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $BlackboardItem extends $BlockItem implements $ICustomItemRendererProvider {
static readonly "BLOCK_ENTITY_TAG": string
static readonly "BLOCK_STATE_TAG": string
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(blockIn: $Block$Type, builder: $Item$Properties$Type)

public "getTooltipImage"(pStack: $ItemStack$Type): $Optional<($TooltipComponent)>
public "appendHoverText"(pStack: $ItemStack$Type, pLevel: $Level$Type, pTooltip: $List$Type<($Component$Type)>, pFlag: $TooltipFlag$Type): void
public "getRendererFactory"(): $Supplier<($ItemStackRenderer)>
/**
 * 
 * @deprecated
 */
public "registerFabricRenderer"(): void
public "asItem"(): $Item
public "moonlight$addAdditionalBehavior"(arg0: $AdditionalItemPlacement$Type): void
public "moonlight$getAdditionalBehavior"(): $AdditionalItemPlacement
public "moonlight$getClientAnimationExtension"(): any
public "moonlight$setClientAnimationExtension"(arg0: any): void
get "rendererFactory"(): $Supplier<($ItemStackRenderer)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BlackboardItem$Type = ($BlackboardItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BlackboardItem_ = $BlackboardItem$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/resources/pack/$DynamicResourcePack" {
import {$PackResources$ResourceOutput, $PackResources$ResourceOutput$Type} from "packages/net/minecraft/server/packs/$PackResources$ResourceOutput"
import {$JsonElement, $JsonElement$Type} from "packages/com/google/gson/$JsonElement"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$ResType, $ResType$Type} from "packages/net/mehvahdjukaar/moonlight/api/resources/$ResType"
import {$MetadataSectionSerializer, $MetadataSectionSerializer$Type} from "packages/net/minecraft/server/packs/metadata/$MetadataSectionSerializer"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$PackType, $PackType$Type} from "packages/net/minecraft/server/packs/$PackType"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$StaticResource, $StaticResource$Type} from "packages/net/mehvahdjukaar/moonlight/api/resources/$StaticResource"
import {$FileNotFoundException, $FileNotFoundException$Type} from "packages/java/io/$FileNotFoundException"
import {$InputStream, $InputStream$Type} from "packages/java/io/$InputStream"
import {$IoSupplier, $IoSupplier$Type} from "packages/net/minecraft/server/packs/resources/$IoSupplier"
import {$PackResources, $PackResources$Type} from "packages/net/minecraft/server/packs/$PackResources"

export class $DynamicResourcePack implements $PackResources {


public "toString"(): string
public "isHidden"(): boolean
public "id"(): $ResourceLocation
public "close"(): void
public "getPackType"(): $PackType
/**
 * 
 * @deprecated
 */
public "clearOnReload"(canBeCleared: boolean): void
public "addNamespaces"(...namespaces: (string)[]): void
public "getResource"(type: $PackType$Type, id: $ResourceLocation$Type): $IoSupplier<($InputStream)>
public "addResource"(resource: $StaticResource$Type): void
public static "clearBeforeReload"(targetType: $PackType$Type): void
public static "clearAfterReload"(targetType: $PackType$Type): void
public "listResources"(packType: $PackType$Type, namespace: string, id: string, output: $PackResources$ResourceOutput$Type): void
public "getRootResource"(...strings: (string)[]): $IoSupplier<($InputStream)>
public "getTitle"(): $Component
public "removeResource"(res: $ResourceLocation$Type): void
public "makeFileNotFoundException"(path: string): $FileNotFoundException
public "setGenerateDebugResources"(generateDebugResources: boolean): void
public "addBytes"(location: $ResourceLocation$Type, bytes: (byte)[], resType: $ResType$Type): void
public "markNotClearable"(staticResources: $ResourceLocation$Type): void
public "makeDescription"(): $Component
public "unMarkNotClearable"(staticResources: $ResourceLocation$Type): void
public "addRootResource"(name: string, resource: (byte)[]): void
public "setClearOnReload"(canBeCleared: boolean): void
public "addJson"(location: $ResourceLocation$Type, json: $JsonElement$Type, resType: $ResType$Type): void
public "registerPack"(): void
public "packId"(): string
public "getMetadataSection"<T>(serializer: $MetadataSectionSerializer$Type<(T)>): T
public "getNamespaces"(packType: $PackType$Type): $Set<(string)>
public "isBuiltin"(): boolean
public "getChildren"(): $Collection<($PackResources)>
get "hidden"(): boolean
get "packType"(): $PackType
get "title"(): $Component
set "generateDebugResources"(value: boolean)
get "builtin"(): boolean
get "children"(): $Collection<($PackResources)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DynamicResourcePack$Type = ($DynamicResourcePack);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DynamicResourcePack_ = $DynamicResourcePack$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/client/renderers/$DoubleSkullBlockTileRenderer" {
import {$BlockEntityRendererProvider$Context, $BlockEntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/blockentity/$BlockEntityRendererProvider$Context"
import {$SkullWithWaxTileRenderer, $SkullWithWaxTileRenderer$Type} from "packages/net/mehvahdjukaar/amendments/client/renderers/$SkullWithWaxTileRenderer"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$DoubleSkullBlockTile, $DoubleSkullBlockTile$Type} from "packages/net/mehvahdjukaar/amendments/common/tile/$DoubleSkullBlockTile"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"

export class $DoubleSkullBlockTileRenderer extends $SkullWithWaxTileRenderer<($DoubleSkullBlockTile)> {

constructor(context: $BlockEntityRendererProvider$Context$Type)

public "render"(tile: $DoubleSkullBlockTile$Type, pPartialTicks: float, poseStack: $PoseStack$Type, buffer: $MultiBufferSource$Type, pCombinedLight: integer, pCombinedOverlay: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DoubleSkullBlockTileRenderer$Type = ($DoubleSkullBlockTileRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DoubleSkullBlockTileRenderer_ = $DoubleSkullBlockTileRenderer$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/cannon/$CannonController" {
import {$CannonBlockTile, $CannonBlockTile$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$CannonBlockTile"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$Minecraft, $Minecraft$Type} from "packages/net/minecraft/client/$Minecraft"
import {$Camera, $Camera$Type} from "packages/net/minecraft/client/$Camera"
import {$Input, $Input$Type} from "packages/net/minecraft/client/player/$Input"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $CannonController {

constructor()

public static "activateCannonCamera"(tile: $CannonBlockTile$Type): void
public static "isActive"(): boolean
public static "turnOff"(): void
public static "onPlayerAttack"(attack: boolean): void
public static "onInputUpdate"(input: $Input$Type): void
public static "setupCamera"(camera: $Camera$Type, level: $BlockGetter$Type, entity: $Entity$Type, detached: boolean, thirdPersonReverse: boolean, partialTick: float): boolean
public static "onKeyPressed"(key: integer, action: integer, modifiers: integer): void
public static "onClientTick"(mc: $Minecraft$Type): void
public static "onPlayerRotated"(yawAdd: double, pitchAdd: double): void
get "active"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CannonController$Type = ($CannonController);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CannonController_ = $CannonController$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/platform/$PlatHelper$Side" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$Runnable, $Runnable$Type} from "packages/java/lang/$Runnable"

export class $PlatHelper$Side extends $Enum<($PlatHelper$Side)> {
static readonly "CLIENT": $PlatHelper$Side
static readonly "SERVER": $PlatHelper$Side


public static "values"(): ($PlatHelper$Side)[]
public static "valueOf"(name: string): $PlatHelper$Side
public "isClient"(): boolean
public "ifClient"(runnable: $Runnable$Type): void
public "isServer"(): boolean
public "ifServer"(runnable: $Runnable$Type): void
get "client"(): boolean
get "server"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PlatHelper$Side$Type = (("server") | ("client")) | ($PlatHelper$Side);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PlatHelper$Side_ = $PlatHelper$Side$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/items/tooltip_components/$PaintingTooltip" {
import {$TooltipComponent, $TooltipComponent$Type} from "packages/net/minecraft/world/inventory/tooltip/$TooltipComponent"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$PaintingVariant, $PaintingVariant$Type} from "packages/net/minecraft/world/entity/decoration/$PaintingVariant"

export class $PaintingTooltip extends $Record implements $TooltipComponent {

constructor(pattern: $PaintingVariant$Type)

public "equals"(o: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "pattern"(): $PaintingVariant
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PaintingTooltip$Type = ($PaintingTooltip);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PaintingTooltip_ = $PaintingTooltip$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/faucet/$SoftFluidTankInteraction" {
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$FaucetTarget$Tile, $FaucetTarget$Tile$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/faucet/$FaucetTarget$Tile"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$FluidOffer, $FluidOffer$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/faucet/$FluidOffer"
import {$SoftFluidStack, $SoftFluidStack$Type} from "packages/net/mehvahdjukaar/moonlight/api/fluids/$SoftFluidStack"
import {$FaucetSource$Tile, $FaucetSource$Tile$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/faucet/$FaucetSource$Tile"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $SoftFluidTankInteraction implements $FaucetSource$Tile, $FaucetTarget$Tile {


public "fill"(level: $Level$Type, pos: $BlockPos$Type, tile: $BlockEntity$Type, fluid: $SoftFluidStack$Type, minAmount: integer): integer
public "drain"(level: $Level$Type, pos: $BlockPos$Type, dir: $Direction$Type, tile: $BlockEntity$Type, amount: integer): void
public "getProvidedFluid"(level: $Level$Type, pos: $BlockPos$Type, dir: $Direction$Type, tile: $BlockEntity$Type): $FluidOffer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SoftFluidTankInteraction$Type = ($SoftFluidTankInteraction);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SoftFluidTankInteraction_ = $SoftFluidTankInteraction$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/entities/goals/$ISuppEvoker" {
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export interface $ISuppEvoker {

 "supplementaries$setCustomWololoo"(arg0: $LivingEntity$Type): void
 "supplementaries$getCustomWololoo"(): $LivingEntity
 "supplementaries$setSpellCastingTime"(arg0: integer): void
}

export namespace $ISuppEvoker {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ISuppEvoker$Type = ($ISuppEvoker);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ISuppEvoker_ = $ISuppEvoker$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/common/$FlowerPotHandler" {
import {$FlowerPotBlock, $FlowerPotBlock$Type} from "packages/net/minecraft/world/level/block/$FlowerPotBlock"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"

export class $FlowerPotHandler {

constructor()

public static "setup"(): void
public static "getFullPot"(emptyPot: $FlowerPotBlock$Type, flowerBlock: $Block$Type): $Block
public static "isEmptyPot"(b: $Block$Type): boolean
public static "getEmptyPot"(fullPot: $FlowerPotBlock$Type): $Block
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FlowerPotHandler$Type = ($FlowerPotHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FlowerPotHandler_ = $FlowerPotHandler$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/integration/quark/$CartographersQuillItem" {
import {$HolderSet, $HolderSet$Type} from "packages/net/minecraft/core/$HolderSet"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$PathfindersQuillItem, $PathfindersQuillItem$Type} from "packages/org/violetmoon/quark/content/tools/item/$PathfindersQuillItem"
import {$Either, $Either$Type} from "packages/com/mojang/datafixers/util/$Either"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$Structure, $Structure$Type} from "packages/net/minecraft/world/level/levelgen/structure/$Structure"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$ServerChunkCache, $ServerChunkCache$Type} from "packages/net/minecraft/server/level/$ServerChunkCache"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$ChunkPos, $ChunkPos$Type} from "packages/net/minecraft/world/level/$ChunkPos"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$CartographersQuillItem$State, $CartographersQuillItem$State$Type} from "packages/net/mehvahdjukaar/supplementaries/integration/quark/$CartographersQuillItem$State"
import {$StructurePlacement, $StructurePlacement$Type} from "packages/net/minecraft/world/level/levelgen/structure/placement/$StructurePlacement"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$InteractionResultHolder, $InteractionResultHolder$Type} from "packages/net/minecraft/world/$InteractionResultHolder"
import {$Holder, $Holder$Type} from "packages/net/minecraft/core/$Holder"
import {$MapDecoration$Type, $MapDecoration$Type$Type} from "packages/net/minecraft/world/level/saveddata/maps/$MapDecoration$Type"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$StructureManager, $StructureManager$Type} from "packages/net/minecraft/world/level/$StructureManager"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $CartographersQuillItem extends $PathfindersQuillItem {
static readonly "TAG_STRUCTURE": string
static readonly "TAG_SKIP_KNOWN": string
static readonly "TAG_SEARCH_RADIUS": string
static readonly "TAG_ZOOM": string
static readonly "TAG_DECORATION": string
static readonly "TAG_NAME": string
static readonly "TAG_BIOME": string
static readonly "TAG_COLOR": string
static readonly "TAG_UNDERGROUND": string
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor()

public "getTarget"(stack: $ItemStack$Type): $ResourceLocation
public "createMap"(level: $ServerLevel$Type, targetPos: $BlockPos$Type, structure: $ResourceLocation$Type, original: $ItemStack$Type): $ItemStack
public static "getItemColor"(stack: $ItemStack$Type, layer: integer): integer
public "findNearestMapStructure"(level: $ServerLevel$Type, holder: $Holder$Type<($Structure$Type)>, searchRadius: integer, center: $BlockPos$Type, skipKnownStructures: boolean, state: $CartographersQuillItem$State$Type, maxIterations: integer): $InteractionResultHolder<($BlockPos)>
public static "getStructureGeneratingAt"(structureHoldersSet: $Set$Type<($Holder$Type<($Structure$Type)>)>, chunkCache: $ServerChunkCache$Type, structureManager: $StructureManager$Type, skipKnownStructures: boolean, placement: $StructurePlacement$Type, chunkPos: $ChunkPos$Type, state: $CartographersQuillItem$State$Type): $Either<($BlockPos), ($ChunkPos)>
public "use"(level: $Level$Type, player: $Player$Type, hand: $InteractionHand$Type): $InteractionResultHolder<($ItemStack)>
public "appendHoverText"(stack: $ItemStack$Type, level: $Level$Type, comps: $List$Type<($Component$Type)>, flags: $TooltipFlag$Type): void
public static "forStructure"(level: $ServerLevel$Type, tag: $HolderSet$Type<($Structure$Type)>): $ItemStack
public static "forStructure"(level: $ServerLevel$Type, targets: $HolderSet$Type<($Structure$Type)>, searchRadius: integer, skipKnown: boolean, zoom: integer, deco: $MapDecoration$Type$Type, name: string, color: integer): $ItemStack
public "getIterations"(): integer
public "asItem"(): $Item
public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
get "iterations"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CartographersQuillItem$Type = ($CartographersQuillItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CartographersQuillItem_ = $CartographersQuillItem$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/$SpriteCoordinateUnExpander" {
import {$VertexFormatElement, $VertexFormatElement$Type} from "packages/com/mojang/blaze3d/vertex/$VertexFormatElement"
import {$VertexConsumer, $VertexConsumer$Type} from "packages/com/mojang/blaze3d/vertex/$VertexConsumer"
import {$Vector3f, $Vector3f$Type} from "packages/org/joml/$Vector3f"
import {$PoseStack$Pose, $PoseStack$Pose$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack$Pose"
import {$Matrix4f, $Matrix4f$Type} from "packages/org/joml/$Matrix4f"
import {$Matrix3f, $Matrix3f$Type} from "packages/org/joml/$Matrix3f"
import {$ByteBuffer, $ByteBuffer$Type} from "packages/java/nio/$ByteBuffer"
import {$TextureAtlasSprite, $TextureAtlasSprite$Type} from "packages/net/minecraft/client/renderer/texture/$TextureAtlasSprite"
import {$BakedQuad, $BakedQuad$Type} from "packages/net/minecraft/client/renderer/block/model/$BakedQuad"

export class $SpriteCoordinateUnExpander implements $VertexConsumer {

constructor(vertexConsumer: $VertexConsumer$Type, textureAtlasSprite: $TextureAtlasSprite$Type)

public "vertex"(x: double, y: double, z: double): $VertexConsumer
public "uv"(u: float, v: float): $VertexConsumer
public "color"(red: integer, green: integer, blue: integer, alpha: integer): $VertexConsumer
public "normal"(x: float, y: float, z: float): $VertexConsumer
public "overlayCoords"(u: integer, v: integer): $VertexConsumer
public "uv2"(u: integer, v: integer): $VertexConsumer
public "defaultColor"(defaultR: integer, defaultG: integer, defaultB: integer, defaultA: integer): void
public "unsetDefaultColor"(): void
public "vertex"(x: float, y: float, z: float, red: float, green: float, blue: float, alpha: float, texU: float, texV: float, overlayUV: integer, lightmapUV: integer, normalX: float, normalY: float, normalZ: float): void
public "endVertex"(): void
public "overlayCoords"(arg0: integer): $VertexConsumer
public "uv2"(arg0: integer): $VertexConsumer
public "putBulkData"(arg0: $PoseStack$Pose$Type, arg1: $BakedQuad$Type, arg2: float, arg3: float, arg4: float, arg5: integer, arg6: integer): void
public "putBulkData"(arg0: $PoseStack$Pose$Type, arg1: $BakedQuad$Type, arg2: (float)[], arg3: float, arg4: float, arg5: float, arg6: float, arg7: (integer)[], arg8: integer, arg9: boolean): void
public "putBulkData"(arg0: $PoseStack$Pose$Type, arg1: $BakedQuad$Type, arg2: (float)[], arg3: float, arg4: float, arg5: float, arg6: (integer)[], arg7: integer, arg8: boolean): void
public "color"(arg0: integer): $VertexConsumer
public "normal"(arg0: $Matrix3f$Type, arg1: float, arg2: float, arg3: float): $VertexConsumer
public "vertex"(arg0: $Matrix4f$Type, arg1: float, arg2: float, arg3: float): $VertexConsumer
public "color"(arg0: float, arg1: float, arg2: float, arg3: float): $VertexConsumer
public "putBulkData"(arg0: $PoseStack$Pose$Type, arg1: $BakedQuad$Type, arg2: float, arg3: float, arg4: float, arg5: float, arg6: integer, arg7: integer, arg8: boolean): void
public "applyBakedLighting"(arg0: integer, arg1: $ByteBuffer$Type): integer
public "applyBakedNormals"(arg0: $Vector3f$Type, arg1: $ByteBuffer$Type, arg2: $Matrix3f$Type): void
public "misc"(arg0: $VertexFormatElement$Type, ...arg1: (integer)[]): $VertexConsumer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SpriteCoordinateUnExpander$Type = ($SpriteCoordinateUnExpander);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SpriteCoordinateUnExpander_ = $SpriteCoordinateUnExpander$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/resources/recipe/forge/$TemplateRecipeManagerImpl" {
import {$JsonObject, $JsonObject$Type} from "packages/com/google/gson/$JsonObject"
import {$IRecipeTemplate, $IRecipeTemplate$Type} from "packages/net/mehvahdjukaar/moonlight/api/resources/recipe/$IRecipeTemplate"

export class $TemplateRecipeManagerImpl {

constructor()

public static "addRecipeConditions"(recipe: $JsonObject$Type, template: $IRecipeTemplate$Type<(any)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TemplateRecipeManagerImpl$Type = ($TemplateRecipeManagerImpl);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TemplateRecipeManagerImpl_ = $TemplateRecipeManagerImpl$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/blocks/$RakedGravelBlock" {
import {$ModBlockProperties$RakeDirection, $ModBlockProperties$RakeDirection$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/$ModBlockProperties$RakeDirection"
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$GravelBlock, $GravelBlock$Type} from "packages/net/minecraft/world/level/block/$GravelBlock"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$CollisionContext, $CollisionContext$Type} from "packages/net/minecraft/world/phys/shapes/$CollisionContext"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$Mirror, $Mirror$Type} from "packages/net/minecraft/world/level/block/$Mirror"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$PathComputationType, $PathComputationType$Type} from "packages/net/minecraft/world/level/pathfinder/$PathComputationType"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$EnumProperty, $EnumProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$EnumProperty"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$Rotation, $Rotation$Type} from "packages/net/minecraft/world/level/block/$Rotation"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"

export class $RakedGravelBlock extends $GravelBlock {
static readonly "RAKE_DIRECTION": $EnumProperty<($ModBlockProperties$RakeDirection)>
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(properties: $BlockBehaviour$Properties$Type)

public static "turnToGravel"(state: $BlockState$Type, world: $Level$Type, pos: $BlockPos$Type): void
public "getStateForPlacement"(context: $BlockPlaceContext$Type): $BlockState
public static "getConnectedState"(blockstate: $BlockState$Type, world: $LevelAccessor$Type, pos: $BlockPos$Type, front: $Direction$Type): $BlockState
public "isPathfindable"(state: $BlockState$Type, reader: $BlockGetter$Type, pos: $BlockPos$Type, pathType: $PathComputationType$Type): boolean
public "updateShape"(state: $BlockState$Type, direction: $Direction$Type, fromState: $BlockState$Type, world: $LevelAccessor$Type, pos: $BlockPos$Type, fromPos: $BlockPos$Type): $BlockState
public "rotate"(state: $BlockState$Type, rotation: $Rotation$Type): $BlockState
public "mirror"(state: $BlockState$Type, mirror: $Mirror$Type): $BlockState
public "canSurvive"(state: $BlockState$Type, level: $LevelReader$Type, pos: $BlockPos$Type): boolean
public "getShape"(state: $BlockState$Type, reader: $BlockGetter$Type, pos: $BlockPos$Type, context: $CollisionContext$Type): $VoxelShape
public "tick"(state: $BlockState$Type, world: $ServerLevel$Type, pos: $BlockPos$Type, random: $RandomSource$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RakedGravelBlock$Type = ($RakedGravelBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RakedGravelBlock_ = $RakedGravelBlock$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/blocks/$SackBlock" {
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$Fluid, $Fluid$Type} from "packages/net/minecraft/world/level/material/$Fluid"
import {$EntityBlock, $EntityBlock$Type} from "packages/net/minecraft/world/level/block/$EntityBlock"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$SimpleWaterloggedBlock, $SimpleWaterloggedBlock$Type} from "packages/net/minecraft/world/level/block/$SimpleWaterloggedBlock"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$FallingBlockEntity, $FallingBlockEntity$Type} from "packages/net/minecraft/world/entity/item/$FallingBlockEntity"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$PathComputationType, $PathComputationType$Type} from "packages/net/minecraft/world/level/pathfinder/$PathComputationType"
import {$FluidState, $FluidState$Type} from "packages/net/minecraft/world/level/material/$FluidState"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$FallingBlock, $FallingBlock$Type} from "packages/net/minecraft/world/level/block/$FallingBlock"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$List, $List$Type} from "packages/java/util/$List"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$CollisionContext, $CollisionContext$Type} from "packages/net/minecraft/world/phys/shapes/$CollisionContext"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$LootParams$Builder, $LootParams$Builder$Type} from "packages/net/minecraft/world/level/storage/loot/$LootParams$Builder"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$MenuProvider, $MenuProvider$Type} from "packages/net/minecraft/world/$MenuProvider"
import {$BlockEntityTicker, $BlockEntityTicker$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityTicker"
import {$GameEventListener, $GameEventListener$Type} from "packages/net/minecraft/world/level/gameevent/$GameEventListener"

export class $SackBlock extends $FallingBlock implements $EntityBlock, $SimpleWaterloggedBlock {
static readonly "SACK_BLOCKS": $List<($Block)>
static readonly "SHAPE_CLOSED": $VoxelShape
static readonly "SHAPE_OPEN": $VoxelShape
static readonly "CONTENTS": $ResourceLocation
static readonly "OPEN": $BooleanProperty
static readonly "WATERLOGGED": $BooleanProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(properties: $BlockBehaviour$Properties$Type)

public static "canFall"(pos: $BlockPos$Type, world: $LevelAccessor$Type): boolean
public "getStateForPlacement"(context: $BlockPlaceContext$Type): $BlockState
public "setPlacedBy"(worldIn: $Level$Type, pos: $BlockPos$Type, state: $BlockState$Type, placer: $LivingEntity$Type, stack: $ItemStack$Type): void
public "getCloneItemStack"(level: $BlockGetter$Type, pos: $BlockPos$Type, state: $BlockState$Type): $ItemStack
public "playerWillDestroy"(worldIn: $Level$Type, pos: $BlockPos$Type, state: $BlockState$Type, player: $Player$Type): void
public "isPathfindable"(state: $BlockState$Type, worldIn: $BlockGetter$Type, pos: $BlockPos$Type, type: $PathComputationType$Type): boolean
public "onPlace"(state: $BlockState$Type, worldIn: $Level$Type, pos: $BlockPos$Type, oldState: $BlockState$Type, isMoving: boolean): void
public "updateShape"(stateIn: $BlockState$Type, facing: $Direction$Type, facingState: $BlockState$Type, worldIn: $LevelAccessor$Type, currentPos: $BlockPos$Type, facingPos: $BlockPos$Type): $BlockState
public "use"(state: $BlockState$Type, worldIn: $Level$Type, pos: $BlockPos$Type, player: $Player$Type, handIn: $InteractionHand$Type, hit: $BlockHitResult$Type): $InteractionResult
public "hasAnalogOutputSignal"(state: $BlockState$Type): boolean
public "onRemove"(state: $BlockState$Type, worldIn: $Level$Type, pos: $BlockPos$Type, newState: $BlockState$Type, isMoving: boolean): void
public "getFluidState"(state: $BlockState$Type): $FluidState
public "getDrops"(state: $BlockState$Type, builder: $LootParams$Builder$Type): $List<($ItemStack)>
public "getMenuProvider"(state: $BlockState$Type, worldIn: $Level$Type, pos: $BlockPos$Type): $MenuProvider
public "getAnalogOutputSignal"(blockState: $BlockState$Type, worldIn: $Level$Type, pos: $BlockPos$Type): integer
public "getShape"(state: $BlockState$Type, worldIn: $BlockGetter$Type, pos: $BlockPos$Type, context: $CollisionContext$Type): $VoxelShape
public "tick"(state: $BlockState$Type, level: $ServerLevel$Type, pos: $BlockPos$Type, rand: $RandomSource$Type): void
public "getDustColor"(state: $BlockState$Type, reader: $BlockGetter$Type, pos: $BlockPos$Type): integer
public "onLand"(level: $Level$Type, pos: $BlockPos$Type, state: $BlockState$Type, state1: $BlockState$Type, blockEntity: $FallingBlockEntity$Type): void
public "newBlockEntity"(pPos: $BlockPos$Type, pState: $BlockState$Type): $BlockEntity
public "getTicker"<T extends $BlockEntity>(arg0: $Level$Type, arg1: $BlockState$Type, arg2: $BlockEntityType$Type<(T)>): $BlockEntityTicker<(T)>
public "getListener"<T extends $BlockEntity>(arg0: $ServerLevel$Type, arg1: T): $GameEventListener
public "getPickupSound"(): $Optional<($SoundEvent)>
public "canPlaceLiquid"(arg0: $BlockGetter$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: $Fluid$Type): boolean
public "placeLiquid"(arg0: $LevelAccessor$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: $FluidState$Type): boolean
public "pickupBlock"(arg0: $LevelAccessor$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type): $ItemStack
public "getPickupSound"(arg0: $BlockState$Type): $Optional<($SoundEvent)>
get "pickupSound"(): $Optional<($SoundEvent)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SackBlock$Type = ($SackBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SackBlock_ = $SackBlock$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/events/behaviors/$CarpetSlabConversion" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$ItemUseOnBlock, $ItemUseOnBlock$Type} from "packages/net/mehvahdjukaar/amendments/events/behaviors/$ItemUseOnBlock"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $CarpetSlabConversion implements $ItemUseOnBlock {

constructor()

public "isEnabled"(): boolean
public "placesBlock"(): boolean
public "appliesToItem"(item: $Item$Type): boolean
public "altersWorld"(): boolean
public "tryPerformingAction"(level: $Level$Type, player: $Player$Type, hand: $InteractionHand$Type, stack: $ItemStack$Type, hit: $BlockHitResult$Type): $InteractionResult
public "getTooltip"(): $MutableComponent
public "shouldBlockMapToItem"(item: $Item$Type): boolean
get "enabled"(): boolean
get "tooltip"(): $MutableComponent
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CarpetSlabConversion$Type = ($CarpetSlabConversion);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CarpetSlabConversion_ = $CarpetSlabConversion$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/client/model/$CustomGeometry" {
import {$Material, $Material$Type} from "packages/net/minecraft/client/resources/model/$Material"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$ModelBaker, $ModelBaker$Type} from "packages/net/minecraft/client/resources/model/$ModelBaker"
import {$ModelState, $ModelState$Type} from "packages/net/minecraft/client/resources/model/$ModelState"
import {$CustomBakedModel, $CustomBakedModel$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$CustomBakedModel"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$TextureAtlasSprite, $TextureAtlasSprite$Type} from "packages/net/minecraft/client/renderer/texture/$TextureAtlasSprite"

export interface $CustomGeometry {

 "bake"(arg0: $ModelBaker$Type, arg1: $Function$Type<($Material$Type), ($TextureAtlasSprite$Type)>, arg2: $ModelState$Type, arg3: $ResourceLocation$Type): $CustomBakedModel

(arg0: $ModelBaker$Type, arg1: $Function$Type<($Material$Type), ($TextureAtlasSprite$Type)>, arg2: $ModelState$Type, arg3: $ResourceLocation$Type): $CustomBakedModel
}

export namespace $CustomGeometry {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CustomGeometry$Type = ($CustomGeometry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CustomGeometry_ = $CustomGeometry$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/renderers/items/$BubbleBlockItemRenderer" {
import {$ItemDisplayContext, $ItemDisplayContext$Type} from "packages/net/minecraft/world/item/$ItemDisplayContext"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$ItemStackRenderer, $ItemStackRenderer$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/$ItemStackRenderer"

export class $BubbleBlockItemRenderer extends $ItemStackRenderer {

constructor()

public "renderByItem"(stack: $ItemStack$Type, transformType: $ItemDisplayContext$Type, poseStack: $PoseStack$Type, buffer: $MultiBufferSource$Type, light: integer, combinedOverlayIn: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BubbleBlockItemRenderer$Type = ($BubbleBlockItemRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BubbleBlockItemRenderer_ = $BubbleBlockItemRenderer$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/client/gui/$StyledTextFieldHelper" {
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$TextFieldHelper$CursorStep, $TextFieldHelper$CursorStep$Type} from "packages/net/minecraft/client/gui/font/$TextFieldHelper$CursorStep"
import {$TextFieldHelper, $TextFieldHelper$Type} from "packages/net/minecraft/client/gui/font/$TextFieldHelper"
import {$ChatFormatting, $ChatFormatting$Type} from "packages/net/minecraft/$ChatFormatting"

export class $StyledTextFieldHelper extends $TextFieldHelper {

constructor(supplier: $Supplier$Type<(string)>, consumer: $Consumer$Type<(string)>, supplier2: $Supplier$Type<(string)>, consumer2: $Consumer$Type<(string)>, predicate: $Predicate$Type<(string)>)

public "moveBy"(i: integer, keepSelection: boolean, cursorStep: $TextFieldHelper$CursorStep$Type): void
public "removeFromCursor"(i: integer, cursorStep: $TextFieldHelper$CursorStep$Type): void
public "insertStyledText"(text: string, color: $ChatFormatting$Type, style: $ChatFormatting$Type): void
public "formatSelected"(ink: $ChatFormatting$Type, quill: $ChatFormatting$Type): void
public "setCursorPos"(textIndex: integer, keepSelection: boolean): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $StyledTextFieldHelper$Type = ($StyledTextFieldHelper);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $StyledTextFieldHelper_ = $StyledTextFieldHelper$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/integration/$WaystonesCompat" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"

export class $WaystonesCompat {

constructor()

public static "getName"(te: $BlockEntity$Type): $Component
public static "isWaystone"(te: $BlockEntity$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WaystonesCompat$Type = ($WaystonesCompat);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WaystonesCompat_ = $WaystonesCompat$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/util/math/$ColorUtils" {
import {$DataResult, $DataResult$Type} from "packages/com/mojang/serialization/$DataResult"
import {$Vector3f, $Vector3f$Type} from "packages/org/joml/$Vector3f"
import {$Codec, $Codec$Type} from "packages/com/mojang/serialization/$Codec"

export class $ColorUtils {
static readonly "CODEC": $Codec<(integer)>
static readonly "MINECRAFT_LIGHT_POWER": float
static readonly "MINECRAFT_AMBIENT_LIGHT": float

constructor()

public static "multiply"(color: integer, amount: float): integer
public static "pack"(rgb: (float)[]): integer
public static "isValidStringOrError"(s: string): $DataResult<(string)>
public static "shadeColor"(normal: $Vector3f$Type, color: integer): integer
public static "swapFormat"(argb: integer): integer
public static "getShading"(normal: $Vector3f$Type): float
public static "isValidString"(s: string): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ColorUtils$Type = ($ColorUtils);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ColorUtils_ = $ColorUtils$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/common/tile/$ToolHookBlockTile" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$ExtraModelData$Builder, $ExtraModelData$Builder$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$ExtraModelData$Builder"
import {$DynamicRenderedItemDisplayTile, $DynamicRenderedItemDisplayTile$Type} from "packages/net/mehvahdjukaar/moonlight/api/block/$DynamicRenderedItemDisplayTile"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$ModelDataKey, $ModelDataKey$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$ModelDataKey"
import {$LockCode, $LockCode$Type} from "packages/net/minecraft/world/$LockCode"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $ToolHookBlockTile extends $DynamicRenderedItemDisplayTile {
static readonly "ITEM": $ModelDataKey<($ItemStack)>
static readonly "IS_FANCY": $ModelDataKey<(boolean)>
static readonly "LOOT_TABLE_TAG": string
static readonly "LOOT_TABLE_SEED_TAG": string
 "lootTable": $ResourceLocation
 "lootTableSeed": long
 "lockKey": $LockCode
 "blockState": $BlockState

constructor(pos: $BlockPos$Type, state: $BlockState$Type)

public "updateTileOnInventoryChanged"(): void
public "updateClientVisualsOnLoad"(): void
public "isNeverFancy"(): boolean
public static "isValidTool"(item: $Item$Type): boolean
public "canPlaceItem"(index: integer, stack: $ItemStack$Type): boolean
public "addExtraModelData"(builder: $ExtraModelData$Builder$Type): void
public "getPersistentData"(): $CompoundTag
public "onChunkUnloaded"(): void
public static "stillValidBlockEntity"(arg0: $BlockEntity$Type, arg1: $Player$Type, arg2: integer): boolean
public static "stillValidBlockEntity"(arg0: $BlockEntity$Type, arg1: $Player$Type): boolean
public static "tryClear"(arg0: any): void
get "neverFancy"(): boolean
get "persistentData"(): $CompoundTag
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ToolHookBlockTile$Type = ($ToolHookBlockTile);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ToolHookBlockTile_ = $ToolHookBlockTile$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/renderers/entities/layers/$QuiverLayer" {
import {$RenderLayer, $RenderLayer$Type} from "packages/net/minecraft/client/renderer/entity/layers/$RenderLayer"
import {$HumanoidModel, $HumanoidModel$Type} from "packages/net/minecraft/client/model/$HumanoidModel"
import {$RenderLayerParent, $RenderLayerParent$Type} from "packages/net/minecraft/client/renderer/entity/$RenderLayerParent"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$IQuiverEntity, $IQuiverEntity$Type} from "packages/net/mehvahdjukaar/supplementaries/api/$IQuiverEntity"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $QuiverLayer<T extends ($LivingEntity) & ($IQuiverEntity), M extends $HumanoidModel<(T)>> extends $RenderLayer<(T), (M)> {

constructor(parent: $RenderLayerParent$Type<(T), (M)>, isSkeleton: boolean)

public "render"(poseStack: $PoseStack$Type, buffer: $MultiBufferSource$Type, packedLight: integer, livingEntity: T, limbSwing: float, limbSwingAmount: float, partialTick: float, ageInTicks: float, netHeadYaw: float, headPitch: float): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $QuiverLayer$Type<T, M> = ($QuiverLayer<(T), (M)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $QuiverLayer_<T, M> = $QuiverLayer$Type<(T), (M)>;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/network/$ServerBoundSetBlackboardPacket" {
import {$Message, $Message$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/network/$Message"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$ChannelHandler$Context, $ChannelHandler$Context$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/network/$ChannelHandler$Context"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $ServerBoundSetBlackboardPacket implements $Message {

constructor(buf: $FriendlyByteBuf$Type)
constructor(pos: $BlockPos$Type, pixels: ((byte)[])[])

public "handle"(context: $ChannelHandler$Context$Type): void
public "writeToBuffer"(buf: $FriendlyByteBuf$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ServerBoundSetBlackboardPacket$Type = ($ServerBoundSetBlackboardPacket);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ServerBoundSetBlackboardPacket_ = $ServerBoundSetBlackboardPacket$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/blocks/$FlintBlock" {
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$PistonMovingBlockEntity, $PistonMovingBlockEntity$Type} from "packages/net/minecraft/world/level/block/piston/$PistonMovingBlockEntity"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$IPistonMotionReact, $IPistonMotionReact$Type} from "packages/net/mehvahdjukaar/moonlight/api/block/$IPistonMotionReact"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$AABB, $AABB$Type} from "packages/net/minecraft/world/phys/$AABB"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $FlintBlock extends $Block implements $IPistonMotionReact {
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(properties: $BlockBehaviour$Properties$Type)

public "stepOn"(level: $Level$Type, pos: $BlockPos$Type, state: $BlockState$Type, entity: $Entity$Type): void
public "onMoved"(movedState: $BlockState$Type, level: $Level$Type, pos: $BlockPos$Type, direction: $Direction$Type, extending: boolean, tile: $PistonMovingBlockEntity$Type): void
public "neighborChanged"(state: $BlockState$Type, level: $Level$Type, pos: $BlockPos$Type, oldBlock: $Block$Type, targetPos: $BlockPos$Type, isMoving: boolean): void
public static "canBlockCreateSpark"(state: $BlockState$Type, level: $Level$Type, pos: $BlockPos$Type, face: $Direction$Type): boolean
public "ticksWhileMoved"(): boolean
public "onMoved"(level: $Level$Type, pos: $BlockPos$Type, movedState: $BlockState$Type, direction: $Direction$Type, extending: boolean): void
public "moveTick"(level: $Level$Type, pos: $BlockPos$Type, movedState: $BlockState$Type, aabb: $AABB$Type, tile: $PistonMovingBlockEntity$Type): void
/**
 * 
 * @deprecated
 */
public "moveTick"(movedState: $BlockState$Type, level: $Level$Type, pos: $BlockPos$Type, aabb: $AABB$Type, tile: $PistonMovingBlockEntity$Type): void
public "onMagnetMoved"(level: $Level$Type, blockPos: $BlockPos$Type, direction: $Direction$Type, blockState: $BlockState$Type, blockEntity: $BlockEntity$Type): void
public "canMagnetMove"(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $Direction$Type, arg3: $BlockState$Type, arg4: $BlockEntity$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FlintBlock$Type = ($FlintBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FlintBlock_ = $FlintBlock$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/forge/$RemapHandler" {
import {$MissingMappingsEvent, $MissingMappingsEvent$Type} from "packages/net/minecraftforge/registries/$MissingMappingsEvent"

export class $RemapHandler {

constructor()

public static "onRemapBlocks"(event: $MissingMappingsEvent$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RemapHandler$Type = ($RemapHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RemapHandler_ = $RemapHandler$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/mixins/$MixinPlugin" {
import {$SimpleMixinPlugin, $SimpleMixinPlugin$Type} from "packages/net/mehvahdjukaar/moonlight/api/misc/$SimpleMixinPlugin"

export class $MixinPlugin extends $SimpleMixinPlugin {

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MixinPlugin$Type = ($MixinPlugin);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MixinPlugin_ = $MixinPlugin$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/common/block/$DoubleCakeBlock" {
import {$IntegerProperty, $IntegerProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$IntegerProperty"
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$CakeRegistry$CakeType, $CakeRegistry$CakeType$Type} from "packages/net/mehvahdjukaar/amendments/common/$CakeRegistry$CakeType"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$DirectionProperty, $DirectionProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$DirectionProperty"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$CollisionContext, $CollisionContext$Type} from "packages/net/minecraft/world/phys/shapes/$CollisionContext"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$SoundType, $SoundType$Type} from "packages/net/minecraft/world/level/block/$SoundType"
import {$Explosion, $Explosion$Type} from "packages/net/minecraft/world/level/$Explosion"
import {$DirectionalCakeBlock, $DirectionalCakeBlock$Type} from "packages/net/mehvahdjukaar/amendments/common/block/$DirectionalCakeBlock"

export class $DoubleCakeBlock extends $DirectionalCakeBlock {
static readonly "FACING": $DirectionProperty
static readonly "WATERLOGGED": $BooleanProperty
readonly "type": $CakeRegistry$CakeType
static readonly "MAX_BITES": integer
static readonly "BITES": $IntegerProperty
static readonly "FULL_CAKE_SIGNAL": integer
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(type: $CakeRegistry$CakeType$Type)

public "getCloneItemStack"(level: $BlockGetter$Type, pos: $BlockPos$Type, state: $BlockState$Type): $ItemStack
public "getSoundType"(state: $BlockState$Type): $SoundType
public "getExplosionResistance"(state: $BlockState$Type, level: $BlockGetter$Type, pos: $BlockPos$Type, explosion: $Explosion$Type): float
public "getSoundType"(state: $BlockState$Type, world: $LevelReader$Type, pos: $BlockPos$Type, entity: $Entity$Type): $SoundType
public "removeSlice"(state: $BlockState$Type, pos: $BlockPos$Type, level: $LevelAccessor$Type, dir: $Direction$Type): void
public "use"(state: $BlockState$Type, level: $Level$Type, pos: $BlockPos$Type, player: $Player$Type, handIn: $InteractionHand$Type, hit: $BlockHitResult$Type): $InteractionResult
public "getShape"(state: $BlockState$Type, worldIn: $BlockGetter$Type, pos: $BlockPos$Type, context: $CollisionContext$Type): $VoxelShape
public "getDestroyProgress"(state: $BlockState$Type, player: $Player$Type, worldIn: $BlockGetter$Type, pos: $BlockPos$Type): float
public "animateTick"(stateIn: $BlockState$Type, level: $Level$Type, pos: $BlockPos$Type, rand: $RandomSource$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DoubleCakeBlock$Type = ($DoubleCakeBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DoubleCakeBlock_ = $DoubleCakeBlock$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/platform/$ClientHelper$ModelLayerEvent" {
import {$ModelLayerLocation, $ModelLayerLocation$Type} from "packages/net/minecraft/client/model/geom/$ModelLayerLocation"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$LayerDefinition, $LayerDefinition$Type} from "packages/net/minecraft/client/model/geom/builders/$LayerDefinition"

export interface $ClientHelper$ModelLayerEvent {

 "register"(arg0: $ModelLayerLocation$Type, arg1: $Supplier$Type<($LayerDefinition$Type)>): void

(arg0: $ModelLayerLocation$Type, arg1: $Supplier$Type<($LayerDefinition$Type)>): void
}

export namespace $ClientHelper$ModelLayerEvent {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientHelper$ModelLayerEvent$Type = ($ClientHelper$ModelLayerEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientHelper$ModelLayerEvent_ = $ClientHelper$ModelLayerEvent$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/faucet/$WaterCauldronInteraction" {
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$FluidOffer, $FluidOffer$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/faucet/$FluidOffer"
import {$FaucetTarget$BlState, $FaucetTarget$BlState$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/faucet/$FaucetTarget$BlState"
import {$SoftFluidStack, $SoftFluidStack$Type} from "packages/net/mehvahdjukaar/moonlight/api/fluids/$SoftFluidStack"
import {$FaucetSource$BlState, $FaucetSource$BlState$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/faucet/$FaucetSource$BlState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $WaterCauldronInteraction implements $FaucetTarget$BlState, $FaucetSource$BlState {


public "fill"(level: $Level$Type, pos: $BlockPos$Type, state: $BlockState$Type, fluid: $SoftFluidStack$Type, minAmount: integer): integer
public "drain"(level: $Level$Type, pos: $BlockPos$Type, dir: $Direction$Type, source: $BlockState$Type, amount: integer): void
public "getProvidedFluid"(level: $Level$Type, pos: $BlockPos$Type, dir: $Direction$Type, source: $BlockState$Type): $FluidOffer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WaterCauldronInteraction$Type = ($WaterCauldronInteraction);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WaterCauldronInteraction_ = $WaterCauldronInteraction$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/faucet/$DataFluidInteraction" {
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$RuleTest, $RuleTest$Type} from "packages/net/minecraft/world/level/levelgen/structure/templatesystem/$RuleTest"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$FluidOffer, $FluidOffer$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/faucet/$FluidOffer"
import {$SoftFluidStack, $SoftFluidStack$Type} from "packages/net/mehvahdjukaar/moonlight/api/fluids/$SoftFluidStack"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$FaucetSource$BlState, $FaucetSource$BlState$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/faucet/$FaucetSource$BlState"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Codec, $Codec$Type} from "packages/com/mojang/serialization/$Codec"

export class $DataFluidInteraction extends $Record implements $FaucetSource$BlState {
static readonly "CODEC": $Codec<($DataFluidInteraction)>

constructor(target: $RuleTest$Type, softFluid: $SoftFluidStack$Type, amount: integer, output: $Optional$Type<($BlockState$Type)>)

public "equals"(o: any): boolean
public "target"(): $RuleTest
public "toString"(): string
public "hashCode"(): integer
public "amount"(): integer
public "output"(): $Optional<($BlockState)>
public "drain"(level: $Level$Type, pos: $BlockPos$Type, dir: $Direction$Type, source: $BlockState$Type, amount: integer): void
public "softFluid"(): $SoftFluidStack
public "getProvidedFluid"(level: $Level$Type, pos: $BlockPos$Type, dir: $Direction$Type, state: $BlockState$Type): $FluidOffer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DataFluidInteraction$Type = ($DataFluidInteraction);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DataFluidInteraction_ = $DataFluidInteraction$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/faucet/$FaucetSource$Tile" {
import {$FaucetSource, $FaucetSource$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/faucet/$FaucetSource"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$FluidOffer, $FluidOffer$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/faucet/$FluidOffer"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export interface $FaucetSource$Tile extends $FaucetSource<($BlockEntity)> {

 "drain"(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $Direction$Type, arg3: $BlockEntity$Type, arg4: integer): void
 "getProvidedFluid"(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $Direction$Type, arg3: $BlockEntity$Type): $FluidOffer
}

export namespace $FaucetSource$Tile {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FaucetSource$Tile$Type = ($FaucetSource$Tile);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FaucetSource$Tile_ = $FaucetSource$Tile$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/integration/create/$TextHolderDisplayTarget" {
import {$DisplayTarget, $DisplayTarget$Type} from "packages/com/simibubi/create/content/redstone/displayLink/target/$DisplayTarget"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$DisplayLinkContext, $DisplayLinkContext$Type} from "packages/com/simibubi/create/content/redstone/displayLink/$DisplayLinkContext"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$DisplayTargetStats, $DisplayTargetStats$Type} from "packages/com/simibubi/create/content/redstone/displayLink/target/$DisplayTargetStats"

export class $TextHolderDisplayTarget extends $DisplayTarget {
 "id": $ResourceLocation

constructor()

public "provideStats"(context: $DisplayLinkContext$Type): $DisplayTargetStats
public "acceptText"(line: integer, text: $List$Type<($MutableComponent$Type)>, context: $DisplayLinkContext$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TextHolderDisplayTarget$Type = ($TextHolderDisplayTarget);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TextHolderDisplayTarget_ = $TextHolderDisplayTarget$Type;
}}
declare module "packages/net/mehvahdjukaar/modelfix/moonlight_configs/$ConfigBuilder" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$ConfigType, $ConfigType$Type} from "packages/net/mehvahdjukaar/modelfix/moonlight_configs/$ConfigType"
import {$ConfigSpec, $ConfigSpec$Type} from "packages/net/mehvahdjukaar/modelfix/moonlight_configs/$ConfigSpec"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Runnable, $Runnable$Type} from "packages/java/lang/$Runnable"

export class $ConfigBuilder {
static readonly "STRING_CHECK": $Predicate<(any)>
static readonly "LIST_STRING_CHECK": $Predicate<(any)>
static readonly "COLOR_CHECK": $Predicate<(any)>

constructor(name: $ResourceLocation$Type, type: $ConfigType$Type)

public "getName"(): $ResourceLocation
public "comment"(comment: string): $ConfigBuilder
public static "create"(name: $ResourceLocation$Type, type: $ConfigType$Type): $ConfigBuilder
public "build"(): $ConfigSpec
public "push"(arg0: string): $ConfigBuilder
public "pop"(): $ConfigBuilder
public "description"(name: string): $Component
public "defineColor"(arg0: string, arg1: integer): $Supplier<(integer)>
public "setSynced"(): $ConfigBuilder
/**
 * 
 * @deprecated
 */
public "defineForgeList"<T>(arg0: string, arg1: $List$Type<(any)>, arg2: $Predicate$Type<(any)>): $Supplier<($List<(any)>)>
public "tooltipKey"(name: string): string
public "buildAndRegister"(): $ConfigSpec
public "define"(arg0: string, arg1: boolean): $Supplier<(boolean)>
public "define"<V extends $Enum<(V)>>(arg0: string, arg1: V): $Supplier<(V)>
public "define"<T extends string>(name: string, defaultValue: $List$Type<(any)>): $Supplier<($List<(string)>)>
public "define"(name: string, defaultValue: string): $Supplier<(string)>
public "define"(arg0: string, arg1: string, arg2: $Predicate$Type<(any)>): $Supplier<(string)>
public "define"<T extends string>(arg0: string, arg1: $List$Type<(any)>, arg2: $Predicate$Type<(any)>): $Supplier<($List<(string)>)>
public "define"(arg0: string, arg1: double, arg2: double, arg3: double): $Supplier<(double)>
public "define"(arg0: string, arg1: integer, arg2: integer, arg3: integer): $Supplier<(integer)>
public "tooltip"(name: string): $Component
public "onChange"(callback: $Runnable$Type): $ConfigBuilder
public "translationKey"(name: string): string
get "name"(): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ConfigBuilder$Type = ($ConfigBuilder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ConfigBuilder_ = $ConfigBuilder$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/integration/forge/configured/$ModConfigSelectScreen" {
import {$FormattedCharSequence, $FormattedCharSequence$Type} from "packages/net/minecraft/util/$FormattedCharSequence"
import {$CustomConfigSelectScreen, $CustomConfigSelectScreen$Type} from "packages/net/mehvahdjukaar/moonlight/api/integration/configured/$CustomConfigSelectScreen"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$List, $List$Type} from "packages/java/util/$List"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $ModConfigSelectScreen extends $CustomConfigSelectScreen {
static readonly "MISC_ICONS": $ResourceLocation
static readonly "CONFIGURED_LOGO": $ResourceLocation
 "tooltipText": $List<($FormattedCharSequence)>
 "tooltipOutlineColour": integer
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering

constructor(parent: $Screen$Type)

public static "loadTexture"(arg0: any, arg1: $ResourceLocation$Type): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModConfigSelectScreen$Type = ($ModConfigSelectScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModConfigSelectScreen_ = $ModConfigSelectScreen$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/misc/$MapRegistry" {
import {$Comparable, $Comparable$Type} from "packages/java/lang/$Comparable"
import {$MapCodec, $MapCodec$Type} from "packages/com/mojang/serialization/$MapCodec"
import {$UnboundedMapCodec, $UnboundedMapCodec$Type} from "packages/com/mojang/serialization/codecs/$UnboundedMapCodec"
import {$MapEncoder, $MapEncoder$Type} from "packages/com/mojang/serialization/$MapEncoder"
import {$DynamicOps, $DynamicOps$Type} from "packages/com/mojang/serialization/$DynamicOps"
import {$Encoder, $Encoder$Type} from "packages/com/mojang/serialization/$Encoder"
import {$Codec$ResultFunction, $Codec$ResultFunction$Type} from "packages/com/mojang/serialization/$Codec$ResultFunction"
import {$Either, $Either$Type} from "packages/com/mojang/datafixers/util/$Either"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Codec, $Codec$Type} from "packages/com/mojang/serialization/$Codec"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$UnaryOperator, $UnaryOperator$Type} from "packages/java/util/function/$UnaryOperator"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Decoder, $Decoder$Type} from "packages/com/mojang/serialization/$Decoder"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$Lifecycle, $Lifecycle$Type} from "packages/com/mojang/serialization/$Lifecycle"
import {$Keyable, $Keyable$Type} from "packages/com/mojang/serialization/$Keyable"
import {$Decoder$Boxed, $Decoder$Boxed$Type} from "packages/com/mojang/serialization/$Decoder$Boxed"
import {$MapDecoder, $MapDecoder$Type} from "packages/com/mojang/serialization/$MapDecoder"
import {$Dynamic, $Dynamic$Type} from "packages/com/mojang/serialization/$Dynamic"
import {$DataResult, $DataResult$Type} from "packages/com/mojang/serialization/$DataResult"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$Decoder$Simple, $Decoder$Simple$Type} from "packages/com/mojang/serialization/$Decoder$Simple"
import {$SimpleMapCodec, $SimpleMapCodec$Type} from "packages/com/mojang/serialization/codecs/$SimpleMapCodec"
import {$Decoder$Terminal, $Decoder$Terminal$Type} from "packages/com/mojang/serialization/$Decoder$Terminal"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$Pair, $Pair$Type} from "packages/com/mojang/datafixers/util/$Pair"
import {$CodecMapRegistry, $CodecMapRegistry$Type} from "packages/net/mehvahdjukaar/moonlight/api/misc/$CodecMapRegistry"
import {$Map$Entry, $Map$Entry$Type} from "packages/java/util/$Map$Entry"

export class $MapRegistry<T> implements $Codec<(T)> {

constructor(name: string)
/**
 * 
 * @deprecated
 */
constructor()

public "dispatch"<E>(type: $Function$Type<(any), (any)>): $Codec<(E)>
public "clear"(): void
public "decode"<U>(ops: $DynamicOps$Type<(U)>, json: U): $DataResult<($Pair<(T), (U)>)>
public "encode"<U>(object: T, ops: $DynamicOps$Type<(U)>, prefix: U): $DataResult<(U)>
public "getValue"(name: $ResourceLocation$Type): T
public "getValue"(name: string): T
public "getKey"(value: T): $ResourceLocation
public "register"<B extends T>(name: string, value: B): T
public "register"<B extends T>(name: $ResourceLocation$Type, value: B): T
public "containsKey"(name: $ResourceLocation$Type): boolean
public "keySet"(): $Set<($ResourceLocation)>
public "getEntries"(): $Set<($Map$Entry<($ResourceLocation), (T)>)>
public static "ofCodec"<B>(name: string): $CodecMapRegistry<(B)>
public static "ofCodec"<B>(): $CodecMapRegistry<(B)>
public "getValues"(): $Set<(T)>
public "dispatch"<E>(arg0: string, arg1: $Function$Type<(any), (any)>, arg2: $Function$Type<(any), (any)>): $Codec<(E)>
public "dispatch"<E>(arg0: $Function$Type<(any), (any)>, arg1: $Function$Type<(any), (any)>): $Codec<(E)>
public static "of"<A>(arg0: $MapEncoder$Type<(T)>, arg1: $MapDecoder$Type<(T)>, arg2: $Supplier$Type<(string)>): $MapCodec<(T)>
public static "of"<A>(arg0: $MapEncoder$Type<(T)>, arg1: $MapDecoder$Type<(T)>): $MapCodec<(T)>
public static "of"<A>(arg0: $Encoder$Type<(T)>, arg1: $Decoder$Type<(T)>, arg2: string): $Codec<(T)>
public static "of"<A>(arg0: $Encoder$Type<(T)>, arg1: $Decoder$Type<(T)>): $Codec<(T)>
public static "list"<E>(arg0: $Codec$Type<(E)>): $Codec<($List<(E)>)>
public "orElse"(arg0: T): $Codec<(T)>
public "orElse"(arg0: $UnaryOperator$Type<(string)>, arg1: T): $Codec<(T)>
public "orElse"(arg0: $Consumer$Type<(string)>, arg1: T): $Codec<(T)>
public static "checkRange"<N extends (number) & ($Comparable<(N)>)>(arg0: N, arg1: N): $Function<(N), ($DataResult<(N)>)>
public static "unit"<A>(arg0: T): $Codec<(T)>
public static "unit"<A>(arg0: $Supplier$Type<(T)>): $Codec<(T)>
public "orElseGet"(arg0: $Supplier$Type<(any)>): $Codec<(T)>
public "orElseGet"(arg0: $Consumer$Type<(string)>, arg1: $Supplier$Type<(any)>): $Codec<(T)>
public "orElseGet"(arg0: $UnaryOperator$Type<(string)>, arg1: $Supplier$Type<(any)>): $Codec<(T)>
public static "pair"<F, S>(arg0: $Codec$Type<(F)>, arg1: $Codec$Type<(S)>): $Codec<($Pair<(F), (S)>)>
public "xmap"<S>(arg0: $Function$Type<(any), (any)>, arg1: $Function$Type<(any), (any)>): $Codec<(S)>
public static "optionalField"<F>(arg0: string, arg1: $Codec$Type<(F)>): $MapCodec<($Optional<(F)>)>
public "deprecated"(arg0: integer): $Codec<(T)>
public "withLifecycle"(arg0: $Lifecycle$Type): $Codec<(T)>
public "optionalFieldOf"(arg0: string): $MapCodec<($Optional<(T)>)>
public "optionalFieldOf"(arg0: string, arg1: T, arg2: $Lifecycle$Type): $MapCodec<(T)>
public "optionalFieldOf"(arg0: string, arg1: $Lifecycle$Type, arg2: T, arg3: $Lifecycle$Type): $MapCodec<(T)>
public "optionalFieldOf"(arg0: string, arg1: T): $MapCodec<(T)>
public "mapResult"(arg0: $Codec$ResultFunction$Type<(T)>): $Codec<(T)>
public "flatXmap"<S>(arg0: $Function$Type<(any), (any)>, arg1: $Function$Type<(any), (any)>): $Codec<(S)>
public "promotePartial"(arg0: $Consumer$Type<(string)>): $Codec<(T)>
public "partialDispatch"<E>(arg0: string, arg1: $Function$Type<(any), (any)>, arg2: $Function$Type<(any), (any)>): $Codec<(E)>
public "dispatchMap"<E>(arg0: $Function$Type<(any), (any)>, arg1: $Function$Type<(any), (any)>): $MapCodec<(E)>
public "dispatchMap"<E>(arg0: string, arg1: $Function$Type<(any), (any)>, arg2: $Function$Type<(any), (any)>): $MapCodec<(E)>
public static "compoundList"<K, V>(arg0: $Codec$Type<(K)>, arg1: $Codec$Type<(V)>): $Codec<($List<($Pair<(K), (V)>)>)>
public static "either"<F, S>(arg0: $Codec$Type<(F)>, arg1: $Codec$Type<(S)>): $Codec<($Either<(F), (S)>)>
public static "mapPair"<F, S>(arg0: $MapCodec$Type<(F)>, arg1: $MapCodec$Type<(S)>): $MapCodec<($Pair<(F), (S)>)>
public static "mapEither"<F, S>(arg0: $MapCodec$Type<(F)>, arg1: $MapCodec$Type<(S)>): $MapCodec<($Either<(F), (S)>)>
public "dispatchStable"<E>(arg0: $Function$Type<(any), (any)>, arg1: $Function$Type<(any), (any)>): $Codec<(E)>
public "comapFlatMap"<S>(arg0: $Function$Type<(any), (any)>, arg1: $Function$Type<(any), (any)>): $Codec<(S)>
public static "unboundedMap"<K, V>(arg0: $Codec$Type<(K)>, arg1: $Codec$Type<(V)>): $UnboundedMapCodec<(K), (V)>
public "flatComapMap"<S>(arg0: $Function$Type<(any), (any)>, arg1: $Function$Type<(any), (any)>): $Codec<(S)>
public static "simpleMap"<K, V>(arg0: $Codec$Type<(K)>, arg1: $Codec$Type<(V)>, arg2: $Keyable$Type): $SimpleMapCodec<(K), (V)>
public static "doubleRange"(arg0: double, arg1: double): $Codec<(double)>
public static "floatRange"(arg0: float, arg1: float): $Codec<(float)>
public static "intRange"(arg0: integer, arg1: integer): $Codec<(integer)>
public "listOf"(): $Codec<($List<(T)>)>
public "stable"(): $Codec<(T)>
public static "empty"<A>(): $MapEncoder<(T)>
public static "error"<A>(arg0: string): $Encoder<(T)>
public "flatComap"<B>(arg0: $Function$Type<(any), (any)>): $Encoder<(B)>
public "comap"<B>(arg0: $Function$Type<(any), (any)>): $Encoder<(B)>
public "encodeStart"<T>(arg0: $DynamicOps$Type<(T)>, arg1: T): $DataResult<(T)>
public "decode"<T>(arg0: $Dynamic$Type<(T)>): $DataResult<($Pair<(T), (T)>)>
public "map"<B>(arg0: $Function$Type<(any), (any)>): $Decoder<(B)>
public "flatMap"<B>(arg0: $Function$Type<(any), (any)>): $Decoder<(B)>
public "parse"<T>(arg0: $Dynamic$Type<(T)>): $DataResult<(T)>
public "parse"<T>(arg0: $DynamicOps$Type<(T)>, arg1: T): $DataResult<(T)>
public "boxed"(): $Decoder$Boxed<(T)>
public "simple"(): $Decoder$Simple<(T)>
public static "ofBoxed"<A>(arg0: $Decoder$Boxed$Type<(any)>): $Decoder<(T)>
public static "ofTerminal"<A>(arg0: $Decoder$Terminal$Type<(any)>): $Decoder<(T)>
public static "ofSimple"<A>(arg0: $Decoder$Simple$Type<(any)>): $Decoder<(T)>
public "terminal"(): $Decoder$Terminal<(T)>
get "entries"(): $Set<($Map$Entry<($ResourceLocation), (T)>)>
get "values"(): $Set<(T)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MapRegistry$Type<T> = ($MapRegistry<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MapRegistry_<T> = $MapRegistry$Type<(T)>;
}}
declare module "packages/net/mehvahdjukaar/dummmmmmy/configs/$CommonConfigs$Mode" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $CommonConfigs$Mode extends $Enum<($CommonConfigs$Mode)> {
static readonly "ALL_ENTITIES": $CommonConfigs$Mode
static readonly "ALL_PLAYERS": $CommonConfigs$Mode
static readonly "LOCAL_PLAYER": $CommonConfigs$Mode
static readonly "NONE": $CommonConfigs$Mode


public static "values"(): ($CommonConfigs$Mode)[]
public static "valueOf"(name: string): $CommonConfigs$Mode
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CommonConfigs$Mode$Type = (("all_players") | ("local_player") | ("none") | ("all_entities")) | ($CommonConfigs$Mode);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CommonConfigs$Mode_ = $CommonConfigs$Mode$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/map/$MapHelper" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$MapDecoration$Type, $MapDecoration$Type$Type} from "packages/net/minecraft/world/level/saveddata/maps/$MapDecoration$Type"
import {$MapItemSavedData, $MapItemSavedData$Type} from "packages/net/minecraft/world/level/saveddata/maps/$MapItemSavedData"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$MapDecorationType, $MapDecorationType$Type} from "packages/net/mehvahdjukaar/moonlight/api/map/type/$MapDecorationType"

export class $MapHelper {

constructor()

public static "toggleMarkersAtPos"(level: $Level$Type, pos: $BlockPos$Type, stack: $ItemStack$Type, player: $Player$Type): boolean
public static "removeAllCustomMarkers"(level: $Level$Type, stack: $ItemStack$Type, player: $Player$Type): boolean
public static "getMapData"(stack: $ItemStack$Type, level: $Level$Type, player: $Player$Type): $MapItemSavedData
public static "addDecorationToMap"(stack: $ItemStack$Type, pos: $BlockPos$Type, id: $ResourceLocation$Type, mapColor: integer): void
public static "addDecorationToMap"(stack: $ItemStack$Type, pos: $BlockPos$Type, type: $MapDecorationType$Type<(any), (any)>, mapColor: integer): void
/**
 * 
 * @deprecated
 */
public static "getMapId"(stack: $ItemStack$Type, player: $Player$Type, data: any): integer
public static "addVanillaDecorations"(stack: $ItemStack$Type, pos: $BlockPos$Type, type: $MapDecoration$Type$Type, mapColor: integer): void
public static "addSimpleDecorationToMap"(data: $MapItemSavedData$Type, level: $Level$Type, id: $ResourceLocation$Type, pos: $BlockPos$Type, name: $Component$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MapHelper$Type = ($MapHelper);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MapHelper_ = $MapHelper$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/renderers/entities/models/$HatStandModel" {
import {$HatStandEntity, $HatStandEntity$Type} from "packages/net/mehvahdjukaar/supplementaries/common/entities/$HatStandEntity"
import {$IRootModel, $IRootModel$Type} from "packages/net/mehvahdjukaar/supplementaries/client/renderers/entities/models/$IRootModel"
import {$HumanoidModel, $HumanoidModel$Type} from "packages/net/minecraft/client/model/$HumanoidModel"
import {$HumanoidModel$ArmPose, $HumanoidModel$ArmPose$Type} from "packages/net/minecraft/client/model/$HumanoidModel$ArmPose"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$ModelPart, $ModelPart$Type} from "packages/net/minecraft/client/model/geom/$ModelPart"
import {$LayerDefinition, $LayerDefinition$Type} from "packages/net/minecraft/client/model/geom/builders/$LayerDefinition"

export class $HatStandModel extends $HumanoidModel<($HatStandEntity)> implements $IRootModel {
static readonly "OVERLAY_SCALE": float
static readonly "HAT_OVERLAY_SCALE": float
static readonly "LEGGINGS_OVERLAY_SCALE": float
static readonly "TOOT_HORN_XROT_BASE": float
static readonly "TOOT_HORN_YROT_BASE": float
readonly "head": $ModelPart
readonly "hat": $ModelPart
readonly "body": $ModelPart
readonly "rightArm": $ModelPart
readonly "leftArm": $ModelPart
readonly "rightLeg": $ModelPart
readonly "leftLeg": $ModelPart
 "leftArmPose": $HumanoidModel$ArmPose
 "rightArmPose": $HumanoidModel$ArmPose
 "crouching": boolean
 "swimAmount": float
readonly "scaleHead": boolean
readonly "babyYHeadOffset": float
readonly "babyZHeadOffset": float
readonly "babyHeadScale": float
readonly "babyBodyScale": float
readonly "bodyYOffset": float
 "attackTime": float
 "riding": boolean
 "young": boolean

constructor(modelPart: $ModelPart$Type)

public "getRoot"(): $ModelPart
public static "createArmorMesh"(): $LayerDefinition
public "translateAndRotate"(modelPart: $ModelPart$Type, poseStack: $PoseStack$Type): void
public static "createMesh"(): $LayerDefinition
public "setupAnim"(entity: $HatStandEntity$Type, limbSwing: float, limbSwingAmount: float, ageInTicks: float, netHeadYaw: float, headPitch: float): void
public "prepareMobModel"(entity: $HatStandEntity$Type, limbSwing: float, limbSwingAmount: float, partialTick: float): void
public "getHead"(): $ModelPart
get "root"(): $ModelPart
get "head"(): $ModelPart
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $HatStandModel$Type = ($HatStandModel);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $HatStandModel_ = $HatStandModel$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/items/crafting/$RopeArrowCreateRecipe" {
import {$RegistryAccess, $RegistryAccess$Type} from "packages/net/minecraft/core/$RegistryAccess"
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$RecipeSerializer, $RecipeSerializer$Type} from "packages/net/minecraft/world/item/crafting/$RecipeSerializer"
import {$CustomRecipe, $CustomRecipe$Type} from "packages/net/minecraft/world/item/crafting/$CustomRecipe"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$CraftingContainer, $CraftingContainer$Type} from "packages/net/minecraft/world/inventory/$CraftingContainer"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$CraftingBookCategory, $CraftingBookCategory$Type} from "packages/net/minecraft/world/item/crafting/$CraftingBookCategory"

export class $RopeArrowCreateRecipe extends $CustomRecipe {

constructor(idIn: $ResourceLocation$Type, category: $CraftingBookCategory$Type)

public "matches"(inv: $CraftingContainer$Type, worldIn: $Level$Type): boolean
public "getRemainingItems"(inv: $CraftingContainer$Type): $NonNullList<($ItemStack)>
public "canCraftInDimensions"(width: integer, height: integer): boolean
public "getSerializer"(): $RecipeSerializer<(any)>
public "assemble"(inv: $CraftingContainer$Type, access: $RegistryAccess$Type): $ItemStack
get "serializer"(): $RecipeSerializer<(any)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RopeArrowCreateRecipe$Type = ($RopeArrowCreateRecipe);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RopeArrowCreateRecipe_ = $RopeArrowCreateRecipe$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/commands/$AddCageMobCommand" {
import {$CommandSourceStack, $CommandSourceStack$Type} from "packages/net/minecraft/commands/$CommandSourceStack"
import {$Command, $Command$Type} from "packages/com/mojang/brigadier/$Command"
import {$CommandBuildContext, $CommandBuildContext$Type} from "packages/net/minecraft/commands/$CommandBuildContext"
import {$ArgumentBuilder, $ArgumentBuilder$Type} from "packages/com/mojang/brigadier/builder/$ArgumentBuilder"
import {$CommandDispatcher, $CommandDispatcher$Type} from "packages/com/mojang/brigadier/$CommandDispatcher"
import {$CommandContext, $CommandContext$Type} from "packages/com/mojang/brigadier/context/$CommandContext"

export class $AddCageMobCommand implements $Command<($CommandSourceStack)> {

constructor()

public "run"(context: $CommandContext$Type<($CommandSourceStack$Type)>): integer
public static "register"(dispatcher: $CommandDispatcher$Type<($CommandSourceStack$Type)>, context: $CommandBuildContext$Type): $ArgumentBuilder<($CommandSourceStack), (any)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AddCageMobCommand$Type = ($AddCageMobCommand);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AddCageMobCommand_ = $AddCageMobCommand$Type;
}}
declare module "packages/net/mehvahdjukaar/dummmmmmy/$Dummmmmmy" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$DamageType, $DamageType$Type} from "packages/net/minecraft/world/damagesource/$DamageType"
import {$SimpleParticleType, $SimpleParticleType$Type} from "packages/net/minecraft/core/particles/$SimpleParticleType"
import {$Logger, $Logger$Type} from "packages/org/apache/logging/log4j/$Logger"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"
import {$TargetDummyEntity, $TargetDummyEntity$Type} from "packages/net/mehvahdjukaar/dummmmmmy/common/$TargetDummyEntity"

export class $Dummmmmmy {
static readonly "MOD_ID": string
static readonly "LOGGER": $Logger
static readonly "TARGET_DUMMY_NAME": string
static readonly "TARGET_DUMMY": $Supplier<($EntityType<($TargetDummyEntity)>)>
static readonly "DUMMY_ITEM": $Supplier<($Item)>
static readonly "NUMBER_PARTICLE": $Supplier<($SimpleParticleType)>
static readonly "IS_THORN": $TagKey<($DamageType)>
static readonly "IS_FIRE": $TagKey<($DamageType)>
static readonly "IS_EXPLOSION": $TagKey<($DamageType)>
static readonly "IS_WITHER": $TagKey<($DamageType)>
static readonly "IS_COLD": $TagKey<($DamageType)>
static readonly "TRUE_DAMAGE": $ResourceLocation
static readonly "CRITICAL_DAMAGE": $ResourceLocation

constructor()

public static "res"(name: string): $ResourceLocation
public static "init"(): void
public static "setup"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Dummmmmmy$Type = ($Dummmmmmy);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Dummmmmmy_ = $Dummmmmmy$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/client/util/$ParticleUtil" {
import {$ParticleRenderType, $ParticleRenderType$Type} from "packages/net/minecraft/client/particle/$ParticleRenderType"
import {$ShaderInstance, $ShaderInstance$Type} from "packages/net/minecraft/client/renderer/$ShaderInstance"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$AABB, $AABB$Type} from "packages/net/minecraft/world/phys/$AABB"
import {$ParticleOptions, $ParticleOptions$Type} from "packages/net/minecraft/core/particles/$ParticleOptions"
import {$UniformInt, $UniformInt$Type} from "packages/net/minecraft/util/valueproviders/$UniformInt"

export class $ParticleUtil {
static "particleShader": $Supplier<($ShaderInstance)>
static readonly "ADDITIVE_TRANSLUCENCY_RENDER_TYPE": $ParticleRenderType

constructor()

public static "spawnParticlesOnBlockFaces"(level: $Level$Type, pos: $BlockPos$Type, particleOptions: $ParticleOptions$Type, uniformInt: $UniformInt$Type, minSpeed: float, maxSpeed: float, perpendicular: boolean): void
public static "spawnParticleOnBlockShape"(level: $Level$Type, pos: $BlockPos$Type, particleOptions: $ParticleOptions$Type, uniformInt: $UniformInt$Type, maxSpeed: float): void
public static "spawnParticleOnFace"(level: $Level$Type, pos: $BlockPos$Type, direction: $Direction$Type, particleOptions: $ParticleOptions$Type, minSpeed: float, maxSpeed: float, perpendicular: boolean): void
public static "spawnParticleOnBoundingBox"(bb: $AABB$Type, level: $Level$Type, particleOptions: $ParticleOptions$Type, uniformInt: $UniformInt$Type, maxSpeed: float): void
public static "spawnBreakParticles"(shape: $VoxelShape$Type, pPos: $BlockPos$Type, pState: $BlockState$Type, level: $Level$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ParticleUtil$Type = ($ParticleUtil);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ParticleUtil_ = $ParticleUtil$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/$ModBlockProperties$DisplayStatus" {
import {$StringRepresentable$EnumCodec, $StringRepresentable$EnumCodec$Type} from "packages/net/minecraft/util/$StringRepresentable$EnumCodec"
import {$StringRepresentable, $StringRepresentable$Type} from "packages/net/minecraft/util/$StringRepresentable"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$Keyable, $Keyable$Type} from "packages/com/mojang/serialization/$Keyable"
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"

export class $ModBlockProperties$DisplayStatus extends $Enum<($ModBlockProperties$DisplayStatus)> implements $StringRepresentable {
static readonly "NONE": $ModBlockProperties$DisplayStatus
static readonly "EMPTY": $ModBlockProperties$DisplayStatus
static readonly "FULL": $ModBlockProperties$DisplayStatus


public "toString"(): string
public static "values"(): ($ModBlockProperties$DisplayStatus)[]
public static "valueOf"(name: string): $ModBlockProperties$DisplayStatus
public "getSerializedName"(): string
public "hasTile"(): boolean
public "hasItem"(): boolean
public static "fromEnumWithMapping"<E extends ($Enum<(E)>) & ($StringRepresentable)>(arg0: $Supplier$Type<((E)[])>, arg1: $Function$Type<(string), (string)>): $StringRepresentable$EnumCodec<(E)>
public static "keys"(arg0: ($StringRepresentable$Type)[]): $Keyable
public static "fromEnum"<E extends ($Enum<(E)>) & ($StringRepresentable)>(arg0: $Supplier$Type<((E)[])>): $StringRepresentable$EnumCodec<(E)>
get "serializedName"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModBlockProperties$DisplayStatus$Type = (("none") | ("empty") | ("full")) | ($ModBlockProperties$DisplayStatus);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModBlockProperties$DisplayStatus_ = $ModBlockProperties$DisplayStatus$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/item/$WoodBasedBlockItem" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$BlockTypeBasedBlockItem, $BlockTypeBasedBlockItem$Type} from "packages/net/mehvahdjukaar/moonlight/api/item/$BlockTypeBasedBlockItem"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$AdditionalItemPlacement, $AdditionalItemPlacement$Type} from "packages/net/mehvahdjukaar/moonlight/api/item/additional_placements/$AdditionalItemPlacement"
import {$WoodType, $WoodType$Type} from "packages/net/mehvahdjukaar/moonlight/api/set/wood/$WoodType"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $WoodBasedBlockItem extends $BlockTypeBasedBlockItem<($WoodType)> {
static readonly "BLOCK_ENTITY_TAG": string
static readonly "BLOCK_STATE_TAG": string
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(blockIn: $Block$Type, builder: $Item$Properties$Type, woodType: $WoodType$Type, burnTicks: integer)
constructor(blockIn: $Block$Type, builder: $Item$Properties$Type, burnTicks: integer)
constructor(blockIn: $Block$Type, builder: $Item$Properties$Type, woodType: $WoodType$Type)

public "moonlight$addAdditionalBehavior"(arg0: $AdditionalItemPlacement$Type): void
public "moonlight$getAdditionalBehavior"(): $AdditionalItemPlacement
public "moonlight$getClientAnimationExtension"(): any
public "moonlight$setClientAnimationExtension"(arg0: any): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WoodBasedBlockItem$Type = ($WoodBasedBlockItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WoodBasedBlockItem_ = $WoodBasedBlockItem$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/items/$SafeItem" {
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$ClickAction, $ClickAction$Type} from "packages/net/minecraft/world/inventory/$ClickAction"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$TooltipComponent, $TooltipComponent$Type} from "packages/net/minecraft/world/inventory/tooltip/$TooltipComponent"
import {$BlockItem, $BlockItem$Type} from "packages/net/minecraft/world/item/$BlockItem"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$SlotAccess, $SlotAccess$Type} from "packages/net/minecraft/world/entity/$SlotAccess"
import {$AdditionalItemPlacement, $AdditionalItemPlacement$Type} from "packages/net/mehvahdjukaar/moonlight/api/item/additional_placements/$AdditionalItemPlacement"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$ItemEntity, $ItemEntity$Type} from "packages/net/minecraft/world/entity/item/$ItemEntity"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $SafeItem extends $BlockItem {
static readonly "BLOCK_ENTITY_TAG": string
static readonly "BLOCK_STATE_TAG": string
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(blockIn: $Block$Type, builder: $Item$Properties$Type)

public "onDestroyed"(pItemEntity: $ItemEntity$Type): void
public "overrideStackedOnOther"(stack: $ItemStack$Type, slot: $Slot$Type, action: $ClickAction$Type, player: $Player$Type): boolean
public "overrideOtherStackedOnMe"(stack: $ItemStack$Type, incoming: $ItemStack$Type, slot: $Slot$Type, action: $ClickAction$Type, player: $Player$Type, accessor: $SlotAccess$Type): boolean
public "getTooltipImage"(pStack: $ItemStack$Type): $Optional<($TooltipComponent)>
public "canFitInsideContainerItems"(): boolean
public "moonlight$addAdditionalBehavior"(arg0: $AdditionalItemPlacement$Type): void
public "moonlight$getAdditionalBehavior"(): $AdditionalItemPlacement
public "moonlight$getClientAnimationExtension"(): any
public "moonlight$setClientAnimationExtension"(arg0: any): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SafeItem$Type = ($SafeItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SafeItem_ = $SafeItem$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/renderers/entities/$HatStandRenderer" {
import {$RenderLayer, $RenderLayer$Type} from "packages/net/minecraft/client/renderer/entity/layers/$RenderLayer"
import {$EntityRendererProvider$Context, $EntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRendererProvider$Context"
import {$HatStandEntity, $HatStandEntity$Type} from "packages/net/mehvahdjukaar/supplementaries/common/entities/$HatStandEntity"
import {$LivingEntityRenderer, $LivingEntityRenderer$Type} from "packages/net/minecraft/client/renderer/entity/$LivingEntityRenderer"
import {$List, $List$Type} from "packages/java/util/$List"
import {$EntityModel, $EntityModel$Type} from "packages/net/minecraft/client/model/$EntityModel"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$HatStandModel, $HatStandModel$Type} from "packages/net/mehvahdjukaar/supplementaries/client/renderers/entities/models/$HatStandModel"

export class $HatStandRenderer extends $LivingEntityRenderer<($HatStandEntity), ($HatStandModel)> {
 "model": M
 "layers": $List<($RenderLayer<(T), (M)>)>
 "shadowRadius": float

constructor(context: $EntityRendererProvider$Context$Type)

public "getTextureLocation"(entity: $HatStandEntity$Type): $ResourceLocation
public "getRenderOffset"(entity: $HatStandEntity$Type, partialTicks: float): $Vec3
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $HatStandRenderer$Type = ($HatStandRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $HatStandRenderer_ = $HatStandRenderer$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/screens/widgets/$ISlider" {
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$ComponentPath, $ComponentPath$Type} from "packages/net/minecraft/client/gui/$ComponentPath"
import {$FocusNavigationEvent, $FocusNavigationEvent$Type} from "packages/net/minecraft/client/gui/navigation/$FocusNavigationEvent"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$NarratableEntry$NarrationPriority, $NarratableEntry$NarrationPriority$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry$NarrationPriority"
import {$ScreenRectangle, $ScreenRectangle$Type} from "packages/net/minecraft/client/gui/navigation/$ScreenRectangle"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$NarrationElementOutput, $NarrationElementOutput$Type} from "packages/net/minecraft/client/gui/narration/$NarrationElementOutput"

export interface $ISlider extends $GuiEventListener, $Renderable, $NarratableEntry {

 "getValue"(): double
 "onReleased"(arg0: double, arg1: double): void
 "getCurrentFocusPath"(): $ComponentPath
 "keyPressed"(arg0: integer, arg1: integer, arg2: integer): boolean
 "nextFocusPath"(arg0: $FocusNavigationEvent$Type): $ComponentPath
 "isMouseOver"(arg0: double, arg1: double): boolean
 "getRectangle"(): $ScreenRectangle
 "setFocused"(arg0: boolean): void
 "mouseReleased"(arg0: double, arg1: double, arg2: integer): boolean
 "mouseClicked"(arg0: double, arg1: double, arg2: integer): boolean
 "charTyped"(arg0: character, arg1: integer): boolean
 "mouseScrolled"(arg0: double, arg1: double, arg2: double): boolean
 "mouseDragged"(arg0: double, arg1: double, arg2: integer, arg3: double, arg4: double): boolean
 "isFocused"(): boolean
 "keyReleased"(arg0: integer, arg1: integer, arg2: integer): boolean
 "mouseMoved"(arg0: double, arg1: double): void
 "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
 "isActive"(): boolean
 "narrationPriority"(): $NarratableEntry$NarrationPriority
 "getTabOrderGroup"(): integer
 "updateNarration"(arg0: $NarrationElementOutput$Type): void
}

export namespace $ISlider {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ISlider$Type = ($ISlider);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ISlider_ = $ISlider$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/events/behaviors/$DyeBehavior" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$ItemUseOnBlock, $ItemUseOnBlock$Type} from "packages/net/mehvahdjukaar/amendments/events/behaviors/$ItemUseOnBlock"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $DyeBehavior implements $ItemUseOnBlock {


public "isEnabled"(): boolean
public "appliesToItem"(item: $Item$Type): boolean
public "altersWorld"(): boolean
public "tryPerformingAction"(level: $Level$Type, player: $Player$Type, hand: $InteractionHand$Type, stack: $ItemStack$Type, hit: $BlockHitResult$Type): $InteractionResult
public "getTooltip"(): $MutableComponent
public "placesBlock"(): boolean
public "shouldBlockMapToItem"(item: $Item$Type): boolean
get "enabled"(): boolean
get "tooltip"(): $MutableComponent
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DyeBehavior$Type = ($DyeBehavior);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DyeBehavior_ = $DyeBehavior$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/blocks/$SignPostBlock" {
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$EntityBlock, $EntityBlock$Type} from "packages/net/minecraft/world/level/block/$EntityBlock"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$List, $List$Type} from "packages/java/util/$List"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$HitResult, $HitResult$Type} from "packages/net/minecraft/world/phys/$HitResult"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$LootParams$Builder, $LootParams$Builder$Type} from "packages/net/minecraft/world/level/storage/loot/$LootParams$Builder"
import {$IRotatable, $IRotatable$Type} from "packages/net/mehvahdjukaar/moonlight/api/block/$IRotatable"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$Rotation, $Rotation$Type} from "packages/net/minecraft/world/level/block/$Rotation"
import {$FenceMimicBlock, $FenceMimicBlock$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/blocks/$FenceMimicBlock"
import {$RenderShape, $RenderShape$Type} from "packages/net/minecraft/world/level/block/$RenderShape"

export class $SignPostBlock extends $FenceMimicBlock implements $EntityBlock, $IRotatable {
static readonly "WATERLOGGED": $BooleanProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(properties: $BlockBehaviour$Properties$Type)

public "rotate"(state: $BlockState$Type, world: $LevelAccessor$Type, pos: $BlockPos$Type, rot: $Rotation$Type): $BlockState
public "setPlacedBy"(worldIn: $Level$Type, pos: $BlockPos$Type, state: $BlockState$Type, placer: $LivingEntity$Type, stack: $ItemStack$Type): void
public "getCloneItemStack"(state: $BlockState$Type, target: $HitResult$Type, world: $BlockGetter$Type, pos: $BlockPos$Type, player: $Player$Type): $ItemStack
public "getRotatedState"(state: $BlockState$Type, world: $LevelAccessor$Type, pos: $BlockPos$Type, rotation: $Rotation$Type, axis: $Direction$Type, hit: $Vec3$Type): $Optional<($BlockState)>
public "rotateOverAxis"(state: $BlockState$Type, world: $LevelAccessor$Type, pos: $BlockPos$Type, rot: $Rotation$Type, axis: $Direction$Type, hit: $Vec3$Type): $Optional<($Direction)>
public "use"(state: $BlockState$Type, level: $Level$Type, pos: $BlockPos$Type, player: $Player$Type, handIn: $InteractionHand$Type, hit: $BlockHitResult$Type): $InteractionResult
public "getRenderShape"(state: $BlockState$Type): $RenderShape
public "getDrops"(state: $BlockState$Type, builder: $LootParams$Builder$Type): $List<($ItemStack)>
public "newBlockEntity"(pPos: $BlockPos$Type, pState: $BlockState$Type): $BlockEntity
public "onRotated"(newState: $BlockState$Type, oldState: $BlockState$Type, world: $LevelAccessor$Type, pos: $BlockPos$Type, rotation: $Rotation$Type, axis: $Direction$Type, hit: $Vec3$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SignPostBlock$Type = ($SignPostBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SignPostBlock_ = $SignPostBlock$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/core/criteria_triggers/$GrindItemTrigger" {
import {$JsonObject, $JsonObject$Type} from "packages/com/google/gson/$JsonObject"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$SimpleCriterionTrigger, $SimpleCriterionTrigger$Type} from "packages/net/minecraft/advancements/critereon/$SimpleCriterionTrigger"
import {$GrindItemTrigger$Instance, $GrindItemTrigger$Instance$Type} from "packages/net/mehvahdjukaar/moonlight/core/criteria_triggers/$GrindItemTrigger$Instance"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$DeserializationContext, $DeserializationContext$Type} from "packages/net/minecraft/advancements/critereon/$DeserializationContext"
import {$ContextAwarePredicate, $ContextAwarePredicate$Type} from "packages/net/minecraft/advancements/critereon/$ContextAwarePredicate"

export class $GrindItemTrigger extends $SimpleCriterionTrigger<($GrindItemTrigger$Instance)> {

constructor()

public "trigger"(playerEntity: $ServerPlayer$Type, stack: $ItemStack$Type): void
public "createInstance"(json: $JsonObject$Type, predicate: $ContextAwarePredicate$Type, deserializationContext: $DeserializationContext$Type): $GrindItemTrigger$Instance
public "getId"(): $ResourceLocation
get "id"(): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GrindItemTrigger$Type = ($GrindItemTrigger);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GrindItemTrigger_ = $GrindItemTrigger$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/integration/forge/$TetraCompatImpl" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"

export class $TetraCompatImpl {

constructor()

public static "isTetraTool"(i: $Item$Type): boolean
public static "isTetraSword"(i: $Item$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TetraCompatImpl$Type = ($TetraCompatImpl);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TetraCompatImpl_ = $TetraCompatImpl$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/events/forge/$DropItemOnDeathEvent" {
import {$IDropItemOnDeathEvent, $IDropItemOnDeathEvent$Type} from "packages/net/mehvahdjukaar/moonlight/api/events/$IDropItemOnDeathEvent"
import {$ListenerList, $ListenerList$Type} from "packages/net/minecraftforge/eventbus/$ListenerList"
import {$Event, $Event$Type} from "packages/net/minecraftforge/eventbus/api/$Event"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export class $DropItemOnDeathEvent extends $Event implements $IDropItemOnDeathEvent {

constructor()
constructor(itemStack: $ItemStack$Type, player: $Player$Type, beforeDrop: boolean)

public static "create"(itemStack: $ItemStack$Type, player: $Player$Type, beforeDrop: boolean): $IDropItemOnDeathEvent
public "isCancelable"(): boolean
public "getPlayer"(): $Player
public "getReturnItemStack"(): $ItemStack
public "getItemStack"(): $ItemStack
public "setReturnItemStack"(stack: $ItemStack$Type): void
public "isBeforeDrop"(): boolean
public "getListenerList"(): $ListenerList
public "hasResult"(): boolean
public "setCanceled"(arg0: boolean): void
public "isCanceled"(): boolean
get "cancelable"(): boolean
get "player"(): $Player
get "returnItemStack"(): $ItemStack
get "itemStack"(): $ItemStack
set "returnItemStack"(value: $ItemStack$Type)
get "beforeDrop"(): boolean
get "listenerList"(): $ListenerList
set "canceled"(value: boolean)
get "canceled"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DropItemOnDeathEvent$Type = ($DropItemOnDeathEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DropItemOnDeathEvent_ = $DropItemOnDeathEvent$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$RopeKnotBlockTile" {
import {$MimicBlockTile, $MimicBlockTile$Type} from "packages/net/mehvahdjukaar/moonlight/api/block/$MimicBlockTile"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$ModelDataKey, $ModelDataKey$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$ModelDataKey"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $RopeKnotBlockTile extends $MimicBlockTile {
static readonly "MIMIC_KEY": $ModelDataKey<($BlockState)>
 "blockState": $BlockState

constructor(pos: $BlockPos$Type, state: $BlockState$Type)

public "getShape"(): $VoxelShape
public "setChanged"(): void
public "getCollisionShape"(): $VoxelShape
public "recalculateShapes"(state: $BlockState$Type): void
public "load"(compound: $CompoundTag$Type): void
get "shape"(): $VoxelShape
get "collisionShape"(): $VoxelShape
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RopeKnotBlockTile$Type = ($RopeKnotBlockTile);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RopeKnotBlockTile_ = $RopeKnotBlockTile$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/items/crafting/$TippedBambooSpikesRecipe" {
import {$RegistryAccess, $RegistryAccess$Type} from "packages/net/minecraft/core/$RegistryAccess"
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$RecipeSerializer, $RecipeSerializer$Type} from "packages/net/minecraft/world/item/crafting/$RecipeSerializer"
import {$CustomRecipe, $CustomRecipe$Type} from "packages/net/minecraft/world/item/crafting/$CustomRecipe"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$CraftingContainer, $CraftingContainer$Type} from "packages/net/minecraft/world/inventory/$CraftingContainer"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$CraftingBookCategory, $CraftingBookCategory$Type} from "packages/net/minecraft/world/item/crafting/$CraftingBookCategory"

export class $TippedBambooSpikesRecipe extends $CustomRecipe {

constructor(idIn: $ResourceLocation$Type, category: $CraftingBookCategory$Type)

public "matches"(inv: $CraftingContainer$Type, worldIn: $Level$Type): boolean
public "getRemainingItems"(inv: $CraftingContainer$Type): $NonNullList<($ItemStack)>
public "canCraftInDimensions"(width: integer, height: integer): boolean
public "getSerializer"(): $RecipeSerializer<(any)>
public "assemble"(inv: $CraftingContainer$Type, access: $RegistryAccess$Type): $ItemStack
get "serializer"(): $RecipeSerializer<(any)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TippedBambooSpikesRecipe$Type = ($TippedBambooSpikesRecipe);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TippedBambooSpikesRecipe_ = $TippedBambooSpikesRecipe$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/resources/pack/$DynamicDataPack" {
import {$DynamicResourcePack, $DynamicResourcePack$Type} from "packages/net/mehvahdjukaar/moonlight/api/resources/pack/$DynamicResourcePack"
import {$SimpleTagBuilder, $SimpleTagBuilder$Type} from "packages/net/mehvahdjukaar/moonlight/api/resources/$SimpleTagBuilder"
import {$Pack$Position, $Pack$Position$Type} from "packages/net/minecraft/server/packs/repository/$Pack$Position"
import {$LootTable$Builder, $LootTable$Builder$Type} from "packages/net/minecraft/world/level/storage/loot/$LootTable$Builder"
import {$ResourceKey, $ResourceKey$Type} from "packages/net/minecraft/resources/$ResourceKey"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$LootTable, $LootTable$Type} from "packages/net/minecraft/world/level/storage/loot/$LootTable"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$FinishedRecipe, $FinishedRecipe$Type} from "packages/net/minecraft/data/recipes/$FinishedRecipe"

export class $DynamicDataPack extends $DynamicResourcePack {

constructor(name: $ResourceLocation$Type, position: $Pack$Position$Type, fixed: boolean, hidden: boolean)
constructor(name: $ResourceLocation$Type)

public "addSimpleBlockLootTable"(block: $Block$Type): void
public "addRecipeNoAdvancement"(recipe: $FinishedRecipe$Type): void
public "addTag"(builder: $SimpleTagBuilder$Type, type: $ResourceKey$Type<(any)>): void
public "addLootTable"(id: $ResourceLocation$Type, table: $LootTable$Type): void
public "addLootTable"(block: $Block$Type, table: $LootTable$Builder$Type): void
public "addRecipe"(recipe: $FinishedRecipe$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DynamicDataPack$Type = ($DynamicDataPack);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DynamicDataPack_ = $DynamicDataPack$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/block/$DynamicRenderedItemDisplayTile" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Connection, $Connection$Type} from "packages/net/minecraft/network/$Connection"
import {$ModelData, $ModelData$Type} from "packages/net/minecraftforge/client/model/data/$ModelData"
import {$ExtraModelData, $ExtraModelData$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$ExtraModelData"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$ClientboundBlockEntityDataPacket, $ClientboundBlockEntityDataPacket$Type} from "packages/net/minecraft/network/protocol/game/$ClientboundBlockEntityDataPacket"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$ExtraModelData$Builder, $ExtraModelData$Builder$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$ExtraModelData$Builder"
import {$IExtraModelDataProvider, $IExtraModelDataProvider$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$IExtraModelDataProvider"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$ModelDataKey, $ModelDataKey$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$ModelDataKey"
import {$LockCode, $LockCode$Type} from "packages/net/minecraft/world/$LockCode"
import {$ItemDisplayTile, $ItemDisplayTile$Type} from "packages/net/mehvahdjukaar/moonlight/api/block/$ItemDisplayTile"

export class $DynamicRenderedItemDisplayTile extends $ItemDisplayTile implements $IExtraModelDataProvider {
static readonly "IS_FANCY": $ModelDataKey<(boolean)>
static readonly "LOOT_TABLE_TAG": string
static readonly "LOOT_TABLE_SEED_TAG": string
 "lootTable": $ResourceLocation
 "lootTableSeed": long
 "lockKey": $LockCode
 "blockState": $BlockState


public "isNeverFancy"(): boolean
public "onFancyChanged"(fancy: boolean): void
public "rendersFancy"(): boolean
public "shouldRenderFancy"(cameraPos: $Vec3$Type): boolean
public "addExtraModelData"(builder: $ExtraModelData$Builder$Type): void
public "requestModelReload"(): void
/**
 * 
 * @deprecated
 */
public "getExtraModelData"(): $ExtraModelData
public "afterDataPacket"(oldData: $ExtraModelData$Type): void
public "onDataPacket"(net: $Connection$Type, pkt: $ClientboundBlockEntityDataPacket$Type): void
public "getModelData"(): $ModelData
public "getPersistentData"(): $CompoundTag
public "onChunkUnloaded"(): void
public static "stillValidBlockEntity"(arg0: $BlockEntity$Type, arg1: $Player$Type, arg2: integer): boolean
public static "stillValidBlockEntity"(arg0: $BlockEntity$Type, arg1: $Player$Type): boolean
public static "tryClear"(arg0: any): void
get "neverFancy"(): boolean
get "extraModelData"(): $ExtraModelData
get "modelData"(): $ModelData
get "persistentData"(): $CompoundTag
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DynamicRenderedItemDisplayTile$Type = ($DynamicRenderedItemDisplayTile);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DynamicRenderedItemDisplayTile_ = $DynamicRenderedItemDisplayTile$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/$DummySprite" {
import {$TextureAtlasSprite, $TextureAtlasSprite$Type} from "packages/net/minecraft/client/renderer/texture/$TextureAtlasSprite"

export class $DummySprite extends $TextureAtlasSprite {
static readonly "INSTANCE": $DummySprite


public "getU"(u: double): float
public "getV"(v: double): float
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DummySprite$Type = ($DummySprite);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DummySprite_ = $DummySprite$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/common/tile/$WaterloggedLilyBlockTile" {
import {$MimicBlockTile, $MimicBlockTile$Type} from "packages/net/mehvahdjukaar/moonlight/api/block/$MimicBlockTile"
import {$ModelDataKey, $ModelDataKey$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$ModelDataKey"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $WaterloggedLilyBlockTile extends $MimicBlockTile {
static readonly "MIMIC_KEY": $ModelDataKey<($BlockState)>
 "blockState": $BlockState

constructor(blockPos: $BlockPos$Type, blockState: $BlockState$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WaterloggedLilyBlockTile$Type = ($WaterloggedLilyBlockTile);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WaterloggedLilyBlockTile_ = $WaterloggedLilyBlockTile$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/dynamicpack/$ClientDynamicResourcesGenerator" {
import {$DynamicResourcePack, $DynamicResourcePack$Type} from "packages/net/mehvahdjukaar/moonlight/api/resources/pack/$DynamicResourcePack"
import {$TextureImage, $TextureImage$Type} from "packages/net/mehvahdjukaar/moonlight/api/resources/textures/$TextureImage"
import {$Logger, $Logger$Type} from "packages/org/apache/logging/log4j/$Logger"
import {$AfterLanguageLoadEvent, $AfterLanguageLoadEvent$Type} from "packages/net/mehvahdjukaar/moonlight/api/events/$AfterLanguageLoadEvent"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$ResourceManager, $ResourceManager$Type} from "packages/net/minecraft/server/packs/resources/$ResourceManager"
import {$DynClientResourcesGenerator, $DynClientResourcesGenerator$Type} from "packages/net/mehvahdjukaar/moonlight/api/resources/pack/$DynClientResourcesGenerator"

export class $ClientDynamicResourcesGenerator extends $DynClientResourcesGenerator {
static readonly "INSTANCE": $ClientDynamicResourcesGenerator
readonly "dynamicPack": T

constructor()

public "getLogger"(): $Logger
public static "recolorFromVanilla"(manager: $ResourceManager$Type, vanillaTexture: $TextureImage$Type, vanillaMask: $ResourceLocation$Type, templateTexture: $ResourceLocation$Type): $TextureImage
public "addDynamicTranslations"(lang: $AfterLanguageLoadEvent$Type): void
public "dependsOnLoadedPacks"(): boolean
public "regenerateDynamicAssets"(manager: $ResourceManager$Type): void
get "logger"(): $Logger
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientDynamicResourcesGenerator$Type = ($ClientDynamicResourcesGenerator);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientDynamicResourcesGenerator_ = $ClientDynamicResourcesGenerator$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/integration/$CompatHandler" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $CompatHandler {
static readonly "FARMERS_DELIGHT": boolean
static readonly "SUPPLEMENTARIES": boolean
static readonly "SUPPSQUARED": boolean
static readonly "QUARK": boolean
static readonly "TORCHSLAB": boolean
static readonly "BUZZIER_BEES": boolean
static readonly "SHIMMER": boolean
static readonly "SOUL_FIRED": boolean
static readonly "CAVE_ENHANCEMENTS": boolean
static readonly "FLAN": boolean
static readonly "BLUEPRINT": boolean
static readonly "CONFIGURED": boolean
static readonly "ALEX_CAVES": boolean
static readonly "RATS": boolean
static readonly "THIN_AIR": boolean

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CompatHandler$Type = ($CompatHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CompatHandler_ = $CompatHandler$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/item/$BlockTypeBasedItem" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$FuelItem, $FuelItem$Type} from "packages/net/mehvahdjukaar/moonlight/api/item/$FuelItem"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$BlockType, $BlockType$Type} from "packages/net/mehvahdjukaar/moonlight/api/set/$BlockType"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $BlockTypeBasedItem<T extends $BlockType> extends $FuelItem {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(pProperties: $Item$Properties$Type, blockType: T)
constructor(pProperties: $Item$Properties$Type, blockType: T, burnTime: $Supplier$Type<(integer)>)

public "getBlockType"(): T
get "blockType"(): T
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BlockTypeBasedItem$Type<T> = ($BlockTypeBasedItem<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BlockTypeBasedItem_<T> = $BlockTypeBasedItem$Type<(T)>;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/integration/$MapAtlasCompat" {
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"

export class $MapAtlasCompat {

constructor()

public static "canPlayerSeeDeathMarker"(player: $Player$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MapAtlasCompat$Type = ($MapAtlasCompat);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MapAtlasCompat_ = $MapAtlasCompat$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/blocks/$EndermanSkullWallBlock" {
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$WallSkullBlock, $WallSkullBlock$Type} from "packages/net/minecraft/world/level/block/$WallSkullBlock"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$CollisionContext, $CollisionContext$Type} from "packages/net/minecraft/world/phys/shapes/$CollisionContext"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$Equipable, $Equipable$Type} from "packages/net/minecraft/world/item/$Equipable"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$BlockEntityTicker, $BlockEntityTicker$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityTicker"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$DirectionProperty, $DirectionProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$DirectionProperty"

export class $EndermanSkullWallBlock extends $WallSkullBlock {
static readonly "WATCHED": $BooleanProperty
static readonly "FACING": $DirectionProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(properties: $BlockBehaviour$Properties$Type)

public "getTicker"<T extends $BlockEntity>(level: $Level$Type, state: $BlockState$Type, type: $BlockEntityType$Type<(T)>): $BlockEntityTicker<(T)>
public "isSignalSource"(state: $BlockState$Type): boolean
public "getShape"(state: $BlockState$Type, level: $BlockGetter$Type, pos: $BlockPos$Type, context: $CollisionContext$Type): $VoxelShape
public "getSignal"(blockState: $BlockState$Type, blockAccess: $BlockGetter$Type, pos: $BlockPos$Type, side: $Direction$Type): integer
public "animateTick"(state: $BlockState$Type, level: $Level$Type, pos: $BlockPos$Type, random: $RandomSource$Type): void
public "newBlockEntity"(pos: $BlockPos$Type, state: $BlockState$Type): $BlockEntity
public static "get"(arg0: $ItemStack$Type): $Equipable
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EndermanSkullWallBlock$Type = ($EndermanSkullWallBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EndermanSkullWallBlock_ = $EndermanSkullWallBlock$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/integration/forge/$WaystonesCompatImpl" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"

export class $WaystonesCompatImpl {

constructor()

public static "getName"(te: $BlockEntity$Type): $Component
public static "isWaystone"(blockEntity: $BlockEntity$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WaystonesCompatImpl$Type = ($WaystonesCompatImpl);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WaystonesCompatImpl_ = $WaystonesCompatImpl$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/blocks/$AbstractPresentBlock" {
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$EntityBlock, $EntityBlock$Type} from "packages/net/minecraft/world/level/block/$EntityBlock"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$PathComputationType, $PathComputationType$Type} from "packages/net/minecraft/world/level/pathfinder/$PathComputationType"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$DyeColor, $DyeColor$Type} from "packages/net/minecraft/world/item/$DyeColor"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$WaterBlock, $WaterBlock$Type} from "packages/net/mehvahdjukaar/moonlight/api/block/$WaterBlock"
import {$List, $List$Type} from "packages/java/util/$List"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$CollisionContext, $CollisionContext$Type} from "packages/net/minecraft/world/phys/shapes/$CollisionContext"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$IColored, $IColored$Type} from "packages/net/mehvahdjukaar/moonlight/api/block/$IColored"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$LootParams$Builder, $LootParams$Builder$Type} from "packages/net/minecraft/world/level/storage/loot/$LootParams$Builder"
import {$MenuProvider, $MenuProvider$Type} from "packages/net/minecraft/world/$MenuProvider"
import {$BlockEntityTicker, $BlockEntityTicker$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityTicker"
import {$GameEventListener, $GameEventListener$Type} from "packages/net/minecraft/world/level/gameevent/$GameEventListener"

export class $AbstractPresentBlock extends $WaterBlock implements $EntityBlock, $IColored {
static readonly "SHAPE_LID": $VoxelShape
static readonly "SHAPE_OPEN": $VoxelShape
static readonly "SHAPE_CLOSED": $VoxelShape
static readonly "PACKED": $BooleanProperty
static readonly "WATERLOGGED": $BooleanProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation


public "getStateForPlacement"(context: $BlockPlaceContext$Type): $BlockState
public "setPlacedBy"(worldIn: $Level$Type, pos: $BlockPos$Type, state: $BlockState$Type, placer: $LivingEntity$Type, stack: $ItemStack$Type): void
public "getCloneItemStack"(level: $BlockGetter$Type, pos: $BlockPos$Type, state: $BlockState$Type): $ItemStack
public "playerWillDestroy"(worldIn: $Level$Type, pos: $BlockPos$Type, state: $BlockState$Type, player: $Player$Type): void
public "getColor"(): $DyeColor
public "isPathfindable"(state: $BlockState$Type, worldIn: $BlockGetter$Type, pos: $BlockPos$Type, type: $PathComputationType$Type): boolean
public "use"(state: $BlockState$Type, level: $Level$Type, pos: $BlockPos$Type, player: $Player$Type, handIn: $InteractionHand$Type, hit: $BlockHitResult$Type): $InteractionResult
public "hasAnalogOutputSignal"(state: $BlockState$Type): boolean
public "onRemove"(state: $BlockState$Type, worldIn: $Level$Type, pos: $BlockPos$Type, newState: $BlockState$Type, isMoving: boolean): void
public "getDrops"(state: $BlockState$Type, builder: $LootParams$Builder$Type): $List<($ItemStack)>
public "getMenuProvider"(state: $BlockState$Type, worldIn: $Level$Type, pos: $BlockPos$Type): $MenuProvider
public "getAnalogOutputSignal"(blockState: $BlockState$Type, worldIn: $Level$Type, pos: $BlockPos$Type): integer
public "getShape"(state: $BlockState$Type, worldIn: $BlockGetter$Type, pos: $BlockPos$Type, context: $CollisionContext$Type): $VoxelShape
public "tick"(state: $BlockState$Type, serverLevel: $ServerLevel$Type, pos: $BlockPos$Type, rand: $RandomSource$Type): void
public "getTicker"<T extends $BlockEntity>(arg0: $Level$Type, arg1: $BlockState$Type, arg2: $BlockEntityType$Type<(T)>): $BlockEntityTicker<(T)>
public "newBlockEntity"(arg0: $BlockPos$Type, arg1: $BlockState$Type): $BlockEntity
public "getListener"<T extends $BlockEntity>(arg0: $ServerLevel$Type, arg1: T): $GameEventListener
/**
 * 
 * @deprecated
 */
public "changeItemColor"(color: $DyeColor$Type): $Item
public "supportsBlankColor"(): boolean
get "color"(): $DyeColor
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AbstractPresentBlock$Type = ($AbstractPresentBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AbstractPresentBlock_ = $AbstractPresentBlock$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/forge/$AmendmentsForge" {
import {$AttackEntityEvent, $AttackEntityEvent$Type} from "packages/net/minecraftforge/event/entity/player/$AttackEntityEvent"
import {$TagsUpdatedEvent, $TagsUpdatedEvent$Type} from "packages/net/minecraftforge/event/$TagsUpdatedEvent"
import {$RegisterEvent, $RegisterEvent$Type} from "packages/net/minecraftforge/registries/$RegisterEvent"
import {$PlayerInteractEvent$RightClickBlock, $PlayerInteractEvent$RightClickBlock$Type} from "packages/net/minecraftforge/event/entity/player/$PlayerInteractEvent$RightClickBlock"
import {$PlayerInteractEvent$RightClickItem, $PlayerInteractEvent$RightClickItem$Type} from "packages/net/minecraftforge/event/entity/player/$PlayerInteractEvent$RightClickItem"

export class $AmendmentsForge {

constructor()

public static "onRegisterPOI"(event: $RegisterEvent$Type): void
public "onUseItem"(event: $PlayerInteractEvent$RightClickItem$Type): void
public "onTagUpdate"(event: $TagsUpdatedEvent$Type): void
public "onUseBlockHP"(event: $PlayerInteractEvent$RightClickBlock$Type): void
public "onUseBlock"(event: $PlayerInteractEvent$RightClickBlock$Type): void
public "onEntityHurt"(event: $AttackEntityEvent$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AmendmentsForge$Type = ($AmendmentsForge);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AmendmentsForge_ = $AmendmentsForge$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/utils/$VibeChecker" {
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"

export class $VibeChecker {

constructor()

public static "checkVibe"(level: $Level$Type): void
public static "checkVibe"(): void
public static "checkDatapackRegistry"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $VibeChecker$Type = ($VibeChecker);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $VibeChecker_ = $VibeChecker$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/inventories/$PulleyContainerMenu" {
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$IContainerProvider, $IContainerProvider$Type} from "packages/net/mehvahdjukaar/moonlight/api/misc/$IContainerProvider"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$AbstractContainerMenu, $AbstractContainerMenu$Type} from "packages/net/minecraft/world/inventory/$AbstractContainerMenu"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"

export class $PulleyContainerMenu extends $AbstractContainerMenu implements $IContainerProvider {
readonly "inventory": $Container
static readonly "SLOT_CLICKED_OUTSIDE": integer
static readonly "QUICKCRAFT_TYPE_CHARITABLE": integer
static readonly "QUICKCRAFT_TYPE_GREEDY": integer
static readonly "QUICKCRAFT_TYPE_CLONE": integer
static readonly "QUICKCRAFT_HEADER_START": integer
static readonly "QUICKCRAFT_HEADER_CONTINUE": integer
static readonly "QUICKCRAFT_HEADER_END": integer
static readonly "CARRIED_SLOT_SIZE": integer
readonly "lastSlots": $NonNullList<($ItemStack)>
readonly "slots": $NonNullList<($Slot)>
 "remoteSlots": $NonNullList<($ItemStack)>
 "containerId": integer

constructor(id: integer, playerInventory: $Inventory$Type)
constructor(id: integer, playerInventory: $Inventory$Type, packetBuffer: $FriendlyByteBuf$Type)
constructor(id: integer, playerInventory: $Inventory$Type, inventory: $Container$Type)

public "getContainer"(): $Container
public "stillValid"(playerIn: $Player$Type): boolean
public "removed"(playerIn: $Player$Type): void
public "quickMoveStack"(playerIn: $Player$Type, index: integer): $ItemStack
get "container"(): $Container
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PulleyContainerMenu$Type = ($PulleyContainerMenu);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PulleyContainerMenu_ = $PulleyContainerMenu$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/resources/recipe/$IRecipeTemplate" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Ingredient, $Ingredient$Type} from "packages/net/minecraft/world/item/crafting/$Ingredient"
import {$RecipeCategory, $RecipeCategory$Type} from "packages/net/minecraft/data/recipes/$RecipeCategory"
import {$FinishedRecipe, $FinishedRecipe$Type} from "packages/net/minecraft/data/recipes/$FinishedRecipe"
import {$BlockType, $BlockType$Type} from "packages/net/mehvahdjukaar/moonlight/api/set/$BlockType"
import {$CraftingBookCategory, $CraftingBookCategory$Type} from "packages/net/minecraft/world/item/crafting/$CraftingBookCategory"

export interface $IRecipeTemplate<R extends $FinishedRecipe> {

 "createSimilar"<T extends $BlockType>(arg0: T, arg1: T, arg2: $Item$Type, arg3: string): R
 "createSimilar"<T extends $BlockType>(originalMat: T, destinationMat: T, unlockItem: $Item$Type): R
 "addCondition"(arg0: any): void
 "getConditions"(): $List<(any)>
 "determineBookCategory"(recipeCategory: $CraftingBookCategory$Type): $RecipeCategory
}

export namespace $IRecipeTemplate {
function convertIngredients<T>(originalMat: T, destinationMat: T, ing: $Ingredient$Type): $Ingredient
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IRecipeTemplate$Type<R> = ($IRecipeTemplate<(R)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IRecipeTemplate_<R> = $IRecipeTemplate$Type<(R)>;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/utils/$MiscUtils$Festivity" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $MiscUtils$Festivity extends $Enum<($MiscUtils$Festivity)> {
static readonly "NONE": $MiscUtils$Festivity
static readonly "HALLOWEEN": $MiscUtils$Festivity
static readonly "APRILS_FOOL": $MiscUtils$Festivity
static readonly "CHRISTMAS": $MiscUtils$Festivity
static readonly "EARTH_DAY": $MiscUtils$Festivity
static readonly "ST_VALENTINE": $MiscUtils$Festivity
static readonly "MY_BIRTHDAY": $MiscUtils$Festivity
static readonly "MOD_BIRTHDAY": $MiscUtils$Festivity


public static "values"(): ($MiscUtils$Festivity)[]
public static "valueOf"(name: string): $MiscUtils$Festivity
public "isBirthday"(): boolean
public "isHalloween"(): boolean
public "getCandyWrappingIndex"(): float
public "isEarthDay"(): boolean
public "isChristmas"(): boolean
public "isAprilsFool"(): boolean
public "isStValentine"(): boolean
get "birthday"(): boolean
get "halloween"(): boolean
get "candyWrappingIndex"(): float
get "earthDay"(): boolean
get "christmas"(): boolean
get "aprilsFool"(): boolean
get "stValentine"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MiscUtils$Festivity$Type = (("halloween") | ("st_valentine") | ("mod_birthday") | ("earth_day") | ("my_birthday") | ("none") | ("christmas") | ("aprils_fool")) | ($MiscUtils$Festivity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MiscUtils$Festivity_ = $MiscUtils$Festivity$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/client/model/$ExtraModelData$Builder" {
import {$ExtraModelData, $ExtraModelData$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$ExtraModelData"
import {$ModelDataKey, $ModelDataKey$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$ModelDataKey"

export interface $ExtraModelData$Builder {

 "build"(): $ExtraModelData
 "with"<A>(arg0: $ModelDataKey$Type<(A)>, arg1: A): $ExtraModelData$Builder
}

export namespace $ExtraModelData$Builder {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ExtraModelData$Builder$Type = ($ExtraModelData$Builder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ExtraModelData$Builder_ = $ExtraModelData$Builder$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/blocks/$IFrameBlock" {
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"

export interface $IFrameBlock {

 "getFilledBlock"(arg0: $Block$Type): $Block

(arg0: $Block$Type): $Block
}

export namespace $IFrameBlock {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IFrameBlock$Type = ($IFrameBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IFrameBlock_ = $IFrameBlock$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/util/math/colors/$LUVColor" {
import {$RGBColor, $RGBColor$Type} from "packages/net/mehvahdjukaar/moonlight/api/util/math/colors/$RGBColor"
import {$Codec, $Codec$Type} from "packages/com/mojang/serialization/$Codec"
import {$BaseColor, $BaseColor$Type} from "packages/net/mehvahdjukaar/moonlight/api/util/math/colors/$BaseColor"

export class $LUVColor extends $BaseColor<($LUVColor)> {
/**
 * 
 * @deprecated
 */
static readonly "CODEC": $Codec<(integer)>

constructor(l: float, u: float, v: float, alpha: float)

public "toString"(): string
public "v"(): float
public "u"(): float
/**
 * 
 * @deprecated
 */
public "multiply"(color: $LUVColor$Type, hue: float, chroma: float, luminance: float, alpha: float): $LUVColor
public "luminance"(): float
public "alpha"(): float
public "mixWith"(color: $LUVColor$Type, bias: float): $LUVColor
public "asRGB"(): $RGBColor
public "withU"(u: float): $LUVColor
public "withV"(v: float): $LUVColor
public "withAlpha"(alpha: float): $LUVColor
public "asLUV"(): $LUVColor
public static "averageColors"(...colors: ($LUVColor$Type)[]): $LUVColor
public "withLuminance"(luminance: float): $LUVColor
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LUVColor$Type = ($LUVColor);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LUVColor_ = $LUVColor$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/blocks/$ClockBlock" {
import {$IntegerProperty, $IntegerProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$IntegerProperty"
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$EntityBlock, $EntityBlock$Type} from "packages/net/minecraft/world/level/block/$EntityBlock"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$Mirror, $Mirror$Type} from "packages/net/minecraft/world/level/block/$Mirror"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$WaterBlock, $WaterBlock$Type} from "packages/net/mehvahdjukaar/moonlight/api/block/$WaterBlock"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"
import {$DirectionProperty, $DirectionProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$DirectionProperty"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$CollisionContext, $CollisionContext$Type} from "packages/net/minecraft/world/phys/shapes/$CollisionContext"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$Rotation, $Rotation$Type} from "packages/net/minecraft/world/level/block/$Rotation"
import {$BlockEntityTicker, $BlockEntityTicker$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityTicker"
import {$GameEventListener, $GameEventListener$Type} from "packages/net/minecraft/world/level/gameevent/$GameEventListener"

export class $ClockBlock extends $WaterBlock implements $EntityBlock {
static readonly "FACING": $DirectionProperty
static readonly "HOUR": $IntegerProperty
static readonly "WATERLOGGED": $BooleanProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(properties: $BlockBehaviour$Properties$Type)

public "getTicker"<T extends $BlockEntity>(pLevel: $Level$Type, pState: $BlockState$Type, pBlockEntityType: $BlockEntityType$Type<(T)>): $BlockEntityTicker<(T)>
public "getStateForPlacement"(context: $BlockPlaceContext$Type): $BlockState
public "onPlace"(state: $BlockState$Type, worldIn: $Level$Type, pos: $BlockPos$Type, oldState: $BlockState$Type, isMoving: boolean): void
public "use"(state: $BlockState$Type, worldIn: $Level$Type, pos: $BlockPos$Type, player: $Player$Type, handIn: $InteractionHand$Type, hit: $BlockHitResult$Type): $InteractionResult
public "hasAnalogOutputSignal"(state: $BlockState$Type): boolean
public "onRemove"(state: $BlockState$Type, world: $Level$Type, pos: $BlockPos$Type, newState: $BlockState$Type, isMoving: boolean): void
public "rotate"(state: $BlockState$Type, rot: $Rotation$Type): $BlockState
public "mirror"(state: $BlockState$Type, mirrorIn: $Mirror$Type): $BlockState
public "getAnalogOutputSignal"(blockState: $BlockState$Type, world: $Level$Type, pos: $BlockPos$Type): integer
public "getShape"(state: $BlockState$Type, world: $BlockGetter$Type, pos: $BlockPos$Type, context: $CollisionContext$Type): $VoxelShape
public static "displayCurrentHour"(world: $Level$Type, player: $Player$Type): void
public "newBlockEntity"(pPos: $BlockPos$Type, pState: $BlockState$Type): $BlockEntity
public "getListener"<T extends $BlockEntity>(arg0: $ServerLevel$Type, arg1: T): $GameEventListener
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClockBlock$Type = ($ClockBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClockBlock_ = $ClockBlock$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/map/$CustomMapData$SimpleDirtyCounter" {
import {$CustomMapData$DirtyCounter, $CustomMapData$DirtyCounter$Type} from "packages/net/mehvahdjukaar/moonlight/api/map/$CustomMapData$DirtyCounter"

export class $CustomMapData$SimpleDirtyCounter implements $CustomMapData$DirtyCounter {

constructor()

public "isDirty"(): boolean
public "clearDirty"(): void
public "markDirty"(): void
get "dirty"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CustomMapData$SimpleDirtyCounter$Type = ($CustomMapData$SimpleDirtyCounter);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CustomMapData$SimpleDirtyCounter_ = $CustomMapData$SimpleDirtyCounter$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$SignPostBlockTile" {
import {$MimicBlockTile, $MimicBlockTile$Type} from "packages/net/mehvahdjukaar/moonlight/api/block/$MimicBlockTile"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$ITextHolderProvider, $ITextHolderProvider$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/$ITextHolderProvider"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$WoodType, $WoodType$Type} from "packages/net/mehvahdjukaar/moonlight/api/set/wood/$WoodType"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$TextHolder, $TextHolder$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/$TextHolder"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$FilteredText, $FilteredText$Type} from "packages/net/minecraft/server/network/$FilteredText"
import {$List, $List$Type} from "packages/java/util/$List"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$AABB, $AABB$Type} from "packages/net/minecraft/world/phys/$AABB"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ExtraModelData$Builder, $ExtraModelData$Builder$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$ExtraModelData$Builder"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$SignPostBlockTile$Sign, $SignPostBlockTile$Sign$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$SignPostBlockTile$Sign"
import {$ModelDataKey, $ModelDataKey$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$ModelDataKey"
import {$IOwnerProtected, $IOwnerProtected$Type} from "packages/net/mehvahdjukaar/moonlight/api/block/$IOwnerProtected"

export class $SignPostBlockTile extends $MimicBlockTile implements $ITextHolderProvider, $IOwnerProtected {
static readonly "FRAMED_KEY": $ModelDataKey<(boolean)>
static readonly "SLIM_KEY": $ModelDataKey<(boolean)>
static readonly "SIGN_UP_KEY": $ModelDataKey<($SignPostBlockTile$Sign)>
static readonly "SIGN_DOWN_KEY": $ModelDataKey<($SignPostBlockTile$Sign)>
static readonly "MIMIC_KEY": $ModelDataKey<($BlockState)>
 "blockState": $BlockState

constructor(pos: $BlockPos$Type, state: $BlockState$Type)

public "getOwner"(): $UUID
public "setOwner"(owner: $UUID$Type): void
public "getSign"(up: boolean): $SignPostBlockTile$Sign
public "getSignUp"(): $SignPostBlockTile$Sign
public "getSignDown"(): $SignPostBlockTile$Sign
public "rotateSign"(up: boolean, angle: float, constrainAngle: boolean): boolean
public "getClickedSign"(hit: $Vec3$Type): $SignPostBlockTile$Sign
public "openScreen"(level: $Level$Type, pos: $BlockPos$Type, player: $Player$Type): void
public "getTextHolder"(i: integer): $TextHolder
public "getPointingYaw"(up: boolean): float
public "isWaxed"(): boolean
public "setWaxed"(waxed: boolean): void
public "initializeSignAfterConversion"(woodType: $WoodType$Type, r: integer, up: boolean, slim: boolean, framed: boolean): boolean
public "textHoldersCount"(): integer
public "isSlim"(): boolean
public "isFramed"(): boolean
public "setPlayerWhoMayEdit"(playerWhoMayEdit: $UUID$Type): void
public "getPlayerWhoMayEdit"(): $UUID
public "getClickedSignIndex"(hit: $Vec3$Type): boolean
public "load"(compound: $CompoundTag$Type): void
public "m_183515_"(compound: $CompoundTag$Type): void
public "getRenderBoundingBox"(): $AABB
public "handleInteraction"(state: $BlockState$Type, level: $ServerLevel$Type, pos: $BlockPos$Type, player: $Player$Type, handIn: $InteractionHand$Type, hit: $BlockHitResult$Type, itemstack: $ItemStack$Type): $InteractionResult
public "addExtraModelData"(builder: $ExtraModelData$Builder$Type): void
public "getTextHolder"(): $TextHolder
public "tryOpeningEditGui"(player: $ServerPlayer$Type, pos: $BlockPos$Type): boolean
public "tryAcceptingClientText"(pos: $BlockPos$Type, player: $ServerPlayer$Type, filteredText: $List$Type<($List$Type<($FilteredText$Type)>)>): boolean
public "interactWithTextHolder"(index: integer, level: $Level$Type, pos: $BlockPos$Type, state: $BlockState$Type, player: $Player$Type, hand: $InteractionHand$Type): $InteractionResult
public "tryWash"(level: $Level$Type, pos: $BlockPos$Type, state: $BlockState$Type): boolean
public "isPublic"(): boolean
public "isOwnedBy"(player: $Player$Type): boolean
public "isAccessibleBy"(player: $Player$Type): boolean
public "loadOwner"(tag: $CompoundTag$Type): void
public "saveOwner"(tag: $CompoundTag$Type): void
public "isNotOwnedBy"(player: $Player$Type): boolean
public "playerIsTooFarAwayToEdit"(level: $Level$Type, pos: $BlockPos$Type, uUID: $UUID$Type): boolean
public "shouldUseContainerMenu"(): boolean
public "validatePlayerWhoMayEdit"(level: $Level$Type, pos: $BlockPos$Type): void
public "isOtherPlayerEditing"(player: $Player$Type): boolean
public "tryWaxing"(level: $Level$Type, pos: $BlockPos$Type, player: $Player$Type, hand: $InteractionHand$Type): $InteractionResult
public "openScreen"(level: $Level$Type, pos: $BlockPos$Type, player: $Player$Type, direction: $Direction$Type): void
public "sendOpenGuiPacket"(level: $Level$Type, pos: $BlockPos$Type, player: $Player$Type, hitFace: $Direction$Type): void
public "sendOpenGuiPacket"(level: $Level$Type, pos: $BlockPos$Type, player: $Player$Type): void
get "owner"(): $UUID
set "owner"(value: $UUID$Type)
get "signUp"(): $SignPostBlockTile$Sign
get "signDown"(): $SignPostBlockTile$Sign
get "waxed"(): boolean
set "waxed"(value: boolean)
get "slim"(): boolean
get "framed"(): boolean
set "playerWhoMayEdit"(value: $UUID$Type)
get "playerWhoMayEdit"(): $UUID
get "renderBoundingBox"(): $AABB
get "textHolder"(): $TextHolder
get "public"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SignPostBlockTile$Type = ($SignPostBlockTile);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SignPostBlockTile_ = $SignPostBlockTile$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/configs/$CommonConfigs" {
import {$ConfigSpec, $ConfigSpec$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/configs/$ConfigSpec"
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$Holder$Reference, $Holder$Reference$Type} from "packages/net/minecraft/core/$Holder$Reference"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"

export class $CommonConfigs {
static readonly "SPEC": $ConfigSpec
static "xpBottlingOverride": $Predicate<($Block)>

constructor()

public static "init"(): void
public static "isEnabled"(key: string): boolean
public static "getSelectedRope"(): $Block
public static "getRopeOverride"(): $Holder$Reference<($Block)>
public static "stasisEnabled"(): boolean
public static "getRedMerchantSpawnMultiplier"(): double
get "selectedRope"(): $Block
get "ropeOverride"(): $Holder$Reference<($Block)>
get "redMerchantSpawnMultiplier"(): double
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CommonConfigs$Type = ($CommonConfigs);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CommonConfigs_ = $CommonConfigs$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/misc/songs/$SongsManager$Source" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $SongsManager$Source extends $Enum<($SongsManager$Source)> {
static readonly "NOTE_BLOCKS": $SongsManager$Source
static readonly "SOUND_EVENTS": $SongsManager$Source


public static "values"(): ($SongsManager$Source)[]
public static "valueOf"(name: string): $SongsManager$Source
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SongsManager$Source$Type = (("note_blocks") | ("sound_events")) | ($SongsManager$Source);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SongsManager$Source_ = $SongsManager$Source$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/entities/goals/$EquipAndRangeAttackGoal" {
import {$Goal, $Goal$Type} from "packages/net/minecraft/world/entity/ai/goal/$Goal"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$RedMerchantEntity, $RedMerchantEntity$Type} from "packages/net/mehvahdjukaar/supplementaries/common/entities/$RedMerchantEntity"

export class $EquipAndRangeAttackGoal extends $Goal {

constructor(mob: $RedMerchantEntity$Type, speed: double, cooldown: integer, minInt: integer, maxInt: integer, range: float, item: $ItemStack$Type)

public "canUse"(): boolean
public "canContinueToUse"(): boolean
public "start"(): void
public "stop"(): void
public "tick"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EquipAndRangeAttackGoal$Type = ($EquipAndRangeAttackGoal);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EquipAndRangeAttackGoal_ = $EquipAndRangeAttackGoal$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/core/mixins/forge/$SelfEntitySpawnDataMixin" {
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$IEntityAdditionalSpawnData, $IEntityAdditionalSpawnData$Type} from "packages/net/minecraftforge/entity/$IEntityAdditionalSpawnData"

export interface $SelfEntitySpawnDataMixin extends $IEntityAdditionalSpawnData {

 "writeSpawnData"(arg0: $FriendlyByteBuf$Type): void
 "readSpawnData"(arg0: $FriendlyByteBuf$Type): void
}

export namespace $SelfEntitySpawnDataMixin {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SelfEntitySpawnDataMixin$Type = ($SelfEntitySpawnDataMixin);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SelfEntitySpawnDataMixin_ = $SelfEntitySpawnDataMixin$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/network/$ClientBoundSyncTradesPacket" {
import {$Message, $Message$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/network/$Message"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$ChannelHandler$Context, $ChannelHandler$Context$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/network/$ChannelHandler$Context"
import {$MerchantOffers, $MerchantOffers$Type} from "packages/net/minecraft/world/item/trading/$MerchantOffers"

export class $ClientBoundSyncTradesPacket implements $Message {
readonly "containerId": integer
readonly "offers": $MerchantOffers
readonly "villagerLevel": integer
readonly "villagerXp": integer
readonly "showProgress": boolean
readonly "canRestock": boolean

constructor(buf: $FriendlyByteBuf$Type)
constructor(id: integer, offers: $MerchantOffers$Type, level: integer, villagerXp: integer, showProgress: boolean, canRestock: boolean)

public "handle"(context: $ChannelHandler$Context$Type): void
public "writeToBuffer"(buf: $FriendlyByteBuf$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientBoundSyncTradesPacket$Type = ($ClientBoundSyncTradesPacket);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientBoundSyncTradesPacket_ = $ClientBoundSyncTradesPacket$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/common/item/$DyeBottleItem" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$SoftFluidStack, $SoftFluidStack$Type} from "packages/net/mehvahdjukaar/moonlight/api/fluids/$SoftFluidStack"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$DyeColor, $DyeColor$Type} from "packages/net/minecraft/world/item/$DyeColor"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $DyeBottleItem extends $Item {
static readonly "COLOR_TAG": string
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(properties: $Item$Properties$Type)

public "getDefaultInstance"(): $ItemStack
public static "toFluidStack"(color: $DyeColor$Type, amount: integer): $SoftFluidStack
public "interactLivingEntity"(stack: $ItemStack$Type, player: $Player$Type, interactionTarget: $LivingEntity$Type, usedHand: $InteractionHand$Type): $InteractionResult
public "appendHoverText"(stack: $ItemStack$Type, level: $Level$Type, list: $List$Type<($Component$Type)>, isAdvanced: $TooltipFlag$Type): void
public static "mixColor"(oldColor: integer, newColor: integer, oldAmount: integer, newAmount: integer): integer
public static "fromFluidStack"(stack: $SoftFluidStack$Type): $ItemStack
public static "getClosestDye"(stack: $ItemStack$Type): $DyeColor
public static "getClosestDye"(tintColor: integer): $DyeColor
public static "getClosestDye"(stack: $SoftFluidStack$Type): $DyeColor
public static "getColor"(stack: $ItemStack$Type): integer
get "defaultInstance"(): $ItemStack
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DyeBottleItem$Type = ($DyeBottleItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DyeBottleItem_ = $DyeBottleItem$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/events/overrides/$BlockUseOverride" {
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"

export interface $BlockUseOverride {

 "isEnabled"(): boolean
 "appliesToBlock"(arg0: $Block$Type): boolean
 "altersWorld"(): boolean
 "tryPerformingAction"(arg0: $BlockState$Type, arg1: $BlockPos$Type, arg2: $Level$Type, arg3: $Player$Type, arg4: $InteractionHand$Type, arg5: $ItemStack$Type, arg6: $BlockHitResult$Type): $InteractionResult
}

export namespace $BlockUseOverride {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BlockUseOverride$Type = ($BlockUseOverride);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BlockUseOverride_ = $BlockUseOverride$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/renderers/entities/$RopeArrowRenderer" {
import {$EntityRendererProvider$Context, $EntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRendererProvider$Context"
import {$ArrowRenderer, $ArrowRenderer$Type} from "packages/net/minecraft/client/renderer/entity/$ArrowRenderer"
import {$RopeArrowEntity, $RopeArrowEntity$Type} from "packages/net/mehvahdjukaar/supplementaries/common/entities/$RopeArrowEntity"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $RopeArrowRenderer extends $ArrowRenderer<($RopeArrowEntity)> {
 "shadowRadius": float

constructor(context: $EntityRendererProvider$Context$Type)

public "getTextureLocation"(entity: $RopeArrowEntity$Type): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RopeArrowRenderer$Type = ($RopeArrowRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RopeArrowRenderer_ = $RopeArrowRenderer$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/client/colors/$LilyBlockColor" {
import {$BlockColor, $BlockColor$Type} from "packages/net/minecraft/client/color/block/$BlockColor"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockAndTintGetter, $BlockAndTintGetter$Type} from "packages/net/minecraft/world/level/$BlockAndTintGetter"

export class $LilyBlockColor implements $BlockColor {

constructor()

public "getColor"(blockState: $BlockState$Type, getter: $BlockAndTintGetter$Type, pos: $BlockPos$Type, i: integer): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LilyBlockColor$Type = ($LilyBlockColor);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LilyBlockColor_ = $LilyBlockColor$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/fluids/$FiniteFluid" {
import {$IntegerProperty, $IntegerProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$IntegerProperty"
import {$Fluid, $Fluid$Type} from "packages/net/minecraft/world/level/material/$Fluid"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$FluidState, $FluidState$Type} from "packages/net/minecraft/world/level/material/$FluidState"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $FiniteFluid extends $Fluid {
static readonly "LEVEL": $IntegerProperty
static readonly "FLUID_STATE_REGISTRY": $IdMapper<($FluidState)>

constructor(maxLayers: integer, block: $Supplier$Type<(any)>, bucket: $Supplier$Type<(any)>)

public "makeState"(level: integer): $FluidState
public "getLayersPerBlock"(): integer
public "shouldSlowDown"(state: $FluidState$Type): boolean
public "m_7000_"(blockReader: $BlockGetter$Type, pos: $BlockPos$Type, fluidState: $FluidState$Type): $Vec3
public "getTickDelay"(level: $LevelReader$Type): integer
public "m_6292_"(level: $Level$Type, pos: $BlockPos$Type, state: $FluidState$Type): void
public "getHeight"(state: $FluidState$Type, level: $BlockGetter$Type, pos: $BlockPos$Type): float
public "getOwnHeight"(state: $FluidState$Type): float
public "getBucket"(): $Item
public "getAmount"(state: $FluidState$Type): integer
public "isSource"(state: $FluidState$Type): boolean
public "getShape"(state: $FluidState$Type, level: $BlockGetter$Type, pos: $BlockPos$Type): $VoxelShape
get "layersPerBlock"(): integer
get "bucket"(): $Item
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FiniteFluid$Type = ($FiniteFluid);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FiniteFluid_ = $FiniteFluid$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/items/$QuiverItem" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$ClickAction, $ClickAction$Type} from "packages/net/minecraft/world/inventory/$ClickAction"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$DyeableLeatherItem, $DyeableLeatherItem$Type} from "packages/net/minecraft/world/item/$DyeableLeatherItem"
import {$TooltipComponent, $TooltipComponent$Type} from "packages/net/minecraft/world/inventory/tooltip/$TooltipComponent"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$QuiverItem$Data, $QuiverItem$Data$Type} from "packages/net/mehvahdjukaar/supplementaries/common/items/$QuiverItem$Data"
import {$List, $List$Type} from "packages/java/util/$List"
import {$DyeItem, $DyeItem$Type} from "packages/net/minecraft/world/item/$DyeItem"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$InteractionResultHolder, $InteractionResultHolder$Type} from "packages/net/minecraft/world/$InteractionResultHolder"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$SlotAccess, $SlotAccess$Type} from "packages/net/minecraft/world/entity/$SlotAccess"
import {$ICapabilityProvider, $ICapabilityProvider$Type} from "packages/net/minecraftforge/common/capabilities/$ICapabilityProvider"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$ItemEntity, $ItemEntity$Type} from "packages/net/minecraft/world/entity/item/$ItemEntity"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $QuiverItem extends $Item implements $DyeableLeatherItem {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(properties: $Item$Properties$Type)

public static "getQuiverData"(stack: $ItemStack$Type): $QuiverItem$Data
public "getUseDuration"(stack: $ItemStack$Type): integer
public static "getQuiver"(entity: $LivingEntity$Type): $ItemStack
public "onDestroyed"(pItemEntity: $ItemEntity$Type): void
public "use"(pLevel: $Level$Type, player: $Player$Type, pUsedHand: $InteractionHand$Type): $InteractionResultHolder<($ItemStack)>
public "overrideStackedOnOther"(quiver: $ItemStack$Type, pSlot: $Slot$Type, pAction: $ClickAction$Type, pPlayer: $Player$Type): boolean
public "overrideOtherStackedOnMe"(quiver: $ItemStack$Type, pOther: $ItemStack$Type, pSlot: $Slot$Type, pAction: $ClickAction$Type, pPlayer: $Player$Type, pAccess: $SlotAccess$Type): boolean
public "getBarColor"(pStack: $ItemStack$Type): integer
public "isBarVisible"(pStack: $ItemStack$Type): boolean
public "getBarWidth"(pStack: $ItemStack$Type): integer
public "inventoryTick"(stack: $ItemStack$Type, level: $Level$Type, entity: $Entity$Type, slotId: integer, isSelected: boolean): void
public "getTooltipImage"(pStack: $ItemStack$Type): $Optional<($TooltipComponent)>
public "releaseUsing"(stack: $ItemStack$Type, level: $Level$Type, livingEntity: $LivingEntity$Type, timeCharged: integer): void
public "appendHoverText"(pStack: $ItemStack$Type, pLevel: $Level$Type, pTooltipComponents: $List$Type<($Component$Type)>, pIsAdvanced: $TooltipFlag$Type): void
public "canFitInsideContainerItems"(): boolean
public "readShareTag"(stack: $ItemStack$Type, tag: $CompoundTag$Type): void
public "getShareTag"(stack: $ItemStack$Type): $CompoundTag
public "initCapabilities"(stack: $ItemStack$Type, nbt: $CompoundTag$Type): $ICapabilityProvider
public static "canAcceptItem"(toInsert: $ItemStack$Type): boolean
public "hasCustomColor"(arg0: $ItemStack$Type): boolean
public "clearColor"(arg0: $ItemStack$Type): void
public static "dyeArmor"(arg0: $ItemStack$Type, arg1: $List$Type<($DyeItem$Type)>): $ItemStack
public "setColor"(arg0: $ItemStack$Type, arg1: integer): void
public "getColor"(arg0: $ItemStack$Type): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $QuiverItem$Type = ($QuiverItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $QuiverItem_ = $QuiverItem$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/integration/forge/$MapAtlasCompatImpl" {
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"

export class $MapAtlasCompatImpl {

constructor()

public static "canPlayerSeeDeathMarker"(player: $Player$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MapAtlasCompatImpl$Type = ($MapAtlasCompatImpl);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MapAtlasCompatImpl_ = $MapAtlasCompatImpl$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/util/math/colors/$HSLColor" {
import {$RGBColor, $RGBColor$Type} from "packages/net/mehvahdjukaar/moonlight/api/util/math/colors/$RGBColor"
import {$Codec, $Codec$Type} from "packages/com/mojang/serialization/$Codec"
import {$BaseColor, $BaseColor$Type} from "packages/net/mehvahdjukaar/moonlight/api/util/math/colors/$BaseColor"

export class $HSLColor extends $BaseColor<($HSLColor)> {
/**
 * 
 * @deprecated
 */
static readonly "CODEC": $Codec<(integer)>

constructor(h: float, s: float, l: float, a: float)

public "toString"(): string
/**
 * 
 * @deprecated
 */
public "multiply"(color: $HSLColor$Type, hue: float, chroma: float, luminance: float, alpha: float): $HSLColor
public "multiply"(hue: float, saturation: float, lightness: float, alpha: float): $HSLColor
public "asHSL"(): $HSLColor
public "hue"(): float
public "saturation"(): float
public "alpha"(): float
public "distTo"(other: $HSLColor$Type): float
public "mixWith"(color: $HSLColor$Type, bias: float): $HSLColor
public "asRGB"(): $RGBColor
public "withSaturation"(saturation: float): $HSLColor
public "withHue"(hue: float): $HSLColor
public "withLightness"(lightness: float): $HSLColor
public "fromRGB"(rgb: $RGBColor$Type): $HSLColor
public "withAlpha"(alpha: float): $HSLColor
public static "averageColors"(...colors: ($HSLColor$Type)[]): $HSLColor
public "lightness"(): float
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $HSLColor$Type = ($HSLColor);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $HSLColor_ = $HSLColor$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/blocks/$StickBlock" {
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$PathComputationType, $PathComputationType$Type} from "packages/net/minecraft/world/level/pathfinder/$PathComputationType"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$WaterBlock, $WaterBlock$Type} from "packages/net/mehvahdjukaar/moonlight/api/block/$WaterBlock"
import {$List, $List$Type} from "packages/java/util/$List"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$CollisionContext, $CollisionContext$Type} from "packages/net/minecraft/world/phys/shapes/$CollisionContext"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$LootParams$Builder, $LootParams$Builder$Type} from "packages/net/minecraft/world/level/storage/loot/$LootParams$Builder"
import {$IRotatable, $IRotatable$Type} from "packages/net/mehvahdjukaar/moonlight/api/block/$IRotatable"
import {$Direction$Axis, $Direction$Axis$Type} from "packages/net/minecraft/core/$Direction$Axis"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$Rotation, $Rotation$Type} from "packages/net/minecraft/world/level/block/$Rotation"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $StickBlock extends $WaterBlock implements $IRotatable {
static readonly "AXIS_X": $BooleanProperty
static readonly "AXIS_Y": $BooleanProperty
static readonly "AXIS_Z": $BooleanProperty
static readonly "AXIS2PROPERTY": $Map<($Direction$Axis), ($BooleanProperty)>
static readonly "WATERLOGGED": $BooleanProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(properties: $BlockBehaviour$Properties$Type, fireSpread: integer)
constructor(properties: $BlockBehaviour$Properties$Type)

public static "findConnectedFlag"(world: $Level$Type, pos: $BlockPos$Type, searchDir: $Direction$Type, moveDir: $Direction$Type, it: integer): boolean
public static "getStickShape"(x: boolean, y: boolean, z: boolean): $VoxelShape
public "applyRotationLock"(world: $Level$Type, blockPos: $BlockPos$Type, state: $BlockState$Type, dir: $Direction$Type, half: integer): $BlockState
public "getStateForPlacement"(context: $BlockPlaceContext$Type): $BlockState
public "getRotatedState"(state: $BlockState$Type, world: $LevelAccessor$Type, pos: $BlockPos$Type, rotation: $Rotation$Type, axis: $Direction$Type, hit: $Vec3$Type): $Optional<($BlockState)>
public "getFireSpreadSpeed"(state: $BlockState$Type, world: $BlockGetter$Type, pos: $BlockPos$Type, face: $Direction$Type): integer
public "getFlammability"(state: $BlockState$Type, world: $BlockGetter$Type, pos: $BlockPos$Type, face: $Direction$Type): integer
public "isPathfindable"(state: $BlockState$Type, worldIn: $BlockGetter$Type, pos: $BlockPos$Type, type: $PathComputationType$Type): boolean
public "updateShape"(stateIn: $BlockState$Type, facing: $Direction$Type, facingState: $BlockState$Type, worldIn: $LevelAccessor$Type, currentPos: $BlockPos$Type, facingPos: $BlockPos$Type): $BlockState
public "use"(state: $BlockState$Type, world: $Level$Type, pos: $BlockPos$Type, player: $Player$Type, hand: $InteractionHand$Type, hit: $BlockHitResult$Type): $InteractionResult
public "canBeReplaced"(state: $BlockState$Type, context: $BlockPlaceContext$Type): boolean
public "rotate"(state: $BlockState$Type, rotation: $Rotation$Type): $BlockState
public "getDrops"(state: $BlockState$Type, pBuilder: $LootParams$Builder$Type): $List<($ItemStack)>
public "getShape"(state: $BlockState$Type, reader: $BlockGetter$Type, pos: $BlockPos$Type, context: $CollisionContext$Type): $VoxelShape
public "rotateOverAxis"(state: $BlockState$Type, world: $LevelAccessor$Type, pos: $BlockPos$Type, rotation: $Rotation$Type, axis: $Direction$Type, hit: $Vec3$Type): $Optional<($Direction)>
public "onRotated"(newState: $BlockState$Type, oldState: $BlockState$Type, world: $LevelAccessor$Type, pos: $BlockPos$Type, rotation: $Rotation$Type, axis: $Direction$Type, hit: $Vec3$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $StickBlock$Type = ($StickBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $StickBlock_ = $StickBlock$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/reg/$ClientRegistry" {
import {$KeyMapping, $KeyMapping$Type} from "packages/net/minecraft/client/$KeyMapping"
import {$LevelLightEngine, $LevelLightEngine$Type} from "packages/net/minecraft/world/level/lighting/$LevelLightEngine"
import {$ModelLayerLocation, $ModelLayerLocation$Type} from "packages/net/minecraft/client/model/geom/$ModelLayerLocation"
import {$WoodType, $WoodType$Type} from "packages/net/mehvahdjukaar/moonlight/api/set/wood/$WoodType"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $ClientRegistry {
static readonly "RAGE_SHADER": $ResourceLocation
static readonly "BARBARIC_RAGE_SHADER": string
static readonly "FLARE_SHADER": $ResourceLocation
static readonly "BLACK_AND_WHITE_SHADER": $ResourceLocation
static readonly "VANILLA_DESATURATE": $ResourceLocation
static readonly "BELLOWS_MODEL": $ModelLayerLocation
static readonly "CLOCK_HANDS_MODEL": $ModelLayerLocation
static readonly "GLOBE_BASE_MODEL": $ModelLayerLocation
static readonly "GLOBE_SPECIAL_MODEL": $ModelLayerLocation
static readonly "RED_MERCHANT_MODEL": $ModelLayerLocation
static readonly "HAT_STAND_MODEL": $ModelLayerLocation
static readonly "HAT_STAND_MODEL_ARMOR": $ModelLayerLocation
static readonly "JARVIS_MODEL": $ModelLayerLocation
static readonly "JAR_MODEL": $ModelLayerLocation
static readonly "PICKLE_MODEL": $ModelLayerLocation
static readonly "ENDERMAN_HEAD_MODEL": $ModelLayerLocation
static readonly "CANNON_MODEL": $ModelLayerLocation
static readonly "WIND_VANE_MODEL": $ModelLayerLocation
static readonly "BUNTING_MODEL": $ModelLayerLocation
static readonly "FLUTE_3D_MODEL": $ResourceLocation
static readonly "FLUTE_2D_MODEL": $ResourceLocation
static readonly "QUIVER_3D_MODEL": $ResourceLocation
static readonly "QUIVER_2D_MODEL": $ResourceLocation
static readonly "ALTIMETER_TEMPLATE": $ResourceLocation
static readonly "ALTIMETER_OVERLAY": $ResourceLocation
static readonly "BOAT_MODEL": $ResourceLocation
static readonly "BLACKBOARD_FRAME": $ResourceLocation
static readonly "SIGN_POST_MODELS": $Supplier<($Map<($WoodType), ($ResourceLocation)>)>
static readonly "QUIVER_KEYBIND": $KeyMapping

constructor()

public static "init"(): void
public static "setup"(): void
public static "getLightEngine"(): $LevelLightEngine
get "lightEngine"(): $LevelLightEngine
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientRegistry$Type = ($ClientRegistry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientRegistry_ = $ClientRegistry$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/client/model/$BakedQuadBuilder" {
import {$VertexFormatElement, $VertexFormatElement$Type} from "packages/com/mojang/blaze3d/vertex/$VertexFormatElement"
import {$VertexConsumer, $VertexConsumer$Type} from "packages/com/mojang/blaze3d/vertex/$VertexConsumer"
import {$Vector3f, $Vector3f$Type} from "packages/org/joml/$Vector3f"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$Matrix4f, $Matrix4f$Type} from "packages/org/joml/$Matrix4f"
import {$Matrix3f, $Matrix3f$Type} from "packages/org/joml/$Matrix3f"
import {$ByteBuffer, $ByteBuffer$Type} from "packages/java/nio/$ByteBuffer"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Transformation, $Transformation$Type} from "packages/com/mojang/math/$Transformation"
import {$PoseStack$Pose, $PoseStack$Pose$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack$Pose"
import {$TextureAtlasSprite, $TextureAtlasSprite$Type} from "packages/net/minecraft/client/renderer/texture/$TextureAtlasSprite"
import {$BakedQuad, $BakedQuad$Type} from "packages/net/minecraft/client/renderer/block/model/$BakedQuad"

export interface $BakedQuadBuilder extends $VertexConsumer {

 "build"(): $BakedQuad
 "normal"(matrix: $Matrix3f$Type, x: float, y: float, z: float): $BakedQuadBuilder
 "lightEmission"(arg0: integer): $BakedQuadBuilder
 "setShade"(arg0: boolean): $BakedQuadBuilder
/**
 * 
 * @deprecated
 */
 "fromVanilla"(arg0: $BakedQuad$Type): $BakedQuadBuilder
 "setAutoDirection"(): $BakedQuadBuilder
 "setAutoBuild"(arg0: $Consumer$Type<($BakedQuad$Type)>): $BakedQuadBuilder
 "setTint"(arg0: integer): $BakedQuadBuilder
 "vertex"(matrix: $Matrix4f$Type, x: float, y: float, z: float): $BakedQuadBuilder
 "setDirection"(arg0: $Direction$Type): $BakedQuadBuilder
 "setAmbientOcclusion"(arg0: boolean): $BakedQuadBuilder
 "vertex"(arg0: double, arg1: double, arg2: double): $VertexConsumer
 "uv"(arg0: float, arg1: float): $VertexConsumer
 "color"(arg0: integer, arg1: integer, arg2: integer, arg3: integer): $VertexConsumer
 "normal"(arg0: float, arg1: float, arg2: float): $VertexConsumer
 "overlayCoords"(arg0: integer, arg1: integer): $VertexConsumer
 "uv2"(arg0: integer, arg1: integer): $VertexConsumer
 "overlayCoords"(arg0: integer): $VertexConsumer
 "uv2"(arg0: integer): $VertexConsumer
 "defaultColor"(arg0: integer, arg1: integer, arg2: integer, arg3: integer): void
 "unsetDefaultColor"(): void
 "vertex"(arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: integer, arg10: integer, arg11: float, arg12: float, arg13: float): void
 "putBulkData"(arg0: $PoseStack$Pose$Type, arg1: $BakedQuad$Type, arg2: float, arg3: float, arg4: float, arg5: integer, arg6: integer): void
 "putBulkData"(arg0: $PoseStack$Pose$Type, arg1: $BakedQuad$Type, arg2: (float)[], arg3: float, arg4: float, arg5: float, arg6: float, arg7: (integer)[], arg8: integer, arg9: boolean): void
 "putBulkData"(arg0: $PoseStack$Pose$Type, arg1: $BakedQuad$Type, arg2: (float)[], arg3: float, arg4: float, arg5: float, arg6: (integer)[], arg7: integer, arg8: boolean): void
 "color"(arg0: integer): $VertexConsumer
 "color"(arg0: float, arg1: float, arg2: float, arg3: float): $VertexConsumer
 "endVertex"(): void
 "putBulkData"(arg0: $PoseStack$Pose$Type, arg1: $BakedQuad$Type, arg2: float, arg3: float, arg4: float, arg5: float, arg6: integer, arg7: integer, arg8: boolean): void
 "applyBakedLighting"(arg0: integer, arg1: $ByteBuffer$Type): integer
 "applyBakedNormals"(arg0: $Vector3f$Type, arg1: $ByteBuffer$Type, arg2: $Matrix3f$Type): void
 "misc"(arg0: $VertexFormatElement$Type, ...arg1: (integer)[]): $VertexConsumer
}

export namespace $BakedQuadBuilder {
function create(sprite: $TextureAtlasSprite$Type, transformation: $Matrix4f$Type): $BakedQuadBuilder
function create(sprite: $TextureAtlasSprite$Type, transformation: $Transformation$Type): $BakedQuadBuilder
function create(sprite: $TextureAtlasSprite$Type): $BakedQuadBuilder
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BakedQuadBuilder$Type = ($BakedQuadBuilder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BakedQuadBuilder_ = $BakedQuadBuilder$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/blocks/$FlagBlock" {
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$EntityBlock, $EntityBlock$Type} from "packages/net/minecraft/world/level/block/$EntityBlock"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Mirror, $Mirror$Type} from "packages/net/minecraft/world/level/block/$Mirror"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$DyeColor, $DyeColor$Type} from "packages/net/minecraft/world/item/$DyeColor"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$WaterBlock, $WaterBlock$Type} from "packages/net/mehvahdjukaar/moonlight/api/block/$WaterBlock"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"
import {$DirectionProperty, $DirectionProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$DirectionProperty"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$CollisionContext, $CollisionContext$Type} from "packages/net/minecraft/world/phys/shapes/$CollisionContext"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$IColored, $IColored$Type} from "packages/net/mehvahdjukaar/moonlight/api/block/$IColored"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$Rotation, $Rotation$Type} from "packages/net/minecraft/world/level/block/$Rotation"
import {$BlockEntityTicker, $BlockEntityTicker$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityTicker"
import {$GameEventListener, $GameEventListener$Type} from "packages/net/minecraft/world/level/gameevent/$GameEventListener"
import {$RenderShape, $RenderShape$Type} from "packages/net/minecraft/world/level/block/$RenderShape"

export class $FlagBlock extends $WaterBlock implements $EntityBlock, $IColored {
static readonly "FACING": $DirectionProperty
static readonly "WATERLOGGED": $BooleanProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(color: $DyeColor$Type, properties: $BlockBehaviour$Properties$Type)

public "getStateForPlacement"(context: $BlockPlaceContext$Type): $BlockState
public "setPlacedBy"(world: $Level$Type, pos: $BlockPos$Type, state: $BlockState$Type, entity: $LivingEntity$Type, stack: $ItemStack$Type): void
public "getCloneItemStack"(level: $BlockGetter$Type, pos: $BlockPos$Type, state: $BlockState$Type): $ItemStack
public "isPossibleToRespawnInThis"(state: $BlockState$Type): boolean
public "getColor"(): $DyeColor
public "getFireSpreadSpeed"(state: $BlockState$Type, world: $BlockGetter$Type, pos: $BlockPos$Type, face: $Direction$Type): integer
public "getFlammability"(state: $BlockState$Type, world: $BlockGetter$Type, pos: $BlockPos$Type, face: $Direction$Type): integer
public "use"(state: $BlockState$Type, world: $Level$Type, pos: $BlockPos$Type, player: $Player$Type, hand: $InteractionHand$Type, hit: $BlockHitResult$Type): $InteractionResult
public "getRenderShape"(state: $BlockState$Type): $RenderShape
public "rotate"(state: $BlockState$Type, rot: $Rotation$Type): $BlockState
public "mirror"(state: $BlockState$Type, mirrorIn: $Mirror$Type): $BlockState
public "getShape"(state: $BlockState$Type, world: $BlockGetter$Type, pos: $BlockPos$Type, context: $CollisionContext$Type): $VoxelShape
public "newBlockEntity"(pPos: $BlockPos$Type, pState: $BlockState$Type): $BlockEntity
public "getTicker"<T extends $BlockEntity>(arg0: $Level$Type, arg1: $BlockState$Type, arg2: $BlockEntityType$Type<(T)>): $BlockEntityTicker<(T)>
public "getListener"<T extends $BlockEntity>(arg0: $ServerLevel$Type, arg1: T): $GameEventListener
/**
 * 
 * @deprecated
 */
public "changeItemColor"(color: $DyeColor$Type): $Item
public "supportsBlankColor"(): boolean
get "color"(): $DyeColor
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FlagBlock$Type = ($FlagBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FlagBlock_ = $FlagBlock$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/common/$CakeRegistry" {
import {$BlockTypeRegistry, $BlockTypeRegistry$Type} from "packages/net/mehvahdjukaar/moonlight/api/set/$BlockTypeRegistry"
import {$CakeRegistry$CakeType, $CakeRegistry$CakeType$Type} from "packages/net/mehvahdjukaar/amendments/common/$CakeRegistry$CakeType"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"

export class $CakeRegistry extends $BlockTypeRegistry<($CakeRegistry$CakeType)> {
static readonly "INSTANCE": $CakeRegistry
static readonly "VANILLA": $CakeRegistry$CakeType


public "getDefaultType"(): $CakeRegistry$CakeType
public "detectTypeFromBlock"(block: $Block$Type, blockId: $ResourceLocation$Type): $Optional<($CakeRegistry$CakeType)>
get "defaultType"(): $CakeRegistry$CakeType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CakeRegistry$Type = ($CakeRegistry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CakeRegistry_ = $CakeRegistry$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/resources/$StaticResource" {
import {$JsonObject, $JsonObject$Type} from "packages/com/google/gson/$JsonObject"
import {$Resource, $Resource$Type} from "packages/net/minecraft/server/packs/resources/$Resource"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$ResourceManager, $ResourceManager$Type} from "packages/net/minecraft/server/packs/resources/$ResourceManager"

export class $StaticResource {
readonly "data": (byte)[]
readonly "location": $ResourceLocation
readonly "sourceName": string


public static "of"(original: $Resource$Type, location: $ResourceLocation$Type): $StaticResource
public static "create"(data: (byte)[], location: $ResourceLocation$Type): $StaticResource
public "toJson"(): $JsonObject
public static "getOrLog"(manager: $ResourceManager$Type, location: $ResourceLocation$Type): $StaticResource
public static "getOrFail"(manager: $ResourceManager$Type, location: $ResourceLocation$Type): $StaticResource
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $StaticResource$Type = ($StaticResource);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $StaticResource_ = $StaticResource$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/block/$WaterBlock" {
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$Fluid, $Fluid$Type} from "packages/net/minecraft/world/level/material/$Fluid"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$SimpleWaterloggedBlock, $SimpleWaterloggedBlock$Type} from "packages/net/minecraft/world/level/block/$SimpleWaterloggedBlock"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$PathComputationType, $PathComputationType$Type} from "packages/net/minecraft/world/level/pathfinder/$PathComputationType"
import {$FluidState, $FluidState$Type} from "packages/net/minecraft/world/level/material/$FluidState"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"

export class $WaterBlock extends $Block implements $SimpleWaterloggedBlock {
static readonly "WATERLOGGED": $BooleanProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation


public "getStateForPlacement"(context: $BlockPlaceContext$Type): $BlockState
public "isPathfindable"(state: $BlockState$Type, reader: $BlockGetter$Type, pos: $BlockPos$Type, PathComputationType: $PathComputationType$Type): boolean
public "updateShape"(stateIn: $BlockState$Type, facing: $Direction$Type, facingState: $BlockState$Type, worldIn: $LevelAccessor$Type, currentPos: $BlockPos$Type, facingPos: $BlockPos$Type): $BlockState
public "getFluidState"(state: $BlockState$Type): $FluidState
public "getPickupSound"(): $Optional<($SoundEvent)>
public "canPlaceLiquid"(arg0: $BlockGetter$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: $Fluid$Type): boolean
public "placeLiquid"(arg0: $LevelAccessor$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: $FluidState$Type): boolean
public "pickupBlock"(arg0: $LevelAccessor$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type): $ItemStack
public "getPickupSound"(arg0: $BlockState$Type): $Optional<($SoundEvent)>
get "pickupSound"(): $Optional<($SoundEvent)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WaterBlock$Type = ($WaterBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WaterBlock_ = $WaterBlock$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/items/$SugarCubeItem" {
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$InteractionResultHolder, $InteractionResultHolder$Type} from "packages/net/minecraft/world/$InteractionResultHolder"
import {$UseOnContext, $UseOnContext$Type} from "packages/net/minecraft/world/item/context/$UseOnContext"
import {$BlockItem, $BlockItem$Type} from "packages/net/minecraft/world/item/$BlockItem"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$AdditionalItemPlacement, $AdditionalItemPlacement$Type} from "packages/net/mehvahdjukaar/moonlight/api/item/additional_placements/$AdditionalItemPlacement"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $SugarCubeItem extends $BlockItem {
static readonly "BLOCK_ENTITY_TAG": string
static readonly "BLOCK_STATE_TAG": string
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(block: $Block$Type, properties: $Item$Properties$Type)

public "use"(level: $Level$Type, player: $Player$Type, usedHand: $InteractionHand$Type): $InteractionResultHolder<($ItemStack)>
public "useOn"(context: $UseOnContext$Type): $InteractionResult
public "moonlight$addAdditionalBehavior"(arg0: $AdditionalItemPlacement$Type): void
public "moonlight$getAdditionalBehavior"(): $AdditionalItemPlacement
public "moonlight$getClientAnimationExtension"(): any
public "moonlight$setClientAnimationExtension"(arg0: any): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SugarCubeItem$Type = ($SugarCubeItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SugarCubeItem_ = $SugarCubeItem$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/renderers/entities/$RedMerchantRenderer" {
import {$RenderLayer, $RenderLayer$Type} from "packages/net/minecraft/client/renderer/entity/layers/$RenderLayer"
import {$EntityRendererProvider$Context, $EntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRendererProvider$Context"
import {$List, $List$Type} from "packages/java/util/$List"
import {$EntityModel, $EntityModel$Type} from "packages/net/minecraft/client/model/$EntityModel"
import {$MobRenderer, $MobRenderer$Type} from "packages/net/minecraft/client/renderer/entity/$MobRenderer"
import {$LayerDefinition, $LayerDefinition$Type} from "packages/net/minecraft/client/model/geom/builders/$LayerDefinition"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$RedMerchantEntity, $RedMerchantEntity$Type} from "packages/net/mehvahdjukaar/supplementaries/common/entities/$RedMerchantEntity"
import {$VillagerModel, $VillagerModel$Type} from "packages/net/minecraft/client/model/$VillagerModel"

export class $RedMerchantRenderer extends $MobRenderer<($RedMerchantEntity), ($VillagerModel<($RedMerchantEntity)>)> {
static readonly "LEASH_RENDER_STEPS": integer
 "model": M
 "layers": $List<($RenderLayer<(T), (M)>)>
 "shadowRadius": float

constructor(context: $EntityRendererProvider$Context$Type)

public static "createMesh"(): $LayerDefinition
public "getTextureLocation"(entity: $RedMerchantEntity$Type): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RedMerchantRenderer$Type = ($RedMerchantRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RedMerchantRenderer_ = $RedMerchantRenderer$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/$IWeakContainer" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $IWeakContainer {

 "canHoldItems"(): boolean

(): boolean
}

export namespace $IWeakContainer {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IWeakContainer$Type = ($IWeakContainer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IWeakContainer_ = $IWeakContainer$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/integration/create/$FluidFillLevelDisplaySource" {
import {$PercentOrProgressBarDisplaySource, $PercentOrProgressBarDisplaySource$Type} from "packages/com/simibubi/create/content/redstone/displayLink/source/$PercentOrProgressBarDisplaySource"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ModularGuiLineBuilder, $ModularGuiLineBuilder$Type} from "packages/com/simibubi/create/foundation/gui/$ModularGuiLineBuilder"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$DisplayLinkContext, $DisplayLinkContext$Type} from "packages/com/simibubi/create/content/redstone/displayLink/$DisplayLinkContext"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $FluidFillLevelDisplaySource extends $PercentOrProgressBarDisplaySource {
static readonly "EMPTY": $List<($MutableComponent)>
static readonly "EMPTY_LINE": $MutableComponent
static readonly "WHITESPACE": $MutableComponent
 "id": $ResourceLocation

constructor()

public "initConfigurationWidgets"(context: $DisplayLinkContext$Type, builder: $ModularGuiLineBuilder$Type, isFirstLine: boolean): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FluidFillLevelDisplaySource$Type = ($FluidFillLevelDisplaySource);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FluidFillLevelDisplaySource_ = $FluidFillLevelDisplaySource$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/misc/globe/$GlobeTextureGenerator$Pixel" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $GlobeTextureGenerator$Pixel {

constructor(isnull: boolean)

public "isNull"(): boolean
public "getTemp"(): integer
public "isCold"(): boolean
public "isHot"(): boolean
public "isTemperate"(): boolean
public "setWater"(): void
public "setLand"(): void
public "isIceberg"(): boolean
public "isSunken"(): boolean
public "isWater"(): boolean
public "isShaded"(): boolean
public "getColor"(): byte
public "isMushroom"(): boolean
public "isLand"(): boolean
get "null"(): boolean
get "temp"(): integer
get "cold"(): boolean
get "hot"(): boolean
get "temperate"(): boolean
get "iceberg"(): boolean
get "sunken"(): boolean
get "water"(): boolean
get "shaded"(): boolean
get "color"(): byte
get "mushroom"(): boolean
get "land"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GlobeTextureGenerator$Pixel$Type = ($GlobeTextureGenerator$Pixel);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GlobeTextureGenerator$Pixel_ = $GlobeTextureGenerator$Pixel$Type;
}}
declare module "packages/net/mehvahdjukaar/dummmmmmy/common/$TargetDummyItem" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$UseOnContext, $UseOnContext$Type} from "packages/net/minecraft/world/item/context/$UseOnContext"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $TargetDummyItem extends $Item {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(builder: $Item$Properties$Type)

public "useOn"(context: $UseOnContext$Type): $InteractionResult
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TargetDummyItem$Type = ($TargetDummyItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TargetDummyItem_ = $TargetDummyItem$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/integration/forge/$FarmersRespriteCompatImpl" {
import {$IntegerProperty, $IntegerProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$IntegerProperty"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"

export class $FarmersRespriteCompatImpl {

constructor()

public static "isKettle"(block: $BlockState$Type): boolean
public static "getWaterLevel"(): $IntegerProperty
get "waterLevel"(): $IntegerProperty
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FarmersRespriteCompatImpl$Type = ($FarmersRespriteCompatImpl);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FarmersRespriteCompatImpl_ = $FarmersRespriteCompatImpl$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/core/client/$DummyCamera" {
import {$Camera, $Camera$Type} from "packages/net/minecraft/client/$Camera"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $DummyCamera extends $Camera {
static readonly "FOG_DISTANCE_SCALE": float

constructor()

public "m_90584_"(pX: double, pY: double, pZ: double): void
public "setPosition"(pPos: $Vec3$Type): void
public "setPosition"(pPos: $BlockPos$Type): void
set "position"(value: $Vec3$Type)
set "position"(value: $BlockPos$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DummyCamera$Type = ($DummyCamera);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DummyCamera_ = $DummyCamera$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/common/$CakeRegistry$CakeType" {
import {$ItemLike, $ItemLike$Type} from "packages/net/minecraft/world/level/$ItemLike"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$BlockType, $BlockType$Type} from "packages/net/mehvahdjukaar/moonlight/api/set/$BlockType"

export class $CakeRegistry$CakeType extends $BlockType {
readonly "cake": $Block
readonly "id": $ResourceLocation

constructor(name: $ResourceLocation$Type, cake: $Block$Type)

public "getTranslationKey"(): string
public "mainChild"(): $ItemLike
get "translationKey"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CakeRegistry$CakeType$Type = ($CakeRegistry$CakeType);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CakeRegistry$CakeType_ = $CakeRegistry$CakeType$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/integration/$CreateCompat" {
import {$UnaryOperator, $UnaryOperator$Type} from "packages/java/util/function/$UnaryOperator"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Rotation, $Rotation$Type} from "packages/net/minecraft/world/level/block/$Rotation"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$DisplayLinkContext, $DisplayLinkContext$Type} from "packages/com/simibubi/create/content/redstone/displayLink/$DisplayLinkContext"
import {$MovementContext, $MovementContext$Type} from "packages/com/simibubi/create/content/contraptions/behaviour/$MovementContext"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $CreateCompat {

constructor()

public static "setup"(): void
public static "changeState"(context: $MovementContext$Type, newState: $BlockState$Type): void
public static "setupClient"(): void
public static "isContraption"(context: $MovementContext$Type, passenger: $Entity$Type): boolean
public static "isClockWise"(rot: $UnaryOperator$Type<($Vec3$Type)>, dir: $Direction$Type): $Rotation
public static "getDisplayedItem"(context: $DisplayLinkContext$Type, source: $BlockEntity$Type, predicate: $Predicate$Type<($ItemStack$Type)>): $ItemStack
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CreateCompat$Type = ($CreateCompat);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CreateCompat_ = $CreateCompat$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/worldgen/$BasaltAshFeature" {
import {$RandomFeatureConfiguration, $RandomFeatureConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$RandomFeatureConfiguration"
import {$SpikeConfiguration, $SpikeConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$SpikeConfiguration"
import {$MultifaceGrowthConfiguration, $MultifaceGrowthConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$MultifaceGrowthConfiguration"
import {$RootSystemConfiguration, $RootSystemConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$RootSystemConfiguration"
import {$UnderwaterMagmaConfiguration, $UnderwaterMagmaConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$UnderwaterMagmaConfiguration"
import {$WorldGenLevel, $WorldGenLevel$Type} from "packages/net/minecraft/world/level/$WorldGenLevel"
import {$TwistingVinesConfig, $TwistingVinesConfig$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$TwistingVinesConfig"
import {$FeaturePlaceContext, $FeaturePlaceContext$Type} from "packages/net/minecraft/world/level/levelgen/feature/$FeaturePlaceContext"
import {$HugeMushroomFeatureConfiguration, $HugeMushroomFeatureConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$HugeMushroomFeatureConfiguration"
import {$BlockStateProvider, $BlockStateProvider$Type} from "packages/net/minecraft/world/level/levelgen/feature/stateproviders/$BlockStateProvider"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$HugeFungusConfiguration, $HugeFungusConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/$HugeFungusConfiguration"
import {$FossilFeatureConfiguration, $FossilFeatureConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/$FossilFeatureConfiguration"
import {$DeltaFeatureConfiguration, $DeltaFeatureConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$DeltaFeatureConfiguration"
import {$BasaltAshFeature$Config, $BasaltAshFeature$Config$Type} from "packages/net/mehvahdjukaar/supplementaries/common/worldgen/$BasaltAshFeature$Config"
import {$BlockPileConfiguration, $BlockPileConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$BlockPileConfiguration"
import {$OreConfiguration, $OreConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$OreConfiguration"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$SculkPatchConfiguration, $SculkPatchConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$SculkPatchConfiguration"
import {$NetherForestVegetationConfig, $NetherForestVegetationConfig$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$NetherForestVegetationConfig"
import {$GeodeConfiguration, $GeodeConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$GeodeConfiguration"
import {$RandomBooleanFeatureConfiguration, $RandomBooleanFeatureConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$RandomBooleanFeatureConfiguration"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$ColumnFeatureConfiguration, $ColumnFeatureConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$ColumnFeatureConfiguration"
import {$CountConfiguration, $CountConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$CountConfiguration"
import {$VegetationPatchConfiguration, $VegetationPatchConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$VegetationPatchConfiguration"
import {$Feature, $Feature$Type} from "packages/net/minecraft/world/level/levelgen/feature/$Feature"
import {$BonusChestFeature, $BonusChestFeature$Type} from "packages/net/minecraft/world/level/levelgen/feature/$BonusChestFeature"
import {$LakeFeature$Configuration, $LakeFeature$Configuration$Type} from "packages/net/minecraft/world/level/levelgen/feature/$LakeFeature$Configuration"
import {$BlockColumnConfiguration, $BlockColumnConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$BlockColumnConfiguration"
import {$RandomPatchConfiguration, $RandomPatchConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$RandomPatchConfiguration"
import {$ProbabilityFeatureConfiguration, $ProbabilityFeatureConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$ProbabilityFeatureConfiguration"
import {$Codec, $Codec$Type} from "packages/com/mojang/serialization/$Codec"
import {$TreeConfiguration, $TreeConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$TreeConfiguration"
import {$DripstoneClusterConfiguration, $DripstoneClusterConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$DripstoneClusterConfiguration"
import {$LayerConfiguration, $LayerConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$LayerConfiguration"
import {$ReplaceBlockConfiguration, $ReplaceBlockConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$ReplaceBlockConfiguration"
import {$BlockStateConfiguration, $BlockStateConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$BlockStateConfiguration"
import {$SimpleBlockConfiguration, $SimpleBlockConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$SimpleBlockConfiguration"
import {$DiskConfiguration, $DiskConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$DiskConfiguration"
import {$SeagrassFeature, $SeagrassFeature$Type} from "packages/net/minecraft/world/level/levelgen/feature/$SeagrassFeature"
import {$ReplaceSphereConfiguration, $ReplaceSphereConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$ReplaceSphereConfiguration"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$PointedDripstoneConfiguration, $PointedDripstoneConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$PointedDripstoneConfiguration"
import {$SpringConfiguration, $SpringConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$SpringConfiguration"
import {$SimpleRandomFeatureConfiguration, $SimpleRandomFeatureConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$SimpleRandomFeatureConfiguration"
import {$LargeDripstoneConfiguration, $LargeDripstoneConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$LargeDripstoneConfiguration"
import {$RuleTest, $RuleTest$Type} from "packages/net/minecraft/world/level/levelgen/structure/templatesystem/$RuleTest"
import {$NoneFeatureConfiguration, $NoneFeatureConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$NoneFeatureConfiguration"
import {$EndGatewayConfiguration, $EndGatewayConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$EndGatewayConfiguration"

export class $BasaltAshFeature extends $Feature<($BasaltAshFeature$Config)> {
static readonly "NO_OP": $Feature<($NoneFeatureConfiguration)>
static readonly "TREE": $Feature<($TreeConfiguration)>
static readonly "FLOWER": $Feature<($RandomPatchConfiguration)>
static readonly "NO_BONEMEAL_FLOWER": $Feature<($RandomPatchConfiguration)>
static readonly "RANDOM_PATCH": $Feature<($RandomPatchConfiguration)>
static readonly "BLOCK_PILE": $Feature<($BlockPileConfiguration)>
static readonly "SPRING": $Feature<($SpringConfiguration)>
static readonly "CHORUS_PLANT": $Feature<($NoneFeatureConfiguration)>
static readonly "REPLACE_SINGLE_BLOCK": $Feature<($ReplaceBlockConfiguration)>
static readonly "VOID_START_PLATFORM": $Feature<($NoneFeatureConfiguration)>
static readonly "DESERT_WELL": $Feature<($NoneFeatureConfiguration)>
static readonly "FOSSIL": $Feature<($FossilFeatureConfiguration)>
static readonly "HUGE_RED_MUSHROOM": $Feature<($HugeMushroomFeatureConfiguration)>
static readonly "HUGE_BROWN_MUSHROOM": $Feature<($HugeMushroomFeatureConfiguration)>
static readonly "ICE_SPIKE": $Feature<($NoneFeatureConfiguration)>
static readonly "GLOWSTONE_BLOB": $Feature<($NoneFeatureConfiguration)>
static readonly "FREEZE_TOP_LAYER": $Feature<($NoneFeatureConfiguration)>
static readonly "VINES": $Feature<($NoneFeatureConfiguration)>
static readonly "BLOCK_COLUMN": $Feature<($BlockColumnConfiguration)>
static readonly "VEGETATION_PATCH": $Feature<($VegetationPatchConfiguration)>
static readonly "WATERLOGGED_VEGETATION_PATCH": $Feature<($VegetationPatchConfiguration)>
static readonly "ROOT_SYSTEM": $Feature<($RootSystemConfiguration)>
static readonly "MULTIFACE_GROWTH": $Feature<($MultifaceGrowthConfiguration)>
static readonly "UNDERWATER_MAGMA": $Feature<($UnderwaterMagmaConfiguration)>
static readonly "MONSTER_ROOM": $Feature<($NoneFeatureConfiguration)>
static readonly "BLUE_ICE": $Feature<($NoneFeatureConfiguration)>
static readonly "ICEBERG": $Feature<($BlockStateConfiguration)>
static readonly "FOREST_ROCK": $Feature<($BlockStateConfiguration)>
static readonly "DISK": $Feature<($DiskConfiguration)>
static readonly "LAKE": $Feature<($LakeFeature$Configuration)>
static readonly "ORE": $Feature<($OreConfiguration)>
static readonly "END_SPIKE": $Feature<($SpikeConfiguration)>
static readonly "END_ISLAND": $Feature<($NoneFeatureConfiguration)>
static readonly "END_GATEWAY": $Feature<($EndGatewayConfiguration)>
static readonly "SEAGRASS": $SeagrassFeature
static readonly "KELP": $Feature<($NoneFeatureConfiguration)>
static readonly "CORAL_TREE": $Feature<($NoneFeatureConfiguration)>
static readonly "CORAL_MUSHROOM": $Feature<($NoneFeatureConfiguration)>
static readonly "CORAL_CLAW": $Feature<($NoneFeatureConfiguration)>
static readonly "SEA_PICKLE": $Feature<($CountConfiguration)>
static readonly "SIMPLE_BLOCK": $Feature<($SimpleBlockConfiguration)>
static readonly "BAMBOO": $Feature<($ProbabilityFeatureConfiguration)>
static readonly "HUGE_FUNGUS": $Feature<($HugeFungusConfiguration)>
static readonly "NETHER_FOREST_VEGETATION": $Feature<($NetherForestVegetationConfig)>
static readonly "WEEPING_VINES": $Feature<($NoneFeatureConfiguration)>
static readonly "TWISTING_VINES": $Feature<($TwistingVinesConfig)>
static readonly "BASALT_COLUMNS": $Feature<($ColumnFeatureConfiguration)>
static readonly "DELTA_FEATURE": $Feature<($DeltaFeatureConfiguration)>
static readonly "REPLACE_BLOBS": $Feature<($ReplaceSphereConfiguration)>
static readonly "FILL_LAYER": $Feature<($LayerConfiguration)>
static readonly "BONUS_CHEST": $BonusChestFeature
static readonly "BASALT_PILLAR": $Feature<($NoneFeatureConfiguration)>
static readonly "SCATTERED_ORE": $Feature<($OreConfiguration)>
static readonly "RANDOM_SELECTOR": $Feature<($RandomFeatureConfiguration)>
static readonly "SIMPLE_RANDOM_SELECTOR": $Feature<($SimpleRandomFeatureConfiguration)>
static readonly "RANDOM_BOOLEAN_SELECTOR": $Feature<($RandomBooleanFeatureConfiguration)>
static readonly "GEODE": $Feature<($GeodeConfiguration)>
static readonly "DRIPSTONE_CLUSTER": $Feature<($DripstoneClusterConfiguration)>
static readonly "LARGE_DRIPSTONE": $Feature<($LargeDripstoneConfiguration)>
static readonly "POINTED_DRIPSTONE": $Feature<($PointedDripstoneConfiguration)>
static readonly "SCULK_PATCH": $Feature<($SculkPatchConfiguration)>

constructor(codec: $Codec$Type<($BasaltAshFeature$Config$Type)>)

public "placeAsh"(worldGenLevel: $WorldGenLevel$Type, ySpread: integer, origin: $BlockPos$Type, basaltTest: $RuleTest$Type, ash: $BlockStateProvider$Type, belowAsh: $Optional$Type<($BlockState$Type)>, random: $RandomSource$Type): boolean
public "place"(context: $FeaturePlaceContext$Type<($BasaltAshFeature$Config$Type)>): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BasaltAshFeature$Type = ($BasaltAshFeature);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BasaltAshFeature_ = $BasaltAshFeature$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/entities/trades/$ModVillagerTrades" {
import {$VillagerTrades$ItemListing, $VillagerTrades$ItemListing$Type} from "packages/net/minecraft/world/entity/npc/$VillagerTrades$ItemListing"

export class $ModVillagerTrades {

constructor()

public static "init"(): void
public static "getRedMerchantTrades"(): ($VillagerTrades$ItemListing)[]
get "redMerchantTrades"(): ($VillagerTrades$ItemListing)[]
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModVillagerTrades$Type = ($ModVillagerTrades);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModVillagerTrades_ = $ModVillagerTrades$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/faucet/$BeehiveInteraction" {
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$FluidOffer, $FluidOffer$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/faucet/$FluidOffer"
import {$FaucetTarget$BlState, $FaucetTarget$BlState$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/faucet/$FaucetTarget$BlState"
import {$SoftFluidStack, $SoftFluidStack$Type} from "packages/net/mehvahdjukaar/moonlight/api/fluids/$SoftFluidStack"
import {$FaucetSource$BlState, $FaucetSource$BlState$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/faucet/$FaucetSource$BlState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $BeehiveInteraction implements $FaucetTarget$BlState, $FaucetSource$BlState {


public "fill"(level: $Level$Type, pos: $BlockPos$Type, state: $BlockState$Type, fluid: $SoftFluidStack$Type, minAmount: integer): integer
public "drain"(level: $Level$Type, pos: $BlockPos$Type, dir: $Direction$Type, source: $BlockState$Type, amount: integer): void
public "getProvidedFluid"(level: $Level$Type, pos: $BlockPos$Type, dir: $Direction$Type, state: $BlockState$Type): $FluidOffer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BeehiveInteraction$Type = ($BeehiveInteraction);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BeehiveInteraction_ = $BeehiveInteraction$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/client/renderers/$CeilingBannerBlockTileRenderer" {
import {$BlockEntityRendererProvider$Context, $BlockEntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/blockentity/$BlockEntityRendererProvider$Context"
import {$CeilingBannerBlockTile, $CeilingBannerBlockTile$Type} from "packages/net/mehvahdjukaar/amendments/common/tile/$CeilingBannerBlockTile"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$BlockEntityRenderer, $BlockEntityRenderer$Type} from "packages/net/minecraft/client/renderer/blockentity/$BlockEntityRenderer"

export class $CeilingBannerBlockTileRenderer implements $BlockEntityRenderer<($CeilingBannerBlockTile)> {

constructor(context: $BlockEntityRendererProvider$Context$Type)

public "render"(tile: $CeilingBannerBlockTile$Type, partialTick: float, poseStack: $PoseStack$Type, multiBufferSource: $MultiBufferSource$Type, light: integer, pPackedOverlay: integer): void
public "shouldRender"(arg0: $CeilingBannerBlockTile$Type, arg1: $Vec3$Type): boolean
public "shouldRenderOffScreen"(arg0: $CeilingBannerBlockTile$Type): boolean
public "getViewDistance"(): integer
get "viewDistance"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CeilingBannerBlockTileRenderer$Type = ($CeilingBannerBlockTileRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CeilingBannerBlockTileRenderer_ = $CeilingBannerBlockTileRenderer$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/client/model/$WaterloggedLilyModel" {
import {$ModelData, $ModelData$Type} from "packages/net/minecraftforge/client/model/data/$ModelData"
import {$ItemTransforms, $ItemTransforms$Type} from "packages/net/minecraft/client/renderer/block/model/$ItemTransforms"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$ExtraModelData, $ExtraModelData$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$ExtraModelData"
import {$CustomBakedModel, $CustomBakedModel$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$CustomBakedModel"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$BakedModel, $BakedModel$Type} from "packages/net/minecraft/client/resources/model/$BakedModel"
import {$RenderType, $RenderType$Type} from "packages/net/minecraft/client/renderer/$RenderType"
import {$ItemOverrides, $ItemOverrides$Type} from "packages/net/minecraft/client/renderer/block/model/$ItemOverrides"
import {$ItemDisplayContext, $ItemDisplayContext$Type} from "packages/net/minecraft/world/item/$ItemDisplayContext"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$List, $List$Type} from "packages/java/util/$List"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$ChunkRenderTypeSet, $ChunkRenderTypeSet$Type} from "packages/net/minecraftforge/client/$ChunkRenderTypeSet"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockAndTintGetter, $BlockAndTintGetter$Type} from "packages/net/minecraft/world/level/$BlockAndTintGetter"
import {$BakedQuad, $BakedQuad$Type} from "packages/net/minecraft/client/renderer/block/model/$BakedQuad"
import {$TextureAtlasSprite, $TextureAtlasSprite$Type} from "packages/net/minecraft/client/renderer/texture/$TextureAtlasSprite"

export class $WaterloggedLilyModel implements $CustomBakedModel {

constructor()

public "usesBlockLight"(): boolean
public "isGui3d"(): boolean
public "getBlockQuads"(state: $BlockState$Type, side: $Direction$Type, rand: $RandomSource$Type, renderType: $RenderType$Type, data: $ExtraModelData$Type): $List<($BakedQuad)>
public "getBlockParticle"(data: $ExtraModelData$Type): $TextureAtlasSprite
public "isCustomRenderer"(): boolean
public "getOverrides"(): $ItemOverrides
public "getTransforms"(): $ItemTransforms
public "useAmbientOcclusion"(): boolean
public "getParticleIcon"(): $TextureAtlasSprite
public "getQuads"(state: $BlockState$Type, side: $Direction$Type, rand: $RandomSource$Type): $List<(any)>
public "getQuads"(state: $BlockState$Type, side: $Direction$Type, rand: $RandomSource$Type, modelData: $ModelData$Type, type: $RenderType$Type): $List<(any)>
public "getParticleIcon"(data: $ModelData$Type): $TextureAtlasSprite
public "getModelData"(level: $BlockAndTintGetter$Type, pos: $BlockPos$Type, state: $BlockState$Type, modelData: $ModelData$Type): $ModelData
public "getModelData"(originalData: $ExtraModelData$Type, stack: $ItemStack$Type): $ExtraModelData
public "getModelData"(tileData: $ExtraModelData$Type, pos: $BlockPos$Type, state: $BlockState$Type, level: $BlockAndTintGetter$Type): $ExtraModelData
public "useAmbientOcclusion"(arg0: $BlockState$Type, arg1: $RenderType$Type): boolean
public "useAmbientOcclusion"(arg0: $BlockState$Type): boolean
public "getRenderTypes"(arg0: $ItemStack$Type, arg1: boolean): $List<($RenderType)>
public "getRenderTypes"(arg0: $BlockState$Type, arg1: $RandomSource$Type, arg2: $ModelData$Type): $ChunkRenderTypeSet
public "getRenderPasses"(arg0: $ItemStack$Type, arg1: boolean): $List<($BakedModel)>
public "applyTransform"(arg0: $ItemDisplayContext$Type, arg1: $PoseStack$Type, arg2: boolean): $BakedModel
public "useAmbientOcclusionWithLightEmission"(arg0: $BlockState$Type, arg1: $RenderType$Type): boolean
get "gui3d"(): boolean
get "customRenderer"(): boolean
get "overrides"(): $ItemOverrides
get "transforms"(): $ItemTransforms
get "particleIcon"(): $TextureAtlasSprite
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WaterloggedLilyModel$Type = ($WaterloggedLilyModel);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WaterloggedLilyModel_ = $WaterloggedLilyModel$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/common/block/$LiquidCauldronBlock" {
import {$IntegerProperty, $IntegerProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$IntegerProperty"
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$Fluid, $Fluid$Type} from "packages/net/minecraft/world/level/material/$Fluid"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$SoftFluidStack, $SoftFluidStack$Type} from "packages/net/mehvahdjukaar/moonlight/api/fluids/$SoftFluidStack"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$SoftFluidTank, $SoftFluidTank$Type} from "packages/net/mehvahdjukaar/moonlight/api/fluids/$SoftFluidTank"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ModCauldronBlock, $ModCauldronBlock$Type} from "packages/net/mehvahdjukaar/amendments/common/block/$ModCauldronBlock"
import {$CauldronInteraction, $CauldronInteraction$Type} from "packages/net/minecraft/core/cauldron/$CauldronInteraction"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $LiquidCauldronBlock extends $ModCauldronBlock {
static readonly "MAX_LEVEL": integer
static readonly "LEVEL": $IntegerProperty
static readonly "LIGHT_LEVEL": $IntegerProperty
static readonly "BOILING": $BooleanProperty
readonly "interactions": $Map<($Item), ($CauldronInteraction)>
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(properties: $BlockBehaviour$Properties$Type)

public "getLevelProperty"(): $IntegerProperty
public "updateStateOnFluidChange"(state: $BlockState$Type, level: $Level$Type, pos: $BlockPos$Type, fluid: $SoftFluidStack$Type): $BlockState
public "maybeSendPotionMixMessage"(fluidTank: $SoftFluidTank$Type, player: $Player$Type): void
public "updateShape"(state: $BlockState$Type, direction: $Direction$Type, neighborState: $BlockState$Type, level: $LevelAccessor$Type, currentPos: $BlockPos$Type, neighborPos: $BlockPos$Type): $BlockState
public "use"(state: $BlockState$Type, level: $Level$Type, pos: $BlockPos$Type, player: $Player$Type, hand: $InteractionHand$Type, hit: $BlockHitResult$Type): $InteractionResult
public "animateTick"(state: $BlockState$Type, level: $Level$Type, pos: $BlockPos$Type, rand: $RandomSource$Type): void
public static "playBubblingAnimation"(level: $Level$Type, pos: $BlockPos$Type, surface: double, rand: $RandomSource$Type, color: integer, light: integer): void
public "m_142310_"(state: $BlockState$Type, level: $Level$Type, pos: $BlockPos$Type, fluid: $Fluid$Type): void
public "isFull"(state: $BlockState$Type): boolean
public static "shouldBoil"(belowState: $BlockState$Type, fluid: $SoftFluidStack$Type): boolean
get "levelProperty"(): $IntegerProperty
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LiquidCauldronBlock$Type = ($LiquidCauldronBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LiquidCauldronBlock_ = $LiquidCauldronBlock$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$FaucetBlockTile$FillAction" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $FaucetBlockTile$FillAction {

 "tryExecute"(arg0: integer): integer

(arg0: integer): integer
}

export namespace $FaucetBlockTile$FillAction {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FaucetBlockTile$FillAction$Type = ($FaucetBlockTile$FillAction);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FaucetBlockTile$FillAction_ = $FaucetBlockTile$FillAction$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/platform/$PlatHelper$BlockEntitySupplier" {
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export interface $PlatHelper$BlockEntitySupplier<T extends $BlockEntity> {

 "create"(arg0: $BlockPos$Type, arg1: $BlockState$Type): T

(arg0: $BlockPos$Type, arg1: $BlockState$Type): T
}

export namespace $PlatHelper$BlockEntitySupplier {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PlatHelper$BlockEntitySupplier$Type<T> = ($PlatHelper$BlockEntitySupplier<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PlatHelper$BlockEntitySupplier_<T> = $PlatHelper$BlockEntitySupplier$Type<(T)>;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/faucet/$FaucetTarget$BlState" {
import {$FaucetTarget, $FaucetTarget$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/faucet/$FaucetTarget"
import {$SoftFluidStack, $SoftFluidStack$Type} from "packages/net/mehvahdjukaar/moonlight/api/fluids/$SoftFluidStack"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export interface $FaucetTarget$BlState extends $FaucetTarget<($BlockState)> {

 "fill"(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: $SoftFluidStack$Type, arg4: integer): integer

(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: $SoftFluidStack$Type, arg4: integer): integer
}

export namespace $FaucetTarget$BlState {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FaucetTarget$BlState$Type = ($FaucetTarget$BlState);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FaucetTarget$BlState_ = $FaucetTarget$BlState$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/blocks/$SoapBlock" {
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $SoapBlock extends $Block {
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(properties: $BlockBehaviour$Properties$Type)

public "stepOn"(level: $Level$Type, pPos: $BlockPos$Type, state: $BlockState$Type, entity: $Entity$Type): void
public "triggerEvent"(pState: $BlockState$Type, level: $Level$Type, pos: $BlockPos$Type, pId: integer, pParam: integer): boolean
public "animateTick"(pState: $BlockState$Type, level: $Level$Type, pos: $BlockPos$Type, random: $RandomSource$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SoapBlock$Type = ($SoapBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SoapBlock_ = $SoapBlock$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/client/anim/$SwayingAnimation" {
import {$Vector3f, $Vector3f$Type} from "packages/org/joml/$Vector3f"
import {$SwingAnimation, $SwingAnimation$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/anim/$SwingAnimation"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $SwayingAnimation extends $SwingAnimation {

constructor(getRotationAxis: $Supplier$Type<($Vector3f$Type)>)

public "reset"(): void
public "tick"(inWater: boolean): void
public "hit"(mot: $Vec3$Type, eMass: double): boolean
public "addPositiveImpulse"(vel: float): void
public "getAngle"(partialTicks: float): float
public "addImpulse"(vel: float): void
public "hitByEntity"(entity: $Entity$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SwayingAnimation$Type = ($SwayingAnimation);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SwayingAnimation_ = $SwayingAnimation$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/utils/$Credits$Supporter" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $Credits$Supporter {


}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Credits$Supporter$Type = ($Credits$Supporter);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Credits$Supporter_ = $Credits$Supporter$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/utils/forge/$FlowerPotHandlerImpl" {
import {$FlowerPotBlock, $FlowerPotBlock$Type} from "packages/net/minecraft/world/level/block/$FlowerPotBlock"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"

export class $FlowerPotHandlerImpl {

constructor()

public static "setup"(): void
public static "getFullPot"(emptyPot: $FlowerPotBlock$Type, flowerBlock: $Block$Type): $Block
public static "isEmptyPot"(b: $Block$Type): boolean
public static "getEmptyPot"(fullPot: $FlowerPotBlock$Type): $Block
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FlowerPotHandlerImpl$Type = ($FlowerPotHandlerImpl);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FlowerPotHandlerImpl_ = $FlowerPotHandlerImpl$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/client/model/forge/$BakedQuadBuilderImpl" {
import {$VertexFormatElement, $VertexFormatElement$Type} from "packages/com/mojang/blaze3d/vertex/$VertexFormatElement"
import {$VertexConsumer, $VertexConsumer$Type} from "packages/com/mojang/blaze3d/vertex/$VertexConsumer"
import {$BakedQuadBuilder, $BakedQuadBuilder$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$BakedQuadBuilder"
import {$Vector3f, $Vector3f$Type} from "packages/org/joml/$Vector3f"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$Matrix4f, $Matrix4f$Type} from "packages/org/joml/$Matrix4f"
import {$Matrix3f, $Matrix3f$Type} from "packages/org/joml/$Matrix3f"
import {$ByteBuffer, $ByteBuffer$Type} from "packages/java/nio/$ByteBuffer"
import {$Transformation, $Transformation$Type} from "packages/com/mojang/math/$Transformation"
import {$PoseStack$Pose, $PoseStack$Pose$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack$Pose"
import {$TextureAtlasSprite, $TextureAtlasSprite$Type} from "packages/net/minecraft/client/renderer/texture/$TextureAtlasSprite"
import {$BakedQuad, $BakedQuad$Type} from "packages/net/minecraft/client/renderer/block/model/$BakedQuad"

export class $BakedQuadBuilderImpl implements $BakedQuadBuilder {


public static "create"(sprite: $TextureAtlasSprite$Type, transformation: $Matrix4f$Type): $BakedQuadBuilder
public "color"(red: integer, green: integer, blue: integer, alpha: integer): $BakedQuadBuilderImpl
public "build"(): $BakedQuad
public "normal"(x: float, y: float, z: float): $BakedQuadBuilderImpl
public "lightEmission"(light: integer): $BakedQuadBuilder
public "uv2"(u: integer, v: integer): $BakedQuadBuilderImpl
public "setShade"(shade: boolean): $BakedQuadBuilder
public "defaultColor"(defaultR: integer, defaultG: integer, defaultB: integer, defaultA: integer): void
public "unsetDefaultColor"(): void
public "uv"(u: float, v: float): $BakedQuadBuilderImpl
public "endVertex"(): void
public "fromVanilla"(q: $BakedQuad$Type): $BakedQuadBuilder
public "setAutoDirection"(): $BakedQuadBuilder
public "overlayCoords"(u: integer, v: integer): $BakedQuadBuilderImpl
public "setTint"(tintIndex: integer): $BakedQuadBuilder
public "vertex"(x: double, y: double, z: double): $BakedQuadBuilderImpl
public "setDirection"(direction: $Direction$Type): $BakedQuadBuilder
public "setAmbientOcclusion"(ambientOcclusion: boolean): $BakedQuadBuilder
public static "create"(sprite: $TextureAtlasSprite$Type, transformation: $Transformation$Type): $BakedQuadBuilder
public static "create"(sprite: $TextureAtlasSprite$Type): $BakedQuadBuilder
public "normal"(matrix: $Matrix3f$Type, x: float, y: float, z: float): $BakedQuadBuilder
public "vertex"(matrix: $Matrix4f$Type, x: float, y: float, z: float): $BakedQuadBuilder
public "overlayCoords"(arg0: integer): $VertexConsumer
public "uv2"(arg0: integer): $VertexConsumer
public "vertex"(arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: integer, arg10: integer, arg11: float, arg12: float, arg13: float): void
public "putBulkData"(arg0: $PoseStack$Pose$Type, arg1: $BakedQuad$Type, arg2: float, arg3: float, arg4: float, arg5: integer, arg6: integer): void
public "putBulkData"(arg0: $PoseStack$Pose$Type, arg1: $BakedQuad$Type, arg2: (float)[], arg3: float, arg4: float, arg5: float, arg6: float, arg7: (integer)[], arg8: integer, arg9: boolean): void
public "putBulkData"(arg0: $PoseStack$Pose$Type, arg1: $BakedQuad$Type, arg2: (float)[], arg3: float, arg4: float, arg5: float, arg6: (integer)[], arg7: integer, arg8: boolean): void
public "color"(arg0: integer): $VertexConsumer
public "color"(arg0: float, arg1: float, arg2: float, arg3: float): $VertexConsumer
public "putBulkData"(arg0: $PoseStack$Pose$Type, arg1: $BakedQuad$Type, arg2: float, arg3: float, arg4: float, arg5: float, arg6: integer, arg7: integer, arg8: boolean): void
public "applyBakedLighting"(arg0: integer, arg1: $ByteBuffer$Type): integer
public "applyBakedNormals"(arg0: $Vector3f$Type, arg1: $ByteBuffer$Type, arg2: $Matrix3f$Type): void
public "misc"(arg0: $VertexFormatElement$Type, ...arg1: (integer)[]): $VertexConsumer
set "shade"(value: boolean)
set "tint"(value: integer)
set "direction"(value: $Direction$Type)
set "ambientOcclusion"(value: boolean)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BakedQuadBuilderImpl$Type = ($BakedQuadBuilderImpl);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BakedQuadBuilderImpl_ = $BakedQuadBuilderImpl$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/faucet/$FaucetTarget" {
import {$SoftFluidStack, $SoftFluidStack$Type} from "packages/net/mehvahdjukaar/moonlight/api/fluids/$SoftFluidStack"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export interface $FaucetTarget<T> {

 "fill"(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: T, arg3: $SoftFluidStack$Type, arg4: integer): integer

(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: T, arg3: $SoftFluidStack$Type, arg4: integer): integer
}

export namespace $FaucetTarget {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FaucetTarget$Type<T> = ($FaucetTarget<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FaucetTarget_<T> = $FaucetTarget$Type<(T)>;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/particles/$BombSmokeParticle" {
import {$ParticleRenderType, $ParticleRenderType$Type} from "packages/net/minecraft/client/particle/$ParticleRenderType"
import {$TextureSheetParticle, $TextureSheetParticle$Type} from "packages/net/minecraft/client/particle/$TextureSheetParticle"

export class $BombSmokeParticle extends $TextureSheetParticle {
 "x": double
 "y": double
 "z": double
 "xd": double
 "yd": double
 "zd": double
 "age": integer
 "rCol": float
 "gCol": float
 "bCol": float


public "getRenderType"(): $ParticleRenderType
public "tick"(): void
get "renderType"(): $ParticleRenderType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BombSmokeParticle$Type = ($BombSmokeParticle);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BombSmokeParticle_ = $BombSmokeParticle$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/dispenser/$BambooSpikesBehavior" {
import {$DispenserHelper$AdditionalDispenserBehavior, $DispenserHelper$AdditionalDispenserBehavior$Type} from "packages/net/mehvahdjukaar/moonlight/api/util/$DispenserHelper$AdditionalDispenserBehavior"
import {$BlockSource, $BlockSource$Type} from "packages/net/minecraft/core/$BlockSource"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $BambooSpikesBehavior extends $DispenserHelper$AdditionalDispenserBehavior {


public static "bootStrap"(): void
public static "setEntityPokingOutOfBlock"(arg0: $BlockSource$Type, arg1: $Entity$Type, arg2: $Direction$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BambooSpikesBehavior$Type = ($BambooSpikesBehavior);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BambooSpikesBehavior_ = $BambooSpikesBehavior$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/core/mixins/accessor/$DispenserBlockAccessor" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $DispenserBlockAccessor {

}

export namespace $DispenserBlockAccessor {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DispenserBlockAccessor$Type = ($DispenserBlockAccessor);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DispenserBlockAccessor_ = $DispenserBlockAccessor$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/integration/quark/$TaterInAJarBlock$Tile" {
import {$TinyPotatoBlockEntity, $TinyPotatoBlockEntity$Type} from "packages/org/violetmoon/quark/addons/oddities/block/be/$TinyPotatoBlockEntity"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $TaterInAJarBlock$Tile extends $TinyPotatoBlockEntity {
static readonly "TAG_NAME": string
static readonly "TAG_ANGRY": string
 "jumpTicks": integer
 "name": $Component
 "angry": boolean
 "blockState": $BlockState

constructor(pos: $BlockPos$Type, state: $BlockState$Type)

public "getType"(): $BlockEntityType<($TaterInAJarBlock$Tile)>
public static "stillValidBlockEntity"(arg0: $BlockEntity$Type, arg1: $Player$Type, arg2: integer): boolean
public static "stillValidBlockEntity"(arg0: $BlockEntity$Type, arg1: $Player$Type): boolean
public static "tryClear"(arg0: any): void
get "type"(): $BlockEntityType<($TaterInAJarBlock$Tile)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TaterInAJarBlock$Tile$Type = ($TaterInAJarBlock$Tile);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TaterInAJarBlock$Tile_ = $TaterInAJarBlock$Tile$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/core/mixins/accessor/$DispenserBlockEntityAccessor" {
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export interface $DispenserBlockEntityAccessor {

 "getItems"(): $NonNullList<($ItemStack)>

(): $NonNullList<($ItemStack)>
}

export namespace $DispenserBlockEntityAccessor {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DispenserBlockEntityAccessor$Type = ($DispenserBlockEntityAccessor);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DispenserBlockEntityAccessor_ = $DispenserBlockEntityAccessor$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/item/$IFirstPersonSpecialItemRenderer" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$AbstractClientPlayer, $AbstractClientPlayer$Type} from "packages/net/minecraft/client/player/$AbstractClientPlayer"
import {$HumanoidArm, $HumanoidArm$Type} from "packages/net/minecraft/world/entity/$HumanoidArm"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$ItemInHandRenderer, $ItemInHandRenderer$Type} from "packages/net/minecraft/client/renderer/$ItemInHandRenderer"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"

export interface $IFirstPersonSpecialItemRenderer {

 "renderFirstPersonItem"(arg0: $AbstractClientPlayer$Type, arg1: $ItemStack$Type, arg2: $InteractionHand$Type, arg3: $HumanoidArm$Type, arg4: $PoseStack$Type, arg5: float, arg6: float, arg7: float, arg8: float, arg9: $MultiBufferSource$Type, arg10: integer, arg11: $ItemInHandRenderer$Type): boolean

(target: $Item$Type): $IFirstPersonSpecialItemRenderer
}

export namespace $IFirstPersonSpecialItemRenderer {
function get(target: $Item$Type): $IFirstPersonSpecialItemRenderer
function attachToItem(target: $Item$Type, object: $IFirstPersonSpecialItemRenderer$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IFirstPersonSpecialItemRenderer$Type = ($IFirstPersonSpecialItemRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IFirstPersonSpecialItemRenderer_ = $IFirstPersonSpecialItemRenderer$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/util/math/colors/$RGBColor" {
import {$Codec, $Codec$Type} from "packages/com/mojang/serialization/$Codec"
import {$BaseColor, $BaseColor$Type} from "packages/net/mehvahdjukaar/moonlight/api/util/math/colors/$BaseColor"

export class $RGBColor extends $BaseColor<($RGBColor)> {
/**
 * 
 * @deprecated
 */
static readonly "CODEC": $Codec<(integer)>

constructor(value: integer)
constructor(r: float, g: float, b: float, a: float)

public "toString"(): string
public static "combine"(alpha: integer, blue: integer, green: integer, red: integer): integer
public "multiply"(red: float, green: float, blue: float, alpha: float): $RGBColor
/**
 * 
 * @deprecated
 */
public "multiply"(color: $RGBColor$Type, hue: float, chroma: float, luminance: float, alpha: float): $RGBColor
public "red"(): float
public static "getG"(agbgr: integer): integer
public "toInt"(): integer
public "alpha"(): float
public "blue"(): float
public "green"(): float
public static "getA"(abgr: integer): integer
public static "getB"(agbgr: integer): integer
public static "getR"(abgr: integer): integer
public "mixWith"(color: $RGBColor$Type, bias: float): $RGBColor
public "asRGB"(): $RGBColor
public "withAlpha"(alpha: float): $RGBColor
public static "averageColors"(...colors: ($RGBColor$Type)[]): $RGBColor
public "withGreen"(green: float): $RGBColor
public "withRed"(red: float): $RGBColor
public "withBlue"(blue: float): $RGBColor
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RGBColor$Type = ($RGBColor);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RGBColor_ = $RGBColor$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/configs/$ClientConfigs" {
import {$ConfigSpec, $ConfigSpec$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/configs/$ConfigSpec"
import {$PendulumAnimation$Config, $PendulumAnimation$Config$Type} from "packages/net/mehvahdjukaar/amendments/common/$PendulumAnimation$Config"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"

export class $ClientConfigs {
static readonly "TOOLTIP_HINTS": $Supplier<(boolean)>
static readonly "CUSTOM_CONFIGURED_SCREEN": $Supplier<(boolean)>
static readonly "LILY_OFFSET": $Supplier<(double)>
static readonly "BELL_CONNECTION": $Supplier<(boolean)>
static readonly "COLORED_BREWING_STAND": $Supplier<(boolean)>
static readonly "SWINGING_SIGNS": $Supplier<(boolean)>
static readonly "SIGN_ATTACHMENT": $Supplier<(boolean)>
static readonly "HANGING_SIGN_CONFIG": $Supplier<($PendulumAnimation$Config)>
static readonly "ITEM_SCALE": $Supplier<(double)>
static readonly "POTION_TEXTURE": $Supplier<(boolean)>
static readonly "JUKEBOX_MODEL": $Supplier<(boolean)>
static readonly "JUKEBOX_SPIN": $Supplier<(boolean)>
static readonly "FAST_LANTERNS": $Supplier<(boolean)>
static readonly "LANTERN_HOLDING": $Supplier<(boolean)>
static readonly "LANTERN_HOLDING_UP": $Supplier<(boolean)>
static readonly "LANTERN_HOLDING_SIZE": $Supplier<(double)>
static readonly "WALL_LANTERN_CONFIG": $Supplier<($PendulumAnimation$Config)>
static readonly "TORCH_HOLDING": $Supplier<(boolean)>
static readonly "CANDLE_HOLDER_HOLDING": $Supplier<(boolean)>
static readonly "HOLDING_ANIMATION_FIXED": $Supplier<(boolean)>
static readonly "COLORED_ARROWS": $Supplier<(boolean)>
static readonly "FAST_HOOKS": $Supplier<(boolean)>
static readonly "BRIGHTEN_SIGN_TEXT_COLOR": $Supplier<(double)>
static readonly "SPEC": $ConfigSpec

constructor()

public static "init"(): void
public static "getSignColorMult"(): float
public static "getItemPixelScale"(): float
get "signColorMult"(): float
get "itemPixelScale"(): float
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientConfigs$Type = ($ClientConfigs);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientConfigs_ = $ClientConfigs$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/core/misc/$IExtendedPistonTile" {
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export interface $IExtendedPistonTile {

 "tickMovedBlock"(arg0: $Level$Type, arg1: $BlockPos$Type): void

(arg0: $Level$Type, arg1: $BlockPos$Type): void
}

export namespace $IExtendedPistonTile {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IExtendedPistonTile$Type = ($IExtendedPistonTile);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IExtendedPistonTile_ = $IExtendedPistonTile$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/item/$IThirdPersonSpecialItemRenderer" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$HeadedModel, $HeadedModel$Type} from "packages/net/minecraft/client/model/$HeadedModel"
import {$HumanoidArm, $HumanoidArm$Type} from "packages/net/minecraft/world/entity/$HumanoidArm"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$ArmedModel, $ArmedModel$Type} from "packages/net/minecraft/client/model/$ArmedModel"
import {$EntityModel, $EntityModel$Type} from "packages/net/minecraft/client/model/$EntityModel"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export interface $IThirdPersonSpecialItemRenderer {

 "renderThirdPersonItem"<T extends $Player, M extends ($EntityModel<(T)>) & ($ArmedModel) & ($HeadedModel)>(arg0: M, arg1: $LivingEntity$Type, arg2: $ItemStack$Type, arg3: $HumanoidArm$Type, arg4: $PoseStack$Type, arg5: $MultiBufferSource$Type, arg6: integer): void

(target: $Item$Type): $IThirdPersonSpecialItemRenderer
}

export namespace $IThirdPersonSpecialItemRenderer {
function get(target: $Item$Type): $IThirdPersonSpecialItemRenderer
function attachToItem(target: $Item$Type, object: $IThirdPersonSpecialItemRenderer$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IThirdPersonSpecialItemRenderer$Type = ($IThirdPersonSpecialItemRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IThirdPersonSpecialItemRenderer_ = $IThirdPersonSpecialItemRenderer$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/set/$BlockType$SetFinder" {
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$BlockType, $BlockType$Type} from "packages/net/mehvahdjukaar/moonlight/api/set/$BlockType"

export interface $BlockType$SetFinder<T extends $BlockType> extends $Supplier<($Optional<(T)>)> {

 "get"(): $Optional<(T)>

(): $Optional<(T)>
}

export namespace $BlockType$SetFinder {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BlockType$SetFinder$Type<T> = ($BlockType$SetFinder<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BlockType$SetFinder_<T> = $BlockType$SetFinder$Type<(T)>;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/items/$SliceMapItem" {
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$MapColor, $MapColor$Type} from "packages/net/minecraft/world/level/material/$MapColor"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$SliceMapItem$DepthMapData, $SliceMapItem$DepthMapData$Type} from "packages/net/mehvahdjukaar/supplementaries/common/items/$SliceMapItem$DepthMapData"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$InteractionResultHolder, $InteractionResultHolder$Type} from "packages/net/minecraft/world/$InteractionResultHolder"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$CustomMapData$Type, $CustomMapData$Type$Type} from "packages/net/mehvahdjukaar/moonlight/api/map/$CustomMapData$Type"
import {$MapItemSavedData, $MapItemSavedData$Type} from "packages/net/minecraft/world/level/saveddata/maps/$MapItemSavedData"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$EmptyMapItem, $EmptyMapItem$Type} from "packages/net/minecraft/world/item/$EmptyMapItem"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $SliceMapItem extends $EmptyMapItem {
static readonly "DEPTH_DATA_KEY": $CustomMapData$Type<($SliceMapItem$DepthMapData)>
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(properties: $Item$Properties$Type)

public static "init"(): void
public static "createSliced"(level: $Level$Type, x: integer, z: integer, scale: byte, trackingPosition: boolean, unlimitedTracking: boolean, slice: integer): $ItemStack
public "use"(level: $Level$Type, player: $Player$Type, usedHand: $InteractionHand$Type): $InteractionResultHolder<($ItemStack)>
public static "getRangeMultiplier"(): double
public static "canPlayerSee"(targetY: integer, entity: $Entity$Type): boolean
public static "getMapHeight"(data: $MapItemSavedData$Type): integer
public static "getCutoffColor"(pos: $BlockPos$Type, level: $BlockGetter$Type): $MapColor
get "rangeMultiplier"(): double
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SliceMapItem$Type = ($SliceMapItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SliceMapItem_ = $SliceMapItem$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/events/behaviors/$BlockUse" {
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"

export interface $BlockUse {

 "isEnabled"(): boolean
 "appliesToBlock"(arg0: $Block$Type): boolean
 "altersWorld"(): boolean
 "tryPerformingAction"(arg0: $BlockState$Type, arg1: $BlockPos$Type, arg2: $Level$Type, arg3: $Player$Type, arg4: $InteractionHand$Type, arg5: $ItemStack$Type, arg6: $BlockHitResult$Type): $InteractionResult
}

export namespace $BlockUse {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BlockUse$Type = ($BlockUse);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BlockUse_ = $BlockUse$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/renderers/entities/funny/$PickleRenderer" {
import {$AbstractClientPlayer, $AbstractClientPlayer$Type} from "packages/net/minecraft/client/player/$AbstractClientPlayer"
import {$RenderLayer, $RenderLayer$Type} from "packages/net/minecraft/client/renderer/entity/layers/$RenderLayer"
import {$EntityRendererProvider$Context, $EntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRendererProvider$Context"
import {$LivingEntityRenderer, $LivingEntityRenderer$Type} from "packages/net/minecraft/client/renderer/entity/$LivingEntityRenderer"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$List, $List$Type} from "packages/java/util/$List"
import {$EntityModel, $EntityModel$Type} from "packages/net/minecraft/client/model/$EntityModel"
import {$PickleModel, $PickleModel$Type} from "packages/net/mehvahdjukaar/supplementaries/client/renderers/entities/funny/$PickleModel"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $PickleRenderer extends $LivingEntityRenderer<($AbstractClientPlayer), ($PickleModel<($AbstractClientPlayer)>)> {
static "INSTANCE": $PickleRenderer
 "model": M
 "layers": $List<($RenderLayer<(T), (M)>)>
 "shadowRadius": float

constructor(context: $EntityRendererProvider$Context$Type)

public "render"(player: $AbstractClientPlayer$Type, entityYaw: float, partialTicks: float, matrixStack: $PoseStack$Type, buffer: $MultiBufferSource$Type, packedLight: integer): void
public "getTextureLocation"(player: $AbstractClientPlayer$Type): $ResourceLocation
public "getRenderOffset"(player: $AbstractClientPlayer$Type, partialTicks: float): $Vec3
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PickleRenderer$Type = ($PickleRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PickleRenderer_ = $PickleRenderer$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/faucet/$ForgeFluidTankInteraction" {
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$FaucetTarget$Tile, $FaucetTarget$Tile$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/faucet/$FaucetTarget$Tile"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$FluidOffer, $FluidOffer$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/faucet/$FluidOffer"
import {$SoftFluidStack, $SoftFluidStack$Type} from "packages/net/mehvahdjukaar/moonlight/api/fluids/$SoftFluidStack"
import {$FaucetSource$Tile, $FaucetSource$Tile$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/faucet/$FaucetSource$Tile"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $ForgeFluidTankInteraction implements $FaucetSource$Tile, $FaucetTarget$Tile {


public "fill"(level: $Level$Type, pos: $BlockPos$Type, target: $BlockEntity$Type, fluid: $SoftFluidStack$Type, minAmount: integer): integer
public "drain"(level: $Level$Type, pos: $BlockPos$Type, dir: $Direction$Type, tile: $BlockEntity$Type, amount: integer): void
public "getProvidedFluid"(level: $Level$Type, pos: $BlockPos$Type, dir: $Direction$Type, source: $BlockEntity$Type): $FluidOffer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ForgeFluidTankInteraction$Type = ($ForgeFluidTankInteraction);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ForgeFluidTankInteraction_ = $ForgeFluidTankInteraction$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/blocks/$BuntingBlock" {
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$EntityBlock, $EntityBlock$Type} from "packages/net/minecraft/world/level/block/$EntityBlock"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$CollisionContext, $CollisionContext$Type} from "packages/net/minecraft/world/phys/shapes/$CollisionContext"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$ModBlockProperties$Bunting, $ModBlockProperties$Bunting$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/$ModBlockProperties$Bunting"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$AbstractRopeBlock, $AbstractRopeBlock$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/blocks/$AbstractRopeBlock"
import {$EnumProperty, $EnumProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$EnumProperty"
import {$HitResult, $HitResult$Type} from "packages/net/minecraft/world/phys/$HitResult"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$IRotatable, $IRotatable$Type} from "packages/net/mehvahdjukaar/moonlight/api/block/$IRotatable"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$Rotation, $Rotation$Type} from "packages/net/minecraft/world/level/block/$Rotation"
import {$BlockEntityTicker, $BlockEntityTicker$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityTicker"
import {$GameEventListener, $GameEventListener$Type} from "packages/net/minecraft/world/level/gameevent/$GameEventListener"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $BuntingBlock extends $AbstractRopeBlock implements $EntityBlock, $IRotatable {
static readonly "NORTH": $EnumProperty<($ModBlockProperties$Bunting)>
static readonly "SOUTH": $EnumProperty<($ModBlockProperties$Bunting)>
static readonly "WEST": $EnumProperty<($ModBlockProperties$Bunting)>
static readonly "EAST": $EnumProperty<($ModBlockProperties$Bunting)>
static readonly "UP": $BooleanProperty
static readonly "DOWN": $BooleanProperty
static readonly "HORIZONTAL_FACING_TO_PROPERTY_MAP": $Map<($Direction), ($EnumProperty<($ModBlockProperties$Bunting)>)>
readonly "buntingToRope": $Map<($BlockState), ($BlockState)>
static readonly "COLLISION_SHAPE": $VoxelShape
static readonly "KNOT": $BooleanProperty
static readonly "WATERLOGGED": $BooleanProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(properties: $BlockBehaviour$Properties$Type)

public "setConnection"(dir: $Direction$Type, state: $BlockState$Type, value: boolean): $BlockState
public "getCloneItemStack"(level: $BlockGetter$Type, pos: $BlockPos$Type, state: $BlockState$Type): $ItemStack
public "getCloneItemStack"(state: $BlockState$Type, target: $HitResult$Type, world: $BlockGetter$Type, pos: $BlockPos$Type, player: $Player$Type): $ItemStack
public "getRotatedState"(state: $BlockState$Type, world: $LevelAccessor$Type, pos: $BlockPos$Type, rotation: $Rotation$Type, axis: $Direction$Type, hit: $Vec3$Type): $Optional<($BlockState)>
public "rotateOverAxis"(state: $BlockState$Type, level: $LevelAccessor$Type, pos: $BlockPos$Type, rotation: $Rotation$Type, axis: $Direction$Type, hit: $Vec3$Type): $Optional<($Direction)>
public "hasConnection"(dir: $Direction$Type, state: $BlockState$Type): boolean
public "updateShape"(stateIn: $BlockState$Type, facing: $Direction$Type, facingState: $BlockState$Type, level: $LevelAccessor$Type, pos: $BlockPos$Type, facingPos: $BlockPos$Type): $BlockState
public "use"(state: $BlockState$Type, level: $Level$Type, pos: $BlockPos$Type, player: $Player$Type, handIn: $InteractionHand$Type, hit: $BlockHitResult$Type): $InteractionResult
public "onRemove"(state: $BlockState$Type, world: $Level$Type, pos: $BlockPos$Type, newState: $BlockState$Type, isMoving: boolean): void
public "getCollisionShape"(state: $BlockState$Type, worldIn: $BlockGetter$Type, pos: $BlockPos$Type, context: $CollisionContext$Type): $VoxelShape
public "popItem"(level: $Level$Type, pos: $BlockPos$Type, stack: $ItemStack$Type, dir: $Direction$Type): void
public "newBlockEntity"(pos: $BlockPos$Type, state: $BlockState$Type): $BlockEntity
public static "canSupportBunting"(state: $BlockState$Type, index: integer): boolean
public static "toRope"(state: $BlockState$Type): $BlockState
public static "fromRope"(state: $BlockState$Type, hit: $BlockHitResult$Type): $BlockState
public static "fromRope"(state: $BlockState$Type): $BlockState
public "getTicker"<T extends $BlockEntity>(arg0: $Level$Type, arg1: $BlockState$Type, arg2: $BlockEntityType$Type<(T)>): $BlockEntityTicker<(T)>
public "getListener"<T extends $BlockEntity>(arg0: $ServerLevel$Type, arg1: T): $GameEventListener
public "onRotated"(newState: $BlockState$Type, oldState: $BlockState$Type, world: $LevelAccessor$Type, pos: $BlockPos$Type, rotation: $Rotation$Type, axis: $Direction$Type, hit: $Vec3$Type): void
public static "canConnectDown"(downState: $BlockState$Type): boolean
public static "isSupportingCeiling"(upState: $BlockState$Type, pos: $BlockPos$Type, world: $LevelReader$Type): boolean
public static "isSupportingCeiling"(pos: $BlockPos$Type, world: $LevelReader$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BuntingBlock$Type = ($BuntingBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BuntingBlock_ = $BuntingBlock$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/blocks/$FeatherBlock" {
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$CollisionContext, $CollisionContext$Type} from "packages/net/minecraft/world/phys/shapes/$CollisionContext"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $FeatherBlock extends $Block {
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(properties: $BlockBehaviour$Properties$Type)

public "updateEntityAfterFallOn"(reader: $BlockGetter$Type, entity: $Entity$Type): void
public "fallOn"(world: $Level$Type, state: $BlockState$Type, pos: $BlockPos$Type, entity: $Entity$Type, height: float): void
public "getCollisionShape"(blockState: $BlockState$Type, blockGetter: $BlockGetter$Type, blockPos: $BlockPos$Type, collisionContext: $CollisionContext$Type): $VoxelShape
public "entityInside"(state: $BlockState$Type, level: $Level$Type, blockPos: $BlockPos$Type, entity: $Entity$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FeatherBlock$Type = ($FeatherBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FeatherBlock_ = $FeatherBlock$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/common/block/$DyeCauldronBlock" {
import {$IntegerProperty, $IntegerProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$IntegerProperty"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$SoftFluidStack, $SoftFluidStack$Type} from "packages/net/mehvahdjukaar/moonlight/api/fluids/$SoftFluidStack"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$LiquidCauldronBlockTile, $LiquidCauldronBlockTile$Type} from "packages/net/mehvahdjukaar/amendments/common/tile/$LiquidCauldronBlockTile"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ModCauldronBlock, $ModCauldronBlock$Type} from "packages/net/mehvahdjukaar/amendments/common/block/$ModCauldronBlock"
import {$CauldronInteraction, $CauldronInteraction$Type} from "packages/net/minecraft/core/cauldron/$CauldronInteraction"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$DyeItem, $DyeItem$Type} from "packages/net/minecraft/world/item/$DyeItem"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $DyeCauldronBlock extends $ModCauldronBlock {
static readonly "LEVEL": $IntegerProperty
readonly "interactions": $Map<($Item), ($CauldronInteraction)>
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(properties: $BlockBehaviour$Properties$Type)

public "getLevelProperty"(): $IntegerProperty
public "updateStateOnFluidChange"(state: $BlockState$Type, level: $Level$Type, pos: $BlockPos$Type, fluid: $SoftFluidStack$Type): $BlockState
public static "addDye"(level: $Level$Type, tile: $LiquidCauldronBlockTile$Type, stack: $ItemStack$Type, player: $Player$Type, dyeItem: $DyeItem$Type): $InteractionResult
public "use"(state: $BlockState$Type, level: $Level$Type, pos: $BlockPos$Type, player: $Player$Type, hand: $InteractionHand$Type, hit: $BlockHitResult$Type): $InteractionResult
public static "playDyeSoundAndConsume"(state: $BlockState$Type, pos: $BlockPos$Type, level: $Level$Type, player: $Player$Type, stack: $ItemStack$Type): void
public "isFull"(state: $BlockState$Type): boolean
get "levelProperty"(): $IntegerProperty
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DyeCauldronBlock$Type = ($DyeCauldronBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DyeCauldronBlock_ = $DyeCauldronBlock$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/misc/map_markers/client/$ModMapMarkersClient" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $ModMapMarkersClient {

constructor()

public static "init"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModMapMarkersClient$Type = ($ModMapMarkersClient);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModMapMarkersClient_ = $ModMapMarkersClient$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/mixins/forge/$MobBucketItemAccessor" {
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"

export interface $MobBucketItemAccessor {

 "invokeGetFishType"(): $EntityType<(any)>

(): $EntityType<(any)>
}

export namespace $MobBucketItemAccessor {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MobBucketItemAccessor$Type = ($MobBucketItemAccessor);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MobBucketItemAccessor_ = $MobBucketItemAccessor$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/platform/$ClientHelper$SpecialModelEvent" {
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export interface $ClientHelper$SpecialModelEvent {

 "register"(arg0: $ResourceLocation$Type): void

(arg0: $ResourceLocation$Type): void
}

export namespace $ClientHelper$SpecialModelEvent {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientHelper$SpecialModelEvent$Type = ($ClientHelper$SpecialModelEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientHelper$SpecialModelEvent_ = $ClientHelper$SpecialModelEvent$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/entities/$HatStandEntity" {
import {$WalkAnimationState, $WalkAnimationState$Type} from "packages/net/minecraft/world/entity/$WalkAnimationState"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$EntityDataAccessor, $EntityDataAccessor$Type} from "packages/net/minecraft/network/syncher/$EntityDataAccessor"
import {$Iterable, $Iterable$Type} from "packages/java/lang/$Iterable"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$AttributeMap, $AttributeMap$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeMap"
import {$ClientGamePacketListener, $ClientGamePacketListener$Type} from "packages/net/minecraft/network/protocol/game/$ClientGamePacketListener"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$OptionalInt, $OptionalInt$Type} from "packages/java/util/$OptionalInt"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$LevelRenderer, $LevelRenderer$Type} from "packages/net/minecraft/client/renderer/$LevelRenderer"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$AnimationState, $AnimationState$Type} from "packages/net/minecraft/world/entity/$AnimationState"
import {$HumanoidArm, $HumanoidArm$Type} from "packages/net/minecraft/world/entity/$HumanoidArm"
import {$Packet, $Packet$Type} from "packages/net/minecraft/network/protocol/$Packet"
import {$LivingEntity$Fallsounds, $LivingEntity$Fallsounds$Type} from "packages/net/minecraft/world/entity/$LivingEntity$Fallsounds"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$SwingAnimation, $SwingAnimation$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/anim/$SwingAnimation"
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$LightningBolt, $LightningBolt$Type} from "packages/net/minecraft/world/entity/$LightningBolt"
import {$Rotations, $Rotations$Type} from "packages/net/minecraft/core/$Rotations"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $HatStandEntity extends $LivingEntity {
static readonly "DATA_CLIENT_FLAGS": $EntityDataAccessor<(byte)>
static readonly "DATA_HEAD_POSE": $EntityDataAccessor<($Rotations)>
static readonly "FACING_TARGET": $EntityDataAccessor<($OptionalInt)>
 "lastHit": long
readonly "swingAnimation": $SwingAnimation
readonly "skibidiAnimation": $AnimationState
 "jumpScareAngles": $Vec3
static readonly "HAND_SLOTS": integer
static readonly "ARMOR_SLOTS": integer
static readonly "EQUIPMENT_SLOT_OFFSET": integer
static readonly "ARMOR_SLOT_OFFSET": integer
static readonly "SWING_DURATION": integer
static readonly "PLAYER_HURT_EXPERIENCE_TIME": integer
static readonly "MIN_MOVEMENT_DISTANCE": double
static readonly "DEFAULT_BASE_GRAVITY": double
static readonly "DEATH_DURATION": integer
static readonly "USE_ITEM_INTERVAL": integer
static readonly "EXTRA_RENDER_CULLING_SIZE_WITH_BIG_HAT": float
 "attributes": $AttributeMap
readonly "activeEffects": $Map<($MobEffect), ($MobEffectInstance)>
 "swinging": boolean
 "swingingArm": $InteractionHand
 "swingTime": integer
 "removeArrowTime": integer
 "removeStingerTime": integer
 "hurtTime": integer
 "hurtDuration": integer
 "deathTime": integer
 "oAttackAnim": float
 "attackAnim": float
 "attackStrengthTicker": integer
readonly "walkAnimation": $WalkAnimationState
readonly "invulnerableDuration": integer
readonly "timeOffs": float
readonly "rotA": float
 "yBodyRot": float
 "yBodyRotO": float
 "yHeadRot": float
 "yHeadRotO": float
 "dead": boolean
 "jumping": boolean
 "xxa": float
 "yya": float
 "zza": float
 "effectsDirty": boolean
 "noJumpDelay": integer
 "entityJs$builder": any
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(entityType: $EntityType$Type<(any)>, level: $Level$Type)

public "isNoBasePlate"(): boolean
public "setNoBasePlate"(noBasePlate: boolean): void
public "dismantle"(source: $DamageSource$Type): void
public "getHeadPose"(): $Rotations
public static "makeSkibidiInArea"(player: $LivingEntity$Type): void
public "setHeadPose"(headPose: $Rotations$Type): void
public "setSkibidi"(skibidi: boolean, tall: boolean, playerTarget: $LivingEntity$Type): void
public "getArmorSlots"(): $Iterable<($ItemStack)>
public "getHandSlots"(): $Iterable<($ItemStack)>
public "canTakeItem"(stack: $ItemStack$Type): boolean
public "getMainArm"(): $HumanoidArm
public "kill"(): void
public "tick"(): void
public "getItemBySlot"(slot: $EquipmentSlot$Type): $ItemStack
public "handleEntityEvent"(id: byte): void
public "aiStep"(): void
public "readAdditionalSaveData"(compound: $CompoundTag$Type): void
public "addAdditionalSaveData"(compound: $CompoundTag$Type): void
public "attack"(source: $DamageSource$Type, amount: float): boolean
public "setItemSlot"(slot: $EquipmentSlot$Type, stack: $ItemStack$Type): void
public "skipAttackInteraction"(entity: $Entity$Type): boolean
public "getFallSounds"(): $LivingEntity$Fallsounds
public "setInvisible"(invisible: boolean): void
public "canBeSeenByAnyone"(): boolean
public "setYBodyRot"(pOffset: float): void
public "setYHeadRot"(pRotation: float): void
public "isPushable"(): boolean
public "onSyncedDataUpdated"(key: $EntityDataAccessor$Type<(any)>): void
public "attackable"(): boolean
public "isAffectedByPotions"(): boolean
public "thunderHit"(level: $ServerLevel$Type, lightning: $LightningBolt$Type): void
public "getAddEntityPacket"(): $Packet<($ClientGamePacketListener)>
public "shouldRenderAtSqrDistance"(distance: double): boolean
public "refreshDimensions"(): void
public "interactAt"(player: $Player$Type, vec: $Vec3$Type, hand: $InteractionHand$Type): $InteractionResult
public "ignoreExplosion"(): boolean
public "getPickResult"(): $ItemStack
public "tdv$getDynamicLightX"(): double
public "tdv$getDynamicLightZ"(): double
public "tdv$getDynamicLightWorld"(): $Level
public "tdv$shouldUpdateDynamicLight"(): boolean
public "tdv$resetDynamicLight"(): void
public "tdv$getDynamicLightY"(): double
public "tdv$lambdynlights$scheduleTrackedChunksRebuild"(arg0: $LevelRenderer$Type): void
public "tdv$lambdynlights$updateDynamicLight"(arg0: $LevelRenderer$Type): boolean
public "getCachedFeetBlockState"(): $BlockState
get "noBasePlate"(): boolean
set "noBasePlate"(value: boolean)
get "headPose"(): $Rotations
set "headPose"(value: $Rotations$Type)
get "armorSlots"(): $Iterable<($ItemStack)>
get "handSlots"(): $Iterable<($ItemStack)>
get "mainArm"(): $HumanoidArm
get "fallSounds"(): $LivingEntity$Fallsounds
set "invisible"(value: boolean)
set "yBodyRot"(value: float)
set "yHeadRot"(value: float)
get "pushable"(): boolean
get "affectedByPotions"(): boolean
get "addEntityPacket"(): $Packet<($ClientGamePacketListener)>
get "pickResult"(): $ItemStack
get "cachedFeetBlockState"(): $BlockState
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $HatStandEntity$Type = ($HatStandEntity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $HatStandEntity_ = $HatStandEntity$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/integration/$CuriosCompat" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $CuriosCompat {

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CuriosCompat$Type = ($CuriosCompat);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CuriosCompat_ = $CuriosCompat$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/misc/$IExplorationFunctionExtension" {
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export interface $IExplorationFunctionExtension {

 "supplementaries$setCustomDecoration"(arg0: $ResourceLocation$Type): void
 "supplementaries$getCustomDecoration"(): $ResourceLocation
}

export namespace $IExplorationFunctionExtension {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IExplorationFunctionExtension$Type = ($IExplorationFunctionExtension);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IExplorationFunctionExtension_ = $IExplorationFunctionExtension$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/platform/forge/$ForgeHelperImpl" {
import {$BaseRailBlock, $BaseRailBlock$Type} from "packages/net/minecraft/world/level/block/$BaseRailBlock"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$Projectile, $Projectile$Type} from "packages/net/minecraft/world/entity/projectile/$Projectile"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$DyeColor, $DyeColor$Type} from "packages/net/minecraft/world/item/$DyeColor"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$AbstractMinecart, $AbstractMinecart$Type} from "packages/net/minecraft/world/entity/vehicle/$AbstractMinecart"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Animal, $Animal$Type} from "packages/net/minecraft/world/entity/animal/$Animal"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$FinishedRecipe, $FinishedRecipe$Type} from "packages/net/minecraft/data/recipes/$FinishedRecipe"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$RailShape, $RailShape$Type} from "packages/net/minecraft/world/level/block/state/properties/$RailShape"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$HitResult, $HitResult$Type} from "packages/net/minecraft/world/phys/$HitResult"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$Rotation, $Rotation$Type} from "packages/net/minecraft/world/level/block/$Rotation"
import {$Explosion, $Explosion$Type} from "packages/net/minecraft/world/level/$Explosion"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $ForgeHelperImpl {

constructor()

public static "areStacksEqual"(stack: $ItemStack$Type, other: $ItemStack$Type, sameNbt: boolean): boolean
public static "isDye"(itemstack: $ItemStack$Type): boolean
public static "reviveEntity"(entity: $Entity$Type): void
public static "getReachDistance"(entity: $LivingEntity$Type): double
public static "addRecipeConditions"(originalRecipe: $FinishedRecipe$Type, conditions: $List$Type<(any)>): $FinishedRecipe
public static "canHarvestBlock"(state: $BlockState$Type, level: $ServerLevel$Type, pos: $BlockPos$Type, player: $ServerPlayer$Type): boolean
public static "onExplosionStart"(level: $Level$Type, explosion: $Explosion$Type): boolean
public static "rotateBlock"(state: $BlockState$Type, world: $Level$Type, targetPos: $BlockPos$Type, rot: $Rotation$Type): $BlockState
public static "onRightClickBlock"(player: $Player$Type, hand: $InteractionHand$Type, below: $BlockPos$Type, rayTraceResult: $BlockHitResult$Type): $InteractionResult
public static "getExplosionResistance"(state: $BlockState$Type, level: $Level$Type, pos: $BlockPos$Type, explosion: $Explosion$Type): float
public static "canDropFromExplosion"(blockstate: $BlockState$Type, level: $Level$Type, blockpos: $BlockPos$Type, explosion: $Explosion$Type): boolean
public static "getCraftingRemainingItem"(itemstack: $ItemStack$Type): $Optional<($ItemStack)>
public static "getFriction"(state: $BlockState$Type, level: $LevelReader$Type, pos: $BlockPos$Type, entity: $Entity$Type): float
public static "isCurativeItem"(stack: $ItemStack$Type, effect: $MobEffectInstance$Type): boolean
public static "getLightEmission"(state: $BlockState$Type, level: $Level$Type, pos: $BlockPos$Type): integer
public static "canItemStack"(selected: $ItemStack$Type, item: $ItemStack$Type): boolean
public static "getColor"(stack: $ItemStack$Type): $DyeColor
public static "isFireSource"(blockState: $BlockState$Type, level: $Level$Type, pos: $BlockPos$Type, up: $Direction$Type): boolean
public static "canEntityDestroy"(level: $Level$Type, blockPos: $BlockPos$Type, animal: $Animal$Type): boolean
public static "onBlockExploded"(blockstate: $BlockState$Type, level: $Level$Type, blockpos: $BlockPos$Type, explosion: $Explosion$Type): void
public static "onCropsGrowPost"(level: $ServerLevel$Type, pos: $BlockPos$Type, state: $BlockState$Type): void
public static "onCropsGrowPre"(level: $ServerLevel$Type, pos: $BlockPos$Type, state: $BlockState$Type, b: boolean): boolean
public static "onExplosionDetonate"(level: $Level$Type, explosion: $Explosion$Type, entities: $List$Type<($Entity$Type)>, diameter: double): void
public static "onEquipmentChange"(entity: $LivingEntity$Type, slot: $EquipmentSlot$Type, from: $ItemStack$Type, to: $ItemStack$Type): void
public static "canEquipItem"(entity: $LivingEntity$Type, stack: $ItemStack$Type, slot: $EquipmentSlot$Type): boolean
public static "onProjectileImpact"(projectile: $Projectile$Type, blockHitResult: $HitResult$Type): boolean
public static "onLivingConvert"(skellyHorseMixin: $LivingEntity$Type, newHorse: $LivingEntity$Type): void
public static "canLivingConvert"(entity: $LivingEntity$Type, outcome: $EntityType$Type<(any)>, timer: $Consumer$Type<(integer)>): boolean
public static "isMultipartEntity"(e: $Entity$Type): boolean
public static "getBlockItemMap"(): $Map<($Block), ($Item)>
public static "getRailDirection"(railBlock: $BaseRailBlock$Type, blockstate: $BlockState$Type, level: $Level$Type, blockpos: $BlockPos$Type, o: $AbstractMinecart$Type): $RailShape
get "blockItemMap"(): $Map<($Block), ($Item)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ForgeHelperImpl$Type = ($ForgeHelperImpl);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ForgeHelperImpl_ = $ForgeHelperImpl$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$NoticeBoardBlockTile" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$ITextHolderProvider, $ITextHolderProvider$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/$ITextHolderProvider"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$TextHolder, $TextHolder$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/$TextHolder"
import {$DyeColor, $DyeColor$Type} from "packages/net/minecraft/world/item/$DyeColor"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$FilteredText, $FilteredText$Type} from "packages/net/minecraft/server/network/$FilteredText"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$List, $List$Type} from "packages/java/util/$List"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$AbstractContainerMenu, $AbstractContainerMenu$Type} from "packages/net/minecraft/world/inventory/$AbstractContainerMenu"
import {$LockCode, $LockCode$Type} from "packages/net/minecraft/world/$LockCode"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"
import {$ItemDisplayTile, $ItemDisplayTile$Type} from "packages/net/mehvahdjukaar/moonlight/api/block/$ItemDisplayTile"
import {$Material, $Material$Type} from "packages/net/minecraft/client/resources/model/$Material"
import {$FormattedCharSequence, $FormattedCharSequence$Type} from "packages/net/minecraft/util/$FormattedCharSequence"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$Nameable, $Nameable$Type} from "packages/net/minecraft/world/$Nameable"
import {$IMapDisplay, $IMapDisplay$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/$IMapDisplay"

export class $NoticeBoardBlockTile extends $ItemDisplayTile implements $Nameable, $IMapDisplay, $ITextHolderProvider {
static readonly "LOOT_TABLE_TAG": string
static readonly "LOOT_TABLE_SEED_TAG": string
 "lootTable": $ResourceLocation
 "lootTableSeed": long
 "lockKey": $LockCode
 "blockState": $BlockState

constructor(pos: $BlockPos$Type, state: $BlockState$Type)

public "getText"(): string
public "openScreen"(level: $Level$Type, blockPos: $BlockPos$Type, player: $Player$Type): void
public "openScreen"(level: $Level$Type, pos: $BlockPos$Type, player: $Player$Type, direction: $Direction$Type): void
public static "isPageItem"(item: $Item$Type): boolean
public "getTextHolder"(ind: integer): $TextHolder
public "isWaxed"(): boolean
public "turnPage"(): void
public "setWaxed"(b: boolean): void
public "updateTileOnInventoryChanged"(): void
public "updateClientVisualsOnLoad"(): void
public "isNormalItem"(): boolean
public "setFontScale"(s: float): void
public "needsVisualUpdate"(): boolean
public "getCachedPattern"(): $Material
public "getCachedLines"(): $List<($FormattedCharSequence)>
public "setCachedPageLines"(l: $List$Type<($FormattedCharSequence$Type)>): void
public "setPlayerWhoMayEdit"(uuid: $UUID$Type): void
public "shouldUseContainerMenu"(): boolean
public "getPlayerWhoMayEdit"(): $UUID
public "shouldSkipTileRenderer"(): boolean
public "canTakeItemThroughFace"(index: integer, stack: $ItemStack$Type, direction: $Direction$Type): boolean
public "canPlaceItemThroughFace"(index: integer, stack: $ItemStack$Type, direction: $Direction$Type): boolean
public "hasAntiqueInk"(): boolean
public "interact"(player: $Player$Type, handIn: $InteractionHand$Type, pos: $BlockPos$Type, state: $BlockState$Type, hit: $BlockHitResult$Type): $InteractionResult
public "updateText"(): void
public "isGlowing"(): boolean
public "load"(compound: $CompoundTag$Type): void
public "m_183515_"(tag: $CompoundTag$Type): void
public "getDyeColor"(): $DyeColor
public "getDirection"(): $Direction
public "canPlaceItem"(index: integer, stack: $ItemStack$Type): boolean
public "m_6555_"(id: integer, player: $Inventory$Type): $AbstractContainerMenu
public "m_6820_"(): $Component
public "getFontScale"(): float
public "getMapStack"(): $ItemStack
public "getName"(): $Component
public "getDisplayName"(): $Component
public "getCustomName"(): $Component
public "getTextHolder"(): $TextHolder
public "tryOpeningEditGui"(player: $ServerPlayer$Type, pos: $BlockPos$Type): boolean
public "textHoldersCount"(): integer
public "tryAcceptingClientText"(pos: $BlockPos$Type, player: $ServerPlayer$Type, filteredText: $List$Type<($List$Type<($FilteredText$Type)>)>): boolean
public "interactWithTextHolder"(index: integer, level: $Level$Type, pos: $BlockPos$Type, state: $BlockState$Type, player: $Player$Type, hand: $InteractionHand$Type): $InteractionResult
public "tryWash"(level: $Level$Type, pos: $BlockPos$Type, state: $BlockState$Type): boolean
public "playerIsTooFarAwayToEdit"(level: $Level$Type, pos: $BlockPos$Type, uUID: $UUID$Type): boolean
public "validatePlayerWhoMayEdit"(level: $Level$Type, pos: $BlockPos$Type): void
public "isOtherPlayerEditing"(player: $Player$Type): boolean
public "tryWaxing"(level: $Level$Type, pos: $BlockPos$Type, player: $Player$Type, hand: $InteractionHand$Type): $InteractionResult
public "sendOpenGuiPacket"(level: $Level$Type, pos: $BlockPos$Type, player: $Player$Type, hitFace: $Direction$Type): void
public "sendOpenGuiPacket"(level: $Level$Type, pos: $BlockPos$Type, player: $Player$Type): void
public static "stillValidBlockEntity"(arg0: $BlockEntity$Type, arg1: $Player$Type, arg2: integer): boolean
public static "stillValidBlockEntity"(arg0: $BlockEntity$Type, arg1: $Player$Type): boolean
public static "tryClear"(arg0: any): void
get "text"(): string
get "waxed"(): boolean
set "waxed"(value: boolean)
get "normalItem"(): boolean
set "fontScale"(value: float)
get "cachedPattern"(): $Material
get "cachedLines"(): $List<($FormattedCharSequence)>
set "cachedPageLines"(value: $List$Type<($FormattedCharSequence$Type)>)
set "playerWhoMayEdit"(value: $UUID$Type)
get "playerWhoMayEdit"(): $UUID
get "glowing"(): boolean
get "dyeColor"(): $DyeColor
get "direction"(): $Direction
get "fontScale"(): float
get "mapStack"(): $ItemStack
get "name"(): $Component
get "displayName"(): $Component
get "customName"(): $Component
get "textHolder"(): $TextHolder
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $NoticeBoardBlockTile$Type = ($NoticeBoardBlockTile);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $NoticeBoardBlockTile_ = $NoticeBoardBlockTile$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/items/$CandyItem" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $CandyItem extends $Item {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(properties: $Item$Properties$Type)

public static "increaseSweetTooth"(world: $Level$Type, entity: $LivingEntity$Type, amount: integer): void
public "finishUsingItem"(stack: $ItemStack$Type, world: $Level$Type, entity: $LivingEntity$Type): $ItemStack
public static "checkSweetTooth"(entity: $Player$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CandyItem$Type = ($CandyItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CandyItem_ = $CandyItem$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/misc/$DataObjectReference" {
import {$Holder, $Holder$Type} from "packages/net/minecraft/core/$Holder"
import {$Registry, $Registry$Type} from "packages/net/minecraft/core/$Registry"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$ResourceKey, $ResourceKey$Type} from "packages/net/minecraft/resources/$ResourceKey"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $DataObjectReference<T> implements $Supplier<(T)> {

constructor(key: $ResourceKey$Type<(T)>)
constructor(location: $ResourceLocation$Type, registry: $ResourceKey$Type<($Registry$Type<(T)>)>)
constructor(id: string, registry: $ResourceKey$Type<($Registry$Type<(T)>)>)

public "get"(): T
/**
 * 
 * @deprecated
 */
public "getUnchecked"(): T
public "getID"(): $ResourceLocation
public "clearCache"(): void
public static "onDataReload"(): void
public "getHolder"(): $Holder<(T)>
get "unchecked"(): T
get "iD"(): $ResourceLocation
get "holder"(): $Holder<(T)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DataObjectReference$Type<T> = ($DataObjectReference<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DataObjectReference_<T> = $DataObjectReference$Type<(T)>;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/entities/$PearlMarker" {
import {$Packet, $Packet$Type} from "packages/net/minecraft/network/protocol/$Packet"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$Projectile, $Projectile$Type} from "packages/net/minecraft/world/entity/projectile/$Projectile"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ThrownEnderpearl, $ThrownEnderpearl$Type} from "packages/net/minecraft/world/entity/projectile/$ThrownEnderpearl"
import {$ClientGamePacketListener, $ClientGamePacketListener$Type} from "packages/net/minecraft/network/protocol/game/$ClientGamePacketListener"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$HitResult, $HitResult$Type} from "packages/net/minecraft/world/phys/$HitResult"
import {$BlockSource, $BlockSource$Type} from "packages/net/minecraft/core/$BlockSource"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $PearlMarker extends $Entity {
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(worldIn: $Level$Type)
constructor(type: $EntityType$Type<($PearlMarker$Type)>, level: $Level$Type)

public static "getPearlToDispense"(source: $BlockSource$Type, level: $Level$Type, pos: $BlockPos$Type): $ThrownEnderpearl
public "getTeleportPos"(): $BlockPos
public "addPearl"(pearl: $ThrownEnderpearl$Type): void
public "setTeleportPos"(pos: $BlockPos$Type): void
public "kill"(): void
public "tick"(): void
public "handleEntityEvent"(pId: byte): void
public "attack"(pSource: $DamageSource$Type, pAmount: float): boolean
public "lerpTo"(pX: double, pY: double, pZ: double, pYaw: float, pPitch: float, pPosRotationIncrements: integer, pTeleport: boolean): void
public "teleportTo"(pX: double, pY: double, pZ: double): void
public "getAddEntityPacket"(): $Packet<($ClientGamePacketListener)>
public static "onProjectileImpact"(projectile: $Projectile$Type, hitResult: $HitResult$Type): void
get "teleportPos"(): $BlockPos
set "teleportPos"(value: $BlockPos$Type)
get "addEntityPacket"(): $Packet<($ClientGamePacketListener)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PearlMarker$Type = ($PearlMarker);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PearlMarker_ = $PearlMarker$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/$ModBlockProperties$Rune" {
import {$StringRepresentable$EnumCodec, $StringRepresentable$EnumCodec$Type} from "packages/net/minecraft/util/$StringRepresentable$EnumCodec"
import {$StringRepresentable, $StringRepresentable$Type} from "packages/net/minecraft/util/$StringRepresentable"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$Keyable, $Keyable$Type} from "packages/com/mojang/serialization/$Keyable"
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"

export class $ModBlockProperties$Rune extends $Enum<($ModBlockProperties$Rune)> implements $StringRepresentable {
static readonly "A": $ModBlockProperties$Rune
static readonly "B": $ModBlockProperties$Rune
static readonly "C": $ModBlockProperties$Rune
static readonly "D": $ModBlockProperties$Rune
static readonly "E": $ModBlockProperties$Rune
static readonly "F": $ModBlockProperties$Rune
static readonly "G": $ModBlockProperties$Rune
static readonly "H": $ModBlockProperties$Rune
static readonly "I": $ModBlockProperties$Rune
static readonly "J": $ModBlockProperties$Rune
static readonly "K": $ModBlockProperties$Rune
static readonly "L": $ModBlockProperties$Rune
static readonly "M": $ModBlockProperties$Rune
static readonly "N": $ModBlockProperties$Rune
static readonly "O": $ModBlockProperties$Rune
static readonly "P": $ModBlockProperties$Rune
static readonly "Q": $ModBlockProperties$Rune
static readonly "R": $ModBlockProperties$Rune
static readonly "S": $ModBlockProperties$Rune
static readonly "T": $ModBlockProperties$Rune
static readonly "U": $ModBlockProperties$Rune
static readonly "V": $ModBlockProperties$Rune
static readonly "W": $ModBlockProperties$Rune
static readonly "X": $ModBlockProperties$Rune
static readonly "Y": $ModBlockProperties$Rune
static readonly "Z": $ModBlockProperties$Rune


public static "values"(): ($ModBlockProperties$Rune)[]
public static "valueOf"(name: string): $ModBlockProperties$Rune
public "getSerializedName"(): string
public static "fromEnumWithMapping"<E extends ($Enum<(E)>) & ($StringRepresentable)>(arg0: $Supplier$Type<((E)[])>, arg1: $Function$Type<(string), (string)>): $StringRepresentable$EnumCodec<(E)>
public static "keys"(arg0: ($StringRepresentable$Type)[]): $Keyable
public static "fromEnum"<E extends ($Enum<(E)>) & ($StringRepresentable)>(arg0: $Supplier$Type<((E)[])>): $StringRepresentable$EnumCodec<(E)>
get "serializedName"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModBlockProperties$Rune$Type = (("a") | ("b") | ("c") | ("d") | ("e") | ("f") | ("g") | ("h") | ("i") | ("j") | ("k") | ("l") | ("m") | ("n") | ("o") | ("p") | ("q") | ("r") | ("s") | ("t") | ("u") | ("v") | ("w") | ("x") | ("y") | ("z")) | ($ModBlockProperties$Rune);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModBlockProperties$Rune_ = $ModBlockProperties$Rune$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/map/$CustomMapData$Type" {
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$MapItemSavedData, $MapItemSavedData$Type} from "packages/net/minecraft/world/level/saveddata/maps/$MapItemSavedData"
import {$CustomMapData, $CustomMapData$Type} from "packages/net/mehvahdjukaar/moonlight/api/map/$CustomMapData"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $CustomMapData$Type<T extends $CustomMapData<(any)>> extends $Record {

constructor(id: $ResourceLocation$Type, factory: $Supplier$Type<(T)>)

public "get"(mapData: $MapItemSavedData$Type): T
public "equals"(o: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "factory"(): $Supplier<(T)>
public "id"(): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CustomMapData$Type$Type<T> = ($CustomMapData$Type<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CustomMapData$Type_<T> = $CustomMapData$Type$Type<(T)>;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$PulleyBlockTile" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$Rotation, $Rotation$Type} from "packages/net/minecraft/world/level/block/$Rotation"
import {$AbstractContainerMenu, $AbstractContainerMenu$Type} from "packages/net/minecraft/world/inventory/$AbstractContainerMenu"
import {$LockCode, $LockCode$Type} from "packages/net/minecraft/world/$LockCode"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"
import {$ItemDisplayTile, $ItemDisplayTile$Type} from "packages/net/mehvahdjukaar/moonlight/api/block/$ItemDisplayTile"
import {$ModBlockProperties$Winding, $ModBlockProperties$Winding$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/$ModBlockProperties$Winding"

export class $PulleyBlockTile extends $ItemDisplayTile {
static readonly "LOOT_TABLE_TAG": string
static readonly "LOOT_TABLE_SEED_TAG": string
 "lootTable": $ResourceLocation
 "lootTableSeed": long
 "lockKey": $LockCode
 "blockState": $BlockState

constructor(pos: $BlockPos$Type, state: $BlockState$Type)

public static "getContentType"(item: $Item$Type): $ModBlockProperties$Winding
public "rotateDirectly"(rot: $Rotation$Type): boolean
public "updateTileOnInventoryChanged"(): void
public "needsToUpdateClientWhenChanged"(): boolean
public "canTakeItemThroughFace"(index: integer, stack: $ItemStack$Type, direction: $Direction$Type): boolean
public "canPlaceItemThroughFace"(index: integer, stack: $ItemStack$Type, direction: $Direction$Type): boolean
public "getMaxStackSize"(): integer
public "canPlaceItem"(index: integer, stack: $ItemStack$Type): boolean
public "m_6555_"(id: integer, player: $Inventory$Type): $AbstractContainerMenu
public "m_6820_"(): $Component
public "pullRopeUp"(): boolean
public "pullRope"(moveDir: $Direction$Type, maxDist: integer, addItem: boolean): boolean
public "releaseRopeDown"(): boolean
public "rotateIndirect"(player: $Player$Type, hand: $InteractionHand$Type, ropeBlock: $Block$Type, moveDir: $Direction$Type, retracting: boolean): boolean
public "releaseRope"(dir: $Direction$Type, maxDist: integer, removeItem: boolean): boolean
public static "stillValidBlockEntity"(arg0: $BlockEntity$Type, arg1: $Player$Type, arg2: integer): boolean
public static "stillValidBlockEntity"(arg0: $BlockEntity$Type, arg1: $Player$Type): boolean
public static "tryClear"(arg0: any): void
get "maxStackSize"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PulleyBlockTile$Type = ($PulleyBlockTile);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PulleyBlockTile_ = $PulleyBlockTile$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/misc/$MapLightHandler$Counter" {
import {$CustomMapData$DirtyCounter, $CustomMapData$DirtyCounter$Type} from "packages/net/mehvahdjukaar/moonlight/api/map/$CustomMapData$DirtyCounter"

export class $MapLightHandler$Counter implements $CustomMapData$DirtyCounter {


public "isDirty"(): boolean
public "clearDirty"(): void
public "markDirty"(x: integer, z: integer): void
get "dirty"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MapLightHandler$Counter$Type = ($MapLightHandler$Counter);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MapLightHandler$Counter_ = $MapLightHandler$Counter$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/forge/$MoonlightForge" {
import {$LevelEvent$Unload, $LevelEvent$Unload$Type} from "packages/net/minecraftforge/event/level/$LevelEvent$Unload"
import {$PlayerEvent$Clone, $PlayerEvent$Clone$Type} from "packages/net/minecraftforge/event/entity/player/$PlayerEvent$Clone"
import {$PlayerEvent$PlayerLoggedInEvent, $PlayerEvent$PlayerLoggedInEvent$Type} from "packages/net/minecraftforge/event/entity/player/$PlayerEvent$PlayerLoggedInEvent"
import {$LevelEvent$Load, $LevelEvent$Load$Type} from "packages/net/minecraftforge/event/level/$LevelEvent$Load"
import {$ICondition$IContext, $ICondition$IContext$Type} from "packages/net/minecraftforge/common/crafting/conditions/$ICondition$IContext"
import {$OnDatapackSyncEvent, $OnDatapackSyncEvent$Type} from "packages/net/minecraftforge/event/$OnDatapackSyncEvent"
import {$ModConfigEvent$Loading, $ModConfigEvent$Loading$Type} from "packages/net/minecraftforge/fml/event/config/$ModConfigEvent$Loading"
import {$ServerStoppedEvent, $ServerStoppedEvent$Type} from "packages/net/minecraftforge/event/server/$ServerStoppedEvent"
import {$ForgeConfigSpec, $ForgeConfigSpec$Type} from "packages/net/minecraftforge/common/$ForgeConfigSpec"
import {$ServerAboutToStartEvent, $ServerAboutToStartEvent$Type} from "packages/net/minecraftforge/event/server/$ServerAboutToStartEvent"
import {$TagsUpdatedEvent, $TagsUpdatedEvent$Type} from "packages/net/minecraftforge/event/$TagsUpdatedEvent"
import {$AddReloadListenerEvent, $AddReloadListenerEvent$Type} from "packages/net/minecraftforge/event/$AddReloadListenerEvent"

export class $MoonlightForge {
static readonly "MOD_ID": string
static readonly "SPEC": $ForgeConfigSpec

constructor()

public static "getConditionContext"(): $ICondition$IContext
public static "onPlayerLoggedIn"(event: $PlayerEvent$PlayerLoggedInEvent$Type): void
public static "onDataSync"(event: $OnDatapackSyncEvent$Type): void
public static "configsLoaded"(event: $ModConfigEvent$Loading$Type): void
public static "onDimensionUnload"(event: $LevelEvent$Unload$Type): void
public static "onLevelLoaded"(event: $LevelEvent$Load$Type): void
public static "onTagUpdated"(event: $TagsUpdatedEvent$Type): void
public static "beforeServerStart"(event: $ServerStoppedEvent$Type): void
public static "beforeServerStart"(event: $ServerAboutToStartEvent$Type): void
public static "onResourceReload"(event: $AddReloadListenerEvent$Type): void
public static "onPlayerClone"(event: $PlayerEvent$Clone$Type): void
get "conditionContext"(): $ICondition$IContext
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MoonlightForge$Type = ($MoonlightForge);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MoonlightForge_ = $MoonlightForge$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/renderers/tiles/$HourGlassBlockTileRenderer" {
import {$BlockEntityRendererProvider$Context, $BlockEntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/blockentity/$BlockEntityRendererProvider$Context"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$BlockEntityRenderer, $BlockEntityRenderer$Type} from "packages/net/minecraft/client/renderer/blockentity/$BlockEntityRenderer"
import {$HourGlassBlockTile, $HourGlassBlockTile$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$HourGlassBlockTile"

export class $HourGlassBlockTileRenderer implements $BlockEntityRenderer<($HourGlassBlockTile)> {

constructor(context: $BlockEntityRendererProvider$Context$Type)

public "getViewDistance"(): integer
public "render"(tile: $HourGlassBlockTile$Type, partialTicks: float, poseStack: $PoseStack$Type, bufferIn: $MultiBufferSource$Type, combinedLightIn: integer, combinedOverlayIn: integer): void
public static "renderSand"(poseStack: $PoseStack$Type, bufferIn: $MultiBufferSource$Type, combinedLightIn: integer, texture: $ResourceLocation$Type, height: float, dir: $Direction$Type): void
public "shouldRender"(arg0: $HourGlassBlockTile$Type, arg1: $Vec3$Type): boolean
public "shouldRenderOffScreen"(arg0: $HourGlassBlockTile$Type): boolean
get "viewDistance"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $HourGlassBlockTileRenderer$Type = ($HourGlassBlockTileRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $HourGlassBlockTileRenderer_ = $HourGlassBlockTileRenderer$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/reg/$ModSetup" {
import {$RegistryAccess, $RegistryAccess$Type} from "packages/net/minecraft/core/$RegistryAccess"

export class $ModSetup {

constructor()

public static "setup"(): void
public static "asyncSetup"(): void
public static "tagDependantSetup"(registryAccess: $RegistryAccess$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModSetup$Type = ($ModSetup);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModSetup_ = $ModSetup$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/items/$SoapItem" {
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$FoodProperties, $FoodProperties$Type} from "packages/net/minecraft/world/food/$FoodProperties"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$InteractionResultHolder, $InteractionResultHolder$Type} from "packages/net/minecraft/world/$InteractionResultHolder"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$ToolAction, $ToolAction$Type} from "packages/net/minecraftforge/common/$ToolAction"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $SoapItem extends $Item {
static readonly "SOAP_FOOD": $FoodProperties
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(pProperties: $Item$Properties$Type)

public "canPerformAction"(stack: $ItemStack$Type, toolAction: $ToolAction$Type): boolean
public "finishUsingItem"(pStack: $ItemStack$Type, pLevel: $Level$Type, entity: $LivingEntity$Type): $ItemStack
public "use"(level: $Level$Type, player: $Player$Type, hand: $InteractionHand$Type): $InteractionResultHolder<($ItemStack)>
public static "hasBeenEatenBefore"(player: $Player$Type, level: $Level$Type): boolean
public static "interactWithEntity"(stack: $ItemStack$Type, player: $Player$Type, entity: $Entity$Type, hand: $InteractionHand$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SoapItem$Type = ($SoapItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SoapItem_ = $SoapItem$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/entities/$FallingUrnEntity" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$ImprovedFallingBlockEntity, $ImprovedFallingBlockEntity$Type} from "packages/net/mehvahdjukaar/moonlight/api/entity/$ImprovedFallingBlockEntity"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$ItemLike, $ItemLike$Type} from "packages/net/minecraft/world/level/$ItemLike"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$ItemEntity, $ItemEntity$Type} from "packages/net/minecraft/world/entity/item/$ItemEntity"

export class $FallingUrnEntity extends $ImprovedFallingBlockEntity {
 "blockState": $BlockState
 "time": integer
 "dropItem": boolean
 "cancelDrop": boolean
 "blockData": $CompoundTag
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(type: $EntityType$Type<($FallingUrnEntity$Type)>, level: $Level$Type)
constructor(level: $Level$Type, pos: $BlockPos$Type, blockState: $BlockState$Type)

public static "fall"(level: $Level$Type, pos: $BlockPos$Type, state: $BlockState$Type): $FallingUrnEntity
public "attack"(pSource: $DamageSource$Type, pAmount: float): boolean
public "isAttackable"(): boolean
public "causeFallDamage"(height: float, amount: float, source: $DamageSource$Type): boolean
public "spawnAtLocation"(pItem: $ItemLike$Type): $ItemEntity
get "attackable"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FallingUrnEntity$Type = ($FallingUrnEntity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FallingUrnEntity_ = $FallingUrnEntity$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/util/math/colors/$HCLColor" {
import {$RGBColor, $RGBColor$Type} from "packages/net/mehvahdjukaar/moonlight/api/util/math/colors/$RGBColor"
import {$Codec, $Codec$Type} from "packages/com/mojang/serialization/$Codec"
import {$BaseColor, $BaseColor$Type} from "packages/net/mehvahdjukaar/moonlight/api/util/math/colors/$BaseColor"

export class $HCLColor extends $BaseColor<($HCLColor)> {
/**
 * 
 * @deprecated
 */
static readonly "CODEC": $Codec<(integer)>

constructor(h: float, c: float, l: float, a: float)

public "toString"(): string
/**
 * 
 * @deprecated
 */
public "multiply"(color: $HCLColor$Type, hue: float, chroma: float, luminance: float, alpha: float): $HCLColor
public "luminance"(): float
public "hue"(): float
public "alpha"(): float
public "distTo"(other: $HCLColor$Type): float
public "mixWith"(color: $HCLColor$Type, bias: float): $HCLColor
public "asHCL"(): $HCLColor
public "asRGB"(): $RGBColor
public "withHue"(hue: float): $HCLColor
public "fromRGB"(rgb: $RGBColor$Type): $HCLColor
public "withAlpha"(alpha: float): $HCLColor
public static "averageColors"(...colors: ($HCLColor$Type)[]): $HCLColor
public "withLuminance"(luminance: float): $HCLColor
public "chroma"(): float
public "withChroma"(chroma: float): $HCLColor
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $HCLColor$Type = ($HCLColor);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $HCLColor_ = $HCLColor$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/platform/$RegHelper" {
import {$Schedule, $Schedule$Type} from "packages/net/minecraft/world/entity/schedule/$Schedule"
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$PaintingVariant, $PaintingVariant$Type} from "packages/net/minecraft/world/entity/decoration/$PaintingVariant"
import {$PoiType, $PoiType$Type} from "packages/net/minecraft/world/entity/ai/village/poi/$PoiType"
import {$RegHelper$SpawnPlacementEvent, $RegHelper$SpawnPlacementEvent$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/$RegHelper$SpawnPlacementEvent"
import {$BannerPattern, $BannerPattern$Type} from "packages/net/minecraft/world/level/block/entity/$BannerPattern"
import {$MenuType, $MenuType$Type} from "packages/net/minecraft/world/inventory/$MenuType"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$BiFunction, $BiFunction$Type} from "packages/java/util/function/$BiFunction"
import {$Recipe, $Recipe$Type} from "packages/net/minecraft/world/item/crafting/$Recipe"
import {$CreativeModeTab$Builder, $CreativeModeTab$Builder$Type} from "packages/net/minecraft/world/item/$CreativeModeTab$Builder"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$Activity, $Activity$Type} from "packages/net/minecraft/world/entity/schedule/$Activity"
import {$List, $List$Type} from "packages/java/util/$List"
import {$SimpleParticleType, $SimpleParticleType$Type} from "packages/net/minecraft/core/particles/$SimpleParticleType"
import {$RegHelper$CommandRegistration, $RegHelper$CommandRegistration$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/$RegHelper$CommandRegistration"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$MemoryModuleType, $MemoryModuleType$Type} from "packages/net/minecraft/world/entity/ai/memory/$MemoryModuleType"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"
import {$RegHelper$VariantType, $RegHelper$VariantType$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/$RegHelper$VariantType"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$RegHelper$ItemToTabEvent, $RegHelper$ItemToTabEvent$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/$RegHelper$ItemToTabEvent"
import {$RegSupplier, $RegSupplier$Type} from "packages/net/mehvahdjukaar/moonlight/api/misc/$RegSupplier"
import {$CreativeModeTab, $CreativeModeTab$Type} from "packages/net/minecraft/world/item/$CreativeModeTab"
import {$VillagerTrades$ItemListing, $VillagerTrades$ItemListing$Type} from "packages/net/minecraft/world/entity/npc/$VillagerTrades$ItemListing"
import {$Registry, $Registry$Type} from "packages/net/minecraft/core/$Registry"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$RegHelper$LootInjectEvent, $RegHelper$LootInjectEvent$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/$RegHelper$LootInjectEvent"
import {$Enchantment, $Enchantment$Type} from "packages/net/minecraft/world/item/enchantment/$Enchantment"
import {$SimpleCraftingRecipeSerializer$Factory, $SimpleCraftingRecipeSerializer$Factory$Type} from "packages/net/minecraft/world/item/crafting/$SimpleCraftingRecipeSerializer$Factory"
import {$Feature, $Feature$Type} from "packages/net/minecraft/world/level/levelgen/feature/$Feature"
import {$EnumMap, $EnumMap$Type} from "packages/java/util/$EnumMap"
import {$FireworkRocketItem$Shape, $FireworkRocketItem$Shape$Type} from "packages/net/minecraft/world/item/$FireworkRocketItem$Shape"
import {$Sensor, $Sensor$Type} from "packages/net/minecraft/world/entity/ai/sensing/$Sensor"
import {$Fluid, $Fluid$Type} from "packages/net/minecraft/world/level/material/$Fluid"
import {$TriFunction, $TriFunction$Type} from "packages/net/mehvahdjukaar/moonlight/api/misc/$TriFunction"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Registrator, $Registrator$Type} from "packages/net/mehvahdjukaar/moonlight/api/misc/$Registrator"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$VillagerProfession, $VillagerProfession$Type} from "packages/net/minecraft/world/entity/npc/$VillagerProfession"
import {$Codec, $Codec$Type} from "packages/com/mojang/serialization/$Codec"
import {$RegHelper$AttributeEvent, $RegHelper$AttributeEvent$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/$RegHelper$AttributeEvent"
import {$RecipeType, $RecipeType$Type} from "packages/net/minecraft/world/item/crafting/$RecipeType"
import {$AbstractContainerMenu, $AbstractContainerMenu$Type} from "packages/net/minecraft/world/inventory/$AbstractContainerMenu"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$MobCategory, $MobCategory$Type} from "packages/net/minecraft/world/entity/$MobCategory"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"
import {$SensorType, $SensorType$Type} from "packages/net/minecraft/world/entity/ai/sensing/$SensorType"
import {$RecipeSerializer, $RecipeSerializer$Type} from "packages/net/minecraft/world/item/crafting/$RecipeSerializer"
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$StructureType, $StructureType$Type} from "packages/net/minecraft/world/level/levelgen/structure/$StructureType"
import {$EntityType$EntityFactory, $EntityType$EntityFactory$Type} from "packages/net/minecraft/world/entity/$EntityType$EntityFactory"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$CraftingRecipe, $CraftingRecipe$Type} from "packages/net/minecraft/world/item/crafting/$CraftingRecipe"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$ResourceKey, $ResourceKey$Type} from "packages/net/minecraft/resources/$ResourceKey"
import {$ItemLike, $ItemLike$Type} from "packages/net/minecraft/world/level/$ItemLike"

export class $RegHelper {

constructor()

public static "register"<T, E extends T>(name: $ResourceLocation$Type, supplier: $Supplier$Type<(E)>, regKey: $ResourceKey$Type<(any)>): $RegSupplier<(E)>
public static "addCommandRegistration"(eventListener: $RegHelper$CommandRegistration$Type): void
public static "registerBaseBlockSet"(baseName: $ResourceLocation$Type, properties: $BlockBehaviour$Properties$Type): $EnumMap<($RegHelper$VariantType), ($Supplier<($Block)>)>
public static "registerBaseBlockSet"(baseName: $ResourceLocation$Type, parentBlock: $Block$Type): $EnumMap<($RegHelper$VariantType), ($Supplier<($Block)>)>
/**
 * 
 * @deprecated
 */
public static "registerWanderingTraderTrades"(level: integer, factories: $Consumer$Type<($List$Type<($VillagerTrades$ItemListing$Type)>)>): void
public static "registerBlockFlammability"(item: $Block$Type, fireSpread: integer, flammability: integer): void
public static "registerChickenFood"(...food: ($ItemLike$Type)[]): void
public static "registerFireworkRecipe"(shape: $FireworkRocketItem$Shape$Type, ingredient: $Item$Type): void
public static "registerSpecialRecipe"<T extends $CraftingRecipe>(name: $ResourceLocation$Type, factory: $SimpleCraftingRecipeSerializer$Factory$Type<(T)>): $RegSupplier<($RecipeSerializer<(T)>)>
/**
 * 
 * @deprecated
 */
public static "registerVillagerTrades"(profession: $VillagerProfession$Type, level: integer, factories: $Consumer$Type<($List$Type<($VillagerTrades$ItemListing$Type)>)>): void
public static "addSpawnPlacementsRegistration"(eventListener: $Consumer$Type<($RegHelper$SpawnPlacementEvent$Type)>): void
public static "registerMemoryModule"<U>(name: $ResourceLocation$Type, codec: $Codec$Type<(U)>): $RegSupplier<($MemoryModuleType<(U)>)>
public static "registerMemoryModule"<T extends $MemoryModuleType<(any)>>(name: $ResourceLocation$Type, memory: $Supplier$Type<(T)>): $RegSupplier<(T)>
public static "registerReducedBlockSet"(baseName: $ResourceLocation$Type, properties: $BlockBehaviour$Properties$Type): $EnumMap<($RegHelper$VariantType), ($Supplier<($Block)>)>
public static "registerReducedBlockSet"(baseName: $ResourceLocation$Type, parentBlock: $Block$Type): $EnumMap<($RegHelper$VariantType), ($Supplier<($Block)>)>
public static "registerSimpleRecipeCondition"(id: $ResourceLocation$Type, predicate: $Predicate$Type<(string)>): void
public static "registerBlockEntityType"<E extends $BlockEntity>(name: $ResourceLocation$Type, blockEntitySupplier: $BiFunction$Type<($BlockPos$Type), ($BlockState$Type), (E)>, ...blocks: ($Block$Type)[]): $RegSupplier<($BlockEntityType<(E)>)>
public static "registerBlockEntityType"<E extends $BlockEntity>(name: $ResourceLocation$Type, blockEntitySupplier: $BiFunction$Type<($BlockPos$Type), ($BlockState$Type), (E)>, ...blocks: ($Supplier$Type<($Block$Type)>)[]): $RegSupplier<($BlockEntityType<(E)>)>
public static "registerBlockEntityType"<T extends $BlockEntityType<(E)>, E extends $BlockEntity>(name: $ResourceLocation$Type, blockEntity: $Supplier$Type<(T)>): $RegSupplier<(T)>
public static "registerCreativeModeTab"(name: $ResourceLocation$Type, configurator: $Consumer$Type<($CreativeModeTab$Builder$Type)>): $RegSupplier<($CreativeModeTab)>
public static "registerCreativeModeTab"(name: $ResourceLocation$Type, searchBar: boolean, afterTabs: $List$Type<($ResourceLocation$Type)>, beforeTabs: $List$Type<($ResourceLocation$Type)>, configurator: $Consumer$Type<($CreativeModeTab$Builder$Type)>): $RegSupplier<($CreativeModeTab)>
public static "registerCreativeModeTab"(name: $ResourceLocation$Type, searchBar: boolean, configurator: $Consumer$Type<($CreativeModeTab$Builder$Type)>): $RegSupplier<($CreativeModeTab)>
public static "registerRecipeSerializer"<T extends $RecipeSerializer<(any)>>(name: $ResourceLocation$Type, recipe: $Supplier$Type<(T)>): $RegSupplier<(T)>
public static "registerFullBlockSet"(baseName: $ResourceLocation$Type, properties: $BlockBehaviour$Properties$Type): $EnumMap<($RegHelper$VariantType), ($Supplier<($Block)>)>
public static "registerFullBlockSet"(baseName: $ResourceLocation$Type, parentBlock: $Block$Type): $EnumMap<($RegHelper$VariantType), ($Supplier<($Block)>)>
public static "addLootTableInjects"(eventListener: $Consumer$Type<($RegHelper$LootInjectEvent$Type)>): void
public static "registerEnchantment"<T extends $Enchantment>(name: $ResourceLocation$Type, enchantment: $Supplier$Type<(T)>): $RegSupplier<(T)>
public static "registerItemBurnTime"(item: $Item$Type, burnTime: integer): void
public static "registerBannerPattern"(name: $ResourceLocation$Type, patternId: string): $RegSupplier<($BannerPattern)>
public static "registerCompostable"(name: $ItemLike$Type, chance: float): void
public static "registerInBatch"<T>(reg: $Registry$Type<(T)>, eventListener: $Consumer$Type<($Registrator$Type<(T)>)>): void
public static "registerBlock"<T extends $Block>(name: $ResourceLocation$Type, block: $Supplier$Type<(T)>): $RegSupplier<(T)>
public static "registerAsync"<T, E extends T>(name: $ResourceLocation$Type, supplier: $Supplier$Type<(E)>, regKey: $ResourceKey$Type<(any)>): $RegSupplier<(E)>
public static "registerRecipeType"<T extends $Recipe<(any)>>(name: $ResourceLocation$Type): $Supplier<($RecipeType<(T)>)>
public static "registerPainting"<T extends $PaintingVariant>(name: $ResourceLocation$Type, painting: $Supplier$Type<(T)>): $RegSupplier<(T)>
public static "registerMenuType"<C extends $AbstractContainerMenu>(name: $ResourceLocation$Type, containerFactory: $TriFunction$Type<(integer), ($Inventory$Type), ($FriendlyByteBuf$Type), (C)>): $RegSupplier<($MenuType<(C)>)>
public static "registerActivity"(name: $ResourceLocation$Type): $RegSupplier<($Activity)>
public static "registerActivity"<T extends $Activity>(name: $ResourceLocation$Type, activity: $Supplier$Type<(T)>): $RegSupplier<(T)>
public static "registerSchedule"<T extends $Schedule>(name: $ResourceLocation$Type, schedule: $Supplier$Type<(T)>): $RegSupplier<(T)>
public static "registerSensorI"<T extends $Sensor<(any)>>(name: $ResourceLocation$Type, sensor: $Supplier$Type<(T)>): $RegSupplier<($SensorType<(T)>)>
public static "registerSensor"<T extends $SensorType<(any)>>(name: $ResourceLocation$Type, sensorType: $Supplier$Type<(T)>): $RegSupplier<(T)>
public static "addItemsToTabsRegistration"(event: $Consumer$Type<($RegHelper$ItemToTabEvent$Type)>): void
public static "registerBlockWithItem"<T extends $Block>(name: $ResourceLocation$Type, blockFactory: $Supplier$Type<(T)>): $RegSupplier<(T)>
public static "registerBlockWithItem"<T extends $Block>(name: $ResourceLocation$Type, blockFactory: $Supplier$Type<(T)>, burnTime: integer): $RegSupplier<(T)>
public static "registerBlockWithItem"<T extends $Block>(name: $ResourceLocation$Type, blockFactory: $Supplier$Type<(T)>, properties: $Item$Properties$Type, burnTime: integer): $RegSupplier<(T)>
public static "addAttributeRegistration"(eventListener: $Consumer$Type<($RegHelper$AttributeEvent$Type)>): void
public static "registerFeature"<T extends $Feature<(any)>>(name: $ResourceLocation$Type, feature: $Supplier$Type<(T)>): $RegSupplier<(T)>
public static "registerPOI"(name: $ResourceLocation$Type, searchDistance: integer, maxTickets: integer, ...blocks: ($Block$Type)[]): $RegSupplier<($PoiType)>
public static "registerPOI"(name: $ResourceLocation$Type, poi: $Supplier$Type<($PoiType$Type)>): $RegSupplier<($PoiType)>
public static "registerPOI"(name: $ResourceLocation$Type, searchDistance: integer, maxTickets: integer, ...blocks: ($Supplier$Type<($Block$Type)>)[]): $RegSupplier<($PoiType)>
public static "registerFluid"<T extends $Fluid>(name: $ResourceLocation$Type, fluid: $Supplier$Type<(T)>): $RegSupplier<(T)>
public static "registerStructure"<T extends $StructureType<(any)>>(name: $ResourceLocation$Type, feature: $Supplier$Type<(T)>): $RegSupplier<(T)>
public static "registerSound"<T extends $SoundEvent>(name: $ResourceLocation$Type, sound: $Supplier$Type<(T)>): $RegSupplier<(T)>
public static "registerSound"(name: $ResourceLocation$Type): $RegSupplier<($SoundEvent)>
public static "registerSound"(name: $ResourceLocation$Type, fixedRange: float): $RegSupplier<($SoundEvent)>
public static "registerParticle"(name: $ResourceLocation$Type): $RegSupplier<($SimpleParticleType)>
public static "registerItem"<T extends $Item>(name: $ResourceLocation$Type, item: $Supplier$Type<(T)>): $RegSupplier<(T)>
public static "registerEntityType"<T extends $Entity>(name: $ResourceLocation$Type, factory: $EntityType$EntityFactory$Type<(T)>, category: $MobCategory$Type, width: float, height: float, clientTrackingRange: integer): $RegSupplier<($EntityType<(T)>)>
public static "registerEntityType"<T extends $Entity>(name: $ResourceLocation$Type, factory: $EntityType$EntityFactory$Type<(T)>, category: $MobCategory$Type, width: float, height: float, clientTrackingRange: integer, updateInterval: integer): $RegSupplier<($EntityType<(T)>)>
public static "registerEntityType"<T extends $Entity>(name: $ResourceLocation$Type, factory: $EntityType$EntityFactory$Type<(T)>, category: $MobCategory$Type, width: float, height: float): $RegSupplier<($EntityType<(T)>)>
public static "registerEntityType"<T extends $Entity>(name: $ResourceLocation$Type, type: $Supplier$Type<($EntityType$Type<(T)>)>): $RegSupplier<($EntityType<(T)>)>
public static "registerParrotFood"(...food: ($ItemLike$Type)[]): void
public static "registerHorseFood"(...food: ($ItemLike$Type)[]): void
public static "registerBlockSet"(types: ($RegHelper$VariantType$Type)[], baseBlock: $RegSupplier$Type<(any)>, modId: string): $EnumMap<($RegHelper$VariantType), ($Supplier<($Block)>)>
public static "registerBlockSet"(types: ($RegHelper$VariantType$Type)[], baseName: $ResourceLocation$Type, properties: $BlockBehaviour$Properties$Type): $EnumMap<($RegHelper$VariantType), ($Supplier<($Block)>)>
public static "registerEffect"<T extends $MobEffect>(name: $ResourceLocation$Type, effect: $Supplier$Type<(T)>): $RegSupplier<(T)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RegHelper$Type = ($RegHelper);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RegHelper_ = $RegHelper$Type;
}}
declare module "packages/net/mehvahdjukaar/dummmmmmy/configs/$ClientConfigs" {
import {$ConfigSpec, $ConfigSpec$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/configs/$ConfigSpec"
import {$ClientConfigs$IdOrTagPredicate, $ClientConfigs$IdOrTagPredicate$Type} from "packages/net/mehvahdjukaar/dummmmmmy/configs/$ClientConfigs$IdOrTagPredicate"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$ClientConfigs$SkinType, $ClientConfigs$SkinType$Type} from "packages/net/mehvahdjukaar/dummmmmmy/configs/$ClientConfigs$SkinType"
import {$CritMode, $CritMode$Type} from "packages/net/mehvahdjukaar/dummmmmmy/configs/$CritMode"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $ClientConfigs {
static readonly "SPEC": $ConfigSpec
static readonly "ANIMATION_INTENSITY": $Supplier<(double)>
static readonly "SHOW_HEARTHS": $Supplier<(boolean)>
static readonly "SKIN": $Supplier<($ClientConfigs$SkinType)>
static readonly "DAMAGE_NUMBERS": $Supplier<(boolean)>
static readonly "LIT_UP_PARTICLES": $Supplier<(boolean)>
static readonly "CRIT_MODE": $Supplier<($CritMode)>
static readonly "DAMAGE_TO_COLORS": $Supplier<($Map<($ClientConfigs$IdOrTagPredicate), (integer)>)>

constructor()

public static "init"(): void
public static "getDamageColor"(damageTypeId: $ResourceLocation$Type): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientConfigs$Type = ($ClientConfigs);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientConfigs_ = $ClientConfigs$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/items/tooltip_components/$BannerPatternTooltip" {
import {$TooltipComponent, $TooltipComponent$Type} from "packages/net/minecraft/world/inventory/tooltip/$TooltipComponent"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$BannerPattern, $BannerPattern$Type} from "packages/net/minecraft/world/level/block/entity/$BannerPattern"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"

export class $BannerPatternTooltip extends $Record implements $TooltipComponent {

constructor(pattern: $TagKey$Type<($BannerPattern$Type)>)

public "equals"(o: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "pattern"(): $TagKey<($BannerPattern)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BannerPatternTooltip$Type = ($BannerPatternTooltip);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BannerPatternTooltip_ = $BannerPatternTooltip$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/faucet/$FaucetSource" {
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$FluidOffer, $FluidOffer$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/faucet/$FluidOffer"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export interface $FaucetSource<T> {

 "drain"(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $Direction$Type, arg3: T, arg4: integer): void
 "getProvidedFluid"(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $Direction$Type, arg3: T): $FluidOffer
}

export namespace $FaucetSource {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FaucetSource$Type<T> = ($FaucetSource<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FaucetSource_<T> = $FaucetSource$Type<(T)>;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/fluids/$ModFlowingFluid$Properties" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$Fluid, $Fluid$Type} from "packages/net/minecraft/world/level/material/$Fluid"
import {$BlockPathTypes, $BlockPathTypes$Type} from "packages/net/minecraft/world/level/pathfinder/$BlockPathTypes"
import {$Rarity, $Rarity$Type} from "packages/net/minecraft/world/item/$Rarity"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $ModFlowingFluid$Properties {
 "descriptionId": string
 "motionScale": double
 "canPushEntity": boolean
 "canSwim": boolean
 "canDrown": boolean
 "fallDistanceModifier": float
 "canExtinguish": boolean
 "supportsBoating": boolean
 "canConvertToSource": boolean
 "pathType": $BlockPathTypes
 "adjacentPathType": $BlockPathTypes
 "canHydrate": boolean
 "lightLevel": integer
 "density": integer
 "temperature": integer
 "viscosity": integer
 "rarity": $Rarity
 "sounds": $Map<(string), ($SoundEvent)>
/**
 * 
 * @deprecated
 */
 "copyFluid": $Fluid

constructor()

public "lightLevel"(lightLevel: integer): $ModFlowingFluid$Properties
public "sound"(soundActionId: string, sound: $SoundEvent$Type): $ModFlowingFluid$Properties
public "descriptionId"(descriptionId: string): $ModFlowingFluid$Properties
public "viscosity"(viscosity: integer): $ModFlowingFluid$Properties
public "canDrown"(canDrown: boolean): $ModFlowingFluid$Properties
public "adjacentPathType"(adjacentPathType: $BlockPathTypes$Type): $ModFlowingFluid$Properties
public "pathType"(pathType: $BlockPathTypes$Type): $ModFlowingFluid$Properties
public "fallDistanceModifier"(fallDistanceModifier: float): $ModFlowingFluid$Properties
public "rarity"(rarity: $Rarity$Type): $ModFlowingFluid$Properties
public "density"(density: integer): $ModFlowingFluid$Properties
public "temperature"(temperature: integer): $ModFlowingFluid$Properties
public "setCanConvertToSource"(canConvertToSource: boolean): $ModFlowingFluid$Properties
public "supportsBoating"(supportsBoating: boolean): $ModFlowingFluid$Properties
public "canSwim"(canSwim: boolean): $ModFlowingFluid$Properties
public "canExtinguish"(canExtinguish: boolean): $ModFlowingFluid$Properties
public "canHydrate"(canHydrate: boolean): $ModFlowingFluid$Properties
public "canPushEntity"(canPushEntity: boolean): $ModFlowingFluid$Properties
public "motionScale"(motionScale: double): $ModFlowingFluid$Properties
/**
 * 
 * @deprecated
 */
public "copyFluid"(fluid: $Fluid$Type): $ModFlowingFluid$Properties
set "canConvertToSource"(value: boolean)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModFlowingFluid$Properties$Type = ($ModFlowingFluid$Properties);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModFlowingFluid$Properties_ = $ModFlowingFluid$Properties$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$StatueBlockTile$StatuePose" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export class $StatueBlockTile$StatuePose extends $Enum<($StatueBlockTile$StatuePose)> {
static readonly "STANDING": $StatueBlockTile$StatuePose
static readonly "HOLDING": $StatueBlockTile$StatuePose
static readonly "CANDLE": $StatueBlockTile$StatuePose
static readonly "SWORD": $StatueBlockTile$StatuePose
static readonly "TOOL": $StatueBlockTile$StatuePose
static readonly "GLOBE": $StatueBlockTile$StatuePose
static readonly "SEPIA_GLOBE": $StatueBlockTile$StatuePose


public static "values"(): ($StatueBlockTile$StatuePose)[]
public static "valueOf"(name: string): $StatueBlockTile$StatuePose
public "isGlobe"(): boolean
public static "getPose"(stack: $ItemStack$Type): $StatueBlockTile$StatuePose
get "globe"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $StatueBlockTile$StatuePose$Type = (("standing") | ("holding") | ("sword") | ("globe") | ("candle") | ("sepia_globe") | ("tool")) | ($StatueBlockTile$StatuePose);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $StatueBlockTile$StatuePose_ = $StatueBlockTile$StatuePose$Type;
}}
declare module "packages/net/mehvahdjukaar/dummmmmmy/common/$ModEvents" {
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$Mob, $Mob$Type} from "packages/net/minecraft/world/entity/$Mob"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $ModEvents {

constructor()

public static "canBeScaredByScarecrow"(entity: $Entity$Type): boolean
public static "onEntityDamage"(target: $LivingEntity$Type, amount: float, source: $DamageSource$Type): void
public static "onCheckSpawn"(entity: $Mob$Type, level: $LevelAccessor$Type): boolean
public static "onEntityJoinWorld"(entity: $Entity$Type): void
public static "onEntityHeal"(entity: $LivingEntity$Type, amount: float): void
public static "isScarecrowInRange"(entity: $Entity$Type, world: $Level$Type): boolean
public static "onEntityCriticalHit"(attacker: $Player$Type, target: $Entity$Type, damageModifier: float): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModEvents$Type = ($ModEvents);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModEvents_ = $ModEvents$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/reg/$ModParticles" {
import {$SimpleParticleType, $SimpleParticleType$Type} from "packages/net/minecraft/core/particles/$SimpleParticleType"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"

export class $ModParticles {
static readonly "SPEAKER_SOUND": $Supplier<($SimpleParticleType)>
static readonly "GREEN_FLAME": $Supplier<($SimpleParticleType)>
static readonly "DRIPPING_LIQUID": $Supplier<($SimpleParticleType)>
static readonly "FALLING_LIQUID": $Supplier<($SimpleParticleType)>
static readonly "SPLASHING_LIQUID": $Supplier<($SimpleParticleType)>
static readonly "BOMB_EXPLOSION_PARTICLE": $Supplier<($SimpleParticleType)>
static readonly "BOMB_EXPLOSION_PARTICLE_EMITTER": $Supplier<($SimpleParticleType)>
static readonly "BOMB_SMOKE_PARTICLE": $Supplier<($SimpleParticleType)>
static readonly "BOTTLING_XP_PARTICLE": $Supplier<($SimpleParticleType)>
static readonly "FEATHER_PARTICLE": $Supplier<($SimpleParticleType)>
static readonly "SLINGSHOT_PARTICLE": $Supplier<($SimpleParticleType)>
static readonly "STASIS_PARTICLE": $Supplier<($SimpleParticleType)>
static readonly "CONFETTI_PARTICLE": $Supplier<($SimpleParticleType)>
static readonly "ROTATION_TRAIL": $Supplier<($SimpleParticleType)>
static readonly "ROTATION_TRAIL_EMITTER": $Supplier<($SimpleParticleType)>
static readonly "SUDS_PARTICLE": $Supplier<($SimpleParticleType)>
static readonly "ASH_PARTICLE": $Supplier<($SimpleParticleType)>
static readonly "BUBBLE_BLOCK_PARTICLE": $Supplier<($SimpleParticleType)>
static readonly "SUGAR_PARTICLE": $Supplier<($SimpleParticleType)>
static readonly "CANNON_FIRE_PARTICLE": $Supplier<($SimpleParticleType)>

constructor()

public static "init"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModParticles$Type = ($ModParticles);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModParticles_ = $ModParticles$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/faucet/$LiquidBlockInteraction" {
import {$FaucetSource$Fluid, $FaucetSource$Fluid$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/faucet/$FaucetSource$Fluid"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$FluidOffer, $FluidOffer$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/faucet/$FluidOffer"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$FluidState, $FluidState$Type} from "packages/net/minecraft/world/level/material/$FluidState"

export class $LiquidBlockInteraction implements $FaucetSource$Fluid {


public "drain"(level: $Level$Type, pos: $BlockPos$Type, dir: $Direction$Type, source: $FluidState$Type, amount: integer): void
public "getProvidedFluid"(level: $Level$Type, pos: $BlockPos$Type, dir: $Direction$Type, source: $FluidState$Type): $FluidOffer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LiquidBlockInteraction$Type = ($LiquidBlockInteraction);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LiquidBlockInteraction_ = $LiquidBlockInteraction$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/particles/$FallingLiquidParticle" {
import {$ParticleRenderType, $ParticleRenderType$Type} from "packages/net/minecraft/client/particle/$ParticleRenderType"
import {$TextureSheetParticle, $TextureSheetParticle$Type} from "packages/net/minecraft/client/particle/$TextureSheetParticle"

export class $FallingLiquidParticle extends $TextureSheetParticle {
 "x": double
 "y": double
 "z": double
 "xd": double
 "yd": double
 "zd": double
 "age": integer
 "rCol": float
 "gCol": float
 "bCol": float


public "getRenderType"(): $ParticleRenderType
public "tick"(): void
get "renderType"(): $ParticleRenderType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FallingLiquidParticle$Type = ($FallingLiquidParticle);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FallingLiquidParticle_ = $FallingLiquidParticle$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/dispenser/$FlintAndSteelBehavior" {
import {$DispenserHelper$AdditionalDispenserBehavior, $DispenserHelper$AdditionalDispenserBehavior$Type} from "packages/net/mehvahdjukaar/moonlight/api/util/$DispenserHelper$AdditionalDispenserBehavior"
import {$BlockSource, $BlockSource$Type} from "packages/net/minecraft/core/$BlockSource"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $FlintAndSteelBehavior extends $DispenserHelper$AdditionalDispenserBehavior {


public static "bootStrap"(): void
public static "setEntityPokingOutOfBlock"(arg0: $BlockSource$Type, arg1: $Entity$Type, arg2: $Direction$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FlintAndSteelBehavior$Type = ($FlintAndSteelBehavior);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FlintAndSteelBehavior_ = $FlintAndSteelBehavior$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/client/colors/$BrewingStandColor" {
import {$BlockColor, $BlockColor$Type} from "packages/net/minecraft/client/color/block/$BlockColor"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockAndTintGetter, $BlockAndTintGetter$Type} from "packages/net/minecraft/world/level/$BlockAndTintGetter"

export class $BrewingStandColor implements $BlockColor {

constructor()

public "getColor"(state: $BlockState$Type, world: $BlockAndTintGetter$Type, pos: $BlockPos$Type, tint: integer): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BrewingStandColor$Type = ($BrewingStandColor);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BrewingStandColor_ = $BrewingStandColor$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/blocks/$GunpowderBlock" {
import {$IntegerProperty, $IntegerProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$IntegerProperty"
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$Mirror, $Mirror$Type} from "packages/net/minecraft/world/level/block/$Mirror"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$RedstoneSide, $RedstoneSide$Type} from "packages/net/minecraft/world/level/block/state/properties/$RedstoneSide"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$CollisionContext, $CollisionContext$Type} from "packages/net/minecraft/world/phys/shapes/$CollisionContext"
import {$LightUpBlock, $LightUpBlock$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/blocks/$LightUpBlock"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$EnumProperty, $EnumProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$EnumProperty"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$ILightable$FireSourceType, $ILightable$FireSourceType$Type} from "packages/net/mehvahdjukaar/moonlight/api/block/$ILightable$FireSourceType"
import {$Rotation, $Rotation$Type} from "packages/net/minecraft/world/level/block/$Rotation"
import {$Explosion, $Explosion$Type} from "packages/net/minecraft/world/level/$Explosion"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $GunpowderBlock extends $LightUpBlock {
static readonly "NORTH": $EnumProperty<($RedstoneSide)>
static readonly "EAST": $EnumProperty<($RedstoneSide)>
static readonly "SOUTH": $EnumProperty<($RedstoneSide)>
static readonly "WEST": $EnumProperty<($RedstoneSide)>
static readonly "BURNING": $IntegerProperty
static readonly "PROPERTY_BY_DIRECTION": $Map<($Direction), ($EnumProperty<($RedstoneSide)>)>
static readonly "LIT": $BooleanProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(properties: $BlockBehaviour$Properties$Type)

public "getStateForPlacement"(context: $BlockPlaceContext$Type): $BlockState
public "fallOn"(world: $Level$Type, state: $BlockState$Type, pos: $BlockPos$Type, entity: $Entity$Type, height: float): void
public static "isFireSource"(state: $BlockState$Type): boolean
public static "isFireSource"(world: $LevelAccessor$Type, pos: $BlockPos$Type): boolean
public "onBlockExploded"(state: $BlockState$Type, world: $Level$Type, pos: $BlockPos$Type, explosion: $Explosion$Type): void
public "getFireSpreadSpeed"(state: $BlockState$Type, world: $BlockGetter$Type, pos: $BlockPos$Type, face: $Direction$Type): integer
public "getFlammability"(state: $BlockState$Type, world: $BlockGetter$Type, pos: $BlockPos$Type, face: $Direction$Type): integer
public "onCaughtFire"(state: $BlockState$Type, world: $Level$Type, pos: $BlockPos$Type, face: $Direction$Type, igniter: $LivingEntity$Type): void
public "updateIndirectNeighbourShapes"(state: $BlockState$Type, world: $LevelAccessor$Type, pos: $BlockPos$Type, var1: integer, var2: integer): void
public "neighborChanged"(state: $BlockState$Type, world: $Level$Type, pos: $BlockPos$Type, neighborBlock: $Block$Type, neighborPos: $BlockPos$Type, moving: boolean): void
public "onPlace"(state: $BlockState$Type, world: $Level$Type, pos: $BlockPos$Type, oldState: $BlockState$Type, moving: boolean): void
public "updateShape"(state: $BlockState$Type, direction: $Direction$Type, otherState: $BlockState$Type, world: $LevelAccessor$Type, pos: $BlockPos$Type, otherPos: $BlockPos$Type): $BlockState
public "triggerEvent"(state: $BlockState$Type, world: $Level$Type, pos: $BlockPos$Type, eventID: integer, eventParam: integer): boolean
public "use"(state: $BlockState$Type, world: $Level$Type, pos: $BlockPos$Type, player: $Player$Type, hand: $InteractionHand$Type, hit: $BlockHitResult$Type): $InteractionResult
public "onRemove"(state: $BlockState$Type, world: $Level$Type, pos: $BlockPos$Type, newState: $BlockState$Type, isMoving: boolean): void
public "rotate"(state: $BlockState$Type, rotation: $Rotation$Type): $BlockState
public "mirror"(state: $BlockState$Type, mirror: $Mirror$Type): $BlockState
public "canSurvive"(state: $BlockState$Type, world: $LevelReader$Type, pos: $BlockPos$Type): boolean
public "getShape"(state: $BlockState$Type, world: $BlockGetter$Type, pos: $BlockPos$Type, context: $CollisionContext$Type): $VoxelShape
public "tick"(state: $BlockState$Type, world: $ServerLevel$Type, pos: $BlockPos$Type, random: $RandomSource$Type): void
public "animateTick"(state: $BlockState$Type, world: $Level$Type, pos: $BlockPos$Type, random: $RandomSource$Type): void
public static "createMiniExplosion"(world: $Level$Type, pos: $BlockPos$Type, alwaysFire: boolean): void
public "isLitUp"(state: $BlockState$Type, level: $BlockGetter$Type, pos: $BlockPos$Type): boolean
public "setLitUp"(state: $BlockState$Type, world: $LevelAccessor$Type, pos: $BlockPos$Type, lit: boolean): void
public "lightUp"(entity: $Entity$Type, state: $BlockState$Type, pos: $BlockPos$Type, world: $LevelAccessor$Type, fireSourceType: $ILightable$FireSourceType$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GunpowderBlock$Type = ($GunpowderBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GunpowderBlock_ = $GunpowderBlock$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/misc/$StasisEnchantment" {
import {$Enchantment, $Enchantment$Type} from "packages/net/minecraft/world/item/enchantment/$Enchantment"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$EnchantmentCategory, $EnchantmentCategory$Type} from "packages/net/minecraft/world/item/enchantment/$EnchantmentCategory"

export class $StasisEnchantment extends $Enchantment {
readonly "category": $EnchantmentCategory

constructor()

public "canApplyAtEnchantingTable"(stack: $ItemStack$Type): boolean
public "getMaxCost"(level: integer): integer
public "getMaxLevel"(): integer
public "getMinCost"(level: integer): integer
public "isTreasureOnly"(): boolean
public "isDiscoverable"(): boolean
public "isAllowedOnBooks"(): boolean
public "isTradeable"(): boolean
public "canEnchant"(stack: $ItemStack$Type): boolean
public "m_5975_"(enchantment: $Enchantment$Type): boolean
get "maxLevel"(): integer
get "treasureOnly"(): boolean
get "discoverable"(): boolean
get "allowedOnBooks"(): boolean
get "tradeable"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $StasisEnchantment$Type = ($StasisEnchantment);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $StasisEnchantment_ = $StasisEnchantment$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/core/set/$BlocksColorInternal" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$HolderSet, $HolderSet$Type} from "packages/net/minecraft/core/$HolderSet"
import {$DyeColor, $DyeColor$Type} from "packages/net/minecraft/world/item/$DyeColor"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$EnumMap, $EnumMap$Type} from "packages/java/util/$EnumMap"

export class $BlocksColorInternal {
static readonly "VANILLA_COLORS": $List<($DyeColor)>
static readonly "MODDED_COLORS": $List<($DyeColor)>

constructor()

public static "getKey"(block: $Block$Type): string
public static "getKey"(item: $Item$Type): string
public static "setup"(): void
public static "getItemKeys"(): $Set<(string)>
public static "registerItemColorSet"(key: $ResourceLocation$Type, items: $EnumMap$Type<($DyeColor$Type), ($Item$Type)>, defaultItem: $Item$Type): void
public static "registerBlockColorSet"(key: $ResourceLocation$Type, blocks: $EnumMap$Type<($DyeColor$Type), ($Block$Type)>, defaultBlock: $Block$Type): void
public static "getColor"(block: $Block$Type): $DyeColor
public static "getColor"(item: $Item$Type): $DyeColor
public static "getColoredItem"(key: string, color: $DyeColor$Type): $Item
public static "getBlockHolderSet"(key: string): $HolderSet<($Block)>
public static "getItemHolderSet"(key: string): $HolderSet<($Item)>
public static "getBlockKeys"(): $Set<(string)>
public static "changeColor"(old: $Block$Type, newColor: $DyeColor$Type): $Block
public static "changeColor"(old: $Item$Type, newColor: $DyeColor$Type): $Item
public static "getColoredBlock"(key: string, color: $DyeColor$Type): $Block
get "itemKeys"(): $Set<(string)>
get "blockKeys"(): $Set<(string)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BlocksColorInternal$Type = ($BlocksColorInternal);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BlocksColorInternal_ = $BlocksColorInternal$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$EndermanSkullBlockTile" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$SkullBlockEntity, $SkullBlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$SkullBlockEntity"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $EndermanSkullBlockTile extends $SkullBlockEntity {
static readonly "TAG_SKULL_OWNER": string
static readonly "TAG_NOTE_BLOCK_SOUND": string
 "blockState": $BlockState

constructor(blockPos: $BlockPos$Type, blockState: $BlockState$Type)

public static "tick"(level: $Level$Type, pos: $BlockPos$Type, state: $BlockState$Type, tile: $EndermanSkullBlockTile$Type): void
public "getType"(): $BlockEntityType<(any)>
public "load"(tag: $CompoundTag$Type): void
public "getMouthAnimation"(partialTicks: float): float
public static "isBeingWatched"(level: $Level$Type, pos: $BlockPos$Type, state: $BlockState$Type): boolean
public "getNoteBlockSound"(): $ResourceLocation
get "type"(): $BlockEntityType<(any)>
get "noteBlockSound"(): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EndermanSkullBlockTile$Type = ($EndermanSkullBlockTile);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EndermanSkullBlockTile_ = $EndermanSkullBlockTile$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/blocks/$GoldDoorBlock" {
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$EnumProperty, $EnumProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$EnumProperty"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$DoorBlock, $DoorBlock$Type} from "packages/net/minecraft/world/level/block/$DoorBlock"
import {$DoorHingeSide, $DoorHingeSide$Type} from "packages/net/minecraft/world/level/block/state/properties/$DoorHingeSide"
import {$DoubleBlockHalf, $DoubleBlockHalf$Type} from "packages/net/minecraft/world/level/block/state/properties/$DoubleBlockHalf"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"
import {$DirectionProperty, $DirectionProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$DirectionProperty"

export class $GoldDoorBlock extends $DoorBlock {
static readonly "FACING": $DirectionProperty
static readonly "OPEN": $BooleanProperty
static readonly "HINGE": $EnumProperty<($DoorHingeSide)>
static readonly "POWERED": $BooleanProperty
static readonly "HALF": $EnumProperty<($DoubleBlockHalf)>
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(builder: $BlockBehaviour$Properties$Type)

public "getStateForPlacement"(context: $BlockPlaceContext$Type): $BlockState
public "neighborChanged"(state: $BlockState$Type, worldIn: $Level$Type, pos: $BlockPos$Type, blockIn: $Block$Type, fromPos: $BlockPos$Type, isMoving: boolean): void
public "use"(state: $BlockState$Type, level: $Level$Type, pos: $BlockPos$Type, player: $Player$Type, handIn: $InteractionHand$Type, hit: $BlockHitResult$Type): $InteractionResult
public static "tryOpenDoubleDoorKey"(world: $Level$Type, state: $BlockState$Type, pos: $BlockPos$Type, player: $Player$Type, hand: $InteractionHand$Type): void
public "canBeOpened"(state: $BlockState$Type): boolean
public static "tryOpenDoubleDoor"(world: $Level$Type, state: $BlockState$Type, pos: $BlockPos$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GoldDoorBlock$Type = ($GoldDoorBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GoldDoorBlock_ = $GoldDoorBlock$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/tooltip/$PaintingTooltipComponent" {
import {$TooltipComponent, $TooltipComponent$Type} from "packages/net/minecraft/world/inventory/tooltip/$TooltipComponent"
import {$FormattedCharSequence, $FormattedCharSequence$Type} from "packages/net/minecraft/util/$FormattedCharSequence"
import {$Font, $Font$Type} from "packages/net/minecraft/client/gui/$Font"
import {$MultiBufferSource$BufferSource, $MultiBufferSource$BufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource$BufferSource"
import {$PaintingTooltip, $PaintingTooltip$Type} from "packages/net/mehvahdjukaar/supplementaries/common/items/tooltip_components/$PaintingTooltip"
import {$Matrix4f, $Matrix4f$Type} from "packages/org/joml/$Matrix4f"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$ClientTooltipComponent, $ClientTooltipComponent$Type} from "packages/net/minecraft/client/gui/screens/inventory/tooltip/$ClientTooltipComponent"

export class $PaintingTooltipComponent implements $ClientTooltipComponent {

constructor(tooltip: $PaintingTooltip$Type)

public "getWidth"(pFont: $Font$Type): integer
public "getHeight"(): integer
public "renderImage"(pFont: $Font$Type, x: integer, y: integer, graphics: $GuiGraphics$Type): void
public static "create"(arg0: $TooltipComponent$Type): $ClientTooltipComponent
public "renderText"(arg0: $Font$Type, arg1: integer, arg2: integer, arg3: $Matrix4f$Type, arg4: $MultiBufferSource$BufferSource$Type): void
public static "create"(arg0: $FormattedCharSequence$Type): $ClientTooltipComponent
get "height"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PaintingTooltipComponent$Type = ($PaintingTooltipComponent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PaintingTooltipComponent_ = $PaintingTooltipComponent$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$BubbleBlockTile" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $BubbleBlockTile extends $BlockEntity {
 "blockState": $BlockState

constructor(pos: $BlockPos$Type, state: $BlockState$Type)

public static "tick"(pLevel: $Level$Type, pPos: $BlockPos$Type, pState: $BlockState$Type, tile: $BubbleBlockTile$Type): void
public "getScale"(partialTicks: float): float
public "load"(pTag: $CompoundTag$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BubbleBlockTile$Type = ($BubbleBlockTile);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BubbleBlockTile_ = $BubbleBlockTile$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/core/misc/$DummyWorld" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$Fluid, $Fluid$Type} from "packages/net/minecraft/world/level/material/$Fluid"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$LevelTickAccess, $LevelTickAccess$Type} from "packages/net/minecraft/world/ticks/$LevelTickAccess"
import {$FeatureFlagSet, $FeatureFlagSet$Type} from "packages/net/minecraft/world/flag/$FeatureFlagSet"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$BiFunction, $BiFunction$Type} from "packages/java/util/function/$BiFunction"
import {$Codec, $Codec$Type} from "packages/com/mojang/serialization/$Codec"
import {$SoundSource, $SoundSource$Type} from "packages/net/minecraft/sounds/$SoundSource"
import {$TickingBlockEntity, $TickingBlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$TickingBlockEntity"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$List, $List$Type} from "packages/java/util/$List"
import {$MapItemSavedData, $MapItemSavedData$Type} from "packages/net/minecraft/world/level/saveddata/maps/$MapItemSavedData"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$Biome, $Biome$Type} from "packages/net/minecraft/world/level/biome/$Biome"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$GameEvent$Context, $GameEvent$Context$Type} from "packages/net/minecraft/world/level/gameevent/$GameEvent$Context"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$BlockSnapshot, $BlockSnapshot$Type} from "packages/net/minecraftforge/common/util/$BlockSnapshot"
import {$LevelHeightAccessor, $LevelHeightAccessor$Type} from "packages/net/minecraft/world/level/$LevelHeightAccessor"
import {$ChunkSource, $ChunkSource$Type} from "packages/net/minecraft/world/level/chunk/$ChunkSource"
import {$Scoreboard, $Scoreboard$Type} from "packages/net/minecraft/world/scores/$Scoreboard"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$RegistryAccess, $RegistryAccess$Type} from "packages/net/minecraft/core/$RegistryAccess"
import {$Holder, $Holder$Type} from "packages/net/minecraft/core/$Holder"
import {$RecipeManager, $RecipeManager$Type} from "packages/net/minecraft/world/item/crafting/$RecipeManager"
import {$GameEvent, $GameEvent$Type} from "packages/net/minecraft/world/level/gameevent/$GameEvent"
import {$ArrayList, $ArrayList$Type} from "packages/java/util/$ArrayList"
import {$ResourceKey, $ResourceKey$Type} from "packages/net/minecraft/resources/$ResourceKey"

export class $DummyWorld extends $Level {
static readonly "RESOURCE_KEY_CODEC": $Codec<($ResourceKey<($Level)>)>
static readonly "OVERWORLD": $ResourceKey<($Level)>
static readonly "NETHER": $ResourceKey<($Level)>
static readonly "END": $ResourceKey<($Level)>
static readonly "MAX_LEVEL_SIZE": integer
static readonly "LONG_PARTICLE_CLIP_RANGE": integer
static readonly "SHORT_PARTICLE_CLIP_RANGE": integer
static readonly "MAX_BRIGHTNESS": integer
static readonly "TICKS_PER_DAY": integer
static readonly "MAX_ENTITY_SPAWN_Y": integer
static readonly "MIN_ENTITY_SPAWN_Y": integer
readonly "blockEntityTickers": $List<($TickingBlockEntity)>
 "oRainLevel": float
 "rainLevel": float
 "oThunderLevel": float
 "thunderLevel": float
readonly "random": $RandomSource
readonly "isClientSide": boolean
 "restoringBlockSnapshots": boolean
 "captureBlockSnapshots": boolean
 "capturedBlockSnapshots": $ArrayList<($BlockSnapshot)>


public static "getCachedInstance"(): $DummyWorld
public static "getCachedInstance"<T extends $DummyWorld>(id: string, arg1: $Supplier$Type<(T)>): T
/**
 * 
 * @deprecated
 */
public static "getInstance"(): $DummyWorld
public "getChunkSource"(): $ChunkSource
public "getScoreboard"(): $Scoreboard
public "playSeededSound"(player: $Player$Type, d: double, e: double, f: double, holder: $Holder$Type<($SoundEvent$Type)>, soundSource: $SoundSource$Type, g: float, h: float, l: long): void
public "playSeededSound"(player: $Player$Type, x: double, y: double, z: double, soundEvent: $SoundEvent$Type, soundSource: $SoundSource$Type, p_220369_: float, p_220370_: float, p_220371_: long): void
public "playSeededSound"(player: $Player$Type, entity: $Entity$Type, holder: $Holder$Type<($SoundEvent$Type)>, soundSource: $SoundSource$Type, f: float, g: float, l: long): void
public "playSound"(player: $Player$Type, entity: $Entity$Type, sound: $SoundEvent$Type, category: $SoundSource$Type, volume: float, pitch: float): void
public "gatherChunkSourceStats"(): string
public "getEntity"(id: integer): $Entity
public "getMapData"(id: string): $MapItemSavedData
public "setMapData"(pMapId: string, pData: $MapItemSavedData$Type): void
public "getFreeMapId"(): integer
public "destroyBlockProgress"(entityId: integer, pos: $BlockPos$Type, progress: integer): void
public "getRecipeManager"(): $RecipeManager
public "getBlockTicks"(): $LevelTickAccess<($Block)>
public "getFluidTicks"(): $LevelTickAccess<($Fluid)>
public "gameEvent"(pEntity: $Entity$Type, pEvent: $GameEvent$Type, pPos: $BlockPos$Type): void
public "getUncachedNoiseBiome"(x: integer, y: integer, z: integer): $Holder<($Biome)>
public "getShade"(direction: $Direction$Type, shaded: boolean): float
public "levelEvent"(player: $Player$Type, eventId: integer, pos: $BlockPos$Type, data: integer): void
public static "clearInstance"(): void
public "registryAccess"(): $RegistryAccess
public "playSound"(player: $Player$Type, x: double, y: double, z: double, sound: $SoundEvent$Type, category: $SoundSource$Type, volume: float, pitch: float): void
public "gameEvent"(p_220404_: $GameEvent$Type, p_220405_: $Vec3$Type, p_220406_: $GameEvent$Context$Type): void
public "players"(): $List<(any)>
public "enabledFeatures"(): $FeatureFlagSet
public "sendBlockUpdated"(pos: $BlockPos$Type, oldState: $BlockState$Type, newState: $BlockState$Type, flags: integer): void
public static "create"(arg0: integer, arg1: integer): $LevelHeightAccessor
public static "traverseBlocks"<T, C>(arg0: $Vec3$Type, arg1: $Vec3$Type, arg2: C, arg3: $BiFunction$Type<(C), ($BlockPos$Type), (T)>, arg4: $Function$Type<(C), (T)>): T
get "cachedInstance"(): $DummyWorld
get "instance"(): $DummyWorld
get "chunkSource"(): $ChunkSource
get "scoreboard"(): $Scoreboard
get "freeMapId"(): integer
get "recipeManager"(): $RecipeManager
get "blockTicks"(): $LevelTickAccess<($Block)>
get "fluidTicks"(): $LevelTickAccess<($Fluid)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DummyWorld$Type = ($DummyWorld);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DummyWorld_ = $DummyWorld$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/worldgen/$RoadSignFeature$RandomState" {
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$Codec, $Codec$Type} from "packages/com/mojang/serialization/$Codec"

export class $RoadSignFeature$RandomState extends $Record {
static readonly "CODEC": $Codec<($RoadSignFeature$RandomState)>


public "equals"(o: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "logChance"(): float
public "wallLanternChance"(): float
public "stoneChance"(): float
public "doubleSignChance"(): float
public "stoneLanternChance"(): float
public "candleHolderChance"(): float
public "trapdoorChance"(): float
public "doubleLanternChance"(): float
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RoadSignFeature$RandomState$Type = ($RoadSignFeature$RandomState);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RoadSignFeature$RandomState_ = $RoadSignFeature$RandomState$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/misc/mob_container/$IMobContainerProvider" {
import {$MobContainer, $MobContainer$Type} from "packages/net/mehvahdjukaar/supplementaries/common/misc/mob_container/$MobContainer"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"

export interface $IMobContainerProvider {

 "getMobContainer"(): $MobContainer
 "getDirection"(): $Direction

(): $MobContainer
}

export namespace $IMobContainerProvider {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IMobContainerProvider$Type = ($IMobContainerProvider);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IMobContainerProvider_ = $IMobContainerProvider$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/items/$BubbleBlowerItem" {
import {$HumanoidArm, $HumanoidArm$Type} from "packages/net/minecraft/world/entity/$HumanoidArm"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$HumanoidModel, $HumanoidModel$Type} from "packages/net/minecraft/client/model/$HumanoidModel"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$IFirstPersonAnimationProvider, $IFirstPersonAnimationProvider$Type} from "packages/net/mehvahdjukaar/moonlight/api/item/$IFirstPersonAnimationProvider"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$InteractionResultHolder, $InteractionResultHolder$Type} from "packages/net/minecraft/world/$InteractionResultHolder"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$Enchantment, $Enchantment$Type} from "packages/net/minecraft/world/item/enchantment/$Enchantment"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$List, $List$Type} from "packages/java/util/$List"
import {$IThirdPersonAnimationProvider, $IThirdPersonAnimationProvider$Type} from "packages/net/mehvahdjukaar/moonlight/api/item/$IThirdPersonAnimationProvider"
import {$UseAnim, $UseAnim$Type} from "packages/net/minecraft/world/item/$UseAnim"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $BubbleBlowerItem extends $Item implements $IThirdPersonAnimationProvider, $IFirstPersonAnimationProvider {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(properties: $Item$Properties$Type)

public "animateHands"<T extends $LivingEntity>(model: $HumanoidModel$Type<(T)>, entity: T, leftHand: boolean): void
public "canApplyAtEnchantingTable"(stack: $ItemStack$Type, enchantment: $Enchantment$Type): boolean
public "getUseDuration"(stack: $ItemStack$Type): integer
public "onUseTick"(level: $Level$Type, entity: $LivingEntity$Type, stack: $ItemStack$Type, remainingUseDuration: integer): void
public "use"(level: $Level$Type, player: $Player$Type, hand: $InteractionHand$Type): $InteractionResultHolder<($ItemStack)>
public "getBarColor"(stack: $ItemStack$Type): integer
public "isBarVisible"(stack: $ItemStack$Type): boolean
public "appendHoverText"(stack: $ItemStack$Type, worldIn: $Level$Type, tooltip: $List$Type<($Component$Type)>, flagIn: $TooltipFlag$Type): void
public "getUseAnimation"(stack: $ItemStack$Type): $UseAnim
public "getEnchantmentValue"(): integer
public "isRepairable"(stack: $ItemStack$Type): boolean
public "isEnchantable"(stack: $ItemStack$Type): boolean
public "isValidRepairItem"(toRepair: $ItemStack$Type, repair: $ItemStack$Type): boolean
public "isBookEnchantable"(stack: $ItemStack$Type, book: $ItemStack$Type): boolean
public "animateItemFirstPerson"(entity: $LivingEntity$Type, stack: $ItemStack$Type, hand: $InteractionHand$Type, matrixStack: $PoseStack$Type, partialTicks: float, pitch: float, attackAnim: float, handHeight: float): void
public "poseLeftArm"<T extends $LivingEntity>(stack: $ItemStack$Type, model: $HumanoidModel$Type<(T)>, entity: T, mainHand: $HumanoidArm$Type): boolean
public "poseRightArm"<T extends $LivingEntity>(stack: $ItemStack$Type, model: $HumanoidModel$Type<(T)>, entity: T, mainHand: $HumanoidArm$Type): boolean
public static "get"(target: $Item$Type): $IThirdPersonAnimationProvider
public static "attachToItem"(target: $Item$Type, object: $IThirdPersonAnimationProvider$Type): void
public "isTwoHanded"(): boolean
public static "attachToItem"(target: $Item$Type, object: $IFirstPersonAnimationProvider$Type): void
public "animateItemFirstPerson"(entity: $Player$Type, stack: $ItemStack$Type, hand: $InteractionHand$Type, arm: $HumanoidArm$Type, poseStack: $PoseStack$Type, partialTicks: float, pitch: float, attackAnim: float, handHeight: float): void
get "enchantmentValue"(): integer
get "twoHanded"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BubbleBlowerItem$Type = ($BubbleBlowerItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BubbleBlowerItem_ = $BubbleBlowerItem$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/$IKeyLockable$KeyStatus" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $IKeyLockable$KeyStatus extends $Enum<($IKeyLockable$KeyStatus)> {
static readonly "CORRECT_KEY": $IKeyLockable$KeyStatus
static readonly "INCORRECT_KEY": $IKeyLockable$KeyStatus
static readonly "NO_KEY": $IKeyLockable$KeyStatus


public static "values"(): ($IKeyLockable$KeyStatus)[]
public static "valueOf"(name: string): $IKeyLockable$KeyStatus
public "isCorrect"(): boolean
get "correct"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IKeyLockable$KeyStatus$Type = (("correct_key") | ("incorrect_key") | ("no_key")) | ($IKeyLockable$KeyStatus);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IKeyLockable$KeyStatus_ = $IKeyLockable$KeyStatus$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/blocks/$JarBlock" {
import {$IntegerProperty, $IntegerProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$IntegerProperty"
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$EntityBlock, $EntityBlock$Type} from "packages/net/minecraft/world/level/block/$EntityBlock"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$JarBlockTile, $JarBlockTile$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$JarBlockTile"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Mirror, $Mirror$Type} from "packages/net/minecraft/world/level/block/$Mirror"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$WaterBlock, $WaterBlock$Type} from "packages/net/mehvahdjukaar/moonlight/api/block/$WaterBlock"
import {$List, $List$Type} from "packages/java/util/$List"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"
import {$DirectionProperty, $DirectionProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$DirectionProperty"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$CollisionContext, $CollisionContext$Type} from "packages/net/minecraft/world/phys/shapes/$CollisionContext"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$LootParams$Builder, $LootParams$Builder$Type} from "packages/net/minecraft/world/level/storage/loot/$LootParams$Builder"
import {$Rotation, $Rotation$Type} from "packages/net/minecraft/world/level/block/$Rotation"
import {$MenuProvider, $MenuProvider$Type} from "packages/net/minecraft/world/$MenuProvider"
import {$BlockEntityTicker, $BlockEntityTicker$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityTicker"
import {$GameEventListener, $GameEventListener$Type} from "packages/net/minecraft/world/level/gameevent/$GameEventListener"
import {$RenderShape, $RenderShape$Type} from "packages/net/minecraft/world/level/block/$RenderShape"

export class $JarBlock extends $WaterBlock implements $EntityBlock {
static readonly "SHAPE": $VoxelShape
static readonly "FACING": $DirectionProperty
static readonly "LIGHT_LEVEL": $IntegerProperty
static readonly "WATERLOGGED": $BooleanProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(properties: $BlockBehaviour$Properties$Type)

public "getTicker"<T extends $BlockEntity>(pLevel: $Level$Type, pState: $BlockState$Type, pBlockEntityType: $BlockEntityType$Type<(T)>): $BlockEntityTicker<(T)>
public "getStateForPlacement"(context: $BlockPlaceContext$Type): $BlockState
public "setPlacedBy"(worldIn: $Level$Type, pos: $BlockPos$Type, state: $BlockState$Type, placer: $LivingEntity$Type, stack: $ItemStack$Type): void
public "getCloneItemStack"(level: $BlockGetter$Type, pos: $BlockPos$Type, state: $BlockState$Type): $ItemStack
public "getBeaconColorMultiplier"(state: $BlockState$Type, world: $LevelReader$Type, pos: $BlockPos$Type, beaconPos: $BlockPos$Type): (float)[]
public "getJarItem"(te: $JarBlockTile$Type): $ItemStack
public "getJarLiquidColor"(pos: $BlockPos$Type, world: $LevelReader$Type): integer
public "use"(state: $BlockState$Type, worldIn: $Level$Type, pos: $BlockPos$Type, player: $Player$Type, handIn: $InteractionHand$Type, hit: $BlockHitResult$Type): $InteractionResult
public "getRenderShape"(state: $BlockState$Type): $RenderShape
public "hasAnalogOutputSignal"(state: $BlockState$Type): boolean
public "rotate"(state: $BlockState$Type, rot: $Rotation$Type): $BlockState
public "mirror"(state: $BlockState$Type, mirrorIn: $Mirror$Type): $BlockState
public "getDrops"(state: $BlockState$Type, builder: $LootParams$Builder$Type): $List<($ItemStack)>
public "getMenuProvider"(state: $BlockState$Type, worldIn: $Level$Type, pos: $BlockPos$Type): $MenuProvider
public "getAnalogOutputSignal"(blockState: $BlockState$Type, world: $Level$Type, pos: $BlockPos$Type): integer
public "getShape"(state: $BlockState$Type, world: $BlockGetter$Type, pos: $BlockPos$Type, context: $CollisionContext$Type): $VoxelShape
public "newBlockEntity"(pPos: $BlockPos$Type, pState: $BlockState$Type): $BlockEntity
public "getListener"<T extends $BlockEntity>(arg0: $ServerLevel$Type, arg1: T): $GameEventListener
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $JarBlock$Type = ($JarBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $JarBlock_ = $JarBlock$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$PedestalBlockTile$DisplayType" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $PedestalBlockTile$DisplayType extends $Enum<($PedestalBlockTile$DisplayType)> {
static readonly "ITEM": $PedestalBlockTile$DisplayType
static readonly "BLOCK": $PedestalBlockTile$DisplayType
static readonly "SWORD": $PedestalBlockTile$DisplayType
static readonly "TRIDENT": $PedestalBlockTile$DisplayType
static readonly "CRYSTAL": $PedestalBlockTile$DisplayType
static readonly "GLOBE": $PedestalBlockTile$DisplayType
static readonly "SEPIA_GLOBE": $PedestalBlockTile$DisplayType


public static "values"(): ($PedestalBlockTile$DisplayType)[]
public static "valueOf"(name: string): $PedestalBlockTile$DisplayType
public "isGlobe"(): boolean
get "globe"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PedestalBlockTile$DisplayType$Type = (("sword") | ("item") | ("trident") | ("globe") | ("crystal") | ("block") | ("sepia_globe")) | ($PedestalBlockTile$DisplayType);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PedestalBlockTile$DisplayType_ = $PedestalBlockTile$DisplayType$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/blocks/$PancakeBlock" {
import {$IntegerProperty, $IntegerProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$IntegerProperty"
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$SoftFluidStack, $SoftFluidStack$Type} from "packages/net/mehvahdjukaar/moonlight/api/fluids/$SoftFluidStack"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$ModBlockProperties$Topping, $ModBlockProperties$Topping$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/$ModBlockProperties$Topping"
import {$WaterBlock, $WaterBlock$Type} from "packages/net/mehvahdjukaar/moonlight/api/block/$WaterBlock"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"
import {$ISoftFluidConsumer, $ISoftFluidConsumer$Type} from "packages/net/mehvahdjukaar/moonlight/api/block/$ISoftFluidConsumer"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$CollisionContext, $CollisionContext$Type} from "packages/net/minecraft/world/phys/shapes/$CollisionContext"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$EnumProperty, $EnumProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$EnumProperty"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"

export class $PancakeBlock extends $WaterBlock implements $ISoftFluidConsumer {
static readonly "PANCAKES": $IntegerProperty
static readonly "TOPPING": $EnumProperty<($ModBlockProperties$Topping)>
static readonly "WATERLOGGED": $BooleanProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(properties: $BlockBehaviour$Properties$Type)

public "getStateForPlacement"(context: $BlockPlaceContext$Type): $BlockState
public "tryAcceptingFluid"(world: $Level$Type, state: $BlockState$Type, pos: $BlockPos$Type, fluid: $SoftFluidStack$Type): boolean
public "updateShape"(stateIn: $BlockState$Type, facing: $Direction$Type, facingState: $BlockState$Type, worldIn: $LevelAccessor$Type, currentPos: $BlockPos$Type, facingPos: $BlockPos$Type): $BlockState
public "use"(state: $BlockState$Type, worldIn: $Level$Type, pos: $BlockPos$Type, player: $Player$Type, handIn: $InteractionHand$Type, hit: $BlockHitResult$Type): $InteractionResult
public "canBeReplaced"(state: $BlockState$Type, useContext: $BlockPlaceContext$Type): boolean
public "canSurvive"(state: $BlockState$Type, worldIn: $LevelReader$Type, pos: $BlockPos$Type): boolean
public "getShape"(state: $BlockState$Type, worldIn: $BlockGetter$Type, pos: $BlockPos$Type, context: $CollisionContext$Type): $VoxelShape
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PancakeBlock$Type = ($PancakeBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PancakeBlock_ = $PancakeBlock$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/client/model/$ToolHookBakedModel" {
import {$ModelData, $ModelData$Type} from "packages/net/minecraftforge/client/model/data/$ModelData"
import {$ModelState, $ModelState$Type} from "packages/net/minecraft/client/resources/model/$ModelState"
import {$ItemTransforms, $ItemTransforms$Type} from "packages/net/minecraft/client/renderer/block/model/$ItemTransforms"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$ExtraModelData, $ExtraModelData$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$ExtraModelData"
import {$CustomBakedModel, $CustomBakedModel$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$CustomBakedModel"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BakedModel, $BakedModel$Type} from "packages/net/minecraft/client/resources/model/$BakedModel"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$RenderType, $RenderType$Type} from "packages/net/minecraft/client/renderer/$RenderType"
import {$ItemOverrides, $ItemOverrides$Type} from "packages/net/minecraft/client/renderer/block/model/$ItemOverrides"
import {$ItemDisplayContext, $ItemDisplayContext$Type} from "packages/net/minecraft/world/item/$ItemDisplayContext"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$List, $List$Type} from "packages/java/util/$List"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$ChunkRenderTypeSet, $ChunkRenderTypeSet$Type} from "packages/net/minecraftforge/client/$ChunkRenderTypeSet"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockAndTintGetter, $BlockAndTintGetter$Type} from "packages/net/minecraft/world/level/$BlockAndTintGetter"
import {$BakedQuad, $BakedQuad$Type} from "packages/net/minecraft/client/renderer/block/model/$BakedQuad"
import {$TextureAtlasSprite, $TextureAtlasSprite$Type} from "packages/net/minecraft/client/renderer/texture/$TextureAtlasSprite"

export class $ToolHookBakedModel implements $CustomBakedModel {

constructor(tripwireHook: $BakedModel$Type, state: $ModelState$Type)

public "usesBlockLight"(): boolean
public "isGui3d"(): boolean
public "getBlockQuads"(state: $BlockState$Type, side: $Direction$Type, rand: $RandomSource$Type, renderType: $RenderType$Type, data: $ExtraModelData$Type): $List<($BakedQuad)>
public "getBlockParticle"(data: $ExtraModelData$Type): $TextureAtlasSprite
public "isCustomRenderer"(): boolean
public "getOverrides"(): $ItemOverrides
public "getTransforms"(): $ItemTransforms
public "useAmbientOcclusion"(): boolean
public "getParticleIcon"(): $TextureAtlasSprite
public "getQuads"(state: $BlockState$Type, side: $Direction$Type, rand: $RandomSource$Type): $List<(any)>
public "getQuads"(state: $BlockState$Type, side: $Direction$Type, rand: $RandomSource$Type, modelData: $ModelData$Type, type: $RenderType$Type): $List<(any)>
public "getParticleIcon"(data: $ModelData$Type): $TextureAtlasSprite
public "getModelData"(level: $BlockAndTintGetter$Type, pos: $BlockPos$Type, state: $BlockState$Type, modelData: $ModelData$Type): $ModelData
public "getModelData"(originalData: $ExtraModelData$Type, stack: $ItemStack$Type): $ExtraModelData
public "getModelData"(tileData: $ExtraModelData$Type, pos: $BlockPos$Type, state: $BlockState$Type, level: $BlockAndTintGetter$Type): $ExtraModelData
public "useAmbientOcclusion"(arg0: $BlockState$Type, arg1: $RenderType$Type): boolean
public "useAmbientOcclusion"(arg0: $BlockState$Type): boolean
public "getRenderTypes"(arg0: $ItemStack$Type, arg1: boolean): $List<($RenderType)>
public "getRenderTypes"(arg0: $BlockState$Type, arg1: $RandomSource$Type, arg2: $ModelData$Type): $ChunkRenderTypeSet
public "getRenderPasses"(arg0: $ItemStack$Type, arg1: boolean): $List<($BakedModel)>
public "applyTransform"(arg0: $ItemDisplayContext$Type, arg1: $PoseStack$Type, arg2: boolean): $BakedModel
public "useAmbientOcclusionWithLightEmission"(arg0: $BlockState$Type, arg1: $RenderType$Type): boolean
get "gui3d"(): boolean
get "customRenderer"(): boolean
get "overrides"(): $ItemOverrides
get "transforms"(): $ItemTransforms
get "particleIcon"(): $TextureAtlasSprite
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ToolHookBakedModel$Type = ($ToolHookBakedModel);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ToolHookBakedModel_ = $ToolHookBakedModel$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/network/$ClientBoundSyncSongsPacket" {
import {$Song, $Song$Type} from "packages/net/mehvahdjukaar/supplementaries/common/misc/songs/$Song"
import {$Message, $Message$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/network/$Message"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$ChannelHandler$Context, $ChannelHandler$Context$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/network/$ChannelHandler$Context"

export class $ClientBoundSyncSongsPacket implements $Message {

constructor(songs: $Collection$Type<($Song$Type)>)
constructor(buf: $FriendlyByteBuf$Type)

public "handle"(context: $ChannelHandler$Context$Type): void
public "writeToBuffer"(buf: $FriendlyByteBuf$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientBoundSyncSongsPacket$Type = ($ClientBoundSyncSongsPacket);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientBoundSyncSongsPacket_ = $ClientBoundSyncSongsPacket$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/inventories/$CannonContainerMenu" {
import {$CannonBlockTile, $CannonBlockTile$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$CannonBlockTile"
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$IContainerProvider, $IContainerProvider$Type} from "packages/net/mehvahdjukaar/moonlight/api/misc/$IContainerProvider"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$AbstractContainerMenu, $AbstractContainerMenu$Type} from "packages/net/minecraft/world/inventory/$AbstractContainerMenu"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MenuType, $MenuType$Type} from "packages/net/minecraft/world/inventory/$MenuType"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"

export class $CannonContainerMenu extends $AbstractContainerMenu implements $IContainerProvider {
static readonly "SLOT_CLICKED_OUTSIDE": integer
static readonly "QUICKCRAFT_TYPE_CHARITABLE": integer
static readonly "QUICKCRAFT_TYPE_GREEDY": integer
static readonly "QUICKCRAFT_TYPE_CLONE": integer
static readonly "QUICKCRAFT_HEADER_START": integer
static readonly "QUICKCRAFT_HEADER_CONTINUE": integer
static readonly "QUICKCRAFT_HEADER_END": integer
static readonly "CARRIED_SLOT_SIZE": integer
readonly "lastSlots": $NonNullList<($ItemStack)>
readonly "slots": $NonNullList<($Slot)>
 "remoteSlots": $NonNullList<($ItemStack)>
 "containerId": integer

constructor<T extends $CannonContainerMenu>(type: $MenuType$Type<(T)>, id: integer, playerInventory: $Inventory$Type, inventory: $CannonBlockTile$Type)
constructor(id: integer, playerInventory: $Inventory$Type, packetBuffer: $FriendlyByteBuf$Type)
constructor<T extends $CannonContainerMenu>(id: integer, playerInventory: $Inventory$Type, inventory: $CannonBlockTile$Type)

public "stillValid"(playerIn: $Player$Type): boolean
public "removed"(playerIn: $Player$Type): void
public "quickMoveStack"(player: $Player$Type, index: integer): $ItemStack
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CannonContainerMenu$Type = ($CannonContainerMenu);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CannonContainerMenu_ = $CannonContainerMenu$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/utils/$MiscUtils" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$MiscUtils$Festivity, $MiscUtils$Festivity$Type} from "packages/net/mehvahdjukaar/supplementaries/common/utils/$MiscUtils$Festivity"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$AABB, $AABB$Type} from "packages/net/minecraft/world/phys/$AABB"

export class $MiscUtils {
static readonly "FESTIVITY": $MiscUtils$Festivity

constructor()

public static "isAllowedInShulker"(stack: $ItemStack$Type, level: $Level$Type): boolean
public static "showsHints"(worldIn: $BlockGetter$Type, flagIn: $TooltipFlag$Type): boolean
public static "isSword"(i: $Item$Type): boolean
public static "isTool"(i: $Item$Type): boolean
public static "getDirectionBB"(pos: $BlockPos$Type, facing: $Direction$Type, offset: integer): $AABB
public static "withinDistanceDown"(pos: $BlockPos$Type, vector: $Vec3$Type, distW: double, distDown: double): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MiscUtils$Type = ($MiscUtils);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MiscUtils_ = $MiscUtils$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/network/$ServerBoundCycleQuiverPacket" {
import {$ServerBoundCycleQuiverPacket$Slot, $ServerBoundCycleQuiverPacket$Slot$Type} from "packages/net/mehvahdjukaar/supplementaries/common/network/$ServerBoundCycleQuiverPacket$Slot"
import {$Message, $Message$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/network/$Message"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$ChannelHandler$Context, $ChannelHandler$Context$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/network/$ChannelHandler$Context"

export class $ServerBoundCycleQuiverPacket implements $Message {

constructor(amount: integer, slot: $ServerBoundCycleQuiverPacket$Slot$Type)
constructor(amount: integer, slot: $ServerBoundCycleQuiverPacket$Slot$Type, setSlot: boolean)
constructor(buf: $FriendlyByteBuf$Type)

public "handle"(context: $ChannelHandler$Context$Type): void
public "writeToBuffer"(buf: $FriendlyByteBuf$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ServerBoundCycleQuiverPacket$Type = ($ServerBoundCycleQuiverPacket);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ServerBoundCycleQuiverPacket_ = $ServerBoundCycleQuiverPacket$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/network/$ClientBoundParticlePacket" {
import {$Message, $Message$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/network/$Message"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$ChannelHandler$Context, $ChannelHandler$Context$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/network/$ChannelHandler$Context"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$ClientBoundParticlePacket$EventType, $ClientBoundParticlePacket$EventType$Type} from "packages/net/mehvahdjukaar/supplementaries/common/network/$ClientBoundParticlePacket$EventType"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $ClientBoundParticlePacket implements $Message {
readonly "id": $ClientBoundParticlePacket$EventType
readonly "pos": $Vec3
readonly "extraData": integer

constructor(entity: $Entity$Type, id: $ClientBoundParticlePacket$EventType$Type)
constructor(pos: $Vec3$Type, id: $ClientBoundParticlePacket$EventType$Type, extraData: integer)
constructor(pos: $Vec3$Type, id: $ClientBoundParticlePacket$EventType$Type)
constructor(pos: $BlockPos$Type, id: $ClientBoundParticlePacket$EventType$Type)
constructor(buffer: $FriendlyByteBuf$Type)

public "handle"(context: $ChannelHandler$Context$Type): void
public "writeToBuffer"(buffer: $FriendlyByteBuf$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientBoundParticlePacket$Type = ($ClientBoundParticlePacket);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientBoundParticlePacket_ = $ClientBoundParticlePacket$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/client/anim/$PendulumAnimation$Config" {
import {$Codec, $Codec$Type} from "packages/com/mojang/serialization/$Codec"

export class $PendulumAnimation$Config {
static readonly "CODEC": $Codec<($PendulumAnimation$Config)>

constructor(minAngle: float, maxAngle: float, damping: float, frequency: float, collisionHitbox: boolean, collisionMass: float, collisionForce: float)
constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PendulumAnimation$Config$Type = ($PendulumAnimation$Config);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PendulumAnimation$Config_ = $PendulumAnimation$Config$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/particles/$BottlingXpParticle" {
import {$ParticleRenderType, $ParticleRenderType$Type} from "packages/net/minecraft/client/particle/$ParticleRenderType"
import {$TextureSheetParticle, $TextureSheetParticle$Type} from "packages/net/minecraft/client/particle/$TextureSheetParticle"

export class $BottlingXpParticle extends $TextureSheetParticle {
 "x": double
 "y": double
 "z": double
 "xd": double
 "yd": double
 "zd": double
 "age": integer
 "rCol": float
 "gCol": float
 "bCol": float


public "move"(x: double, y: double, z: double): void
public "getQuadSize"(scaleFactor: float): float
public "getRenderType"(): $ParticleRenderType
public "tick"(): void
get "renderType"(): $ParticleRenderType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BottlingXpParticle$Type = ($BottlingXpParticle);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BottlingXpParticle_ = $BottlingXpParticle$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/client/renderers/$CandleHolderRendererExtension" {
import {$AbstractClientPlayer, $AbstractClientPlayer$Type} from "packages/net/minecraft/client/player/$AbstractClientPlayer"
import {$HeadedModel, $HeadedModel$Type} from "packages/net/minecraft/client/model/$HeadedModel"
import {$HumanoidArm, $HumanoidArm$Type} from "packages/net/minecraft/world/entity/$HumanoidArm"
import {$HumanoidModel, $HumanoidModel$Type} from "packages/net/minecraft/client/model/$HumanoidModel"
import {$ItemInHandRenderer, $ItemInHandRenderer$Type} from "packages/net/minecraft/client/renderer/$ItemInHandRenderer"
import {$IFirstPersonSpecialItemRenderer, $IFirstPersonSpecialItemRenderer$Type} from "packages/net/mehvahdjukaar/moonlight/api/item/$IFirstPersonSpecialItemRenderer"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$ArmedModel, $ArmedModel$Type} from "packages/net/minecraft/client/model/$ArmedModel"
import {$EntityModel, $EntityModel$Type} from "packages/net/minecraft/client/model/$EntityModel"
import {$IThirdPersonAnimationProvider, $IThirdPersonAnimationProvider$Type} from "packages/net/mehvahdjukaar/moonlight/api/item/$IThirdPersonAnimationProvider"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$IThirdPersonSpecialItemRenderer, $IThirdPersonSpecialItemRenderer$Type} from "packages/net/mehvahdjukaar/moonlight/api/item/$IThirdPersonSpecialItemRenderer"

export class $CandleHolderRendererExtension implements $IThirdPersonAnimationProvider, $IThirdPersonSpecialItemRenderer, $IFirstPersonSpecialItemRenderer {

constructor()

public "renderThirdPersonItem"<T extends $Player, M extends ($EntityModel<(T)>) & ($ArmedModel) & ($HeadedModel)>(parentModel: M, entity: $LivingEntity$Type, stack: $ItemStack$Type, humanoidArm: $HumanoidArm$Type, poseStack: $PoseStack$Type, bufferSource: $MultiBufferSource$Type, light: integer): void
public "renderFirstPersonItem"(player: $AbstractClientPlayer$Type, stack: $ItemStack$Type, interactionHand: $InteractionHand$Type, arm: $HumanoidArm$Type, poseStack: $PoseStack$Type, partialTicks: float, pitch: float, attackAnim: float, equipAnim: float, buffer: $MultiBufferSource$Type, light: integer, renderer: $ItemInHandRenderer$Type): boolean
public "poseLeftArm"<T extends $LivingEntity>(itemStack: $ItemStack$Type, model: $HumanoidModel$Type<(T)>, t: T, arm: $HumanoidArm$Type): boolean
public "poseRightArm"<T extends $LivingEntity>(itemStack: $ItemStack$Type, model: $HumanoidModel$Type<(T)>, t: T, arm: $HumanoidArm$Type): boolean
public static "get"(target: $Item$Type): $IThirdPersonAnimationProvider
public static "attachToItem"(target: $Item$Type, object: $IThirdPersonAnimationProvider$Type): void
public "isTwoHanded"(): boolean
public static "attachToItem"(target: $Item$Type, object: $IThirdPersonSpecialItemRenderer$Type): void
public static "attachToItem"(target: $Item$Type, object: $IFirstPersonSpecialItemRenderer$Type): void
get "twoHanded"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CandleHolderRendererExtension$Type = ($CandleHolderRendererExtension);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CandleHolderRendererExtension_ = $CandleHolderRendererExtension$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/fluids/forge/$SoftFluidImpl" {
import {$Fluid, $Fluid$Type} from "packages/net/minecraft/world/level/material/$Fluid"
import {$SoftFluid$Builder, $SoftFluid$Builder$Type} from "packages/net/mehvahdjukaar/moonlight/api/fluids/$SoftFluid$Builder"
import {$Triplet, $Triplet$Type} from "packages/net/mehvahdjukaar/moonlight/api/misc/$Triplet"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $SoftFluidImpl {

constructor()

public static "addFluidSpecificAttributes"(builder: $SoftFluid$Builder$Type, fluid: $Fluid$Type): void
public static "getRenderingData"(useTexturesFrom: $ResourceLocation$Type): $Triplet<($ResourceLocation), ($ResourceLocation), (integer)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SoftFluidImpl$Type = ($SoftFluidImpl);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SoftFluidImpl_ = $SoftFluidImpl$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/block/$IRotatable" {
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Rotation, $Rotation$Type} from "packages/net/minecraft/world/level/block/$Rotation"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export interface $IRotatable {

 "getRotatedState"(arg0: $BlockState$Type, arg1: $LevelAccessor$Type, arg2: $BlockPos$Type, arg3: $Rotation$Type, arg4: $Direction$Type, arg5: $Vec3$Type): $Optional<($BlockState)>
 "rotateOverAxis"(state: $BlockState$Type, world: $LevelAccessor$Type, pos: $BlockPos$Type, rotation: $Rotation$Type, axis: $Direction$Type, hit: $Vec3$Type): $Optional<($Direction)>
 "onRotated"(newState: $BlockState$Type, oldState: $BlockState$Type, world: $LevelAccessor$Type, pos: $BlockPos$Type, rotation: $Rotation$Type, axis: $Direction$Type, hit: $Vec3$Type): void

(arg0: $BlockState$Type, arg1: $LevelAccessor$Type, arg2: $BlockPos$Type, arg3: $Rotation$Type, arg4: $Direction$Type, arg5: $Vec3$Type): $Optional<($BlockState)>
}

export namespace $IRotatable {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IRotatable$Type = ($IRotatable);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IRotatable_ = $IRotatable$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/utils/$CircularList" {
import {$LinkedList, $LinkedList$Type} from "packages/java/util/$LinkedList"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ListIterator, $ListIterator$Type} from "packages/java/util/$ListIterator"
import {$Iterator, $Iterator$Type} from "packages/java/util/$Iterator"

export class $CircularList<T> extends $LinkedList<(T)> {

constructor(size: integer)

public "addFirst"(t: T): void
public "addLast"(t: T): void
public "equals"(arg0: any): boolean
public "hashCode"(): integer
public static "copyOf"<E>(arg0: $Collection$Type<(any)>): $List<(E)>
public "isEmpty"(): boolean
public "subList"(arg0: integer, arg1: integer): $List<(E)>
public "iterator"(): $Iterator<(E)>
public static "of"<E>(arg0: E, arg1: E, arg2: E, arg3: E): $List<(E)>
public static "of"<E>(arg0: E, arg1: E, arg2: E): $List<(E)>
public static "of"<E>(arg0: E, arg1: E): $List<(E)>
public static "of"<E>(arg0: E): $List<(E)>
public static "of"<E>(): $List<(E)>
public static "of"<E>(arg0: E, arg1: E, arg2: E, arg3: E, arg4: E, arg5: E, arg6: E, arg7: E): $List<(E)>
public static "of"<E>(arg0: E, arg1: E, arg2: E, arg3: E, arg4: E, arg5: E, arg6: E): $List<(E)>
public static "of"<E>(arg0: E, arg1: E, arg2: E, arg3: E, arg4: E, arg5: E): $List<(E)>
public static "of"<E>(arg0: E, arg1: E, arg2: E, arg3: E, arg4: E): $List<(E)>
public static "of"<E>(arg0: E, arg1: E, arg2: E, arg3: E, arg4: E, arg5: E, arg6: E, arg7: E, arg8: E, arg9: E): $List<(E)>
public static "of"<E>(arg0: E, arg1: E, arg2: E, arg3: E, arg4: E, arg5: E, arg6: E, arg7: E, arg8: E): $List<(E)>
public static "of"<E>(...arg0: (E)[]): $List<(E)>
public "removeAll"(arg0: $Collection$Type<(any)>): boolean
public "retainAll"(arg0: $Collection$Type<(any)>): boolean
public "listIterator"(): $ListIterator<(E)>
public "containsAll"(arg0: $Collection$Type<(any)>): boolean
get "empty"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CircularList$Type<T> = ($CircularList<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CircularList_<T> = $CircularList$Type<(T)>;
}}
declare module "packages/net/mehvahdjukaar/amendments/reg/$ModBlockProperties$PostType" {
import {$StringRepresentable$EnumCodec, $StringRepresentable$EnumCodec$Type} from "packages/net/minecraft/util/$StringRepresentable$EnumCodec"
import {$StringRepresentable, $StringRepresentable$Type} from "packages/net/minecraft/util/$StringRepresentable"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$Keyable, $Keyable$Type} from "packages/com/mojang/serialization/$Keyable"
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"

export class $ModBlockProperties$PostType extends $Enum<($ModBlockProperties$PostType)> implements $StringRepresentable {
static readonly "POST": $ModBlockProperties$PostType
static readonly "PALISADE": $ModBlockProperties$PostType
static readonly "WALL": $ModBlockProperties$PostType
static readonly "BEAM": $ModBlockProperties$PostType


public "getName"(): string
public static "get"(state: $BlockState$Type): $ModBlockProperties$PostType
public static "get"(state: $BlockState$Type, needsFullHeight: boolean): $ModBlockProperties$PostType
public "toString"(): string
public static "values"(): ($ModBlockProperties$PostType)[]
public static "valueOf"(name: string): $ModBlockProperties$PostType
public "getOffset"(): float
public "getSerializedName"(): string
public "getWidth"(): integer
public static "fromEnumWithMapping"<E extends ($Enum<(E)>) & ($StringRepresentable)>(arg0: $Supplier$Type<((E)[])>, arg1: $Function$Type<(string), (string)>): $StringRepresentable$EnumCodec<(E)>
public static "keys"(arg0: ($StringRepresentable$Type)[]): $Keyable
public static "fromEnum"<E extends ($Enum<(E)>) & ($StringRepresentable)>(arg0: $Supplier$Type<((E)[])>): $StringRepresentable$EnumCodec<(E)>
get "name"(): string
get "offset"(): float
get "serializedName"(): string
get "width"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModBlockProperties$PostType$Type = (("beam") | ("post") | ("palisade") | ("wall")) | ($ModBlockProperties$PostType);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModBlockProperties$PostType_ = $ModBlockProperties$PostType$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/client/model/$CarpetedBlockModel" {
import {$ModelData, $ModelData$Type} from "packages/net/minecraftforge/client/model/data/$ModelData"
import {$ModelState, $ModelState$Type} from "packages/net/minecraft/client/resources/model/$ModelState"
import {$ItemTransforms, $ItemTransforms$Type} from "packages/net/minecraft/client/renderer/block/model/$ItemTransforms"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$ExtraModelData, $ExtraModelData$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$ExtraModelData"
import {$CustomBakedModel, $CustomBakedModel$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$CustomBakedModel"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BakedModel, $BakedModel$Type} from "packages/net/minecraft/client/resources/model/$BakedModel"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$RenderType, $RenderType$Type} from "packages/net/minecraft/client/renderer/$RenderType"
import {$ItemOverrides, $ItemOverrides$Type} from "packages/net/minecraft/client/renderer/block/model/$ItemOverrides"
import {$ItemDisplayContext, $ItemDisplayContext$Type} from "packages/net/minecraft/world/item/$ItemDisplayContext"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$List, $List$Type} from "packages/java/util/$List"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$ChunkRenderTypeSet, $ChunkRenderTypeSet$Type} from "packages/net/minecraftforge/client/$ChunkRenderTypeSet"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockAndTintGetter, $BlockAndTintGetter$Type} from "packages/net/minecraft/world/level/$BlockAndTintGetter"
import {$BakedQuad, $BakedQuad$Type} from "packages/net/minecraft/client/renderer/block/model/$BakedQuad"
import {$TextureAtlasSprite, $TextureAtlasSprite$Type} from "packages/net/minecraft/client/renderer/texture/$TextureAtlasSprite"

export class $CarpetedBlockModel implements $CustomBakedModel {

constructor(carpet: $BakedModel$Type, state: $ModelState$Type)

public "usesBlockLight"(): boolean
public "isGui3d"(): boolean
public "getBlockQuads"(state: $BlockState$Type, side: $Direction$Type, rand: $RandomSource$Type, renderType: $RenderType$Type, data: $ExtraModelData$Type): $List<($BakedQuad)>
public "getBlockParticle"(data: $ExtraModelData$Type): $TextureAtlasSprite
public "isCustomRenderer"(): boolean
public "getOverrides"(): $ItemOverrides
public "getTransforms"(): $ItemTransforms
public "useAmbientOcclusion"(): boolean
public "getParticleIcon"(): $TextureAtlasSprite
public "getQuads"(state: $BlockState$Type, side: $Direction$Type, rand: $RandomSource$Type): $List<(any)>
public "getQuads"(state: $BlockState$Type, side: $Direction$Type, rand: $RandomSource$Type, modelData: $ModelData$Type, type: $RenderType$Type): $List<(any)>
public "getParticleIcon"(data: $ModelData$Type): $TextureAtlasSprite
public "getModelData"(level: $BlockAndTintGetter$Type, pos: $BlockPos$Type, state: $BlockState$Type, modelData: $ModelData$Type): $ModelData
public "getModelData"(originalData: $ExtraModelData$Type, stack: $ItemStack$Type): $ExtraModelData
public "getModelData"(tileData: $ExtraModelData$Type, pos: $BlockPos$Type, state: $BlockState$Type, level: $BlockAndTintGetter$Type): $ExtraModelData
public "useAmbientOcclusion"(arg0: $BlockState$Type, arg1: $RenderType$Type): boolean
public "useAmbientOcclusion"(arg0: $BlockState$Type): boolean
public "getRenderTypes"(arg0: $ItemStack$Type, arg1: boolean): $List<($RenderType)>
public "getRenderTypes"(arg0: $BlockState$Type, arg1: $RandomSource$Type, arg2: $ModelData$Type): $ChunkRenderTypeSet
public "getRenderPasses"(arg0: $ItemStack$Type, arg1: boolean): $List<($BakedModel)>
public "applyTransform"(arg0: $ItemDisplayContext$Type, arg1: $PoseStack$Type, arg2: boolean): $BakedModel
public "useAmbientOcclusionWithLightEmission"(arg0: $BlockState$Type, arg1: $RenderType$Type): boolean
get "gui3d"(): boolean
get "customRenderer"(): boolean
get "overrides"(): $ItemOverrides
get "transforms"(): $ItemTransforms
get "particleIcon"(): $TextureAtlasSprite
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CarpetedBlockModel$Type = ($CarpetedBlockModel);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CarpetedBlockModel_ = $CarpetedBlockModel$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/common/tile/$CeilingBannerBlockTile" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BannerPattern, $BannerPattern$Type} from "packages/net/minecraft/world/level/block/entity/$BannerPattern"
import {$ClientboundBlockEntityDataPacket, $ClientboundBlockEntityDataPacket$Type} from "packages/net/minecraft/network/protocol/game/$ClientboundBlockEntityDataPacket"
import {$Holder, $Holder$Type} from "packages/net/minecraft/core/$Holder"
import {$DyeColor, $DyeColor$Type} from "packages/net/minecraft/world/item/$DyeColor"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$Pair, $Pair$Type} from "packages/com/mojang/datafixers/util/$Pair"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Nameable, $Nameable$Type} from "packages/net/minecraft/world/$Nameable"

export class $CeilingBannerBlockTile extends $BlockEntity implements $Nameable {
 "blockState": $BlockState

constructor(pos: $BlockPos$Type, state: $BlockState$Type)
constructor(pos: $BlockPos$Type, state: $BlockState$Type, color: $DyeColor$Type)

public "getName"(): $Component
public "getBaseColor"(blockStateSupplier: $Supplier$Type<($BlockState$Type)>): $DyeColor
public "getUpdatePacket"(): $ClientboundBlockEntityDataPacket
public "setCustomName"(component: $Component$Type): void
public "load"(pTag: $CompoundTag$Type): void
public "m_183515_"(tag: $CompoundTag$Type): void
public "getCustomName"(): $Component
public "getPatterns"(): $List<($Pair<($Holder<($BannerPattern)>), ($DyeColor)>)>
public "getUpdateTag"(): $CompoundTag
public "getDisplayName"(): $Component
public "hasCustomName"(): boolean
get "name"(): $Component
get "updatePacket"(): $ClientboundBlockEntityDataPacket
set "customName"(value: $Component$Type)
get "customName"(): $Component
get "patterns"(): $List<($Pair<($Holder<($BannerPattern)>), ($DyeColor)>)>
get "updateTag"(): $CompoundTag
get "displayName"(): $Component
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CeilingBannerBlockTile$Type = ($CeilingBannerBlockTile);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CeilingBannerBlockTile_ = $CeilingBannerBlockTile$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/core/network/$ServerBoundItemLeftClickPacket" {
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$Message, $Message$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/network/$Message"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$ChannelHandler$Context, $ChannelHandler$Context$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/network/$ChannelHandler$Context"

export class $ServerBoundItemLeftClickPacket extends $Record implements $Message {

constructor(buf: $FriendlyByteBuf$Type)
constructor(hand: $InteractionHand$Type)

public "equals"(o: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "handle"(context: $ChannelHandler$Context$Type): void
public "writeToBuffer"(buf: $FriendlyByteBuf$Type): void
public "hand"(): $InteractionHand
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ServerBoundItemLeftClickPacket$Type = ($ServerBoundItemLeftClickPacket);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ServerBoundItemLeftClickPacket_ = $ServerBoundItemLeftClickPacket$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/integration/$QuarkCompat" {
import {$HolderSet, $HolderSet$Type} from "packages/net/minecraft/core/$HolderSet"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$TaterInAJarBlock$Tile, $TaterInAJarBlock$Tile$Type} from "packages/net/mehvahdjukaar/supplementaries/integration/quark/$TaterInAJarBlock$Tile"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$UseOnContext, $UseOnContext$Type} from "packages/net/minecraft/world/item/context/$UseOnContext"
import {$JarItem, $JarItem$Type} from "packages/net/mehvahdjukaar/supplementaries/common/items/$JarItem"
import {$Structure, $Structure$Type} from "packages/net/minecraft/world/level/levelgen/structure/$Structure"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$AABB, $AABB$Type} from "packages/net/minecraft/world/phys/$AABB"
import {$ZGatherAdvancementModifiers, $ZGatherAdvancementModifiers$Type} from "packages/org/violetmoon/zeta/event/load/$ZGatherAdvancementModifiers"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $QuarkCompat {
static readonly "TATER_IN_A_JAR_NAME": string
static readonly "TATER_IN_A_JAR": $Supplier<($Block)>
static readonly "TATER_IN_A_JAR_TILE": $Supplier<($BlockEntityType<($TaterInAJarBlock$Tile)>)>
static readonly "CARTOGRAPHERS_QUILL": $Supplier<($Item)>

constructor()

public static "init"(): void
public static "isShulkerDropInOn"(): boolean
public static "tryCaptureTater"(item: $JarItem$Type, context: $UseOnContext$Type): $InteractionResult
public static "gatherAdvModifiersEvent"(event: $ZGatherAdvancementModifiers$Type): void
public static "makeAdventurerQuill"(serverLevel: $ServerLevel$Type, destination: $TagKey$Type<($Structure$Type)>, radius: integer, skipKnown: boolean, zoom: integer, destinationType: $ResourceLocation$Type, name: string, color: integer): $ItemStack
public static "makeAdventurerQuill"(serverLevel: $ServerLevel$Type, targets: $HolderSet$Type<($Structure$Type)>, radius: integer, skipKnown: boolean, zoom: integer, destinationType: $ResourceLocation$Type, name: string, color: integer): $ItemStack
public static "getMovingBlockEntity"(pos: $BlockPos$Type, state: $BlockState$Type, level: $Level$Type): $BlockEntity
public static "isFastSlideModuleEnabled"(): boolean
public static "getBannerPatternLimit"(current: integer): integer
public static "getEncumbermentFromBackpack"(stack: $ItemStack$Type): float
public static "tickPiston"(level: $Level$Type, pos: $BlockPos$Type, spikes: $BlockState$Type, pistonBB: $AABB$Type, sameDir: boolean, movingTile: $BlockEntity$Type): void
public static "canMoveBlockEntity"(state: $BlockState$Type): boolean
public static "shouldHideOverlay"(stack: $ItemStack$Type): boolean
public static "getSlimeBucket"(entity: $Entity$Type): $ItemStack
public static "tryRotateStool"(level: $Level$Type, state: $BlockState$Type, pos: $BlockPos$Type): boolean
public static "getMagnetStateForFlintBlock"(be: $BlockEntity$Type, dir: $Direction$Type): $BlockState
public static "isDoubleDoorEnabled"(): boolean
get "shulkerDropInOn"(): boolean
get "fastSlideModuleEnabled"(): boolean
get "doubleDoorEnabled"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $QuarkCompat$Type = ($QuarkCompat);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $QuarkCompat_ = $QuarkCompat$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/network/$ClientBoundSyncCapturedMobsPacket" {
import {$DataDefinedCatchableMob, $DataDefinedCatchableMob$Type} from "packages/net/mehvahdjukaar/supplementaries/common/misc/mob_container/$DataDefinedCatchableMob"
import {$Message, $Message$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/network/$Message"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$ChannelHandler$Context, $ChannelHandler$Context$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/network/$ChannelHandler$Context"

export class $ClientBoundSyncCapturedMobsPacket implements $Message {

constructor(mobMap: $Set$Type<($DataDefinedCatchableMob$Type)>, fish: $DataDefinedCatchableMob$Type)
constructor(buf: $FriendlyByteBuf$Type)

public "handle"(context: $ChannelHandler$Context$Type): void
public "writeToBuffer"(buf: $FriendlyByteBuf$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientBoundSyncCapturedMobsPacket$Type = ($ClientBoundSyncCapturedMobsPacket);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientBoundSyncCapturedMobsPacket_ = $ClientBoundSyncCapturedMobsPacket$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/integration/$SuppSquaredCompat" {
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$WallLanternBlockTile, $WallLanternBlockTile$Type} from "packages/net/mehvahdjukaar/amendments/common/tile/$WallLanternBlockTile"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"

export class $SuppSquaredCompat {

constructor()

public static "lightUpLantern"(pLevel: $Level$Type, pPos: $BlockPos$Type, pPlayer: $Player$Type, pHand: $InteractionHand$Type, te: $WallLanternBlockTile$Type, lantern: $BlockState$Type): $InteractionResult
public static "isLightableLantern"(b: $Block$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SuppSquaredCompat$Type = ($SuppSquaredCompat);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SuppSquaredCompat_ = $SuppSquaredCompat$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/map/$CustomMapData$DirtyCounter" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $CustomMapData$DirtyCounter {

 "isDirty"(): boolean
 "clearDirty"(): void
}

export namespace $CustomMapData$DirtyCounter {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CustomMapData$DirtyCounter$Type = ($CustomMapData$DirtyCounter);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CustomMapData$DirtyCounter_ = $CustomMapData$DirtyCounter$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/network/$ServerBoundRequestMapDataPacket" {
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Message, $Message$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/network/$Message"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$ChannelHandler$Context, $ChannelHandler$Context$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/network/$ChannelHandler$Context"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $ServerBoundRequestMapDataPacket implements $Message {

constructor(buf: $FriendlyByteBuf$Type)
constructor(pos: $BlockPos$Type, id: $UUID$Type)

public "handle"(context: $ChannelHandler$Context$Type): void
public "writeToBuffer"(buf: $FriendlyByteBuf$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ServerBoundRequestMapDataPacket$Type = ($ServerBoundRequestMapDataPacket);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ServerBoundRequestMapDataPacket_ = $ServerBoundRequestMapDataPacket$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/entity/$ImprovedFallingBlockEntity" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$FallingBlockEntity, $FallingBlockEntity$Type} from "packages/net/minecraft/world/entity/item/$FallingBlockEntity"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$ItemLike, $ItemLike$Type} from "packages/net/minecraft/world/level/$ItemLike"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$ItemEntity, $ItemEntity$Type} from "packages/net/minecraft/world/entity/item/$ItemEntity"

export class $ImprovedFallingBlockEntity extends $FallingBlockEntity {
 "blockState": $BlockState
 "time": integer
 "dropItem": boolean
 "cancelDrop": boolean
 "blockData": $CompoundTag
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(type: $EntityType$Type<(any)>, level: $Level$Type)
constructor(type: $EntityType$Type<(any)>, level: $Level$Type, pos: $BlockPos$Type, blockState: $BlockState$Type, saveDataToItem: boolean)

public static "fall"(type: $EntityType$Type<(any)>, level: $Level$Type, pos: $BlockPos$Type, state: $BlockState$Type, saveDataToItem: boolean): $ImprovedFallingBlockEntity
public "m_7378_"(tag: $CompoundTag$Type): void
public "m_7380_"(tag: $CompoundTag$Type): void
public "causeFallDamage"(pFallDistance: float, pMultiplier: float, pSource: $DamageSource$Type): boolean
public "setSaveTileDataToItem"(b: boolean): void
public "setBlockState"(state: $BlockState$Type): void
public "setCancelDrop"(cancelDrop: boolean): void
public "spawnAtLocation"(itemIn: $ItemLike$Type, offset: integer): $ItemEntity
set "saveTileDataToItem"(value: boolean)
set "blockState"(value: $BlockState$Type)
set "cancelDrop"(value: boolean)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ImprovedFallingBlockEntity$Type = ($ImprovedFallingBlockEntity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ImprovedFallingBlockEntity_ = $ImprovedFallingBlockEntity$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$SpeakerBlockTile$Mode" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $SpeakerBlockTile$Mode extends $Enum<($SpeakerBlockTile$Mode)> {
static readonly "CHAT": $SpeakerBlockTile$Mode
static readonly "STATUS_MESSAGE": $SpeakerBlockTile$Mode
static readonly "TITLE": $SpeakerBlockTile$Mode
static readonly "NARRATOR": $SpeakerBlockTile$Mode


public static "values"(): ($SpeakerBlockTile$Mode)[]
public static "valueOf"(name: string): $SpeakerBlockTile$Mode
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SpeakerBlockTile$Mode$Type = (("status_message") | ("narrator") | ("chat") | ("title")) | ($SpeakerBlockTile$Mode);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SpeakerBlockTile$Mode_ = $SpeakerBlockTile$Mode$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/integration/configured/$CustomConfigScreen" {
import {$Comparator, $Comparator$Type} from "packages/java/util/$Comparator"
import {$FormattedCharSequence, $FormattedCharSequence$Type} from "packages/net/minecraft/util/$FormattedCharSequence"
import {$ConfigSpec, $ConfigSpec$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/configs/$ConfigSpec"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$ConfigScreen, $ConfigScreen$Type} from "packages/com/mrcrayfish/configured/client/screen/$ConfigScreen"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$CustomConfigScreen$FolderWrapper, $CustomConfigScreen$FolderWrapper$Type} from "packages/net/mehvahdjukaar/moonlight/api/integration/configured/$CustomConfigScreen$FolderWrapper"
import {$ConfigScreen$FolderItem, $ConfigScreen$FolderItem$Type} from "packages/com/mrcrayfish/configured/client/screen/$ConfigScreen$FolderItem"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$ConfigScreen$BooleanItem, $ConfigScreen$BooleanItem$Type} from "packages/com/mrcrayfish/configured/client/screen/$ConfigScreen$BooleanItem"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$ListMenuScreen$Item, $ListMenuScreen$Item$Type} from "packages/com/mrcrayfish/configured/client/screen/$ListMenuScreen$Item"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$CustomConfigScreen$BooleanWrapper, $CustomConfigScreen$BooleanWrapper$Type} from "packages/net/mehvahdjukaar/moonlight/api/integration/configured/$CustomConfigScreen$BooleanWrapper"
import {$List, $List$Type} from "packages/java/util/$List"

export class $CustomConfigScreen extends $ConfigScreen {
readonly "mainIcon": $ItemStack
static readonly "TOOLTIP_WIDTH": integer
static readonly "SORT_ALPHABETICALLY": $Comparator<($ListMenuScreen$Item)>
static readonly "CONFIGURED_LOGO": $ResourceLocation
 "tooltipText": $List<($FormattedCharSequence)>
 "tooltipOutlineColour": integer
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering


public "getIcon"(...path: (string)[]): $ItemStack
public "render"(graphics: $GuiGraphics$Type, mouseX: integer, mouseY: integer, partialTicks: float): void
public "tick"(): void
public "onSave"(): void
public "wrapFolderItem"(old: $ConfigScreen$FolderItem$Type): $CustomConfigScreen$FolderWrapper
public "wrapBooleanItem"(old: $ConfigScreen$BooleanItem$Type): $CustomConfigScreen$BooleanWrapper
public "getEnabledKeyword"(): string
public "getCustomSpecs"(): $List<($ConfigSpec)>
public "createSubScreen"(arg0: $Component$Type): $CustomConfigScreen
public static "loadTexture"(arg0: any, arg1: $ResourceLocation$Type): $ResourceLocation
get "enabledKeyword"(): string
get "customSpecs"(): $List<($ConfigSpec)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CustomConfigScreen$Type = ($CustomConfigScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CustomConfigScreen_ = $CustomConfigScreen$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/platform/network/$ChannelHandler" {
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$Message, $Message$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/network/$Message"
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$IntSupplier, $IntSupplier$Type} from "packages/java/util/function/$IntSupplier"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$NetworkDir, $NetworkDir$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/network/$NetworkDir"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$ChannelHandler$Builder, $ChannelHandler$Builder$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/network/$ChannelHandler$Builder"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $ChannelHandler {


public static "builder"(modId: string): $ChannelHandler$Builder
/**
 * 
 * @deprecated
 */
public "register"<M extends $Message>(arg0: $NetworkDir$Type, arg1: $Class$Type<(M)>, arg2: $Function$Type<($FriendlyByteBuf$Type), (M)>): void
public "sendToClientPlayer"(arg0: $ServerPlayer$Type, arg1: $Message$Type): void
public "sendToAllClientPlayersInRange"(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: double, arg3: $Message$Type): void
public "sentToAllClientPlayersTrackingEntityAndSelf"(arg0: $Entity$Type, arg1: $Message$Type): void
public static "createChannel"(modId: string): $ChannelHandler
public static "createChannel"(modId: string, version: $IntSupplier$Type): $ChannelHandler
/**
 * 
 * @deprecated
 */
public static "createChannel"(channelMame: $ResourceLocation$Type, version: integer): $ChannelHandler
/**
 * 
 * @deprecated
 */
public static "createChannel"(channelMame: $ResourceLocation$Type): $ChannelHandler
public "sendToAllClientPlayersInDefaultRange"(level: $Level$Type, pos: $BlockPos$Type, message: $Message$Type): void
public "sendToServer"(arg0: $Message$Type): void
public "sendToAllClientPlayers"(arg0: $Message$Type): void
public "sentToAllClientPlayersTrackingEntity"(arg0: $Entity$Type, arg1: $Message$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ChannelHandler$Type = ($ChannelHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ChannelHandler_ = $ChannelHandler$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/misc/$GenericSimpleResourceReloadListener" {
import {$PreparableReloadListener, $PreparableReloadListener$Type} from "packages/net/minecraft/server/packs/resources/$PreparableReloadListener"
import {$CompletableFuture, $CompletableFuture$Type} from "packages/java/util/concurrent/$CompletableFuture"
import {$PreparableReloadListener$PreparationBarrier, $PreparableReloadListener$PreparationBarrier$Type} from "packages/net/minecraft/server/packs/resources/$PreparableReloadListener$PreparationBarrier"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Executor, $Executor$Type} from "packages/java/util/concurrent/$Executor"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$ResourceManager, $ResourceManager$Type} from "packages/net/minecraft/server/packs/resources/$ResourceManager"
import {$ProfilerFiller, $ProfilerFiller$Type} from "packages/net/minecraft/util/profiling/$ProfilerFiller"

/**
 * 
 * @deprecated
 */
export class $GenericSimpleResourceReloadListener implements $PreparableReloadListener {


public "apply"(arg0: $List$Type<($ResourceLocation$Type)>, arg1: $ResourceManager$Type, arg2: $ProfilerFiller$Type): void
public "reload"(stage: $PreparableReloadListener$PreparationBarrier$Type, manager: $ResourceManager$Type, workerProfiler: $ProfilerFiller$Type, mainProfiler: $ProfilerFiller$Type, workerExecutor: $Executor$Type, mainExecutor: $Executor$Type): $CompletableFuture<(void)>
public "getName"(): string
get "name"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GenericSimpleResourceReloadListener$Type = ($GenericSimpleResourceReloadListener);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GenericSimpleResourceReloadListener_ = $GenericSimpleResourceReloadListener$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/blocks/$FlowerBoxBlock" {
import {$IntegerProperty, $IntegerProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$IntegerProperty"
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$EntityBlock, $EntityBlock$Type} from "packages/net/minecraft/world/level/block/$EntityBlock"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Mirror, $Mirror$Type} from "packages/net/minecraft/world/level/block/$Mirror"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$WaterBlock, $WaterBlock$Type} from "packages/net/mehvahdjukaar/moonlight/api/block/$WaterBlock"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"
import {$DirectionProperty, $DirectionProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$DirectionProperty"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$CollisionContext, $CollisionContext$Type} from "packages/net/minecraft/world/phys/shapes/$CollisionContext"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$Rotation, $Rotation$Type} from "packages/net/minecraft/world/level/block/$Rotation"
import {$BlockEntityTicker, $BlockEntityTicker$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityTicker"
import {$GameEventListener, $GameEventListener$Type} from "packages/net/minecraft/world/level/gameevent/$GameEventListener"

export class $FlowerBoxBlock extends $WaterBlock implements $EntityBlock {
static readonly "LIGHT_LEVEL": $IntegerProperty
static readonly "FLOOR": $BooleanProperty
static readonly "FACING": $DirectionProperty
static readonly "WATERLOGGED": $BooleanProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(properties: $BlockBehaviour$Properties$Type)

public "getStateForPlacement"(context: $BlockPlaceContext$Type): $BlockState
public "setPlacedBy"(world: $Level$Type, pos: $BlockPos$Type, state: $BlockState$Type, placer: $LivingEntity$Type, stack: $ItemStack$Type): void
public "use"(state: $BlockState$Type, worldIn: $Level$Type, pos: $BlockPos$Type, player: $Player$Type, handIn: $InteractionHand$Type, hit: $BlockHitResult$Type): $InteractionResult
public "onRemove"(state: $BlockState$Type, world: $Level$Type, pos: $BlockPos$Type, newState: $BlockState$Type, isMoving: boolean): void
public "rotate"(state: $BlockState$Type, rot: $Rotation$Type): $BlockState
public "mirror"(state: $BlockState$Type, mirrorIn: $Mirror$Type): $BlockState
public "getShape"(state: $BlockState$Type, world: $BlockGetter$Type, pos: $BlockPos$Type, context: $CollisionContext$Type): $VoxelShape
public "newBlockEntity"(pPos: $BlockPos$Type, pState: $BlockState$Type): $BlockEntity
public "getTicker"<T extends $BlockEntity>(arg0: $Level$Type, arg1: $BlockState$Type, arg2: $BlockEntityType$Type<(T)>): $BlockEntityTicker<(T)>
public "getListener"<T extends $BlockEntity>(arg0: $ServerLevel$Type, arg1: T): $GameEventListener
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FlowerBoxBlock$Type = ($FlowerBoxBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FlowerBoxBlock_ = $FlowerBoxBlock$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/utils/forge/$VibeCheckerImpl" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $VibeCheckerImpl {

constructor()

public static "checkVibe"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $VibeCheckerImpl$Type = ($VibeCheckerImpl);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $VibeCheckerImpl_ = $VibeCheckerImpl$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/faucet/$MudInteraction" {
import {$FaucetTarget$BlState, $FaucetTarget$BlState$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/faucet/$FaucetTarget$BlState"
import {$SoftFluidStack, $SoftFluidStack$Type} from "packages/net/mehvahdjukaar/moonlight/api/fluids/$SoftFluidStack"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $MudInteraction implements $FaucetTarget$BlState {


public "fill"(level: $Level$Type, pos: $BlockPos$Type, state: $BlockState$Type, fluid: $SoftFluidStack$Type, minAmount: integer): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MudInteraction$Type = ($MudInteraction);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MudInteraction_ = $MudInteraction$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/map/type/$CustomDecorationType" {
import {$HolderSet, $HolderSet$Type} from "packages/net/minecraft/core/$HolderSet"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$MapBlockMarker, $MapBlockMarker$Type} from "packages/net/mehvahdjukaar/moonlight/api/map/markers/$MapBlockMarker"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$BiFunction, $BiFunction$Type} from "packages/java/util/function/$BiFunction"
import {$Codec, $Codec$Type} from "packages/com/mojang/serialization/$Codec"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$CustomMapDecoration, $CustomMapDecoration$Type} from "packages/net/mehvahdjukaar/moonlight/api/map/$CustomMapDecoration"
import {$Structure, $Structure$Type} from "packages/net/minecraft/world/level/levelgen/structure/$Structure"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$MapDecorationType, $MapDecorationType$Type} from "packages/net/mehvahdjukaar/moonlight/api/map/type/$MapDecorationType"

export class $CustomDecorationType<D extends $CustomMapDecoration, M extends $MapBlockMarker<(D)>> implements $MapDecorationType<(D), (M)> {
static readonly "CODEC": $Codec<($CustomDecorationType<(any), (any)>)>
 "factoryId": $ResourceLocation


public static "withWorldMarker"<D extends $CustomMapDecoration, M extends $MapBlockMarker<(D)>>(markerFactory: $Function$Type<($CustomDecorationType$Type<(D), (M)>), (M)>, markerFromWorldFactory: $BiFunction$Type<($BlockGetter$Type), ($BlockPos$Type), (M)>, decorationFactory: $BiFunction$Type<($MapDecorationType$Type<(any), (any)>), ($FriendlyByteBuf$Type), (D)>): $CustomDecorationType<(D), (M)>
/**
 * 
 * @deprecated
 */
public static "withWorldMarker"<D extends $CustomMapDecoration, M extends $MapBlockMarker<(D)>>(typeId: $ResourceLocation$Type, markerFactory: $Supplier$Type<(M)>, markerFromWorldFactory: $BiFunction$Type<($BlockGetter$Type), ($BlockPos$Type), (M)>, decorationFactory: $BiFunction$Type<($MapDecorationType$Type<(any), (any)>), ($FriendlyByteBuf$Type), (D)>): $CustomDecorationType<(D), (M)>
public static "simple"<D extends $CustomMapDecoration, M extends $MapBlockMarker<(D)>>(markerFactory: $Function$Type<($CustomDecorationType$Type<(D), (M)>), (M)>, decorationFactory: $BiFunction$Type<($MapDecorationType$Type<(any), (any)>), ($FriendlyByteBuf$Type), (D)>): $CustomDecorationType<(D), (M)>
/**
 * 
 * @deprecated
 */
public static "simple"<D extends $CustomMapDecoration, M extends $MapBlockMarker<(D)>>(typeId: $ResourceLocation$Type, markerFactory: $Supplier$Type<(M)>, decorationFactory: $BiFunction$Type<($MapDecorationType$Type<(any), (any)>), ($FriendlyByteBuf$Type), (D)>): $CustomDecorationType<(D), (M)>
public "loadMarkerFromNBT"(compound: $CompoundTag$Type): M
public "createEmptyMarker"(): M
public "isFromWorld"(): boolean
public "getCustomFactoryID"(): $ResourceLocation
public "loadDecorationFromBuffer"(buffer: $FriendlyByteBuf$Type): D
public "getWorldMarkerFromWorld"(reader: $BlockGetter$Type, pos: $BlockPos$Type): M
public "getDefaultMapColor"(): integer
public "getAssociatedStructure"(): $Optional<($HolderSet<($Structure)>)>
get "fromWorld"(): boolean
get "customFactoryID"(): $ResourceLocation
get "defaultMapColor"(): integer
get "associatedStructure"(): $Optional<($HolderSet<($Structure)>)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CustomDecorationType$Type<D, M> = ($CustomDecorationType<(D), (M)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CustomDecorationType_<D, M> = $CustomDecorationType$Type<(D), (M)>;
}}
declare module "packages/net/mehvahdjukaar/amendments/events/behaviors/$ToolHookConversion" {
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$BlockUse, $BlockUse$Type} from "packages/net/mehvahdjukaar/amendments/events/behaviors/$BlockUse"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"

export class $ToolHookConversion implements $BlockUse {

constructor()

public "isEnabled"(): boolean
public "appliesToBlock"(block: $Block$Type): boolean
public "altersWorld"(): boolean
public "tryPerformingAction"(state: $BlockState$Type, pos: $BlockPos$Type, level: $Level$Type, player: $Player$Type, hand: $InteractionHand$Type, stack: $ItemStack$Type, hit: $BlockHitResult$Type): $InteractionResult
get "enabled"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ToolHookConversion$Type = ($ToolHookConversion);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ToolHookConversion_ = $ToolHookConversion$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/integration/$CompatHandler" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$RegHelper$ItemToTabEvent, $RegHelper$ItemToTabEvent$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/$RegHelper$ItemToTabEvent"
import {$IKeyLockable$KeyStatus, $IKeyLockable$KeyStatus$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/$IKeyLockable$KeyStatus"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"

export class $CompatHandler {
static readonly "AMENDMENTS": boolean
static readonly "QUARK": boolean
static readonly "JEI": boolean
static readonly "REI": boolean
static readonly "EMI": boolean
static readonly "DECO_BLOCKS": boolean
static readonly "GOATED": boolean
static readonly "IMMEDIATELY_FAST": boolean
static readonly "CONFIGURED": boolean
static readonly "OREGANIZED": boolean
static readonly "CREATE": boolean
static readonly "TORCHSLAB": boolean
static readonly "CURIOS": boolean
static readonly "TRINKETS": boolean
static readonly "FARMERS_DELIGHT": boolean
static readonly "INFERNALEXP": boolean
static readonly "INSPIRATIONS": boolean
static readonly "FRAMEDBLOCKS": boolean
static readonly "RGBLIB": boolean
static readonly "ENDERGETIC": boolean
static readonly "DECO_BLOCKS_ABNORMALS": boolean
static readonly "MUCH_MORE_MOD_COMPAT": boolean
static readonly "AUTUMNITY": boolean
static readonly "BUZZIER_BEES": boolean
static readonly "FLYWHEEL": boolean
static readonly "REPURPOSED_STRUCTURES": boolean
static readonly "TETRA": boolean
static readonly "POKECUBE_LEGENDS": boolean
static readonly "POKECUBE": boolean
static readonly "DYNAMICTREES": boolean
static readonly "MOREMINECARTS": boolean
static readonly "HABITAT": boolean
static readonly "SIMPLEFARMING": boolean
static readonly "ATMOSPHERIC": boolean
static readonly "ENCHANTEDBOOKREDESIGN": boolean
static readonly "CUSTOMVILLAGERTRADES": boolean
static readonly "COMPUTERCRAFT": boolean
static readonly "NETHERSDELIGHT": boolean
static readonly "DOUBLEDOORS": boolean
static readonly "MALUM": boolean
static readonly "BOTANIA": boolean
static readonly "MAPATLAS": boolean
static readonly "SUPPSQUARED": boolean
static readonly "WAYSTONES": boolean
static readonly "OVERWEIGHT_FARMING": boolean
static readonly "SNOWYSPIRIT": boolean
static readonly "HAUNTEDHARVEST": boolean
static readonly "CLOTH_CONFIG": boolean
static readonly "FLAN": boolean
static readonly "BREEZY": boolean
static readonly "SHIMMER": boolean
static readonly "BUMBLEZONE": boolean
static readonly "CAVE_ENHANCEMENTS": boolean
static readonly "CUSTOM_PLAYER_MODELS": boolean
static readonly "FARMERS_RESPRITE": boolean
static readonly "ARCHITECTS_PALETTE": boolean
static readonly "OPTIFINE": boolean

constructor()

public static "setup"(): void
public static "getKeyFromModsSlots"(player: $Player$Type, key: string): $IKeyLockable$KeyStatus
public static "initOptionalRegistries"(): void
public static "DynTreesGetOptionalDynamicSapling"(item: $Item$Type, level: $Level$Type, worldPosition: $BlockPos$Type): $Block
public static "getQuiverFromModsSlots"(player: $Player$Type): $ItemStack
public static "addItemsToTabs"(event: $RegHelper$ItemToTabEvent$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CompatHandler$Type = ($CompatHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CompatHandler_ = $CompatHandler$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/entities/dispenser_minecart/$DispenserMinecartEntity" {
import {$LazyOptional, $LazyOptional$Type} from "packages/net/minecraftforge/common/util/$LazyOptional"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$BlockContainerJS, $BlockContainerJS$Type} from "packages/dev/latvian/mods/kubejs/level/$BlockContainerJS"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$List, $List$Type} from "packages/java/util/$List"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$AbstractContainerMenu, $AbstractContainerMenu$Type} from "packages/net/minecraft/world/inventory/$AbstractContainerMenu"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"
import {$LevelRenderer, $LevelRenderer$Type} from "packages/net/minecraft/client/renderer/$LevelRenderer"
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$Ingredient, $Ingredient$Type} from "packages/net/minecraft/world/item/crafting/$Ingredient"
import {$AbstractMinecart$Type, $AbstractMinecart$Type$Type} from "packages/net/minecraft/world/entity/vehicle/$AbstractMinecart$Type"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Capability, $Capability$Type} from "packages/net/minecraftforge/common/capabilities/$Capability"
import {$Minecart, $Minecart$Type} from "packages/net/minecraft/world/entity/vehicle/$Minecart"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$SlotAccess, $SlotAccess$Type} from "packages/net/minecraft/world/entity/$SlotAccess"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$MenuProvider, $MenuProvider$Type} from "packages/net/minecraft/world/$MenuProvider"

export class $DispenserMinecartEntity extends $Minecart implements $Container, $MenuProvider {
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(level: $Level$Type, x: double, y: double, z: double)
constructor(entityType: $EntityType$Type<($DispenserMinecartEntity$Type)>, level: $Level$Type)

public "getSlot"(pSlot: integer): $SlotAccess
public "setChanged"(): void
public "tick"(): void
public "getItem"(pIndex: integer): $ItemStack
public "getContainerSize"(): integer
public "removeItemNoUpdate"(pIndex: integer): $ItemStack
public "interact"(pPlayer: $Player$Type, pHand: $InteractionHand$Type): $InteractionResult
public "remove"(reason: $Entity$RemovalReason$Type): void
public "teleportTo"(pX: double, pY: double, pZ: double): void
public "reviveCaps"(): void
public "invalidateCaps"(): void
public "activateMinecart"(pX: integer, pY: integer, pZ: integer, pReceivingPower: boolean): void
public "getMinecartType"(): $AbstractMinecart$Type
public "getDefaultDisplayBlockState"(): $BlockState
public "getCapability"(capability: $Capability$Type<(any)>, facing: $Direction$Type): $LazyOptional<(any)>
public "removeItem"(pIndex: integer, pCount: integer): $ItemStack
public "clearContent"(): void
public "isEmpty"(): boolean
public "createMenu"(pContainerId: integer, pInventory: $Inventory$Type, pPlayer: $Player$Type): $AbstractContainerMenu
public "stillValid"(pPlayer: $Player$Type): boolean
public "getPickResult"(): $ItemStack
public "setItem"(pIndex: integer, pStack: $ItemStack$Type): void
public "self"(): $Container
public "getBlock"(level: $Level$Type): $BlockContainerJS
public "startOpen"(arg0: $Player$Type): void
public "getMaxStackSize"(): integer
public "stopOpen"(arg0: $Player$Type): void
public static "stillValidBlockEntity"(arg0: $BlockEntity$Type, arg1: $Player$Type, arg2: integer): boolean
public "canPlaceItem"(arg0: integer, arg1: $ItemStack$Type): boolean
public "countItem"(arg0: $Item$Type): integer
public "canTakeItem"(arg0: $Container$Type, arg1: integer, arg2: $ItemStack$Type): boolean
public "hasAnyMatching"(arg0: $Predicate$Type<($ItemStack$Type)>): boolean
public "getSlots"(): integer
public "getStackInSlot"(slot: integer): $ItemStack
public "insertItem"(slot: integer, stack: $ItemStack$Type, simulate: boolean): $ItemStack
public static "stillValidBlockEntity"(arg0: $BlockEntity$Type, arg1: $Player$Type): boolean
public "isMutable"(): boolean
public "hasAnyOf"(arg0: $Set$Type<($Item$Type)>): boolean
public "setChanged"(): void
public "asContainer"(): $Container
public "getHeight"(): integer
public "extractItem"(slot: integer, amount: integer, simulate: boolean): $ItemStack
public "isItemValid"(slot: integer, stack: $ItemStack$Type): boolean
public "getWidth"(): integer
public "setStackInSlot"(slot: integer, stack: $ItemStack$Type): void
public "getSlotLimit"(slot: integer): integer
public "clear"(): void
public "getDisplayName"(): $Component
public static "tryClear"(arg0: any): void
public "insertItem"(stack: $ItemStack$Type, simulate: boolean): $ItemStack
public "countNonEmpty"(ingredient: $Ingredient$Type): integer
public "countNonEmpty"(): integer
public "getAllItems"(): $List<($ItemStack)>
public "find"(ingredient: $Ingredient$Type): integer
public "find"(): integer
public "clear"(ingredient: $Ingredient$Type): void
public "count"(ingredient: $Ingredient$Type): integer
public "count"(): integer
public "isEmpty"(): boolean
public "tdv$getDynamicLightX"(): double
public "tdv$getDynamicLightZ"(): double
public "tdv$getDynamicLightWorld"(): $Level
public "tdv$shouldUpdateDynamicLight"(): boolean
public "tdv$resetDynamicLight"(): void
public "tdv$getDynamicLightY"(): double
public "tdv$lambdynlights$scheduleTrackedChunksRebuild"(arg0: $LevelRenderer$Type): void
public "tdv$lambdynlights$updateDynamicLight"(arg0: $LevelRenderer$Type): boolean
get "containerSize"(): integer
get "minecartType"(): $AbstractMinecart$Type
get "defaultDisplayBlockState"(): $BlockState
get "empty"(): boolean
get "pickResult"(): $ItemStack
get "maxStackSize"(): integer
get "slots"(): integer
get "mutable"(): boolean
get "height"(): integer
get "width"(): integer
get "displayName"(): $Component
get "allItems"(): $List<($ItemStack)>
get "empty"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DispenserMinecartEntity$Type = ($DispenserMinecartEntity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DispenserMinecartEntity_ = $DispenserMinecartEntity$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/common/block/$CeilingBannerBlock" {
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Mirror, $Mirror$Type} from "packages/net/minecraft/world/level/block/$Mirror"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$DyeColor, $DyeColor$Type} from "packages/net/minecraft/world/item/$DyeColor"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$List, $List$Type} from "packages/java/util/$List"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"
import {$DirectionProperty, $DirectionProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$DirectionProperty"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$CollisionContext, $CollisionContext$Type} from "packages/net/minecraft/world/phys/shapes/$CollisionContext"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$AbstractBannerBlock, $AbstractBannerBlock$Type} from "packages/net/minecraft/world/level/block/$AbstractBannerBlock"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$LootParams$Builder, $LootParams$Builder$Type} from "packages/net/minecraft/world/level/storage/loot/$LootParams$Builder"
import {$Rotation, $Rotation$Type} from "packages/net/minecraft/world/level/block/$Rotation"

export class $CeilingBannerBlock extends $AbstractBannerBlock {
static readonly "ATTACHED": $BooleanProperty
static readonly "FACING": $DirectionProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(color: $DyeColor$Type, properties: $BlockBehaviour$Properties$Type)

public "getStateForPlacement"(context: $BlockPlaceContext$Type): $BlockState
public "setPlacedBy"(pLevel: $Level$Type, pPos: $BlockPos$Type, pState: $BlockState$Type, pPlacer: $LivingEntity$Type, pStack: $ItemStack$Type): void
public "updateShape"(myState: $BlockState$Type, direction: $Direction$Type, otherState: $BlockState$Type, world: $LevelAccessor$Type, myPos: $BlockPos$Type, otherPos: $BlockPos$Type): $BlockState
public "use"(pState: $BlockState$Type, pLevel: $Level$Type, pPos: $BlockPos$Type, pPlayer: $Player$Type, pHand: $InteractionHand$Type, pHit: $BlockHitResult$Type): $InteractionResult
public "rotate"(state: $BlockState$Type, rotation: $Rotation$Type): $BlockState
public "mirror"(state: $BlockState$Type, mirror: $Mirror$Type): $BlockState
public "getDrops"(blockState: $BlockState$Type, builder: $LootParams$Builder$Type): $List<($ItemStack)>
public "canSurvive"(state: $BlockState$Type, world: $LevelReader$Type, pos: $BlockPos$Type): boolean
public "getShape"(state: $BlockState$Type, level: $BlockGetter$Type, pos: $BlockPos$Type, collisionContext: $CollisionContext$Type): $VoxelShape
public "getDescriptionId"(): string
public "newBlockEntity"(pPos: $BlockPos$Type, pState: $BlockState$Type): $BlockEntity
get "descriptionId"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CeilingBannerBlock$Type = ($CeilingBannerBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CeilingBannerBlock_ = $CeilingBannerBlock$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/commands/$ResetGlobeSeedCommand" {
import {$CommandSourceStack, $CommandSourceStack$Type} from "packages/net/minecraft/commands/$CommandSourceStack"
import {$Command, $Command$Type} from "packages/com/mojang/brigadier/$Command"
import {$ArgumentBuilder, $ArgumentBuilder$Type} from "packages/com/mojang/brigadier/builder/$ArgumentBuilder"
import {$CommandDispatcher, $CommandDispatcher$Type} from "packages/com/mojang/brigadier/$CommandDispatcher"
import {$CommandContext, $CommandContext$Type} from "packages/com/mojang/brigadier/context/$CommandContext"

export class $ResetGlobeSeedCommand implements $Command<($CommandSourceStack)> {

constructor()

public "run"(context: $CommandContext$Type<($CommandSourceStack$Type)>): integer
public static "register"(dispatcher: $CommandDispatcher$Type<($CommandSourceStack$Type)>): $ArgumentBuilder<($CommandSourceStack), (any)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ResetGlobeSeedCommand$Type = ($ResetGlobeSeedCommand);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ResetGlobeSeedCommand_ = $ResetGlobeSeedCommand$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/blocks/$GlobeBlock" {
import {$IntegerProperty, $IntegerProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$IntegerProperty"
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$EntityBlock, $EntityBlock$Type} from "packages/net/minecraft/world/level/block/$EntityBlock"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Mirror, $Mirror$Type} from "packages/net/minecraft/world/level/block/$Mirror"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$PathComputationType, $PathComputationType$Type} from "packages/net/minecraft/world/level/pathfinder/$PathComputationType"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$WaterBlock, $WaterBlock$Type} from "packages/net/mehvahdjukaar/moonlight/api/block/$WaterBlock"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"
import {$DirectionProperty, $DirectionProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$DirectionProperty"
import {$IWashable, $IWashable$Type} from "packages/net/mehvahdjukaar/moonlight/api/block/$IWashable"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$CollisionContext, $CollisionContext$Type} from "packages/net/minecraft/world/phys/shapes/$CollisionContext"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$Rotation, $Rotation$Type} from "packages/net/minecraft/world/level/block/$Rotation"
import {$BlockEntityTicker, $BlockEntityTicker$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityTicker"
import {$GameEventListener, $GameEventListener$Type} from "packages/net/minecraft/world/level/gameevent/$GameEventListener"

export class $GlobeBlock extends $WaterBlock implements $EntityBlock, $IWashable {
static readonly "POWERED": $BooleanProperty
static readonly "FACING": $DirectionProperty
static readonly "ROTATION": $IntegerProperty
static readonly "WATERLOGGED": $BooleanProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(properties: $BlockBehaviour$Properties$Type)

public "getTicker"<T extends $BlockEntity>(pLevel: $Level$Type, pState: $BlockState$Type, pBlockEntityType: $BlockEntityType$Type<(T)>): $BlockEntityTicker<(T)>
public "getStateForPlacement"(context: $BlockPlaceContext$Type): $BlockState
public "setPlacedBy"(worldIn: $Level$Type, pos: $BlockPos$Type, state: $BlockState$Type, placer: $LivingEntity$Type, stack: $ItemStack$Type): void
public "updatePower"(state: $BlockState$Type, leve: $Level$Type, pos: $BlockPos$Type): void
public "isPathfindable"(state: $BlockState$Type, worldIn: $BlockGetter$Type, pos: $BlockPos$Type, type: $PathComputationType$Type): boolean
public "neighborChanged"(state: $BlockState$Type, world: $Level$Type, pos: $BlockPos$Type, neighborBlock: $Block$Type, fromPos: $BlockPos$Type, moving: boolean): void
public "updateShape"(stateIn: $BlockState$Type, facing: $Direction$Type, facingState: $BlockState$Type, worldIn: $LevelAccessor$Type, currentPos: $BlockPos$Type, facingPos: $BlockPos$Type): $BlockState
public "triggerEvent"(state: $BlockState$Type, world: $Level$Type, pos: $BlockPos$Type, eventID: integer, eventParam: integer): boolean
public "use"(state: $BlockState$Type, level: $Level$Type, pos: $BlockPos$Type, player: $Player$Type, handIn: $InteractionHand$Type, hit: $BlockHitResult$Type): $InteractionResult
public "hasAnalogOutputSignal"(state: $BlockState$Type): boolean
public "rotate"(state: $BlockState$Type, rot: $Rotation$Type): $BlockState
public "mirror"(state: $BlockState$Type, mirrorIn: $Mirror$Type): $BlockState
public "canSurvive"(state: $BlockState$Type, level: $LevelReader$Type, pos: $BlockPos$Type): boolean
public "getAnalogOutputSignal"(blockState: $BlockState$Type, level: $Level$Type, pos: $BlockPos$Type): integer
public "getShape"(state: $BlockState$Type, level: $BlockGetter$Type, pos: $BlockPos$Type, context: $CollisionContext$Type): $VoxelShape
public static "displayCurrentCoordinates"(level: $Level$Type, player: $Player$Type, pos: $BlockPos$Type): void
public "animateTick"(stateIn: $BlockState$Type, level: $Level$Type, pos: $BlockPos$Type, rand: $RandomSource$Type): void
public "tryWash"(level: $Level$Type, pos: $BlockPos$Type, state: $BlockState$Type): boolean
public "newBlockEntity"(pPos: $BlockPos$Type, pState: $BlockState$Type): $BlockEntity
public "getListener"<T extends $BlockEntity>(arg0: $ServerLevel$Type, arg1: T): $GameEventListener
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GlobeBlock$Type = ($GlobeBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GlobeBlock_ = $GlobeBlock$Type;
}}
declare module "packages/net/mehvahdjukaar/modelfix/forge/$PlatStuffImpl" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $PlatStuffImpl {

constructor()

public static "isModStateValid"(): boolean
get "modStateValid"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PlatStuffImpl$Type = ($PlatStuffImpl);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PlatStuffImpl_ = $PlatStuffImpl$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/events/$IVillagerBrainEvent" {
import {$Villager, $Villager$Type} from "packages/net/minecraft/world/entity/npc/$Villager"
import {$SensorType, $SensorType$Type} from "packages/net/minecraft/world/entity/ai/sensing/$SensorType"
import {$Activity, $Activity$Type} from "packages/net/minecraft/world/entity/schedule/$Activity"
import {$ImmutableList, $ImmutableList$Type} from "packages/com/google/common/collect/$ImmutableList"
import {$SimpleEvent, $SimpleEvent$Type} from "packages/net/mehvahdjukaar/moonlight/api/events/$SimpleEvent"
import {$VillagerBrainEventInternal, $VillagerBrainEventInternal$Type} from "packages/net/mehvahdjukaar/moonlight/core/misc/$VillagerBrainEventInternal"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$Pair, $Pair$Type} from "packages/com/mojang/datafixers/util/$Pair"
import {$MemoryModuleType, $MemoryModuleType$Type} from "packages/net/minecraft/world/entity/ai/memory/$MemoryModuleType"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export interface $IVillagerBrainEvent extends $SimpleEvent {

 "addOrReplaceActivity"(arg0: $Activity$Type, arg1: $ImmutableList$Type<(any)>): void
 "getInternal"(): $VillagerBrainEventInternal
 "getMemories"(): $Map<($MemoryModuleType<(any)>), ($Optional<(any)>)>
 "getVillager"(): $Villager
 "scheduleActivity"(arg0: $Activity$Type, arg1: integer, arg2: integer): void
 "addTaskToActivity"<P extends $Pair<(integer), (any)>>(arg0: $Activity$Type, arg1: P): boolean
 "addSensor"(arg0: $SensorType$Type<(any)>): void
}

export namespace $IVillagerBrainEvent {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IVillagerBrainEvent$Type = ($IVillagerBrainEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IVillagerBrainEvent_ = $IVillagerBrainEvent$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/cauldron/$CauldronBehaviorsManager" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $CauldronBehaviorsManager {

constructor()

public static "registerBehaviors"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CauldronBehaviorsManager$Type = ($CauldronBehaviorsManager);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CauldronBehaviorsManager_ = $CauldronBehaviorsManager$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/forge/$SupplementariesForge" {
import {$ToolAction, $ToolAction$Type} from "packages/net/minecraftforge/common/$ToolAction"
import {$RegisterCapabilitiesEvent, $RegisterCapabilitiesEvent$Type} from "packages/net/minecraftforge/common/capabilities/$RegisterCapabilitiesEvent"
import {$RegisterEvent, $RegisterEvent$Type} from "packages/net/minecraftforge/registries/$RegisterEvent"
import {$FMLCommonSetupEvent, $FMLCommonSetupEvent$Type} from "packages/net/minecraftforge/fml/event/lifecycle/$FMLCommonSetupEvent"

export class $SupplementariesForge {
static readonly "SOAP_CLEAN": $ToolAction

constructor()

public "setup"(event: $FMLCommonSetupEvent$Type): void
public "registerOverrides"(event: $RegisterEvent$Type): void
public "registerCapabilities"(event: $RegisterCapabilitiesEvent$Type): void
set "up"(value: $FMLCommonSetupEvent$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SupplementariesForge$Type = ($SupplementariesForge);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SupplementariesForge_ = $SupplementariesForge$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/renderers/color/$TippedSpikesColor" {
import {$BlockColor, $BlockColor$Type} from "packages/net/minecraft/client/color/block/$BlockColor"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$ItemColor, $ItemColor$Type} from "packages/net/minecraft/client/color/item/$ItemColor"
import {$BlockAndTintGetter, $BlockAndTintGetter$Type} from "packages/net/minecraft/world/level/$BlockAndTintGetter"

export class $TippedSpikesColor implements $BlockColor, $ItemColor {

constructor()

public "getColor"(stack: $ItemStack$Type, tint: integer): integer
public "getColor"(state: $BlockState$Type, world: $BlockAndTintGetter$Type, pos: $BlockPos$Type, tint: integer): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TippedSpikesColor$Type = ($TippedSpikesColor);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TippedSpikesColor_ = $TippedSpikesColor$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/hourglass/$HourglassTimesManager" {
import {$RegistryAccess, $RegistryAccess$Type} from "packages/net/minecraft/core/$RegistryAccess"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$JsonElement, $JsonElement$Type} from "packages/com/google/gson/$JsonElement"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$HourglassTimeData, $HourglassTimeData$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/hourglass/$HourglassTimeData"
import {$RegistryAccessJsonReloadListener, $RegistryAccessJsonReloadListener$Type} from "packages/net/mehvahdjukaar/moonlight/api/misc/$RegistryAccessJsonReloadListener"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $HourglassTimesManager extends $RegistryAccessJsonReloadListener {
static readonly "RELOAD_INSTANCE": $HourglassTimesManager

constructor()

public "parse"(jsonMap: $Map$Type<($ResourceLocation$Type), ($JsonElement$Type)>, access: $RegistryAccess$Type): void
public static "getData"(item: $Item$Type): $HourglassTimeData
public static "acceptClientData"(hourglass: $List$Type<($HourglassTimeData$Type)>): void
public static "sendDataToClient"(player: $ServerPlayer$Type): void
public static "addData"(data: $HourglassTimeData$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $HourglassTimesManager$Type = ($HourglassTimesManager);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $HourglassTimesManager_ = $HourglassTimesManager$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/$TextHolder" {
import {$FormattedCharSequence, $FormattedCharSequence$Type} from "packages/net/minecraft/util/$FormattedCharSequence"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$BooleanSupplier, $BooleanSupplier$Type} from "packages/java/util/function/$BooleanSupplier"
import {$Vector3f, $Vector3f$Type} from "packages/org/joml/$Vector3f"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$IAntiqueTextProvider, $IAntiqueTextProvider$Type} from "packages/net/mehvahdjukaar/supplementaries/api/$IAntiqueTextProvider"
import {$Font, $Font$Type} from "packages/net/minecraft/client/gui/$Font"
import {$DyeColor, $DyeColor$Type} from "packages/net/minecraft/world/item/$DyeColor"
import {$TextUtil$RenderProperties, $TextUtil$RenderProperties$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/util/$TextUtil$RenderProperties"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$FilteredText, $FilteredText$Type} from "packages/net/minecraft/server/network/$FilteredText"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$List, $List$Type} from "packages/java/util/$List"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $TextHolder implements $IAntiqueTextProvider {

constructor(size: integer, maxWidth: integer)

public "load"(compound: $CompoundTag$Type, level: $Level$Type, pos: $BlockPos$Type): void
public "clear"(): void
public "isEmpty"(player: $Player$Type): boolean
public "size"(): integer
public "getMessage"(line: integer, filtered: boolean): $Component
public "save"(compound: $CompoundTag$Type): $CompoundTag
public "setColor"(newColor: $DyeColor$Type): boolean
public "computeRenderProperties"(combinedLight: integer, normal: $Vector3f$Type, shouldShowGlow: $BooleanSupplier$Type): $TextUtil$RenderProperties
public "getMessages"(filtered: boolean): ($Component)[]
public "getRenderMessages"(line: integer, font: $Font$Type): $FormattedCharSequence
public "getMaxLineCharacters"(): integer
public "setMessage"(i: integer, component: $Component$Type): void
public "setMessage"(i: integer, message: $Component$Type, filtered: $Component$Type): void
public "hasEditableText"(filtering: boolean): boolean
public "hasGlowingText"(): boolean
public "acceptClientMessages"(player: $Player$Type, list: $List$Type<($FilteredText$Type)>): void
public "hasAntiqueInk"(): boolean
public "setAntiqueInk"(hasInk: boolean): void
public "clearEffects"(): void
public "getColor"(): $DyeColor
public "playerInteract"(level: $Level$Type, pos: $BlockPos$Type, player: $Player$Type, hand: $InteractionHand$Type): $InteractionResult
public "executeClickCommandsIfPresent"(player: $Player$Type, level: $Level$Type, pos: $BlockPos$Type): boolean
public "setHasGlowingText"(glowing: boolean): void
public "getGUIRenderTextProperties"(): $TextUtil$RenderProperties
public "getMaxLineVisualWidth"(): integer
set "color"(value: $DyeColor$Type)
get "maxLineCharacters"(): integer
set "antiqueInk"(value: boolean)
get "color"(): $DyeColor
get "gUIRenderTextProperties"(): $TextUtil$RenderProperties
get "maxLineVisualWidth"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TextHolder$Type = ($TextHolder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TextHolder_ = $TextHolder$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/util/math/kmeans/$IDataEntry" {
import {$List, $List$Type} from "packages/java/util/$List"

export interface $IDataEntry<T> {

 "cast"(): T
 "average"(arg0: $List$Type<($IDataEntry$Type<(T)>)>): $IDataEntry<(T)>
 "distTo"(arg0: $IDataEntry$Type<(T)>): float
 "getClusterNo"(): integer
 "setClusterNo"(arg0: integer): void
}

export namespace $IDataEntry {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IDataEntry$Type<T> = ($IDataEntry<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IDataEntry_<T> = $IDataEntry$Type<(T)>;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/entities/$RopeArrowEntity" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Packet, $Packet$Type} from "packages/net/minecraft/network/protocol/$Packet"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$ClientGamePacketListener, $ClientGamePacketListener$Type} from "packages/net/minecraft/network/protocol/game/$ClientGamePacketListener"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$AbstractArrow, $AbstractArrow$Type} from "packages/net/minecraft/world/entity/projectile/$AbstractArrow"
import {$IntOpenHashSet, $IntOpenHashSet$Type} from "packages/it/unimi/dsi/fastutil/ints/$IntOpenHashSet"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$AbstractArrow$Pickup, $AbstractArrow$Pickup$Type} from "packages/net/minecraft/world/entity/projectile/$AbstractArrow$Pickup"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $RopeArrowEntity extends $AbstractArrow {
 "pickup": $AbstractArrow$Pickup
 "shakeTime": integer
 "piercingIgnoreEntityIds": $IntOpenHashSet
 "ownerUUID": $UUID
 "cachedOwner": $Entity
 "leftOwner": boolean
 "hasBeenShot": boolean
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(worldIn: $Level$Type, x: double, y: double, z: double)
constructor(worldIn: $Level$Type, x: double, y: double, z: double, charges: integer)
constructor(worldIn: $Level$Type, throwerIn: $LivingEntity$Type, charges: integer)
constructor(type: $EntityType$Type<(any)>, world: $Level$Type)

public "tick"(): void
public "playerTouch"(entityIn: $Player$Type): void
public "readAdditionalSaveData"(compound: $CompoundTag$Type): void
public "addAdditionalSaveData"(compound: $CompoundTag$Type): void
public "getAddEntityPacket"(): $Packet<($ClientGamePacketListener)>
get "addEntityPacket"(): $Packet<($ClientGamePacketListener)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RopeArrowEntity$Type = ($RopeArrowEntity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RopeArrowEntity_ = $RopeArrowEntity$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/integration/$InspirationCompat" {
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$SoftFluidTank, $SoftFluidTank$Type} from "packages/net/mehvahdjukaar/moonlight/api/fluids/$SoftFluidTank"
import {$FaucetBlockTile$FillAction, $FaucetBlockTile$FillAction$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$FaucetBlockTile$FillAction"

export class $InspirationCompat {

constructor()

public static "doCauldronStuff"(blockEntity: $BlockEntity$Type, tempFluidHolder: $SoftFluidTank$Type, o: $FaucetBlockTile$FillAction$Type): $InteractionResult
public static "tryAddFluid"(blockEntity: $BlockEntity$Type, tempFluidHolder: $SoftFluidTank$Type): $InteractionResult
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $InspirationCompat$Type = ($InspirationCompat);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $InspirationCompat_ = $InspirationCompat$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/screens/$ConfigButton" {
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Button, $Button$Type} from "packages/net/minecraft/client/gui/components/$Button"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Button$OnPress, $Button$OnPress$Type} from "packages/net/minecraft/client/gui/components/$Button$OnPress"

export class $ConfigButton extends $Button {
static readonly "SMALL_WIDTH": integer
static readonly "DEFAULT_WIDTH": integer
static readonly "DEFAULT_HEIGHT": integer
 "onPress": $Button$OnPress
static readonly "WIDGETS_LOCATION": $ResourceLocation
static readonly "ACCESSIBILITY_TEXTURE": $ResourceLocation
 "height": integer
 "x": integer
 "y": integer
 "active": boolean
 "visible": boolean
static readonly "UNSET_FG_COLOR": integer

constructor(x: integer, y: integer)

public static "setupConfigButton"(screen: $Screen$Type, listeners: $List$Type<(any)>, adder: $Consumer$Type<($GuiEventListener$Type)>): void
public "getFGColor"(): integer
public static "click"(button: $Button$Type): void
get "fGColor"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ConfigButton$Type = ($ConfigButton);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ConfigButton_ = $ConfigButton$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/integration/$EnchantRedesignCompat" {
import {$VertexConsumer, $VertexConsumer$Type} from "packages/com/mojang/blaze3d/vertex/$VertexConsumer"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"

export class $EnchantRedesignCompat {

constructor()

public static "getBookColoredFoil"(stack: $ItemStack$Type, buffer: $MultiBufferSource$Type): $VertexConsumer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EnchantRedesignCompat$Type = ($EnchantRedesignCompat);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EnchantRedesignCompat_ = $EnchantRedesignCompat$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/common/block/$DirectionalCakeBlock" {
import {$IntegerProperty, $IntegerProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$IntegerProperty"
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$CakeBlock, $CakeBlock$Type} from "packages/net/minecraft/world/level/block/$CakeBlock"
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$Fluid, $Fluid$Type} from "packages/net/minecraft/world/level/material/$Fluid"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$SimpleWaterloggedBlock, $SimpleWaterloggedBlock$Type} from "packages/net/minecraft/world/level/block/$SimpleWaterloggedBlock"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Mirror, $Mirror$Type} from "packages/net/minecraft/world/level/block/$Mirror"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$FluidState, $FluidState$Type} from "packages/net/minecraft/world/level/material/$FluidState"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$CakeRegistry$CakeType, $CakeRegistry$CakeType$Type} from "packages/net/mehvahdjukaar/amendments/common/$CakeRegistry$CakeType"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"
import {$DirectionProperty, $DirectionProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$DirectionProperty"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$CollisionContext, $CollisionContext$Type} from "packages/net/minecraft/world/phys/shapes/$CollisionContext"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$Rotation, $Rotation$Type} from "packages/net/minecraft/world/level/block/$Rotation"

export class $DirectionalCakeBlock extends $CakeBlock implements $SimpleWaterloggedBlock {
static readonly "FACING": $DirectionProperty
static readonly "WATERLOGGED": $BooleanProperty
readonly "type": $CakeRegistry$CakeType
static readonly "MAX_BITES": integer
static readonly "BITES": $IntegerProperty
static readonly "FULL_CAKE_SIGNAL": integer
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(type: $CakeRegistry$CakeType$Type)

public "getStateForPlacement"(context: $BlockPlaceContext$Type): $BlockState
public "getCloneItemStack"(level: $BlockGetter$Type, pos: $BlockPos$Type, state: $BlockState$Type): $ItemStack
public "getName"(): $MutableComponent
public "eatSliceD"(world: $LevelAccessor$Type, pos: $BlockPos$Type, state: $BlockState$Type, player: $Player$Type, dir: $Direction$Type): $InteractionResult
public "removeSlice"(state: $BlockState$Type, pos: $BlockPos$Type, world: $LevelAccessor$Type, dir: $Direction$Type): void
public static "getHitDir"(player: $Player$Type, hit: $BlockHitResult$Type): $Direction
public "updateShape"(stateIn: $BlockState$Type, facing: $Direction$Type, facingState: $BlockState$Type, worldIn: $LevelAccessor$Type, currentPos: $BlockPos$Type, facingPos: $BlockPos$Type): $BlockState
public "use"(state: $BlockState$Type, level: $Level$Type, pos: $BlockPos$Type, player: $Player$Type, handIn: $InteractionHand$Type, hit: $BlockHitResult$Type): $InteractionResult
public "getFluidState"(state: $BlockState$Type): $FluidState
public "rotate"(state: $BlockState$Type, rot: $Rotation$Type): $BlockState
public "mirror"(state: $BlockState$Type, mirrorIn: $Mirror$Type): $BlockState
public "getShape"(state: $BlockState$Type, worldIn: $BlockGetter$Type, pos: $BlockPos$Type, context: $CollisionContext$Type): $VoxelShape
public "animateTick"(stateIn: $BlockState$Type, level: $Level$Type, pos: $BlockPos$Type, rand: $RandomSource$Type): void
public "getPickupSound"(): $Optional<($SoundEvent)>
public "canPlaceLiquid"(arg0: $BlockGetter$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: $Fluid$Type): boolean
public "placeLiquid"(arg0: $LevelAccessor$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: $FluidState$Type): boolean
public "pickupBlock"(arg0: $LevelAccessor$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type): $ItemStack
public "getPickupSound"(arg0: $BlockState$Type): $Optional<($SoundEvent)>
get "name"(): $MutableComponent
get "pickupSound"(): $Optional<($SoundEvent)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DirectionalCakeBlock$Type = ($DirectionalCakeBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DirectionalCakeBlock_ = $DirectionalCakeBlock$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/core/client/$MLRenderTypes" {
import {$RenderStateShard$OverlayStateShard, $RenderStateShard$OverlayStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$OverlayStateShard"
import {$RenderStateShard$LineStateShard, $RenderStateShard$LineStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$LineStateShard"
import {$RenderStateShard$EmptyTextureStateShard, $RenderStateShard$EmptyTextureStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$EmptyTextureStateShard"
import {$RenderStateShard$LayeringStateShard, $RenderStateShard$LayeringStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$LayeringStateShard"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Runnable, $Runnable$Type} from "packages/java/lang/$Runnable"
import {$RenderType, $RenderType$Type} from "packages/net/minecraft/client/renderer/$RenderType"
import {$RenderStateShard$OutputStateShard, $RenderStateShard$OutputStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$OutputStateShard"
import {$RenderStateShard$ColorLogicStateShard, $RenderStateShard$ColorLogicStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$ColorLogicStateShard"
import {$VertexFormat$Mode, $VertexFormat$Mode$Type} from "packages/com/mojang/blaze3d/vertex/$VertexFormat$Mode"
import {$RenderStateShard$ShaderStateShard, $RenderStateShard$ShaderStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$ShaderStateShard"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$RenderStateShard$DepthTestStateShard, $RenderStateShard$DepthTestStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$DepthTestStateShard"
import {$DrawBuffer, $DrawBuffer$Type} from "packages/com/jozufozu/flywheel/backend/instancing/$DrawBuffer"
import {$ShaderInstance, $ShaderInstance$Type} from "packages/net/minecraft/client/renderer/$ShaderInstance"
import {$RenderStateShard$TransparencyStateShard, $RenderStateShard$TransparencyStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$TransparencyStateShard"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$RenderStateShard$CullStateShard, $RenderStateShard$CullStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$CullStateShard"
import {$RenderStateShard$TexturingStateShard, $RenderStateShard$TexturingStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$TexturingStateShard"
import {$RenderStateShard$TextureStateShard, $RenderStateShard$TextureStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$TextureStateShard"
import {$RenderStateShard$LightmapStateShard, $RenderStateShard$LightmapStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$LightmapStateShard"
import {$RenderStateShard$WriteMaskStateShard, $RenderStateShard$WriteMaskStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$WriteMaskStateShard"
import {$RenderType$CompositeRenderType, $RenderType$CompositeRenderType$Type} from "packages/net/minecraft/client/renderer/$RenderType$CompositeRenderType"
import {$VertexFormat, $VertexFormat$Type} from "packages/com/mojang/blaze3d/vertex/$VertexFormat"

export class $MLRenderTypes extends $RenderType {
static "textColorShader": $Supplier<($ShaderInstance)>
static readonly "COLOR_TEXT": $Function<($ResourceLocation), ($RenderType)>
static readonly "TEXT_MIP": $Function<($ResourceLocation), ($RenderType)>
static readonly "ENTITY_SOLID_MIP": $Function<($ResourceLocation), ($RenderType)>
static readonly "ENTITY_CUTOUT_MIP": $Function<($ResourceLocation), ($RenderType)>
static readonly "BIG_BUFFER_SIZE": integer
static readonly "MEDIUM_BUFFER_SIZE": integer
static readonly "SMALL_BUFFER_SIZE": integer
static readonly "TRANSIENT_BUFFER_SIZE": integer
static readonly "LINES": $RenderType$CompositeRenderType
static readonly "LINE_STRIP": $RenderType$CompositeRenderType
 "sortOnUpload": boolean
static readonly "VIEW_SCALE_Z_EPSILON": float
static readonly "MAX_ENCHANTMENT_GLINT_SPEED_MILLIS": double
readonly "name": string
 "setupState": $Runnable
static readonly "NO_TRANSPARENCY": $RenderStateShard$TransparencyStateShard
static readonly "ADDITIVE_TRANSPARENCY": $RenderStateShard$TransparencyStateShard
static readonly "LIGHTNING_TRANSPARENCY": $RenderStateShard$TransparencyStateShard
static readonly "GLINT_TRANSPARENCY": $RenderStateShard$TransparencyStateShard
static readonly "CRUMBLING_TRANSPARENCY": $RenderStateShard$TransparencyStateShard
static readonly "TRANSLUCENT_TRANSPARENCY": $RenderStateShard$TransparencyStateShard
static readonly "NO_SHADER": $RenderStateShard$ShaderStateShard
static readonly "POSITION_COLOR_LIGHTMAP_SHADER": $RenderStateShard$ShaderStateShard
static readonly "POSITION_SHADER": $RenderStateShard$ShaderStateShard
static readonly "POSITION_COLOR_TEX_SHADER": $RenderStateShard$ShaderStateShard
static readonly "POSITION_TEX_SHADER": $RenderStateShard$ShaderStateShard
static readonly "POSITION_COLOR_TEX_LIGHTMAP_SHADER": $RenderStateShard$ShaderStateShard
static readonly "POSITION_COLOR_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_SOLID_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_CUTOUT_MIPPED_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_CUTOUT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_TRANSLUCENT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_TRANSLUCENT_MOVING_BLOCK_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_TRANSLUCENT_NO_CRUMBLING_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ARMOR_CUTOUT_NO_CULL_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_SOLID_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_CUTOUT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_CUTOUT_NO_CULL_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_CUTOUT_NO_CULL_Z_OFFSET_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ITEM_ENTITY_TRANSLUCENT_CULL_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_TRANSLUCENT_CULL_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_TRANSLUCENT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_TRANSLUCENT_EMISSIVE_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_SMOOTH_CUTOUT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_BEACON_BEAM_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_DECAL_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_NO_OUTLINE_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_SHADOW_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_ALPHA_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_EYES_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENERGY_SWIRL_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_LEASH_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_WATER_MASK_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_OUTLINE_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ARMOR_GLINT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ARMOR_ENTITY_GLINT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_GLINT_TRANSLUCENT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_GLINT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_GLINT_DIRECT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_GLINT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_GLINT_DIRECT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_CRUMBLING_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_TEXT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_TEXT_BACKGROUND_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_TEXT_INTENSITY_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_TEXT_SEE_THROUGH_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_TEXT_BACKGROUND_SEE_THROUGH_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_TEXT_INTENSITY_SEE_THROUGH_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_LIGHTNING_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_TRIPWIRE_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_END_PORTAL_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_END_GATEWAY_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_LINES_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_GUI_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_GUI_OVERLAY_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_GUI_TEXT_HIGHLIGHT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_GUI_GHOST_RECIPE_OVERLAY_SHADER": $RenderStateShard$ShaderStateShard
static readonly "BLOCK_SHEET_MIPPED": $RenderStateShard$TextureStateShard
static readonly "BLOCK_SHEET": $RenderStateShard$TextureStateShard
static readonly "NO_TEXTURE": $RenderStateShard$EmptyTextureStateShard
static readonly "DEFAULT_TEXTURING": $RenderStateShard$TexturingStateShard
static readonly "GLINT_TEXTURING": $RenderStateShard$TexturingStateShard
static readonly "ENTITY_GLINT_TEXTURING": $RenderStateShard$TexturingStateShard
static readonly "LIGHTMAP": $RenderStateShard$LightmapStateShard
static readonly "NO_LIGHTMAP": $RenderStateShard$LightmapStateShard
static readonly "OVERLAY": $RenderStateShard$OverlayStateShard
static readonly "NO_OVERLAY": $RenderStateShard$OverlayStateShard
static readonly "CULL": $RenderStateShard$CullStateShard
static readonly "NO_CULL": $RenderStateShard$CullStateShard
static readonly "NO_DEPTH_TEST": $RenderStateShard$DepthTestStateShard
static readonly "EQUAL_DEPTH_TEST": $RenderStateShard$DepthTestStateShard
static readonly "LEQUAL_DEPTH_TEST": $RenderStateShard$DepthTestStateShard
static readonly "GREATER_DEPTH_TEST": $RenderStateShard$DepthTestStateShard
static readonly "COLOR_DEPTH_WRITE": $RenderStateShard$WriteMaskStateShard
static readonly "COLOR_WRITE": $RenderStateShard$WriteMaskStateShard
static readonly "DEPTH_WRITE": $RenderStateShard$WriteMaskStateShard
static readonly "NO_LAYERING": $RenderStateShard$LayeringStateShard
static readonly "POLYGON_OFFSET_LAYERING": $RenderStateShard$LayeringStateShard
static readonly "VIEW_OFFSET_Z_LAYERING": $RenderStateShard$LayeringStateShard
static readonly "MAIN_TARGET": $RenderStateShard$OutputStateShard
static readonly "OUTLINE_TARGET": $RenderStateShard$OutputStateShard
static readonly "TRANSLUCENT_TARGET": $RenderStateShard$OutputStateShard
static readonly "PARTICLES_TARGET": $RenderStateShard$OutputStateShard
static readonly "WEATHER_TARGET": $RenderStateShard$OutputStateShard
static readonly "CLOUDS_TARGET": $RenderStateShard$OutputStateShard
static readonly "ITEM_ENTITY_TARGET": $RenderStateShard$OutputStateShard
static readonly "DEFAULT_LINE": $RenderStateShard$LineStateShard
static readonly "NO_COLOR_LOGIC": $RenderStateShard$ColorLogicStateShard
static readonly "OR_REVERSE_COLOR_LOGIC": $RenderStateShard$ColorLogicStateShard

constructor(pName: string, pFormat: $VertexFormat$Type, pMode: $VertexFormat$Mode$Type, pBufferSize: integer, pAffectsCrumbling: boolean, pSortOnUpload: boolean, pSetupState: $Runnable$Type, pClearState: $Runnable$Type)

public static "getDrawBuffer"(arg0: $RenderType$Type): $DrawBuffer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MLRenderTypes$Type = ($MLRenderTypes);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MLRenderTypes_ = $MLRenderTypes$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/network/$ServerBoundSelectMerchantTradePacket" {
import {$Message, $Message$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/network/$Message"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$ChannelHandler$Context, $ChannelHandler$Context$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/network/$ChannelHandler$Context"

export class $ServerBoundSelectMerchantTradePacket implements $Message {

constructor(buf: $FriendlyByteBuf$Type)
constructor(slot: integer)

public "handle"(context: $ChannelHandler$Context$Type): void
public "writeToBuffer"(buf: $FriendlyByteBuf$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ServerBoundSelectMerchantTradePacket$Type = ($ServerBoundSelectMerchantTradePacket);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ServerBoundSelectMerchantTradePacket_ = $ServerBoundSelectMerchantTradePacket$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/configs/$CommonConfigs" {
import {$ConfigSpec, $ConfigSpec$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/configs/$ConfigSpec"
import {$List, $List$Type} from "packages/java/util/$List"
import {$CommonConfigs$MixingMode, $CommonConfigs$MixingMode$Type} from "packages/net/mehvahdjukaar/amendments/configs/$CommonConfigs$MixingMode"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"
import {$FallingLanternEntity$FallMode, $FallingLanternEntity$FallMode$Type} from "packages/net/mehvahdjukaar/amendments/common/entity/$FallingLanternEntity$FallMode"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $CommonConfigs {
static readonly "HANGING_SIGN_ITEM": $Supplier<(boolean)>
static readonly "LIQUID_CAULDRON": $Supplier<(boolean)>
static readonly "CONNECT_TO_FENCES": $Supplier<(boolean)>
static readonly "POTION_MIXING": $Supplier<($CommonConfigs$MixingMode)>
static readonly "POTION_MIXING_LIMIT": $Supplier<(integer)>
static readonly "INVERSE_POTIONS": $Supplier<($Map<($MobEffect), ($MobEffect)>)>
static readonly "DYE_WATER": $Supplier<(boolean)>
static readonly "CAULDRON_CRAFTING": $Supplier<(boolean)>
static readonly "DYE_RECIPES_PER_LAYER": $Supplier<(integer)>
static readonly "POTION_RECIPES_PER_LAYER": $Supplier<(integer)>
static readonly "TOOL_HOOK": $Supplier<(boolean)>
static readonly "CARPETED_STAIRS": $Supplier<(boolean)>
static readonly "CARPETED_SLABS": $Supplier<(boolean)>
static readonly "DOUBLE_CAKES": $Supplier<(boolean)>
static readonly "DIRECTIONAL_CAKE": $Supplier<(boolean)>
static readonly "SKULL_PILES": $Supplier<(boolean)>
static readonly "SKULL_CANDLES": $Supplier<(boolean)>
static readonly "SKULL_CANDLES_MULTIPLE": $Supplier<(boolean)>
static readonly "HANGING_POT": $Supplier<(boolean)>
static readonly "WALL_LANTERN": $Supplier<(boolean)>
static readonly "WALL_LANTERN_HIGH_PRIORITY": $Supplier<(boolean)>
static readonly "WALL_LANTERN_BLACKLIST": $Supplier<($List<(string)>)>
static readonly "WALL_LANTERN_WHITELIST": $Supplier<($List<(string)>)>
static readonly "FALLING_LANTERNS": $Supplier<($FallingLanternEntity$FallMode)>
static readonly "CEILING_BANNERS": $Supplier<(boolean)>
static readonly "BELL_CHAIN_RINGING": $Supplier<(boolean)>
static readonly "BELL_CHAIN_LENGTH": $Supplier<(integer)>
static readonly "DYE_BLOCKS": $Supplier<(boolean)>
static readonly "LILY_PADS_ON": $Supplier<(boolean)>
static readonly "LECTERN_STUFF": $Supplier<(boolean)>
static readonly "TORCH_FIRE": $Supplier<(boolean)>
static readonly "TORCH_FIRE_OFFHAND": $Supplier<(boolean)>
static readonly "TORCH_FIRE_DURATION": $Supplier<(integer)>
static readonly "SPEC": $ConfigSpec

constructor()

public static "init"(): void
public static "isFlagOn"(s: string): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CommonConfigs$Type = ($CommonConfigs);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CommonConfigs_ = $CommonConfigs$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/entities/goals/$EatFodderGoal" {
import {$MoveToBlockGoal, $MoveToBlockGoal$Type} from "packages/net/minecraft/world/entity/ai/goal/$MoveToBlockGoal"
import {$Animal, $Animal$Type} from "packages/net/minecraft/world/entity/animal/$Animal"

export class $EatFodderGoal extends $MoveToBlockGoal {
readonly "speedModifier": double

constructor(entity: $Animal$Type, speedModifier: double, searchRange: integer, verticalSearchRange: integer, breakTime: integer)

public "acceptedDistance"(): double
public "canUse"(): boolean
public "canContinueToUse"(): boolean
public "start"(): void
public "stop"(): void
public "tick"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EatFodderGoal$Type = ($EatFodderGoal);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EatFodderGoal_ = $EatFodderGoal$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/map/markers/$MapBlockMarker" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$CustomMapDecoration, $CustomMapDecoration$Type} from "packages/net/mehvahdjukaar/moonlight/api/map/$CustomMapDecoration"
import {$MapItemSavedData, $MapItemSavedData$Type} from "packages/net/minecraft/world/level/saveddata/maps/$MapItemSavedData"
import {$MapDecorationType, $MapDecorationType$Type} from "packages/net/mehvahdjukaar/moonlight/api/map/type/$MapDecorationType"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $MapBlockMarker<D extends $CustomMapDecoration> {
static readonly "HAS_SMALL_TEXTURE_FLAG": integer


public "getName"(): $Component
public "equals"(o: any): boolean
public "hashCode"(): integer
public "setName"(name: $Component$Type): void
public "getType"(): $MapDecorationType<(D), (any)>
public "getFlags"(): integer
public "loadFromNBT"(compound: $CompoundTag$Type): void
/**
 * 
 * @deprecated
 */
public "saveToNBT"(compound: $CompoundTag$Type): $CompoundTag
public "saveToNBT"(): $CompoundTag
public "getMarkerId"(): string
public "setPos"(pos: $BlockPos$Type): void
public "hasFlag"(flag: integer): boolean
public "getRotation"(): float
public "setRotation"(rot: integer): void
public "setPersistent"(persistent: boolean): void
public "shouldRefresh"(): boolean
public "getPos"(): $BlockPos
public "getTypeId"(): string
public "shouldSave"(): boolean
public "createDecorationFromMarker"(data: $MapItemSavedData$Type): D
get "name"(): $Component
set "name"(value: $Component$Type)
get "type"(): $MapDecorationType<(D), (any)>
get "flags"(): integer
get "markerId"(): string
set "pos"(value: $BlockPos$Type)
get "rotation"(): float
set "rotation"(value: integer)
set "persistent"(value: boolean)
get "pos"(): $BlockPos
get "typeId"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MapBlockMarker$Type<D> = ($MapBlockMarker<(D)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MapBlockMarker_<D> = $MapBlockMarker$Type<(D)>;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/util/$PotionNBTHelper$Type" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export class $PotionNBTHelper$Type extends $Enum<($PotionNBTHelper$Type)> {
static readonly "REGULAR": $PotionNBTHelper$Type
static readonly "SPLASH": $PotionNBTHelper$Type
static readonly "LINGERING": $PotionNBTHelper$Type


public static "values"(): ($PotionNBTHelper$Type)[]
public static "valueOf"(name: string): $PotionNBTHelper$Type
public "applyToTag"(tag: $CompoundTag$Type): void
public "getDefaultItem"(): $ItemStack
get "defaultItem"(): $ItemStack
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PotionNBTHelper$Type$Type = (("lingering") | ("splash") | ("regular")) | ($PotionNBTHelper$Type);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PotionNBTHelper$Type_ = $PotionNBTHelper$Type$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$SackBlockTile" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$AbstractContainerMenu, $AbstractContainerMenu$Type} from "packages/net/minecraft/world/inventory/$AbstractContainerMenu"
import {$OpeneableContainerBlockEntity, $OpeneableContainerBlockEntity$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$OpeneableContainerBlockEntity"
import {$LockCode, $LockCode$Type} from "packages/net/minecraft/world/$LockCode"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"

export class $SackBlockTile extends $OpeneableContainerBlockEntity {
static readonly "LOOT_TABLE_TAG": string
static readonly "LOOT_TABLE_SEED_TAG": string
 "lootTable": $ResourceLocation
 "lootTableSeed": long
 "lockKey": $LockCode
 "blockState": $BlockState

constructor(pos: $BlockPos$Type, state: $BlockState$Type)

public static "getUnlockedSlots"(): integer
public "acceptsTransfer"(player: $Player$Type): boolean
public "isSlotUnlocked"(ind: integer): boolean
public "getContainerSize"(): integer
public "canTakeItemThroughFace"(index: integer, stack: $ItemStack$Type, direction: $Direction$Type): boolean
public "canPlaceItemThroughFace"(index: integer, stack: $ItemStack$Type, direction: $Direction$Type): boolean
public "canPlaceItem"(index: integer, stack: $ItemStack$Type): boolean
public "m_6555_"(id: integer, inv: $Inventory$Type): $AbstractContainerMenu
public "m_6820_"(): $Component
public "setChanged"(): void
public static "stillValidBlockEntity"(arg0: $BlockEntity$Type, arg1: $Player$Type, arg2: integer): boolean
public static "stillValidBlockEntity"(arg0: $BlockEntity$Type, arg1: $Player$Type): boolean
public static "tryClear"(arg0: any): void
get "unlockedSlots"(): integer
get "containerSize"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SackBlockTile$Type = ($SackBlockTile);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SackBlockTile_ = $SackBlockTile$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/block/$ILightable$FireSourceType" {
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $ILightable$FireSourceType extends $Enum<($ILightable$FireSourceType)> {
static readonly "FLINT_AND_STEEL": $ILightable$FireSourceType
static readonly "FIRE_CHANGE": $ILightable$FireSourceType
static readonly "FLAMING_ARROW": $ILightable$FireSourceType


public static "values"(): ($ILightable$FireSourceType)[]
public static "valueOf"(name: string): $ILightable$FireSourceType
public "play"(world: $LevelAccessor$Type, pos: $BlockPos$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ILightable$FireSourceType$Type = (("flint_and_steel") | ("flaming_arrow") | ("fire_change")) | ($ILightable$FireSourceType);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ILightable$FireSourceType_ = $ILightable$FireSourceType$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/screens/$PulleyScreen" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$AbstractContainerScreen, $AbstractContainerScreen$Type} from "packages/net/minecraft/client/gui/screens/inventory/$AbstractContainerScreen"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"
import {$PulleyContainerMenu, $PulleyContainerMenu$Type} from "packages/net/mehvahdjukaar/supplementaries/common/inventories/$PulleyContainerMenu"

export class $PulleyScreen extends $AbstractContainerScreen<($PulleyContainerMenu)> {
static readonly "INVENTORY_LOCATION": $ResourceLocation
static readonly "SLOT_ITEM_BLIT_OFFSET": integer
 "imageWidth": integer
 "hoveredSlot": $Slot
 "leftPos": integer
 "topPos": integer
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering

constructor(container: $PulleyContainerMenu$Type, inventory: $Inventory$Type, text: $Component$Type)

public "keyPressed"(key: integer, b: integer, c: integer): boolean
public "m_7856_"(): void
public "render"(matrixStack: $GuiGraphics$Type, mouseX: integer, mouseY: integer, partialTicks: float): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PulleyScreen$Type = ($PulleyScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PulleyScreen_ = $PulleyScreen$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/blocks/$ChainKnotBlock" {
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$AbstractRopeKnotBlock, $AbstractRopeKnotBlock$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/blocks/$AbstractRopeKnotBlock"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$EnumProperty, $EnumProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$EnumProperty"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$Direction$Axis, $Direction$Axis$Type} from "packages/net/minecraft/core/$Direction$Axis"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$ModBlockProperties$PostType, $ModBlockProperties$PostType$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/$ModBlockProperties$PostType"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $ChainKnotBlock extends $AbstractRopeKnotBlock {
static readonly "SIDE_SHAPE": $VoxelShape
static readonly "WATERLOGGED": $BooleanProperty
static readonly "AXIS": $EnumProperty<($Direction$Axis)>
static readonly "POST_TYPE": $EnumProperty<($ModBlockProperties$PostType)>
static readonly "DOWN": $BooleanProperty
static readonly "UP": $BooleanProperty
static readonly "NORTH": $BooleanProperty
static readonly "SOUTH": $BooleanProperty
static readonly "WEST": $BooleanProperty
static readonly "EAST": $BooleanProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(properties: $BlockBehaviour$Properties$Type)

public "canSideAcceptConnection"(state: $BlockState$Type, direction: $Direction$Type): boolean
public "getCloneItemStack"(level: $BlockGetter$Type, pos: $BlockPos$Type, state: $BlockState$Type): $ItemStack
public "getSideShape"(): $VoxelShape
public "updateShape"(state: $BlockState$Type, facing: $Direction$Type, facingState: $BlockState$Type, world: $LevelAccessor$Type, currentPos: $BlockPos$Type, facingPos: $BlockPos$Type): $BlockState
public "use"(state: $BlockState$Type, world: $Level$Type, pos: $BlockPos$Type, player: $Player$Type, hand: $InteractionHand$Type, hit: $BlockHitResult$Type): $InteractionResult
public "newBlockEntity"(pPos: $BlockPos$Type, pState: $BlockState$Type): $BlockEntity
get "sideShape"(): $VoxelShape
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ChainKnotBlock$Type = ($ChainKnotBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ChainKnotBlock_ = $ChainKnotBlock$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/client/util/forge/$RenderUtilImpl" {
import {$ItemRenderer, $ItemRenderer$Type} from "packages/net/minecraft/client/renderer/entity/$ItemRenderer"
import {$ItemDisplayContext, $ItemDisplayContext$Type} from "packages/net/minecraft/world/item/$ItemDisplayContext"
import {$BlockRenderDispatcher, $BlockRenderDispatcher$Type} from "packages/net/minecraft/client/renderer/block/$BlockRenderDispatcher"
import {$MultiBufferSource$BufferSource, $MultiBufferSource$BufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource$BufferSource"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BakedModel, $BakedModel$Type} from "packages/net/minecraft/client/resources/model/$BakedModel"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $RenderUtilImpl {

constructor()

public static "handleCameraTransforms"(model: $BakedModel$Type, poseStack: $PoseStack$Type, transform: $ItemDisplayContext$Type): $BakedModel
public static "renderGuiItem"(model: $BakedModel$Type, stack: $ItemStack$Type, renderer: $ItemRenderer$Type, combinedLight: integer, pCombinedOverlay: integer, poseStack: $PoseStack$Type, buffer: $MultiBufferSource$BufferSource$Type, flatItem: boolean): void
public static "renderBlock"(model: $BakedModel$Type, seed: long, poseStack: $PoseStack$Type, buffer: $MultiBufferSource$Type, state: $BlockState$Type, level: $Level$Type, pos: $BlockPos$Type, dispatcher: $BlockRenderDispatcher$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RenderUtilImpl$Type = ($RenderUtilImpl);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RenderUtilImpl_ = $RenderUtilImpl$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/platform/$ClientHelper$TooltipComponentEvent" {
import {$TooltipComponent, $TooltipComponent$Type} from "packages/net/minecraft/world/inventory/tooltip/$TooltipComponent"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$Class, $Class$Type} from "packages/java/lang/$Class"

export interface $ClientHelper$TooltipComponentEvent {

 "register"<T extends $TooltipComponent>(arg0: $Class$Type<(T)>, arg1: $Function$Type<(any), (any)>): void

(arg0: $Class$Type<(T)>, arg1: $Function$Type<(any), (any)>): void
}

export namespace $ClientHelper$TooltipComponentEvent {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientHelper$TooltipComponentEvent$Type = ($ClientHelper$TooltipComponentEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientHelper$TooltipComponentEvent_ = $ClientHelper$TooltipComponentEvent$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/$RopeSlideSoundInstance" {
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$AbstractTickableSoundInstance, $AbstractTickableSoundInstance$Type} from "packages/net/minecraft/client/resources/sounds/$AbstractTickableSoundInstance"

export class $RopeSlideSoundInstance extends $AbstractTickableSoundInstance {

constructor(player: $Player$Type)

public "tick"(): void
public "canStartSilent"(): boolean
public "canPlaySound"(): boolean
public static "createUnseededRandom"(): $RandomSource
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RopeSlideSoundInstance$Type = ($RopeSlideSoundInstance);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RopeSlideSoundInstance_ = $RopeSlideSoundInstance$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/renderers/color/$FlowerBoxColor" {
import {$BlockColor, $BlockColor$Type} from "packages/net/minecraft/client/color/block/$BlockColor"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockAndTintGetter, $BlockAndTintGetter$Type} from "packages/net/minecraft/world/level/$BlockAndTintGetter"

export class $FlowerBoxColor implements $BlockColor {

constructor()

public "getColor"(state: $BlockState$Type, world: $BlockAndTintGetter$Type, pos: $BlockPos$Type, tint: integer): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FlowerBoxColor$Type = ($FlowerBoxColor);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FlowerBoxColor_ = $FlowerBoxColor$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/renderers/tiles/$BlackboardBlockTileRenderer" {
import {$BlockEntityRendererProvider$Context, $BlockEntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/blockentity/$BlockEntityRendererProvider$Context"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$BlackboardBlockTile, $BlackboardBlockTile$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$BlackboardBlockTile"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$BlockEntityRenderer, $BlockEntityRenderer$Type} from "packages/net/minecraft/client/renderer/blockentity/$BlockEntityRenderer"

export class $BlackboardBlockTileRenderer implements $BlockEntityRenderer<($BlackboardBlockTile)> {
static readonly "WIDTH": integer

constructor(context: $BlockEntityRendererProvider$Context$Type)

public "getViewDistance"(): integer
public "render"(tile: $BlackboardBlockTile$Type, partialTicks: float, poseStack: $PoseStack$Type, bufferSource: $MultiBufferSource$Type, light: integer, combinedOverlayIn: integer): void
public "shouldRender"(blockEntity: $BlackboardBlockTile$Type, cameraPos: $Vec3$Type): boolean
public "shouldRenderOffScreen"(arg0: $BlackboardBlockTile$Type): boolean
get "viewDistance"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BlackboardBlockTileRenderer$Type = ($BlackboardBlockTileRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BlackboardBlockTileRenderer_ = $BlackboardBlockTileRenderer$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/client/$IScreenProvider" {
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export interface $IScreenProvider {

/**
 * 
 * @deprecated
 */
 "openScreen"(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $Player$Type): void
 "openScreen"(level: $Level$Type, pos: $BlockPos$Type, player: $Player$Type, direction: $Direction$Type): void
 "sendOpenGuiPacket"(level: $Level$Type, pos: $BlockPos$Type, player: $Player$Type, hitFace: $Direction$Type): void
 "sendOpenGuiPacket"(level: $Level$Type, pos: $BlockPos$Type, player: $Player$Type): void

(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $Player$Type): void
}

export namespace $IScreenProvider {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IScreenProvider$Type = ($IScreenProvider);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IScreenProvider_ = $IScreenProvider$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/client/gui/$InkButton$Ink" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $InkButton$Ink extends $Enum<($InkButton$Ink)> {
static readonly "BLACK": $InkButton$Ink
static readonly "DARK_RED": $InkButton$Ink
static readonly "RED": $InkButton$Ink
static readonly "LIGHT_PURPLE": $InkButton$Ink
static readonly "DARK_PURPLE": $InkButton$Ink
static readonly "DARK_BLUE": $InkButton$Ink
static readonly "BLUE": $InkButton$Ink
static readonly "DARK_AQUA": $InkButton$Ink
static readonly "AQUA": $InkButton$Ink
static readonly "DARK_GREEN": $InkButton$Ink
static readonly "GREEN": $InkButton$Ink
static readonly "YELLOW": $InkButton$Ink
static readonly "GOLD": $InkButton$Ink
static readonly "WHITE": $InkButton$Ink
static readonly "GRAY": $InkButton$Ink
static readonly "DARK_GRAY": $InkButton$Ink


public static "values"(): ($InkButton$Ink)[]
public static "valueOf"(name: string): $InkButton$Ink
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $InkButton$Ink$Type = (("dark_red") | ("green") | ("dark_green") | ("black") | ("yellow") | ("red") | ("dark_purple") | ("dark_blue") | ("gold") | ("aqua") | ("light_purple") | ("gray") | ("blue") | ("white") | ("dark_aqua") | ("dark_gray")) | ($InkButton$Ink);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $InkButton$Ink_ = $InkButton$Ink$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/integration/forge/$BlueprintIntegration" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $BlueprintIntegration {

constructor()

public static "init"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BlueprintIntegration$Type = ($BlueprintIntegration);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BlueprintIntegration_ = $BlueprintIntegration$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/trades/$SimpleItemListing" {
import {$MerchantOffer, $MerchantOffer$Type} from "packages/net/minecraft/world/item/trading/$MerchantOffer"
import {$ModItemListing, $ModItemListing$Type} from "packages/net/mehvahdjukaar/moonlight/api/trades/$ModItemListing"
import {$LootItemFunction, $LootItemFunction$Type} from "packages/net/minecraft/world/level/storage/loot/functions/$LootItemFunction"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Codec, $Codec$Type} from "packages/com/mojang/serialization/$Codec"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $SimpleItemListing extends $Record implements $ModItemListing {
static readonly "CODEC": $Codec<($SimpleItemListing)>

constructor(price: $ItemStack$Type, price2: $ItemStack$Type, offer: $ItemStack$Type, maxTrades: integer, xp: integer, priceMult: float, level: integer, func: $LootItemFunction$Type)
constructor(emeralds: integer, forSale: $ItemStack$Type, maxTrades: integer, xp: integer)
constructor(emeralds: integer, forSale: $ItemStack$Type, maxTrades: integer, xp: integer, mult: float)
constructor(price: $ItemStack$Type, forSale: $ItemStack$Type, maxTrades: integer, xp: integer, priceMult: float)

public "equals"(o: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "func"(): $LootItemFunction
public "xp"(): integer
public "offer"(): $ItemStack
public "level"(): integer
public "getLevel"(): integer
public "priceMult"(): float
public "price2"(): $ItemStack
public "maxTrades"(): integer
public "price"(): $ItemStack
public static "createDefault"(price: $ItemStack$Type, price2: $ItemStack$Type, offer: $ItemStack$Type, maxTrades: integer, xp: $Optional$Type<(integer)>, priceMult: float, level: integer): $SimpleItemListing
public "getOffer"(entity: $Entity$Type, randomSource: $RandomSource$Type): $MerchantOffer
public "getCodec"(): $Codec<($SimpleItemListing)>
public "isValid"(): boolean
public static "defaultXp"(buying: boolean, villagerLevel: integer): integer
get "codec"(): $Codec<($SimpleItemListing)>
get "valid"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SimpleItemListing$Type = ($SimpleItemListing);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SimpleItemListing_ = $SimpleItemListing$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/screens/widgets/$DrawableBlackBoardButton" {
import {$BlackBoardScreen, $BlackBoardScreen$Type} from "packages/net/mehvahdjukaar/supplementaries/client/screens/$BlackBoardScreen"
import {$BlackboardButton, $BlackboardButton$Type} from "packages/net/mehvahdjukaar/supplementaries/client/screens/widgets/$BlackboardButton"

export class $DrawableBlackBoardButton extends $BlackboardButton {
static readonly "SIZE": integer
readonly "size": integer
readonly "x": integer
readonly "y": integer

constructor(screen: $BlackBoardScreen$Type, centerX: integer, centerY: integer, u: integer, v: integer, color: byte)

public "setColor"(color: byte): void
public "mouseReleased"(mouseX: double, mouseY: double, button: integer): boolean
public "mouseDragged"(mouseX: double, mouseY: double, button: integer, dragX: double, dragY: double): boolean
set "color"(value: byte)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DrawableBlackBoardButton$Type = ($DrawableBlackBoardButton);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DrawableBlackBoardButton_ = $DrawableBlackBoardButton$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/blocks/$RelayerBlock" {
import {$IntegerProperty, $IntegerProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$IntegerProperty"
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Mirror, $Mirror$Type} from "packages/net/minecraft/world/level/block/$Mirror"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$Rotation, $Rotation$Type} from "packages/net/minecraft/world/level/block/$Rotation"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"
import {$DirectionProperty, $DirectionProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$DirectionProperty"
import {$DirectionalBlock, $DirectionalBlock$Type} from "packages/net/minecraft/world/level/block/$DirectionalBlock"

export class $RelayerBlock extends $DirectionalBlock {
static readonly "POWER": $IntegerProperty
static readonly "POWERED": $BooleanProperty
static readonly "FACING": $DirectionProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(properties: $BlockBehaviour$Properties$Type)

public "getStateForPlacement"(context: $BlockPlaceContext$Type): $BlockState
public "setPlacedBy"(worldIn: $Level$Type, pos: $BlockPos$Type, state: $BlockState$Type, placer: $LivingEntity$Type, stack: $ItemStack$Type): void
public "canConnectRedstone"(state: $BlockState$Type, level: $BlockGetter$Type, pos: $BlockPos$Type, direction: $Direction$Type): boolean
public "onPlace"(state: $BlockState$Type, level: $Level$Type, pos: $BlockPos$Type, oldState: $BlockState$Type, isMoving: boolean): void
public "updateShape"(state: $BlockState$Type, direction: $Direction$Type, neighborState: $BlockState$Type, level: $LevelAccessor$Type, currentPos: $BlockPos$Type, neighborPos: $BlockPos$Type): $BlockState
public "isSignalSource"(state: $BlockState$Type): boolean
public "rotate"(state: $BlockState$Type, rotation: $Rotation$Type): $BlockState
public "mirror"(state: $BlockState$Type, mirror: $Mirror$Type): $BlockState
public "tick"(state: $BlockState$Type, level: $ServerLevel$Type, pos: $BlockPos$Type, randomSource: $RandomSource$Type): void
public "getSignal"(state: $BlockState$Type, level: $BlockGetter$Type, pos: $BlockPos$Type, direction: $Direction$Type): integer
public "getDirectSignal"(state: $BlockState$Type, level: $BlockGetter$Type, pos: $BlockPos$Type, direction: $Direction$Type): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RelayerBlock$Type = ($RelayerBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RelayerBlock_ = $RelayerBlock$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/network/$ClientBoundSetSongPacket" {
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Message, $Message$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/network/$Message"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$ChannelHandler$Context, $ChannelHandler$Context$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/network/$ChannelHandler$Context"

export class $ClientBoundSetSongPacket implements $Message {

constructor(buf: $FriendlyByteBuf$Type)
constructor(id: $UUID$Type, s: string)

public "handle"(context: $ChannelHandler$Context$Type): void
public "writeToBuffer"(buf: $FriendlyByteBuf$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientBoundSetSongPacket$Type = ($ClientBoundSetSongPacket);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientBoundSetSongPacket_ = $ClientBoundSetSongPacket$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/events/behaviors/$CarpetStairsConversion" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$ItemUseOnBlock, $ItemUseOnBlock$Type} from "packages/net/mehvahdjukaar/amendments/events/behaviors/$ItemUseOnBlock"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $CarpetStairsConversion implements $ItemUseOnBlock {

constructor()

public "isEnabled"(): boolean
public "placesBlock"(): boolean
public "appliesToItem"(item: $Item$Type): boolean
public "altersWorld"(): boolean
public "tryPerformingAction"(level: $Level$Type, player: $Player$Type, hand: $InteractionHand$Type, stack: $ItemStack$Type, hit: $BlockHitResult$Type): $InteractionResult
public "getTooltip"(): $MutableComponent
public "shouldBlockMapToItem"(item: $Item$Type): boolean
get "enabled"(): boolean
get "tooltip"(): $MutableComponent
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CarpetStairsConversion$Type = ($CarpetStairsConversion);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CarpetStairsConversion_ = $CarpetStairsConversion$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/reg/$ModSoftFluids" {
import {$DataObjectReference, $DataObjectReference$Type} from "packages/net/mehvahdjukaar/moonlight/api/misc/$DataObjectReference"
import {$SoftFluid, $SoftFluid$Type} from "packages/net/mehvahdjukaar/moonlight/api/fluids/$SoftFluid"

export class $ModSoftFluids {
static readonly "DIRT": $DataObjectReference<($SoftFluid)>
static readonly "SAP": $DataObjectReference<($SoftFluid)>

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModSoftFluids$Type = ($ModSoftFluids);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModSoftFluids_ = $ModSoftFluids$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/client/gui/$QuillButton" {
import {$QuillButton$QuillType, $QuillButton$QuillType$Type} from "packages/net/mehvahdjukaar/amendments/client/gui/$QuillButton$QuillType"
import {$AbstractWidget, $AbstractWidget$Type} from "packages/net/minecraft/client/gui/components/$AbstractWidget"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$ChatFormatting, $ChatFormatting$Type} from "packages/net/minecraft/$ChatFormatting"

export class $QuillButton extends $AbstractWidget {
static readonly "WIDGETS_LOCATION": $ResourceLocation
static readonly "ACCESSIBILITY_TEXTURE": $ResourceLocation
 "height": integer
 "x": integer
 "y": integer
 "active": boolean
 "visible": boolean
static readonly "UNSET_FG_COLOR": integer

constructor(screen: $Screen$Type)

public "getType"(): $QuillButton$QuillType
public "getChatFormatting"(): $ChatFormatting
public "onClick"(mouseX: double, mouseY: double, button: integer): void
public "onClick"(mouseX: double, mouseY: double): void
get "type"(): $QuillButton$QuillType
get "chatFormatting"(): $ChatFormatting
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $QuillButton$Type = ($QuillButton);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $QuillButton_ = $QuillButton$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/platform/configs/$ConfigSpec" {
import {$ConfigType, $ConfigType$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/configs/$ConfigType"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Path, $Path$Type} from "packages/java/nio/file/$Path"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$InputStream, $InputStream$Type} from "packages/java/io/$InputStream"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $ConfigSpec {


public "getName"(): $Component
public "register"(): void
public "getFileName"(): string
public "isLoaded"(): boolean
public "loadFromFile"(): void
public "isSynced"(): boolean
public "syncConfigsToPlayer"(player: $ServerPlayer$Type): void
public "sendSyncedConfigsToAllPlayers"(): void
public "getFullPath"(): $Path
public static "getSpec"(modId: string, type: $ConfigType$Type): $ConfigSpec
public "hasConfigScreen"(): boolean
public static "addTrackedSpec"(spec: $ConfigSpec$Type): void
public "getConfigType"(): $ConfigType
public "loadFromBytes"(arg0: $InputStream$Type): void
public "makeScreen"(parent: $Screen$Type): $Screen
public "makeScreen"(arg0: $Screen$Type, arg1: $ResourceLocation$Type): $Screen
public "getModId"(): string
get "name"(): $Component
get "fileName"(): string
get "loaded"(): boolean
get "synced"(): boolean
get "fullPath"(): $Path
get "configType"(): $ConfigType
get "modId"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ConfigSpec$Type = ($ConfigSpec);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ConfigSpec_ = $ConfigSpec$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/integration/$SoulFiredCompat" {
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $SoulFiredCompat {

constructor()

public static "setSecondsOnFire"(target: $Entity$Type, duration: integer, stack: $ItemStack$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SoulFiredCompat$Type = ($SoulFiredCompat);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SoulFiredCompat_ = $SoulFiredCompat$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/screens/widgets/$FilteredPlayerListWidget" {
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$FocusNavigationEvent, $FocusNavigationEvent$Type} from "packages/net/minecraft/client/gui/navigation/$FocusNavigationEvent"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$NarratableEntry$NarrationPriority, $NarratableEntry$NarrationPriority$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry$NarrationPriority"
import {$ScreenRectangle, $ScreenRectangle$Type} from "packages/net/minecraft/client/gui/navigation/$ScreenRectangle"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$NarrationElementOutput, $NarrationElementOutput$Type} from "packages/net/minecraft/client/gui/narration/$NarrationElementOutput"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Minecraft, $Minecraft$Type} from "packages/net/minecraft/client/$Minecraft"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$ComponentPath, $ComponentPath$Type} from "packages/net/minecraft/client/gui/$ComponentPath"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$List, $List$Type} from "packages/java/util/$List"
import {$PlayerInfo, $PlayerInfo$Type} from "packages/net/minecraft/client/multiplayer/$PlayerInfo"

export class $FilteredPlayerListWidget implements $NarratableEntry, $GuiEventListener, $Renderable {

constructor(minecraft: $Minecraft$Type, x: integer, y: integer, onClick: $Consumer$Type<(string)>)

public "setState"(hasItem: boolean, packed: boolean): void
public "setFilter"(filter: string): $List<(string)>
public "keyPressed"(key: integer, a: integer, b: integer): boolean
public "isMouseOver"(mouseX: double, mouseY: double): boolean
public "updateNarration"(narrationElementOutput: $NarrationElementOutput$Type): void
public "narrationPriority"(): $NarratableEntry$NarrationPriority
public "setFocused"(bl: boolean): void
public "addPlayer"(info: $PlayerInfo$Type): void
public "removePlayer"(id: $UUID$Type): void
public "render"(graphics: $GuiGraphics$Type, mouseX: integer, mouseY: integer, partialTicks: float): void
public "mouseClicked"(mouseX: double, mouseY: double, key: integer): boolean
public "mouseScrolled"(a: double, b: double, c: double): boolean
public "mouseDragged"(dx: double, dy: double, key: integer, mouseX: double, mouseY: double): boolean
public "isFocused"(): boolean
public "isActive"(): boolean
public "getCurrentFocusPath"(): $ComponentPath
public "nextFocusPath"(arg0: $FocusNavigationEvent$Type): $ComponentPath
public "getRectangle"(): $ScreenRectangle
public "mouseReleased"(arg0: double, arg1: double, arg2: integer): boolean
public "charTyped"(arg0: character, arg1: integer): boolean
public "keyReleased"(arg0: integer, arg1: integer, arg2: integer): boolean
public "mouseMoved"(arg0: double, arg1: double): void
public "getTabOrderGroup"(): integer
set "filter"(value: string)
set "focused"(value: boolean)
get "focused"(): boolean
get "active"(): boolean
get "currentFocusPath"(): $ComponentPath
get "rectangle"(): $ScreenRectangle
get "tabOrderGroup"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FilteredPlayerListWidget$Type = ($FilteredPlayerListWidget);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FilteredPlayerListWidget_ = $FilteredPlayerListWidget$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/capabilities/$QuiverEntityProvider" {
import {$LazyOptional, $LazyOptional$Type} from "packages/net/minecraftforge/common/util/$LazyOptional"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$ICapabilityProvider, $ICapabilityProvider$Type} from "packages/net/minecraftforge/common/capabilities/$ICapabilityProvider"
import {$Capability, $Capability$Type} from "packages/net/minecraftforge/common/capabilities/$Capability"

export class $QuiverEntityProvider implements $ICapabilityProvider {

constructor(player: $Player$Type)

public "getCapability"<T>(capability: $Capability$Type<(T)>, arg: $Direction$Type): $LazyOptional<(T)>
public "getCapability"<T>(arg0: $Capability$Type<(T)>): $LazyOptional<(T)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $QuiverEntityProvider$Type = ($QuiverEntityProvider);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $QuiverEntityProvider_ = $QuiverEntityProvider$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/blocks/$EndLampBlock" {
import {$ModBlockProperties$Rune, $ModBlockProperties$Rune$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/$ModBlockProperties$Rune"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$EnumProperty, $EnumProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$EnumProperty"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"

export class $EndLampBlock extends $Block {
static readonly "RUNE": $EnumProperty<($ModBlockProperties$Rune)>
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(properties: $BlockBehaviour$Properties$Type)

public "getStateForPlacement"(context: $BlockPlaceContext$Type): $BlockState
public "use"(state: $BlockState$Type, worldIn: $Level$Type, pos: $BlockPos$Type, player: $Player$Type, handIn: $InteractionHand$Type, hit: $BlockHitResult$Type): $InteractionResult
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EndLampBlock$Type = ($EndLampBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EndLampBlock_ = $EndLampBlock$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/items/$BuntingItem" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$UseOnContext, $UseOnContext$Type} from "packages/net/minecraft/world/item/context/$UseOnContext"
import {$DyeColor, $DyeColor$Type} from "packages/net/minecraft/world/item/$DyeColor"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $BuntingItem extends $Item {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(properties: $Item$Properties$Type)

public "useOn"(context: $UseOnContext$Type): $InteractionResult
public "getDescriptionId"(stack: $ItemStack$Type): string
public static "getColor"(item: $ItemStack$Type): $DyeColor
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BuntingItem$Type = ($BuntingItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BuntingItem_ = $BuntingItem$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/mixins/$MixinPlugin" {
import {$SimpleMixinPlugin, $SimpleMixinPlugin$Type} from "packages/net/mehvahdjukaar/moonlight/api/misc/$SimpleMixinPlugin"

export class $MixinPlugin extends $SimpleMixinPlugin {

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MixinPlugin$Type = ($MixinPlugin);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MixinPlugin_ = $MixinPlugin$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/resources/textures/$Palette" {
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$Spliterator, $Spliterator$Type} from "packages/java/util/$Spliterator"
import {$BaseColor, $BaseColor$Type} from "packages/net/mehvahdjukaar/moonlight/api/util/math/colors/$BaseColor"
import {$PaletteColor, $PaletteColor$Type} from "packages/net/mehvahdjukaar/moonlight/api/resources/textures/$PaletteColor"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$TextureImage, $TextureImage$Type} from "packages/net/mehvahdjukaar/moonlight/api/resources/textures/$TextureImage"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$IntFunction, $IntFunction$Type} from "packages/java/util/function/$IntFunction"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Stream, $Stream$Type} from "packages/java/util/stream/$Stream"
import {$Iterator, $Iterator$Type} from "packages/java/util/$Iterator"

export class $Palette implements $Set<($PaletteColor)> {
static readonly "BASE_TOLERANCE": float


public "add"(color: $PaletteColor$Type): boolean
public "remove"(index: integer): $PaletteColor
public "remove"(o: any): boolean
public "remove"(color: $PaletteColor$Type): boolean
public "get"(index: integer): $PaletteColor
public "indexOf"(color: $PaletteColor$Type): integer
public "clear"(): void
public "isEmpty"(): boolean
public "size"(): integer
public "toArray"(): (any)[]
public "toArray"<T>(a: (T)[]): (T)[]
public "iterator"(): $Iterator<($PaletteColor)>
/**
 * 
 * @deprecated
 */
public "contains"(o: any): boolean
public "addAll"(colors: $Collection$Type<(any)>): boolean
public static "merge"(...palettes: ($Palette$Type)[]): $Palette
public static "empty"(): $Palette
public "set"(index: integer, color: $PaletteColor$Type): void
public "copy"(): $Palette
public "reduce"(): $PaletteColor
public "removeAll"(colors: $Collection$Type<(any)>): boolean
public "retainAll"(c: $Collection$Type<(any)>): boolean
public "containsAll"(c: $Collection$Type<(any)>): boolean
public static "fromAnimatedImage"(image: $TextureImage$Type): $List<($Palette)>
public static "fromAnimatedImage"(image: $TextureImage$Type, mask: $TextureImage$Type): $List<($Palette)>
public static "fromAnimatedImage"(textureImage: $TextureImage$Type, textureMask: $TextureImage$Type, tolerance: float): $List<($Palette)>
public static "fromImage"(textureImage: $TextureImage$Type, textureMask: $TextureImage$Type, tolerance: float): $Palette
public static "fromImage"(image: $TextureImage$Type): $Palette
public static "fromImage"(image: $TextureImage$Type, mask: $TextureImage$Type): $Palette
public "getLightest"(offset: integer): $PaletteColor
public "getLightest"(): $PaletteColor
public "getDarkest"(): $PaletteColor
public "getDarkest"(offset: integer): $PaletteColor
public "increaseDown"(): $PaletteColor
public "increaseInner"(): $PaletteColor
public "hasColor"(color: $PaletteColor$Type, tolerance: float): boolean
public "hasColor"(rgba: integer): boolean
public "hasColor"(color: $PaletteColor$Type): boolean
public "changeSizeMatchingLuminanceSpan"(targetLuminanceSpan: float): void
public "getLuminanceStepVariationCoeff"(): float
public "expandMatchingLuminanceRange"(minLuminance: float, maxLuminance: float): void
public "getColorClosestTo"(target: $PaletteColor$Type): $PaletteColor
public "updateTolerance"(tolerance: float): void
public "calculateAverage"(): $PaletteColor
public static "fromArc"<T extends $BaseColor<(T)>>(light: T, dark: T, size: integer): $Palette
public "getCenterColor"(): $PaletteColor
public "matchSize"(targetSize: integer): void
public "matchSize"(targetSize: integer, targetLumStep: float): void
public "getLuminanceSpan"(): float
public "reduceUp"(): $PaletteColor
public "increaseUp"(): $PaletteColor
public "reduceDown"(): $PaletteColor
public "getColorAtSlope"(slope: float): $PaletteColor
public "reduceAndAverage"(): $PaletteColor
public "removeLeastUsed"(): $PaletteColor
public "getLuminanceSteps"(): $List<(float)>
public "getCenterLuminance"(): float
public static "ofColors"<C extends $BaseColor<(C)>>(colors: $Collection$Type<(C)>): $Palette
public "getAverageLuminanceStep"(): float
public "getValues"(): $List<($PaletteColor)>
public "equals"(arg0: any): boolean
public "hashCode"(): integer
public static "copyOf"<E>(arg0: $Collection$Type<(any)>): $Set<($PaletteColor)>
public static "of"<E>(arg0: $PaletteColor$Type, arg1: $PaletteColor$Type, arg2: $PaletteColor$Type, arg3: $PaletteColor$Type, arg4: $PaletteColor$Type, arg5: $PaletteColor$Type): $Set<($PaletteColor)>
public static "of"<E>(arg0: $PaletteColor$Type, arg1: $PaletteColor$Type, arg2: $PaletteColor$Type, arg3: $PaletteColor$Type, arg4: $PaletteColor$Type): $Set<($PaletteColor)>
public static "of"<E>(arg0: $PaletteColor$Type): $Set<($PaletteColor)>
public static "of"<E>(arg0: $PaletteColor$Type, arg1: $PaletteColor$Type, arg2: $PaletteColor$Type, arg3: $PaletteColor$Type): $Set<($PaletteColor)>
public static "of"<E>(arg0: $PaletteColor$Type, arg1: $PaletteColor$Type, arg2: $PaletteColor$Type, arg3: $PaletteColor$Type, arg4: $PaletteColor$Type, arg5: $PaletteColor$Type, arg6: $PaletteColor$Type, arg7: $PaletteColor$Type, arg8: $PaletteColor$Type, arg9: $PaletteColor$Type): $Set<($PaletteColor)>
public static "of"<E>(arg0: $PaletteColor$Type, arg1: $PaletteColor$Type, arg2: $PaletteColor$Type, arg3: $PaletteColor$Type, arg4: $PaletteColor$Type, arg5: $PaletteColor$Type, arg6: $PaletteColor$Type, arg7: $PaletteColor$Type, arg8: $PaletteColor$Type): $Set<($PaletteColor)>
public static "of"<E>(arg0: $PaletteColor$Type, arg1: $PaletteColor$Type, arg2: $PaletteColor$Type, arg3: $PaletteColor$Type, arg4: $PaletteColor$Type, arg5: $PaletteColor$Type, arg6: $PaletteColor$Type, arg7: $PaletteColor$Type): $Set<($PaletteColor)>
public static "of"<E>(arg0: $PaletteColor$Type, arg1: $PaletteColor$Type, arg2: $PaletteColor$Type, arg3: $PaletteColor$Type, arg4: $PaletteColor$Type, arg5: $PaletteColor$Type, arg6: $PaletteColor$Type): $Set<($PaletteColor)>
public static "of"<E>(...arg0: ($PaletteColor$Type)[]): $Set<($PaletteColor)>
public static "of"<E>(arg0: $PaletteColor$Type, arg1: $PaletteColor$Type, arg2: $PaletteColor$Type): $Set<($PaletteColor)>
public static "of"<E>(): $Set<($PaletteColor)>
public static "of"<E>(arg0: $PaletteColor$Type, arg1: $PaletteColor$Type): $Set<($PaletteColor)>
public "spliterator"(): $Spliterator<($PaletteColor)>
public "toArray"<T>(arg0: $IntFunction$Type<((T)[])>): (T)[]
public "stream"(): $Stream<($PaletteColor)>
public "removeIf"(arg0: $Predicate$Type<(any)>): boolean
public "parallelStream"(): $Stream<($PaletteColor)>
public "forEach"(arg0: $Consumer$Type<(any)>): void
[Symbol.iterator](): IterableIterator<$PaletteColor>;
get "lightest"(): $PaletteColor
get "darkest"(): $PaletteColor
get "luminanceStepVariationCoeff"(): float
get "centerColor"(): $PaletteColor
get "luminanceSpan"(): float
get "luminanceSteps"(): $List<(float)>
get "centerLuminance"(): float
get "averageLuminanceStep"(): float
get "values"(): $List<($PaletteColor)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Palette$Type = ($Palette);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Palette_ = $Palette$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/renderers/tiles/$EndermanSkullBlockTileRenderer" {
import {$BlockEntityRendererProvider$Context, $BlockEntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/blockentity/$BlockEntityRendererProvider$Context"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$EndermanSkullBlockTile, $EndermanSkullBlockTile$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$EndermanSkullBlockTile"
import {$BlockEntityRenderer, $BlockEntityRenderer$Type} from "packages/net/minecraft/client/renderer/blockentity/$BlockEntityRenderer"

export class $EndermanSkullBlockTileRenderer implements $BlockEntityRenderer<($EndermanSkullBlockTile)> {

constructor(context: $BlockEntityRendererProvider$Context$Type)

public "render"(blockEntity: $EndermanSkullBlockTile$Type, partialTick: float, poseStack: $PoseStack$Type, bufferSource: $MultiBufferSource$Type, packedLight: integer, packedOverlay: integer): void
public "shouldRender"(arg0: $EndermanSkullBlockTile$Type, arg1: $Vec3$Type): boolean
public "shouldRenderOffScreen"(arg0: $EndermanSkullBlockTile$Type): boolean
public "getViewDistance"(): integer
get "viewDistance"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EndermanSkullBlockTileRenderer$Type = ($EndermanSkullBlockTileRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EndermanSkullBlockTileRenderer_ = $EndermanSkullBlockTileRenderer$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/common/network/$ModNetwork" {
import {$ChannelHandler, $ChannelHandler$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/network/$ChannelHandler"

export class $ModNetwork {
static readonly "CHANNEL": $ChannelHandler

constructor()

public static "init"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModNetwork$Type = ($ModNetwork);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModNetwork_ = $ModNetwork$Type;
}}
declare module "packages/net/mehvahdjukaar/dummmmmmy/network/$ClientBoundSyncEquipMessage" {
import {$Message, $Message$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/network/$Message"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$ChannelHandler$Context, $ChannelHandler$Context$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/network/$ChannelHandler$Context"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export class $ClientBoundSyncEquipMessage implements $Message {

constructor(buf: $FriendlyByteBuf$Type)
constructor(entityId: integer, slotId: integer, itemstack: $ItemStack$Type)

public "handle"(context: $ChannelHandler$Context$Type): void
public "writeToBuffer"(buf: $FriendlyByteBuf$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientBoundSyncEquipMessage$Type = ($ClientBoundSyncEquipMessage);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientBoundSyncEquipMessage_ = $ClientBoundSyncEquipMessage$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/common/block/$AbstractCandleSkullBlock" {
import {$IntegerProperty, $IntegerProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$IntegerProperty"
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$EntityBlock, $EntityBlock$Type} from "packages/net/minecraft/world/level/block/$EntityBlock"
import {$ILightable, $ILightable$Type} from "packages/net/mehvahdjukaar/moonlight/api/block/$ILightable"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Projectile, $Projectile$Type} from "packages/net/minecraft/world/entity/projectile/$Projectile"
import {$AbstractCandleBlock, $AbstractCandleBlock$Type} from "packages/net/minecraft/world/level/block/$AbstractCandleBlock"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$PathComputationType, $PathComputationType$Type} from "packages/net/minecraft/world/level/pathfinder/$PathComputationType"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$List, $List$Type} from "packages/java/util/$List"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$IWashable, $IWashable$Type} from "packages/net/mehvahdjukaar/moonlight/api/block/$IWashable"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$CollisionContext, $CollisionContext$Type} from "packages/net/minecraft/world/phys/shapes/$CollisionContext"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$HitResult, $HitResult$Type} from "packages/net/minecraft/world/phys/$HitResult"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$LootParams$Builder, $LootParams$Builder$Type} from "packages/net/minecraft/world/level/storage/loot/$LootParams$Builder"
import {$ILightable$FireSourceType, $ILightable$FireSourceType$Type} from "packages/net/mehvahdjukaar/moonlight/api/block/$ILightable$FireSourceType"
import {$BlockEntityTicker, $BlockEntityTicker$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityTicker"
import {$GameEventListener, $GameEventListener$Type} from "packages/net/minecraft/world/level/gameevent/$GameEventListener"
import {$RenderShape, $RenderShape$Type} from "packages/net/minecraft/world/level/block/$RenderShape"

export class $AbstractCandleSkullBlock extends $AbstractCandleBlock implements $EntityBlock, $ILightable, $IWashable {
static readonly "CANDLES": $IntegerProperty
static readonly "LIT": $BooleanProperty
static readonly "LIGHT_PER_CANDLE": integer
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation


public "getTicker"<T extends $BlockEntity>(level: $Level$Type, state: $BlockState$Type, type: $BlockEntityType$Type<(T)>): $BlockEntityTicker<(T)>
public "getCloneItemStack"(level: $BlockGetter$Type, pos: $BlockPos$Type, state: $BlockState$Type): $ItemStack
public "getCloneItemStack"(state: $BlockState$Type, hitResult: $HitResult$Type, world: $BlockGetter$Type, pos: $BlockPos$Type, player: $Player$Type): $ItemStack
public "isPathfindable"(pState: $BlockState$Type, pLevel: $BlockGetter$Type, pPos: $BlockPos$Type, pType: $PathComputationType$Type): boolean
public "use"(state: $BlockState$Type, level: $Level$Type, pos: $BlockPos$Type, player: $Player$Type, hand: $InteractionHand$Type, pHit: $BlockHitResult$Type): $InteractionResult
public "getRenderShape"(pState: $BlockState$Type): $RenderShape
public "getDrops"(state: $BlockState$Type, builder: $LootParams$Builder$Type): $List<($ItemStack)>
public "getShape"(pState: $BlockState$Type, pLevel: $BlockGetter$Type, pPos: $BlockPos$Type, pContext: $CollisionContext$Type): $VoxelShape
public "animateTick"(state: $BlockState$Type, level: $Level$Type, blockPos: $BlockPos$Type, randomSource: $RandomSource$Type): void
public "playExtinguishSound"(world: $LevelAccessor$Type, pos: $BlockPos$Type): void
public "isLitUp"(state: $BlockState$Type, level: $BlockGetter$Type, pos: $BlockPos$Type): boolean
public "setLitUp"(state: $BlockState$Type, world: $LevelAccessor$Type, pos: $BlockPos$Type, lit: boolean): void
public "tryWash"(level: $Level$Type, pos: $BlockPos$Type, state: $BlockState$Type): boolean
public "spawnSmokeParticles"(state: $BlockState$Type, pos: $BlockPos$Type, level: $LevelAccessor$Type): void
public "canBeExtinguishedBy"(item: $ItemStack$Type): boolean
public "newBlockEntity"(pPos: $BlockPos$Type, pState: $BlockState$Type): $BlockEntity
public "getListener"<T extends $BlockEntity>(arg0: $ServerLevel$Type, arg1: T): $GameEventListener
public "extinguish"(player: $Entity$Type, state: $BlockState$Type, pos: $BlockPos$Type, world: $LevelAccessor$Type): boolean
/**
 * 
 * @deprecated
 */
public "isLitUp"(state: $BlockState$Type): boolean
public "interactWithPlayer"(state: $BlockState$Type, level: $Level$Type, pos: $BlockPos$Type, player: $Player$Type, handIn: $InteractionHand$Type): $InteractionResult
public "lightUp"(player: $Entity$Type, state: $BlockState$Type, pos: $BlockPos$Type, world: $LevelAccessor$Type, fireSourceType: $ILightable$FireSourceType$Type): boolean
public "playLightUpSound"(world: $LevelAccessor$Type, pos: $BlockPos$Type, type: $ILightable$FireSourceType$Type): void
/**
 * 
 * @deprecated
 */
public "toggleLitState"(state: $BlockState$Type, lit: boolean): $BlockState
public "interactWithProjectile"(level: $Level$Type, state: $BlockState$Type, projectile: $Projectile$Type, pos: $BlockPos$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AbstractCandleSkullBlock$Type = ($AbstractCandleSkullBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AbstractCandleSkullBlock_ = $AbstractCandleSkullBlock$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/client/texture_renderer/$TickableFrameBufferBackedDynamicTexture" {
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$FrameBufferBackedDynamicTexture, $FrameBufferBackedDynamicTexture$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/texture_renderer/$FrameBufferBackedDynamicTexture"
import {$Tickable, $Tickable$Type} from "packages/net/minecraft/client/renderer/texture/$Tickable"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $TickableFrameBufferBackedDynamicTexture extends $FrameBufferBackedDynamicTexture implements $Tickable {
static readonly "NOT_ASSIGNED": integer

constructor(resourceLocation: $ResourceLocation$Type, width: integer, height: integer, textureDrawingFunction: $Consumer$Type<($FrameBufferBackedDynamicTexture$Type)>)
constructor(resourceLocation: $ResourceLocation$Type, size: integer, textureDrawingFunction: $Consumer$Type<($FrameBufferBackedDynamicTexture$Type)>)

public "tick"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TickableFrameBufferBackedDynamicTexture$Type = ($TickableFrameBufferBackedDynamicTexture);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TickableFrameBufferBackedDynamicTexture_ = $TickableFrameBufferBackedDynamicTexture$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/misc/$WeakHashSet" {
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$AbstractSet, $AbstractSet$Type} from "packages/java/util/$AbstractSet"
import {$Iterator, $Iterator$Type} from "packages/java/util/$Iterator"

export class $WeakHashSet<T> extends $AbstractSet<(T)> {

constructor()

public "add"(obj: T): boolean
public "remove"(obj: any): boolean
public "size"(): integer
public "iterator"(): $Iterator<(T)>
public "contains"(obj: any): boolean
public static "copyOf"<E>(arg0: $Collection$Type<(any)>): $Set<(E)>
public "clear"(): void
public "isEmpty"(): boolean
public "toArray"<T>(arg0: (T)[]): (T)[]
public "toArray"(): (any)[]
public static "of"<E>(arg0: E, arg1: E, arg2: E, arg3: E, arg4: E, arg5: E): $Set<(E)>
public static "of"<E>(arg0: E, arg1: E, arg2: E, arg3: E, arg4: E): $Set<(E)>
public static "of"<E>(arg0: E): $Set<(E)>
public static "of"<E>(arg0: E, arg1: E, arg2: E, arg3: E): $Set<(E)>
public static "of"<E>(arg0: E, arg1: E, arg2: E, arg3: E, arg4: E, arg5: E, arg6: E, arg7: E, arg8: E, arg9: E): $Set<(E)>
public static "of"<E>(arg0: E, arg1: E, arg2: E, arg3: E, arg4: E, arg5: E, arg6: E, arg7: E, arg8: E): $Set<(E)>
public static "of"<E>(arg0: E, arg1: E, arg2: E, arg3: E, arg4: E, arg5: E, arg6: E, arg7: E): $Set<(E)>
public static "of"<E>(arg0: E, arg1: E, arg2: E, arg3: E, arg4: E, arg5: E, arg6: E): $Set<(E)>
public static "of"<E>(...arg0: (E)[]): $Set<(E)>
public static "of"<E>(arg0: E, arg1: E, arg2: E): $Set<(E)>
public static "of"<E>(): $Set<(E)>
public static "of"<E>(arg0: E, arg1: E): $Set<(E)>
public "addAll"(arg0: $Collection$Type<(any)>): boolean
public "retainAll"(arg0: $Collection$Type<(any)>): boolean
public "containsAll"(arg0: $Collection$Type<(any)>): boolean
get "empty"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WeakHashSet$Type<T> = ($WeakHashSet<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WeakHashSet_<T> = $WeakHashSet$Type<(T)>;
}}
declare module "packages/net/mehvahdjukaar/amendments/$AmendmentsClient" {
import {$Material, $Material$Type} from "packages/net/minecraft/client/resources/model/$Material"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$WoodType, $WoodType$Type} from "packages/net/minecraft/world/level/block/state/properties/$WoodType"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$ModelLayerLocation, $ModelLayerLocation$Type} from "packages/net/minecraft/client/model/geom/$ModelLayerLocation"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $AmendmentsClient {
static readonly "SIGN_SHEET": $ResourceLocation
static readonly "CANVAS_SIGH_MATERIAL": $Material
static readonly "HANGING_SIGN_EXTENSIONS": $Supplier<($Map<($WoodType), ($Material)>)>
static readonly "DEFAULT_RECORD": $Material
static readonly "TINTED_RECORD": $Material
static readonly "RECORD_PATTERNS": $List<($Material)>
static readonly "RECORD_PATTERNS_OVERLAY": $List<($Material)>
static readonly "HANGING_SIGN_EXTENSION": $ModelLayerLocation
static readonly "HANGING_SIGN_EXTENSION_CHAINS": $ModelLayerLocation
static readonly "SKULL_CANDLE_OVERLAY": $ModelLayerLocation
static readonly "BELL_ROPE": $ResourceLocation
static readonly "BELL_CHAIN": $ResourceLocation
static readonly "LECTERN_GUI": $ResourceLocation
static readonly "POTION_TEXTURE": $ResourceLocation
static readonly "MUSHROOM_STEW": $ResourceLocation
static readonly "RABBIT_STEW": $ResourceLocation
static readonly "BEETROOT_SOUP": $ResourceLocation
static readonly "SUS_STEW": $ResourceLocation
static "x": float
static "y": float
static "z": float
static readonly "SKULL_CANDLES_TEXTURES": $Supplier<($Map<($Block), ($ResourceLocation)>)>

constructor()

public static "init"(): void
public static "setup"(): void
public static "getAllRecords"(): $Map<($Item), ($Material)>
public static "getRecordMaterial"(item: $Item$Type): $Material
public static "hasFixedNormals"(): boolean
public static "afterTagSetup"(): void
public static "onItemTooltip"(itemStack: $ItemStack$Type, tooltipFlag: $TooltipFlag$Type, components: $List$Type<($Component$Type)>): void
get "allRecords"(): $Map<($Item), ($Material)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AmendmentsClient$Type = ($AmendmentsClient);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AmendmentsClient_ = $AmendmentsClient$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/block/$MimicBlock" {
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$PathComputationType, $PathComputationType$Type} from "packages/net/minecraft/world/level/pathfinder/$PathComputationType"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$LootParams$Builder, $LootParams$Builder$Type} from "packages/net/minecraft/world/level/storage/loot/$LootParams$Builder"
import {$SoundType, $SoundType$Type} from "packages/net/minecraft/world/level/block/$SoundType"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Explosion, $Explosion$Type} from "packages/net/minecraft/world/level/$Explosion"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $MimicBlock extends $Block {
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation


public "getCloneItemStack"(level: $BlockGetter$Type, pos: $BlockPos$Type, state: $BlockState$Type): $ItemStack
public "getExplosionResistance"(state: $BlockState$Type, world: $BlockGetter$Type, pos: $BlockPos$Type, explosion: $Explosion$Type): float
public "getSoundType"(state: $BlockState$Type, world: $LevelReader$Type, pos: $BlockPos$Type, entity: $Entity$Type): $SoundType
public "isPathfindable"(state: $BlockState$Type, worldIn: $BlockGetter$Type, pos: $BlockPos$Type, type: $PathComputationType$Type): boolean
public "getDrops"(state: $BlockState$Type, builder: $LootParams$Builder$Type): $List<($ItemStack)>
public "getDestroyProgress"(state: $BlockState$Type, player: $Player$Type, worldIn: $BlockGetter$Type, pos: $BlockPos$Type): float
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MimicBlock$Type = ($MimicBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MimicBlock_ = $MimicBlock$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/utils/$BlockUtil" {
import {$Comparable, $Comparable$Type} from "packages/java/lang/$Comparable"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$Property, $Property$Type} from "packages/net/minecraft/world/level/block/state/properties/$Property"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$IOwnerProtected, $IOwnerProtected$Type} from "packages/net/mehvahdjukaar/moonlight/api/block/$IOwnerProtected"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $BlockUtil {

constructor()

public static "tryRotatingBlockAndConnected"(face: $Direction$Type, ccw: boolean, targetPos: $BlockPos$Type, level: $Level$Type, hit: $Vec3$Type): $Optional<($Direction)>
public static "getRotatedState"(dir: $Direction$Type, ccw: boolean, targetPos: $BlockPos$Type, world: $Level$Type, state: $BlockState$Type): $Optional<($BlockState)>
public static "addOptionalOwnership"(placer: $LivingEntity$Type, world: $Level$Type, pos: $BlockPos$Type): void
public static "addOptionalOwnership"<T extends ($BlockEntity) & ($IOwnerProtected)>(placer: $LivingEntity$Type, tileEntity: T): void
public static "tryRotatingBlock"(dir: $Direction$Type, ccw: boolean, targetPos: $BlockPos$Type, level: $Level$Type, state: $BlockState$Type, hit: $Vec3$Type): $Optional<($Direction)>
public static "tryRotatingBlock"(face: $Direction$Type, ccw: boolean, targetPos: $BlockPos$Type, level: $Level$Type, hit: $Vec3$Type): $Optional<($Direction)>
public static "replaceProperty"<T extends $Comparable<(T)>, A extends $Property<(T)>>(from: $BlockState$Type, to: $BlockState$Type, property: A): $BlockState
public static "getConnectedBedDirection"(bedState: $BlockState$Type): $Direction
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BlockUtil$Type = ($BlockUtil);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BlockUtil_ = $BlockUtil$Type;
}}
declare module "packages/net/mehvahdjukaar/modelfix/moonlight_configs/forge/$ConfigSpecWrapper" {
import {$Path, $Path$Type} from "packages/java/nio/file/$Path"
import {$ForgeConfigSpec, $ForgeConfigSpec$Type} from "packages/net/minecraftforge/common/$ForgeConfigSpec"
import {$ModConfig, $ModConfig$Type} from "packages/net/minecraftforge/fml/config/$ModConfig"
import {$InputStream, $InputStream$Type} from "packages/java/io/$InputStream"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$ConfigType, $ConfigType$Type} from "packages/net/mehvahdjukaar/modelfix/moonlight_configs/$ConfigType"
import {$ConfigSpec, $ConfigSpec$Type} from "packages/net/mehvahdjukaar/modelfix/moonlight_configs/$ConfigSpec"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Runnable, $Runnable$Type} from "packages/java/lang/$Runnable"
import {$ModConfig$Type, $ModConfig$Type$Type} from "packages/net/minecraftforge/fml/config/$ModConfig$Type"

export class $ConfigSpecWrapper extends $ConfigSpec {

constructor(name: $ResourceLocation$Type, spec: $ForgeConfigSpec$Type, type: $ConfigType$Type, synced: boolean, onChange: $Runnable$Type)

public "register"(): void
public "getFileName"(): string
public "isLoaded"(): boolean
public "loadFromFile"(): void
public "getModConfig"(): $ModConfig
public "getModConfigType"(): $ModConfig$Type
public "getFullPath"(): $Path
public "getSpec"(): $ForgeConfigSpec
public "hasConfigScreen"(): boolean
public "loadFromBytes"(stream: $InputStream$Type): void
public "makeScreen"(parent: $Screen$Type, background: $ResourceLocation$Type): $Screen
get "fileName"(): string
get "loaded"(): boolean
get "modConfig"(): $ModConfig
get "modConfigType"(): $ModConfig$Type
get "fullPath"(): $Path
get "spec"(): $ForgeConfigSpec
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ConfigSpecWrapper$Type = ($ConfigSpecWrapper);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ConfigSpecWrapper_ = $ConfigSpecWrapper$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/resources/textures/$TextureImage" {
import {$RGBColor, $RGBColor$Type} from "packages/net/mehvahdjukaar/moonlight/api/util/math/colors/$RGBColor"
import {$JsonObject, $JsonObject$Type} from "packages/com/google/gson/$JsonObject"
import {$AnimationMetadataSection, $AnimationMetadataSection$Type} from "packages/net/minecraft/client/resources/metadata/animation/$AnimationMetadataSection"
import {$TextureImage$FramePixelConsumer, $TextureImage$FramePixelConsumer$Type} from "packages/net/mehvahdjukaar/moonlight/api/resources/textures/$TextureImage$FramePixelConsumer"
import {$NativeImage, $NativeImage$Type} from "packages/com/mojang/blaze3d/platform/$NativeImage"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$ImmutableList, $ImmutableList$Type} from "packages/com/google/common/collect/$ImmutableList"
import {$AutoCloseable, $AutoCloseable$Type} from "packages/java/lang/$AutoCloseable"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Rotation, $Rotation$Type} from "packages/net/minecraft/world/level/block/$Rotation"
import {$ResourceManager, $ResourceManager$Type} from "packages/net/minecraft/server/packs/resources/$ResourceManager"
import {$Palette, $Palette$Type} from "packages/net/mehvahdjukaar/moonlight/api/resources/textures/$Palette"
import {$AnimationFrame, $AnimationFrame$Type} from "packages/net/minecraft/client/resources/metadata/animation/$AnimationFrame"

export class $TextureImage implements $AutoCloseable {


public "clear"(): void
public static "of"(image: $NativeImage$Type, animation: $AnimationMetadataSection$Type): $TextureImage
public "close"(): void
public static "open"(manager: $ResourceManager$Type, relativePath: $ResourceLocation$Type): $TextureImage
public static "createMask"(original: $TextureImage$Type, palette: $Palette$Type): $TextureImage
public static "createNew"(width: integer, height: integer, animation: $AnimationMetadataSection$Type): $TextureImage
public "serializeMcMeta"(): $JsonObject
public "applyOverlay"(...overlays: ($TextureImage$Type)[]): void
public "makeCopy"(): $TextureImage
public "createResized"(widthScale: float, heightScale: float): $TextureImage
public "setFramePixel"(frameIndex: integer, x: integer, y: integer, color: integer): void
public "createRotated"(rotation: $Rotation$Type): $TextureImage
public "imageHeight"(): integer
public "imageWidth"(): integer
public "crop"(mask: $TextureImage$Type): void
public "crop"(mask: $TextureImage$Type, discardInner: boolean): void
public "getAverageColor"(): $RGBColor
public "getImage"(): $NativeImage
public "frameWidth"(): integer
public "frameCount"(): integer
public "frameHeight"(): integer
public "getMetadata"(): $AnimationMetadataSection
public "applyOverlayOnExisting"(...overlays: ($TextureImage$Type)[]): void
public "createAnimationTemplate"(length: integer, useDataFrom: $AnimationMetadataSection$Type): $TextureImage
public "createAnimationTemplate"(length: integer, frameData: $List$Type<($AnimationFrame$Type)>, frameTime: integer, interpolate: boolean): $TextureImage
public "forEachFramePixel"(framePixelConsumer: $TextureImage$FramePixelConsumer$Type): void
public "getFrameStartX"(frameIndex: integer): integer
/**
 * 
 * @deprecated
 */
public "forEachFrame"(e: $TextureImage$FramePixelConsumer$Type): void
public "getFramePixel"(frameIndex: integer, x: integer, y: integer): integer
public "toGrayscale"(): void
public "getFrameStartY"(frameIndex: integer): integer
public "removeAlpha"(backgroundColor: integer): void
public "splitFrames"(): $ImmutableList<($NativeImage)>
get "averageColor"(): $RGBColor
get "image"(): $NativeImage
get "metadata"(): $AnimationMetadataSection
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TextureImage$Type = ($TextureImage);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TextureImage_ = $TextureImage$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/block_models/$FlowerBoxBakedModel" {
import {$ModelData, $ModelData$Type} from "packages/net/minecraftforge/client/model/data/$ModelData"
import {$ModelState, $ModelState$Type} from "packages/net/minecraft/client/resources/model/$ModelState"
import {$ItemTransforms, $ItemTransforms$Type} from "packages/net/minecraft/client/renderer/block/model/$ItemTransforms"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$ExtraModelData, $ExtraModelData$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$ExtraModelData"
import {$CustomBakedModel, $CustomBakedModel$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$CustomBakedModel"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BakedModel, $BakedModel$Type} from "packages/net/minecraft/client/resources/model/$BakedModel"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$RenderType, $RenderType$Type} from "packages/net/minecraft/client/renderer/$RenderType"
import {$ItemOverrides, $ItemOverrides$Type} from "packages/net/minecraft/client/renderer/block/model/$ItemOverrides"
import {$ItemDisplayContext, $ItemDisplayContext$Type} from "packages/net/minecraft/world/item/$ItemDisplayContext"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$List, $List$Type} from "packages/java/util/$List"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$ChunkRenderTypeSet, $ChunkRenderTypeSet$Type} from "packages/net/minecraftforge/client/$ChunkRenderTypeSet"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockAndTintGetter, $BlockAndTintGetter$Type} from "packages/net/minecraft/world/level/$BlockAndTintGetter"
import {$BakedQuad, $BakedQuad$Type} from "packages/net/minecraft/client/renderer/block/model/$BakedQuad"
import {$TextureAtlasSprite, $TextureAtlasSprite$Type} from "packages/net/minecraft/client/renderer/texture/$TextureAtlasSprite"

export class $FlowerBoxBakedModel implements $CustomBakedModel {

constructor(box: $BakedModel$Type, rotation: $ModelState$Type)

public "usesBlockLight"(): boolean
public "isGui3d"(): boolean
public "getBlockQuads"(state: $BlockState$Type, side: $Direction$Type, rand: $RandomSource$Type, renderType: $RenderType$Type, data: $ExtraModelData$Type): $List<($BakedQuad)>
public "getBlockParticle"(extraModelData: $ExtraModelData$Type): $TextureAtlasSprite
public "isCustomRenderer"(): boolean
public "getOverrides"(): $ItemOverrides
public "getTransforms"(): $ItemTransforms
public "useAmbientOcclusion"(): boolean
public "getParticleIcon"(): $TextureAtlasSprite
public "getQuads"(state: $BlockState$Type, side: $Direction$Type, rand: $RandomSource$Type): $List<(any)>
public "getQuads"(state: $BlockState$Type, side: $Direction$Type, rand: $RandomSource$Type, modelData: $ModelData$Type, type: $RenderType$Type): $List<(any)>
public "getParticleIcon"(data: $ModelData$Type): $TextureAtlasSprite
public "getModelData"(level: $BlockAndTintGetter$Type, pos: $BlockPos$Type, state: $BlockState$Type, modelData: $ModelData$Type): $ModelData
public "getModelData"(originalData: $ExtraModelData$Type, stack: $ItemStack$Type): $ExtraModelData
public "getModelData"(tileData: $ExtraModelData$Type, pos: $BlockPos$Type, state: $BlockState$Type, level: $BlockAndTintGetter$Type): $ExtraModelData
public "useAmbientOcclusion"(arg0: $BlockState$Type, arg1: $RenderType$Type): boolean
public "useAmbientOcclusion"(arg0: $BlockState$Type): boolean
public "getRenderTypes"(arg0: $ItemStack$Type, arg1: boolean): $List<($RenderType)>
public "getRenderTypes"(arg0: $BlockState$Type, arg1: $RandomSource$Type, arg2: $ModelData$Type): $ChunkRenderTypeSet
public "getRenderPasses"(arg0: $ItemStack$Type, arg1: boolean): $List<($BakedModel)>
public "applyTransform"(arg0: $ItemDisplayContext$Type, arg1: $PoseStack$Type, arg2: boolean): $BakedModel
public "useAmbientOcclusionWithLightEmission"(arg0: $BlockState$Type, arg1: $RenderType$Type): boolean
get "gui3d"(): boolean
get "customRenderer"(): boolean
get "overrides"(): $ItemOverrides
get "transforms"(): $ItemTransforms
get "particleIcon"(): $TextureAtlasSprite
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FlowerBoxBakedModel$Type = ($FlowerBoxBakedModel);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FlowerBoxBakedModel_ = $FlowerBoxBakedModel$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/integration/$FarmersDelightCompat" {
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $FarmersDelightCompat {

constructor()

public static "onCakeInteract"(state: $BlockState$Type, pos: $BlockPos$Type, level: $Level$Type, stack: $ItemStack$Type): $InteractionResult
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FarmersDelightCompat$Type = ($FarmersDelightCompat);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FarmersDelightCompat_ = $FarmersDelightCompat$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/block_models/$BlackboardBakedModel" {
import {$ModelData, $ModelData$Type} from "packages/net/minecraftforge/client/model/data/$ModelData"
import {$ModelState, $ModelState$Type} from "packages/net/minecraft/client/resources/model/$ModelState"
import {$ItemTransforms, $ItemTransforms$Type} from "packages/net/minecraft/client/renderer/block/model/$ItemTransforms"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$ExtraModelData, $ExtraModelData$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$ExtraModelData"
import {$CustomBakedModel, $CustomBakedModel$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$CustomBakedModel"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BakedModel, $BakedModel$Type} from "packages/net/minecraft/client/resources/model/$BakedModel"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$RenderType, $RenderType$Type} from "packages/net/minecraft/client/renderer/$RenderType"
import {$ItemOverrides, $ItemOverrides$Type} from "packages/net/minecraft/client/renderer/block/model/$ItemOverrides"
import {$ItemDisplayContext, $ItemDisplayContext$Type} from "packages/net/minecraft/world/item/$ItemDisplayContext"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$Transformation, $Transformation$Type} from "packages/com/mojang/math/$Transformation"
import {$List, $List$Type} from "packages/java/util/$List"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$ChunkRenderTypeSet, $ChunkRenderTypeSet$Type} from "packages/net/minecraftforge/client/$ChunkRenderTypeSet"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockAndTintGetter, $BlockAndTintGetter$Type} from "packages/net/minecraft/world/level/$BlockAndTintGetter"
import {$BakedQuad, $BakedQuad$Type} from "packages/net/minecraft/client/renderer/block/model/$BakedQuad"
import {$TextureAtlasSprite, $TextureAtlasSprite$Type} from "packages/net/minecraft/client/renderer/texture/$TextureAtlasSprite"

export class $BlackboardBakedModel implements $CustomBakedModel {

constructor(back: $BakedModel$Type, modelTransform: $ModelState$Type)

public "usesBlockLight"(): boolean
public "isGui3d"(): boolean
public static "createPixelQuad"(x: float, y: float, width: float, height: float, sprite: $TextureAtlasSprite$Type, color: integer, transform: $Transformation$Type, emissive: boolean): $BakedQuad
public "getBlockQuads"(state: $BlockState$Type, side: $Direction$Type, rand: $RandomSource$Type, renderType: $RenderType$Type, data: $ExtraModelData$Type): $List<($BakedQuad)>
public "getBlockParticle"(data: $ExtraModelData$Type): $TextureAtlasSprite
public "isCustomRenderer"(): boolean
public "getOverrides"(): $ItemOverrides
public "getTransforms"(): $ItemTransforms
public "useAmbientOcclusion"(): boolean
public "getParticleIcon"(): $TextureAtlasSprite
public "getQuads"(state: $BlockState$Type, side: $Direction$Type, rand: $RandomSource$Type): $List<(any)>
public "getQuads"(state: $BlockState$Type, side: $Direction$Type, rand: $RandomSource$Type, modelData: $ModelData$Type, type: $RenderType$Type): $List<(any)>
public "getParticleIcon"(data: $ModelData$Type): $TextureAtlasSprite
public "getModelData"(level: $BlockAndTintGetter$Type, pos: $BlockPos$Type, state: $BlockState$Type, modelData: $ModelData$Type): $ModelData
public "getModelData"(originalData: $ExtraModelData$Type, stack: $ItemStack$Type): $ExtraModelData
public "getModelData"(tileData: $ExtraModelData$Type, pos: $BlockPos$Type, state: $BlockState$Type, level: $BlockAndTintGetter$Type): $ExtraModelData
public "useAmbientOcclusion"(arg0: $BlockState$Type, arg1: $RenderType$Type): boolean
public "useAmbientOcclusion"(arg0: $BlockState$Type): boolean
public "getRenderTypes"(arg0: $ItemStack$Type, arg1: boolean): $List<($RenderType)>
public "getRenderTypes"(arg0: $BlockState$Type, arg1: $RandomSource$Type, arg2: $ModelData$Type): $ChunkRenderTypeSet
public "getRenderPasses"(arg0: $ItemStack$Type, arg1: boolean): $List<($BakedModel)>
public "applyTransform"(arg0: $ItemDisplayContext$Type, arg1: $PoseStack$Type, arg2: boolean): $BakedModel
public "useAmbientOcclusionWithLightEmission"(arg0: $BlockState$Type, arg1: $RenderType$Type): boolean
get "gui3d"(): boolean
get "customRenderer"(): boolean
get "overrides"(): $ItemOverrides
get "transforms"(): $ItemTransforms
get "particleIcon"(): $TextureAtlasSprite
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BlackboardBakedModel$Type = ($BlackboardBakedModel);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BlackboardBakedModel_ = $BlackboardBakedModel$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/misc/$SoapWashableHelper" {
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $SoapWashableHelper {

constructor()

public static "tryWash"(level: $Level$Type, pos: $BlockPos$Type, state: $BlockState$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SoapWashableHelper$Type = ($SoapWashableHelper);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SoapWashableHelper_ = $SoapWashableHelper$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/platform/$PlatHelper" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$SpawnEggItem, $SpawnEggItem$Type} from "packages/net/minecraft/world/item/$SpawnEggItem"
import {$Field, $Field$Type} from "packages/java/lang/reflect/$Field"
import {$Pack, $Pack$Type} from "packages/net/minecraft/server/packs/repository/$Pack"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$FoodProperties, $FoodProperties$Type} from "packages/net/minecraft/world/food/$FoodProperties"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$List, $List$Type} from "packages/java/util/$List"
import {$SimpleParticleType, $SimpleParticleType$Type} from "packages/net/minecraft/core/particles/$SimpleParticleType"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$Packet, $Packet$Type} from "packages/net/minecraft/network/protocol/$Packet"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$Method, $Method$Type} from "packages/java/lang/reflect/$Method"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$PlatHelper$Side, $PlatHelper$Side$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/$PlatHelper$Side"
import {$PackType, $PackType$Type} from "packages/net/minecraft/server/packs/$PackType"
import {$PlatHelper$Platform, $PlatHelper$Platform$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/$PlatHelper$Platform"
import {$MenuProvider, $MenuProvider$Type} from "packages/net/minecraft/world/$MenuProvider"
import {$PreparableReloadListener, $PreparableReloadListener$Type} from "packages/net/minecraft/server/packs/resources/$PreparableReloadListener"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$Runnable, $Runnable$Type} from "packages/java/lang/$Runnable"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$ClientGamePacketListener, $ClientGamePacketListener$Type} from "packages/net/minecraft/network/protocol/game/$ClientGamePacketListener"
import {$MinecraftServer, $MinecraftServer$Type} from "packages/net/minecraft/server/$MinecraftServer"
import {$FlowerPotBlock, $FlowerPotBlock$Type} from "packages/net/minecraft/world/level/block/$FlowerPotBlock"
import {$GameProfile, $GameProfile$Type} from "packages/com/mojang/authlib/$GameProfile"
import {$MobCategory, $MobCategory$Type} from "packages/net/minecraft/world/entity/$MobCategory"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$JsonElement, $JsonElement$Type} from "packages/com/google/gson/$JsonElement"
import {$Path, $Path$Type} from "packages/java/nio/file/$Path"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$EntityType$EntityFactory, $EntityType$EntityFactory$Type} from "packages/net/minecraft/world/entity/$EntityType$EntityFactory"
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$RecordItem, $RecordItem$Type} from "packages/net/minecraft/world/item/$RecordItem"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$PlatHelper$BlockEntitySupplier, $PlatHelper$BlockEntitySupplier$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/$PlatHelper$BlockEntitySupplier"

export class $PlatHelper {

constructor()

public static "isInitializing"(): boolean
public static "getPlatform"(): $PlatHelper$Platform
public static "getGamePath"(): $Path
public static "newSpawnEgg"(entityType: $Supplier$Type<(any)>, color: integer, outerColor: integer, properties: $Item$Properties$Type): $SpawnEggItem
public static "getModFilePath"(modId: string): $Path
public static "isMobGriefingOn"(level: $Level$Type, entity: $Entity$Type): boolean
public static "getInstalledMods"(): $List<(string)>
public static "newEntityType"<E extends $Entity>(name: string, factory: $EntityType$EntityFactory$Type<(E)>, category: $MobCategory$Type, width: float, height: float, clientTrackingRange: integer, velocityUpdates: boolean, updateInterval: integer): $EntityType<(E)>
public static "newFlowerPot"(emptyPot: $Supplier$Type<($FlowerPotBlock$Type)>, supplier: $Supplier$Type<(any)>, properties: $BlockBehaviour$Properties$Type): $FlowerPotBlock
public static "getModPageUrl"(modId: string): string
public static "isModLoadingValid"(): boolean
public static "newMusicDisc"(power: integer, music: $Supplier$Type<($SoundEvent$Type)>, properties: $Item$Properties$Type, secondDuration: integer): $RecordItem
public static "getCurrentServer"(): $MinecraftServer
public static "findMethod"(clazz: $Class$Type<(any)>, methodName: string, ...parameterTypes: ($Class$Type<(any)>)[]): $Method
public static "isAreaLoaded"(level: $LevelReader$Type, pos: $BlockPos$Type, maxRange: integer): boolean
public static "isDev"(): boolean
public static "addCommonSetup"(commonSetup: $Runnable$Type): void
public static "getPhysicalSide"(): $PlatHelper$Side
public static "isData"(): boolean
public static "getFoodProperties"(food: $Item$Type, stack: $ItemStack$Type, player: $Player$Type): $FoodProperties
public static "getBurnTime"(stack: $ItemStack$Type): integer
public static "getModVersion"(modId: string): string
public static "getFlammability"(state: $BlockState$Type, level: $BlockGetter$Type, pos: $BlockPos$Type, face: $Direction$Type): integer
public static "newParticle"(): $SimpleParticleType
public static "newBlockEntityType"<T extends $BlockEntity>(blockEntitySupplier: $PlatHelper$BlockEntitySupplier$Type<(T)>, ...validBlocks: ($Block$Type)[]): $BlockEntityType<(T)>
public static "getModName"(modId: string): string
public static "findField"<T>(clazz: $Class$Type<(any)>, fieldName: string): $Field
public static "isModLoaded"(modId: string): boolean
public static "getEntitySpawnPacket"(entity: $Entity$Type): $Packet<($ClientGamePacketListener)>
public static "registerResourcePack"(packType: $PackType$Type, packSupplier: $Supplier$Type<($Pack$Type)>): void
public static "evaluateRecipeCondition"(jo: $JsonElement$Type): boolean
public static "getFakeServerPlayer"(id: $GameProfile$Type, level: $ServerLevel$Type): $Player
public static "addCommonSetupAsync"(commonSetup: $Runnable$Type): void
public static "addServerReloadListener"(listener: $PreparableReloadListener$Type, location: $ResourceLocation$Type): void
public static "openCustomMenu"(player: $ServerPlayer$Type, menuProvider: $MenuProvider$Type, pos: $BlockPos$Type): void
public static "openCustomMenu"(player: $ServerPlayer$Type, menuProvider: $MenuProvider$Type, extraDataProvider: $Consumer$Type<($FriendlyByteBuf$Type)>): void
get "initializing"(): boolean
get "platform"(): $PlatHelper$Platform
get "gamePath"(): $Path
get "installedMods"(): $List<(string)>
get "modLoadingValid"(): boolean
get "currentServer"(): $MinecraftServer
get "dev"(): boolean
get "physicalSide"(): $PlatHelper$Side
get "data"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PlatHelper$Type = ($PlatHelper);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PlatHelper_ = $PlatHelper$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/blocks/$FirePitBlock" {
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$BlockPathTypes, $BlockPathTypes$Type} from "packages/net/minecraft/world/level/pathfinder/$BlockPathTypes"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$CollisionContext, $CollisionContext$Type} from "packages/net/minecraft/world/phys/shapes/$CollisionContext"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$PathComputationType, $PathComputationType$Type} from "packages/net/minecraft/world/level/pathfinder/$PathComputationType"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$Mob, $Mob$Type} from "packages/net/minecraft/world/entity/$Mob"
import {$LightUpWaterBlock, $LightUpWaterBlock$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/blocks/$LightUpWaterBlock"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $FirePitBlock extends $LightUpWaterBlock {
static readonly "HANGING": $BooleanProperty
static readonly "WATERLOGGED": $BooleanProperty
static readonly "LIT": $BooleanProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(fireDamage: float, properties: $BlockBehaviour$Properties$Type)

public "getBlockPathType"(state: $BlockState$Type, level: $BlockGetter$Type, pos: $BlockPos$Type, entity: $Mob$Type): $BlockPathTypes
public "getStateForPlacement"(context: $BlockPlaceContext$Type): $BlockState
public "isPathfindable"(state: $BlockState$Type, level: $BlockGetter$Type, pos: $BlockPos$Type, type: $PathComputationType$Type): boolean
public "updateShape"(stateIn: $BlockState$Type, facing: $Direction$Type, facingState: $BlockState$Type, level: $LevelAccessor$Type, currentPos: $BlockPos$Type, facingPos: $BlockPos$Type): $BlockState
public "hasAnalogOutputSignal"(state: $BlockState$Type): boolean
public "canSurvive"(state: $BlockState$Type, level: $LevelReader$Type, pos: $BlockPos$Type): boolean
public "getAnalogOutputSignal"(state: $BlockState$Type, level: $Level$Type, pos: $BlockPos$Type): integer
public "getShape"(state: $BlockState$Type, level: $BlockGetter$Type, pos: $BlockPos$Type, context: $CollisionContext$Type): $VoxelShape
public "entityInside"(state: $BlockState$Type, level: $Level$Type, pos: $BlockPos$Type, entity: $Entity$Type): void
public "animateTick"(state: $BlockState$Type, level: $Level$Type, pos: $BlockPos$Type, random: $RandomSource$Type): void
public static "spawnSmokeParticles"(level: $Level$Type, pos: $BlockPos$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FirePitBlock$Type = ($FirePitBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FirePitBlock_ = $FirePitBlock$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/core/fluid/forge/$SoftFluidInternalImpl" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Fluid, $Fluid$Type} from "packages/net/minecraft/world/level/material/$Fluid"
import {$DataPackRegistryEvent$NewRegistry, $DataPackRegistryEvent$NewRegistry$Type} from "packages/net/minecraftforge/registries/$DataPackRegistryEvent$NewRegistry"
import {$Holder, $Holder$Type} from "packages/net/minecraft/core/$Holder"
import {$SoftFluid, $SoftFluid$Type} from "packages/net/mehvahdjukaar/moonlight/api/fluids/$SoftFluid"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $SoftFluidInternalImpl {

constructor()

public static "init"(): void
public static "registerDataPackRegistry"(event: $DataPackRegistryEvent$NewRegistry$Type): void
public static "registerExistingVanillaFluids"(fluidMap: $Map$Type<($Fluid$Type), ($Holder$Type<($SoftFluid$Type)>)>, itemMap: $Map$Type<($Item$Type), ($Holder$Type<($SoftFluid$Type)>)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SoftFluidInternalImpl$Type = ($SoftFluidInternalImpl);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SoftFluidInternalImpl_ = $SoftFluidInternalImpl$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/integration/create/$NoticeBoardDisplayTarget" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$DisplayTarget, $DisplayTarget$Type} from "packages/com/simibubi/create/content/redstone/displayLink/target/$DisplayTarget"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$DisplayLinkContext, $DisplayLinkContext$Type} from "packages/com/simibubi/create/content/redstone/displayLink/$DisplayLinkContext"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$DisplayTargetStats, $DisplayTargetStats$Type} from "packages/com/simibubi/create/content/redstone/displayLink/target/$DisplayTargetStats"

export class $NoticeBoardDisplayTarget extends $DisplayTarget {
 "id": $ResourceLocation

constructor()

public "provideStats"(context: $DisplayLinkContext$Type): $DisplayTargetStats
public "acceptText"(line: integer, text: $List$Type<($MutableComponent$Type)>, context: $DisplayLinkContext$Type): void
public "getLineOptionText"(line: integer): $Component
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $NoticeBoardDisplayTarget$Type = ($NoticeBoardDisplayTarget);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $NoticeBoardDisplayTarget_ = $NoticeBoardDisplayTarget$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/forge/$SuppPlatformStuffImpl" {
import {$MobBucketItem, $MobBucketItem$Type} from "packages/net/minecraft/world/item/$MobBucketItem"
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$EnderMan, $EnderMan$Type} from "packages/net/minecraft/world/entity/monster/$EnderMan"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$CreativeModeTab$Builder, $CreativeModeTab$Builder$Type} from "packages/net/minecraft/world/item/$CreativeModeTab$Builder"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$Biome, $Biome$Type} from "packages/net/minecraft/world/level/biome/$Biome"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$ItemEntity, $ItemEntity$Type} from "packages/net/minecraft/world/entity/item/$ItemEntity"

export class $SuppPlatformStuffImpl {

constructor()

public static "getUnoxidised"(level: $Level$Type, pos: $BlockPos$Type, state: $BlockState$Type): $BlockState
public static "getForgeCap"<T>(object: any, capClass: $Class$Type<(T)>): T
public static "getDownfall"(biome: $Biome$Type): float
public static "disableAMWarn"(): void
public static "disableOFWarn"(on: boolean): void
public static "searchBar"(c: $CreativeModeTab$Builder$Type): $CreativeModeTab$Builder
public static "isEndermanMask"(enderMan: $EnderMan$Type, player: $Player$Type, itemstack: $ItemStack$Type): boolean
public static "getFishType"(bucketItem: $MobBucketItem$Type): $EntityType<(any)>
public static "getItemLifeSpawn"(itemEntity: $ItemEntity$Type): integer
public static "onItemPickup"(player: $Player$Type, itemEntity: $ItemEntity$Type, copy: $ItemStack$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SuppPlatformStuffImpl$Type = ($SuppPlatformStuffImpl);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SuppPlatformStuffImpl_ = $SuppPlatformStuffImpl$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/items/crafting/$ItemLoreRecipe" {
import {$RegistryAccess, $RegistryAccess$Type} from "packages/net/minecraft/core/$RegistryAccess"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$RecipeSerializer, $RecipeSerializer$Type} from "packages/net/minecraft/world/item/crafting/$RecipeSerializer"
import {$CustomRecipe, $CustomRecipe$Type} from "packages/net/minecraft/world/item/crafting/$CustomRecipe"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$CraftingContainer, $CraftingContainer$Type} from "packages/net/minecraft/world/inventory/$CraftingContainer"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$CraftingBookCategory, $CraftingBookCategory$Type} from "packages/net/minecraft/world/item/crafting/$CraftingBookCategory"

export class $ItemLoreRecipe extends $CustomRecipe {

constructor(resourceLocation: $ResourceLocation$Type, category: $CraftingBookCategory$Type)

public "matches"(inv: $CraftingContainer$Type, worldIn: $Level$Type): boolean
public "getRemainingItems"(inv: $CraftingContainer$Type): $NonNullList<($ItemStack)>
public static "addLore"(lore: $Component$Type, result: $ItemStack$Type): void
public "canCraftInDimensions"(x: integer, y: integer): boolean
public "getSerializer"(): $RecipeSerializer<(any)>
public "assemble"(craftingContainer: $CraftingContainer$Type, registryAccess: $RegistryAccess$Type): $ItemStack
get "serializer"(): $RecipeSerializer<(any)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ItemLoreRecipe$Type = ($ItemLoreRecipe);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ItemLoreRecipe_ = $ItemLoreRecipe$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/$BlackboardManager$Blackboard" {
import {$AutoCloseable, $AutoCloseable$Type} from "packages/java/lang/$AutoCloseable"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$BiFunction, $BiFunction$Type} from "packages/java/util/function/$BiFunction"
import {$RenderType, $RenderType$Type} from "packages/net/minecraft/client/renderer/$RenderType"
import {$BakedQuad, $BakedQuad$Type} from "packages/net/minecraft/client/renderer/block/model/$BakedQuad"

export class $BlackboardManager$Blackboard implements $AutoCloseable {


public "close"(): void
public "getRenderType"(): $RenderType
public "isGlow"(): boolean
public "getOrCreateModel"(dir: $Direction$Type, modelFactory: $BiFunction$Type<($BlackboardManager$Blackboard$Type), ($Direction$Type), ($List$Type<($BakedQuad$Type)>)>): $List<($BakedQuad)>
public "getTextureLocation"(): $ResourceLocation
public "getPixels"(): ((byte)[])[]
get "renderType"(): $RenderType
get "glow"(): boolean
get "textureLocation"(): $ResourceLocation
get "pixels"(): ((byte)[])[]
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BlackboardManager$Blackboard$Type = ($BlackboardManager$Blackboard);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BlackboardManager$Blackboard_ = $BlackboardManager$Blackboard$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/item/$WoodBasedItem" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$BlockTypeBasedItem, $BlockTypeBasedItem$Type} from "packages/net/mehvahdjukaar/moonlight/api/item/$BlockTypeBasedItem"
import {$WoodType, $WoodType$Type} from "packages/net/mehvahdjukaar/moonlight/api/set/wood/$WoodType"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $WoodBasedItem extends $BlockTypeBasedItem<($WoodType)> {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(builder: $Item$Properties$Type, woodType: $WoodType$Type, burnTicks: integer)
constructor(builder: $Item$Properties$Type, burnTicks: integer)
constructor(builder: $Item$Properties$Type, woodType: $WoodType$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WoodBasedItem$Type = ($WoodBasedItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WoodBasedItem_ = $WoodBasedItem$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/resources/textures/$ImageTransformer" {
import {$ImageTransformer$Builder, $ImageTransformer$Builder$Type} from "packages/net/mehvahdjukaar/moonlight/api/resources/textures/$ImageTransformer$Builder"
import {$TextureImage, $TextureImage$Type} from "packages/net/mehvahdjukaar/moonlight/api/resources/textures/$TextureImage"

export class $ImageTransformer {


public "apply"(original: $TextureImage$Type, target: $TextureImage$Type): void
public static "builder"(originalW: integer, originalH: integer, targetW: integer, targetH: integer): $ImageTransformer$Builder
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ImageTransformer$Type = ($ImageTransformer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ImageTransformer_ = $ImageTransformer$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/core/databuddy/$ConfigHelper" {
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$ConfigHelper$ConfigObject, $ConfigHelper$ConfigObject$Type} from "packages/net/mehvahdjukaar/moonlight/core/databuddy/$ConfigHelper$ConfigObject"
import {$ForgeConfigSpec$Builder, $ForgeConfigSpec$Builder$Type} from "packages/net/minecraftforge/common/$ForgeConfigSpec$Builder"
import {$ModConfig$Type, $ModConfig$Type$Type} from "packages/net/minecraftforge/fml/config/$ModConfig$Type"
import {$Codec, $Codec$Type} from "packages/com/mojang/serialization/$Codec"
import {$Supplier, $Supplier$Type} from "packages/com/google/common/base/$Supplier"

export class $ConfigHelper {


public static "register"<T>(configType: $ModConfig$Type$Type, configFactory: $Function$Type<($ForgeConfigSpec$Builder$Type), (T)>, configName: string): T
public static "register"<T>(configType: $ModConfig$Type$Type, configFactory: $Function$Type<($ForgeConfigSpec$Builder$Type), (T)>): T
public static "defineObject"<T>(builder: $ForgeConfigSpec$Builder$Type, name: string, codec: $Codec$Type<(T)>, defaultSupplier: $Supplier$Type<(T)>): $ConfigHelper$ConfigObject<(T)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ConfigHelper$Type = ($ConfigHelper);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ConfigHelper_ = $ConfigHelper$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/util/$AnimalFoodHelper" {
import {$ItemLike, $ItemLike$Type} from "packages/net/minecraft/world/level/$ItemLike"

/**
 * 
 * @deprecated
 */
export class $AnimalFoodHelper {

constructor()

/**
 * 
 * @deprecated
 */
public static "addHorseFood"(...food: ($ItemLike$Type)[]): void
/**
 * 
 * @deprecated
 */
public static "addChickenFood"(...food: ($ItemLike$Type)[]): void
/**
 * 
 * @deprecated
 */
public static "addParrotFood"(...food: ($ItemLike$Type)[]): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AnimalFoodHelper$Type = ($AnimalFoodHelper);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AnimalFoodHelper_ = $AnimalFoodHelper$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/faucet/$ConcreteInteraction" {
import {$FaucetTarget$BlState, $FaucetTarget$BlState$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/faucet/$FaucetTarget$BlState"
import {$SoftFluidStack, $SoftFluidStack$Type} from "packages/net/mehvahdjukaar/moonlight/api/fluids/$SoftFluidStack"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $ConcreteInteraction implements $FaucetTarget$BlState {


public "fill"(level: $Level$Type, pos: $BlockPos$Type, state: $BlockState$Type, fluid: $SoftFluidStack$Type, minAmount: integer): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ConcreteInteraction$Type = ($ConcreteInteraction);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ConcreteInteraction_ = $ConcreteInteraction$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/screens/$WelcomeMessageScreen" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$List, $List$Type} from "packages/java/util/$List"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Runnable, $Runnable$Type} from "packages/java/lang/$Runnable"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $WelcomeMessageScreen extends $Screen {
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering

constructor(screen: $Screen$Type, ticksUntilEnable: integer, title: $Component$Type, text: $Component$Type, url: $Component$Type, onTurnOff: $Runnable$Type)

public "getNarrationMessage"(): $Component
public "shouldCloseOnEsc"(): boolean
public "onClose"(): void
public "render"(graphics: $GuiGraphics$Type, mouseX: integer, mouseY: integer, partialTicks: float): void
public static "createOptifine"(screen: $Screen$Type): $WelcomeMessageScreen
public static "createAmendments"(screen: $Screen$Type): $WelcomeMessageScreen
public "tick"(): void
public "mouseClicked"(pMouseX: double, pMouseY: double, pButton: integer): boolean
get "narrationMessage"(): $Component
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WelcomeMessageScreen$Type = ($WelcomeMessageScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WelcomeMessageScreen_ = $WelcomeMessageScreen$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/resources/$RPUtils" {
import {$JsonObject, $JsonObject$Type} from "packages/com/google/gson/$JsonObject"
import {$JsonElement, $JsonElement$Type} from "packages/com/google/gson/$JsonElement"
import {$IRecipeTemplate, $IRecipeTemplate$Type} from "packages/net/mehvahdjukaar/moonlight/api/resources/recipe/$IRecipeTemplate"
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$RPUtils$OverrideAppender, $RPUtils$OverrideAppender$Type} from "packages/net/mehvahdjukaar/moonlight/api/resources/$RPUtils$OverrideAppender"
import {$Recipe, $Recipe$Type} from "packages/net/minecraft/world/item/crafting/$Recipe"
import {$BlockType, $BlockType$Type} from "packages/net/mehvahdjukaar/moonlight/api/set/$BlockType"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$InputStream, $InputStream$Type} from "packages/java/io/$InputStream"
import {$DynamicTexturePack, $DynamicTexturePack$Type} from "packages/net/mehvahdjukaar/moonlight/api/resources/pack/$DynamicTexturePack"
import {$ResourceManager, $ResourceManager$Type} from "packages/net/minecraft/server/packs/resources/$ResourceManager"

export class $RPUtils {

constructor()

public static "deserializeJson"(stream: $InputStream$Type): $JsonObject
public static "readRecipeAsTemplate"(manager: $ResourceManager$Type, location: $ResourceLocation$Type): $IRecipeTemplate<(any)>
public static "readRecipeAsTemplate"(manager: $ResourceManager$Type, location: string): $IRecipeTemplate<(any)>
public static "appendModelOverride"(manager: $ResourceManager$Type, pack: $DynamicTexturePack$Type, modelRes: $ResourceLocation$Type, modelConsumer: $Consumer$Type<($RPUtils$OverrideAppender$Type)>): void
public static "makeSimilarRecipe"<T extends $BlockType>(original: $Recipe$Type<(any)>, originalMat: T, destinationMat: T, baseID: string): $Recipe<(any)>
public static "serializeJson"(json: $JsonElement$Type): string
public static "findFirstResourceInJsonRecursive"(element: $JsonElement$Type): string
public static "findAllResourcesInJsonRecursive"(element: $JsonElement$Type): $Set<(string)>
public static "findAllResourcesInJsonRecursive"(element: $JsonElement$Type, filter: $Predicate$Type<(string)>): $Set<(string)>
public static "readRecipe"(manager: $ResourceManager$Type, location: string): $Recipe<(any)>
public static "readRecipe"(manager: $ResourceManager$Type, location: $ResourceLocation$Type): $Recipe<(any)>
public static "findFirstItemTextureLocation"(manager: $ResourceManager$Type, block: $Item$Type): $ResourceLocation
public static "findFirstItemTextureLocation"(manager: $ResourceManager$Type, item: $Item$Type, texturePredicate: $Predicate$Type<(string)>): $ResourceLocation
public static "findFirstBlockTextureLocation"(manager: $ResourceManager$Type, block: $Block$Type): $ResourceLocation
public static "findFirstBlockTextureLocation"(manager: $ResourceManager$Type, block: $Block$Type, texturePredicate: $Predicate$Type<(string)>): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RPUtils$Type = ($RPUtils);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RPUtils_ = $RPUtils$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/events/forge/$ServerEventsForge" {
import {$LevelEvent$Unload, $LevelEvent$Unload$Type} from "packages/net/minecraftforge/event/level/$LevelEvent$Unload"
import {$ProjectileImpactEvent, $ProjectileImpactEvent$Type} from "packages/net/minecraftforge/event/entity/$ProjectileImpactEvent"
import {$BlockEvent$BlockToolModificationEvent, $BlockEvent$BlockToolModificationEvent$Type} from "packages/net/minecraftforge/event/level/$BlockEvent$BlockToolModificationEvent"
import {$PlayerEvent$PlayerLoggedInEvent, $PlayerEvent$PlayerLoggedInEvent$Type} from "packages/net/minecraftforge/event/entity/player/$PlayerEvent$PlayerLoggedInEvent"
import {$AttachCapabilitiesEvent, $AttachCapabilitiesEvent$Type} from "packages/net/minecraftforge/event/$AttachCapabilitiesEvent"
import {$PlayerInteractEvent$RightClickBlock, $PlayerInteractEvent$RightClickBlock$Type} from "packages/net/minecraftforge/event/entity/player/$PlayerInteractEvent$RightClickBlock"
import {$OnDatapackSyncEvent, $OnDatapackSyncEvent$Type} from "packages/net/minecraftforge/event/$OnDatapackSyncEvent"
import {$TickEvent$PlayerTickEvent, $TickEvent$PlayerTickEvent$Type} from "packages/net/minecraftforge/event/$TickEvent$PlayerTickEvent"
import {$EntityItemPickupEvent, $EntityItemPickupEvent$Type} from "packages/net/minecraftforge/event/entity/player/$EntityItemPickupEvent"
import {$PlayerInteractEvent$EntityInteract, $PlayerInteractEvent$EntityInteract$Type} from "packages/net/minecraftforge/event/entity/player/$PlayerInteractEvent$EntityInteract"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$EntityJoinLevelEvent, $EntityJoinLevelEvent$Type} from "packages/net/minecraftforge/event/entity/$EntityJoinLevelEvent"
import {$TagsUpdatedEvent, $TagsUpdatedEvent$Type} from "packages/net/minecraftforge/event/$TagsUpdatedEvent"
import {$LivingHurtEvent, $LivingHurtEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingHurtEvent"
import {$TickEvent$LevelTickEvent, $TickEvent$LevelTickEvent$Type} from "packages/net/minecraftforge/event/$TickEvent$LevelTickEvent"
import {$PlayerInteractEvent$RightClickItem, $PlayerInteractEvent$RightClickItem$Type} from "packages/net/minecraftforge/event/entity/player/$PlayerInteractEvent$RightClickItem"
import {$NoteBlockEvent$Play, $NoteBlockEvent$Play$Type} from "packages/net/minecraftforge/event/level/$NoteBlockEvent$Play"

export class $ServerEventsForge {

constructor()

public static "init"(): void
public static "onPlayerTick"(event: $TickEvent$PlayerTickEvent$Type): void
public static "noteBlockEvent"(event: $NoteBlockEvent$Play$Type): void
public static "toolModification"(event: $BlockEvent$BlockToolModificationEvent$Type): void
public static "onEntityJoin"(event: $EntityJoinLevelEvent$Type): void
public static "onAttachTileCapabilities"(event: $AttachCapabilitiesEvent$Type<($BlockEntity$Type)>): void
public static "onServerTick"(event: $TickEvent$LevelTickEvent$Type): void
public static "onUseItem"(event: $PlayerInteractEvent$RightClickItem$Type): void
public static "onTagUpdate"(event: $TagsUpdatedEvent$Type): void
public static "onUseBlockHP"(event: $PlayerInteractEvent$RightClickBlock$Type): void
public static "onUseBlock"(event: $PlayerInteractEvent$RightClickBlock$Type): void
public static "onPlayerLoggedIn"(event: $PlayerEvent$PlayerLoggedInEvent$Type): void
public static "onDataSync"(event: $OnDatapackSyncEvent$Type): void
public static "onLivingDeath"(event: $LivingHurtEvent$Type): void
public static "onEntityInteract"(event: $PlayerInteractEvent$EntityInteract$Type): void
public static "onLevelUnload"(event: $LevelEvent$Unload$Type): void
public static "onProjectileImpact"(event: $ProjectileImpactEvent$Type): void
public static "onItemPickup"(event: $EntityItemPickupEvent$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ServerEventsForge$Type = ($ServerEventsForge);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ServerEventsForge_ = $ServerEventsForge$Type;
}}
declare module "packages/net/mehvahdjukaar/dummmmmmy/client/$TargetDummyRenderer" {
import {$HumanoidMobRenderer, $HumanoidMobRenderer$Type} from "packages/net/minecraft/client/renderer/entity/$HumanoidMobRenderer"
import {$RenderLayer, $RenderLayer$Type} from "packages/net/minecraft/client/renderer/entity/layers/$RenderLayer"
import {$EntityRendererProvider$Context, $EntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRendererProvider$Context"
import {$List, $List$Type} from "packages/java/util/$List"
import {$EntityModel, $EntityModel$Type} from "packages/net/minecraft/client/model/$EntityModel"
import {$TargetDummyModel, $TargetDummyModel$Type} from "packages/net/mehvahdjukaar/dummmmmmy/client/$TargetDummyModel"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$TargetDummyEntity, $TargetDummyEntity$Type} from "packages/net/mehvahdjukaar/dummmmmmy/common/$TargetDummyEntity"

export class $TargetDummyRenderer extends $HumanoidMobRenderer<($TargetDummyEntity), ($TargetDummyModel<($TargetDummyEntity)>)> {
static readonly "LEASH_RENDER_STEPS": integer
 "model": M
 "layers": $List<($RenderLayer<(T), (M)>)>
 "shadowRadius": float

constructor(context: $EntityRendererProvider$Context$Type)

public "getTextureLocation"(entity: $TargetDummyEntity$Type): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TargetDummyRenderer$Type = ($TargetDummyRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TargetDummyRenderer_ = $TargetDummyRenderer$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/misc/map_markers/$WeatheredMap$WeatheredMapData" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$CustomMapData$Type, $CustomMapData$Type$Type} from "packages/net/mehvahdjukaar/moonlight/api/map/$CustomMapData$Type"
import {$MapItemSavedData, $MapItemSavedData$Type} from "packages/net/minecraft/world/level/saveddata/maps/$MapItemSavedData"
import {$CustomMapData, $CustomMapData$Type} from "packages/net/mehvahdjukaar/moonlight/api/map/$CustomMapData"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$CustomMapData$SimpleDirtyCounter, $CustomMapData$SimpleDirtyCounter$Type} from "packages/net/mehvahdjukaar/moonlight/api/map/$CustomMapData$SimpleDirtyCounter"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $WeatheredMap$WeatheredMapData implements $CustomMapData<($CustomMapData$SimpleDirtyCounter)> {

constructor()

public "load"(tag: $CompoundTag$Type): void
public "set"(on: boolean): void
public "save"(tag: $CompoundTag$Type): void
public "getType"(): $CustomMapData$Type<($WeatheredMap$WeatheredMapData)>
public "createDirtyCounter"(): $CustomMapData$SimpleDirtyCounter
public "loadUpdateTag"(tag: $CompoundTag$Type): void
public "saveToUpdateTag"(tag: $CompoundTag$Type, dirtyCounter: $CustomMapData$SimpleDirtyCounter$Type): void
public "isAntique"(): boolean
public "onItemTooltip"(data: $MapItemSavedData$Type, stack: $ItemStack$Type): $Component
public "onItemUpdate"(data: $MapItemSavedData$Type, entity: $Entity$Type): boolean
public "setDirty"(data: $MapItemSavedData$Type, dirtySetter: $Consumer$Type<($CustomMapData$SimpleDirtyCounter$Type)>): void
public "persistOnCopyOrLock"(): boolean
get "type"(): $CustomMapData$Type<($WeatheredMap$WeatheredMapData)>
get "antique"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WeatheredMap$WeatheredMapData$Type = ($WeatheredMap$WeatheredMapData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WeatheredMap$WeatheredMapData_ = $WeatheredMap$WeatheredMapData$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/events/behaviors/$DirectionalCakeConversion" {
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$BlockUse, $BlockUse$Type} from "packages/net/mehvahdjukaar/amendments/events/behaviors/$BlockUse"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"

export class $DirectionalCakeConversion implements $BlockUse {


public "isEnabled"(): boolean
public "appliesToBlock"(block: $Block$Type): boolean
public "altersWorld"(): boolean
public "tryPerformingAction"(state: $BlockState$Type, pos: $BlockPos$Type, world: $Level$Type, player: $Player$Type, hand: $InteractionHand$Type, stack: $ItemStack$Type, hit: $BlockHitResult$Type): $InteractionResult
get "enabled"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DirectionalCakeConversion$Type = ($DirectionalCakeConversion);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DirectionalCakeConversion_ = $DirectionalCakeConversion$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/util/math/colors/$XYZColor" {
import {$RGBColor, $RGBColor$Type} from "packages/net/mehvahdjukaar/moonlight/api/util/math/colors/$RGBColor"
import {$Codec, $Codec$Type} from "packages/com/mojang/serialization/$Codec"
import {$BaseColor, $BaseColor$Type} from "packages/net/mehvahdjukaar/moonlight/api/util/math/colors/$BaseColor"

export class $XYZColor extends $BaseColor<($XYZColor)> {
/**
 * 
 * @deprecated
 */
static readonly "CODEC": $Codec<(integer)>

constructor(x: float, y: float, z: float, a: float)

public "toString"(): string
public "x"(): float
public "z"(): float
public "y"(): float
/**
 * 
 * @deprecated
 */
public "multiply"(color: $XYZColor$Type, hue: float, chroma: float, luminance: float, alpha: float): $XYZColor
public "alpha"(): float
public "asRGB"(): $RGBColor
public "fromRGB"(rgb: $RGBColor$Type): $XYZColor
public "withAlpha"(alpha: float): $XYZColor
public "asXYZ"(): $XYZColor
public "withZ"(z: float): $XYZColor
public "withX"(x: float): $XYZColor
public "withY"(y: float): $XYZColor
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $XYZColor$Type = ($XYZColor);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $XYZColor_ = $XYZColor$Type;
}}
declare module "packages/net/mehvahdjukaar/dummmmmmy/client/$LayerDummyArmor" {
import {$HumanoidModel, $HumanoidModel$Type} from "packages/net/minecraft/client/model/$HumanoidModel"
import {$RenderLayerParent, $RenderLayerParent$Type} from "packages/net/minecraft/client/renderer/entity/$RenderLayerParent"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$HumanoidArmorLayer, $HumanoidArmorLayer$Type} from "packages/net/minecraft/client/renderer/entity/layers/$HumanoidArmorLayer"
import {$TargetDummyEntity, $TargetDummyEntity$Type} from "packages/net/mehvahdjukaar/dummmmmmy/common/$TargetDummyEntity"
import {$ModelManager, $ModelManager$Type} from "packages/net/minecraft/client/resources/model/$ModelManager"

export class $LayerDummyArmor<T extends $TargetDummyEntity, A extends $HumanoidModel<(T)>> extends $HumanoidArmorLayer<(T), (A), (A)> {

constructor(renderLayerParent: $RenderLayerParent$Type<(T), (A)>, modelLegs: A, modelChest: A, modelManager: $ModelManager$Type)

public "m_117125_"(modelIn: A, slotIn: $EquipmentSlot$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LayerDummyArmor$Type<T, A> = ($LayerDummyArmor<(T), (A)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LayerDummyArmor_<T, A> = $LayerDummyArmor$Type<(T), (A)>;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/misc/mob_container/$DataDefinedCatchableMob" {
import {$BuiltinAnimation$Type, $BuiltinAnimation$Type$Type} from "packages/net/mehvahdjukaar/supplementaries/common/misc/mob_container/$BuiltinAnimation$Type"
import {$CapturedMobInstance, $CapturedMobInstance$Type} from "packages/net/mehvahdjukaar/supplementaries/api/$CapturedMobInstance"
import {$ICatchableMob, $ICatchableMob$Type} from "packages/net/mehvahdjukaar/supplementaries/api/$ICatchableMob"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$DataDefinedCatchableMob$CaptureSettings, $DataDefinedCatchableMob$CaptureSettings$Type} from "packages/net/mehvahdjukaar/supplementaries/common/misc/mob_container/$DataDefinedCatchableMob$CaptureSettings"
import {$DataDefinedCatchableMob$TickMode, $DataDefinedCatchableMob$TickMode$Type} from "packages/net/mehvahdjukaar/supplementaries/common/misc/mob_container/$DataDefinedCatchableMob$TickMode"
import {$Codec, $Codec$Type} from "packages/com/mojang/serialization/$Codec"
import {$SoftFluid, $SoftFluid$Type} from "packages/net/mehvahdjukaar/moonlight/api/fluids/$SoftFluid"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Holder, $Holder$Type} from "packages/net/minecraft/core/$Holder"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$DataDefinedCatchableMob$LootParam, $DataDefinedCatchableMob$LootParam$Type} from "packages/net/mehvahdjukaar/supplementaries/common/misc/mob_container/$DataDefinedCatchableMob$LootParam"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $DataDefinedCatchableMob implements $ICatchableMob {
static readonly "CODEC": $Codec<($DataDefinedCatchableMob)>

constructor(owners: $List$Type<($ResourceLocation$Type)>, widthIncrement: float, heightIncrement: float, lightLevel: integer, captureSettings: $Optional$Type<($DataDefinedCatchableMob$CaptureSettings$Type)>, fishIndex: integer, builtinAnimation: $BuiltinAnimation$Type$Type, tickMode: $DataDefinedCatchableMob$TickMode$Type, forceFluidID: $Optional$Type<($ResourceLocation$Type)>, loot: $Optional$Type<($DataDefinedCatchableMob$LootParam$Type)>)

public "shouldHover"(self: $Entity$Type, waterlogged: boolean): boolean
public "shouldRenderWithFluid"(): $Optional<($Holder<($SoftFluid)>)>
public "getHitBoxWidthIncrement"(entity: $Entity$Type): float
public "createCapturedMobInstance"<T extends $Entity>(self: T, containerWidth: float, containerHeight: float): $CapturedMobInstance<(T)>
public "getHitBoxHeightIncrement"(entity: $Entity$Type): float
public "getFishTextureIndex"(): integer
public "canBeCaughtWithItem"(entity: $Entity$Type, item: $Item$Type, player: $Player$Type): boolean
public "getLightLevel"(world: $Level$Type, pos: $BlockPos$Type): integer
public "onCaptured"(entity: $Entity$Type, player: $Player$Type, stack: $ItemStack$Type): void
public "renderAs2DFish"(): boolean
get "fishTextureIndex"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DataDefinedCatchableMob$Type = ($DataDefinedCatchableMob);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DataDefinedCatchableMob_ = $DataDefinedCatchableMob$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/map/$ExpandedMapData" {
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$CustomMapDecoration, $CustomMapDecoration$Type} from "packages/net/mehvahdjukaar/moonlight/api/map/$CustomMapDecoration"
import {$MapItemSavedData, $MapItemSavedData$Type} from "packages/net/minecraft/world/level/saveddata/maps/$MapItemSavedData"
import {$CustomMapData$Type, $CustomMapData$Type$Type} from "packages/net/mehvahdjukaar/moonlight/api/map/$CustomMapData$Type"
import {$CustomMapData, $CustomMapData$Type} from "packages/net/mehvahdjukaar/moonlight/api/map/$CustomMapData"
import {$MapBlockMarker, $MapBlockMarker$Type} from "packages/net/mehvahdjukaar/moonlight/api/map/markers/$MapBlockMarker"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$CustomMapData$DirtyCounter, $CustomMapData$DirtyCounter$Type} from "packages/net/mehvahdjukaar/moonlight/api/map/$CustomMapData$DirtyCounter"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export interface $ExpandedMapData {

 "copy"(): $MapItemSavedData
 "getCustomDecorations"(): $Map<(string), ($CustomMapDecoration)>
 "getVanillaDecorationSize"(): integer
 "setCustomDecorationsDirty"(): void
 "resetCustomDecoration"(): void
 "getCustomData"(): $Map<($ResourceLocation), ($CustomMapData<(any)>)>
 "toggleCustomDecoration"(arg0: $LevelAccessor$Type, arg1: $BlockPos$Type): boolean
 "setCustomDataDirty"<H extends $CustomMapData$DirtyCounter>(arg0: $CustomMapData$Type$Type<(any)>, arg1: $Consumer$Type<(H)>): void
 "getCustomMarkers"(): $Map<(string), ($MapBlockMarker<(any)>)>
 "addCustomMarker"<M extends $MapBlockMarker<(any)>>(arg0: M): void
 "removeCustomMarker"(arg0: string): boolean
}

export namespace $ExpandedMapData {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ExpandedMapData$Type = ($ExpandedMapData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ExpandedMapData_ = $ExpandedMapData$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$PedestalBlockTile" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$PedestalBlockTile$DisplayType, $PedestalBlockTile$DisplayType$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$PedestalBlockTile$DisplayType"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$LockCode, $LockCode$Type} from "packages/net/minecraft/world/$LockCode"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$ItemDisplayTile, $ItemDisplayTile$Type} from "packages/net/mehvahdjukaar/moonlight/api/block/$ItemDisplayTile"
import {$AABB, $AABB$Type} from "packages/net/minecraft/world/phys/$AABB"

export class $PedestalBlockTile extends $ItemDisplayTile {
static readonly "LOOT_TABLE_TAG": string
static readonly "LOOT_TABLE_SEED_TAG": string
 "lootTable": $ResourceLocation
 "lootTableSeed": long
 "lockKey": $LockCode
 "blockState": $BlockState

constructor(pos: $BlockPos$Type, state: $BlockState$Type)

public "getDisplayType"(): $PedestalBlockTile$DisplayType
public "updateTileOnInventoryChanged"(): void
public "canTakeItemThroughFace"(index: integer, stack: $ItemStack$Type, direction: $Direction$Type): boolean
public "canPlaceItemThroughFace"(index: integer, stack: $ItemStack$Type, direction: $Direction$Type): boolean
public "load"(compound: $CompoundTag$Type): void
public "m_183515_"(tag: $CompoundTag$Type): void
public "m_6820_"(): $Component
public "getRenderBoundingBox"(): $AABB
public static "stillValidBlockEntity"(arg0: $BlockEntity$Type, arg1: $Player$Type, arg2: integer): boolean
public static "stillValidBlockEntity"(arg0: $BlockEntity$Type, arg1: $Player$Type): boolean
public static "tryClear"(arg0: any): void
get "displayType"(): $PedestalBlockTile$DisplayType
get "renderBoundingBox"(): $AABB
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PedestalBlockTile$Type = ($PedestalBlockTile);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PedestalBlockTile_ = $PedestalBlockTile$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/item/$IThirdPersonAnimationProvider" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$HumanoidArm, $HumanoidArm$Type} from "packages/net/minecraft/world/entity/$HumanoidArm"
import {$HumanoidModel, $HumanoidModel$Type} from "packages/net/minecraft/client/model/$HumanoidModel"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export interface $IThirdPersonAnimationProvider {

 "isTwoHanded"(): boolean
 "poseLeftArm"<T extends $LivingEntity>(arg0: $ItemStack$Type, arg1: $HumanoidModel$Type<(T)>, arg2: T, arg3: $HumanoidArm$Type): boolean
 "poseRightArm"<T extends $LivingEntity>(arg0: $ItemStack$Type, arg1: $HumanoidModel$Type<(T)>, arg2: T, arg3: $HumanoidArm$Type): boolean
}

export namespace $IThirdPersonAnimationProvider {
function get(target: $Item$Type): $IThirdPersonAnimationProvider
function attachToItem(target: $Item$Type, object: $IThirdPersonAnimationProvider$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IThirdPersonAnimationProvider$Type = ($IThirdPersonAnimationProvider);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IThirdPersonAnimationProvider_ = $IThirdPersonAnimationProvider$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/misc/$RegistryAccessJsonReloadListener" {
import {$RegistryAccess, $RegistryAccess$Type} from "packages/net/minecraft/core/$RegistryAccess"
import {$JsonElement, $JsonElement$Type} from "packages/com/google/gson/$JsonElement"
import {$SimpleJsonResourceReloadListener, $SimpleJsonResourceReloadListener$Type} from "packages/net/minecraft/server/packs/resources/$SimpleJsonResourceReloadListener"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $RegistryAccessJsonReloadListener extends $SimpleJsonResourceReloadListener {


public "parse"(arg0: $Map$Type<($ResourceLocation$Type), ($JsonElement$Type)>, arg1: $RegistryAccess$Type): void
public static "runReloads"(access: $RegistryAccess$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RegistryAccessJsonReloadListener$Type = ($RegistryAccessJsonReloadListener);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RegistryAccessJsonReloadListener_ = $RegistryAccessJsonReloadListener$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/platform/$RegHelper$VariantType" {
import {$RegHelper$ItemToTabEvent, $RegHelper$ItemToTabEvent$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/$RegHelper$ItemToTabEvent"
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $RegHelper$VariantType extends $Enum<($RegHelper$VariantType)> {
static readonly "BLOCK": $RegHelper$VariantType
static readonly "STAIRS": $RegHelper$VariantType
static readonly "SLAB": $RegHelper$VariantType
static readonly "WALL": $RegHelper$VariantType


public static "values"(): ($RegHelper$VariantType)[]
public static "valueOf"(name: string): $RegHelper$VariantType
public "create"(properties: $BlockBehaviour$Properties$Type, parent: $Supplier$Type<($Block$Type)>): $Block
public static "addToTab"(event: $RegHelper$ItemToTabEvent$Type, blocks: $Map$Type<($RegHelper$VariantType$Type), ($Supplier$Type<($Block$Type)>)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RegHelper$VariantType$Type = (("stairs") | ("block") | ("wall") | ("slab")) | ($RegHelper$VariantType);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RegHelper$VariantType_ = $RegHelper$VariantType$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/renderers/entities/funny/$PickleModel" {
import {$VertexConsumer, $VertexConsumer$Type} from "packages/com/mojang/blaze3d/vertex/$VertexConsumer"
import {$HumanoidArm, $HumanoidArm$Type} from "packages/net/minecraft/world/entity/$HumanoidArm"
import {$HumanoidModel$ArmPose, $HumanoidModel$ArmPose$Type} from "packages/net/minecraft/client/model/$HumanoidModel$ArmPose"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$ModelPart, $ModelPart$Type} from "packages/net/minecraft/client/model/geom/$ModelPart"
import {$LayerDefinition, $LayerDefinition$Type} from "packages/net/minecraft/client/model/geom/builders/$LayerDefinition"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$PlayerModel, $PlayerModel$Type} from "packages/net/minecraft/client/model/$PlayerModel"

export class $PickleModel<T extends $LivingEntity> extends $PlayerModel<(T)> {
readonly "leftSleeve": $ModelPart
readonly "rightSleeve": $ModelPart
readonly "leftPants": $ModelPart
readonly "rightPants": $ModelPart
readonly "jacket": $ModelPart
static readonly "OVERLAY_SCALE": float
static readonly "HAT_OVERLAY_SCALE": float
static readonly "LEGGINGS_OVERLAY_SCALE": float
static readonly "TOOT_HORN_XROT_BASE": float
static readonly "TOOT_HORN_YROT_BASE": float
readonly "head": $ModelPart
readonly "hat": $ModelPart
readonly "body": $ModelPart
readonly "rightArm": $ModelPart
readonly "leftArm": $ModelPart
readonly "rightLeg": $ModelPart
readonly "leftLeg": $ModelPart
 "leftArmPose": $HumanoidModel$ArmPose
 "rightArmPose": $HumanoidModel$ArmPose
 "crouching": boolean
 "swimAmount": float
readonly "scaleHead": boolean
readonly "babyYHeadOffset": float
readonly "babyZHeadOffset": float
readonly "babyHeadScale": float
readonly "babyBodyScale": float
readonly "bodyYOffset": float
 "attackTime": float
 "riding": boolean
 "young": boolean

constructor(modelPart: $ModelPart$Type)

public "setupAnim"(player: T, limbSwing: float, limbSwingAmount: float, ageInTicks: float, netHeadYaw: float, headPitch: float): void
public static "createMesh"(): $LayerDefinition
public "renderToBuffer"(matrixStack: $PoseStack$Type, buffer: $VertexConsumer$Type, packedLight: integer, packedOverlay: integer, red: float, green: float, blue: float, alpha: float): void
public "translateToHand"(handSide: $HumanoidArm$Type, matrixStack: $PoseStack$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PickleModel$Type<T> = ($PickleModel<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PickleModel_<T> = $PickleModel$Type<(T)>;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/$ModMaterials" {
import {$Material, $Material$Type} from "packages/net/minecraft/client/resources/model/$Material"
import {$BannerPatternItem, $BannerPatternItem$Type} from "packages/net/minecraft/world/item/$BannerPatternItem"
import {$DyeColor, $DyeColor$Type} from "packages/net/minecraft/world/item/$DyeColor"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$BannerPattern, $BannerPattern$Type} from "packages/net/minecraft/world/level/block/entity/$BannerPattern"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $ModMaterials {
static readonly "SIGN_SHEET": $ResourceLocation
static readonly "BANNER_SHEET": $ResourceLocation
static readonly "CLOCK_HAND": $Material
static readonly "FISHIES": $Material
static readonly "BLACKBOARD_OUTLINE": $Material
static readonly "BELLOWS_MATERIAL": $Material
static readonly "BUBBLE_BLOCK_MATERIAL": $Material
static readonly "BLACKBOARD_WHITE": $Material
static readonly "BLACKBOARD_BLACK": $Material
static readonly "SAND_MATERIAL": $Material
static readonly "CANNON_MATERIAL": $Material
static readonly "BOOK_GLINT_MATERIAL": $Material
static readonly "CANNON_TARGET_MATERIAL": $Material
static readonly "CANNON_TARGET_RED_MATERIAL": $Material
static readonly "WIND_VANE_MATERIAL": $Material
static readonly "BUNTING_MATERIAL": $Map<($DyeColor), ($Material)>
static readonly "FLAG_MATERIALS": $Supplier<($Map<($BannerPattern), ($Material)>)>

constructor()

public static "get"(bockTexture: $ResourceLocation$Type): $Material
public static "getFlagMaterialForPatternItem"(item: $BannerPatternItem$Type): $Material
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModMaterials$Type = ($ModMaterials);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModMaterials_ = $ModMaterials$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/screens/$TextHolderEditScreen" {
import {$ITextHolderProvider, $ITextHolderProvider$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/$ITextHolderProvider"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$List, $List$Type} from "packages/java/util/$List"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $TextHolderEditScreen<T extends ($BlockEntity) & ($ITextHolderProvider)> extends $Screen {
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering


public "keyPressed"(keyCode: integer, scanCode: integer, modifiers: integer): boolean
public "onClose"(): void
public "removed"(): void
public "tick"(): void
public "charTyped"(codePoint: character, modifiers: integer): boolean
public "mouseScrolled"(mouseX: double, mouseY: double, delta: double): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TextHolderEditScreen$Type<T> = ($TextHolderEditScreen<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TextHolderEditScreen_<T> = $TextHolderEditScreen$Type<(T)>;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/misc/$ColoredMapHandler" {
import {$ColoredMapHandler$ColorData, $ColoredMapHandler$ColorData$Type} from "packages/net/mehvahdjukaar/supplementaries/common/misc/$ColoredMapHandler$ColorData"
import {$CustomMapData$Type, $CustomMapData$Type$Type} from "packages/net/mehvahdjukaar/moonlight/api/map/$CustomMapData$Type"
import {$MapItemSavedData, $MapItemSavedData$Type} from "packages/net/minecraft/world/level/saveddata/maps/$MapItemSavedData"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"

export class $ColoredMapHandler {
static readonly "COLOR_DATA": $CustomMapData$Type<($ColoredMapHandler$ColorData)>

constructor()

public static "init"(): void
public static "getCustomColor"(block: $Block$Type): $Block
public static "getColorData"(data: $MapItemSavedData$Type): $ColoredMapHandler$ColorData
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ColoredMapHandler$Type = ($ColoredMapHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ColoredMapHandler_ = $ColoredMapHandler$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/misc/mob_container/$DataDefinedCatchableMob$CatchMode" {
import {$Record, $Record$Type} from "packages/java/lang/$Record"

export class $DataDefinedCatchableMob$CatchMode extends $Record {


public "equals"(o: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "on"(): boolean
public "onlyBaby"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DataDefinedCatchableMob$CatchMode$Type = ($DataDefinedCatchableMob$CatchMode);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DataDefinedCatchableMob$CatchMode_ = $DataDefinedCatchableMob$CatchMode$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/blocks/$BlockGeneratorBlock" {
import {$EntityBlock, $EntityBlock$Type} from "packages/net/minecraft/world/level/block/$EntityBlock"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$BlockEntityTicker, $BlockEntityTicker$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityTicker"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$GameEventListener, $GameEventListener$Type} from "packages/net/minecraft/world/level/gameevent/$GameEventListener"
import {$RenderShape, $RenderShape$Type} from "packages/net/minecraft/world/level/block/$RenderShape"

export class $BlockGeneratorBlock extends $Block implements $EntityBlock {
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(properties: $BlockBehaviour$Properties$Type)

public "getTicker"<T extends $BlockEntity>(pLevel: $Level$Type, pState: $BlockState$Type, pBlockEntityType: $BlockEntityType$Type<(T)>): $BlockEntityTicker<(T)>
public "getRenderShape"(state: $BlockState$Type): $RenderShape
public "newBlockEntity"(pPos: $BlockPos$Type, pState: $BlockState$Type): $BlockEntity
public "getListener"<T extends $BlockEntity>(arg0: $ServerLevel$Type, arg1: T): $GameEventListener
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BlockGeneratorBlock$Type = ($BlockGeneratorBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BlockGeneratorBlock_ = $BlockGeneratorBlock$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/items/forge/$ShulkerShellItem" {
import {$Multimap, $Multimap$Type} from "packages/com/google/common/collect/$Multimap"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Equipable, $Equipable$Type} from "packages/net/minecraft/world/item/$Equipable"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Attribute, $Attribute$Type} from "packages/net/minecraft/world/entity/ai/attributes/$Attribute"
import {$ArmorItem, $ArmorItem$Type} from "packages/net/minecraft/world/item/$ArmorItem"
import {$AttributeModifier, $AttributeModifier$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeModifier"
import {$DispenseItemBehavior, $DispenseItemBehavior$Type} from "packages/net/minecraft/core/dispenser/$DispenseItemBehavior"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $ShulkerShellItem extends $ArmorItem {
static readonly "DISPENSE_ITEM_BEHAVIOR": $DispenseItemBehavior
 "defaultModifiers": $Multimap<($Attribute), ($AttributeModifier)>
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(properties: $Item$Properties$Type)

public "isDamageable"(stack: $ItemStack$Type): boolean
public "isEnchantable"(stack: $ItemStack$Type): boolean
public "getMaxStackSize"(stack: $ItemStack$Type): integer
public static "get"(arg0: $ItemStack$Type): $Equipable
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ShulkerShellItem$Type = ($ShulkerShellItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ShulkerShellItem_ = $ShulkerShellItem$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/util/math/colors/$ColorSpaces" {
import {$RGBColor, $RGBColor$Type} from "packages/net/mehvahdjukaar/moonlight/api/util/math/colors/$RGBColor"
import {$HCLColor, $HCLColor$Type} from "packages/net/mehvahdjukaar/moonlight/api/util/math/colors/$HCLColor"
import {$LUVColor, $LUVColor$Type} from "packages/net/mehvahdjukaar/moonlight/api/util/math/colors/$LUVColor"
import {$LABColor, $LABColor$Type} from "packages/net/mehvahdjukaar/moonlight/api/util/math/colors/$LABColor"
import {$HSVColor, $HSVColor$Type} from "packages/net/mehvahdjukaar/moonlight/api/util/math/colors/$HSVColor"
import {$HCLVColor, $HCLVColor$Type} from "packages/net/mehvahdjukaar/moonlight/api/util/math/colors/$HCLVColor"
import {$XYZColor, $XYZColor$Type} from "packages/net/mehvahdjukaar/moonlight/api/util/math/colors/$XYZColor"
import {$HSLColor, $HSLColor$Type} from "packages/net/mehvahdjukaar/moonlight/api/util/math/colors/$HSLColor"

export class $ColorSpaces {

constructor()

public static "RGBtoHSL"(color: $RGBColor$Type): $HSLColor
public static "RGBtoHSV"(color: $RGBColor$Type): $HSVColor
public static "RGBtoXYZ"(color: $RGBColor$Type): $XYZColor
public static "LABtoXYZ"(color: $LABColor$Type): $XYZColor
public static "XYZtoLUV"(color: $XYZColor$Type): $LUVColor
public static "LABtoHCL"(color: $LABColor$Type): $HCLColor
public static "LUVtoHCLV"(color: $LUVColor$Type): $HCLVColor
public static "XYZtoRGB"(color: $XYZColor$Type): $RGBColor
public static "XYZtoLAB"(color: $XYZColor$Type): $LABColor
public static "HSVtoRGB"(color: $HSVColor$Type): $RGBColor
public static "HCLtoLAB"(color: $HCLColor$Type): $LABColor
public static "HSLtoRGB"(color: $HSLColor$Type): $RGBColor
public static "LUVtoXYZ"(color: $LUVColor$Type): $XYZColor
public static "HCLVtoLUV"(color: $HCLVColor$Type): $LUVColor
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ColorSpaces$Type = ($ColorSpaces);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ColorSpaces_ = $ColorSpaces$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/renderers/color/$MimicBlockColor" {
import {$BlockColor, $BlockColor$Type} from "packages/net/minecraft/client/color/block/$BlockColor"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockAndTintGetter, $BlockAndTintGetter$Type} from "packages/net/minecraft/world/level/$BlockAndTintGetter"

export class $MimicBlockColor implements $BlockColor {

constructor()

public static "col"(state: $BlockState$Type, level: $BlockAndTintGetter$Type, pos: $BlockPos$Type, tint: integer): integer
public "getColor"(state: $BlockState$Type, world: $BlockAndTintGetter$Type, pos: $BlockPos$Type, tint: integer): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MimicBlockColor$Type = ($MimicBlockColor);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MimicBlockColor_ = $MimicBlockColor$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/items/forge/$QuiverItemImpl" {
import {$QuiverItem$Data, $QuiverItem$Data$Type} from "packages/net/mehvahdjukaar/supplementaries/common/items/$QuiverItem$Data"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $QuiverItemImpl {

constructor()

public static "getQuiverData"(stack: $ItemStack$Type): $QuiverItem$Data
public static "getQuiver"(entity: $LivingEntity$Type): $ItemStack
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $QuiverItemImpl$Type = ($QuiverItemImpl);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $QuiverItemImpl_ = $QuiverItemImpl$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/util/$PotionNBTHelper" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$List, $List$Type} from "packages/java/util/$List"
import {$PotionNBTHelper$Type, $PotionNBTHelper$Type$Type} from "packages/net/mehvahdjukaar/moonlight/api/util/$PotionNBTHelper$Type"

export class $PotionNBTHelper {
static readonly "POTION_TYPE_KEY": string

constructor()

public static "getPotionType"(tag: $CompoundTag$Type): $PotionNBTHelper$Type
public static "getPotionType"(potionItem: $Item$Type): $PotionNBTHelper$Type
public static "addPotionTooltip"(com: $CompoundTag$Type, tooltip: $List$Type<($Component$Type)>, durationFactor: float): void
public static "getColorFromNBT"(com: $CompoundTag$Type): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PotionNBTHelper$Type = ($PotionNBTHelper);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PotionNBTHelper_ = $PotionNBTHelper$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/reg/$ModRegistry" {
import {$SpringLauncherArmBlockTile, $SpringLauncherArmBlockTile$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$SpringLauncherArmBlockTile"
import {$KeyItem, $KeyItem$Type} from "packages/net/mehvahdjukaar/supplementaries/common/items/$KeyItem"
import {$JarBoatTile, $JarBoatTile$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$JarBoatTile"
import {$PaintingVariant, $PaintingVariant$Type} from "packages/net/minecraft/world/entity/decoration/$PaintingVariant"
import {$JarBlockTile, $JarBlockTile$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$JarBlockTile"
import {$FrameBraceBlock, $FrameBraceBlock$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/blocks/$FrameBraceBlock"
import {$SignPostBlockTile, $SignPostBlockTile$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$SignPostBlockTile"
import {$WoodType, $WoodType$Type} from "packages/net/mehvahdjukaar/moonlight/api/set/wood/$WoodType"
import {$BellowsBlockTile, $BellowsBlockTile$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$BellowsBlockTile"
import {$FrameBlockTile, $FrameBlockTile$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$FrameBlockTile"
import {$BambooSpikesBlockTile, $BambooSpikesBlockTile$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$BambooSpikesBlockTile"
import {$BubbleBlock, $BubbleBlock$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/blocks/$BubbleBlock"
import {$EndermanSkullBlockTile, $EndermanSkullBlockTile$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$EndermanSkullBlockTile"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$ItemShelfBlockTile, $ItemShelfBlockTile$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$ItemShelfBlockTile"
import {$RegHelper$VariantType, $RegHelper$VariantType$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/$RegHelper$VariantType"
import {$PulleyBlockTile, $PulleyBlockTile$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$PulleyBlockTile"
import {$StructureTempBlockTile, $StructureTempBlockTile$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$StructureTempBlockTile"
import {$RegSupplier, $RegSupplier$Type} from "packages/net/mehvahdjukaar/moonlight/api/misc/$RegSupplier"
import {$SpeakerBlock, $SpeakerBlock$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/blocks/$SpeakerBlock"
import {$LootItemFunctionType, $LootItemFunctionType$Type} from "packages/net/minecraft/world/level/storage/loot/functions/$LootItemFunctionType"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$BlackboardBlockTile, $BlackboardBlockTile$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$BlackboardBlockTile"
import {$RopeKnotBlockTile, $RopeKnotBlockTile$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$RopeKnotBlockTile"
import {$PresentBlockTile, $PresentBlockTile$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$PresentBlockTile"
import {$TurnTableBlockTile, $TurnTableBlockTile$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$TurnTableBlockTile"
import {$GobletBlockTile, $GobletBlockTile$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$GobletBlockTile"
import {$Enchantment, $Enchantment$Type} from "packages/net/minecraft/world/item/enchantment/$Enchantment"
import {$SpeakerBlockTile, $SpeakerBlockTile$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$SpeakerBlockTile"
import {$GlobeBlockTile, $GlobeBlockTile$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$GlobeBlockTile"
import {$StatueBlockTile, $StatueBlockTile$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$StatueBlockTile"
import {$HourGlassBlockTile, $HourGlassBlockTile$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$HourGlassBlockTile"
import {$KeyLockableTile, $KeyLockableTile$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$KeyLockableTile"
import {$BlockGeneratorBlockTile, $BlockGeneratorBlockTile$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$BlockGeneratorBlockTile"
import {$QuiverItem, $QuiverItem$Type} from "packages/net/mehvahdjukaar/supplementaries/common/items/$QuiverItem"
import {$FlagBlockTile, $FlagBlockTile$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$FlagBlockTile"
import {$EndermanSkullBlock, $EndermanSkullBlock$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/blocks/$EndermanSkullBlock"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$PedestalBlockTile, $PedestalBlockTile$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$PedestalBlockTile"
import {$BookPileBlockTile, $BookPileBlockTile$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$BookPileBlockTile"
import {$DyeColor, $DyeColor$Type} from "packages/net/minecraft/world/item/$DyeColor"
import {$CageBlockTile, $CageBlockTile$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$CageBlockTile"
import {$RopeBlock, $RopeBlock$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/blocks/$RopeBlock"
import {$ClockBlockTile, $ClockBlockTile$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$ClockBlockTile"
import {$TrappedPresentBlockTile, $TrappedPresentBlockTile$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$TrappedPresentBlockTile"
import {$WindVaneBlockTile, $WindVaneBlockTile$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$WindVaneBlockTile"
import {$UrnBlockTile, $UrnBlockTile$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$UrnBlockTile"
import {$BubbleBlockTile, $BubbleBlockTile$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$BubbleBlockTile"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"
import {$NoticeBoardBlockTile, $NoticeBoardBlockTile$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$NoticeBoardBlockTile"
import {$SignPostItem, $SignPostItem$Type} from "packages/net/mehvahdjukaar/supplementaries/common/items/$SignPostItem"
import {$PlanterBlock, $PlanterBlock$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/blocks/$PlanterBlock"
import {$FlowerBoxBlockTile, $FlowerBoxBlockTile$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$FlowerBoxBlockTile"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$SafeBlockTile, $SafeBlockTile$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$SafeBlockTile"
import {$EndermanSkullWallBlock, $EndermanSkullWallBlock$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/blocks/$EndermanSkullWallBlock"
import {$DoormatBlockTile, $DoormatBlockTile$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$DoormatBlockTile"
import {$FaucetBlockTile, $FaucetBlockTile$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$FaucetBlockTile"
import {$FrameBlock, $FrameBlock$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/blocks/$FrameBlock"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$SackBlockTile, $SackBlockTile$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$SackBlockTile"

export class $ModRegistry {
static readonly "CURSE_LOOT_FUNCTION": $Supplier<($LootItemFunctionType)>
static readonly "RANDOM_ARROW_FUNCTION": $Supplier<($LootItemFunctionType)>
static readonly "BOMB_PAINTING": $Supplier<($PaintingVariant)>
static readonly "STASIS_ENCHANTMENT": $Supplier<($Enchantment)>
static readonly "OVERENCUMBERED": $Supplier<($MobEffect)>
static readonly "RED_MERCHANT_SPAWN_EGG_ITEM": $Supplier<($Item)>
static readonly "DISPENSER_MINECART_ITEM": $Supplier<($Item)>
static readonly "BOMB_ITEM": $Supplier<($Item)>
static readonly "BOMB_ITEM_ON": $Supplier<($Item)>
static readonly "BOMB_BLUE_ITEM": $Supplier<($Item)>
static readonly "BOMB_BLUE_ITEM_ON": $Supplier<($Item)>
static readonly "BOMB_SPIKY_ITEM": $Supplier<($Item)>
static readonly "BOMB_SPIKY_ITEM_ON": $Supplier<($Item)>
static readonly "ROPE_ARROW_ITEM": $Supplier<($Item)>
static readonly "BUBBLE_BLOWER": $Supplier<($Item)>
static readonly "SLINGSHOT_ITEM": $Supplier<($Item)>
static readonly "FLUTE_ITEM": $Supplier<($Item)>
static readonly "KEY_ITEM": $Supplier<($KeyItem)>
static readonly "CANDY_ITEM": $Supplier<($Item)>
static readonly "ANTIQUE_INK": $Supplier<($Item)>
static readonly "WRENCH": $Supplier<($Item)>
static readonly "QUIVER_ITEM": $Supplier<($QuiverItem)>
static readonly "DEPTH_METER_ITEM": $Supplier<($Item)>
static readonly "SLICE_MAP": $Supplier<($Item)>
static readonly "SIGN_POST": $Supplier<($Block)>
static readonly "SIGN_POST_TILE": $Supplier<($BlockEntityType<($SignPostBlockTile)>)>
static readonly "SIGN_POST_ITEMS": $Map<($WoodType), ($SignPostItem)>
static readonly "FLAGS": $Map<($DyeColor), ($Supplier<($Block)>)>
static readonly "FLAG_TILE": $Supplier<($BlockEntityType<($FlagBlockTile)>)>
static readonly "PRESENTS": $Map<($DyeColor), ($Supplier<($Block)>)>
static readonly "PRESENT_TILE": $Supplier<($BlockEntityType<($PresentBlockTile)>)>
static readonly "TRAPPED_PRESENTS": $Map<($DyeColor), ($Supplier<($Block)>)>
static readonly "TRAPPED_PRESENT_TILE": $Supplier<($BlockEntityType<($TrappedPresentBlockTile)>)>
static readonly "PLANTER": $Supplier<($PlanterBlock)>
static readonly "PEDESTAL": $Supplier<($Block)>
static readonly "PEDESTAL_TILE": $Supplier<($BlockEntityType<($PedestalBlockTile)>)>
static readonly "NOTICE_BOARD": $Supplier<($Block)>
static readonly "NOTICE_BOARD_TILE": $Supplier<($BlockEntityType<($NoticeBoardBlockTile)>)>
static readonly "SAFE": $Supplier<($Block)>
static readonly "SAFE_TILE": $Supplier<($BlockEntityType<($SafeBlockTile)>)>
static readonly "SAFE_ITEM": $Supplier<($Item)>
static readonly "CAGE": $Supplier<($Block)>
static readonly "CAGE_TILE": $Supplier<($BlockEntityType<($CageBlockTile)>)>
static readonly "CAGE_ITEM": $Supplier<($Item)>
static readonly "JAR": $Supplier<($Block)>
static readonly "JAR_TILE": $Supplier<($BlockEntityType<($JarBlockTile)>)>
static readonly "JAR_ITEM": $Supplier<($Item)>
static readonly "SACK": $Supplier<($Block)>
static readonly "SACK_TILE": $Supplier<($BlockEntityType<($SackBlockTile)>)>
static readonly "SACK_ITEM": $Supplier<($Item)>
static readonly "BLACKBOARD": $Supplier<($Block)>
static readonly "BLACKBOARD_TILE": $Supplier<($BlockEntityType<($BlackboardBlockTile)>)>
static readonly "BLACKBOARD_ITEM": $Supplier<($Item)>
static readonly "GLOBE": $Supplier<($Block)>
static readonly "GLOBE_ITEM": $Supplier<($Item)>
static readonly "GLOBE_SEPIA": $Supplier<($Block)>
static readonly "GLOBE_SEPIA_ITEM": $Supplier<($Item)>
static readonly "GLOBE_TILE": $Supplier<($BlockEntityType<($GlobeBlockTile)>)>
static readonly "SCONCE": $Supplier<($Block)>
static readonly "SCONCE_WALL": $Supplier<($Block)>
static readonly "SCONCE_ITEM": $Supplier<($Item)>
static readonly "SCONCE_SOUL": $Supplier<($Block)>
static readonly "SCONCE_WALL_SOUL": $Supplier<($Block)>
static readonly "SCONCE_ITEM_SOUL": $Supplier<($Item)>
static readonly "SCONCES": $List<($Supplier<($Item)>)>
static readonly "SCONCE_GREEN": $Supplier<($Block)>
static readonly "SCONCE_WALL_GREEN": $Supplier<($Block)>
static readonly "SCONCE_ITEM_GREEN": $Supplier<($Item)>
static readonly "CANDLE_HOLDERS": $Map<($DyeColor), ($Supplier<($Block)>)>
static readonly "ROPE": $Supplier<($RopeBlock)>
static readonly "ROPE_KNOT": $Supplier<($Block)>
static readonly "ROPE_ITEM": $Supplier<($Item)>
static readonly "ROPE_KNOT_TILE": $Supplier<($BlockEntityType<($RopeKnotBlockTile)>)>
static readonly "BAMBOO_SPIKES": $Supplier<($Block)>
static readonly "BAMBOO_SPIKES_TILE": $Supplier<($BlockEntityType<($BambooSpikesBlockTile)>)>
static readonly "BAMBOO_SPIKES_ITEM": $Supplier<($Item)>
static readonly "BAMBOO_SPIKES_TIPPED_ITEM": $Supplier<($Item)>
static readonly "GOBLET": $Supplier<($Block)>
static readonly "GOBLET_TILE": $Supplier<($BlockEntityType<($GobletBlockTile)>)>
static readonly "HOURGLASS": $Supplier<($Block)>
static readonly "HOURGLASS_TILE": $Supplier<($BlockEntityType<($HourGlassBlockTile)>)>
static readonly "ITEM_SHELF": $Supplier<($Block)>
static readonly "ITEM_SHELF_TILE": $Supplier<($BlockEntityType<($ItemShelfBlockTile)>)>
static readonly "DOORMAT": $Supplier<($Block)>
static readonly "DOORMAT_TILE": $Supplier<($BlockEntityType<($DoormatBlockTile)>)>
static readonly "RAKED_GRAVEL": $Supplier<($Block)>
static readonly "COG_BLOCK": $Supplier<($Block)>
static readonly "RELAYER": $Supplier<($Block)>
static readonly "SPRING_LAUNCHER": $Supplier<($Block)>
static readonly "SPRING_LAUNCHER_HEAD": $Supplier<($Block)>
static readonly "SPRING_LAUNCHER_ARM": $Supplier<($Block)>
static readonly "SPRING_LAUNCHER_ARM_TILE": $Supplier<($BlockEntityType<($SpringLauncherArmBlockTile)>)>
static readonly "SPEAKER_BLOCK": $Supplier<($SpeakerBlock)>
static readonly "SPEAKER_BLOCK_TILE": $Supplier<($BlockEntityType<($SpeakerBlockTile)>)>
static readonly "TURN_TABLE": $Supplier<($Block)>
static readonly "TURN_TABLE_TILE": $Supplier<($BlockEntityType<($TurnTableBlockTile)>)>
static readonly "REDSTONE_ILLUMINATOR": $Supplier<($Block)>
static readonly "PULLEY_BLOCK": $Supplier<($Block)>
static readonly "PULLEY_BLOCK_TILE": $Supplier<($BlockEntityType<($PulleyBlockTile)>)>
static readonly "LOCK_BLOCK": $Supplier<($Block)>
static readonly "BELLOWS": $Supplier<($Block)>
static readonly "BELLOWS_TILE": $Supplier<($BlockEntityType<($BellowsBlockTile)>)>
static readonly "CLOCK_BLOCK": $Supplier<($Block)>
static readonly "CLOCK_BLOCK_TILE": $Supplier<($BlockEntityType<($ClockBlockTile)>)>
static readonly "CRYSTAL_DISPLAY": $Supplier<($Block)>
static readonly "SCONCE_LEVER": $Supplier<($Block)>
static readonly "CRANK": $Supplier<($Block)>
static readonly "WIND_VANE": $Supplier<($Block)>
static readonly "WIND_VANE_TILE": $Supplier<($BlockEntityType<($WindVaneBlockTile)>)>
static readonly "FAUCET": $Supplier<($Block)>
static readonly "FAUCET_TILE": $Supplier<($BlockEntityType<($FaucetBlockTile)>)>
static readonly "GOLD_DOOR": $Supplier<($Block)>
static readonly "GOLD_TRAPDOOR": $Supplier<($Block)>
static readonly "NETHERITE_DOOR": $Supplier<($Block)>
static readonly "NETHERITE_DOOR_ITEM": $Supplier<($Item)>
static readonly "NETHERITE_TRAPDOOR": $Supplier<($Block)>
static readonly "NETHERITE_TRAPDOOR_ITEM": $Supplier<($Item)>
static readonly "KEY_LOCKABLE_TILE": $Supplier<($BlockEntityType<($KeyLockableTile)>)>
static readonly "IRON_GATE": $Supplier<($Block)>
static readonly "GOLD_GATE": $Supplier<($Block)>
static readonly "CHECKER_BLOCK": $Supplier<($Block)>
static readonly "CHECKER_SLAB": $Supplier<($Block)>
static readonly "PANCAKE_ITEM": $Supplier<($Item)>
static readonly "PANCAKE": $Supplier<($Block)>
static readonly "FLAX": $Supplier<($Block)>
static readonly "FLAX_ITEM": $Supplier<($Item)>
static readonly "FLAX_SEEDS_ITEM": $Supplier<($Item)>
static readonly "FLAX_WILD": $Supplier<($Block)>
static readonly "FLAX_POT": $Supplier<($Block)>
static readonly "FODDER": $Supplier<($Block)>
static readonly "FLAX_BLOCK": $Supplier<($Block)>
static readonly "JAR_BOAT": $Supplier<($Block)>
static readonly "JAR_BOAT_TILE": $Supplier<($BlockEntityType<($JarBoatTile)>)>
static readonly "STRUCTURE_TEMP": $Supplier<($Block)>
static readonly "STRUCTURE_TEMP_TILE": $Supplier<($BlockEntityType<($StructureTempBlockTile)>)>
static readonly "BLOCK_GENERATOR": $Supplier<($Block)>
static readonly "BLOCK_GENERATOR_TILE": $Supplier<($BlockEntityType<($BlockGeneratorBlockTile)>)>
static readonly "STICK_BLOCK": $Supplier<($Block)>
static readonly "BLAZE_ROD_BLOCK": $Supplier<($Block)>
static readonly "DAUB": $RegSupplier<($Block)>
static readonly "DAUB_FRAME": $RegSupplier<($Block)>
static readonly "DAUB_BRACE": $RegSupplier<($Block)>
static readonly "DAUB_CROSS_BRACE": $RegSupplier<($Block)>
static readonly "TIMBER_FRAME": $RegSupplier<($FrameBlock)>
static readonly "TIMBER_FRAME_ITEM": $Supplier<($Item)>
static readonly "TIMBER_BRACE": $Supplier<($FrameBraceBlock)>
static readonly "TIMBER_BRACE_ITEM": $Supplier<($Item)>
static readonly "TIMBER_CROSS_BRACE": $Supplier<($FrameBlock)>
static readonly "TIMBER_CROSS_BRACE_ITEM": $Supplier<($Item)>
static readonly "TIMBER_FRAME_TILE": $Supplier<($BlockEntityType<($FrameBlockTile)>)>
static readonly "LAPIS_BRICKS_BLOCKS": $Map<($RegHelper$VariantType), ($Supplier<($Block)>)>
static readonly "ASH_BRICKS_BLOCKS": $Map<($RegHelper$VariantType), ($Supplier<($Block)>)>
static readonly "STONE_TILE_BLOCKS": $Map<($RegHelper$VariantType), ($Supplier<($Block)>)>
static readonly "BLACKSTONE_TILE_BLOCKS": $Map<($RegHelper$VariantType), ($Supplier<($Block)>)>
static readonly "STONE_LAMP": $Supplier<($Block)>
static readonly "BLACKSTONE_LAMP": $Supplier<($Block)>
static readonly "DEEPSLATE_LAMP": $Supplier<($Block)>
static readonly "END_STONE_LAMP": $Supplier<($Block)>
static readonly "FLOWER_BOX": $Supplier<($Block)>
static readonly "FLOWER_BOX_TILE": $Supplier<($BlockEntityType<($FlowerBoxBlockTile)>)>
static readonly "STATUE": $Supplier<($Block)>
static readonly "STATUE_TILE": $Supplier<($BlockEntityType<($StatueBlockTile)>)>
static readonly "FEATHER_BLOCK": $Supplier<($Block)>
static readonly "FLINT_BLOCK": $Supplier<($Block)>
static readonly "SUGAR_CUBE": $Supplier<($Block)>
static readonly "SUGAR_CUBE_ITEM": $Supplier<($Item)>
static readonly "GUNPOWDER_BLOCK": $Supplier<($Block)>
static readonly "BOOK_PILE": $Supplier<($Block)>
static readonly "BOOK_PILE_H": $Supplier<($Block)>
static readonly "BOOK_PILE_TILE": $Supplier<($BlockEntityType<($BookPileBlockTile)>)>
static readonly "URN": $Supplier<($Block)>
static readonly "URN_TILE": $Supplier<($BlockEntityType<($UrnBlockTile)>)>
static readonly "ASH_BLOCK": $Supplier<($Block)>
static readonly "ASH_BRICK_ITEM": $Supplier<($Item)>
static readonly "SOAP": $Supplier<($Item)>
static readonly "SOAP_BLOCK": $Supplier<($Block)>
static readonly "BUBBLE_BLOCK": $Supplier<($BubbleBlock)>
static readonly "BUBBLE_BLOCK_ITEM": $Supplier<($Item)>
static readonly "BUBBLE_BLOCK_TILE": $Supplier<($BlockEntityType<($BubbleBlockTile)>)>
static readonly "ENDERMAN_SKULL_BLOCK": $Supplier<($EndermanSkullBlock)>
static readonly "ENDERMAN_SKULL_BLOCK_WALL": $Supplier<($EndermanSkullWallBlock)>
static readonly "ENDERMAN_SKULL_ITEM": $Supplier<($Item)>
static readonly "ENDERMAN_SKULL_TILE": $Supplier<($BlockEntityType<($EndermanSkullBlockTile)>)>
static readonly "ASHEN_BASALT": $Supplier<($Block)>
static readonly "HAT_STAND": $Supplier<($Item)>

constructor()

public static "init"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModRegistry$Type = ($ModRegistry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModRegistry_ = $ModRegistry$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/blocks/$SugarBlock" {
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$ConcretePowderBlock, $ConcretePowderBlock$Type} from "packages/net/minecraft/world/level/block/$ConcretePowderBlock"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$FallingBlockEntity, $FallingBlockEntity$Type} from "packages/net/minecraft/world/entity/item/$FallingBlockEntity"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"

export class $SugarBlock extends $ConcretePowderBlock {
readonly "concrete": $BlockState
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(properties: $BlockBehaviour$Properties$Type)

public "spawnDissolveParticles"(level: $Level$Type, pos: $BlockPos$Type): void
public "getStateForPlacement"(context: $BlockPlaceContext$Type): $BlockState
public "updateShape"(state: $BlockState$Type, direction: $Direction$Type, neighborState: $BlockState$Type, level: $LevelAccessor$Type, currentPos: $BlockPos$Type, neighborPos: $BlockPos$Type): $BlockState
public "triggerEvent"(state: $BlockState$Type, level: $Level$Type, pos: $BlockPos$Type, id: integer, param: integer): boolean
public "tick"(state: $BlockState$Type, level: $ServerLevel$Type, pos: $BlockPos$Type, random: $RandomSource$Type): void
public "getDustColor"(state: $BlockState$Type, level: $BlockGetter$Type, pos: $BlockPos$Type): integer
public "onLand"(level: $Level$Type, pos: $BlockPos$Type, blockState: $BlockState$Type, blockState2: $BlockState$Type, fallingBlock: $FallingBlockEntity$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SugarBlock$Type = ($SugarBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SugarBlock_ = $SugarBlock$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/misc/map_markers/markers/$ChestMarker" {
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$SimpleMapBlockMarker, $SimpleMapBlockMarker$Type} from "packages/net/mehvahdjukaar/moonlight/api/map/markers/$SimpleMapBlockMarker"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $ChestMarker extends $SimpleMapBlockMarker {
static readonly "HAS_SMALL_TEXTURE_FLAG": integer

constructor()
constructor(pos: $BlockPos$Type, name: $Component$Type)

public static "getFromWorld"(world: $BlockGetter$Type, pos: $BlockPos$Type): $ChestMarker
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ChestMarker$Type = ($ChestMarker);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ChestMarker_ = $ChestMarker$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/core/network/$ClientBoundOpenScreenPacket" {
import {$Message, $Message$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/network/$Message"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$ChannelHandler$Context, $ChannelHandler$Context$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/network/$ChannelHandler$Context"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $ClientBoundOpenScreenPacket implements $Message {
readonly "pos": $BlockPos

constructor(buffer: $FriendlyByteBuf$Type)
constructor(pos: $BlockPos$Type, hitFace: $Direction$Type)

public "handle"(context: $ChannelHandler$Context$Type): void
public static "handleOpenScreenPacket"(message: $ClientBoundOpenScreenPacket$Type): void
public "writeToBuffer"(buffer: $FriendlyByteBuf$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientBoundOpenScreenPacket$Type = ($ClientBoundOpenScreenPacket);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientBoundOpenScreenPacket_ = $ClientBoundOpenScreenPacket$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/network/$ServerBoundCycleQuiverPacket$Slot" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $ServerBoundCycleQuiverPacket$Slot extends $Enum<($ServerBoundCycleQuiverPacket$Slot)> {
static readonly "MAIN_HAND": $ServerBoundCycleQuiverPacket$Slot
static readonly "OFF_HAND": $ServerBoundCycleQuiverPacket$Slot
static readonly "INVENTORY": $ServerBoundCycleQuiverPacket$Slot


public static "values"(): ($ServerBoundCycleQuiverPacket$Slot)[]
public static "valueOf"(name: string): $ServerBoundCycleQuiverPacket$Slot
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ServerBoundCycleQuiverPacket$Slot$Type = (("main_hand") | ("off_hand") | ("inventory")) | ($ServerBoundCycleQuiverPacket$Slot);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ServerBoundCycleQuiverPacket$Slot_ = $ServerBoundCycleQuiverPacket$Slot$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/renderers/tiles/$PedestalBlockTileRenderer" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$BlockEntityRendererProvider$Context, $BlockEntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/blockentity/$BlockEntityRendererProvider$Context"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$BlockEntityRenderer, $BlockEntityRenderer$Type} from "packages/net/minecraft/client/renderer/blockentity/$BlockEntityRenderer"
import {$PedestalBlockTile, $PedestalBlockTile$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$PedestalBlockTile"

export class $PedestalBlockTileRenderer implements $BlockEntityRenderer<($PedestalBlockTile)> {

constructor(context: $BlockEntityRendererProvider$Context$Type)

public "render"(tile: $PedestalBlockTile$Type, partialTicks: float, matrixStackIn: $PoseStack$Type, bufferIn: $MultiBufferSource$Type, combinedLightIn: integer, combinedOverlayIn: integer): void
public static "renderName"(name: $Component$Type, h: float, poseStack: $PoseStack$Type, bufferIn: $MultiBufferSource$Type, combinedLightIn: integer): void
public "shouldRender"(arg0: $PedestalBlockTile$Type, arg1: $Vec3$Type): boolean
public "shouldRenderOffScreen"(arg0: $PedestalBlockTile$Type): boolean
public "getViewDistance"(): integer
get "viewDistance"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PedestalBlockTileRenderer$Type = ($PedestalBlockTileRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PedestalBlockTileRenderer_ = $PedestalBlockTileRenderer$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/misc/map_markers/markers/$WaystoneMarker" {
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$SimpleMapBlockMarker, $SimpleMapBlockMarker$Type} from "packages/net/mehvahdjukaar/moonlight/api/map/markers/$SimpleMapBlockMarker"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $WaystoneMarker extends $SimpleMapBlockMarker {
static readonly "HAS_SMALL_TEXTURE_FLAG": integer

constructor()
constructor(pos: $BlockPos$Type, name: $Component$Type)

public static "getFromWorld"(world: $BlockGetter$Type, pos: $BlockPos$Type): $WaystoneMarker
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WaystoneMarker$Type = ($WaystoneMarker);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WaystoneMarker_ = $WaystoneMarker$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/screens/widgets/$MultiLineEditBoxWidget" {
import {$AbstractWidget, $AbstractWidget$Type} from "packages/net/minecraft/client/gui/components/$AbstractWidget"
import {$Minecraft, $Minecraft$Type} from "packages/net/minecraft/client/$Minecraft"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$SoundManager, $SoundManager$Type} from "packages/net/minecraft/client/sounds/$SoundManager"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $MultiLineEditBoxWidget extends $AbstractWidget {
static readonly "WIDGETS_LOCATION": $ResourceLocation
static readonly "ACCESSIBILITY_TEXTURE": $ResourceLocation
 "height": integer
 "x": integer
 "y": integer
 "active": boolean
 "visible": boolean
static readonly "UNSET_FG_COLOR": integer

constructor(mc: $Minecraft$Type, x: integer, y: integer, width: integer, height: integer)

public "tick"(): void
public "getText"(): string
public "setState"(hasItem: boolean, packed: boolean): void
public "setText"(text: string): void
public "keyPressed"(key: integer, alt: integer, ctrl: integer): boolean
public "canConsumeInput"(): boolean
public "onValueChanged"(): void
public "charTyped"(c: character, key: integer): boolean
public "mouseScrolled"(mouseX: double, mouseY: double, amount: double): boolean
public "moveCursorToEnd"(): void
public "m_87963_"(graphics: $GuiGraphics$Type, i: integer, j: integer, f: float): void
public "m_93680_"(mouseX: double, mouseY: double): boolean
public "onClick"(mouseX: double, mouseY: double): void
public "playDownSound"(soundManager: $SoundManager$Type): void
public "m_7212_"(mouseX: double, mouseY: double, dx: double, dy: double): void
public "setOutOfBoundResponder"(onOutOfBounds: $Consumer$Type<(boolean)>): void
get "text"(): string
set "text"(value: string)
set "outOfBoundResponder"(value: $Consumer$Type<(boolean)>)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MultiLineEditBoxWidget$Type = ($MultiLineEditBoxWidget);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MultiLineEditBoxWidget_ = $MultiLineEditBoxWidget$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/trades/$NoOpListing" {
import {$MerchantOffer, $MerchantOffer$Type} from "packages/net/minecraft/world/item/trading/$MerchantOffer"
import {$ModItemListing, $ModItemListing$Type} from "packages/net/mehvahdjukaar/moonlight/api/trades/$ModItemListing"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$Codec, $Codec$Type} from "packages/com/mojang/serialization/$Codec"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $NoOpListing implements $ModItemListing {
static readonly "CODEC": $Codec<($NoOpListing)>

constructor()

public "getOffer"(trader: $Entity$Type, random: $RandomSource$Type): $MerchantOffer
public "getCodec"(): $Codec<(any)>
public "isValid"(): boolean
public "getLevel"(): integer
public static "defaultXp"(buying: boolean, villagerLevel: integer): integer
get "codec"(): $Codec<(any)>
get "valid"(): boolean
get "level"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $NoOpListing$Type = ($NoOpListing);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $NoOpListing_ = $NoOpListing$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/worldgen/$WaySignStructure$Type" {
import {$StructureType, $StructureType$Type} from "packages/net/minecraft/world/level/levelgen/structure/$StructureType"
import {$Codec, $Codec$Type} from "packages/com/mojang/serialization/$Codec"
import {$WaySignStructure, $WaySignStructure$Type} from "packages/net/mehvahdjukaar/supplementaries/common/worldgen/$WaySignStructure"

export class $WaySignStructure$Type implements $StructureType<($WaySignStructure)> {

constructor()

public "codec"(): $Codec<($WaySignStructure)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WaySignStructure$Type$Type = ($WaySignStructure$Type);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WaySignStructure$Type_ = $WaySignStructure$Type$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/capabilities/$AntiqueInkProvider" {
import {$LazyOptional, $LazyOptional$Type} from "packages/net/minecraftforge/common/util/$LazyOptional"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$ICapabilitySerializable, $ICapabilitySerializable$Type} from "packages/net/minecraftforge/common/capabilities/$ICapabilitySerializable"
import {$Capability, $Capability$Type} from "packages/net/minecraftforge/common/capabilities/$Capability"
import {$IAntiqueTextProvider, $IAntiqueTextProvider$Type} from "packages/net/mehvahdjukaar/supplementaries/api/$IAntiqueTextProvider"

export class $AntiqueInkProvider implements $IAntiqueTextProvider, $ICapabilitySerializable<($CompoundTag)> {

constructor()

public "hasAntiqueInk"(): boolean
public "setAntiqueInk"(hasInk: boolean): void
public "getCapability"<T>(capability: $Capability$Type<(T)>, facing: $Direction$Type): $LazyOptional<(T)>
public "deserializeNBT"(tag: $CompoundTag$Type): void
public "serializeNBT"(): $CompoundTag
public "getCapability"<T>(arg0: $Capability$Type<(T)>): $LazyOptional<(T)>
set "antiqueInk"(value: boolean)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AntiqueInkProvider$Type = ($AntiqueInkProvider);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AntiqueInkProvider_ = $AntiqueInkProvider$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/integration/$CCCompat" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export class $CCCompat {

constructor()

public static "setup"(): void
public static "getText"(itemstack: $ItemStack$Type): (string)[]
public static "getPages"(itemstack: $ItemStack$Type): integer
public static "isPrintedBook"(item: $Item$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CCCompat$Type = ($CCCompat);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CCCompat_ = $CCCompat$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/items/$HatStandItem" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$UseOnContext, $UseOnContext$Type} from "packages/net/minecraft/world/item/context/$UseOnContext"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $HatStandItem extends $Item {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(properties: $Item$Properties$Type)

public "useOn"(context: $UseOnContext$Type): $InteractionResult
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $HatStandItem$Type = ($HatStandItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $HatStandItem_ = $HatStandItem$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/misc/$QuadConsumer" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $QuadConsumer<K, V, S, T> {

 "accept"(arg0: K, arg1: V, arg2: S, arg3: T): void

(arg0: K, arg1: V, arg2: S, arg3: T): void
}

export namespace $QuadConsumer {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $QuadConsumer$Type<K, V, S, T> = ($QuadConsumer<(K), (V), (S), (T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $QuadConsumer_<K, V, S, T> = $QuadConsumer$Type<(K), (V), (S), (T)>;
}}
declare module "packages/net/mehvahdjukaar/dummmmmmy/configs/$ClientConfigs$SkinType" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $ClientConfigs$SkinType extends $Enum<($ClientConfigs$SkinType)> {
static readonly "DEFAULT": $ClientConfigs$SkinType
static readonly "ORIGINAL": $ClientConfigs$SkinType
static readonly "DUNGEONS": $ClientConfigs$SkinType
static readonly "ALTERNATIVE": $ClientConfigs$SkinType


public static "values"(): ($ClientConfigs$SkinType)[]
public static "valueOf"(name: string): $ClientConfigs$SkinType
public "getSkin"(sheared: boolean): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientConfigs$SkinType$Type = (("default") | ("original") | ("dungeons") | ("alternative")) | ($ClientConfigs$SkinType);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientConfigs$SkinType_ = $ClientConfigs$SkinType$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/block/$IWashable" {
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export interface $IWashable {

 "tryWash"(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type): boolean

(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type): boolean
}

export namespace $IWashable {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IWashable$Type = ($IWashable);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IWashable_ = $IWashable$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/integration/forge/$BreezyCompatImpl" {
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $BreezyCompatImpl {

constructor()

public static "getWindDirection"(pos: $BlockPos$Type, level: $Level$Type): float
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BreezyCompatImpl$Type = ($BreezyCompatImpl);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BreezyCompatImpl_ = $BreezyCompatImpl$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/integration/$FlanCompat" {
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $FlanCompat {

constructor()

public static "canReplace"(player: $Player$Type, pos: $BlockPos$Type): boolean
public static "canPlace"(player: $Player$Type, pos: $BlockPos$Type): boolean
public static "canInteract"(player: $Player$Type, targetPos: $BlockPos$Type): boolean
public static "canBreak"(player: $Player$Type, pos: $BlockPos$Type): boolean
public static "canAttack"(player: $Player$Type, victim: $Entity$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FlanCompat$Type = ($FlanCompat);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FlanCompat_ = $FlanCompat$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/misc/map_markers/$WeatheredMap" {
import {$MapColor, $MapColor$Type} from "packages/net/minecraft/world/level/material/$MapColor"
import {$MapItemSavedData, $MapItemSavedData$Type} from "packages/net/minecraft/world/level/saveddata/maps/$MapItemSavedData"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$WeatheredMap$WeatheredMapData, $WeatheredMap$WeatheredMapData$Type} from "packages/net/mehvahdjukaar/supplementaries/common/misc/map_markers/$WeatheredMap$WeatheredMapData"

export class $WeatheredMap {
static readonly "ANTIQUE_LIGHT": $MapColor
static readonly "ANTIQUE_DARK": $MapColor

constructor()

public static "init"(): void
public static "createAntiqueMapData"(mapitemsaveddata: $MapItemSavedData$Type, level: $Level$Type, on: boolean, replaceOld: boolean): integer
public static "setAntique"(level: $Level$Type, stack: $ItemStack$Type, on: boolean): void
public static "setAntique"(level: $Level$Type, stack: $ItemStack$Type, on: boolean, replaceOld: boolean): void
public static "getAntiqueData"(data: $MapItemSavedData$Type): $WeatheredMap$WeatheredMapData
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WeatheredMap$Type = ($WeatheredMap);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WeatheredMap_ = $WeatheredMap$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/util/$Utils" {
import {$Comparable, $Comparable$Type} from "packages/java/lang/$Comparable"
import {$Fluid, $Fluid$Type} from "packages/net/minecraft/world/level/material/$Fluid"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$StatType, $StatType$Type} from "packages/net/minecraft/stats/$StatType"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Codec, $Codec$Type} from "packages/com/mojang/serialization/$Codec"
import {$Potion, $Potion$Type} from "packages/net/minecraft/world/item/alchemy/$Potion"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$ClipContext$Block, $ClipContext$Block$Type} from "packages/net/minecraft/world/level/$ClipContext$Block"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$Biome, $Biome$Type} from "packages/net/minecraft/world/level/biome/$Biome"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$MapDecorationType, $MapDecorationType$Type} from "packages/net/mehvahdjukaar/moonlight/api/map/type/$MapDecorationType"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$RecipeSerializer, $RecipeSerializer$Type} from "packages/net/minecraft/world/item/crafting/$RecipeSerializer"
import {$CreativeModeTab, $CreativeModeTab$Type} from "packages/net/minecraft/world/item/$CreativeModeTab"
import {$BaseMapCodec, $BaseMapCodec$Type} from "packages/com/mojang/serialization/codecs/$BaseMapCodec"
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$Registry, $Registry$Type} from "packages/net/minecraft/core/$Registry"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$SoftFluid, $SoftFluid$Type} from "packages/net/mehvahdjukaar/moonlight/api/fluids/$SoftFluid"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$RegistryAccess, $RegistryAccess$Type} from "packages/net/minecraft/core/$RegistryAccess"
import {$ClipContext$Fluid, $ClipContext$Fluid$Type} from "packages/net/minecraft/world/level/$ClipContext$Fluid"
import {$DamageType, $DamageType$Type} from "packages/net/minecraft/world/damagesource/$DamageType"
import {$HitResult, $HitResult$Type} from "packages/net/minecraft/world/phys/$HitResult"
import {$ConfiguredFeature, $ConfiguredFeature$Type} from "packages/net/minecraft/world/level/levelgen/feature/$ConfiguredFeature"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$Property, $Property$Type} from "packages/net/minecraft/world/level/block/state/properties/$Property"
import {$ResourceKey, $ResourceKey$Type} from "packages/net/minecraft/resources/$ResourceKey"
import {$BlockEntityTicker, $BlockEntityTicker$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityTicker"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $Utils {

constructor()

public static "getID"(object: $RecipeSerializer$Type<(any)>): $ResourceLocation
public static "getID"(object: $SoftFluid$Type): $ResourceLocation
public static "getID"(object: $MapDecorationType$Type<(any), (any)>): $ResourceLocation
public static "getID"(object: $BlockEntityType$Type<(any)>): $ResourceLocation
public static "getID"(object: $Fluid$Type): $ResourceLocation
public static "getID"(object: $Item$Type): $ResourceLocation
public static "getID"(object: any): $ResourceLocation
public static "getID"(object: $StatType$Type<(any)>): $ResourceLocation
public static "getID"(object: $CreativeModeTab$Type): $ResourceLocation
public static "getID"(object: $MobEffect$Type): $ResourceLocation
public static "getID"(object: $Potion$Type): $ResourceLocation
public static "getID"(object: $Block$Type): $ResourceLocation
public static "getID"(object: $EntityType$Type<(any)>): $ResourceLocation
public static "getID"(object: $Biome$Type): $ResourceLocation
public static "getID"(type: $DamageType$Type): $ResourceLocation
public static "getID"(object: $ConfiguredFeature$Type<(any), (any)>): $ResourceLocation
public static "hackyGetRegistryAccess"(): $RegistryAccess
public static "isMethodImplemented"(original: $Class$Type<(any)>, subclass: $Class$Type<(any)>, name: string): boolean
public static "mayPerformBlockAction"(player: $Player$Type, pos: $BlockPos$Type, stack: $ItemStack$Type): boolean
/**
 * 
 * @deprecated
 */
public static "mayPerformBlockAction"(player: $Player$Type, pos: $BlockPos$Type): boolean
public static "swapItem"(player: $Player$Type, hand: $InteractionHand$Type, newItem: $ItemStack$Type): void
public static "swapItem"(player: $Player$Type, hand: $InteractionHand$Type, oldItem: $ItemStack$Type, newItem: $ItemStack$Type, bothSides: boolean): void
public static "swapItem"(player: $Player$Type, hand: $InteractionHand$Type, oldItem: $ItemStack$Type, newItem: $ItemStack$Type): void
public static "swapItemNBT"(player: $Player$Type, hand: $InteractionHand$Type, oldItem: $ItemStack$Type, newItem: $ItemStack$Type): void
public static "addStackToExisting"(player: $Player$Type, stack: $ItemStack$Type, avoidHands: boolean): void
/**
 * 
 * @deprecated
 */
public static "mayBuild"(player: $Player$Type, pos: $BlockPos$Type): boolean
/**
 * 
 * @deprecated
 */
public static "isTagged"<T>(entry: T, registry: $Registry$Type<(T)>, tag: $TagKey$Type<(T)>): boolean
public static "getXPinaBottle"(bottleCount: integer, rand: $RandomSource$Type): integer
/**
 * 
 * @deprecated
 */
public static "rayTrace"(entity: $Entity$Type, world: $Level$Type, blockMode: $ClipContext$Block$Type, fluidMode: $ClipContext$Fluid$Type, range: double): $HitResult
/**
 * 
 * @deprecated
 */
public static "rayTrace"(entity: $LivingEntity$Type, world: $Level$Type, blockMode: $ClipContext$Block$Type, fluidMode: $ClipContext$Fluid$Type): $HitResult
public static "awardAdvancement"(sp: $ServerPlayer$Type, name: $ResourceLocation$Type, unlockProp: string): void
public static "awardAdvancement"(sp: $ServerPlayer$Type, name: $ResourceLocation$Type): void
public static "copyPropertySafe"(blockBehaviour: $Block$Type): $BlockBehaviour$Properties
public static "hackyGetRegistry"<T>(registry: $ResourceKey$Type<($Registry$Type<(T)>)>): $Registry<(T)>
public static "replaceProperty"<T extends $Comparable<(T)>, A extends $Property<(T)>>(from: $BlockState$Type, to: $BlockState$Type, property: A): $BlockState
public static "getTicker"<E extends $BlockEntity, A extends $BlockEntity>(type: $BlockEntityType$Type<(A)>, targetType: $BlockEntityType$Type<(E)>, ticker: $BlockEntityTicker$Type<(any)>): $BlockEntityTicker<(A)>
public static "optionalMapCodec"<K, V, C extends ($BaseMapCodec<(K), (V)>) & ($Codec<($Map<(K), (V)>)>)>(keyCodec: $Codec$Type<(K)>, elementCodec: $Codec$Type<(V)>): C
public static "readBlockState"(compound: $CompoundTag$Type, level: $Level$Type): $BlockState
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Utils$Type = ($Utils);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Utils_ = $Utils$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/client/model/$ModelDataKey" {
import {$Class, $Class$Type} from "packages/java/lang/$Class"

export class $ModelDataKey<T> {

constructor(type: $Class$Type<(T)>)

public "equals"(obj: any): boolean
public "hashCode"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModelDataKey$Type<T> = ($ModelDataKey<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModelDataKey_<T> = $ModelDataKey$Type<(T)>;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/renderers/entities/funny/$PickleData" {
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$PlayerRenderer, $PlayerRenderer$Type} from "packages/net/minecraft/client/renderer/entity/player/$PlayerRenderer"

export class $PickleData {

constructor()

public static "set"(id: $UUID$Type, on: boolean, isJar: boolean): void
public static "isActive"(id: $UUID$Type): boolean
public static "onPlayerLogin"(player: $Player$Type): void
public static "isDev"(id: $UUID$Type, isJar: boolean): boolean
public static "onPlayerLogOff"(): void
public static "isActiveAndTick"(id: $UUID$Type, renderer: $PlayerRenderer$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PickleData$Type = ($PickleData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PickleData_ = $PickleData$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/platform/$ClientHelper$KeyBindEvent" {
import {$KeyMapping, $KeyMapping$Type} from "packages/net/minecraft/client/$KeyMapping"

export interface $ClientHelper$KeyBindEvent {

 "register"(arg0: $KeyMapping$Type): void

(arg0: $KeyMapping$Type): void
}

export namespace $ClientHelper$KeyBindEvent {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientHelper$KeyBindEvent$Type = ($ClientHelper$KeyBindEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientHelper$KeyBindEvent_ = $ClientHelper$KeyBindEvent$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/core/misc/$CaveFilter" {
import {$PlacementFilter, $PlacementFilter$Type} from "packages/net/minecraft/world/level/levelgen/placement/$PlacementFilter"
import {$Codec, $Codec$Type} from "packages/com/mojang/serialization/$Codec"
import {$PlacementModifierType, $PlacementModifierType$Type} from "packages/net/minecraft/world/level/levelgen/placement/$PlacementModifierType"

export class $CaveFilter extends $PlacementFilter {
static readonly "CODEC": $Codec<($CaveFilter)>


public "type"(): $PlacementModifierType<(any)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CaveFilter$Type = ($CaveFilter);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CaveFilter_ = $CaveFilter$Type;
}}
declare module "packages/net/mehvahdjukaar/dummmmmmy/configs/$CommonConfigs" {
import {$ConfigSpec, $ConfigSpec$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/configs/$ConfigSpec"
import {$CommonConfigs$Mode, $CommonConfigs$Mode$Type} from "packages/net/mehvahdjukaar/dummmmmmy/configs/$CommonConfigs$Mode"
import {$List, $List$Type} from "packages/java/util/$List"
import {$CommonConfigs$DpsMode, $CommonConfigs$DpsMode$Type} from "packages/net/mehvahdjukaar/dummmmmmy/configs/$CommonConfigs$DpsMode"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"

export class $CommonConfigs {
static readonly "SPEC": $ConfigSpec
static readonly "WHITELIST": $Supplier<($List<(string)>)>
static readonly "BLACKLIST": $Supplier<($List<(string)>)>
static readonly "RADIUS": $Supplier<(integer)>
static readonly "DAMAGE_EQUIPMENT": $Supplier<(boolean)>
static readonly "DECOY": $Supplier<(boolean)>
static readonly "DYNAMIC_DPS": $Supplier<($CommonConfigs$DpsMode)>
static readonly "MAX_COMBAT_INTERVAL": $Supplier<(integer)>
static readonly "DAMAGE_NUMBERS_MODE": $Supplier<($CommonConfigs$Mode)>
static readonly "HEALING_NUMBERS_MODE": $Supplier<($CommonConfigs$Mode)>
static readonly "DROP_XP": $Supplier<(double)>

constructor()

public static "init"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CommonConfigs$Type = ($CommonConfigs);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CommonConfigs_ = $CommonConfigs$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/reg/forge/$ModFluidsImpl" {
import {$Fluid, $Fluid$Type} from "packages/net/minecraft/world/level/material/$Fluid"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BucketItem, $BucketItem$Type} from "packages/net/minecraft/world/item/$BucketItem"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$FluidType, $FluidType$Type} from "packages/net/minecraftforge/fluids/$FluidType"
import {$FiniteFluid, $FiniteFluid$Type} from "packages/net/mehvahdjukaar/supplementaries/common/fluids/$FiniteFluid"
import {$BlockAndTintGetter, $BlockAndTintGetter$Type} from "packages/net/minecraft/world/level/$BlockAndTintGetter"
import {$FluidState, $FluidState$Type} from "packages/net/minecraft/world/level/material/$FluidState"
import {$CallbackInfoReturnable, $CallbackInfoReturnable$Type} from "packages/org/spongepowered/asm/mixin/injection/callback/$CallbackInfoReturnable"

export class $ModFluidsImpl {
static readonly "LUMISENE_FLUID_TYPE": $Supplier<($FluidType)>

constructor()

public static "messWithFluidH"(level: $BlockAndTintGetter$Type, fluid: $Fluid$Type, pos: $BlockPos$Type, blockState: $BlockState$Type, fluidState: $FluidState$Type, cir: $CallbackInfoReturnable$Type<(float)>): void
public static "messWithAvH"(level: $BlockAndTintGetter$Type, fluid: $Fluid$Type, g: float, h: float, i: float, pos: $BlockPos$Type, cir: $CallbackInfoReturnable$Type<(float)>): void
public static "registerFluidType"(name: string, fluidSupplier: $Supplier$Type<($FluidType$Type)>): $Supplier<($FluidType)>
public static "createLumisene"(): $FiniteFluid
public static "createLumiseneBucket"(): $BucketItem
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModFluidsImpl$Type = ($ModFluidsImpl);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModFluidsImpl_ = $ModFluidsImpl$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/reg/$ModWorldgenRegistry" {
import {$BasaltAshFeature$Config, $BasaltAshFeature$Config$Type} from "packages/net/mehvahdjukaar/supplementaries/common/worldgen/$BasaltAshFeature$Config"
import {$StructurePieceType, $StructurePieceType$Type} from "packages/net/minecraft/world/level/levelgen/structure/pieces/$StructurePieceType"
import {$StructureType, $StructureType$Type} from "packages/net/minecraft/world/level/levelgen/structure/$StructureType"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$Feature, $Feature$Type} from "packages/net/minecraft/world/level/levelgen/feature/$Feature"
import {$RoadSignFeature$Config, $RoadSignFeature$Config$Type} from "packages/net/mehvahdjukaar/supplementaries/common/worldgen/$RoadSignFeature$Config"
import {$WaySignStructure, $WaySignStructure$Type} from "packages/net/mehvahdjukaar/supplementaries/common/worldgen/$WaySignStructure"

export class $ModWorldgenRegistry {
static readonly "MINESHAFT_ELEVATOR": $Supplier<($StructurePieceType)>
static readonly "WAY_SIGN": $Supplier<($StructureType<($WaySignStructure)>)>
static readonly "ROAD_SIGN_FEATURE": $Supplier<($Feature<($RoadSignFeature$Config)>)>
static readonly "BASALT_ASH_FEATURE": $Supplier<($Feature<($BasaltAshFeature$Config)>)>

constructor()

public static "init"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModWorldgenRegistry$Type = ($ModWorldgenRegistry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModWorldgenRegistry_ = $ModWorldgenRegistry$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/renderers/entities/models/$EndermanSkullModel" {
import {$VertexConsumer, $VertexConsumer$Type} from "packages/com/mojang/blaze3d/vertex/$VertexConsumer"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$SkullModel, $SkullModel$Type} from "packages/net/minecraft/client/model/$SkullModel"
import {$ModelPart, $ModelPart$Type} from "packages/net/minecraft/client/model/geom/$ModelPart"
import {$LayerDefinition, $LayerDefinition$Type} from "packages/net/minecraft/client/model/geom/builders/$LayerDefinition"

export class $EndermanSkullModel extends $SkullModel {

constructor(modelPart: $ModelPart$Type)

public static "createMesh"(): $LayerDefinition
public "renderToBuffer"(poseStack: $PoseStack$Type, buffer: $VertexConsumer$Type, packedLight: integer, packedOverlay: integer, red: float, green: float, blue: float, alpha: float): void
public "setupAnim"(mouthAnim: float, g: float, h: float): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EndermanSkullModel$Type = ($EndermanSkullModel);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EndermanSkullModel_ = $EndermanSkullModel$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/core/misc/$FilteredResManager" {
import {$PackRepository, $PackRepository$Type} from "packages/net/minecraft/server/packs/repository/$PackRepository"
import {$PackType, $PackType$Type} from "packages/net/minecraft/server/packs/$PackType"
import {$ResourceProvider, $ResourceProvider$Type} from "packages/net/minecraft/server/packs/resources/$ResourceProvider"
import {$List, $List$Type} from "packages/java/util/$List"
import {$MultiPackResourceManager, $MultiPackResourceManager$Type} from "packages/net/minecraft/server/packs/resources/$MultiPackResourceManager"
import {$FallbackResourceManager, $FallbackResourceManager$Type} from "packages/net/minecraft/server/packs/resources/$FallbackResourceManager"
import {$Resource, $Resource$Type} from "packages/net/minecraft/server/packs/resources/$Resource"
import {$PackResources, $PackResources$Type} from "packages/net/minecraft/server/packs/$PackResources"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $FilteredResManager extends $MultiPackResourceManager {
readonly "namespacedManagers": $Map<(string), ($FallbackResourceManager)>
readonly "packs": $List<($PackResources)>

constructor(packType: $PackType$Type, list: $List$Type<($PackResources$Type)>)

public static "including"(original: $PackRepository$Type, packType: $PackType$Type, ...packs: (string)[]): $FilteredResManager
public static "excluding"(original: $PackRepository$Type, packType: $PackType$Type, ...packs: (string)[]): $FilteredResManager
public static "fromMap"(arg0: $Map$Type<($ResourceLocation$Type), ($Resource$Type)>): $ResourceProvider
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FilteredResManager$Type = ($FilteredResManager);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FilteredResManager_ = $FilteredResManager$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/entities/$BombEntity$BreakingMode" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $BombEntity$BreakingMode extends $Enum<($BombEntity$BreakingMode)> {
static readonly "ALL": $BombEntity$BreakingMode
static readonly "WEAK": $BombEntity$BreakingMode
static readonly "NONE": $BombEntity$BreakingMode


public static "values"(): ($BombEntity$BreakingMode)[]
public static "valueOf"(name: string): $BombEntity$BreakingMode
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BombEntity$BreakingMode$Type = (("all") | ("none") | ("weak")) | ($BombEntity$BreakingMode);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BombEntity$BreakingMode_ = $BombEntity$BreakingMode$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/network/$ServerBoundSetTrappedPresentPacket" {
import {$Message, $Message$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/network/$Message"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$ChannelHandler$Context, $ChannelHandler$Context$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/network/$ChannelHandler$Context"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $ServerBoundSetTrappedPresentPacket implements $Message {

constructor(buf: $FriendlyByteBuf$Type)
constructor(pos: $BlockPos$Type, packed: boolean)

public "handle"(context: $ChannelHandler$Context$Type): void
public "writeToBuffer"(buf: $FriendlyByteBuf$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ServerBoundSetTrappedPresentPacket$Type = ($ServerBoundSetTrappedPresentPacket);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ServerBoundSetTrappedPresentPacket_ = $ServerBoundSetTrappedPresentPacket$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/blocks/$SconceWallBlock" {
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$ParticleType, $ParticleType$Type} from "packages/net/minecraft/core/particles/$ParticleType"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$CollisionContext, $CollisionContext$Type} from "packages/net/minecraft/world/phys/shapes/$CollisionContext"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$Mirror, $Mirror$Type} from "packages/net/minecraft/world/level/block/$Mirror"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$Rotation, $Rotation$Type} from "packages/net/minecraft/world/level/block/$Rotation"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"
import {$SconceBlock, $SconceBlock$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/blocks/$SconceBlock"
import {$DirectionProperty, $DirectionProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$DirectionProperty"

export class $SconceWallBlock extends $SconceBlock {
static readonly "FACING": $DirectionProperty
static readonly "WATERLOGGED": $BooleanProperty
static readonly "LIT": $BooleanProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor<T extends $ParticleType<(any)>>(properties: $BlockBehaviour$Properties$Type, particleData: $Supplier$Type<(T)>)

public "getStateForPlacement"(context: $BlockPlaceContext$Type): $BlockState
public "updateShape"(stateIn: $BlockState$Type, facing: $Direction$Type, facingState: $BlockState$Type, worldIn: $LevelAccessor$Type, currentPos: $BlockPos$Type, facingPos: $BlockPos$Type): $BlockState
public "rotate"(state: $BlockState$Type, rot: $Rotation$Type): $BlockState
public "mirror"(state: $BlockState$Type, mirrorIn: $Mirror$Type): $BlockState
public "canSurvive"(state: $BlockState$Type, worldIn: $LevelReader$Type, pos: $BlockPos$Type): boolean
public "getShape"(state: $BlockState$Type, worldIn: $BlockGetter$Type, pos: $BlockPos$Type, context: $CollisionContext$Type): $VoxelShape
public "animateTick"(stateIn: $BlockState$Type, worldIn: $Level$Type, pos: $BlockPos$Type, rand: $RandomSource$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SconceWallBlock$Type = ($SconceWallBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SconceWallBlock_ = $SconceWallBlock$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/dispenser/$FishBucketJarBehavior" {
import {$DispenserHelper$AdditionalDispenserBehavior, $DispenserHelper$AdditionalDispenserBehavior$Type} from "packages/net/mehvahdjukaar/moonlight/api/util/$DispenserHelper$AdditionalDispenserBehavior"
import {$BlockSource, $BlockSource$Type} from "packages/net/minecraft/core/$BlockSource"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $FishBucketJarBehavior extends $DispenserHelper$AdditionalDispenserBehavior {


public static "bootStrap"(): void
public static "setEntityPokingOutOfBlock"(arg0: $BlockSource$Type, arg1: $Entity$Type, arg2: $Direction$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FishBucketJarBehavior$Type = ($FishBucketJarBehavior);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FishBucketJarBehavior_ = $FishBucketJarBehavior$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$StatueBlockTile" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$StatueBlockTile$StatuePose, $StatueBlockTile$StatuePose$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$StatueBlockTile$StatuePose"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$GameProfile, $GameProfile$Type} from "packages/com/mojang/authlib/$GameProfile"
import {$LockCode, $LockCode$Type} from "packages/net/minecraft/world/$LockCode"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$ItemDisplayTile, $ItemDisplayTile$Type} from "packages/net/mehvahdjukaar/moonlight/api/block/$ItemDisplayTile"

export class $StatueBlockTile extends $ItemDisplayTile {
static readonly "LOOT_TABLE_TAG": string
static readonly "LOOT_TABLE_SEED_TAG": string
 "lootTable": $ResourceLocation
 "lootTableSeed": long
 "lockKey": $LockCode
 "blockState": $BlockState

constructor(pos: $BlockPos$Type, state: $BlockState$Type)

public "updateTileOnInventoryChanged"(): void
public "updateClientVisualsOnLoad"(): void
public "canTakeItemThroughFace"(index: integer, stack: $ItemStack$Type, direction: $Direction$Type): boolean
public "canPlaceItemThroughFace"(index: integer, stack: $ItemStack$Type, direction: $Direction$Type): boolean
public "getDirection"(): $Direction
public "getPose"(): $StatueBlockTile$StatuePose
public "m_6820_"(): $Component
public "isWaving"(): boolean
public "hasCandle"(): $BlockState
public "getPlayerSkin"(): $GameProfile
public "setCustomName"(name: $Component$Type): void
public static "stillValidBlockEntity"(arg0: $BlockEntity$Type, arg1: $Player$Type, arg2: integer): boolean
public static "stillValidBlockEntity"(arg0: $BlockEntity$Type, arg1: $Player$Type): boolean
public static "tryClear"(arg0: any): void
get "direction"(): $Direction
get "pose"(): $StatueBlockTile$StatuePose
get "waving"(): boolean
get "playerSkin"(): $GameProfile
set "customName"(value: $Component$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $StatueBlockTile$Type = ($StatueBlockTile);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $StatueBlockTile_ = $StatueBlockTile$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/misc/globe/$GlobeTextureGenerator" {
import {$GlobeTextureGenerator$Pos, $GlobeTextureGenerator$Pos$Type} from "packages/net/mehvahdjukaar/supplementaries/common/misc/globe/$GlobeTextureGenerator$Pos"
import {$GlobeTextureGenerator$Pixel, $GlobeTextureGenerator$Pixel$Type} from "packages/net/mehvahdjukaar/supplementaries/common/misc/globe/$GlobeTextureGenerator$Pixel"

export class $GlobeTextureGenerator {


public static "generate"(seed: long): ((byte)[])[]
public "desertify"(): void
public "generateIce"(): void
public "shadeTemperateHot"(): void
public "generateIcebergs2"(): void
public "meltice"(): void
public "generateLand"(): void
public "pfp"(p: $GlobeTextureGenerator$Pos$Type): $GlobeTextureGenerator$Pixel
public "shadeWater"(): void
public "getByteMatrix"(): ((byte)[])[]
public "shadeCold"(): void
public "shadeTemperateCold"(): void
public "generateHotBiomes"(): void
public "shadeHot"(): void
public "coastEffects"(): void
public "fixBottomFace"(): void
public "setHotBiome"(p: $GlobeTextureGenerator$Pos$Type, dist: integer): void
public "genBiomes"(): void
public "generateIcebergs"(): void
public "doGenHot"(): boolean
public "generateHot"(): void
public "averageOut"(): void
public "setLand"(p: $GlobeTextureGenerator$Pos$Type, dist: integer): void
public "dist"(x: double, y: double, x1: double, y1: double): double
public "generateMushrooms"(): void
public "applyEffects"(): void
public "setTemperature"(x: integer, y: integer, t: integer): void
public "christmas"(): void
get "byteMatrix"(): ((byte)[])[]
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GlobeTextureGenerator$Type = ($GlobeTextureGenerator);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GlobeTextureGenerator_ = $GlobeTextureGenerator$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/events/forge/$VillagerBrainEvent" {
import {$Villager, $Villager$Type} from "packages/net/minecraft/world/entity/npc/$Villager"
import {$SensorType, $SensorType$Type} from "packages/net/minecraft/world/entity/ai/sensing/$SensorType"
import {$ListenerList, $ListenerList$Type} from "packages/net/minecraftforge/eventbus/$ListenerList"
import {$Event, $Event$Type} from "packages/net/minecraftforge/eventbus/api/$Event"
import {$Brain, $Brain$Type} from "packages/net/minecraft/world/entity/ai/$Brain"
import {$IVillagerBrainEvent, $IVillagerBrainEvent$Type} from "packages/net/mehvahdjukaar/moonlight/api/events/$IVillagerBrainEvent"
import {$Activity, $Activity$Type} from "packages/net/minecraft/world/entity/schedule/$Activity"
import {$ImmutableList, $ImmutableList$Type} from "packages/com/google/common/collect/$ImmutableList"
import {$VillagerBrainEventInternal, $VillagerBrainEventInternal$Type} from "packages/net/mehvahdjukaar/moonlight/core/misc/$VillagerBrainEventInternal"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$Pair, $Pair$Type} from "packages/com/mojang/datafixers/util/$Pair"
import {$MemoryModuleType, $MemoryModuleType$Type} from "packages/net/minecraft/world/entity/ai/memory/$MemoryModuleType"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $VillagerBrainEvent extends $Event implements $IVillagerBrainEvent {

constructor(brain: $Brain$Type<($Villager$Type)>, villager: $Villager$Type)
constructor()

public "addOrReplaceActivity"(activity: $Activity$Type, activityPackage: $ImmutableList$Type<(any)>): void
public "isCancelable"(): boolean
public "getInternal"(): $VillagerBrainEventInternal
public "getMemories"(): $Map<($MemoryModuleType<(any)>), ($Optional<(any)>)>
public "getVillager"(): $Villager
public "scheduleActivity"(activity: $Activity$Type, startTime: integer, endTime: integer): void
public "addTaskToActivity"<P extends $Pair<(integer), (any)>>(activity: $Activity$Type, task: P): boolean
public "addSensor"(newSensor: $SensorType$Type<(any)>): void
public "getListenerList"(): $ListenerList
public "hasResult"(): boolean
get "cancelable"(): boolean
get "internal"(): $VillagerBrainEventInternal
get "memories"(): $Map<($MemoryModuleType<(any)>), ($Optional<(any)>)>
get "villager"(): $Villager
get "listenerList"(): $ListenerList
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $VillagerBrainEvent$Type = ($VillagerBrainEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $VillagerBrainEvent_ = $VillagerBrainEvent$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/blocks/$BookPileHorizontalBlock" {
import {$IntegerProperty, $IntegerProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$IntegerProperty"
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$CollisionContext, $CollisionContext$Type} from "packages/net/minecraft/world/phys/shapes/$CollisionContext"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$Mirror, $Mirror$Type} from "packages/net/minecraft/world/level/block/$Mirror"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$BookPileBlock, $BookPileBlock$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/blocks/$BookPileBlock"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$Rotation, $Rotation$Type} from "packages/net/minecraft/world/level/block/$Rotation"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"
import {$DirectionProperty, $DirectionProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$DirectionProperty"

export class $BookPileHorizontalBlock extends $BookPileBlock {
static readonly "FACING": $DirectionProperty
static readonly "BOOKS": $IntegerProperty
static readonly "WATERLOGGED": $BooleanProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(properties: $BlockBehaviour$Properties$Type)

public "getStateForPlacement"(context: $BlockPlaceContext$Type): $BlockState
public "rotate"(state: $BlockState$Type, rot: $Rotation$Type): $BlockState
public "mirror"(state: $BlockState$Type, mirrorIn: $Mirror$Type): $BlockState
public "getShape"(state: $BlockState$Type, world: $BlockGetter$Type, pos: $BlockPos$Type, context: $CollisionContext$Type): $VoxelShape
public "newBlockEntity"(pPos: $BlockPos$Type, pState: $BlockState$Type): $BlockEntity
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BookPileHorizontalBlock$Type = ($BookPileHorizontalBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BookPileHorizontalBlock_ = $BookPileHorizontalBlock$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/renderers/tiles/$JarBoatTileRenderer" {
import {$BlockEntityRendererProvider$Context, $BlockEntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/blockentity/$BlockEntityRendererProvider$Context"
import {$JarBoatTile, $JarBoatTile$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$JarBoatTile"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$BlockEntityRenderer, $BlockEntityRenderer$Type} from "packages/net/minecraft/client/renderer/blockentity/$BlockEntityRenderer"

export class $JarBoatTileRenderer implements $BlockEntityRenderer<($JarBoatTile)> {

constructor(context: $BlockEntityRendererProvider$Context$Type)

public "render"(tile: $JarBoatTile$Type, partialTicks: float, matrixStackIn: $PoseStack$Type, bufferIn: $MultiBufferSource$Type, combinedLightIn: integer, combinedOverlayIn: integer): void
public "shouldRender"(arg0: $JarBoatTile$Type, arg1: $Vec3$Type): boolean
public "shouldRenderOffScreen"(arg0: $JarBoatTile$Type): boolean
public "getViewDistance"(): integer
get "viewDistance"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $JarBoatTileRenderer$Type = ($JarBoatTileRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $JarBoatTileRenderer_ = $JarBoatTileRenderer$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/integration/$BuzzierBeesCompat" {
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $BuzzierBeesCompat {

constructor()

public static "registerCandle"(id: $ResourceLocation$Type): void
public static "setupClient"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BuzzierBeesCompat$Type = ($BuzzierBeesCompat);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BuzzierBeesCompat_ = $BuzzierBeesCompat$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/misc/$StrOpt" {
import {$MapCodec, $MapCodec$Type} from "packages/com/mojang/serialization/$MapCodec"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$Codec, $Codec$Type} from "packages/com/mojang/serialization/$Codec"

export class $StrOpt {

constructor()

public static "of"<A>(elementCodec: $Codec$Type<(A)>, name: string, fallback: A): $MapCodec<(A)>
public static "of"<A>(elementCodec: $Codec$Type<(A)>, name: string): $MapCodec<($Optional<(A)>)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $StrOpt$Type = ($StrOpt);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $StrOpt_ = $StrOpt$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/configs/$CommonConfigs$MixingMode" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $CommonConfigs$MixingMode extends $Enum<($CommonConfigs$MixingMode)> {
static readonly "OFF": $CommonConfigs$MixingMode
static readonly "ONLY_BOILING": $CommonConfigs$MixingMode
static readonly "ON": $CommonConfigs$MixingMode


public static "values"(): ($CommonConfigs$MixingMode)[]
public static "valueOf"(name: string): $CommonConfigs$MixingMode
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CommonConfigs$MixingMode$Type = (("only_boiling") | ("off") | ("on")) | ($CommonConfigs$MixingMode);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CommonConfigs$MixingMode_ = $CommonConfigs$MixingMode$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/particles/$FeatherParticle" {
import {$ParticleRenderType, $ParticleRenderType$Type} from "packages/net/minecraft/client/particle/$ParticleRenderType"
import {$VertexConsumer, $VertexConsumer$Type} from "packages/com/mojang/blaze3d/vertex/$VertexConsumer"
import {$Camera, $Camera$Type} from "packages/net/minecraft/client/$Camera"
import {$TextureSheetParticle, $TextureSheetParticle$Type} from "packages/net/minecraft/client/particle/$TextureSheetParticle"

export class $FeatherParticle extends $TextureSheetParticle {
 "x": double
 "y": double
 "z": double
 "xd": double
 "yd": double
 "zd": double
 "age": integer
 "rCol": float
 "gCol": float
 "bCol": float


public "getRenderType"(): $ParticleRenderType
public "tick"(): void
public "render"(builder: $VertexConsumer$Type, info: $Camera$Type, partialTicks: float): void
public "setRotOffset"(spriteIndex: integer): void
get "renderType"(): $ParticleRenderType
set "rotOffset"(value: integer)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FeatherParticle$Type = ($FeatherParticle);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FeatherParticle_ = $FeatherParticle$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/block_models/$JarModelLoader" {
import {$Material, $Material$Type} from "packages/net/minecraft/client/resources/model/$Material"
import {$JsonObject, $JsonObject$Type} from "packages/com/google/gson/$JsonObject"
import {$JsonElement, $JsonElement$Type} from "packages/com/google/gson/$JsonElement"
import {$ModelBaker, $ModelBaker$Type} from "packages/net/minecraft/client/resources/model/$ModelBaker"
import {$ModelState, $ModelState$Type} from "packages/net/minecraft/client/resources/model/$ModelState"
import {$BakedModel, $BakedModel$Type} from "packages/net/minecraft/client/resources/model/$BakedModel"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$CustomModelLoader, $CustomModelLoader$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$CustomModelLoader"
import {$CustomGeometry, $CustomGeometry$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$CustomGeometry"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$JsonDeserializationContext, $JsonDeserializationContext$Type} from "packages/com/google/gson/$JsonDeserializationContext"
import {$TextureAtlasSprite, $TextureAtlasSprite$Type} from "packages/net/minecraft/client/renderer/texture/$TextureAtlasSprite"

export class $JarModelLoader implements $CustomModelLoader {

constructor()

public "deserialize"(json: $JsonObject$Type, jsonDeserializationContext: $JsonDeserializationContext$Type): $CustomGeometry
public static "parseModel"(j: $JsonElement$Type, modelBaker: $ModelBaker$Type, spriteGetter: $Function$Type<($Material$Type), ($TextureAtlasSprite$Type)>, transform: $ModelState$Type, location: $ResourceLocation$Type): $BakedModel
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $JarModelLoader$Type = ($JarModelLoader);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $JarModelLoader_ = $JarModelLoader$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/set/$BlockSetAPI" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$BlockTypeRegistry, $BlockTypeRegistry$Type} from "packages/net/mehvahdjukaar/moonlight/api/set/$BlockTypeRegistry"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$Registry, $Registry$Type} from "packages/net/minecraft/core/$Registry"
import {$ItemLike, $ItemLike$Type} from "packages/net/minecraft/world/level/$ItemLike"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$BlockType, $BlockType$Type} from "packages/net/mehvahdjukaar/moonlight/api/set/$BlockType"
import {$BlockType$SetFinder, $BlockType$SetFinder$Type} from "packages/net/mehvahdjukaar/moonlight/api/set/$BlockType$SetFinder"
import {$BlockSetAPI$BlockTypeRegistryCallback, $BlockSetAPI$BlockTypeRegistryCallback$Type} from "packages/net/mehvahdjukaar/moonlight/api/set/$BlockSetAPI$BlockTypeRegistryCallback"

export class $BlockSetAPI {

constructor()

public static "addDynamicBlockRegistration"<T extends $BlockType>(registrationFunction: $BlockSetAPI$BlockTypeRegistryCallback$Type<($Block$Type), (T)>, blockType: $Class$Type<(T)>): void
public static "addBlockTypeFinder"<T extends $BlockType>(type: $Class$Type<(T)>, blockFinder: $BlockType$SetFinder$Type<(T)>): void
public static "getBlockSet"<T extends $BlockType>(type: $Class$Type<(T)>): $BlockTypeRegistry<(T)>
public static "getBlockTypeOf"<T extends $BlockType>(itemLike: $ItemLike$Type, typeClass: $Class$Type<(T)>): T
public static "addDynamicItemRegistration"<T extends $BlockType>(registrationFunction: $BlockSetAPI$BlockTypeRegistryCallback$Type<($Item$Type), (T)>, blockType: $Class$Type<(T)>): void
public static "addBlockTypeRemover"<T extends $BlockType>(type: $Class$Type<(T)>, id: $ResourceLocation$Type): void
public static "getTypeRegistry"<T extends $BlockType>(typeClass: $Class$Type<(T)>): $BlockTypeRegistry<(T)>
public static "registerBlockSetDefinition"<T extends $BlockType>(typeRegistry: $BlockTypeRegistry$Type<(T)>): void
public static "addDynamicRegistration"<T extends $BlockType, E>(registrationFunction: $BlockSetAPI$BlockTypeRegistryCallback$Type<(E), (T)>, blockType: $Class$Type<(T)>, registry: $Registry$Type<(E)>): void
public static "getRegistries"(): $Collection<($BlockTypeRegistry<(any)>)>
public static "changeType"(current: any, originalMat: $BlockType$Type, destinationMat: $BlockType$Type): any
public static "changeItemType"(current: $Item$Type, originalMat: $BlockType$Type, destinationMat: $BlockType$Type): $Item
public static "changeBlockType"(current: $Block$Type, originalMat: $BlockType$Type, destinationMat: $BlockType$Type): $Block
get "registries"(): $Collection<($BlockTypeRegistry<(any)>)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BlockSetAPI$Type = ($BlockSetAPI);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BlockSetAPI_ = $BlockSetAPI$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/renderers/items/$JarItemRenderer" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$ItemDisplayContext, $ItemDisplayContext$Type} from "packages/net/minecraft/world/item/$ItemDisplayContext"
import {$CageItemRenderer, $CageItemRenderer$Type} from "packages/net/mehvahdjukaar/supplementaries/client/renderers/items/$CageItemRenderer"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"

export class $JarItemRenderer extends $CageItemRenderer {

constructor()

public "renderContent"(tag: $CompoundTag$Type, transformType: $ItemDisplayContext$Type, poseStack: $PoseStack$Type, buffer: $MultiBufferSource$Type, light: integer, overlay: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $JarItemRenderer$Type = ($JarItemRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $JarItemRenderer_ = $JarItemRenderer$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$ItemShelfBlockTile" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$LockCode, $LockCode$Type} from "packages/net/minecraft/world/$LockCode"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$ItemDisplayTile, $ItemDisplayTile$Type} from "packages/net/mehvahdjukaar/moonlight/api/block/$ItemDisplayTile"

export class $ItemShelfBlockTile extends $ItemDisplayTile {
static readonly "LOOT_TABLE_TAG": string
static readonly "LOOT_TABLE_SEED_TAG": string
 "lootTable": $ResourceLocation
 "lootTableSeed": long
 "lockKey": $LockCode
 "blockState": $BlockState

constructor(pos: $BlockPos$Type, state: $BlockState$Type)

public "getYaw"(): float
public "getDirection"(): $Direction
public "m_6820_"(): $Component
public "getAddItemSound"(): $SoundEvent
public static "stillValidBlockEntity"(arg0: $BlockEntity$Type, arg1: $Player$Type, arg2: integer): boolean
public static "stillValidBlockEntity"(arg0: $BlockEntity$Type, arg1: $Player$Type): boolean
public static "tryClear"(arg0: any): void
get "yaw"(): float
get "direction"(): $Direction
get "addItemSound"(): $SoundEvent
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ItemShelfBlockTile$Type = ($ItemShelfBlockTile);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ItemShelfBlockTile_ = $ItemShelfBlockTile$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/platform/$RegHelper$AttributeEvent" {
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$AttributeSupplier$Builder, $AttributeSupplier$Builder$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeSupplier$Builder"

export interface $RegHelper$AttributeEvent {

 "register"(arg0: $EntityType$Type<(any)>, arg1: $AttributeSupplier$Builder$Type): void

(arg0: $EntityType$Type<(any)>, arg1: $AttributeSupplier$Builder$Type): void
}

export namespace $RegHelper$AttributeEvent {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RegHelper$AttributeEvent$Type = ($RegHelper$AttributeEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RegHelper$AttributeEvent_ = $RegHelper$AttributeEvent$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/$QuiverArrowSelectGui" {
import {$Gui, $Gui$Type} from "packages/net/minecraft/client/gui/$Gui"
import {$Minecraft, $Minecraft$Type} from "packages/net/minecraft/client/$Minecraft"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $QuiverArrowSelectGui extends $Gui {
static readonly "GUI_ICONS_LOCATION": $ResourceLocation
readonly "minecraft": $Minecraft
 "vignetteBrightness": float
 "screenWidth": integer
 "screenHeight": integer


public static "isActive"(): boolean
public static "setUsingItem"(on: boolean): void
public static "onMouseScrolled"(scrollDelta: double): boolean
public "renderQuiverContent"(graphics: $GuiGraphics$Type, partialTicks: float, screenWidth: integer, screenHeight: integer): void
public static "isUsingKey"(): boolean
public static "onKeyPressed"(key: integer, action: integer, modifiers: integer): boolean
public static "setUsingKeybind"(on: boolean): void
public static "ohMouseMoved"(deltaX: double): void
public static "onPlayerRotated"(yRotIncrease: double): void
get "active"(): boolean
set "usingItem"(value: boolean)
get "usingKey"(): boolean
set "usingKeybind"(value: boolean)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $QuiverArrowSelectGui$Type = ($QuiverArrowSelectGui);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $QuiverArrowSelectGui_ = $QuiverArrowSelectGui$Type;
}}
declare module "packages/net/mehvahdjukaar/modelfix/$ModelFix" {
import {$Logger, $Logger$Type} from "packages/org/apache/logging/log4j/$Logger"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$ConfigSpec, $ConfigSpec$Type} from "packages/net/mehvahdjukaar/modelfix/moonlight_configs/$ConfigSpec"

export class $ModelFix {
static readonly "MOD_ID": string
static readonly "LOGGER": $Logger
static "expansion": $Supplier<(double)>
static "indent": $Supplier<(double)>
static "shrinkMult": $Supplier<(double)>
static "config": $ConfigSpec

constructor()

public static "init"(fabric: boolean): void
public static "makeScreen"(screen: $Screen$Type): $Screen
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModelFix$Type = ($ModelFix);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModelFix_ = $ModelFix$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/platform/$ClientHelper$EntityRendererEvent" {
import {$EntityRendererProvider, $EntityRendererProvider$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRendererProvider"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export interface $ClientHelper$EntityRendererEvent {

 "register"<E extends $Entity>(arg0: $EntityType$Type<(any)>, arg1: $EntityRendererProvider$Type<(E)>): void

(arg0: $EntityType$Type<(any)>, arg1: $EntityRendererProvider$Type<(E)>): void
}

export namespace $ClientHelper$EntityRendererEvent {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientHelper$EntityRendererEvent$Type = ($ClientHelper$EntityRendererEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientHelper$EntityRendererEvent_ = $ClientHelper$EntityRendererEvent$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/forge/$ClientEvents" {
import {$InputEvent$Key, $InputEvent$Key$Type} from "packages/net/minecraftforge/client/event/$InputEvent$Key"
import {$ItemTooltipEvent, $ItemTooltipEvent$Type} from "packages/net/minecraftforge/event/entity/player/$ItemTooltipEvent"

export class $ClientEvents {

constructor()

public static "e"(event: $InputEvent$Key$Type): void
public static "tooltipEvent"(event: $ItemTooltipEvent$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientEvents$Type = ($ClientEvents);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientEvents_ = $ClientEvents$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/misc/$SimpleMixinPlugin" {
import {$IMixinInfo, $IMixinInfo$Type} from "packages/org/spongepowered/asm/mixin/extensibility/$IMixinInfo"
import {$ClassNode, $ClassNode$Type} from "packages/org/objectweb/asm/tree/$ClassNode"
import {$IMixinConfigPlugin, $IMixinConfigPlugin$Type} from "packages/org/spongepowered/asm/mixin/extensibility/$IMixinConfigPlugin"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$List, $List$Type} from "packages/java/util/$List"

export class $SimpleMixinPlugin implements $IMixinConfigPlugin {

constructor()

public "onLoad"(mixinPackage: string): void
public "postApply"(targetClassName: string, targetClass: $ClassNode$Type, mixinClassName: string, mixinInfo: $IMixinInfo$Type): void
public "getMixins"(): $List<(string)>
public "getRefMapperConfig"(): string
public "shouldApplyMixin"(targetClassName: string, mixinClassName: string): boolean
public "preApply"(targetClassName: string, targetClass: $ClassNode$Type, mixinClassName: string, mixinInfo: $IMixinInfo$Type): void
public "acceptTargets"(myTargets: $Set$Type<(string)>, otherTargets: $Set$Type<(string)>): void
get "mixins"(): $List<(string)>
get "refMapperConfig"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SimpleMixinPlugin$Type = ($SimpleMixinPlugin);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SimpleMixinPlugin_ = $SimpleMixinPlugin$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/renderers/tiles/$FlagBlockTileRenderer" {
import {$Holder, $Holder$Type} from "packages/net/minecraft/core/$Holder"
import {$BlockEntityRendererProvider$Context, $BlockEntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/blockentity/$BlockEntityRendererProvider$Context"
import {$DyeColor, $DyeColor$Type} from "packages/net/minecraft/world/item/$DyeColor"
import {$FlagBlockTile, $FlagBlockTile$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$FlagBlockTile"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Pair, $Pair$Type} from "packages/com/mojang/datafixers/util/$Pair"
import {$BannerPattern, $BannerPattern$Type} from "packages/net/minecraft/world/level/block/entity/$BannerPattern"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$BlockEntityRenderer, $BlockEntityRenderer$Type} from "packages/net/minecraft/client/renderer/blockentity/$BlockEntityRenderer"

export class $FlagBlockTileRenderer implements $BlockEntityRenderer<($FlagBlockTile)> {

constructor(context: $BlockEntityRendererProvider$Context$Type)

public "getViewDistance"(): integer
public "render"(tile: $FlagBlockTile$Type, partialTicks: float, poseStack: $PoseStack$Type, bufferIn: $MultiBufferSource$Type, combinedLightIn: integer, combinedOverlayIn: integer): void
public static "renderPatterns"(matrixStackIn: $PoseStack$Type, bufferIn: $MultiBufferSource$Type, list: $List$Type<($Pair$Type<($Holder$Type<($BannerPattern$Type)>), ($DyeColor$Type)>)>, combinedLightIn: integer): void
public "shouldRender"(arg0: $FlagBlockTile$Type, arg1: $Vec3$Type): boolean
public "shouldRenderOffScreen"(arg0: $FlagBlockTile$Type): boolean
get "viewDistance"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FlagBlockTileRenderer$Type = ($FlagBlockTileRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FlagBlockTileRenderer_ = $FlagBlockTileRenderer$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/$ModSharedVariables" {
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"

export class $ModSharedVariables {

constructor()

public static "getDouble"(name: string): double
public static "getString"(name: string): string
public static "registerString"(name: string, supp: $Supplier$Type<(string)>): void
public static "registerFunction"(name: string, supp: $Function$Type<(any), (any)>): void
public static "registerBool"(name: string, supp: $Supplier$Type<(boolean)>): void
public static "invokeFunction"(name: string): any
public static "getBool"(name: string): boolean
public static "registerDouble"(name: string, supp: $Supplier$Type<(double)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModSharedVariables$Type = ($ModSharedVariables);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModSharedVariables_ = $ModSharedVariables$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/misc/mob_container/$DataDefinedCatchableMob$LootParam" {
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $DataDefinedCatchableMob$LootParam extends $Record {


public "equals"(o: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "tryDropping"(serverLevel: $ServerLevel$Type, pos: $BlockPos$Type, entity: $Entity$Type): void
public "tableId"(): $ResourceLocation
public "chance"(): float
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DataDefinedCatchableMob$LootParam$Type = ($DataDefinedCatchableMob$LootParam);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DataDefinedCatchableMob$LootParam_ = $DataDefinedCatchableMob$LootParam$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/misc/$InvokeUnrestricted" {
import {$BeforeInvoke, $BeforeInvoke$Type} from "packages/org/spongepowered/asm/mixin/injection/points/$BeforeInvoke"
import {$IInjectionPointContext, $IInjectionPointContext$Type} from "packages/org/spongepowered/asm/mixin/injection/$IInjectionPointContext"
import {$InjectionPoint$RestrictTargetLevel, $InjectionPoint$RestrictTargetLevel$Type} from "packages/org/spongepowered/asm/mixin/injection/$InjectionPoint$RestrictTargetLevel"
import {$InjectionPointData, $InjectionPointData$Type} from "packages/org/spongepowered/asm/mixin/injection/struct/$InjectionPointData"

export class $InvokeUnrestricted extends $BeforeInvoke {
static readonly "DEFAULT_ALLOWED_SHIFT_BY": integer
static readonly "MAX_ALLOWED_SHIFT_BY": integer

constructor(data: $InjectionPointData$Type)

public "getTargetRestriction"(context: $IInjectionPointContext$Type): $InjectionPoint$RestrictTargetLevel
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $InvokeUnrestricted$Type = ($InvokeUnrestricted);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $InvokeUnrestricted_ = $InvokeUnrestricted$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/client/$ModFluidRenderProperties" {
import {$FogShape, $FogShape$Type} from "packages/com/mojang/blaze3d/shaders/$FogShape"
import {$Fluid, $Fluid$Type} from "packages/net/minecraft/world/level/material/$Fluid"
import {$Vector3f, $Vector3f$Type} from "packages/org/joml/$Vector3f"
import {$FluidStack, $FluidStack$Type} from "packages/net/minecraftforge/fluids/$FluidStack"
import {$Camera, $Camera$Type} from "packages/net/minecraft/client/$Camera"
import {$IClientFluidTypeExtensions, $IClientFluidTypeExtensions$Type} from "packages/net/minecraftforge/client/extensions/common/$IClientFluidTypeExtensions"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$FluidState, $FluidState$Type} from "packages/net/minecraft/world/level/material/$FluidState"
import {$ClientLevel, $ClientLevel$Type} from "packages/net/minecraft/client/multiplayer/$ClientLevel"
import {$Minecraft, $Minecraft$Type} from "packages/net/minecraft/client/$Minecraft"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$FogRenderer$FogMode, $FogRenderer$FogMode$Type} from "packages/net/minecraft/client/renderer/$FogRenderer$FogMode"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$FluidType, $FluidType$Type} from "packages/net/minecraftforge/fluids/$FluidType"
import {$BlockAndTintGetter, $BlockAndTintGetter$Type} from "packages/net/minecraft/world/level/$BlockAndTintGetter"

export class $ModFluidRenderProperties implements $IClientFluidTypeExtensions {

constructor(still: $ResourceLocation$Type, flowing: $ResourceLocation$Type)
constructor(still: $ResourceLocation$Type, flowing: $ResourceLocation$Type, tint: integer)

public "modifyFogColor"(camera: $Camera$Type, partialTick: float, level: $ClientLevel$Type, renderDistance: integer, darkenWorldAmount: float, fluidFogColor: $Vector3f$Type): $Vector3f
public "modifyFogRender"(camera: $Camera$Type, mode: $FogRenderer$FogMode$Type, renderDistance: float, partialTick: float, nearDistance: float, farDistance: float, shape: $FogShape$Type): void
public "getFlowingTexture"(): $ResourceLocation
public "getFlowingTexture"(state: $FluidState$Type, getter: $BlockAndTintGetter$Type, pos: $BlockPos$Type): $ResourceLocation
public "getOverlayTexture"(state: $FluidState$Type, getter: $BlockAndTintGetter$Type, pos: $BlockPos$Type): $ResourceLocation
public "getOverlayTexture"(): $ResourceLocation
public "getRenderOverlayTexture"(mc: $Minecraft$Type): $ResourceLocation
public "getTintColor"(state: $FluidState$Type, getter: $BlockAndTintGetter$Type, pos: $BlockPos$Type): integer
public "getTintColor"(): integer
public "getStillTexture"(state: $FluidState$Type, getter: $BlockAndTintGetter$Type, pos: $BlockPos$Type): $ResourceLocation
public "getStillTexture"(): $ResourceLocation
public static "of"(arg0: $FluidState$Type): $IClientFluidTypeExtensions
public static "of"(arg0: $FluidType$Type): $IClientFluidTypeExtensions
public static "of"(arg0: $Fluid$Type): $IClientFluidTypeExtensions
public "getFlowingTexture"(arg0: $FluidStack$Type): $ResourceLocation
public "getOverlayTexture"(arg0: $FluidStack$Type): $ResourceLocation
public "getTintColor"(arg0: $FluidStack$Type): integer
public "getStillTexture"(arg0: $FluidStack$Type): $ResourceLocation
public "renderOverlay"(arg0: $Minecraft$Type, arg1: $PoseStack$Type): void
get "flowingTexture"(): $ResourceLocation
get "overlayTexture"(): $ResourceLocation
get "tintColor"(): integer
get "stillTexture"(): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModFluidRenderProperties$Type = ($ModFluidRenderProperties);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModFluidRenderProperties_ = $ModFluidRenderProperties$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/items/$JarItem" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$ICustomItemRendererProvider, $ICustomItemRendererProvider$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/$ICustomItemRendererProvider"
import {$AbstractMobContainerItem, $AbstractMobContainerItem$Type} from "packages/net/mehvahdjukaar/supplementaries/common/items/$AbstractMobContainerItem"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ItemStackRenderer, $ItemStackRenderer$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/$ItemStackRenderer"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$InteractionResultHolder, $InteractionResultHolder$Type} from "packages/net/minecraft/world/$InteractionResultHolder"
import {$UseOnContext, $UseOnContext$Type} from "packages/net/minecraft/world/item/context/$UseOnContext"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$AdditionalItemPlacement, $AdditionalItemPlacement$Type} from "packages/net/mehvahdjukaar/moonlight/api/item/additional_placements/$AdditionalItemPlacement"
import {$UseAnim, $UseAnim$Type} from "packages/net/minecraft/world/item/$UseAnim"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $JarItem extends $AbstractMobContainerItem implements $ICustomItemRendererProvider {
static readonly "BLOCK_ENTITY_TAG": string
static readonly "BLOCK_STATE_TAG": string
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(blockIn: $Block$Type, properties: $Item$Properties$Type)

public "canItemCatch"(e: $Entity$Type): boolean
public "saveEntityInItem"(entity: $Entity$Type, currentStack: $ItemStack$Type, bucket: $ItemStack$Type): $ItemStack
public "playReleaseSound"(world: $Level$Type, v: $Vec3$Type): void
public "playCatchSound"(player: $Player$Type): void
public "blocksPlacement"(): boolean
public "isBoat"(e: $Entity$Type): boolean
public "addPlacementTooltip"(tooltip: $List$Type<($Component$Type)>): void
public "getUseDuration"(stack: $ItemStack$Type): integer
public "finishUsingItem"(stack: $ItemStack$Type, world: $Level$Type, entity: $LivingEntity$Type): $ItemStack
public "use"(world: $Level$Type, playerEntity: $Player$Type, hand: $InteractionHand$Type): $InteractionResultHolder<($ItemStack)>
public "useOn"(context: $UseOnContext$Type): $InteractionResult
public "appendHoverText"(stack: $ItemStack$Type, worldIn: $Level$Type, tooltip: $List$Type<($Component$Type)>, flagIn: $TooltipFlag$Type): void
public "getUseAnimation"(stack: $ItemStack$Type): $UseAnim
public "getRendererFactory"(): $Supplier<($ItemStackRenderer)>
public "doInteract"(stack: $ItemStack$Type, player: $Player$Type, entity: $Entity$Type, hand: $InteractionHand$Type): $InteractionResult
/**
 * 
 * @deprecated
 */
public "registerFabricRenderer"(): void
public "asItem"(): $Item
public "moonlight$addAdditionalBehavior"(arg0: $AdditionalItemPlacement$Type): void
public "moonlight$getAdditionalBehavior"(): $AdditionalItemPlacement
public "moonlight$getClientAnimationExtension"(): any
public "moonlight$setClientAnimationExtension"(arg0: any): void
get "rendererFactory"(): $Supplier<($ItemStackRenderer)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $JarItem$Type = ($JarItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $JarItem_ = $JarItem$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/network/$ClientBoundOpenConfigsPacket" {
import {$Message, $Message$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/network/$Message"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$ChannelHandler$Context, $ChannelHandler$Context$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/network/$ChannelHandler$Context"

export class $ClientBoundOpenConfigsPacket implements $Message {

constructor(buffer: $FriendlyByteBuf$Type)
constructor()

public "handle"(context: $ChannelHandler$Context$Type): void
public "writeToBuffer"(friendlyByteBuf: $FriendlyByteBuf$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientBoundOpenConfigsPacket$Type = ($ClientBoundOpenConfigsPacket);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientBoundOpenConfigsPacket_ = $ClientBoundOpenConfigsPacket$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/integration/configured/$CustomConfigScreen$BooleanWrapper" {
import {$CustomConfigScreen, $CustomConfigScreen$Type} from "packages/net/mehvahdjukaar/moonlight/api/integration/configured/$CustomConfigScreen"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$IConfigValue, $IConfigValue$Type} from "packages/com/mrcrayfish/configured/api/$IConfigValue"
import {$ConfigScreen$BooleanItem, $ConfigScreen$BooleanItem$Type} from "packages/com/mrcrayfish/configured/client/screen/$ConfigScreen$BooleanItem"

export class $CustomConfigScreen$BooleanWrapper extends $ConfigScreen$BooleanItem {

constructor(arg0: $CustomConfigScreen$Type, arg1: $IConfigValue$Type<(any)>, arg2: $ItemStack$Type)
constructor(arg0: $CustomConfigScreen$Type, arg1: $IConfigValue$Type<(any)>)

public "render"(graphics: $GuiGraphics$Type, index: integer, top: integer, left: integer, width: integer, height: integer, mouseX: integer, mouseY: integer, hovered: boolean, partialTicks: float): void
public "mouseClicked"(mouseX: double, mouseY: double, button: integer): boolean
public "onResetValue"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CustomConfigScreen$BooleanWrapper$Type = ($CustomConfigScreen$BooleanWrapper);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CustomConfigScreen$BooleanWrapper_ = $CustomConfigScreen$BooleanWrapper$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/utils/$FlowerPotHandler" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$List, $List$Type} from "packages/java/util/$List"
import {$FlowerPotBlock, $FlowerPotBlock$Type} from "packages/net/minecraft/world/level/block/$FlowerPotBlock"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"

export class $FlowerPotHandler {
static readonly "CUSTOM_MODELS": $List<($ResourceLocation)>

constructor()

public static "setup"(): void
public static "hasSpecialFlowerModel"(i: $Item$Type): boolean
public static "registerCustomFlower"(item: $Item$Type, model: $ResourceLocation$Type): void
public static "getFullPot"(emptyPot: $FlowerPotBlock$Type, flowerBlock: $Block$Type): $Block
public static "isEmptyPot"(b: $Block$Type): boolean
public static "getSpecialFlowerModel"(i: $Item$Type): $ResourceLocation
public static "getEmptyPot"(fullPot: $FlowerPotBlock$Type): $Block
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FlowerPotHandler$Type = ($FlowerPotHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FlowerPotHandler_ = $FlowerPotHandler$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/entities/$SlingshotProjectileEntity" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Packet, $Packet$Type} from "packages/net/minecraft/network/protocol/$Packet"
import {$IExtraClientSpawnData, $IExtraClientSpawnData$Type} from "packages/net/mehvahdjukaar/moonlight/api/entity/$IExtraClientSpawnData"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$ImprovedProjectileEntity, $ImprovedProjectileEntity$Type} from "packages/net/mehvahdjukaar/moonlight/api/entity/$ImprovedProjectileEntity"
import {$ClientGamePacketListener, $ClientGamePacketListener$Type} from "packages/net/minecraft/network/protocol/game/$ClientGamePacketListener"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $SlingshotProjectileEntity extends $ImprovedProjectileEntity implements $IExtraClientSpawnData {
/**
 * 
 * @deprecated
 */
 "touchedGround": boolean
/**
 * 
 * @deprecated
 */
 "groundTime": integer
 "ownerUUID": $UUID
 "cachedOwner": $Entity
 "leftOwner": boolean
 "hasBeenShot": boolean
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(type: $EntityType$Type<($SlingshotProjectileEntity$Type)>, world: $Level$Type)
constructor(world: $Level$Type, item: $ItemStack$Type, throwerStack: $ItemStack$Type)
constructor(thrower: $LivingEntity$Type, world: $Level$Type, item: $ItemStack$Type, throwerStack: $ItemStack$Type)

public "reachedEndOfLife"(): void
public "tick"(): void
public "playerTouch"(playerEntity: $Player$Type): void
public "readAdditionalSaveData"(tag: $CompoundTag$Type): void
public "addAdditionalSaveData"(tag: $CompoundTag$Type): void
public "spawnTrailParticles"(): void
public "hasReachedEndOfLife"(): boolean
public "getLightEmission"(): integer
public "getAddEntityPacket"(): $Packet<($ClientGamePacketListener)>
public "setLoyalty"(stack: $ItemStack$Type): void
public "writeSpawnData"(buffer: $FriendlyByteBuf$Type): void
public "readSpawnData"(buffer: $FriendlyByteBuf$Type): void
get "lightEmission"(): integer
get "addEntityPacket"(): $Packet<($ClientGamePacketListener)>
set "loyalty"(value: $ItemStack$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SlingshotProjectileEntity$Type = ($SlingshotProjectileEntity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SlingshotProjectileEntity_ = $SlingshotProjectileEntity$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/network/$ServerBoundRequestConfigReloadPacket" {
import {$Message, $Message$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/network/$Message"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$ChannelHandler$Context, $ChannelHandler$Context$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/network/$ChannelHandler$Context"

export class $ServerBoundRequestConfigReloadPacket implements $Message {

constructor(buffer: $FriendlyByteBuf$Type)
constructor()

public "handle"(context: $ChannelHandler$Context$Type): void
public "writeToBuffer"(friendlyByteBuf: $FriendlyByteBuf$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ServerBoundRequestConfigReloadPacket$Type = ($ServerBoundRequestConfigReloadPacket);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ServerBoundRequestConfigReloadPacket_ = $ServerBoundRequestConfigReloadPacket$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/common/block/$WallLanternBlock" {
import {$IntegerProperty, $IntegerProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$IntegerProperty"
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$EntityBlock, $EntityBlock$Type} from "packages/net/minecraft/world/level/block/$EntityBlock"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Mirror, $Mirror$Type} from "packages/net/minecraft/world/level/block/$Mirror"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$PathComputationType, $PathComputationType$Type} from "packages/net/minecraft/world/level/pathfinder/$PathComputationType"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$WaterBlock, $WaterBlock$Type} from "packages/net/mehvahdjukaar/moonlight/api/block/$WaterBlock"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ModBlockProperties$BlockAttachment, $ModBlockProperties$BlockAttachment$Type} from "packages/net/mehvahdjukaar/amendments/reg/$ModBlockProperties$BlockAttachment"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"
import {$DirectionProperty, $DirectionProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$DirectionProperty"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$CollisionContext, $CollisionContext$Type} from "packages/net/minecraft/world/phys/shapes/$CollisionContext"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$EnumProperty, $EnumProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$EnumProperty"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$LootParams$Builder, $LootParams$Builder$Type} from "packages/net/minecraft/world/level/storage/loot/$LootParams$Builder"
import {$Rotation, $Rotation$Type} from "packages/net/minecraft/world/level/block/$Rotation"
import {$BlockEntityTicker, $BlockEntityTicker$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityTicker"
import {$GameEventListener, $GameEventListener$Type} from "packages/net/minecraft/world/level/gameevent/$GameEventListener"

export class $WallLanternBlock extends $WaterBlock implements $EntityBlock {
static readonly "SHAPE_NORTH": $VoxelShape
static readonly "SHAPE_SOUTH": $VoxelShape
static readonly "SHAPE_WEST": $VoxelShape
static readonly "SHAPE_EAST": $VoxelShape
static readonly "FACING": $DirectionProperty
static readonly "ATTACHMENT": $EnumProperty<($ModBlockProperties$BlockAttachment)>
static readonly "LIT": $BooleanProperty
static readonly "LIGHT_LEVEL": $IntegerProperty
static readonly "WATERLOGGED": $BooleanProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(properties: $BlockBehaviour$Properties$Type)

public "getTicker"<T extends $BlockEntity>(pLevel: $Level$Type, pState: $BlockState$Type, pBlockEntityType: $BlockEntityType$Type<(T)>): $BlockEntityTicker<(T)>
public "getStateForPlacement"(context: $BlockPlaceContext$Type): $BlockState
public "setPlacedBy"(world: $Level$Type, pos: $BlockPos$Type, state: $BlockState$Type, entity: $LivingEntity$Type, stack: $ItemStack$Type): void
public "getCloneItemStack"(level: $BlockGetter$Type, pos: $BlockPos$Type, state: $BlockState$Type): $ItemStack
public static "getConnectedState"(state: $BlockState$Type, facingState: $BlockState$Type, world: $LevelAccessor$Type, pos: $BlockPos$Type, dir: $Direction$Type): $BlockState
public "placeOn"(lantern: $BlockState$Type, onPos: $BlockPos$Type, face: $Direction$Type, world: $Level$Type): void
public static "isValidBlock"(b: $Block$Type): boolean
public "isPathfindable"(state: $BlockState$Type, worldIn: $BlockGetter$Type, pos: $BlockPos$Type, type: $PathComputationType$Type): boolean
public "neighborChanged"(state: $BlockState$Type, world: $Level$Type, pos: $BlockPos$Type, block: $Block$Type, fromPos: $BlockPos$Type, notify: boolean): void
public "updateShape"(stateIn: $BlockState$Type, facing: $Direction$Type, facingState: $BlockState$Type, worldIn: $LevelAccessor$Type, currentPos: $BlockPos$Type, facingPos: $BlockPos$Type): $BlockState
public "use"(pState: $BlockState$Type, pLevel: $Level$Type, pPos: $BlockPos$Type, pPlayer: $Player$Type, pHand: $InteractionHand$Type, pHit: $BlockHitResult$Type): $InteractionResult
public "rotate"(state: $BlockState$Type, rot: $Rotation$Type): $BlockState
public "mirror"(state: $BlockState$Type, mirrorIn: $Mirror$Type): $BlockState
public "getDrops"(state: $BlockState$Type, builder: $LootParams$Builder$Type): $List<($ItemStack)>
public "canSurvive"(state: $BlockState$Type, level: $LevelReader$Type, pos: $BlockPos$Type): boolean
public "getShape"(state: $BlockState$Type, worldIn: $BlockGetter$Type, pos: $BlockPos$Type, context: $CollisionContext$Type): $VoxelShape
public "tick"(state: $BlockState$Type, level: $ServerLevel$Type, pos: $BlockPos$Type, rand: $RandomSource$Type): void
public "entityInside"(state: $BlockState$Type, level: $Level$Type, pos: $BlockPos$Type, entity: $Entity$Type): void
public "animateTick"(state: $BlockState$Type, level: $Level$Type, pos: $BlockPos$Type, random: $RandomSource$Type): void
public "newBlockEntity"(pPos: $BlockPos$Type, pState: $BlockState$Type): $BlockEntity
public "getListener"<T extends $BlockEntity>(arg0: $ServerLevel$Type, arg1: T): $GameEventListener
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WallLanternBlock$Type = ($WallLanternBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WallLanternBlock_ = $WallLanternBlock$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/resources/textures/$PaletteColor" {
import {$RGBColor, $RGBColor$Type} from "packages/net/mehvahdjukaar/moonlight/api/util/math/colors/$RGBColor"
import {$HCLColor, $HCLColor$Type} from "packages/net/mehvahdjukaar/moonlight/api/util/math/colors/$HCLColor"
import {$Comparable, $Comparable$Type} from "packages/java/lang/$Comparable"
import {$LABColor, $LABColor$Type} from "packages/net/mehvahdjukaar/moonlight/api/util/math/colors/$LABColor"
import {$BaseColor, $BaseColor$Type} from "packages/net/mehvahdjukaar/moonlight/api/util/math/colors/$BaseColor"

export class $PaletteColor implements $Comparable<($PaletteColor)> {

constructor(color: $BaseColor$Type<(any)>)
constructor(color: $BaseColor$Type<(any)>, occurrence: integer)
constructor(color: integer)

public "value"(): integer
public "equals"(o: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "compareTo"(o: $PaletteColor$Type): integer
public "luminance"(): float
public "distanceTo"(color: $PaletteColor$Type): float
public "rgb"(): $RGBColor
public "getOccurrence"(): integer
public "setOccurrence"(occurrence: integer): void
public "lab"(): $LABColor
public "hcl"(): $HCLColor
public "getDarkened"(): $PaletteColor
public "getLightened"(): $PaletteColor
get "occurrence"(): integer
set "occurrence"(value: integer)
get "darkened"(): $PaletteColor
get "lightened"(): $PaletteColor
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PaletteColor$Type = ($PaletteColor);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PaletteColor_ = $PaletteColor$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/items/crafting/$RopeArrowAddRecipe" {
import {$RegistryAccess, $RegistryAccess$Type} from "packages/net/minecraft/core/$RegistryAccess"
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$RecipeSerializer, $RecipeSerializer$Type} from "packages/net/minecraft/world/item/crafting/$RecipeSerializer"
import {$CustomRecipe, $CustomRecipe$Type} from "packages/net/minecraft/world/item/crafting/$CustomRecipe"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$CraftingContainer, $CraftingContainer$Type} from "packages/net/minecraft/world/inventory/$CraftingContainer"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$CraftingBookCategory, $CraftingBookCategory$Type} from "packages/net/minecraft/world/item/crafting/$CraftingBookCategory"

export class $RopeArrowAddRecipe extends $CustomRecipe {

constructor(idIn: $ResourceLocation$Type, category: $CraftingBookCategory$Type)

public "matches"(inv: $CraftingContainer$Type, worldIn: $Level$Type): boolean
public "getRemainingItems"(inv: $CraftingContainer$Type): $NonNullList<($ItemStack)>
public "canCraftInDimensions"(width: integer, height: integer): boolean
public "getSerializer"(): $RecipeSerializer<(any)>
public "assemble"(inv: $CraftingContainer$Type, access: $RegistryAccess$Type): $ItemStack
get "serializer"(): $RecipeSerializer<(any)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RopeArrowAddRecipe$Type = ($RopeArrowAddRecipe);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RopeArrowAddRecipe_ = $RopeArrowAddRecipe$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/map/$CustomMapData" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$CustomMapData$Type, $CustomMapData$Type$Type} from "packages/net/mehvahdjukaar/moonlight/api/map/$CustomMapData$Type"
import {$MapItemSavedData, $MapItemSavedData$Type} from "packages/net/minecraft/world/level/saveddata/maps/$MapItemSavedData"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$CustomMapData$DirtyCounter, $CustomMapData$DirtyCounter$Type} from "packages/net/mehvahdjukaar/moonlight/api/map/$CustomMapData$DirtyCounter"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export interface $CustomMapData<H extends $CustomMapData$DirtyCounter> {

 "load"(arg0: $CompoundTag$Type): void
 "save"(arg0: $CompoundTag$Type): void
 "getType"(): $CustomMapData$Type<(any)>
 "setDirty"(data: $MapItemSavedData$Type, dirtySetter: $Consumer$Type<(H)>): void
 "persistOnCopyOrLock"(): boolean
 "createDirtyCounter"(): H
 "loadUpdateTag"(arg0: $CompoundTag$Type): void
 "saveToUpdateTag"(arg0: $CompoundTag$Type, arg1: H): void
 "onItemTooltip"(data: $MapItemSavedData$Type, stack: $ItemStack$Type): $Component
 "onItemUpdate"(data: $MapItemSavedData$Type, entity: $Entity$Type): boolean
}

export namespace $CustomMapData {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CustomMapData$Type<H> = ($CustomMapData<(H)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CustomMapData_<H> = $CustomMapData$Type<(H)>;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/events/overrides/$AntiqueInkBehavior" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$ItemUseOnBlockOverride, $ItemUseOnBlockOverride$Type} from "packages/net/mehvahdjukaar/supplementaries/common/events/overrides/$ItemUseOnBlockOverride"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $AntiqueInkBehavior implements $ItemUseOnBlockOverride {


public "isEnabled"(): boolean
public "appliesToItem"(item: $Item$Type): boolean
public "altersWorld"(): boolean
public "tryPerformingAction"(world: $Level$Type, player: $Player$Type, hand: $InteractionHand$Type, stack: $ItemStack$Type, hit: $BlockHitResult$Type): $InteractionResult
public "getTooltip"(): $MutableComponent
public "placesBlock"(): boolean
public "shouldBlockMapToItem"(item: $Item$Type): boolean
get "enabled"(): boolean
get "tooltip"(): $MutableComponent
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AntiqueInkBehavior$Type = ($AntiqueInkBehavior);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AntiqueInkBehavior_ = $AntiqueInkBehavior$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/dispenser/$PancakeDiscBehavior" {
import {$OptionalDispenseItemBehavior, $OptionalDispenseItemBehavior$Type} from "packages/net/minecraft/core/dispenser/$OptionalDispenseItemBehavior"
import {$BlockSource, $BlockSource$Type} from "packages/net/minecraft/core/$BlockSource"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $PancakeDiscBehavior extends $OptionalDispenseItemBehavior {


public static "bootStrap"(): void
public static "setEntityPokingOutOfBlock"(arg0: $BlockSource$Type, arg1: $Entity$Type, arg2: $Direction$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PancakeDiscBehavior$Type = ($PancakeDiscBehavior);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PancakeDiscBehavior_ = $PancakeDiscBehavior$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/entity/$IControllableVehicle" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $IControllableVehicle {

 "onInputUpdate"(arg0: boolean, arg1: boolean, arg2: boolean, arg3: boolean, arg4: boolean, arg5: boolean): void

(arg0: boolean, arg1: boolean, arg2: boolean, arg3: boolean, arg4: boolean, arg5: boolean): void
}

export namespace $IControllableVehicle {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IControllableVehicle$Type = ($IControllableVehicle);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IControllableVehicle_ = $IControllableVehicle$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/item/$FuelBlockItem" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$BlockItem, $BlockItem$Type} from "packages/net/minecraft/world/item/$BlockItem"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$RecipeType, $RecipeType$Type} from "packages/net/minecraft/world/item/crafting/$RecipeType"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$AdditionalItemPlacement, $AdditionalItemPlacement$Type} from "packages/net/mehvahdjukaar/moonlight/api/item/additional_placements/$AdditionalItemPlacement"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $FuelBlockItem extends $BlockItem {
static readonly "BLOCK_ENTITY_TAG": string
static readonly "BLOCK_STATE_TAG": string
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(pBlock: $Block$Type, pProperties: $Item$Properties$Type, burnTime: $Supplier$Type<(integer)>)

public "getBurnTime"(itemStack: $ItemStack$Type, recipeType: $RecipeType$Type<(any)>): integer
public "moonlight$addAdditionalBehavior"(arg0: $AdditionalItemPlacement$Type): void
public "moonlight$getAdditionalBehavior"(): $AdditionalItemPlacement
public "moonlight$getClientAnimationExtension"(): any
public "moonlight$setClientAnimationExtension"(arg0: any): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FuelBlockItem$Type = ($FuelBlockItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FuelBlockItem_ = $FuelBlockItem$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$FlagBlockTile" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BannerPattern, $BannerPattern$Type} from "packages/net/minecraft/world/level/block/entity/$BannerPattern"
import {$IColored, $IColored$Type} from "packages/net/mehvahdjukaar/moonlight/api/block/$IColored"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ClientboundBlockEntityDataPacket, $ClientboundBlockEntityDataPacket$Type} from "packages/net/minecraft/network/protocol/game/$ClientboundBlockEntityDataPacket"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Holder, $Holder$Type} from "packages/net/minecraft/core/$Holder"
import {$DyeColor, $DyeColor$Type} from "packages/net/minecraft/world/item/$DyeColor"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Pair, $Pair$Type} from "packages/com/mojang/datafixers/util/$Pair"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Nameable, $Nameable$Type} from "packages/net/minecraft/world/$Nameable"
import {$AABB, $AABB$Type} from "packages/net/minecraft/world/phys/$AABB"

export class $FlagBlockTile extends $BlockEntity implements $Nameable, $IColored {
readonly "offset": float
 "blockState": $BlockState

constructor(pos: $BlockPos$Type, state: $BlockState$Type)
constructor(pos: $BlockPos$Type, state: $BlockState$Type, color: $DyeColor$Type)

public "getItem"(state: $BlockState$Type): $ItemStack
public "getName"(): $Component
public "getUpdatePacket"(): $ClientboundBlockEntityDataPacket
public "getColor"(): $DyeColor
public "setCustomName"(component: $Component$Type): void
public "load"(compoundNBT: $CompoundTag$Type): void
public "m_183515_"(compound: $CompoundTag$Type): void
public "getDirection"(): $Direction
public "getCustomName"(): $Component
public "getRenderBoundingBox"(): $AABB
public "getPatterns"(): $List<($Pair<($Holder<($BannerPattern)>), ($DyeColor)>)>
public "getUpdateTag"(): $CompoundTag
public "getDisplayName"(): $Component
public "hasCustomName"(): boolean
/**
 * 
 * @deprecated
 */
public "changeItemColor"(color: $DyeColor$Type): $Item
public "supportsBlankColor"(): boolean
get "name"(): $Component
get "updatePacket"(): $ClientboundBlockEntityDataPacket
get "color"(): $DyeColor
set "customName"(value: $Component$Type)
get "direction"(): $Direction
get "customName"(): $Component
get "renderBoundingBox"(): $AABB
get "patterns"(): $List<($Pair<($Holder<($BannerPattern)>), ($DyeColor)>)>
get "updateTag"(): $CompoundTag
get "displayName"(): $Component
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FlagBlockTile$Type = ($FlagBlockTile);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FlagBlockTile_ = $FlagBlockTile$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/misc/$ColoredMapHandler$ColorData" {
import {$ColoredMapHandler$Counter, $ColoredMapHandler$Counter$Type} from "packages/net/mehvahdjukaar/supplementaries/common/misc/$ColoredMapHandler$Counter"
import {$ModelDataManager, $ModelDataManager$Type} from "packages/net/minecraftforge/client/model/data/$ModelDataManager"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$LevelLightEngine, $LevelLightEngine$Type} from "packages/net/minecraft/world/level/lighting/$LevelLightEngine"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$NativeImage, $NativeImage$Type} from "packages/com/mojang/blaze3d/platform/$NativeImage"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$BiFunction, $BiFunction$Type} from "packages/java/util/function/$BiFunction"
import {$FluidState, $FluidState$Type} from "packages/net/minecraft/world/level/material/$FluidState"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$CustomMapData$Type, $CustomMapData$Type$Type} from "packages/net/mehvahdjukaar/moonlight/api/map/$CustomMapData$Type"
import {$MapItemSavedData, $MapItemSavedData$Type} from "packages/net/minecraft/world/level/saveddata/maps/$MapItemSavedData"
import {$Stream, $Stream$Type} from "packages/java/util/stream/$Stream"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$ColorResolver, $ColorResolver$Type} from "packages/net/minecraft/world/level/$ColorResolver"
import {$ClipContext, $ClipContext$Type} from "packages/net/minecraft/world/level/$ClipContext"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$AABB, $AABB$Type} from "packages/net/minecraft/world/phys/$AABB"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$LightLayer, $LightLayer$Type} from "packages/net/minecraft/world/level/$LightLayer"
import {$LevelHeightAccessor, $LevelHeightAccessor$Type} from "packages/net/minecraft/world/level/$LevelHeightAccessor"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$ClipBlockStateContext, $ClipBlockStateContext$Type} from "packages/net/minecraft/world/level/$ClipBlockStateContext"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$CustomMapData, $CustomMapData$Type} from "packages/net/mehvahdjukaar/moonlight/api/map/$CustomMapData"
import {$BlockAndTintGetter, $BlockAndTintGetter$Type} from "packages/net/minecraft/world/level/$BlockAndTintGetter"

export class $ColoredMapHandler$ColorData implements $CustomMapData<($ColoredMapHandler$Counter)>, $BlockAndTintGetter {
static readonly "BIOME_SIZE": integer
static readonly "MIN_X": string
static readonly "MAX_X": string
static readonly "MIN_Z": string

constructor()

public "load"(tag: $CompoundTag$Type): void
public "clear"(): void
public "save"(tag: $CompoundTag$Type): void
public "getType"(): $CustomMapData$Type<(any)>
public "processTexture"(texture: $NativeImage$Type, startX: integer, startY: integer, colors: (byte)[]): void
public "getBlockEntity"(pos: $BlockPos$Type): $BlockEntity
public "getFluidState"(pos: $BlockPos$Type): $FluidState
public "getLightEngine"(): $LevelLightEngine
public "getHeight"(): integer
public "getBlockTint"(pos: $BlockPos$Type, colorResolver: $ColorResolver$Type): integer
public "getShade"(direction: $Direction$Type, shade: boolean): float
public "getMinBuildHeight"(): integer
public "getBlockState"(pos: $BlockPos$Type): $BlockState
public "persistOnCopyOrLock"(): boolean
public "createDirtyCounter"(): $ColoredMapHandler$Counter
public "loadUpdateTag"(tag: $CompoundTag$Type): void
public "saveToUpdateTag"(tag: $CompoundTag$Type, dc: $ColoredMapHandler$Counter$Type): void
public "markColored"(x: integer, z: integer, block: $Block$Type, level: $Level$Type, pos: $BlockPos$Type, data: $MapItemSavedData$Type): void
public "setDirty"(data: $MapItemSavedData$Type, dirtySetter: $Consumer$Type<($ColoredMapHandler$Counter$Type)>): void
public "onItemTooltip"(data: $MapItemSavedData$Type, stack: $ItemStack$Type): $Component
public "onItemUpdate"(data: $MapItemSavedData$Type, entity: $Entity$Type): boolean
public "canSeeSky"(arg0: $BlockPos$Type): boolean
public "getRawBrightness"(arg0: $BlockPos$Type, arg1: integer): integer
public "getBrightness"(arg0: $LightLayer$Type, arg1: $BlockPos$Type): integer
public "getBlockEntity"<T extends $BlockEntity>(arg0: $BlockPos$Type, arg1: $BlockEntityType$Type<(T)>): $Optional<(T)>
public "getBlockStates"(arg0: $AABB$Type): $Stream<($BlockState)>
public "getMaxLightLevel"(): integer
public "isBlockInLine"(arg0: $ClipBlockStateContext$Type): $BlockHitResult
public "clipWithInteractionOverride"(arg0: $Vec3$Type, arg1: $Vec3$Type, arg2: $BlockPos$Type, arg3: $VoxelShape$Type, arg4: $BlockState$Type): $BlockHitResult
public "getLightEmission"(arg0: $BlockPos$Type): integer
public static "traverseBlocks"<T, C>(arg0: $Vec3$Type, arg1: $Vec3$Type, arg2: C, arg3: $BiFunction$Type<(C), ($BlockPos$Type), (T)>, arg4: $Function$Type<(C), (T)>): T
public "getBlockFloorHeight"(arg0: $VoxelShape$Type, arg1: $Supplier$Type<($VoxelShape$Type)>): double
public "getBlockFloorHeight"(arg0: $BlockPos$Type): double
public "clip"(arg0: $ClipContext$Type): $BlockHitResult
public "getShade"(arg0: float, arg1: float, arg2: float, arg3: boolean): float
public "getSectionsCount"(): integer
public "isOutsideBuildHeight"(arg0: integer): boolean
public "getMinSection"(): integer
public "getMaxSection"(): integer
public "getSectionIndexFromSectionY"(arg0: integer): integer
public "getSectionYFromSectionIndex"(arg0: integer): integer
public "getSectionIndex"(arg0: integer): integer
public static "create"(arg0: integer, arg1: integer): $LevelHeightAccessor
public "isOutsideBuildHeight"(arg0: $BlockPos$Type): boolean
public "getMaxBuildHeight"(): integer
public "getExistingBlockEntity"(arg0: $BlockPos$Type): $BlockEntity
public "getModelDataManager"(): $ModelDataManager
get "type"(): $CustomMapData$Type<(any)>
get "lightEngine"(): $LevelLightEngine
get "height"(): integer
get "minBuildHeight"(): integer
get "maxLightLevel"(): integer
get "sectionsCount"(): integer
get "minSection"(): integer
get "maxSection"(): integer
get "maxBuildHeight"(): integer
get "modelDataManager"(): $ModelDataManager
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ColoredMapHandler$ColorData$Type = ($ColoredMapHandler$ColorData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ColoredMapHandler$ColorData_ = $ColoredMapHandler$ColorData$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/blocks/$BlackboardBlock" {
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$EntityBlock, $EntityBlock$Type} from "packages/net/minecraft/world/level/block/$EntityBlock"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Mirror, $Mirror$Type} from "packages/net/minecraft/world/level/block/$Mirror"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$DyeColor, $DyeColor$Type} from "packages/net/minecraft/world/item/$DyeColor"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$WaterBlock, $WaterBlock$Type} from "packages/net/mehvahdjukaar/moonlight/api/block/$WaterBlock"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"
import {$DirectionProperty, $DirectionProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$DirectionProperty"
import {$Vector2i, $Vector2i$Type} from "packages/org/joml/$Vector2i"
import {$IWashable, $IWashable$Type} from "packages/net/mehvahdjukaar/moonlight/api/block/$IWashable"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$CollisionContext, $CollisionContext$Type} from "packages/net/minecraft/world/phys/shapes/$CollisionContext"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlackboardBlockTile, $BlackboardBlockTile$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$BlackboardBlockTile"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$Rotation, $Rotation$Type} from "packages/net/minecraft/world/level/block/$Rotation"
import {$BlockEntityTicker, $BlockEntityTicker$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityTicker"
import {$GameEventListener, $GameEventListener$Type} from "packages/net/minecraft/world/level/gameevent/$GameEventListener"

export class $BlackboardBlock extends $WaterBlock implements $EntityBlock, $IWashable {
static readonly "FACING": $DirectionProperty
static readonly "GLOWING": $BooleanProperty
static readonly "WATERLOGGED": $BooleanProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(properties: $BlockBehaviour$Properties$Type)

public static "colorToByte"(color: $DyeColor$Type): byte
public static "colorFromByte"(b: byte): integer
public static "getStackChalkColor"(stack: $ItemStack$Type): $DyeColor
public static "getHitSubPixel"(hit: $BlockHitResult$Type): $Vector2i
public "getBlackboardItem"(te: $BlackboardBlockTile$Type): $ItemStack
public "getStateForPlacement"(context: $BlockPlaceContext$Type): $BlockState
public "setPlacedBy"(world: $Level$Type, pos: $BlockPos$Type, state: $BlockState$Type, placer: $LivingEntity$Type, stack: $ItemStack$Type): void
public "getCloneItemStack"(level: $BlockGetter$Type, pos: $BlockPos$Type, state: $BlockState$Type): $ItemStack
public "use"(state: $BlockState$Type, level: $Level$Type, pos: $BlockPos$Type, player: $Player$Type, handIn: $InteractionHand$Type, hit: $BlockHitResult$Type): $InteractionResult
public "rotate"(state: $BlockState$Type, rot: $Rotation$Type): $BlockState
public "mirror"(state: $BlockState$Type, mirrorIn: $Mirror$Type): $BlockState
public "getShape"(state: $BlockState$Type, world: $BlockGetter$Type, pos: $BlockPos$Type, context: $CollisionContext$Type): $VoxelShape
public "tryWash"(level: $Level$Type, pos: $BlockPos$Type, state: $BlockState$Type): boolean
public "newBlockEntity"(pPos: $BlockPos$Type, pState: $BlockState$Type): $BlockEntity
public "getTicker"<T extends $BlockEntity>(arg0: $Level$Type, arg1: $BlockState$Type, arg2: $BlockEntityType$Type<(T)>): $BlockEntityTicker<(T)>
public "getListener"<T extends $BlockEntity>(arg0: $ServerLevel$Type, arg1: T): $GameEventListener
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BlackboardBlock$Type = ($BlackboardBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BlackboardBlock_ = $BlackboardBlock$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/commands/$StructureMapCommand" {
import {$CommandSourceStack, $CommandSourceStack$Type} from "packages/net/minecraft/commands/$CommandSourceStack"
import {$CommandBuildContext, $CommandBuildContext$Type} from "packages/net/minecraft/commands/$CommandBuildContext"
import {$ArgumentBuilder, $ArgumentBuilder$Type} from "packages/com/mojang/brigadier/builder/$ArgumentBuilder"
import {$CommandDispatcher, $CommandDispatcher$Type} from "packages/com/mojang/brigadier/$CommandDispatcher"
import {$CommandContext, $CommandContext$Type} from "packages/com/mojang/brigadier/context/$CommandContext"

export class $StructureMapCommand {

constructor()

public static "register"(dispatcher: $CommandDispatcher$Type<($CommandSourceStack$Type)>, context: $CommandBuildContext$Type): $ArgumentBuilder<($CommandSourceStack), (any)>
public static "giveMap"(context: $CommandContext$Type<($CommandSourceStack$Type)>, zoom: integer): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $StructureMapCommand$Type = ($StructureMapCommand);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $StructureMapCommand_ = $StructureMapCommand$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/items/$PresentItem" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$IColored, $IColored$Type} from "packages/net/mehvahdjukaar/moonlight/api/block/$IColored"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$BlockItem, $BlockItem$Type} from "packages/net/minecraft/world/item/$BlockItem"
import {$DyeColor, $DyeColor$Type} from "packages/net/minecraft/world/item/$DyeColor"
import {$List, $List$Type} from "packages/java/util/$List"
import {$AdditionalItemPlacement, $AdditionalItemPlacement$Type} from "packages/net/mehvahdjukaar/moonlight/api/item/additional_placements/$AdditionalItemPlacement"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $PresentItem extends $BlockItem implements $IColored {
static readonly "BLOCK_ENTITY_TAG": string
static readonly "BLOCK_STATE_TAG": string
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(block: $Block$Type, properties: $Item$Properties$Type)

public "supportsBlankColor"(): boolean
public "appendHoverText"(stack: $ItemStack$Type, level: $Level$Type, components: $List$Type<($Component$Type)>, tooltipFlag: $TooltipFlag$Type): void
public "getColor"(): $DyeColor
/**
 * 
 * @deprecated
 */
public "changeItemColor"(color: $DyeColor$Type): $Item
public "moonlight$addAdditionalBehavior"(arg0: $AdditionalItemPlacement$Type): void
public "moonlight$getAdditionalBehavior"(): $AdditionalItemPlacement
public "moonlight$getClientAnimationExtension"(): any
public "moonlight$setClientAnimationExtension"(arg0: any): void
get "color"(): $DyeColor
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PresentItem$Type = ($PresentItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PresentItem_ = $PresentItem$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/core/misc/forge/$VillagerAIInternalImpl" {
import {$Villager, $Villager$Type} from "packages/net/minecraft/world/entity/npc/$Villager"
import {$IVillagerBrainEvent, $IVillagerBrainEvent$Type} from "packages/net/mehvahdjukaar/moonlight/api/events/$IVillagerBrainEvent"
import {$Brain, $Brain$Type} from "packages/net/minecraft/world/entity/ai/$Brain"

export class $VillagerAIInternalImpl {

constructor()

public static "createEvent"(brain: $Brain$Type<($Villager$Type)>, villager: $Villager$Type): $IVillagerBrainEvent
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $VillagerAIInternalImpl$Type = ($VillagerAIInternalImpl);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $VillagerAIInternalImpl_ = $VillagerAIInternalImpl$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/client/gui/$LecternBookEditScreen" {
import {$LecternEditMenu, $LecternEditMenu$Type} from "packages/net/mehvahdjukaar/amendments/common/$LecternEditMenu"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Button, $Button$Type} from "packages/net/minecraft/client/gui/components/$Button"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$BookEditScreen, $BookEditScreen$Type} from "packages/net/minecraft/client/gui/screens/inventory/$BookEditScreen"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"
import {$TextFieldHelper, $TextFieldHelper$Type} from "packages/net/minecraft/client/gui/font/$TextFieldHelper"
import {$MenuAccess, $MenuAccess$Type} from "packages/net/minecraft/client/gui/screens/inventory/$MenuAccess"

export class $LecternBookEditScreen extends $BookEditScreen implements $MenuAccess<($LecternEditMenu)> {
 "book": $ItemStack
 "isModified": boolean
 "isSigning": boolean
readonly "pages": $List<(string)>
 "title": string
 "pageEdit": $TextFieldHelper
 "doneButton": $Button
 "signButton": $Button
 "finalizeButton": $Button
static readonly "BACKGROUND_LOCATION": $ResourceLocation
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering

constructor(lecternMenu: $LecternEditMenu$Type, inventory: $Inventory$Type, component: $Component$Type)

public "onClose"(): void
public "removed"(): void
public "pageForward"(): void
public "pageBack"(): void
public "titleKeyPressed"(keyCode: integer, scanCode: integer, modifiers: integer): boolean
public "saveChanges"(publish: boolean): void
public "isPauseScreen"(): boolean
public "saveChanges"(publish: boolean, takeBook: boolean): void
public "charTyped"(codePoint: character, modifiers: integer): boolean
public "getMenu"(): $LecternEditMenu
public "onInkClicked"(): void
public "onQuillClicked"(): void
get "pauseScreen"(): boolean
get "menu"(): $LecternEditMenu
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LecternBookEditScreen$Type = ($LecternBookEditScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LecternBookEditScreen_ = $LecternBookEditScreen$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/capabilities/$CapabilityHandler" {
import {$IWashable, $IWashable$Type} from "packages/net/mehvahdjukaar/moonlight/api/block/$IWashable"
import {$ICatchableMob, $ICatchableMob$Type} from "packages/net/mehvahdjukaar/supplementaries/api/$ICatchableMob"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$QuiverItemImpl$QuiverCapability, $QuiverItemImpl$QuiverCapability$Type} from "packages/net/mehvahdjukaar/supplementaries/common/items/forge/$QuiverItemImpl$QuiverCapability"
import {$RegisterCapabilitiesEvent, $RegisterCapabilitiesEvent$Type} from "packages/net/minecraftforge/common/capabilities/$RegisterCapabilitiesEvent"
import {$AttachCapabilitiesEvent, $AttachCapabilitiesEvent$Type} from "packages/net/minecraftforge/event/$AttachCapabilitiesEvent"
import {$IQuiverEntity, $IQuiverEntity$Type} from "packages/net/mehvahdjukaar/supplementaries/api/$IQuiverEntity"
import {$Capability, $Capability$Type} from "packages/net/minecraftforge/common/capabilities/$Capability"
import {$IAntiqueTextProvider, $IAntiqueTextProvider$Type} from "packages/net/mehvahdjukaar/supplementaries/api/$IAntiqueTextProvider"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$ICapabilityProvider, $ICapabilityProvider$Type} from "packages/net/minecraftforge/common/capabilities/$ICapabilityProvider"

export class $CapabilityHandler {
static readonly "CATCHABLE_MOB_CAP": $Capability<($ICatchableMob)>
static readonly "ANTIQUE_TEXT_CAP": $Capability<($IAntiqueTextProvider)>
static readonly "SOAP_WASHABLE_CAPABILITY": $Capability<($IWashable)>
static readonly "QUIVER_ITEM_HANDLER": $Capability<($QuiverItemImpl$QuiverCapability)>
static readonly "QUIVER_PLAYER": $Capability<($IQuiverEntity)>

constructor()

public static "get"<T>(provider: $ICapabilityProvider$Type, cap: $Capability$Type<(T)>): T
public static "get"<T>(provider: $ICapabilityProvider$Type, cap: $Capability$Type<(T)>, dir: $Direction$Type): T
public static "register"(event: $RegisterCapabilitiesEvent$Type): void
public static "getToken"<T>(capClass: $Class$Type<(T)>): $Capability<(T)>
public static "attachBlockEntityCapabilities"(event: $AttachCapabilitiesEvent$Type<($BlockEntity$Type)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CapabilityHandler$Type = ($CapabilityHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CapabilityHandler_ = $CapabilityHandler$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/$ModBlockProperties" {
import {$IntegerProperty, $IntegerProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$IntegerProperty"
import {$ModBlockProperties$RakeDirection, $ModBlockProperties$RakeDirection$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/$ModBlockProperties$RakeDirection"
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$BlackboardManager$Key, $BlackboardManager$Key$Type} from "packages/net/mehvahdjukaar/supplementaries/client/$BlackboardManager$Key"
import {$ModBlockProperties$Rune, $ModBlockProperties$Rune$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/$ModBlockProperties$Rune"
import {$BookPileBlockTile$BooksList, $BookPileBlockTile$BooksList$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$BookPileBlockTile$BooksList"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$ModBlockProperties$Bunting, $ModBlockProperties$Bunting$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/$ModBlockProperties$Bunting"
import {$SoftFluid, $SoftFluid$Type} from "packages/net/mehvahdjukaar/moonlight/api/fluids/$SoftFluid"
import {$EnumProperty, $EnumProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$EnumProperty"
import {$ModBlockProperties$Topping, $ModBlockProperties$Topping$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/$ModBlockProperties$Topping"
import {$ModBlockProperties$DisplayStatus, $ModBlockProperties$DisplayStatus$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/$ModBlockProperties$DisplayStatus"
import {$SignPostBlockTile$Sign, $SignPostBlockTile$Sign$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$SignPostBlockTile$Sign"
import {$ModelDataKey, $ModelDataKey$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$ModelDataKey"
import {$ModBlockProperties$PostType, $ModBlockProperties$PostType$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/$ModBlockProperties$PostType"
import {$ModBlockProperties$Winding, $ModBlockProperties$Winding$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/$ModBlockProperties$Winding"

export class $ModBlockProperties {
static readonly "EXTENDING": $BooleanProperty
static readonly "HAS_WATER": $BooleanProperty
static readonly "CONNECTED": $BooleanProperty
static readonly "KNOT": $BooleanProperty
static readonly "TIPPED": $BooleanProperty
static readonly "FLIPPED": $BooleanProperty
static readonly "AXIS_Y": $BooleanProperty
static readonly "AXIS_X": $BooleanProperty
static readonly "AXIS_Z": $BooleanProperty
static readonly "FLOOR": $BooleanProperty
static readonly "LAVALOGGED": $BooleanProperty
static readonly "ANTIQUE": $BooleanProperty
static readonly "TREASURE": $BooleanProperty
static readonly "PACKED": $BooleanProperty
static readonly "GLOWING": $BooleanProperty
static readonly "WATCHED": $BooleanProperty
static readonly "CULLED": $BooleanProperty
static readonly "HAS_BLOCK": $BooleanProperty
static readonly "ROTATING": $BooleanProperty
static readonly "HOUR": $IntegerProperty
static readonly "LIGHT_LEVEL_0_15": $IntegerProperty
static readonly "LIGHT_LEVEL_5_15": $IntegerProperty
static readonly "LIGHT_LEVEL_0_7": $IntegerProperty
static readonly "WIND_STRENGTH": $IntegerProperty
static readonly "PANCAKES_1_8": $IntegerProperty
static readonly "ROTATION_4": $IntegerProperty
static readonly "BURNING": $IntegerProperty
static readonly "BOOKS": $IntegerProperty
static readonly "FINITE_FLUID_LEVEL": $IntegerProperty
static readonly "BALLS": $IntegerProperty
static readonly "TOPPING": $EnumProperty<($ModBlockProperties$Topping)>
static readonly "WINDING": $EnumProperty<($ModBlockProperties$Winding)>
static readonly "POST_TYPE": $EnumProperty<($ModBlockProperties$PostType)>
static readonly "RAKE_DIRECTION": $EnumProperty<($ModBlockProperties$RakeDirection)>
static readonly "ITEM_STATUS": $EnumProperty<($ModBlockProperties$DisplayStatus)>
static readonly "RUNE": $EnumProperty<($ModBlockProperties$Rune)>
static readonly "NORTH_BUNTING": $EnumProperty<($ModBlockProperties$Bunting)>
static readonly "SOUTH_BUNTING": $EnumProperty<($ModBlockProperties$Bunting)>
static readonly "WEST_BUNTING": $EnumProperty<($ModBlockProperties$Bunting)>
static readonly "EAST_BUNTING": $EnumProperty<($ModBlockProperties$Bunting)>
static readonly "MIMIC": $ModelDataKey<($BlockState)>
static readonly "FANCY": $ModelDataKey<(boolean)>
static readonly "FRAMED": $ModelDataKey<(boolean)>
static readonly "SLIM": $ModelDataKey<(boolean)>
static readonly "SIGN_UP": $ModelDataKey<($SignPostBlockTile$Sign)>
static readonly "SIGN_DOWN": $ModelDataKey<($SignPostBlockTile$Sign)>
static readonly "FLOWER_0": $ModelDataKey<($BlockState)>
static readonly "FLOWER_1": $ModelDataKey<($BlockState)>
static readonly "FLOWER_2": $ModelDataKey<($BlockState)>
static readonly "FLUID": $ModelDataKey<($SoftFluid)>
static readonly "FLUID_COLOR": $ModelDataKey<(integer)>
static readonly "FILL_LEVEL": $ModelDataKey<(float)>
static readonly "BLACKBOARD": $ModelDataKey<($BlackboardManager$Key)>
static readonly "BOOKS_KEY": $ModelDataKey<($BookPileBlockTile$BooksList)>

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModBlockProperties$Type = ($ModBlockProperties);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModBlockProperties_ = $ModBlockProperties$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/util/math/colors/$LABColor" {
import {$RGBColor, $RGBColor$Type} from "packages/net/mehvahdjukaar/moonlight/api/util/math/colors/$RGBColor"
import {$Codec, $Codec$Type} from "packages/com/mojang/serialization/$Codec"
import {$BaseColor, $BaseColor$Type} from "packages/net/mehvahdjukaar/moonlight/api/util/math/colors/$BaseColor"

export class $LABColor extends $BaseColor<($LABColor)> {
/**
 * 
 * @deprecated
 */
static readonly "CODEC": $Codec<(integer)>

constructor(l: float, a: float, b: float, alpha: float)

public "toString"(): string
public "b"(): float
public "a"(): float
/**
 * 
 * @deprecated
 */
public "multiply"(color: $LABColor$Type, hue: float, chroma: float, luminance: float, alpha: float): $LABColor
public "luminance"(): float
public "alpha"(): float
public "asLAB"(): $LABColor
public "mixWith"(color: $LABColor$Type, bias: float): $LABColor
public "asRGB"(): $RGBColor
public "withAlpha"(alpha: float): $LABColor
public static "averageColors"(...colors: ($LABColor$Type)[]): $LABColor
public "withLuminance"(luminance: float): $LABColor
public "withA"(a: float): $LABColor
public "withB"(b: float): $LABColor
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LABColor$Type = ($LABColor);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LABColor_ = $LABColor$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/integration/$CompatHandlerClient" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $CompatHandlerClient {

constructor()

public static "init"(): void
public static "setup"(): void
public static "doSetup"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CompatHandlerClient$Type = ($CompatHandlerClient);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CompatHandlerClient_ = $CompatHandlerClient$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/core/set/$BlockSetInternal" {
import {$BlockTypeRegistry, $BlockTypeRegistry$Type} from "packages/net/mehvahdjukaar/moonlight/api/set/$BlockTypeRegistry"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$Registry, $Registry$Type} from "packages/net/minecraft/core/$Registry"
import {$AfterLanguageLoadEvent, $AfterLanguageLoadEvent$Type} from "packages/net/mehvahdjukaar/moonlight/api/events/$AfterLanguageLoadEvent"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$BlockType, $BlockType$Type} from "packages/net/mehvahdjukaar/moonlight/api/set/$BlockType"
import {$BlockType$SetFinder, $BlockType$SetFinder$Type} from "packages/net/mehvahdjukaar/moonlight/api/set/$BlockType$SetFinder"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$ItemLike, $ItemLike$Type} from "packages/net/minecraft/world/level/$ItemLike"
import {$BlockSetAPI$BlockTypeRegistryCallback, $BlockSetAPI$BlockTypeRegistryCallback$Type} from "packages/net/mehvahdjukaar/moonlight/api/set/$BlockSetAPI$BlockTypeRegistryCallback"

export class $BlockSetInternal {

constructor()

public static "addDynamicBlockRegistration"<T extends $BlockType>(registrationFunction: $BlockSetAPI$BlockTypeRegistryCallback$Type<($Block$Type), (T)>, blockType: $Class$Type<(T)>): void
public static "addTranslations"(event: $AfterLanguageLoadEvent$Type): void
public static "addBlockTypeFinder"<T extends $BlockType>(type: $Class$Type<(T)>, blockFinder: $BlockType$SetFinder$Type<(T)>): void
public static "getBlockSet"<T extends $BlockType>(type: $Class$Type<(T)>): $BlockTypeRegistry<(T)>
public static "getBlockTypeOf"<T extends $BlockType>(itemLike: $ItemLike$Type, typeClass: $Class$Type<(T)>): T
public static "addDynamicItemRegistration"<T extends $BlockType>(registrationFunction: $BlockSetAPI$BlockTypeRegistryCallback$Type<($Item$Type), (T)>, blockType: $Class$Type<(T)>): void
public static "addBlockTypeRemover"<T extends $BlockType>(type: $Class$Type<(T)>, id: $ResourceLocation$Type): void
public static "initializeBlockSets"(): void
public static "registerBlockSetDefinition"<T extends $BlockType>(typeRegistry: $BlockTypeRegistry$Type<(T)>): void
public static "addDynamicRegistration"<T extends $BlockType, E>(registrationFunction: $BlockSetAPI$BlockTypeRegistryCallback$Type<(E), (T)>, blockType: $Class$Type<(T)>, registry: $Registry$Type<(E)>): void
public static "getRegistry"<T extends $BlockType>(typeClass: $Class$Type<(T)>): $BlockTypeRegistry<(T)>
public static "getRegistries"(): $Collection<($BlockTypeRegistry<(any)>)>
get "registries"(): $Collection<($BlockTypeRegistry<(any)>)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BlockSetInternal$Type = ($BlockSetInternal);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BlockSetInternal_ = $BlockSetInternal$Type;
}}
declare module "packages/net/mehvahdjukaar/dummmmmmy/client/$TargetDummyModel" {
import {$VertexConsumer, $VertexConsumer$Type} from "packages/com/mojang/blaze3d/vertex/$VertexConsumer"
import {$HumanoidModel, $HumanoidModel$Type} from "packages/net/minecraft/client/model/$HumanoidModel"
import {$HumanoidModel$ArmPose, $HumanoidModel$ArmPose$Type} from "packages/net/minecraft/client/model/$HumanoidModel$ArmPose"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$ModelPart, $ModelPart$Type} from "packages/net/minecraft/client/model/geom/$ModelPart"
import {$LayerDefinition, $LayerDefinition$Type} from "packages/net/minecraft/client/model/geom/builders/$LayerDefinition"
import {$TargetDummyEntity, $TargetDummyEntity$Type} from "packages/net/mehvahdjukaar/dummmmmmy/common/$TargetDummyEntity"

export class $TargetDummyModel<T extends $TargetDummyEntity> extends $HumanoidModel<(T)> {
readonly "standPlate": $ModelPart
static readonly "OVERLAY_SCALE": float
static readonly "HAT_OVERLAY_SCALE": float
static readonly "LEGGINGS_OVERLAY_SCALE": float
static readonly "TOOT_HORN_XROT_BASE": float
static readonly "TOOT_HORN_YROT_BASE": float
readonly "head": $ModelPart
readonly "hat": $ModelPart
readonly "body": $ModelPart
readonly "rightArm": $ModelPart
readonly "leftArm": $ModelPart
readonly "rightLeg": $ModelPart
readonly "leftLeg": $ModelPart
 "leftArmPose": $HumanoidModel$ArmPose
 "rightArmPose": $HumanoidModel$ArmPose
 "crouching": boolean
 "swimAmount": float
readonly "scaleHead": boolean
readonly "babyYHeadOffset": float
readonly "babyZHeadOffset": float
readonly "babyHeadScale": float
readonly "babyBodyScale": float
readonly "bodyYOffset": float
 "attackTime": float
 "riding": boolean
 "young": boolean

constructor(modelPart: $ModelPart$Type)

public static "createMesh"(size: float, textHeight: integer): $LayerDefinition
public "setupAnim"(entityIn: $TargetDummyEntity$Type, limbSwing: float, limbSwingAmount: float, ageInTicks: float, netHeadYaw: float, headPitch: float): void
public "prepareMobModel"(entity: T, limbSwing: float, limbSwingAmount: float, partialTick: float): void
public "rotateModelX"(model: $ModelPart$Type, nrx: float, nry: float, nrz: float, angle: float): void
public "rotateModelY"(model: $ModelPart$Type, nrx: float, nry: float, nrz: float, angle: float, mult: integer): void
public "renderToBuffer"(matrixStackIn: $PoseStack$Type, bufferIn: $VertexConsumer$Type, packedLightIn: integer, overlayIn: integer, red: float, green: float, blue: float, alpha: float): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TargetDummyModel$Type<T> = ($TargetDummyModel<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TargetDummyModel_<T> = $TargetDummyModel$Type<(T)>;
}}
declare module "packages/net/mehvahdjukaar/amendments/client/$BlockScanner" {
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"

export class $BlockScanner {

constructor()

public static "getLanterns"(): $Set<($Block)>
public static "getTorches"(): $Set<($Block)>
public static "getCandleHolders"(): $Set<($Block)>
get "lanterns"(): $Set<($Block)>
get "torches"(): $Set<($Block)>
get "candleHolders"(): $Set<($Block)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BlockScanner$Type = ($BlockScanner);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BlockScanner_ = $BlockScanner$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/integration/forge/$QuarkCompatImpl" {
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export class $QuarkCompatImpl {

constructor()

public static "init"(): void
public static "getEncumbermentFromBackpack"(stack: $ItemStack$Type): float
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $QuarkCompatImpl$Type = ($QuarkCompatImpl);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $QuarkCompatImpl_ = $QuarkCompatImpl$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/renderers/forge/$QuiverArrowSelectGuiImpl" {
import {$Minecraft, $Minecraft$Type} from "packages/net/minecraft/client/$Minecraft"
import {$IGuiOverlay, $IGuiOverlay$Type} from "packages/net/minecraftforge/client/gui/overlay/$IGuiOverlay"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$QuiverArrowSelectGui, $QuiverArrowSelectGui$Type} from "packages/net/mehvahdjukaar/supplementaries/client/$QuiverArrowSelectGui"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$ForgeGui, $ForgeGui$Type} from "packages/net/minecraftforge/client/gui/overlay/$ForgeGui"

export class $QuiverArrowSelectGuiImpl extends $QuiverArrowSelectGui implements $IGuiOverlay {
static readonly "GUI_ICONS_LOCATION": $ResourceLocation
readonly "minecraft": $Minecraft
 "vignetteBrightness": float
 "screenWidth": integer
 "screenHeight": integer

constructor()

public "render"(forgeGui: $ForgeGui$Type, graphics: $GuiGraphics$Type, partialTicks: float, width: integer, height: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $QuiverArrowSelectGuiImpl$Type = ($QuiverArrowSelectGuiImpl);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $QuiverArrowSelectGuiImpl_ = $QuiverArrowSelectGuiImpl$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/hourglass/$HourglassTimeData" {
import {$HolderSet, $HolderSet$Type} from "packages/net/minecraft/core/$HolderSet"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Holder, $Holder$Type} from "packages/net/minecraft/core/$Holder"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$Stream, $Stream$Type} from "packages/java/util/stream/$Stream"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Codec, $Codec$Type} from "packages/com/mojang/serialization/$Codec"

export class $HourglassTimeData extends $Record {
static readonly "EMPTY": $HourglassTimeData
static readonly "CODEC": $Codec<($HourglassTimeData)>
static readonly "NETWORK_CODEC": $Codec<($HourglassTimeData)>

constructor(dusts: $HolderSet$Type<($Item$Type)>, duration: integer, light: integer, texture: $Optional$Type<($ResourceLocation$Type)>, ordering: integer)

public "equals"(o: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "isEmpty"(): boolean
public "duration"(): integer
public "light"(): integer
public "getIncrement"(): float
public "texture"(): $Optional<($ResourceLocation)>
public "ordering"(): integer
public "dusts"(): $HolderSet<($Item)>
public "getItems"(): $Stream<($Holder<($Item)>)>
public "computeTexture"(i: $ItemStack$Type, world: $Level$Type): $ResourceLocation
get "empty"(): boolean
get "increment"(): float
get "items"(): $Stream<($Holder<($Item)>)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $HourglassTimeData$Type = ($HourglassTimeData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $HourglassTimeData_ = $HourglassTimeData$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/blocks/$NetheriteDoorBlock" {
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$EntityBlock, $EntityBlock$Type} from "packages/net/minecraft/world/level/block/$EntityBlock"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$DoorHingeSide, $DoorHingeSide$Type} from "packages/net/minecraft/world/level/block/state/properties/$DoorHingeSide"
import {$DoubleBlockHalf, $DoubleBlockHalf$Type} from "packages/net/minecraft/world/level/block/state/properties/$DoubleBlockHalf"
import {$List, $List$Type} from "packages/java/util/$List"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"
import {$DirectionProperty, $DirectionProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$DirectionProperty"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$EnumProperty, $EnumProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$EnumProperty"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$DoorBlock, $DoorBlock$Type} from "packages/net/minecraft/world/level/block/$DoorBlock"
import {$SoundType, $SoundType$Type} from "packages/net/minecraft/world/level/block/$SoundType"
import {$BlockEntityTicker, $BlockEntityTicker$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityTicker"
import {$GameEventListener, $GameEventListener$Type} from "packages/net/minecraft/world/level/gameevent/$GameEventListener"

export class $NetheriteDoorBlock extends $DoorBlock implements $EntityBlock {
static readonly "FACING": $DirectionProperty
static readonly "OPEN": $BooleanProperty
static readonly "HINGE": $EnumProperty<($DoorHingeSide)>
static readonly "POWERED": $BooleanProperty
static readonly "HALF": $EnumProperty<($DoubleBlockHalf)>
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(builder: $BlockBehaviour$Properties$Type)

public "getStateForPlacement"(context: $BlockPlaceContext$Type): $BlockState
public "appendHoverText"(stack: $ItemStack$Type, worldIn: $BlockGetter$Type, tooltip: $List$Type<($Component$Type)>, flagIn: $TooltipFlag$Type): void
public "getSoundType"(state: $BlockState$Type): $SoundType
public "neighborChanged"(state: $BlockState$Type, worldIn: $Level$Type, pos: $BlockPos$Type, blockIn: $Block$Type, fromPos: $BlockPos$Type, isMoving: boolean): void
public "use"(state: $BlockState$Type, level: $Level$Type, pos: $BlockPos$Type, player: $Player$Type, handIn: $InteractionHand$Type, hit: $BlockHitResult$Type): $InteractionResult
public "hasTileEntity"(state: $BlockState$Type): boolean
public "newBlockEntity"(pPos: $BlockPos$Type, pState: $BlockState$Type): $BlockEntity
public "getTicker"<T extends $BlockEntity>(arg0: $Level$Type, arg1: $BlockState$Type, arg2: $BlockEntityType$Type<(T)>): $BlockEntityTicker<(T)>
public "getListener"<T extends $BlockEntity>(arg0: $ServerLevel$Type, arg1: T): $GameEventListener
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $NetheriteDoorBlock$Type = ($NetheriteDoorBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $NetheriteDoorBlock_ = $NetheriteDoorBlock$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/network/$ClientBoundSendLoginPacket" {
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Message, $Message$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/network/$Message"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$ChannelHandler$Context, $ChannelHandler$Context$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/network/$ChannelHandler$Context"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $ClientBoundSendLoginPacket implements $Message {
readonly "usernameCache": $Map<($UUID), (string)>

constructor(buf: $FriendlyByteBuf$Type)
constructor(usernameCache: $Map$Type<($UUID$Type), (string)>)

public "handle"(context: $ChannelHandler$Context$Type): void
public "writeToBuffer"(buf: $FriendlyByteBuf$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientBoundSendLoginPacket$Type = ($ClientBoundSendLoginPacket);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientBoundSendLoginPacket_ = $ClientBoundSendLoginPacket$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/items/$SignPostItem" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$UseOnContext, $UseOnContext$Type} from "packages/net/minecraft/world/item/context/$UseOnContext"
import {$WoodBasedItem, $WoodBasedItem$Type} from "packages/net/mehvahdjukaar/moonlight/api/item/$WoodBasedItem"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$WoodType, $WoodType$Type} from "packages/net/mehvahdjukaar/moonlight/api/set/wood/$WoodType"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $SignPostItem extends $WoodBasedItem {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(properties: $Item$Properties$Type, wood: $WoodType$Type)

public "useOn"(context: $UseOnContext$Type): $InteractionResult
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SignPostItem$Type = ($SignPostItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SignPostItem_ = $SignPostItem$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/integration/$ImmediatelyFastCompat" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $ImmediatelyFastCompat {

constructor()

public static "startBatching"(): void
public static "endBatching"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ImmediatelyFastCompat$Type = ($ImmediatelyFastCompat);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ImmediatelyFastCompat_ = $ImmediatelyFastCompat$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/reg/$ModCreativeTabs" {
import {$RegHelper$ItemToTabEvent, $RegHelper$ItemToTabEvent$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/$RegHelper$ItemToTabEvent"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$RegSupplier, $RegSupplier$Type} from "packages/net/mehvahdjukaar/moonlight/api/misc/$RegSupplier"
import {$CreativeModeTab, $CreativeModeTab$Type} from "packages/net/minecraft/world/item/$CreativeModeTab"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export class $ModCreativeTabs {
static readonly "MOD_TAB": $RegSupplier<($CreativeModeTab)>
static readonly "JAR_TAB": $RegSupplier<($CreativeModeTab)>
static readonly "SYNCED_ADD_TO_TABS": $List<($Consumer<($RegHelper$ItemToTabEvent)>)>

constructor()

public static "isHidden"(item: $Item$Type): boolean
public static "init"(): void
public static "setup"(): void
public static "registerItemsToTabs"(e: $RegHelper$ItemToTabEvent$Type): void
public static "getSpikeItems"(): ($ItemStack)[]
get "spikeItems"(): ($ItemStack)[]
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModCreativeTabs$Type = ($ModCreativeTabs);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModCreativeTabs_ = $ModCreativeTabs$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/fluids/forge/$SoftFluidStackImpl" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Holder, $Holder$Type} from "packages/net/minecraft/core/$Holder"
import {$FluidStack, $FluidStack$Type} from "packages/net/minecraftforge/fluids/$FluidStack"
import {$SoftFluidStack, $SoftFluidStack$Type} from "packages/net/mehvahdjukaar/moonlight/api/fluids/$SoftFluidStack"
import {$Codec, $Codec$Type} from "packages/com/mojang/serialization/$Codec"
import {$SoftFluid, $SoftFluid$Type} from "packages/net/mehvahdjukaar/moonlight/api/fluids/$SoftFluid"

export class $SoftFluidStackImpl extends $SoftFluidStack {
static readonly "CODEC": $Codec<($SoftFluidStack)>

constructor(fluid: $Holder$Type<($SoftFluid$Type)>, count: integer, tag: $CompoundTag$Type)

public static "MBtoBottles"(milliBuckets: integer): integer
public static "of"(fluid: $Holder$Type<($SoftFluid$Type)>, count: integer, tag: $CompoundTag$Type): $SoftFluidStack
public static "fromForgeFluid"(fluidStack: $FluidStack$Type): $SoftFluidStack
public "toForgeFluid"(): $FluidStack
public static "toForgeFluid"(softFluid: $SoftFluidStack$Type): $FluidStack
public static "bottlesToMB"(bottles: integer): integer
public "isFluidEqual"(fluidStack: $FluidStack$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SoftFluidStackImpl$Type = ($SoftFluidStackImpl);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SoftFluidStackImpl_ = $SoftFluidStackImpl$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$SafeBlockTile" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$IKeyLockable, $IKeyLockable$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/$IKeyLockable"
import {$IKeyLockable$KeyStatus, $IKeyLockable$KeyStatus$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/$IKeyLockable$KeyStatus"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$AbstractContainerMenu, $AbstractContainerMenu$Type} from "packages/net/minecraft/world/inventory/$AbstractContainerMenu"
import {$IOwnerProtected, $IOwnerProtected$Type} from "packages/net/mehvahdjukaar/moonlight/api/block/$IOwnerProtected"
import {$OpeneableContainerBlockEntity, $OpeneableContainerBlockEntity$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$OpeneableContainerBlockEntity"
import {$LockCode, $LockCode$Type} from "packages/net/minecraft/world/$LockCode"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"

export class $SafeBlockTile extends $OpeneableContainerBlockEntity implements $IOwnerProtected, $IKeyLockable {
static readonly "LOOT_TABLE_TAG": string
static readonly "LOOT_TABLE_SEED_TAG": string
 "lootTable": $ResourceLocation
 "lootTableSeed": long
 "lockKey": $LockCode
 "blockState": $BlockState

constructor(pos: $BlockPos$Type, state: $BlockState$Type)

public "getOwner"(): $UUID
public "setOwner"(owner: $UUID$Type): void
public "handleAction"(player: $Player$Type, handIn: $InteractionHand$Type): boolean
public "canPlayerOpen"(player: $Player$Type, feedbackMessage: boolean): boolean
public "getDisplayName"(): $Component
public "getPassword"(): string
public "canTakeItemThroughFace"(index: integer, stack: $ItemStack$Type, direction: $Direction$Type): boolean
public "canPlaceItemThroughFace"(index: integer, stack: $ItemStack$Type, direction: $Direction$Type): boolean
public "setPassword"(password: string): void
public "load"(tag: $CompoundTag$Type): void
public "m_183515_"(compound: $CompoundTag$Type): void
public "canPlaceItem"(index: integer, stack: $ItemStack$Type): boolean
public "m_6555_"(id: integer, inv: $Inventory$Type): $AbstractContainerMenu
public "canOpen"(player: $Player$Type): boolean
public "clearPassword"(): void
public "isPublic"(): boolean
public "isOwnedBy"(player: $Player$Type): boolean
public "isAccessibleBy"(player: $Player$Type): boolean
public "loadOwner"(tag: $CompoundTag$Type): void
public "saveOwner"(tag: $CompoundTag$Type): void
public "isNotOwnedBy"(player: $Player$Type): boolean
public "testIfHasCorrectKey"(player: $Player$Type, lockPassword: string, feedbackMessage: boolean, translName: string): boolean
public "getKeyStatus"(key: $ItemStack$Type): $IKeyLockable$KeyStatus
public static "getKeyStatus"(key: $ItemStack$Type, password: string): $IKeyLockable$KeyStatus
public "onKeyAssigned"(level: $Level$Type, pos: $BlockPos$Type, player: $Player$Type, newKey: string): void
public "onPasswordCleared"(player: $Player$Type, pos: $BlockPos$Type): void
public static "getKeyPassword"(key: $ItemStack$Type): string
public "shouldShowPassword"(): boolean
public "setChanged"(): void
public static "stillValidBlockEntity"(arg0: $BlockEntity$Type, arg1: $Player$Type, arg2: integer): boolean
public static "stillValidBlockEntity"(arg0: $BlockEntity$Type, arg1: $Player$Type): boolean
public static "tryClear"(arg0: any): void
get "owner"(): $UUID
set "owner"(value: $UUID$Type)
get "displayName"(): $Component
get "password"(): string
set "password"(value: string)
get "public"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SafeBlockTile$Type = ($SafeBlockTile);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SafeBlockTile_ = $SafeBlockTile$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/faucet/$FaucetSource$BlState" {
import {$FaucetSource, $FaucetSource$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/faucet/$FaucetSource"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$FluidOffer, $FluidOffer$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/faucet/$FluidOffer"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export interface $FaucetSource$BlState extends $FaucetSource<($BlockState)> {

 "drain"(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $Direction$Type, arg3: $BlockState$Type, arg4: integer): void
 "getProvidedFluid"(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $Direction$Type, arg3: $BlockState$Type): $FluidOffer
}

export namespace $FaucetSource$BlState {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FaucetSource$BlState$Type = ($FaucetSource$BlState);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FaucetSource$BlState_ = $FaucetSource$BlState$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/renderers/tiles/$SpringLauncherArmBlockTileRenderer" {
import {$SpringLauncherArmBlockTile, $SpringLauncherArmBlockTile$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$SpringLauncherArmBlockTile"
import {$BlockEntityRendererProvider$Context, $BlockEntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/blockentity/$BlockEntityRendererProvider$Context"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$BlockEntityRenderer, $BlockEntityRenderer$Type} from "packages/net/minecraft/client/renderer/blockentity/$BlockEntityRenderer"

export class $SpringLauncherArmBlockTileRenderer implements $BlockEntityRenderer<($SpringLauncherArmBlockTile)> {

constructor(context: $BlockEntityRendererProvider$Context$Type)

public "render"(tile: $SpringLauncherArmBlockTile$Type, partialTicks: float, matrixStackIn: $PoseStack$Type, bufferIn: $MultiBufferSource$Type, combinedLightIn: integer, combinedOverlayIn: integer): void
public "shouldRender"(arg0: $SpringLauncherArmBlockTile$Type, arg1: $Vec3$Type): boolean
public "shouldRenderOffScreen"(arg0: $SpringLauncherArmBlockTile$Type): boolean
public "getViewDistance"(): integer
get "viewDistance"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SpringLauncherArmBlockTileRenderer$Type = ($SpringLauncherArmBlockTileRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SpringLauncherArmBlockTileRenderer_ = $SpringLauncherArmBlockTileRenderer$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/common/block/$FloorCandleSkullBlock" {
import {$IntegerProperty, $IntegerProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$IntegerProperty"
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$IRecolorable, $IRecolorable$Type} from "packages/net/mehvahdjukaar/moonlight/api/block/$IRecolorable"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$ParticleType, $ParticleType$Type} from "packages/net/minecraft/core/particles/$ParticleType"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$Mirror, $Mirror$Type} from "packages/net/minecraft/world/level/block/$Mirror"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$DyeColor, $DyeColor$Type} from "packages/net/minecraft/world/item/$DyeColor"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$Rotation, $Rotation$Type} from "packages/net/minecraft/world/level/block/$Rotation"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$AbstractCandleSkullBlock, $AbstractCandleSkullBlock$Type} from "packages/net/mehvahdjukaar/amendments/common/block/$AbstractCandleSkullBlock"

export class $FloorCandleSkullBlock extends $AbstractCandleSkullBlock implements $IRecolorable {
static readonly "ROTATION": $IntegerProperty
static readonly "CANDLES": $IntegerProperty
static readonly "LIT": $BooleanProperty
static readonly "LIGHT_PER_CANDLE": integer
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(properties: $BlockBehaviour$Properties$Type)
constructor(properties: $BlockBehaviour$Properties$Type, particle: $Supplier$Type<($ParticleType$Type<(any)>)>)

public "tryRecolor"(level: $Level$Type, blockPos: $BlockPos$Type, blockState: $BlockState$Type, dyeColor: $DyeColor$Type): boolean
public "isDefaultColor"(level: $Level$Type, blockPos: $BlockPos$Type, blockState: $BlockState$Type): boolean
public "rotate"(state: $BlockState$Type, rotation: $Rotation$Type): $BlockState
public "mirror"(state: $BlockState$Type, mirror: $Mirror$Type): $BlockState
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FloorCandleSkullBlock$Type = ($FloorCandleSkullBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FloorCandleSkullBlock_ = $FloorCandleSkullBlock$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/core/loot/$OptionalItemPool" {
import {$LootItemFunction, $LootItemFunction$Type} from "packages/net/minecraft/world/level/storage/loot/functions/$LootItemFunction"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$LootContext, $LootContext$Type} from "packages/net/minecraft/world/level/storage/loot/$LootContext"
import {$LootPoolSingletonContainer$Builder, $LootPoolSingletonContainer$Builder$Type} from "packages/net/minecraft/world/level/storage/loot/entries/$LootPoolSingletonContainer$Builder"
import {$LootPoolEntryType, $LootPoolEntryType$Type} from "packages/net/minecraft/world/level/storage/loot/entries/$LootPoolEntryType"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$LootPoolSingletonContainer, $LootPoolSingletonContainer$Type} from "packages/net/minecraft/world/level/storage/loot/entries/$LootPoolSingletonContainer"

export class $OptionalItemPool extends $LootPoolSingletonContainer {
static readonly "DEFAULT_WEIGHT": integer
static readonly "DEFAULT_QUALITY": integer
readonly "weight": integer
readonly "functions": ($LootItemFunction)[]


public "getType"(): $LootPoolEntryType
public "m_6948_"(stackConsumer: $Consumer$Type<($ItemStack$Type)>, lootContext: $LootContext$Type): void
public static "lootTableOptionalItem"(itemRes: string): $LootPoolSingletonContainer$Builder<(any)>
get "type"(): $LootPoolEntryType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $OptionalItemPool$Type = ($OptionalItemPool);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $OptionalItemPool_ = $OptionalItemPool$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/blocks/$TurnTableBlock" {
import {$IntegerProperty, $IntegerProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$IntegerProperty"
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$EntityBlock, $EntityBlock$Type} from "packages/net/minecraft/world/level/block/$EntityBlock"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Mirror, $Mirror$Type} from "packages/net/minecraft/world/level/block/$Mirror"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"
import {$DirectionProperty, $DirectionProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$DirectionProperty"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$Rotation, $Rotation$Type} from "packages/net/minecraft/world/level/block/$Rotation"
import {$BlockEntityTicker, $BlockEntityTicker$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityTicker"
import {$GameEventListener, $GameEventListener$Type} from "packages/net/minecraft/world/level/gameevent/$GameEventListener"

export class $TurnTableBlock extends $Block implements $EntityBlock {
static readonly "FACING": $DirectionProperty
static readonly "POWER": $IntegerProperty
static readonly "INVERTED": $BooleanProperty
static readonly "ROTATING": $BooleanProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(properties: $BlockBehaviour$Properties$Type)

public "getTicker"<T extends $BlockEntity>(pLevel: $Level$Type, pState: $BlockState$Type, pBlockEntityType: $BlockEntityType$Type<(T)>): $BlockEntityTicker<(T)>
public static "getPeriod"(state: $BlockState$Type): integer
public "getStateForPlacement"(context: $BlockPlaceContext$Type): $BlockState
public "setPlacedBy"(world: $Level$Type, pos: $BlockPos$Type, state: $BlockState$Type, placer: $LivingEntity$Type, stack: $ItemStack$Type): void
public "stepOn"(world: $Level$Type, pos: $BlockPos$Type, state: $BlockState$Type, e: $Entity$Type): void
public "updatePower"(state: $BlockState$Type, world: $Level$Type, pos: $BlockPos$Type): boolean
public "neighborChanged"(state: $BlockState$Type, world: $Level$Type, pos: $BlockPos$Type, neighborBlock: $Block$Type, fromPos: $BlockPos$Type, moving: boolean): void
public "triggerEvent"(state: $BlockState$Type, world: $Level$Type, pos: $BlockPos$Type, eventID: integer, eventParam: integer): boolean
public "use"(state: $BlockState$Type, worldIn: $Level$Type, pos: $BlockPos$Type, player: $Player$Type, handIn: $InteractionHand$Type, hit: $BlockHitResult$Type): $InteractionResult
public "rotate"(state: $BlockState$Type, rot: $Rotation$Type): $BlockState
public "mirror"(state: $BlockState$Type, mirrorIn: $Mirror$Type): $BlockState
public "newBlockEntity"(pPos: $BlockPos$Type, pState: $BlockState$Type): $BlockEntity
public "getListener"<T extends $BlockEntity>(arg0: $ServerLevel$Type, arg1: T): $GameEventListener
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TurnTableBlock$Type = ($TurnTableBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TurnTableBlock_ = $TurnTableBlock$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/events/overrides/$ClockItemBehavior" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$ItemUseOverride, $ItemUseOverride$Type} from "packages/net/mehvahdjukaar/supplementaries/common/events/overrides/$ItemUseOverride"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $ClockItemBehavior implements $ItemUseOverride {


public "isEnabled"(): boolean
public "appliesToItem"(item: $Item$Type): boolean
public "tryPerformingAction"(world: $Level$Type, player: $Player$Type, hand: $InteractionHand$Type, stack: $ItemStack$Type, hit: $BlockHitResult$Type): $InteractionResult
public "getTooltip"(): $MutableComponent
get "enabled"(): boolean
get "tooltip"(): $MutableComponent
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClockItemBehavior$Type = ($ClockItemBehavior);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClockItemBehavior_ = $ClockItemBehavior$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$DoormatBlockTile" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$ITextHolderProvider, $ITextHolderProvider$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/$ITextHolderProvider"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$TextHolder, $TextHolder$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/$TextHolder"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$FilteredText, $FilteredText$Type} from "packages/net/minecraft/server/network/$FilteredText"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$List, $List$Type} from "packages/java/util/$List"
import {$LockCode, $LockCode$Type} from "packages/net/minecraft/world/$LockCode"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$ItemDisplayTile, $ItemDisplayTile$Type} from "packages/net/mehvahdjukaar/moonlight/api/block/$ItemDisplayTile"

export class $DoormatBlockTile extends $ItemDisplayTile implements $ITextHolderProvider {
static readonly "MAX_LINES": integer
readonly "textHolder": $TextHolder
static readonly "LOOT_TABLE_TAG": string
static readonly "LOOT_TABLE_SEED_TAG": string
 "lootTable": $ResourceLocation
 "lootTableSeed": long
 "lockKey": $LockCode
 "blockState": $BlockState

constructor(pos: $BlockPos$Type, state: $BlockState$Type)

public "openScreen"(level: $Level$Type, pos: $BlockPos$Type, player: $Player$Type): void
public "getTextHolder"(i: integer): $TextHolder
public "isWaxed"(): boolean
public "setWaxed"(waxed: boolean): void
public "setPlayerWhoMayEdit"(playerWhoMayEdit: $UUID$Type): void
public "getPlayerWhoMayEdit"(): $UUID
public "load"(compound: $CompoundTag$Type): void
public "m_183515_"(tag: $CompoundTag$Type): void
public "getDirection"(): $Direction
public "getAddItemSound"(): $SoundEvent
public "getTextHolder"(): $TextHolder
public "tryOpeningEditGui"(player: $ServerPlayer$Type, pos: $BlockPos$Type): boolean
public "textHoldersCount"(): integer
public "tryAcceptingClientText"(pos: $BlockPos$Type, player: $ServerPlayer$Type, filteredText: $List$Type<($List$Type<($FilteredText$Type)>)>): boolean
public "interactWithTextHolder"(index: integer, level: $Level$Type, pos: $BlockPos$Type, state: $BlockState$Type, player: $Player$Type, hand: $InteractionHand$Type): $InteractionResult
public "tryWash"(level: $Level$Type, pos: $BlockPos$Type, state: $BlockState$Type): boolean
public "playerIsTooFarAwayToEdit"(level: $Level$Type, pos: $BlockPos$Type, uUID: $UUID$Type): boolean
public "shouldUseContainerMenu"(): boolean
public "validatePlayerWhoMayEdit"(level: $Level$Type, pos: $BlockPos$Type): void
public "isOtherPlayerEditing"(player: $Player$Type): boolean
public "tryWaxing"(level: $Level$Type, pos: $BlockPos$Type, player: $Player$Type, hand: $InteractionHand$Type): $InteractionResult
public "openScreen"(level: $Level$Type, pos: $BlockPos$Type, player: $Player$Type, direction: $Direction$Type): void
public "sendOpenGuiPacket"(level: $Level$Type, pos: $BlockPos$Type, player: $Player$Type, hitFace: $Direction$Type): void
public "sendOpenGuiPacket"(level: $Level$Type, pos: $BlockPos$Type, player: $Player$Type): void
public static "stillValidBlockEntity"(arg0: $BlockEntity$Type, arg1: $Player$Type, arg2: integer): boolean
public static "stillValidBlockEntity"(arg0: $BlockEntity$Type, arg1: $Player$Type): boolean
public static "tryClear"(arg0: any): void
get "waxed"(): boolean
set "waxed"(value: boolean)
set "playerWhoMayEdit"(value: $UUID$Type)
get "playerWhoMayEdit"(): $UUID
get "direction"(): $Direction
get "addItemSound"(): $SoundEvent
get "textHolder"(): $TextHolder
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DoormatBlockTile$Type = ($DoormatBlockTile);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DoormatBlockTile_ = $DoormatBlockTile$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/integration/$QuarkClientCompat" {
import {$ClientHelper$BlockEntityRendererEvent, $ClientHelper$BlockEntityRendererEvent$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/$ClientHelper$BlockEntityRendererEvent"

export class $QuarkClientCompat {

constructor()

public static "canRenderBlackboardTooltip"(): boolean
public static "setupClient"(): void
public static "shouldHaveButtonOnRight"(): boolean
public static "initClient"(): void
public static "canRenderQuarkTooltip"(): boolean
public static "registerEntityRenderers"(event: $ClientHelper$BlockEntityRendererEvent$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $QuarkClientCompat$Type = ($QuarkClientCompat);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $QuarkClientCompat_ = $QuarkClientCompat$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$BambooSpikesBlockTile" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ClientboundBlockEntityDataPacket, $ClientboundBlockEntityDataPacket$Type} from "packages/net/minecraft/network/protocol/game/$ClientboundBlockEntityDataPacket"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Potion, $Potion$Type} from "packages/net/minecraft/world/item/alchemy/$Potion"

export class $BambooSpikesBlockTile extends $BlockEntity {
 "potion": $Potion
 "charges": integer
 "lastTicked": long
static readonly "POTION_MULTIPLIER": float
static readonly "MAX_CHARGES": integer
 "blockState": $BlockState

constructor(pos: $BlockPos$Type, state: $BlockState$Type)

public "getUpdatePacket"(): $ClientboundBlockEntityDataPacket
public "makeParticle"(level: $Level$Type): void
public "setMissingCharges"(missing: integer): void
public "getSpikeItem"(): $ItemStack
public "tryApplyPotion"(newPotion: $Potion$Type): boolean
public "getColor"(): integer
public "load"(compound: $CompoundTag$Type): void
public "m_183515_"(compound: $CompoundTag$Type): void
public "isOnCooldown"(world: $Level$Type): boolean
public "hasPotion"(): boolean
public "consumeCharge"(world: $Level$Type): boolean
public "interactWithEntity"(le: $LivingEntity$Type, world: $Level$Type): boolean
public "getUpdateTag"(): $CompoundTag
get "updatePacket"(): $ClientboundBlockEntityDataPacket
set "missingCharges"(value: integer)
get "spikeItem"(): $ItemStack
get "color"(): integer
get "updateTag"(): $CompoundTag
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BambooSpikesBlockTile$Type = ($BambooSpikesBlockTile);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BambooSpikesBlockTile_ = $BambooSpikesBlockTile$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/dynamicpack/$ServerDynamicResourcesGenerator" {
import {$DynamicResourcePack, $DynamicResourcePack$Type} from "packages/net/mehvahdjukaar/moonlight/api/resources/pack/$DynamicResourcePack"
import {$Logger, $Logger$Type} from "packages/org/apache/logging/log4j/$Logger"
import {$DynServerResourcesGenerator, $DynServerResourcesGenerator$Type} from "packages/net/mehvahdjukaar/moonlight/api/resources/pack/$DynServerResourcesGenerator"
import {$ResourceManager, $ResourceManager$Type} from "packages/net/minecraft/server/packs/resources/$ResourceManager"

export class $ServerDynamicResourcesGenerator extends $DynServerResourcesGenerator {
static readonly "INSTANCE": $ServerDynamicResourcesGenerator
readonly "dynamicPack": T

constructor()

public "getLogger"(): $Logger
public static "genAllRecipesAdv"(modId: string): void
public "dependsOnLoadedPacks"(): boolean
public "regenerateDynamicAssets"(manager: $ResourceManager$Type): void
get "logger"(): $Logger
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ServerDynamicResourcesGenerator$Type = ($ServerDynamicResourcesGenerator);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ServerDynamicResourcesGenerator_ = $ServerDynamicResourcesGenerator$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$SignPostBlockTile$Sign" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$TextHolder, $TextHolder$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/$TextHolder"
import {$WoodType, $WoodType$Type} from "packages/net/mehvahdjukaar/moonlight/api/set/wood/$WoodType"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $SignPostBlockTile$Sign {
readonly "text": $TextHolder


public "load"(compound: $CompoundTag$Type, level: $Level$Type, pos: $BlockPos$Type): void
public "save"(): $CompoundTag
public "left"(): boolean
public "active"(): boolean
public "getItem"(): $ItemStack
public "yaw"(): float
public "setActive"(active: boolean): void
public "setLeft"(left: boolean): void
public "woodType"(): $WoodType
public "setWoodType"(woodType: $WoodType$Type): void
public "pointToward"(myPos: $BlockPos$Type, targetPos: $BlockPos$Type): void
public "toggleDirection"(): void
get "item"(): $ItemStack
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SignPostBlockTile$Sign$Type = ($SignPostBlockTile$Sign);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SignPostBlockTile$Sign_ = $SignPostBlockTile$Sign$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/entities/trades/$RandomAdventurerMapListing" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$MerchantOffer, $MerchantOffer$Type} from "packages/net/minecraft/world/item/trading/$MerchantOffer"
import {$ModItemListing, $ModItemListing$Type} from "packages/net/mehvahdjukaar/moonlight/api/trades/$ModItemListing"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Codec, $Codec$Type} from "packages/com/mojang/serialization/$Codec"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $RandomAdventurerMapListing extends $Record implements $ModItemListing {
static readonly "CODEC": $Codec<($RandomAdventurerMapListing)>

constructor(emerald: $Item$Type, priceMin: integer, priceMax: integer, priceSecondary: $ItemStack$Type, maxTrades: integer, priceMult: float, level: integer)

public "equals"(o: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "level"(): integer
public "getLevel"(): integer
public "priceMult"(): float
public "maxTrades"(): integer
public "priceSecondary"(): $ItemStack
public "priceMax"(): integer
public "priceMin"(): integer
public "getOffer"(entity: $Entity$Type, random: $RandomSource$Type): $MerchantOffer
public "emerald"(): $Item
public "getCodec"(): $Codec<(any)>
public "isValid"(): boolean
public static "defaultXp"(buying: boolean, villagerLevel: integer): integer
get "codec"(): $Codec<(any)>
get "valid"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RandomAdventurerMapListing$Type = ($RandomAdventurerMapListing);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RandomAdventurerMapListing_ = $RandomAdventurerMapListing$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/client/renderers/$ToolHookTileRenderer" {
import {$BlockEntityRendererProvider$Context, $BlockEntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/blockentity/$BlockEntityRendererProvider$Context"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$ToolHookBlockTile, $ToolHookBlockTile$Type} from "packages/net/mehvahdjukaar/amendments/common/tile/$ToolHookBlockTile"
import {$BlockEntityRenderer, $BlockEntityRenderer$Type} from "packages/net/minecraft/client/renderer/blockentity/$BlockEntityRenderer"

export class $ToolHookTileRenderer implements $BlockEntityRenderer<($ToolHookBlockTile)> {

constructor(context: $BlockEntityRendererProvider$Context$Type)

public "render"(blockEntity: $ToolHookBlockTile$Type, partialTick: float, poseStack: $PoseStack$Type, bufferSource: $MultiBufferSource$Type, packedLight: integer, packedOverlay: integer): void
public "shouldRender"(blockEntity: $ToolHookBlockTile$Type, cameraPos: $Vec3$Type): boolean
public "shouldRenderOffScreen"(arg0: $ToolHookBlockTile$Type): boolean
public "getViewDistance"(): integer
get "viewDistance"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ToolHookTileRenderer$Type = ($ToolHookTileRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ToolHookTileRenderer_ = $ToolHookTileRenderer$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/dispenser/$EnderPearlBehavior" {
import {$DispenserHelper$AdditionalDispenserBehavior, $DispenserHelper$AdditionalDispenserBehavior$Type} from "packages/net/mehvahdjukaar/moonlight/api/util/$DispenserHelper$AdditionalDispenserBehavior"
import {$BlockSource, $BlockSource$Type} from "packages/net/minecraft/core/$BlockSource"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $EnderPearlBehavior extends $DispenserHelper$AdditionalDispenserBehavior {


public static "bootStrap"(): void
public static "setEntityPokingOutOfBlock"(arg0: $BlockSource$Type, arg1: $Entity$Type, arg2: $Direction$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EnderPearlBehavior$Type = ($EnderPearlBehavior);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EnderPearlBehavior_ = $EnderPearlBehavior$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/misc/map_markers/markers/$NetherPortalMarker" {
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$SimpleMapBlockMarker, $SimpleMapBlockMarker$Type} from "packages/net/mehvahdjukaar/moonlight/api/map/markers/$SimpleMapBlockMarker"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $NetherPortalMarker extends $SimpleMapBlockMarker {
static readonly "HAS_SMALL_TEXTURE_FLAG": integer

constructor()

public static "getFromWorld"(world: $BlockGetter$Type, pos: $BlockPos$Type): $NetherPortalMarker
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $NetherPortalMarker$Type = ($NetherPortalMarker);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $NetherPortalMarker_ = $NetherPortalMarker$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/util/$DispenserHelper$AdditionalDispenserBehavior" {
import {$BlockSource, $BlockSource$Type} from "packages/net/minecraft/core/$BlockSource"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$DispenseItemBehavior, $DispenseItemBehavior$Type} from "packages/net/minecraft/core/dispenser/$DispenseItemBehavior"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $DispenserHelper$AdditionalDispenserBehavior implements $DispenseItemBehavior {


public "dispense"(source: $BlockSource$Type, stack: $ItemStack$Type): $ItemStack
public static "bootStrap"(): void
public static "setEntityPokingOutOfBlock"(arg0: $BlockSource$Type, arg1: $Entity$Type, arg2: $Direction$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DispenserHelper$AdditionalDispenserBehavior$Type = ($DispenserHelper$AdditionalDispenserBehavior);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DispenserHelper$AdditionalDispenserBehavior_ = $DispenserHelper$AdditionalDispenserBehavior$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/fluids/$FiniteLiquidBlock" {
import {$IntegerProperty, $IntegerProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$IntegerProperty"
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$PathComputationType, $PathComputationType$Type} from "packages/net/minecraft/world/level/pathfinder/$PathComputationType"
import {$FluidState, $FluidState$Type} from "packages/net/minecraft/world/level/material/$FluidState"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$BucketPickup, $BucketPickup$Type} from "packages/net/minecraft/world/level/block/$BucketPickup"
import {$List, $List$Type} from "packages/java/util/$List"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$CollisionContext, $CollisionContext$Type} from "packages/net/minecraft/world/phys/shapes/$CollisionContext"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$LootParams$Builder, $LootParams$Builder$Type} from "packages/net/minecraft/world/level/storage/loot/$LootParams$Builder"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$RenderShape, $RenderShape$Type} from "packages/net/minecraft/world/level/block/$RenderShape"

export class $FiniteLiquidBlock extends $Block implements $BucketPickup {
static readonly "STABLE_SHAPE": $VoxelShape
static readonly "LEVEL": $IntegerProperty
readonly "maxLevel": integer
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(supplier: $Supplier$Type<(any)>, arg: $BlockBehaviour$Properties$Type)

public "isRandomlyTicking"(state: $BlockState$Type): boolean
public "propagatesSkylightDown"(state: $BlockState$Type, level: $BlockGetter$Type, pos: $BlockPos$Type): boolean
public "isPathfindable"(state: $BlockState$Type, level: $BlockGetter$Type, pos: $BlockPos$Type, type: $PathComputationType$Type): boolean
public "neighborChanged"(state: $BlockState$Type, level: $Level$Type, pos: $BlockPos$Type, block: $Block$Type, fromPos: $BlockPos$Type, isMoving: boolean): void
public "skipRendering"(state: $BlockState$Type, adjacentBlockState: $BlockState$Type, direction: $Direction$Type): boolean
public "onPlace"(state: $BlockState$Type, level: $Level$Type, pos: $BlockPos$Type, oldState: $BlockState$Type, isMoving: boolean): void
public "updateShape"(state: $BlockState$Type, direction: $Direction$Type, neighborState: $BlockState$Type, level: $LevelAccessor$Type, currentPos: $BlockPos$Type, neighborPos: $BlockPos$Type): $BlockState
public "getRenderShape"(state: $BlockState$Type): $RenderShape
public "getFluidState"(state: $BlockState$Type): $FluidState
public "getDrops"(arg: $BlockState$Type, arg2: $LootParams$Builder$Type): $List<($ItemStack)>
public "getCollisionShape"(state: $BlockState$Type, level: $BlockGetter$Type, pos: $BlockPos$Type, context: $CollisionContext$Type): $VoxelShape
public "randomTick"(state: $BlockState$Type, level: $ServerLevel$Type, pos: $BlockPos$Type, random: $RandomSource$Type): void
public "getShape"(state: $BlockState$Type, level: $BlockGetter$Type, pos: $BlockPos$Type, context: $CollisionContext$Type): $VoxelShape
public "animateTick"(state: $BlockState$Type, level: $Level$Type, pos: $BlockPos$Type, random: $RandomSource$Type): void
public "getPickupSound"(): $Optional<($SoundEvent)>
public "pickupBlock"(level: $LevelAccessor$Type, pos: $BlockPos$Type, state: $BlockState$Type): $ItemStack
public "getPickupSound"(arg0: $BlockState$Type): $Optional<($SoundEvent)>
get "pickupSound"(): $Optional<($SoundEvent)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FiniteLiquidBlock$Type = ($FiniteLiquidBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FiniteLiquidBlock_ = $FiniteLiquidBlock$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/entities/dispenser_minecart/$ILevelEventRedirect" {
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export interface $ILevelEventRedirect {

 "setRedirected"(arg0: boolean, arg1: $Vec3$Type): void

(arg0: boolean, arg1: $Vec3$Type): void
}

export namespace $ILevelEventRedirect {
function tryRedirect(serverLevel: $ILevelEventRedirect$Type, pPlayer: $Player$Type, vec3: $Vec3$Type, pType: integer, pPos: $BlockPos$Type, pData: integer): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ILevelEventRedirect$Type = ($ILevelEventRedirect);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ILevelEventRedirect_ = $ILevelEventRedirect$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/commands/$IUsedToRollTheDice" {
import {$CommandSourceStack, $CommandSourceStack$Type} from "packages/net/minecraft/commands/$CommandSourceStack"
import {$Command, $Command$Type} from "packages/com/mojang/brigadier/$Command"
import {$ArgumentBuilder, $ArgumentBuilder$Type} from "packages/com/mojang/brigadier/builder/$ArgumentBuilder"
import {$CommandDispatcher, $CommandDispatcher$Type} from "packages/com/mojang/brigadier/$CommandDispatcher"
import {$CommandContext, $CommandContext$Type} from "packages/com/mojang/brigadier/context/$CommandContext"

export class $IUsedToRollTheDice implements $Command<($CommandSourceStack)> {

constructor()

public "run"(context: $CommandContext$Type<($CommandSourceStack$Type)>): integer
public static "register"(dispatcher: $CommandDispatcher$Type<($CommandSourceStack$Type)>): $ArgumentBuilder<($CommandSourceStack), (any)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IUsedToRollTheDice$Type = ($IUsedToRollTheDice);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IUsedToRollTheDice_ = $IUsedToRollTheDice$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/network/$ClientBoundPlaySpeakerMessagePacket" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Message, $Message$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/network/$Message"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$ChannelHandler$Context, $ChannelHandler$Context$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/network/$ChannelHandler$Context"
import {$SpeakerBlockTile$Mode, $SpeakerBlockTile$Mode$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$SpeakerBlockTile$Mode"

export class $ClientBoundPlaySpeakerMessagePacket implements $Message {
readonly "message": $Component
readonly "filtered": $Component
readonly "mode": $SpeakerBlockTile$Mode

constructor(buf: $FriendlyByteBuf$Type)
constructor(message: $Component$Type, filtered: $Component$Type, mode: $SpeakerBlockTile$Mode$Type)

public "handle"(context: $ChannelHandler$Context$Type): void
public "writeToBuffer"(buf: $FriendlyByteBuf$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientBoundPlaySpeakerMessagePacket$Type = ($ClientBoundPlaySpeakerMessagePacket);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientBoundPlaySpeakerMessagePacket_ = $ClientBoundPlaySpeakerMessagePacket$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/platform/$RegHelper$LootInjectEvent" {
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export interface $RegHelper$LootInjectEvent {

 "getTable"(): $ResourceLocation
 "addTableReference"(arg0: $ResourceLocation$Type): void
}

export namespace $RegHelper$LootInjectEvent {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RegHelper$LootInjectEvent$Type = ($RegHelper$LootInjectEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RegHelper$LootInjectEvent_ = $RegHelper$LootInjectEvent$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/entities/dispenser_minecart/$MovingDispenserBlockEntity" {
import {$LithiumStackList, $LithiumStackList$Type} from "packages/me/jellysquid/mods/lithium/common/hopper/$LithiumStackList"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$InventoryChangeTracker, $InventoryChangeTracker$Type} from "packages/me/jellysquid/mods/lithium/common/block/entity/inventory_change_tracking/$InventoryChangeTracker"
import {$InventoryChangeListener, $InventoryChangeListener$Type} from "packages/me/jellysquid/mods/lithium/common/block/entity/inventory_change_tracking/$InventoryChangeListener"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$LockCode, $LockCode$Type} from "packages/net/minecraft/world/$LockCode"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$DispenserBlockEntity, $DispenserBlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$DispenserBlockEntity"

export class $MovingDispenserBlockEntity extends $DispenserBlockEntity {
static readonly "CONTAINER_SIZE": integer
static readonly "LOOT_TABLE_TAG": string
static readonly "LOOT_TABLE_SEED_TAG": string
 "lootTable": $ResourceLocation
 "lootTableSeed": long
 "lockKey": $LockCode
 "blockState": $BlockState


public "stillValid"(pPlayer: $Player$Type): boolean
public "stopForwardingMajorInventoryChanges"(arg0: $InventoryChangeListener$Type): void
public "emitFirstComparatorAdded"(): void
public "forwardMajorInventoryChanges"(arg0: $InventoryChangeListener$Type): void
public "emitContentModified"(): void
public "emitStackListReplaced"(): void
public "forwardContentChangeOnce"(arg0: $InventoryChangeListener$Type, arg1: $LithiumStackList$Type, arg2: $InventoryChangeTracker$Type): void
public "emitRemoved"(): void
public "setChanged"(): void
public static "stillValidBlockEntity"(arg0: $BlockEntity$Type, arg1: $Player$Type, arg2: integer): boolean
public static "stillValidBlockEntity"(arg0: $BlockEntity$Type, arg1: $Player$Type): boolean
public static "tryClear"(arg0: any): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MovingDispenserBlockEntity$Type = ($MovingDispenserBlockEntity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MovingDispenserBlockEntity_ = $MovingDispenserBlockEntity$Type;
}}
declare module "packages/net/mehvahdjukaar/modelfix/moonlight_configs/forge/$ConfigBuilderImpl" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$ConfigBuilder, $ConfigBuilder$Type} from "packages/net/mehvahdjukaar/modelfix/moonlight_configs/$ConfigBuilder"
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$ConfigType, $ConfigType$Type} from "packages/net/mehvahdjukaar/modelfix/moonlight_configs/$ConfigType"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $ConfigBuilderImpl extends $ConfigBuilder {
static readonly "STRING_CHECK": $Predicate<(any)>
static readonly "LIST_STRING_CHECK": $Predicate<(any)>
static readonly "COLOR_CHECK": $Predicate<(any)>

constructor(name: $ResourceLocation$Type, type: $ConfigType$Type)

public "comment"(comment: string): $ConfigBuilder
public static "create"(name: $ResourceLocation$Type, type: $ConfigType$Type): $ConfigBuilder
public "defineColor"(name: string, defaultValue: integer): $Supplier<(integer)>
public "defineForgeList"<T>(name: string, defaultValue: $List$Type<(any)>, predicate: $Predicate$Type<(any)>): $Supplier<($List<(any)>)>
public "define"(name: string, defaultValue: string, validator: $Predicate$Type<(any)>): $Supplier<(string)>
public "define"(name: string, defaultValue: boolean): $Supplier<(boolean)>
public "define"(name: string, defaultValue: double, min: double, max: double): $Supplier<(double)>
public "define"<V extends $Enum<(V)>>(name: string, defaultValue: V): $Supplier<(V)>
public "define"<T extends string>(name: string, defaultValue: $List$Type<(any)>, predicate: $Predicate$Type<(any)>): $Supplier<($List<(string)>)>
public "define"(name: string, defaultValue: integer, min: integer, max: integer): $Supplier<(integer)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ConfigBuilderImpl$Type = ($ConfigBuilderImpl);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ConfigBuilderImpl_ = $ConfigBuilderImpl$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/renderers/tiles/$StatueBlockTileRenderer" {
import {$BlockEntityRendererProvider$Context, $BlockEntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/blockentity/$BlockEntityRendererProvider$Context"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$GameProfile, $GameProfile$Type} from "packages/com/mojang/authlib/$GameProfile"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$StatueBlockTile, $StatueBlockTile$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$StatueBlockTile"
import {$BlockEntityRenderer, $BlockEntityRenderer$Type} from "packages/net/minecraft/client/renderer/blockentity/$BlockEntityRenderer"

export class $StatueBlockTileRenderer implements $BlockEntityRenderer<($StatueBlockTile)> {

constructor(context: $BlockEntityRendererProvider$Context$Type)

public "getViewDistance"(): integer
public static "getPlayerSkinAndSlim"(gameProfile: $GameProfile$Type, slimSkinSetter: $Consumer$Type<(boolean)>): $ResourceLocation
public "render"(tile: $StatueBlockTile$Type, partialTicks: float, poseStack: $PoseStack$Type, bufferIn: $MultiBufferSource$Type, combinedLightIn: integer, combinedOverlayIn: integer): void
public static "getPlayerSkin"(gameProfile: $GameProfile$Type): $ResourceLocation
public "shouldRender"(arg0: $StatueBlockTile$Type, arg1: $Vec3$Type): boolean
public "shouldRenderOffScreen"(arg0: $StatueBlockTile$Type): boolean
get "viewDistance"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $StatueBlockTileRenderer$Type = ($StatueBlockTileRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $StatueBlockTileRenderer_ = $StatueBlockTileRenderer$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/map/type/$JsonDecorationType" {
import {$HolderSet, $HolderSet$Type} from "packages/net/minecraft/core/$HolderSet"
import {$SimpleMapBlockMarker, $SimpleMapBlockMarker$Type} from "packages/net/mehvahdjukaar/moonlight/api/map/markers/$SimpleMapBlockMarker"
import {$Structure, $Structure$Type} from "packages/net/minecraft/world/level/levelgen/structure/$Structure"
import {$CustomMapDecoration, $CustomMapDecoration$Type} from "packages/net/mehvahdjukaar/moonlight/api/map/$CustomMapDecoration"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$RuleTest, $RuleTest$Type} from "packages/net/minecraft/world/level/levelgen/structure/templatesystem/$RuleTest"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$MapDecorationType, $MapDecorationType$Type} from "packages/net/mehvahdjukaar/moonlight/api/map/type/$MapDecorationType"
import {$Codec, $Codec$Type} from "packages/com/mojang/serialization/$Codec"

export class $JsonDecorationType implements $MapDecorationType<($CustomMapDecoration), ($SimpleMapBlockMarker)> {
static readonly "CODEC": $Codec<($JsonDecorationType)>
static readonly "NETWORK_CODEC": $Codec<($JsonDecorationType)>

constructor(target: $Optional$Type<($RuleTest$Type)>)
constructor(target: $Optional$Type<($RuleTest$Type)>, name: $Optional$Type<(string)>, rotation: integer, mapColor: integer, structure: $Optional$Type<($HolderSet$Type<($Structure$Type)>)>, enabled: boolean)
constructor(target: $Optional$Type<($RuleTest$Type)>, name: $Optional$Type<(string)>, rotation: integer, mapColor: integer, enabled: boolean)

public "getName"(): $Optional<(string)>
public "getId"(): $ResourceLocation
public "getTarget"(): $Optional<($RuleTest)>
public "getRotation"(): integer
public "getDefaultMapColor"(): integer
public "isFromWorld"(): boolean
public "loadDecorationFromBuffer"(buffer: $FriendlyByteBuf$Type): $CustomMapDecoration
public "getAssociatedStructure"(): $Optional<($HolderSet<($Structure)>)>
public "getCustomFactoryID"(): $ResourceLocation
get "name"(): $Optional<(string)>
get "id"(): $ResourceLocation
get "target"(): $Optional<($RuleTest)>
get "rotation"(): integer
get "defaultMapColor"(): integer
get "fromWorld"(): boolean
get "associatedStructure"(): $Optional<($HolderSet<($Structure)>)>
get "customFactoryID"(): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $JsonDecorationType$Type = ($JsonDecorationType);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $JsonDecorationType_ = $JsonDecorationType$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/item/$IItemDecoratorRenderer" {
import {$Font, $Font$Type} from "packages/net/minecraft/client/gui/$Font"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export interface $IItemDecoratorRenderer {

 "render"(arg0: $GuiGraphics$Type, arg1: $Font$Type, arg2: $ItemStack$Type, arg3: integer, arg4: integer): boolean

(arg0: $GuiGraphics$Type, arg1: $Font$Type, arg2: $ItemStack$Type, arg3: integer, arg4: integer): boolean
}

export namespace $IItemDecoratorRenderer {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IItemDecoratorRenderer$Type = ($IItemDecoratorRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IItemDecoratorRenderer_ = $IItemDecoratorRenderer$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/resources/$BlockTypeResTransformer$TextModification" {
import {$TriFunction, $TriFunction$Type} from "packages/net/mehvahdjukaar/moonlight/api/misc/$TriFunction"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$BlockType, $BlockType$Type} from "packages/net/mehvahdjukaar/moonlight/api/set/$BlockType"

export interface $BlockTypeResTransformer$TextModification<T extends $BlockType> extends $TriFunction<(string), ($ResourceLocation), (T), (string)> {

 "apply"(arg0: string, arg1: $ResourceLocation$Type, arg2: T): string
 "andThen"<W>(after: $Function$Type<(any), (any)>): $TriFunction<(string), ($ResourceLocation), (string), (W)>

(arg0: string, arg1: $ResourceLocation$Type, arg2: T): string
}

export namespace $BlockTypeResTransformer$TextModification {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BlockTypeResTransformer$TextModification$Type<T> = ($BlockTypeResTransformer$TextModification<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BlockTypeResTransformer$TextModification_<T> = $BlockTypeResTransformer$TextModification$Type<(T)>;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/item/$IHideable" {
import {$FeatureElement, $FeatureElement$Type} from "packages/net/minecraft/world/flag/$FeatureElement"
import {$ItemLike, $ItemLike$Type} from "packages/net/minecraft/world/level/$ItemLike"
import {$FeatureFlagSet, $FeatureFlagSet$Type} from "packages/net/minecraft/world/flag/$FeatureFlagSet"

/**
 * 
 * @deprecated
 */
export interface $IHideable extends $FeatureElement {

 "isHidden"(): boolean
 "isEnabled"(arg0: $FeatureFlagSet$Type): boolean
 "requiredFeatures"(): $FeatureFlagSet
}

export namespace $IHideable {
function isHidden(itemLike: $ItemLike$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IHideable$Type = ($IHideable);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IHideable_ = $IHideable$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/items/$PancakeItem" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$RecordItem, $RecordItem$Type} from "packages/net/minecraft/world/item/$RecordItem"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$UseOnContext, $UseOnContext$Type} from "packages/net/minecraft/world/item/context/$UseOnContext"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $PancakeItem extends $RecordItem {
/**
 * 
 * @deprecated
 */
static readonly "BY_NAME": $Map<($SoundEvent), ($RecordItem)>
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(i: integer, soundEvent: $SoundEvent$Type, properties: $Item$Properties$Type, seconds: integer)

public "getDescriptionId"(): string
public "useOn"(context: $UseOnContext$Type): $InteractionResult
public "appendHoverText"(stack: $ItemStack$Type, level: $Level$Type, tooltipComponents: $List$Type<($Component$Type)>, isAdvanced: $TooltipFlag$Type): void
get "descriptionId"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PancakeItem$Type = ($PancakeItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PancakeItem_ = $PancakeItem$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/commands/$RecordSongCommand" {
import {$CommandSourceStack, $CommandSourceStack$Type} from "packages/net/minecraft/commands/$CommandSourceStack"
import {$ArgumentBuilder, $ArgumentBuilder$Type} from "packages/com/mojang/brigadier/builder/$ArgumentBuilder"
import {$CommandDispatcher, $CommandDispatcher$Type} from "packages/com/mojang/brigadier/$CommandDispatcher"

export class $RecordSongCommand {

constructor()

public static "register"(dispatcher: $CommandDispatcher$Type<($CommandSourceStack$Type)>): $ArgumentBuilder<($CommandSourceStack), (any)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RecordSongCommand$Type = ($RecordSongCommand);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RecordSongCommand_ = $RecordSongCommand$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/client/colors/$MimicBlockColor" {
import {$BlockColor, $BlockColor$Type} from "packages/net/minecraft/client/color/block/$BlockColor"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockAndTintGetter, $BlockAndTintGetter$Type} from "packages/net/minecraft/world/level/$BlockAndTintGetter"

export class $MimicBlockColor implements $BlockColor {

constructor()

public static "col"(state: $BlockState$Type, level: $BlockAndTintGetter$Type, pos: $BlockPos$Type, tint: integer): integer
public "getColor"(state: $BlockState$Type, world: $BlockAndTintGetter$Type, pos: $BlockPos$Type, tint: integer): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MimicBlockColor$Type = ($MimicBlockColor);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MimicBlockColor_ = $MimicBlockColor$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/events/overrides/$ThrowableBricksBehavior" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$ItemUseOverride, $ItemUseOverride$Type} from "packages/net/mehvahdjukaar/supplementaries/common/events/overrides/$ItemUseOverride"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $ThrowableBricksBehavior implements $ItemUseOverride {


public "isEnabled"(): boolean
public "getTooltip"(): $MutableComponent
public "appliesToItem"(item: $Item$Type): boolean
public "tryPerformingAction"(world: $Level$Type, player: $Player$Type, hand: $InteractionHand$Type, stack: $ItemStack$Type, hit: $BlockHitResult$Type): $InteractionResult
get "enabled"(): boolean
get "tooltip"(): $MutableComponent
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ThrowableBricksBehavior$Type = ($ThrowableBricksBehavior);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ThrowableBricksBehavior_ = $ThrowableBricksBehavior$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/reg/$ModRecipes" {
import {$RecipeSerializer, $RecipeSerializer$Type} from "packages/net/minecraft/world/item/crafting/$RecipeSerializer"
import {$WeatheredMapRecipe, $WeatheredMapRecipe$Type} from "packages/net/mehvahdjukaar/supplementaries/common/items/crafting/$WeatheredMapRecipe"
import {$PresentDyeRecipe, $PresentDyeRecipe$Type} from "packages/net/mehvahdjukaar/supplementaries/common/items/crafting/$PresentDyeRecipe"
import {$RopeArrowAddRecipe, $RopeArrowAddRecipe$Type} from "packages/net/mehvahdjukaar/supplementaries/common/items/crafting/$RopeArrowAddRecipe"
import {$FlagFromBannerRecipe, $FlagFromBannerRecipe$Type} from "packages/net/mehvahdjukaar/supplementaries/common/items/crafting/$FlagFromBannerRecipe"
import {$SoapClearRecipe, $SoapClearRecipe$Type} from "packages/net/mehvahdjukaar/supplementaries/common/items/crafting/$SoapClearRecipe"
import {$TatteredBookRecipe, $TatteredBookRecipe$Type} from "packages/net/mehvahdjukaar/supplementaries/common/items/crafting/$TatteredBookRecipe"
import {$RopeArrowCreateRecipe, $RopeArrowCreateRecipe$Type} from "packages/net/mehvahdjukaar/supplementaries/common/items/crafting/$RopeArrowCreateRecipe"
import {$RepairBubbleBlowerRecipe, $RepairBubbleBlowerRecipe$Type} from "packages/net/mehvahdjukaar/supplementaries/common/items/crafting/$RepairBubbleBlowerRecipe"
import {$TrappedPresentRecipe, $TrappedPresentRecipe$Type} from "packages/net/mehvahdjukaar/supplementaries/common/items/crafting/$TrappedPresentRecipe"
import {$BlackboardDuplicateRecipe, $BlackboardDuplicateRecipe$Type} from "packages/net/mehvahdjukaar/supplementaries/common/items/crafting/$BlackboardDuplicateRecipe"
import {$ItemLoreRecipe, $ItemLoreRecipe$Type} from "packages/net/mehvahdjukaar/supplementaries/common/items/crafting/$ItemLoreRecipe"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$TippedBambooSpikesRecipe, $TippedBambooSpikesRecipe$Type} from "packages/net/mehvahdjukaar/supplementaries/common/items/crafting/$TippedBambooSpikesRecipe"

export class $ModRecipes {
static readonly "BLACKBOARD_DUPLICATE": $Supplier<($RecipeSerializer<($BlackboardDuplicateRecipe)>)>
static readonly "BAMBOO_SPIKES_TIPPED": $Supplier<($RecipeSerializer<($TippedBambooSpikesRecipe)>)>
static readonly "ROPE_ARROW_CREATE": $Supplier<($RecipeSerializer<($RopeArrowCreateRecipe)>)>
static readonly "ROPE_ARROW_ADD": $Supplier<($RecipeSerializer<($RopeArrowAddRecipe)>)>
static readonly "BUBBLE_BLOWER_REPAIR": $Supplier<($RecipeSerializer<($RepairBubbleBlowerRecipe)>)>
static readonly "FLAG_FROM_BANNER": $Supplier<($RecipeSerializer<($FlagFromBannerRecipe)>)>
static readonly "ANTIQUE_MAP": $Supplier<($RecipeSerializer<($WeatheredMapRecipe)>)>
static readonly "ANTIQUE_BOOK": $Supplier<($RecipeSerializer<($TatteredBookRecipe)>)>
static readonly "SOAP_CLEARING": $Supplier<($RecipeSerializer<($SoapClearRecipe)>)>
static readonly "PRESENT_DYE": $Supplier<($RecipeSerializer<($PresentDyeRecipe)>)>
static readonly "TRAPPED_PRESENT": $Supplier<($RecipeSerializer<($TrappedPresentRecipe)>)>
static readonly "ITEM_LORE": $Supplier<($RecipeSerializer<($ItemLoreRecipe)>)>

constructor()

public static "init"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModRecipes$Type = ($ModRecipes);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModRecipes_ = $ModRecipes$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/integration/configured/$CustomConfigSelectScreen" {
import {$FormattedCharSequence, $FormattedCharSequence$Type} from "packages/net/minecraft/util/$FormattedCharSequence"
import {$ConfigSpec, $ConfigSpec$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/configs/$ConfigSpec"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$IModConfig, $IModConfig$Type} from "packages/com/mrcrayfish/configured/api/$IModConfig"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$CustomConfigScreen, $CustomConfigScreen$Type} from "packages/net/mehvahdjukaar/moonlight/api/integration/configured/$CustomConfigScreen"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$ModConfigSelectionScreen, $ModConfigSelectionScreen$Type} from "packages/com/mrcrayfish/configured/client/screen/$ModConfigSelectionScreen"
import {$BiFunction, $BiFunction$Type} from "packages/java/util/function/$BiFunction"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ConfigType, $ConfigType$Type} from "packages/com/mrcrayfish/configured/api/$ConfigType"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $CustomConfigSelectScreen extends $ModConfigSelectionScreen {
static readonly "MISC_ICONS": $ResourceLocation
static readonly "CONFIGURED_LOGO": $ResourceLocation
 "tooltipText": $List<($FormattedCharSequence)>
 "tooltipOutlineColour": integer
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering

constructor(modId: string, mainIcon: $ItemStack$Type, displayName: string, background: $ResourceLocation$Type, parent: $Screen$Type, configScreenFactory: $BiFunction$Type<($CustomConfigSelectScreen$Type), ($IModConfig$Type), ($CustomConfigScreen$Type)>, ...specs: ($ConfigSpec$Type)[])
constructor(modId: string, mainIcon: $ItemStack$Type, displayName: string, background: $ResourceLocation$Type, parent: $Screen$Type, configScreenFactory: $BiFunction$Type<($CustomConfigSelectScreen$Type), ($IModConfig$Type), ($CustomConfigScreen$Type)>, configMap: $Map$Type<($ConfigType$Type), ($Set$Type<($IModConfig$Type)>)>)

public "render"(graphics: $GuiGraphics$Type, mouseX: integer, mouseY: integer, partialTicks: float): void
public "mouseClicked"(mouseX: double, mouseY: double, button: integer): boolean
public "getBackgroundTexture"(): $ResourceLocation
public "getMainIcon"(): $ItemStack
public static "ensureNotNull"(background: $ResourceLocation$Type): $ResourceLocation
public static "registerConfigScreen"(modId: string, screenSelectFactory: $Function$Type<($Screen$Type), ($CustomConfigSelectScreen$Type)>): void
public "getModId"(): string
public static "loadTexture"(arg0: any, arg1: $ResourceLocation$Type): $ResourceLocation
get "backgroundTexture"(): $ResourceLocation
get "mainIcon"(): $ItemStack
get "modId"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CustomConfigSelectScreen$Type = ($CustomConfigSelectScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CustomConfigSelectScreen_ = $CustomConfigSelectScreen$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/client/model/forge/$GeometryWrapper" {
import {$Material, $Material$Type} from "packages/net/minecraft/client/resources/model/$Material"
import {$ModelBaker, $ModelBaker$Type} from "packages/net/minecraft/client/resources/model/$ModelBaker"
import {$ModelState, $ModelState$Type} from "packages/net/minecraft/client/resources/model/$ModelState"
import {$IGeometryBakingContext, $IGeometryBakingContext$Type} from "packages/net/minecraftforge/client/model/geometry/$IGeometryBakingContext"
import {$IUnbakedGeometry, $IUnbakedGeometry$Type} from "packages/net/minecraftforge/client/model/geometry/$IUnbakedGeometry"
import {$BakedModel, $BakedModel$Type} from "packages/net/minecraft/client/resources/model/$BakedModel"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$CustomGeometry, $CustomGeometry$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$CustomGeometry"
import {$ItemOverrides, $ItemOverrides$Type} from "packages/net/minecraft/client/renderer/block/model/$ItemOverrides"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$UnbakedModel, $UnbakedModel$Type} from "packages/net/minecraft/client/resources/model/$UnbakedModel"
import {$TextureAtlasSprite, $TextureAtlasSprite$Type} from "packages/net/minecraft/client/renderer/texture/$TextureAtlasSprite"

export class $GeometryWrapper implements $IUnbakedGeometry<($GeometryWrapper)> {

constructor(owner: $CustomGeometry$Type)

public "bake"(iGeometryBakingContext: $IGeometryBakingContext$Type, bakery: $ModelBaker$Type, spriteGetter: $Function$Type<($Material$Type), ($TextureAtlasSprite$Type)>, modelState: $ModelState$Type, itemOverrides: $ItemOverrides$Type, modelLocation: $ResourceLocation$Type): $BakedModel
public "getConfigurableComponentNames"(): $Set<(string)>
public "resolveParents"(arg0: $Function$Type<($ResourceLocation$Type), ($UnbakedModel$Type)>, arg1: $IGeometryBakingContext$Type): void
get "configurableComponentNames"(): $Set<(string)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GeometryWrapper$Type = ($GeometryWrapper);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GeometryWrapper_ = $GeometryWrapper$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/block/$IBlockHolder" {
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"

export interface $IBlockHolder {

 "getHeldBlock"(): $BlockState
 "getHeldBlock"(arg0: integer): $BlockState
 "setHeldBlock"(arg0: $BlockState$Type, arg1: integer): boolean
 "setHeldBlock"(state: $BlockState$Type): boolean
}

export namespace $IBlockHolder {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IBlockHolder$Type = ($IBlockHolder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IBlockHolder_ = $IBlockHolder$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/items/$CageItem" {
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$ICustomItemRendererProvider, $ICustomItemRendererProvider$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/$ICustomItemRendererProvider"
import {$AbstractMobContainerItem, $AbstractMobContainerItem$Type} from "packages/net/mehvahdjukaar/supplementaries/common/items/$AbstractMobContainerItem"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$ItemStackRenderer, $ItemStackRenderer$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/$ItemStackRenderer"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$AdditionalItemPlacement, $AdditionalItemPlacement$Type} from "packages/net/mehvahdjukaar/moonlight/api/item/additional_placements/$AdditionalItemPlacement"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $CageItem extends $AbstractMobContainerItem implements $ICustomItemRendererProvider {
static readonly "BLOCK_ENTITY_TAG": string
static readonly "BLOCK_STATE_TAG": string
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(block: $Block$Type, properties: $Item$Properties$Type)

public "canItemCatch"(e: $Entity$Type): boolean
public "playReleaseSound"(world: $Level$Type, v: $Vec3$Type): void
public "playCatchSound"(player: $Player$Type): void
public "playFailSound"(player: $Player$Type): void
public "getRendererFactory"(): $Supplier<($ItemStackRenderer)>
/**
 * 
 * @deprecated
 */
public "registerFabricRenderer"(): void
public "asItem"(): $Item
public "moonlight$addAdditionalBehavior"(arg0: $AdditionalItemPlacement$Type): void
public "moonlight$getAdditionalBehavior"(): $AdditionalItemPlacement
public "moonlight$getClientAnimationExtension"(): any
public "moonlight$setClientAnimationExtension"(arg0: any): void
get "rendererFactory"(): $Supplier<($ItemStackRenderer)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CageItem$Type = ($CageItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CageItem_ = $CageItem$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/integration/quark/$TaterInAJarBlock" {
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$List, $List$Type} from "packages/java/util/$List"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"
import {$DirectionProperty, $DirectionProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$DirectionProperty"
import {$TinyPotatoBlock, $TinyPotatoBlock$Type} from "packages/org/violetmoon/quark/addons/oddities/block/$TinyPotatoBlock"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$CollisionContext, $CollisionContext$Type} from "packages/net/minecraft/world/phys/shapes/$CollisionContext"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$LootParams$Builder, $LootParams$Builder$Type} from "packages/net/minecraft/world/level/storage/loot/$LootParams$Builder"
import {$SoundType, $SoundType$Type} from "packages/net/minecraft/world/level/block/$SoundType"
import {$Rotation, $Rotation$Type} from "packages/net/minecraft/world/level/block/$Rotation"
import {$BlockEntityTicker, $BlockEntityTicker$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityTicker"
import {$RenderShape, $RenderShape$Type} from "packages/net/minecraft/world/level/block/$RenderShape"

export class $TaterInAJarBlock extends $TinyPotatoBlock {
static readonly "HORIZONTAL_FACING": $DirectionProperty
static readonly "WATERLOGGED": $BooleanProperty
static readonly "ANGRY": string
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor()

public "getTicker"<T extends $BlockEntity>(pLevel: $Level$Type, pState: $BlockState$Type, pBlockEntityType: $BlockEntityType$Type<(T)>): $BlockEntityTicker<(T)>
public "getStateForPlacement"(ctx: $BlockPlaceContext$Type): $BlockState
public "getSoundType"(state: $BlockState$Type): $SoundType
public "use"(state: $BlockState$Type, world: $Level$Type, pos: $BlockPos$Type, player: $Player$Type, hand: $InteractionHand$Type, hit: $BlockHitResult$Type): $InteractionResult
public "getRenderShape"(state: $BlockState$Type): $RenderShape
public "rotate"(state: $BlockState$Type, rotation: $Rotation$Type): $BlockState
public "getDrops"(state: $BlockState$Type, builder: $LootParams$Builder$Type): $List<($ItemStack)>
public "getShape"(state: $BlockState$Type, world: $BlockGetter$Type, pos: $BlockPos$Type, ctx: $CollisionContext$Type): $VoxelShape
public "newBlockEntity"(pos: $BlockPos$Type, state: $BlockState$Type): $BlockEntity
public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TaterInAJarBlock$Type = ($TaterInAJarBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TaterInAJarBlock_ = $TaterInAJarBlock$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/util/math/colors/$BaseColor" {
import {$HCLColor, $HCLColor$Type} from "packages/net/mehvahdjukaar/moonlight/api/util/math/colors/$HCLColor"
import {$RGBColor, $RGBColor$Type} from "packages/net/mehvahdjukaar/moonlight/api/util/math/colors/$RGBColor"
import {$LUVColor, $LUVColor$Type} from "packages/net/mehvahdjukaar/moonlight/api/util/math/colors/$LUVColor"
import {$LABColor, $LABColor$Type} from "packages/net/mehvahdjukaar/moonlight/api/util/math/colors/$LABColor"
import {$HSVColor, $HSVColor$Type} from "packages/net/mehvahdjukaar/moonlight/api/util/math/colors/$HSVColor"
import {$HCLVColor, $HCLVColor$Type} from "packages/net/mehvahdjukaar/moonlight/api/util/math/colors/$HCLVColor"
import {$List, $List$Type} from "packages/java/util/$List"
import {$XYZColor, $XYZColor$Type} from "packages/net/mehvahdjukaar/moonlight/api/util/math/colors/$XYZColor"
import {$Codec, $Codec$Type} from "packages/com/mojang/serialization/$Codec"
import {$HSLColor, $HSLColor$Type} from "packages/net/mehvahdjukaar/moonlight/api/util/math/colors/$HSLColor"

export class $BaseColor<T extends $BaseColor<(T)>> {
/**
 * 
 * @deprecated
 */
static readonly "CODEC": $Codec<(integer)>


public "multiply"(arg0: float, arg1: float, arg2: float, arg3: float): T
public "asHSL"(): $HSLColor
public "asLAB"(): $LABColor
public "distTo"(other: T): float
public "mixWith"(color: T): T
public "mixWith"(color: T, bias: float): T
public "asHCL"(): $HCLColor
public "asRGB"(): $RGBColor
public "fromRGB"(arg0: $RGBColor$Type): T
public "asXYZ"(): $XYZColor
public "asHSV"(): $HSVColor
public "asHCLV"(): $HCLVColor
public "asLUV"(): $LUVColor
public static "mixColors"<C extends $BaseColor<(C)>>(colors: $List$Type<(C)>): C
public static "mixColors"<C extends $BaseColor<(C)>>(...colors: (C)[]): C
public static "weightedAverageAngles"(a: float, b: float, bias: float): float
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BaseColor$Type<T> = ($BaseColor<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BaseColor_<T> = $BaseColor$Type<(T)>;
}}
declare module "packages/net/mehvahdjukaar/amendments/client/renderers/$TorchRendererExtension" {
import {$AbstractClientPlayer, $AbstractClientPlayer$Type} from "packages/net/minecraft/client/player/$AbstractClientPlayer"
import {$HeadedModel, $HeadedModel$Type} from "packages/net/minecraft/client/model/$HeadedModel"
import {$HumanoidArm, $HumanoidArm$Type} from "packages/net/minecraft/world/entity/$HumanoidArm"
import {$HumanoidModel, $HumanoidModel$Type} from "packages/net/minecraft/client/model/$HumanoidModel"
import {$ItemInHandRenderer, $ItemInHandRenderer$Type} from "packages/net/minecraft/client/renderer/$ItemInHandRenderer"
import {$IFirstPersonSpecialItemRenderer, $IFirstPersonSpecialItemRenderer$Type} from "packages/net/mehvahdjukaar/moonlight/api/item/$IFirstPersonSpecialItemRenderer"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$ArmedModel, $ArmedModel$Type} from "packages/net/minecraft/client/model/$ArmedModel"
import {$EntityModel, $EntityModel$Type} from "packages/net/minecraft/client/model/$EntityModel"
import {$IThirdPersonAnimationProvider, $IThirdPersonAnimationProvider$Type} from "packages/net/mehvahdjukaar/moonlight/api/item/$IThirdPersonAnimationProvider"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$IThirdPersonSpecialItemRenderer, $IThirdPersonSpecialItemRenderer$Type} from "packages/net/mehvahdjukaar/moonlight/api/item/$IThirdPersonSpecialItemRenderer"

export class $TorchRendererExtension implements $IThirdPersonAnimationProvider, $IThirdPersonSpecialItemRenderer, $IFirstPersonSpecialItemRenderer {

constructor()

public "renderThirdPersonItem"<T extends $Player, M extends ($EntityModel<(T)>) & ($ArmedModel) & ($HeadedModel)>(parentModel: M, entity: $LivingEntity$Type, stack: $ItemStack$Type, humanoidArm: $HumanoidArm$Type, poseStack: $PoseStack$Type, bufferSource: $MultiBufferSource$Type, light: integer): void
public "renderFirstPersonItem"(player: $AbstractClientPlayer$Type, stack: $ItemStack$Type, hand: $InteractionHand$Type, arm: $HumanoidArm$Type, poseStack: $PoseStack$Type, partialTicks: float, pitch: float, attackAnim: float, equipAnim: float, buffer: $MultiBufferSource$Type, light: integer, renderer: $ItemInHandRenderer$Type): boolean
public "poseLeftArm"<T extends $LivingEntity>(itemStack: $ItemStack$Type, model: $HumanoidModel$Type<(T)>, t: T, arm: $HumanoidArm$Type): boolean
public "poseRightArm"<T extends $LivingEntity>(itemStack: $ItemStack$Type, model: $HumanoidModel$Type<(T)>, t: T, arm: $HumanoidArm$Type): boolean
public static "get"(target: $Item$Type): $IThirdPersonAnimationProvider
public static "attachToItem"(target: $Item$Type, object: $IThirdPersonAnimationProvider$Type): void
public "isTwoHanded"(): boolean
public static "attachToItem"(target: $Item$Type, object: $IThirdPersonSpecialItemRenderer$Type): void
public static "attachToItem"(target: $Item$Type, object: $IFirstPersonSpecialItemRenderer$Type): void
get "twoHanded"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TorchRendererExtension$Type = ($TorchRendererExtension);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TorchRendererExtension_ = $TorchRendererExtension$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/blocks/$TrappedPresentBlock" {
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$IPresentItemBehavior, $IPresentItemBehavior$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/present/$IPresentItemBehavior"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Mirror, $Mirror$Type} from "packages/net/minecraft/world/level/block/$Mirror"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$DyeColor, $DyeColor$Type} from "packages/net/minecraft/world/item/$DyeColor"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$Rotation, $Rotation$Type} from "packages/net/minecraft/world/level/block/$Rotation"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$ItemLike, $ItemLike$Type} from "packages/net/minecraft/world/level/$ItemLike"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$DirectionProperty, $DirectionProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$DirectionProperty"
import {$AbstractPresentBlock, $AbstractPresentBlock$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/blocks/$AbstractPresentBlock"

export class $TrappedPresentBlock extends $AbstractPresentBlock {
static readonly "FACING": $DirectionProperty
static readonly "ON_COOLDOWN": $BooleanProperty
static readonly "SHAPE_LID": $VoxelShape
static readonly "SHAPE_OPEN": $VoxelShape
static readonly "SHAPE_CLOSED": $VoxelShape
static readonly "PACKED": $BooleanProperty
static readonly "WATERLOGGED": $BooleanProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(color: $DyeColor$Type, properties: $BlockBehaviour$Properties$Type)

public static "registerBehavior"(pItem: $ItemLike$Type, pBehavior: $IPresentItemBehavior$Type): void
public static "getPresentBehavior"(pStack: $ItemStack$Type): $IPresentItemBehavior
public "neighborChanged"(state: $BlockState$Type, world: $Level$Type, pos: $BlockPos$Type, block: $Block$Type, fromPos: $BlockPos$Type, isMoving: boolean): void
public "triggerEvent"(pState: $BlockState$Type, pLevel: $Level$Type, pPos: $BlockPos$Type, pId: integer, pParam: integer): boolean
public "rotate"(state: $BlockState$Type, rot: $Rotation$Type): $BlockState
public "mirror"(state: $BlockState$Type, mirrorIn: $Mirror$Type): $BlockState
public "tick"(state: $BlockState$Type, level: $ServerLevel$Type, pos: $BlockPos$Type, random: $RandomSource$Type): void
public "newBlockEntity"(pPos: $BlockPos$Type, pState: $BlockState$Type): $BlockEntity
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TrappedPresentBlock$Type = ($TrappedPresentBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TrappedPresentBlock_ = $TrappedPresentBlock$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/core/misc/$VillagerBrainEventInternal" {
import {$Villager, $Villager$Type} from "packages/net/minecraft/world/entity/npc/$Villager"
import {$SensorType, $SensorType$Type} from "packages/net/minecraft/world/entity/ai/sensing/$SensorType"
import {$Activity, $Activity$Type} from "packages/net/minecraft/world/entity/schedule/$Activity"
import {$ImmutableList, $ImmutableList$Type} from "packages/com/google/common/collect/$ImmutableList"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$Pair, $Pair$Type} from "packages/com/mojang/datafixers/util/$Pair"
import {$MemoryModuleType, $MemoryModuleType$Type} from "packages/net/minecraft/world/entity/ai/memory/$MemoryModuleType"
import {$Brain, $Brain$Type} from "packages/net/minecraft/world/entity/ai/$Brain"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $VillagerBrainEventInternal {

constructor(brain: $Brain$Type<($Villager$Type)>, villager: $Villager$Type)

public "addOrReplaceActivity"(activity: $Activity$Type, activityPackage: $ImmutableList$Type<(any)>): void
public "getMemories"(): $Map<($MemoryModuleType<(any)>), ($Optional<(any)>)>
public "getVillager"(): $Villager
public "scheduleActivity"(activity: $Activity$Type, startTime: integer, endTime: integer): void
public "addTaskToActivity"<P extends $Pair<(integer), (any)>>(activity: $Activity$Type, task: P): boolean
public "addSensor"(newSensor: $SensorType$Type<(any)>): void
get "memories"(): $Map<($MemoryModuleType<(any)>), ($Optional<(any)>)>
get "villager"(): $Villager
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $VillagerBrainEventInternal$Type = ($VillagerBrainEventInternal);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $VillagerBrainEventInternal_ = $VillagerBrainEventInternal$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/items/$KeyItem" {
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$UseOnContext, $UseOnContext$Type} from "packages/net/minecraft/world/item/context/$UseOnContext"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$Enchantment, $Enchantment$Type} from "packages/net/minecraft/world/item/enchantment/$Enchantment"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $KeyItem extends $Item {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(properties: $Item$Properties$Type)

public "getPassword"(stack: $ItemStack$Type): string
public "canApplyAtEnchantingTable"(stack: $ItemStack$Type, enchantment: $Enchantment$Type): boolean
public "useOn"(context: $UseOnContext$Type): $InteractionResult
public "isBookEnchantable"(stack: $ItemStack$Type, book: $ItemStack$Type): boolean
public "doesSneakBypassUse"(stack: $ItemStack$Type, world: $LevelReader$Type, pos: $BlockPos$Type, player: $Player$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $KeyItem$Type = ($KeyItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $KeyItem_ = $KeyItem$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/reg/$ModConstants" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $ModConstants {
static readonly "STASIS_NAME": string
static readonly "DISPENSER_MINECART_NAME": string
static readonly "RED_MERCHANT_NAME": string
static readonly "HAT_STAND_NAME": string
static readonly "FALLING_URN_NAME": string
static readonly "FALLING_ASH_NAME": string
static readonly "FALLING_SACK_NAME": string
static readonly "THROWABLE_BRICK_NAME": string
static readonly "BOMB_NAME": string
static readonly "BOMB_BLUE_NAME": string
static readonly "BOMB_SPIKY_NAME": string
static readonly "ROPE_ARROW_NAME": string
static readonly "SLINGSHOT_PROJECTILE_NAME": string
static readonly "BUBBLE_BLOWER_NAME": string
static readonly "SLINGSHOT_NAME": string
static readonly "FLUTE_NAME": string
static readonly "KEY_NAME": string
static readonly "CANDY_NAME": string
static readonly "ANTIQUE_INK_NAME": string
static readonly "WRENCH_NAME": string
static readonly "QUIVER_NAME": string
static readonly "SPEEDOMETER_NAME": string
static readonly "DEPTH_METER_NAME": string
static readonly "SLICE_MAP_NAME": string
static readonly "SIGN_POST_NAME": string
static readonly "FLAG_NAME": string
static readonly "PRESENT_NAME": string
static readonly "TRAPPED_PRESENT_NAME": string
static readonly "PLANTER_NAME": string
static readonly "PEDESTAL_NAME": string
static readonly "NOTICE_BOARD_NAME": string
static readonly "SAFE_NAME": string
static readonly "CAGE_NAME": string
static readonly "JAR_NAME": string
static readonly "SACK_NAME": string
static readonly "BLACKBOARD_NAME": string
static readonly "GLOBE_NAME": string
static readonly "GLOBE_SEPIA_NAME": string
static readonly "SCONCE_NAME": string
static readonly "SCONCE_NAME_SOUL": string
static readonly "SCONCE_NAME_ENDER": string
static readonly "SCONCE_NAME_GLOW": string
static readonly "SCONCE_NAME_GREEN": string
static readonly "SCONCE_NAME_NETHER_BRASS": string
static readonly "ROPE_NAME": string
static readonly "ROPE_KNOT_NAME": string
static readonly "BAMBOO_SPIKES_NAME": string
static readonly "TIPPED_SPIKES_NAME": string
static readonly "GOBLET_NAME": string
static readonly "HOURGLASS_NAME": string
static readonly "ITEM_SHELF_NAME": string
static readonly "DOORMAT_NAME": string
static readonly "MAGMA_CREAM_BLOCK_NAME": string
static readonly "RAKED_GRAVEL_NAME": string
static readonly "COG_BLOCK_NAME": string
static readonly "RELAYER_NAME": string
static readonly "SPRING_LAUNCHER_NAME": string
static readonly "PISTON_LAUNCHER_HEAD_NAME": string
static readonly "PISTON_LAUNCHER_ARM_NAME": string
static readonly "SPEAKER_BLOCK_NAME": string
static readonly "TURN_TABLE_NAME": string
static readonly "REDSTONE_ILLUMINATOR_NAME": string
static readonly "CRYSTAL_DISPLAY_NAME": string
static readonly "PULLEY_BLOCK_NAME": string
static readonly "LOCK_BLOCK_NAME": string
static readonly "BELLOWS_NAME": string
static readonly "CLOCK_BLOCK_NAME": string
static readonly "SCONCE_LEVER_NAME": string
static readonly "CRANK_NAME": string
static readonly "WIND_VANE_NAME": string
static readonly "FAUCET_NAME": string
static readonly "GOLD_DOOR_NAME": string
static readonly "GOLD_TRAPDOOR_NAME": string
static readonly "NETHERITE_DOOR_NAME": string
static readonly "NETHERITE_TRAPDOOR_NAME": string
static readonly "IRON_GATE_NAME": string
static readonly "GOLD_GATE_NAME": string
static readonly "CHECKER_BLOCK_NAME": string
static readonly "CHECKER_SLAB_NAME": string
static readonly "PANCAKE_NAME": string
static readonly "FLAX_NAME": string
static readonly "FLAX_WILD_NAME": string
static readonly "FODDER_NAME": string
static readonly "FLAX_BLOCK_NAME": string
static readonly "JAR_BOAT_NAME": string
static readonly "STRUCTURE_TEMP_NAME": string
static readonly "BLOCK_GENERATOR_NAME": string
static readonly "STICK_NAME": string
static readonly "BLAZE_ROD_NAME": string
static readonly "DAUB_NAME": string
static readonly "WATTLE_AND_DAUB": string
static readonly "DAUB_FRAME_NAME": string
static readonly "DAUB_BRACE_NAME": string
static readonly "DAUB_CROSS_BRACE_NAME": string
static readonly "TIMBER_FRAME_NAME": string
static readonly "TIMBER_BRACE_NAME": string
static readonly "TIMBER_CROSS_BRACE_NAME": string
static readonly "ASH_BRICKS_NAME": string
static readonly "STONE_TILE_NAME": string
static readonly "STONE_LAMP_NAME": string
static readonly "BLACKSTONE_TILE_NAME": string
static readonly "BLACKSTONE_LAMP_NAME": string
static readonly "DEEPSLATE_LAMP_NAME": string
static readonly "END_STONE_LAMP_NAME": string
static readonly "FLOWER_BOX_NAME": string
static readonly "STATUE_NAME": string
static readonly "FEATHER_BLOCK_NAME": string
static readonly "FLINT_BLOCK_NAME": string
static readonly "SUGAR_CUBE_NAME": string
static readonly "GUNPOWDER_BLOCK_NAME": string
static readonly "FIRE_PIT_NAME": string
static readonly "BOOK_PILE_NAME": string
static readonly "BOOK_PILE_H_NAME": string
static readonly "CANNON_NAME": string
static readonly "CANNONBALL_NAME": string
static readonly "BUNTING_NAME": string
static readonly "URN_NAME": string
static readonly "ASH_NAME": string
static readonly "ASH_BRICK_NAME": string
static readonly "SOAP_NAME": string
static readonly "SOAP_BLOCK_NAME": string
static readonly "CANDLE_HOLDER_NAME": string
static readonly "BUBBLE_BLOCK_NAME": string
static readonly "LAPIS_BRICKS_NAME": string
static readonly "ENDERMAN_HEAD_NAME": string

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModConstants$Type = ($ModConstants);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModConstants_ = $ModConstants$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/fluids/$FluidContainerList$Category" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$Codec, $Codec$Type} from "packages/com/mojang/serialization/$Codec"

export class $FluidContainerList$Category {
static readonly "CODEC": $Codec<($FluidContainerList$Category)>


public "isEmpty"(): boolean
public "getCapacity"(): integer
public "getFirstFilled"(): $Optional<($Item)>
public "getFillSound"(): $SoundEvent
public "getAmount"(): integer
public "getFilledItems"(): $List<($Item)>
public "getEmptyContainer"(): $Item
public "getEmptySound"(): $SoundEvent
get "empty"(): boolean
get "capacity"(): integer
get "firstFilled"(): $Optional<($Item)>
get "fillSound"(): $SoundEvent
get "amount"(): integer
get "filledItems"(): $List<($Item)>
get "emptyContainer"(): $Item
get "emptySound"(): $SoundEvent
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FluidContainerList$Category$Type = ($FluidContainerList$Category);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FluidContainerList$Category_ = $FluidContainerList$Category$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/blocks/$HourGlassBlock" {
import {$IntegerProperty, $IntegerProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$IntegerProperty"
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$EntityBlock, $EntityBlock$Type} from "packages/net/minecraft/world/level/block/$EntityBlock"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Mirror, $Mirror$Type} from "packages/net/minecraft/world/level/block/$Mirror"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$WaterBlock, $WaterBlock$Type} from "packages/net/mehvahdjukaar/moonlight/api/block/$WaterBlock"
import {$List, $List$Type} from "packages/java/util/$List"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"
import {$DirectionProperty, $DirectionProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$DirectionProperty"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$CollisionContext, $CollisionContext$Type} from "packages/net/minecraft/world/phys/shapes/$CollisionContext"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$Rotation, $Rotation$Type} from "packages/net/minecraft/world/level/block/$Rotation"
import {$MenuProvider, $MenuProvider$Type} from "packages/net/minecraft/world/$MenuProvider"
import {$BlockEntityTicker, $BlockEntityTicker$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityTicker"
import {$GameEventListener, $GameEventListener$Type} from "packages/net/minecraft/world/level/gameevent/$GameEventListener"
import {$RenderShape, $RenderShape$Type} from "packages/net/minecraft/world/level/block/$RenderShape"

export class $HourGlassBlock extends $WaterBlock implements $EntityBlock {
static readonly "FACING": $DirectionProperty
static readonly "LIGHT_LEVEL": $IntegerProperty
static readonly "WATERLOGGED": $BooleanProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(properties: $BlockBehaviour$Properties$Type)

public "getTicker"<T extends $BlockEntity>(pLevel: $Level$Type, pState: $BlockState$Type, pBlockEntityType: $BlockEntityType$Type<(T)>): $BlockEntityTicker<(T)>
public "getStateForPlacement"(context: $BlockPlaceContext$Type): $BlockState
public "setPlacedBy"(world: $Level$Type, pos: $BlockPos$Type, state: $BlockState$Type, placer: $LivingEntity$Type, stack: $ItemStack$Type): void
public "appendHoverText"(stack: $ItemStack$Type, worldIn: $BlockGetter$Type, tooltip: $List$Type<($Component$Type)>, flagIn: $TooltipFlag$Type): void
public "use"(state: $BlockState$Type, worldIn: $Level$Type, pos: $BlockPos$Type, player: $Player$Type, handIn: $InteractionHand$Type, hit: $BlockHitResult$Type): $InteractionResult
public "getRenderShape"(state: $BlockState$Type): $RenderShape
public "hasAnalogOutputSignal"(state: $BlockState$Type): boolean
public "onRemove"(state: $BlockState$Type, world: $Level$Type, pos: $BlockPos$Type, newState: $BlockState$Type, isMoving: boolean): void
public "rotate"(state: $BlockState$Type, rot: $Rotation$Type): $BlockState
public "mirror"(state: $BlockState$Type, mirrorIn: $Mirror$Type): $BlockState
public "getMenuProvider"(state: $BlockState$Type, worldIn: $Level$Type, pos: $BlockPos$Type): $MenuProvider
public "getAnalogOutputSignal"(blockState: $BlockState$Type, world: $Level$Type, pos: $BlockPos$Type): integer
public "getShape"(state: $BlockState$Type, world: $BlockGetter$Type, pos: $BlockPos$Type, context: $CollisionContext$Type): $VoxelShape
public "newBlockEntity"(pPos: $BlockPos$Type, pState: $BlockState$Type): $BlockEntity
public "getListener"<T extends $BlockEntity>(arg0: $ServerLevel$Type, arg1: T): $GameEventListener
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $HourGlassBlock$Type = ($HourGlassBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $HourGlassBlock_ = $HourGlassBlock$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/misc/$ModSoundType" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$SoundType, $SoundType$Type} from "packages/net/minecraft/world/level/block/$SoundType"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"

export class $ModSoundType extends $SoundType {
static readonly "EMPTY": $SoundType
static readonly "WOOD": $SoundType
static readonly "GRAVEL": $SoundType
static readonly "GRASS": $SoundType
static readonly "LILY_PAD": $SoundType
static readonly "STONE": $SoundType
static readonly "METAL": $SoundType
static readonly "GLASS": $SoundType
static readonly "WOOL": $SoundType
static readonly "SAND": $SoundType
static readonly "SNOW": $SoundType
static readonly "POWDER_SNOW": $SoundType
static readonly "LADDER": $SoundType
static readonly "ANVIL": $SoundType
static readonly "SLIME_BLOCK": $SoundType
static readonly "HONEY_BLOCK": $SoundType
static readonly "WET_GRASS": $SoundType
static readonly "CORAL_BLOCK": $SoundType
static readonly "BAMBOO": $SoundType
static readonly "BAMBOO_SAPLING": $SoundType
static readonly "SCAFFOLDING": $SoundType
static readonly "SWEET_BERRY_BUSH": $SoundType
static readonly "CROP": $SoundType
static readonly "HARD_CROP": $SoundType
static readonly "VINE": $SoundType
static readonly "NETHER_WART": $SoundType
static readonly "LANTERN": $SoundType
static readonly "STEM": $SoundType
static readonly "NYLIUM": $SoundType
static readonly "FUNGUS": $SoundType
static readonly "ROOTS": $SoundType
static readonly "SHROOMLIGHT": $SoundType
static readonly "WEEPING_VINES": $SoundType
static readonly "TWISTING_VINES": $SoundType
static readonly "SOUL_SAND": $SoundType
static readonly "SOUL_SOIL": $SoundType
static readonly "BASALT": $SoundType
static readonly "WART_BLOCK": $SoundType
static readonly "NETHERRACK": $SoundType
static readonly "NETHER_BRICKS": $SoundType
static readonly "NETHER_SPROUTS": $SoundType
static readonly "NETHER_ORE": $SoundType
static readonly "BONE_BLOCK": $SoundType
static readonly "NETHERITE_BLOCK": $SoundType
static readonly "ANCIENT_DEBRIS": $SoundType
static readonly "LODESTONE": $SoundType
static readonly "CHAIN": $SoundType
static readonly "NETHER_GOLD_ORE": $SoundType
static readonly "GILDED_BLACKSTONE": $SoundType
static readonly "CANDLE": $SoundType
static readonly "AMETHYST": $SoundType
static readonly "AMETHYST_CLUSTER": $SoundType
static readonly "SMALL_AMETHYST_BUD": $SoundType
static readonly "MEDIUM_AMETHYST_BUD": $SoundType
static readonly "LARGE_AMETHYST_BUD": $SoundType
static readonly "TUFF": $SoundType
static readonly "CALCITE": $SoundType
static readonly "DRIPSTONE_BLOCK": $SoundType
static readonly "POINTED_DRIPSTONE": $SoundType
static readonly "COPPER": $SoundType
static readonly "CAVE_VINES": $SoundType
static readonly "SPORE_BLOSSOM": $SoundType
static readonly "AZALEA": $SoundType
static readonly "FLOWERING_AZALEA": $SoundType
static readonly "MOSS_CARPET": $SoundType
static readonly "PINK_PETALS": $SoundType
static readonly "MOSS": $SoundType
static readonly "BIG_DRIPLEAF": $SoundType
static readonly "SMALL_DRIPLEAF": $SoundType
static readonly "ROOTED_DIRT": $SoundType
static readonly "HANGING_ROOTS": $SoundType
static readonly "AZALEA_LEAVES": $SoundType
static readonly "SCULK_SENSOR": $SoundType
static readonly "SCULK_CATALYST": $SoundType
static readonly "SCULK": $SoundType
static readonly "SCULK_VEIN": $SoundType
static readonly "SCULK_SHRIEKER": $SoundType
static readonly "GLOW_LICHEN": $SoundType
static readonly "DEEPSLATE": $SoundType
static readonly "DEEPSLATE_BRICKS": $SoundType
static readonly "DEEPSLATE_TILES": $SoundType
static readonly "POLISHED_DEEPSLATE": $SoundType
static readonly "FROGLIGHT": $SoundType
static readonly "FROGSPAWN": $SoundType
static readonly "MANGROVE_ROOTS": $SoundType
static readonly "MUDDY_MANGROVE_ROOTS": $SoundType
static readonly "MUD": $SoundType
static readonly "MUD_BRICKS": $SoundType
static readonly "PACKED_MUD": $SoundType
static readonly "HANGING_SIGN": $SoundType
static readonly "NETHER_WOOD_HANGING_SIGN": $SoundType
static readonly "BAMBOO_WOOD_HANGING_SIGN": $SoundType
static readonly "BAMBOO_WOOD": $SoundType
static readonly "NETHER_WOOD": $SoundType
static readonly "CHERRY_WOOD": $SoundType
static readonly "CHERRY_SAPLING": $SoundType
static readonly "CHERRY_LEAVES": $SoundType
static readonly "CHERRY_WOOD_HANGING_SIGN": $SoundType
static readonly "CHISELED_BOOKSHELF": $SoundType
static readonly "SUSPICIOUS_SAND": $SoundType
static readonly "SUSPICIOUS_GRAVEL": $SoundType
static readonly "DECORATED_POT": $SoundType
static readonly "DECORATED_POT_CRACKED": $SoundType
readonly "volume": float
readonly "pitch": float

constructor(volumeIn: float, pitchIn: float, breakSoundIn: $Supplier$Type<($SoundEvent$Type)>, stepSoundIn: $Supplier$Type<($SoundEvent$Type)>, placeSoundIn: $Supplier$Type<($SoundEvent$Type)>, hitSoundIn: $Supplier$Type<($SoundEvent$Type)>, fallSoundIn: $Supplier$Type<($SoundEvent$Type)>)

public "getFallSound"(): $SoundEvent
public "getStepSound"(): $SoundEvent
public "getHitSound"(): $SoundEvent
public "getBreakSound"(): $SoundEvent
public "getPlaceSound"(): $SoundEvent
get "fallSound"(): $SoundEvent
get "stepSound"(): $SoundEvent
get "hitSound"(): $SoundEvent
get "breakSound"(): $SoundEvent
get "placeSound"(): $SoundEvent
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModSoundType$Type = ($ModSoundType);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModSoundType_ = $ModSoundType$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/blocks/$BambooSpikesBlock" {
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$EntityBlock, $EntityBlock$Type} from "packages/net/minecraft/world/level/block/$EntityBlock"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$SoftFluidStack, $SoftFluidStack$Type} from "packages/net/mehvahdjukaar/moonlight/api/fluids/$SoftFluidStack"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Mirror, $Mirror$Type} from "packages/net/minecraft/world/level/block/$Mirror"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Potion, $Potion$Type} from "packages/net/minecraft/world/item/alchemy/$Potion"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$Mob, $Mob$Type} from "packages/net/minecraft/world/entity/$Mob"
import {$PistonMovingBlockEntity, $PistonMovingBlockEntity$Type} from "packages/net/minecraft/world/level/block/piston/$PistonMovingBlockEntity"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$WaterBlock, $WaterBlock$Type} from "packages/net/mehvahdjukaar/moonlight/api/block/$WaterBlock"
import {$List, $List$Type} from "packages/java/util/$List"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$IPistonMotionReact, $IPistonMotionReact$Type} from "packages/net/mehvahdjukaar/moonlight/api/block/$IPistonMotionReact"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"
import {$AABB, $AABB$Type} from "packages/net/minecraft/world/phys/$AABB"
import {$DirectionProperty, $DirectionProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$DirectionProperty"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$ISoftFluidConsumer, $ISoftFluidConsumer$Type} from "packages/net/mehvahdjukaar/moonlight/api/block/$ISoftFluidConsumer"
import {$IWashable, $IWashable$Type} from "packages/net/mehvahdjukaar/moonlight/api/block/$IWashable"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$BlockPathTypes, $BlockPathTypes$Type} from "packages/net/minecraft/world/level/pathfinder/$BlockPathTypes"
import {$CollisionContext, $CollisionContext$Type} from "packages/net/minecraft/world/phys/shapes/$CollisionContext"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$LootParams$Builder, $LootParams$Builder$Type} from "packages/net/minecraft/world/level/storage/loot/$LootParams$Builder"
import {$Rotation, $Rotation$Type} from "packages/net/minecraft/world/level/block/$Rotation"
import {$BlockEntityTicker, $BlockEntityTicker$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityTicker"
import {$GameEventListener, $GameEventListener$Type} from "packages/net/minecraft/world/level/gameevent/$GameEventListener"

export class $BambooSpikesBlock extends $WaterBlock implements $ISoftFluidConsumer, $EntityBlock, $IWashable, $IPistonMotionReact {
static readonly "FACING": $DirectionProperty
static readonly "TIPPED": $BooleanProperty
static readonly "WATERLOGGED": $BooleanProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(properties: $BlockBehaviour$Properties$Type)

public "getBlockPathType"(state: $BlockState$Type, level: $BlockGetter$Type, pos: $BlockPos$Type, mob: $Mob$Type): $BlockPathTypes
public "getStateForPlacement"(context: $BlockPlaceContext$Type): $BlockState
public "setPlacedBy"(worldIn: $Level$Type, pos: $BlockPos$Type, state: $BlockState$Type, placer: $LivingEntity$Type, stack: $ItemStack$Type): void
public "getCloneItemStack"(level: $BlockGetter$Type, pos: $BlockPos$Type, state: $BlockState$Type): $ItemStack
public "getAdjacentBlockPathType"(state: $BlockState$Type, level: $BlockGetter$Type, pos: $BlockPos$Type, mob: $Mob$Type, originalType: $BlockPathTypes$Type): $BlockPathTypes
public static "getDamageSource"(level: $Level$Type): $DamageSource
public "ticksWhileMoved"(): boolean
public "moveTick"(movedState: $BlockState$Type, level: $Level$Type, pos: $BlockPos$Type, aabb: $AABB$Type, tile: $PistonMovingBlockEntity$Type): void
public static "tryAddingPotion"(state: $BlockState$Type, world: $LevelAccessor$Type, pos: $BlockPos$Type, potion: $Potion$Type): boolean
public "getSpikeItem"(te: $BlockEntity$Type): $ItemStack
public "tryAcceptingFluid"(world: $Level$Type, state: $BlockState$Type, pos: $BlockPos$Type, fluid: $SoftFluidStack$Type): boolean
public "use"(state: $BlockState$Type, worldIn: $Level$Type, pos: $BlockPos$Type, player: $Player$Type, handIn: $InteractionHand$Type, hit: $BlockHitResult$Type): $InteractionResult
public "rotate"(state: $BlockState$Type, rot: $Rotation$Type): $BlockState
public "mirror"(state: $BlockState$Type, mirrorIn: $Mirror$Type): $BlockState
public "getDrops"(state: $BlockState$Type, builder: $LootParams$Builder$Type): $List<($ItemStack)>
public "getInteractionShape"(state: $BlockState$Type, worldIn: $BlockGetter$Type, pos: $BlockPos$Type): $VoxelShape
public "getShape"(state: $BlockState$Type, world: $BlockGetter$Type, pos: $BlockPos$Type, context: $CollisionContext$Type): $VoxelShape
public "entityInside"(state: $BlockState$Type, level: $Level$Type, pos: $BlockPos$Type, entityIn: $Entity$Type): void
public "animateTick"(state: $BlockState$Type, world: $Level$Type, pos: $BlockPos$Type, random: $RandomSource$Type): void
public "tryWash"(level: $Level$Type, pos: $BlockPos$Type, state: $BlockState$Type): boolean
public "newBlockEntity"(pPos: $BlockPos$Type, pState: $BlockState$Type): $BlockEntity
public "getTicker"<T extends $BlockEntity>(arg0: $Level$Type, arg1: $BlockState$Type, arg2: $BlockEntityType$Type<(T)>): $BlockEntityTicker<(T)>
public "getListener"<T extends $BlockEntity>(arg0: $ServerLevel$Type, arg1: T): $GameEventListener
/**
 * 
 * @deprecated
 */
public "onMoved"(movedState: $BlockState$Type, level: $Level$Type, pos: $BlockPos$Type, direction: $Direction$Type, extending: boolean, tile: $PistonMovingBlockEntity$Type): void
public "onMoved"(level: $Level$Type, pos: $BlockPos$Type, movedState: $BlockState$Type, direction: $Direction$Type, extending: boolean): void
public "moveTick"(level: $Level$Type, pos: $BlockPos$Type, movedState: $BlockState$Type, aabb: $AABB$Type, tile: $PistonMovingBlockEntity$Type): void
public "onMagnetMoved"(level: $Level$Type, blockPos: $BlockPos$Type, direction: $Direction$Type, blockState: $BlockState$Type, blockEntity: $BlockEntity$Type): void
public "canMagnetMove"(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $Direction$Type, arg3: $BlockState$Type, arg4: $BlockEntity$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BambooSpikesBlock$Type = ($BambooSpikesBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BambooSpikesBlock_ = $BambooSpikesBlock$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/fluids/$SoftFluidColors" {
import {$CompletableFuture, $CompletableFuture$Type} from "packages/java/util/concurrent/$CompletableFuture"
import {$PreparableReloadListener$PreparationBarrier, $PreparableReloadListener$PreparationBarrier$Type} from "packages/net/minecraft/server/packs/resources/$PreparableReloadListener$PreparationBarrier"
import {$SoftFluidStack, $SoftFluidStack$Type} from "packages/net/mehvahdjukaar/moonlight/api/fluids/$SoftFluidStack"
import {$ResourceManagerReloadListener, $ResourceManagerReloadListener$Type} from "packages/net/minecraft/server/packs/resources/$ResourceManagerReloadListener"
import {$Executor, $Executor$Type} from "packages/java/util/concurrent/$Executor"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockAndTintGetter, $BlockAndTintGetter$Type} from "packages/net/minecraft/world/level/$BlockAndTintGetter"
import {$ResourceManager, $ResourceManager$Type} from "packages/net/minecraft/server/packs/resources/$ResourceManager"
import {$ProfilerFiller, $ProfilerFiller$Type} from "packages/net/minecraft/util/profiling/$ProfilerFiller"

export class $SoftFluidColors implements $ResourceManagerReloadListener {

constructor()

public static "getSpecialColor"(softFluidStack: $SoftFluidStack$Type, world: $BlockAndTintGetter$Type, pos: $BlockPos$Type): integer
public "onResourceManagerReload"(resourceManager: $ResourceManager$Type): void
public static "refreshParticleColors"(): void
public "reload"(arg0: $PreparableReloadListener$PreparationBarrier$Type, arg1: $ResourceManager$Type, arg2: $ProfilerFiller$Type, arg3: $ProfilerFiller$Type, arg4: $Executor$Type, arg5: $Executor$Type): $CompletableFuture<(void)>
public "getName"(): string
get "name"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SoftFluidColors$Type = ($SoftFluidColors);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SoftFluidColors_ = $SoftFluidColors$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/block/$ILightable" {
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$Projectile, $Projectile$Type} from "packages/net/minecraft/world/entity/projectile/$Projectile"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$ILightable$FireSourceType, $ILightable$FireSourceType$Type} from "packages/net/mehvahdjukaar/moonlight/api/block/$ILightable$FireSourceType"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export interface $ILightable {

 "extinguish"(player: $Entity$Type, state: $BlockState$Type, pos: $BlockPos$Type, world: $LevelAccessor$Type): boolean
 "playExtinguishSound"(world: $LevelAccessor$Type, pos: $BlockPos$Type): void
 "isLitUp"(state: $BlockState$Type, level: $BlockGetter$Type, pos: $BlockPos$Type): boolean
/**
 * 
 * @deprecated
 */
 "isLitUp"(state: $BlockState$Type): boolean
 "interactWithPlayer"(state: $BlockState$Type, level: $Level$Type, pos: $BlockPos$Type, player: $Player$Type, handIn: $InteractionHand$Type): $InteractionResult
 "setLitUp"(state: $BlockState$Type, world: $LevelAccessor$Type, pos: $BlockPos$Type, lit: boolean): void
 "lightUp"(player: $Entity$Type, state: $BlockState$Type, pos: $BlockPos$Type, world: $LevelAccessor$Type, fireSourceType: $ILightable$FireSourceType$Type): boolean
 "playLightUpSound"(world: $LevelAccessor$Type, pos: $BlockPos$Type, type: $ILightable$FireSourceType$Type): void
/**
 * 
 * @deprecated
 */
 "toggleLitState"(state: $BlockState$Type, lit: boolean): $BlockState
 "spawnSmokeParticles"(state: $BlockState$Type, pos: $BlockPos$Type, world: $LevelAccessor$Type): void
 "canBeExtinguishedBy"(item: $ItemStack$Type): boolean
 "interactWithProjectile"(level: $Level$Type, state: $BlockState$Type, projectile: $Projectile$Type, pos: $BlockPos$Type): boolean
}

export namespace $ILightable {
const FLINT_AND_STEELS: $TagKey<($Item)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ILightable$Type = ($ILightable);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ILightable_ = $ILightable$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/items/$SliceMapItem$DepthMapData" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$CustomMapData$Type, $CustomMapData$Type$Type} from "packages/net/mehvahdjukaar/moonlight/api/map/$CustomMapData$Type"
import {$MapItemSavedData, $MapItemSavedData$Type} from "packages/net/minecraft/world/level/saveddata/maps/$MapItemSavedData"
import {$CustomMapData, $CustomMapData$Type} from "packages/net/mehvahdjukaar/moonlight/api/map/$CustomMapData"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$CustomMapData$SimpleDirtyCounter, $CustomMapData$SimpleDirtyCounter$Type} from "packages/net/mehvahdjukaar/moonlight/api/map/$CustomMapData$SimpleDirtyCounter"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $SliceMapItem$DepthMapData implements $CustomMapData<($CustomMapData$SimpleDirtyCounter)> {


public "load"(tag: $CompoundTag$Type): void
public "set"(slice: integer): void
public "save"(tag: $CompoundTag$Type): void
public "getType"(): $CustomMapData$Type<($SliceMapItem$DepthMapData)>
public "loadUpdateTag"(tag: $CompoundTag$Type): void
public "saveToUpdateTag"(tag: $CompoundTag$Type, dirtyCounter: $CustomMapData$SimpleDirtyCounter$Type): void
public "onItemTooltip"(data: $MapItemSavedData$Type, stack: $ItemStack$Type): $Component
public "setDirty"(data: $MapItemSavedData$Type, dirtySetter: $Consumer$Type<($CustomMapData$SimpleDirtyCounter$Type)>): void
public "persistOnCopyOrLock"(): boolean
public "onItemUpdate"(data: $MapItemSavedData$Type, entity: $Entity$Type): boolean
get "type"(): $CustomMapData$Type<($SliceMapItem$DepthMapData)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SliceMapItem$DepthMapData$Type = ($SliceMapItem$DepthMapData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SliceMapItem$DepthMapData_ = $SliceMapItem$DepthMapData$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/inventories/$RedMerchantMenu" {
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$Merchant, $Merchant$Type} from "packages/net/minecraft/world/item/trading/$Merchant"
import {$AbstractContainerMenu, $AbstractContainerMenu$Type} from "packages/net/minecraft/world/inventory/$AbstractContainerMenu"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MerchantOffers, $MerchantOffers$Type} from "packages/net/minecraft/world/item/trading/$MerchantOffers"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"

export class $RedMerchantMenu extends $AbstractContainerMenu {
static readonly "SLOT_CLICKED_OUTSIDE": integer
static readonly "QUICKCRAFT_TYPE_CHARITABLE": integer
static readonly "QUICKCRAFT_TYPE_GREEDY": integer
static readonly "QUICKCRAFT_TYPE_CLONE": integer
static readonly "QUICKCRAFT_HEADER_START": integer
static readonly "QUICKCRAFT_HEADER_CONTINUE": integer
static readonly "QUICKCRAFT_HEADER_END": integer
static readonly "CARRIED_SLOT_SIZE": integer
readonly "lastSlots": $NonNullList<($ItemStack)>
readonly "slots": $NonNullList<($Slot)>
 "remoteSlots": $NonNullList<($ItemStack)>
 "containerId": integer

constructor(i: integer, inventory: $Inventory$Type, merchant: $Merchant$Type)
constructor(i: integer, inventory: $Inventory$Type)
constructor(id: integer, playerInventory: $Inventory$Type, packetBuffer: $FriendlyByteBuf$Type)

public "setCanRestock"(canRestock: boolean): void
public "showProgressBar"(): boolean
public "setShowProgressBar"(showProgressBar: boolean): void
public "getOffers"(): $MerchantOffers
public "getTraderLevel"(): integer
public "getTraderXp"(): integer
public "getFutureTraderXp"(): integer
public "setMerchantLevel"(level: integer): void
public "setOffers"(offers: $MerchantOffers$Type): void
public "stillValid"(player: $Player$Type): boolean
public "removed"(player: $Player$Type): void
public "getPlayer"(): $Player
public "setXp"(xp: integer): void
public "canTakeItemForPickAll"(stack: $ItemStack$Type, slot: $Slot$Type): boolean
public "quickMoveStack"(player: $Player$Type, index: integer): $ItemStack
public "slotsChanged"(container: $Container$Type): void
public "canRestock"(): boolean
public "tryMoveItems"(selectedMerchantRecipe: integer): void
public "setSelectionHint"(currentRecipeIndex: integer): void
get "offers"(): $MerchantOffers
get "traderLevel"(): integer
get "traderXp"(): integer
get "futureTraderXp"(): integer
set "merchantLevel"(value: integer)
set "offers"(value: $MerchantOffers$Type)
get "player"(): $Player
set "xp"(value: integer)
set "selectionHint"(value: integer)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RedMerchantMenu$Type = ($RedMerchantMenu);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RedMerchantMenu_ = $RedMerchantMenu$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/integration/create/$NoticeBoardDisplaySource" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$SingleLineDisplaySource, $SingleLineDisplaySource$Type} from "packages/com/simibubi/create/content/redstone/displayLink/source/$SingleLineDisplaySource"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $NoticeBoardDisplaySource extends $SingleLineDisplaySource {
static readonly "EMPTY": $List<($MutableComponent)>
static readonly "EMPTY_LINE": $MutableComponent
static readonly "WHITESPACE": $MutableComponent
 "id": $ResourceLocation

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $NoticeBoardDisplaySource$Type = ($NoticeBoardDisplaySource);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $NoticeBoardDisplaySource_ = $NoticeBoardDisplaySource$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/faucet/$KettleInteraction" {
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$FluidOffer, $FluidOffer$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/faucet/$FluidOffer"
import {$FaucetTarget$BlState, $FaucetTarget$BlState$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/faucet/$FaucetTarget$BlState"
import {$SoftFluidStack, $SoftFluidStack$Type} from "packages/net/mehvahdjukaar/moonlight/api/fluids/$SoftFluidStack"
import {$FaucetSource$BlState, $FaucetSource$BlState$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/faucet/$FaucetSource$BlState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $KettleInteraction implements $FaucetTarget$BlState, $FaucetSource$BlState {


public "fill"(level: $Level$Type, pos: $BlockPos$Type, state: $BlockState$Type, fluid: $SoftFluidStack$Type, minAmount: integer): integer
public "drain"(level: $Level$Type, pos: $BlockPos$Type, dir: $Direction$Type, state: $BlockState$Type, amount: integer): void
public "getProvidedFluid"(level: $Level$Type, pos: $BlockPos$Type, dir: $Direction$Type, state: $BlockState$Type): $FluidOffer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $KettleInteraction$Type = ($KettleInteraction);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $KettleInteraction_ = $KettleInteraction$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/client/model/$SkullCandleOverlayModel" {
import {$VertexConsumer, $VertexConsumer$Type} from "packages/com/mojang/blaze3d/vertex/$VertexConsumer"
import {$SkullModelBase, $SkullModelBase$Type} from "packages/net/minecraft/client/model/$SkullModelBase"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$ModelPart, $ModelPart$Type} from "packages/net/minecraft/client/model/geom/$ModelPart"
import {$LayerDefinition, $LayerDefinition$Type} from "packages/net/minecraft/client/model/geom/builders/$LayerDefinition"

export class $SkullCandleOverlayModel extends $SkullModelBase {

constructor(modelPart: $ModelPart$Type)

public static "createMesh"(): $LayerDefinition
public "renderToBuffer"(pMatrixStack: $PoseStack$Type, pBuffer: $VertexConsumer$Type, pPackedLight: integer, pPackedOverlay: integer, pRed: float, pGreen: float, pBlue: float, pAlpha: float): void
public "setupAnim"(f: float, g: float, h: float): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SkullCandleOverlayModel$Type = ($SkullCandleOverlayModel);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SkullCandleOverlayModel_ = $SkullCandleOverlayModel$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/integration/$TetraCompat" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"

export class $TetraCompat {

constructor()

public static "isTetraTool"(i: $Item$Type): boolean
public static "isTetraSword"(i: $Item$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TetraCompat$Type = ($TetraCompat);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TetraCompat_ = $TetraCompat$Type;
}}
declare module "packages/net/mehvahdjukaar/dummmmmmy/network/$ClientBoundDamageNumberMessage" {
import {$CritRecord, $CritRecord$Type} from "packages/net/mehvahdjukaar/dummmmmmy/common/$CritRecord"
import {$Message, $Message$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/network/$Message"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$ChannelHandler$Context, $ChannelHandler$Context$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/network/$ChannelHandler$Context"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $ClientBoundDamageNumberMessage implements $Message {

constructor(id: integer, damage: float, source: $DamageSource$Type, critical: $CritRecord$Type)
constructor(buf: $FriendlyByteBuf$Type)

public "handle"(context: $ChannelHandler$Context$Type): void
public static "encodeDamage"(source: $DamageSource$Type): $ResourceLocation
public "writeToBuffer"(buf: $FriendlyByteBuf$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientBoundDamageNumberMessage$Type = ($ClientBoundDamageNumberMessage);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientBoundDamageNumberMessage_ = $ClientBoundDamageNumberMessage$Type;
}}
declare module "packages/net/mehvahdjukaar/dummmmmmy/configs/$ClientConfigs$IdOrTagPredicate" {
import {$Holder, $Holder$Type} from "packages/net/minecraft/core/$Holder"
import {$DamageType, $DamageType$Type} from "packages/net/minecraft/world/damagesource/$DamageType"
import {$DataResult, $DataResult$Type} from "packages/com/mojang/serialization/$DataResult"
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$Codec, $Codec$Type} from "packages/com/mojang/serialization/$Codec"

export interface $ClientConfigs$IdOrTagPredicate extends $Predicate<($Holder<($DamageType)>)> {

 "toString"(): string
 "test"(arg0: $Holder$Type<($DamageType$Type)>): boolean
 "or"(arg0: $Predicate$Type<(any)>): $Predicate<($Holder<($DamageType)>)>
 "negate"(): $Predicate<($Holder<($DamageType)>)>
 "and"(arg0: $Predicate$Type<(any)>): $Predicate<($Holder<($DamageType)>)>
}

export namespace $ClientConfigs$IdOrTagPredicate {
const CODEC: $Codec<($ClientConfigs$IdOrTagPredicate)>
function read(location: string): $DataResult<($ClientConfigs$IdOrTagPredicate)>
function not<T>(arg0: $Predicate$Type<(any)>): $Predicate<($Holder<($DamageType)>)>
function isEqual<T>(arg0: any): $Predicate<($Holder<($DamageType)>)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientConfigs$IdOrTagPredicate$Type = ($ClientConfigs$IdOrTagPredicate);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientConfigs$IdOrTagPredicate_ = $ClientConfigs$IdOrTagPredicate$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/block/$IPistonMotionReact" {
import {$PistonMovingBlockEntity, $PistonMovingBlockEntity$Type} from "packages/net/minecraft/world/level/block/piston/$PistonMovingBlockEntity"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$AABB, $AABB$Type} from "packages/net/minecraft/world/phys/$AABB"
import {$PistonReactQuarkMixin, $PistonReactQuarkMixin$Type} from "packages/net/mehvahdjukaar/moonlight/core/mixins/compat/$PistonReactQuarkMixin"
import {$IMagnetMoveAction, $IMagnetMoveAction$Type} from "packages/org/violetmoon/quark/api/$IMagnetMoveAction"

export interface $IPistonMotionReact extends $PistonReactQuarkMixin, $IMagnetMoveAction {

 "ticksWhileMoved"(): boolean
/**
 * 
 * @deprecated
 */
 "onMoved"(movedState: $BlockState$Type, level: $Level$Type, pos: $BlockPos$Type, direction: $Direction$Type, extending: boolean, tile: $PistonMovingBlockEntity$Type): void
 "onMoved"(level: $Level$Type, pos: $BlockPos$Type, movedState: $BlockState$Type, direction: $Direction$Type, extending: boolean): void
 "moveTick"(level: $Level$Type, pos: $BlockPos$Type, movedState: $BlockState$Type, aabb: $AABB$Type, tile: $PistonMovingBlockEntity$Type): void
/**
 * 
 * @deprecated
 */
 "moveTick"(movedState: $BlockState$Type, level: $Level$Type, pos: $BlockPos$Type, aabb: $AABB$Type, tile: $PistonMovingBlockEntity$Type): void
 "onMagnetMoved"(level: $Level$Type, blockPos: $BlockPos$Type, direction: $Direction$Type, blockState: $BlockState$Type, blockEntity: $BlockEntity$Type): void
 "canMagnetMove"(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $Direction$Type, arg3: $BlockState$Type, arg4: $BlockEntity$Type): boolean
}

export namespace $IPistonMotionReact {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IPistonMotionReact$Type = ($IPistonMotionReact);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IPistonMotionReact_ = $IPistonMotionReact$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/integration/forge/$FarmersDelightCompatImpl" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $FarmersDelightCompatImpl {

constructor()

public static "isTomatoVineClimbingConfigOn"(): boolean
get "tomatoVineClimbingConfigOn"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FarmersDelightCompatImpl$Type = ($FarmersDelightCompatImpl);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FarmersDelightCompatImpl_ = $FarmersDelightCompatImpl$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/common/recipe/$DyeBottleRecipe" {
import {$RegistryAccess, $RegistryAccess$Type} from "packages/net/minecraft/core/$RegistryAccess"
import {$RecipeSerializer, $RecipeSerializer$Type} from "packages/net/minecraft/world/item/crafting/$RecipeSerializer"
import {$CustomRecipe, $CustomRecipe$Type} from "packages/net/minecraft/world/item/crafting/$CustomRecipe"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$CraftingContainer, $CraftingContainer$Type} from "packages/net/minecraft/world/inventory/$CraftingContainer"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$CraftingBookCategory, $CraftingBookCategory$Type} from "packages/net/minecraft/world/item/crafting/$CraftingBookCategory"

export class $DyeBottleRecipe extends $CustomRecipe {

constructor(resourceLocation: $ResourceLocation$Type, category: $CraftingBookCategory$Type)

public "matches"(craftingContainer: $CraftingContainer$Type, level: $Level$Type): boolean
public "canCraftInDimensions"(width: integer, height: integer): boolean
public "getSerializer"(): $RecipeSerializer<(any)>
public "assemble"(craftingContainer: $CraftingContainer$Type, registryAccess: $RegistryAccess$Type): $ItemStack
get "serializer"(): $RecipeSerializer<(any)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DyeBottleRecipe$Type = ($DyeBottleRecipe);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DyeBottleRecipe_ = $DyeBottleRecipe$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/network/$SyncSkellyQuiverPacket" {
import {$Message, $Message$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/network/$Message"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$AbstractSkeleton, $AbstractSkeleton$Type} from "packages/net/minecraft/world/entity/monster/$AbstractSkeleton"
import {$ChannelHandler$Context, $ChannelHandler$Context$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/network/$ChannelHandler$Context"

export class $SyncSkellyQuiverPacket implements $Message {
readonly "entityID": integer
readonly "on": boolean

constructor(buf: $FriendlyByteBuf$Type)
constructor(entity: $AbstractSkeleton$Type)

public "handle"(context: $ChannelHandler$Context$Type): void
public "writeToBuffer"(buf: $FriendlyByteBuf$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SyncSkellyQuiverPacket$Type = ($SyncSkellyQuiverPacket);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SyncSkellyQuiverPacket_ = $SyncSkellyQuiverPacket$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/api/$IFlowerModelProvider" {
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export interface $IFlowerModelProvider {

 "getModel"(): $ResourceLocation

(): $ResourceLocation
}

export namespace $IFlowerModelProvider {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IFlowerModelProvider$Type = ($IFlowerModelProvider);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IFlowerModelProvider_ = $IFlowerModelProvider$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/particles/$DrippingLiquidParticle" {
import {$ParticleRenderType, $ParticleRenderType$Type} from "packages/net/minecraft/client/particle/$ParticleRenderType"
import {$TextureSheetParticle, $TextureSheetParticle$Type} from "packages/net/minecraft/client/particle/$TextureSheetParticle"

export class $DrippingLiquidParticle extends $TextureSheetParticle {
 "x": double
 "y": double
 "z": double
 "xd": double
 "yd": double
 "zd": double
 "age": integer
 "rCol": float
 "gCol": float
 "bCol": float


public "getRenderType"(): $ParticleRenderType
public "tick"(): void
get "renderType"(): $ParticleRenderType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DrippingLiquidParticle$Type = ($DrippingLiquidParticle);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DrippingLiquidParticle_ = $DrippingLiquidParticle$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/configs/forge/$ConfigUtilsImpl" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $ConfigUtilsImpl {

constructor()

public static "openModConfigs"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ConfigUtilsImpl$Type = ($ConfigUtilsImpl);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ConfigUtilsImpl_ = $ConfigUtilsImpl$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/worldgen/$MineshaftElevatorPiece" {
import {$StructurePieceSerializationContext, $StructurePieceSerializationContext$Type} from "packages/net/minecraft/world/level/levelgen/structure/pieces/$StructurePieceSerializationContext"
import {$BoundingBox, $BoundingBox$Type} from "packages/net/minecraft/world/level/levelgen/structure/$BoundingBox"
import {$ChunkPos, $ChunkPos$Type} from "packages/net/minecraft/world/level/$ChunkPos"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$ChunkGenerator, $ChunkGenerator$Type} from "packages/net/minecraft/world/level/chunk/$ChunkGenerator"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$StructurePiece, $StructurePiece$Type} from "packages/net/minecraft/world/level/levelgen/structure/$StructurePiece"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$MineshaftPieces$MineShaftPiece, $MineshaftPieces$MineShaftPiece$Type} from "packages/net/minecraft/world/level/levelgen/structure/structures/$MineshaftPieces$MineShaftPiece"
import {$WorldGenLevel, $WorldGenLevel$Type} from "packages/net/minecraft/world/level/$WorldGenLevel"
import {$MineshaftStructure$Type, $MineshaftStructure$Type$Type} from "packages/net/minecraft/world/level/levelgen/structure/structures/$MineshaftStructure$Type"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$StructureManager, $StructureManager$Type} from "packages/net/minecraft/world/level/$StructureManager"
import {$StructurePieceAccessor, $StructurePieceAccessor$Type} from "packages/net/minecraft/world/level/levelgen/structure/$StructurePieceAccessor"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $MineshaftElevatorPiece extends $MineshaftPieces$MineShaftPiece {

constructor(context: $StructurePieceSerializationContext$Type, compoundTag: $CompoundTag$Type)
constructor(depth: integer, boundingBox: $BoundingBox$Type, direction: $Direction$Type, floor: byte, hasChain: boolean, type: $MineshaftStructure$Type$Type)

public static "getRopeCutout"(): integer
public static "getMineshaftRope"(): $BlockState
public static "getElevator"(pieces: $StructurePieceAccessor$Type, random: $RandomSource$Type, x: integer, y: integer, z: integer, direction: $Direction$Type, genDepth: integer, type: $MineshaftStructure$Type$Type): $MineshaftPieces$MineShaftPiece
public "postProcess"(level: $WorldGenLevel$Type, structureManager: $StructureManager$Type, generator: $ChunkGenerator$Type, random: $RandomSource$Type, box: $BoundingBox$Type, chunkPos: $ChunkPos$Type, pos: $BlockPos$Type): void
public "addChildren"(piece: $StructurePiece$Type, pieces: $StructurePieceAccessor$Type, random: $RandomSource$Type): void
get "ropeCutout"(): integer
get "mineshaftRope"(): $BlockState
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MineshaftElevatorPiece$Type = ($MineshaftElevatorPiece);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MineshaftElevatorPiece_ = $MineshaftElevatorPiece$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/core/map/$MapDataInternal" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$TriFunction, $TriFunction$Type} from "packages/net/mehvahdjukaar/moonlight/api/misc/$TriFunction"
import {$MapBlockMarker, $MapBlockMarker$Type} from "packages/net/mehvahdjukaar/moonlight/api/map/markers/$MapBlockMarker"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$BiFunction, $BiFunction$Type} from "packages/java/util/function/$BiFunction"
import {$Codec, $Codec$Type} from "packages/com/mojang/serialization/$Codec"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$Structure, $Structure$Type} from "packages/net/minecraft/world/level/levelgen/structure/$Structure"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$CustomMapData$Type, $CustomMapData$Type$Type} from "packages/net/mehvahdjukaar/moonlight/api/map/$CustomMapData$Type"
import {$MapItemSavedData, $MapItemSavedData$Type} from "packages/net/minecraft/world/level/saveddata/maps/$MapItemSavedData"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$MapDecorationType, $MapDecorationType$Type} from "packages/net/mehvahdjukaar/moonlight/api/map/type/$MapDecorationType"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$Registry, $Registry$Type} from "packages/net/minecraft/core/$Registry"
import {$RegistryAccess, $RegistryAccess$Type} from "packages/net/minecraft/core/$RegistryAccess"
import {$Holder, $Holder$Type} from "packages/net/minecraft/core/$Holder"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$CustomDecorationType, $CustomDecorationType$Type} from "packages/net/mehvahdjukaar/moonlight/api/map/type/$CustomDecorationType"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$CustomMapData, $CustomMapData$Type} from "packages/net/mehvahdjukaar/moonlight/api/map/$CustomMapData"
import {$ResourceKey, $ResourceKey$Type} from "packages/net/minecraft/resources/$ResourceKey"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$Map$Entry, $Map$Entry$Type} from "packages/java/util/$Map$Entry"

export class $MapDataInternal {
static readonly "CODEC": $Codec<($MapDecorationType<(any), (any)>)>
static readonly "NETWORK_CODEC": $Codec<($MapDecorationType<(any), (any)>)>
static readonly "CUSTOM_MAP_DATA_TYPES": $Map<($ResourceLocation), ($CustomMapData$Type<(any)>)>
static readonly "KEY": $ResourceKey<($Registry<($MapDecorationType<(any), (any)>)>)>
static readonly "GENERIC_STRUCTURE_ID": $ResourceLocation

constructor()

public static "get"(id: $ResourceLocation$Type): $MapDecorationType<(any), (any)>
public static "get"(id: string): $MapDecorationType<(any), (any)>
public static "init"(): void
public static "getEntries"(): $Set<($Map$Entry<($ResourceKey<($MapDecorationType<(any), (any)>)>), ($MapDecorationType<(any), (any)>)>)>
public static "getOptional"(id: $ResourceLocation$Type): $Optional<($MapDecorationType<(any), (any)>)>
public static "readWorldMarker"(compound: $CompoundTag$Type): $MapBlockMarker<(any)>
public static "createCustomType"(factoryID: $ResourceLocation$Type): $CustomDecorationType<(any), (any)>
public static "registerCustomType"(id: $ResourceLocation$Type, decorationType: $Supplier$Type<($CustomDecorationType$Type<(any), (any)>)>): void
public static "getDynamicClient"(mapId: integer, data: $MapItemSavedData$Type): $Set<($MapBlockMarker<(any)>)>
public static "getAssociatedType"(structure: $Holder$Type<($Structure$Type)>): $MapDecorationType<(any), (any)>
public static "getDynamicServer"(player: $Player$Type, mapId: integer, data: $MapItemSavedData$Type): $Set<($MapBlockMarker<(any)>)>
public static "hackyGetRegistry"(): $Registry<($MapDecorationType<(any), (any)>)>
public static "addDynamicClientMarkersEvent"(event: $BiFunction$Type<(integer), ($MapItemSavedData$Type), ($Set$Type<($MapBlockMarker$Type<(any)>)>)>): void
public static "getMarkersFromWorld"(reader: $BlockGetter$Type, pos: $BlockPos$Type): $List<($MapBlockMarker<(any)>)>
public static "registerCustomMapSavedData"<T extends $CustomMapData<(any)>>(type: $CustomMapData$Type$Type<(T)>): $CustomMapData$Type<(T)>
public static "getGenericStructure"(): $MapDecorationType<(any), (any)>
public static "addDynamicServerMarkersEvent"(event: $TriFunction$Type<($Player$Type), (integer), ($MapItemSavedData$Type), ($Set$Type<($MapBlockMarker$Type<(any)>)>)>): void
public static "getRegistry"(registryAccess: $RegistryAccess$Type): $Registry<($MapDecorationType<(any), (any)>)>
public static "getValues"(): $Collection<($MapDecorationType<(any), (any)>)>
get "entries"(): $Set<($Map$Entry<($ResourceKey<($MapDecorationType<(any), (any)>)>), ($MapDecorationType<(any), (any)>)>)>
get "genericStructure"(): $MapDecorationType<(any), (any)>
get "values"(): $Collection<($MapDecorationType<(any), (any)>)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MapDataInternal$Type = ($MapDataInternal);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MapDataInternal_ = $MapDataInternal$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/entities/goals/$ShowWaresGoal" {
import {$AbstractVillager, $AbstractVillager$Type} from "packages/net/minecraft/world/entity/npc/$AbstractVillager"
import {$LookAtPlayerGoal, $LookAtPlayerGoal$Type} from "packages/net/minecraft/world/entity/ai/goal/$LookAtPlayerGoal"

export class $ShowWaresGoal extends $LookAtPlayerGoal {
static readonly "DEFAULT_PROBABILITY": float

constructor(mob: $AbstractVillager$Type, minDuration: integer, maxDuration: integer)

public "canUse"(): boolean
public "canContinueToUse"(): boolean
public "start"(): void
public "stop"(): void
public "tick"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ShowWaresGoal$Type = ($ShowWaresGoal);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ShowWaresGoal_ = $ShowWaresGoal$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/misc/$RopeHelper" {
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"

export class $RopeHelper {

constructor()

public static "tryPlaceAndMove"(player: $Player$Type, hand: $InteractionHand$Type, world: $Level$Type, pos: $BlockPos$Type, ropeBlock: $Block$Type, moveDir: $Direction$Type, canPush: boolean): boolean
public static "addRopeDown"(pos: $BlockPos$Type, level: $Level$Type, player: $Player$Type, hand: $InteractionHand$Type, ropeBlock: $Block$Type): boolean
public static "removeRopeDown"(pos: $BlockPos$Type, level: $Level$Type, ropeBlock: $Block$Type): boolean
public static "addRope"(pos: $BlockPos$Type, level: $Level$Type, player: $Player$Type, hand: $InteractionHand$Type, ropeBlock: $Block$Type, moveDir: $Direction$Type, canPush: boolean, maxDist: integer): boolean
public static "removeRope"(pos: $BlockPos$Type, level: $Level$Type, ropeBlock: $Block$Type, moveUpDir: $Direction$Type, maxDist: integer): boolean
public static "isCorrectRope"(ropeBlock: $Block$Type, state: $BlockState$Type, direction: $Direction$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RopeHelper$Type = ($RopeHelper);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RopeHelper_ = $RopeHelper$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/client/forge/$ModFluidType" {
import {$Lazy, $Lazy$Type} from "packages/net/minecraftforge/common/util/$Lazy"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$ModFlowingFluid$Properties, $ModFlowingFluid$Properties$Type} from "packages/net/mehvahdjukaar/moonlight/api/fluids/$ModFlowingFluid$Properties"
import {$ModFlowingFluid, $ModFlowingFluid$Type} from "packages/net/mehvahdjukaar/moonlight/api/fluids/$ModFlowingFluid"
import {$IClientFluidTypeExtensions, $IClientFluidTypeExtensions$Type} from "packages/net/minecraftforge/client/extensions/common/$IClientFluidTypeExtensions"
import {$FluidType, $FluidType$Type} from "packages/net/minecraftforge/fluids/$FluidType"

export class $ModFluidType extends $FluidType {
static readonly "BUCKET_VOLUME": integer
static readonly "SIZE": $Lazy<(integer)>


public static "create"(properties: $ModFlowingFluid$Properties$Type, fluid: $ModFlowingFluid$Type): $ModFluidType
public "initializeClient"(consumer: $Consumer$Type<($IClientFluidTypeExtensions$Type)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModFluidType$Type = ($ModFluidType);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModFluidType_ = $ModFluidType$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/faucet/$SpongeInteraction" {
import {$FaucetTarget$BlState, $FaucetTarget$BlState$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/faucet/$FaucetTarget$BlState"
import {$SoftFluidStack, $SoftFluidStack$Type} from "packages/net/mehvahdjukaar/moonlight/api/fluids/$SoftFluidStack"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $SpongeInteraction implements $FaucetTarget$BlState {


public "fill"(level: $Level$Type, pos: $BlockPos$Type, target: $BlockState$Type, fluid: $SoftFluidStack$Type, minAmount: integer): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SpongeInteraction$Type = ($SpongeInteraction);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SpongeInteraction_ = $SpongeInteraction$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/integration/create/$BlackboardDisplayTarget" {
import {$DisplayTarget, $DisplayTarget$Type} from "packages/com/simibubi/create/content/redstone/displayLink/target/$DisplayTarget"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$DisplayLinkContext, $DisplayLinkContext$Type} from "packages/com/simibubi/create/content/redstone/displayLink/$DisplayLinkContext"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$DisplayTargetStats, $DisplayTargetStats$Type} from "packages/com/simibubi/create/content/redstone/displayLink/target/$DisplayTargetStats"

export class $BlackboardDisplayTarget extends $DisplayTarget {
 "id": $ResourceLocation

constructor()

public "provideStats"(context: $DisplayLinkContext$Type): $DisplayTargetStats
public "acceptText"(line: integer, text: $List$Type<($MutableComponent$Type)>, context: $DisplayLinkContext$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BlackboardDisplayTarget$Type = ($BlackboardDisplayTarget);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BlackboardDisplayTarget_ = $BlackboardDisplayTarget$Type;
}}
declare module "packages/net/mehvahdjukaar/dummmmmmy/client/$DamageNumberParticle" {
import {$ClientLevel, $ClientLevel$Type} from "packages/net/minecraft/client/multiplayer/$ClientLevel"
import {$ParticleRenderType, $ParticleRenderType$Type} from "packages/net/minecraft/client/particle/$ParticleRenderType"
import {$VertexConsumer, $VertexConsumer$Type} from "packages/com/mojang/blaze3d/vertex/$VertexConsumer"
import {$Particle, $Particle$Type} from "packages/net/minecraft/client/particle/$Particle"
import {$Camera, $Camera$Type} from "packages/net/minecraft/client/$Camera"

export class $DamageNumberParticle extends $Particle {
 "x": double
 "y": double
 "z": double
 "xd": double
 "yd": double
 "zd": double
 "age": integer
 "rCol": float
 "gCol": float
 "bCol": float

constructor(clientLevel: $ClientLevel$Type, x: double, y: double, z: double, amount: double, dColor: double, dz: double)

public "getRenderType"(): $ParticleRenderType
public "tick"(): void
public "render"(consumer: $VertexConsumer$Type, camera: $Camera$Type, partialTicks: float): void
get "renderType"(): $ParticleRenderType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DamageNumberParticle$Type = ($DamageNumberParticle);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DamageNumberParticle_ = $DamageNumberParticle$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/screens/widgets/$PlayerSuggestionBoxWidget" {
import {$Minecraft, $Minecraft$Type} from "packages/net/minecraft/client/$Minecraft"
import {$MultiLineEditBoxWidget, $MultiLineEditBoxWidget$Type} from "packages/net/mehvahdjukaar/supplementaries/client/screens/widgets/$MultiLineEditBoxWidget"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$PlayerInfo, $PlayerInfo$Type} from "packages/net/minecraft/client/multiplayer/$PlayerInfo"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $PlayerSuggestionBoxWidget extends $MultiLineEditBoxWidget {
static readonly "WIDGETS_LOCATION": $ResourceLocation
static readonly "ACCESSIBILITY_TEXTURE": $ResourceLocation
 "height": integer
 "x": integer
 "y": integer
 "active": boolean
 "visible": boolean
static readonly "UNSET_FG_COLOR": integer

constructor(mc: $Minecraft$Type, x: integer, y: integer, width: integer, height: integer)

public "setState"(hasItem: boolean, packed: boolean): void
public "keyPressed"(key: integer, alt: integer, ctrl: integer): boolean
public "addPlayer"(info: $PlayerInfo$Type): void
public "removePlayer"(id: $UUID$Type): void
public "render"(graphics: $GuiGraphics$Type, mouseX: integer, mouseY: integer, partialTicks: float): void
public "onValueChanged"(): void
public static "setUsernameCache"(usernameCache: $Map$Type<($UUID$Type), (string)>): void
set "usernameCache"(value: $Map$Type<($UUID$Type), (string)>)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PlayerSuggestionBoxWidget$Type = ($PlayerSuggestionBoxWidget);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PlayerSuggestionBoxWidget_ = $PlayerSuggestionBoxWidget$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/entities/$RedMerchantEntity" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$WalkAnimationState, $WalkAnimationState$Type} from "packages/net/minecraft/world/entity/$WalkAnimationState"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$PathNavigation, $PathNavigation$Type} from "packages/net/minecraft/world/entity/ai/navigation/$PathNavigation"
import {$RangedAttackMob, $RangedAttackMob$Type} from "packages/net/minecraft/world/entity/monster/$RangedAttackMob"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$AttributeMap, $AttributeMap$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeMap"
import {$ClientGamePacketListener, $ClientGamePacketListener$Type} from "packages/net/minecraft/network/protocol/game/$ClientGamePacketListener"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$Mob, $Mob$Type} from "packages/net/minecraft/world/entity/$Mob"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$LevelRenderer, $LevelRenderer$Type} from "packages/net/minecraft/client/renderer/$LevelRenderer"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"
import {$GoalSelector, $GoalSelector$Type} from "packages/net/minecraft/world/entity/ai/goal/$GoalSelector"
import {$Packet, $Packet$Type} from "packages/net/minecraft/network/protocol/$Packet"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"
import {$AbstractVillager, $AbstractVillager$Type} from "packages/net/minecraft/world/entity/npc/$AbstractVillager"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$AgeableMob, $AgeableMob$Type} from "packages/net/minecraft/world/entity/$AgeableMob"
import {$InventoryCarrier, $InventoryCarrier$Type} from "packages/net/minecraft/world/entity/npc/$InventoryCarrier"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$ItemEntity, $ItemEntity$Type} from "packages/net/minecraft/world/entity/item/$ItemEntity"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $RedMerchantEntity extends $AbstractVillager implements $RangedAttackMob {
static readonly "VILLAGER_SLOT_OFFSET": integer
static readonly "BABY_START_AGE": integer
 "entityJs$builder": any
static readonly "MAX_WEARING_ARMOR_CHANCE": float
static readonly "MAX_PICKUP_LOOT_CHANCE": float
static readonly "MAX_ENCHANTED_ARMOR_CHANCE": float
static readonly "MAX_ENCHANTED_WEAPON_CHANCE": float
static readonly "LEASH_TAG": string
static readonly "DEFAULT_EQUIPMENT_DROP_CHANCE": float
static readonly "PRESERVE_ITEM_DROP_CHANCE": integer
static readonly "UPDATE_GOAL_SELECTOR_EVERY_N_TICKS": integer
 "ambientSoundTime": integer
 "navigation": $PathNavigation
readonly "goalSelector": $GoalSelector
readonly "targetSelector": $GoalSelector
 "leashInfoTag": $CompoundTag
static readonly "HAND_SLOTS": integer
static readonly "ARMOR_SLOTS": integer
static readonly "EQUIPMENT_SLOT_OFFSET": integer
static readonly "ARMOR_SLOT_OFFSET": integer
static readonly "SWING_DURATION": integer
static readonly "PLAYER_HURT_EXPERIENCE_TIME": integer
static readonly "MIN_MOVEMENT_DISTANCE": double
static readonly "DEFAULT_BASE_GRAVITY": double
static readonly "DEATH_DURATION": integer
static readonly "USE_ITEM_INTERVAL": integer
static readonly "EXTRA_RENDER_CULLING_SIZE_WITH_BIG_HAT": float
 "attributes": $AttributeMap
readonly "activeEffects": $Map<($MobEffect), ($MobEffectInstance)>
 "swinging": boolean
 "swingingArm": $InteractionHand
 "swingTime": integer
 "removeArrowTime": integer
 "removeStingerTime": integer
 "hurtTime": integer
 "hurtDuration": integer
 "deathTime": integer
 "oAttackAnim": float
 "attackAnim": float
 "attackStrengthTicker": integer
readonly "walkAnimation": $WalkAnimationState
readonly "invulnerableDuration": integer
readonly "timeOffs": float
readonly "rotA": float
 "yBodyRot": float
 "yBodyRotO": float
 "yHeadRot": float
 "yHeadRotO": float
 "dead": boolean
 "jumping": boolean
 "xxa": float
 "yya": float
 "zza": float
 "effectsDirty": boolean
 "noJumpDelay": integer
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(type: $EntityType$Type<(any)>, world: $Level$Type)
constructor(world: $Level$Type)

public "setDespawnDelay"(i: integer): void
public "getDespawnDelay"(): integer
public "getAttackCooldown"(): integer
public "setWanderTarget"(pos: $BlockPos$Type): void
public "openTradingScreen"(player: $Player$Type, name: $Component$Type, level: integer): void
public "showProgressBar"(): boolean
public "m_7604_"(): void
public "getNotifyTradeSound"(): $SoundEvent
public "aiStep"(): void
public "readAdditionalSaveData"(compound: $CompoundTag$Type): void
public "addAdditionalSaveData"(compound: $CompoundTag$Type): void
public "performRangedAttack"(target: $LivingEntity$Type, power: float): void
public "setAttackCooldown"(attackCooldown: integer): void
public "getAddEntityPacket"(): $Packet<($ClientGamePacketListener)>
public "removeWhenFarAway"(distanceToClosestPlayer: double): boolean
public "m_6071_"(player: $Player$Type, hand: $InteractionHand$Type): $InteractionResult
public "getBreedOffspring"(world: $ServerLevel$Type, entity: $AgeableMob$Type): $AgeableMob
public static "pickUpItem"(arg0: $Mob$Type, arg1: $InventoryCarrier$Type, arg2: $ItemEntity$Type): void
public "lithiumOnEquipmentChanged"(): void
public "tdv$getDynamicLightX"(): double
public "tdv$getDynamicLightZ"(): double
public "tdv$getDynamicLightWorld"(): $Level
public "tdv$shouldUpdateDynamicLight"(): boolean
public "tdv$resetDynamicLight"(): void
public "tdv$getDynamicLightY"(): double
public "tdv$lambdynlights$scheduleTrackedChunksRebuild"(arg0: $LevelRenderer$Type): void
public "tdv$lambdynlights$updateDynamicLight"(arg0: $LevelRenderer$Type): boolean
public "getCachedFeetBlockState"(): $BlockState
set "despawnDelay"(value: integer)
get "despawnDelay"(): integer
get "attackCooldown"(): integer
set "wanderTarget"(value: $BlockPos$Type)
get "notifyTradeSound"(): $SoundEvent
set "attackCooldown"(value: integer)
get "addEntityPacket"(): $Packet<($ClientGamePacketListener)>
get "cachedFeetBlockState"(): $BlockState
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RedMerchantEntity$Type = ($RedMerchantEntity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RedMerchantEntity_ = $RedMerchantEntity$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/reg/$ModFluids" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $ModFluids {

constructor()

public static "init"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModFluids$Type = ($ModFluids);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModFluids_ = $ModFluids$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/events/overrides/$ItemUseOnBlockOverride" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$ItemUseOverride, $ItemUseOverride$Type} from "packages/net/mehvahdjukaar/supplementaries/common/events/overrides/$ItemUseOverride"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export interface $ItemUseOnBlockOverride extends $ItemUseOverride {

 "getTooltip"(): $MutableComponent
 "placesBlock"(): boolean
 "altersWorld"(): boolean
 "shouldBlockMapToItem"(item: $Item$Type): boolean
 "isEnabled"(): boolean
 "appliesToItem"(arg0: $Item$Type): boolean
 "tryPerformingAction"(arg0: $Level$Type, arg1: $Player$Type, arg2: $InteractionHand$Type, arg3: $ItemStack$Type, arg4: $BlockHitResult$Type): $InteractionResult
}

export namespace $ItemUseOnBlockOverride {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ItemUseOnBlockOverride$Type = ($ItemUseOnBlockOverride);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ItemUseOnBlockOverride_ = $ItemUseOnBlockOverride$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/blocks/$CrystalDisplayBlock" {
import {$IntegerProperty, $IntegerProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$IntegerProperty"
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$CollisionContext, $CollisionContext$Type} from "packages/net/minecraft/world/phys/shapes/$CollisionContext"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Mirror, $Mirror$Type} from "packages/net/minecraft/world/level/block/$Mirror"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$WaterBlock, $WaterBlock$Type} from "packages/net/mehvahdjukaar/moonlight/api/block/$WaterBlock"
import {$Rotation, $Rotation$Type} from "packages/net/minecraft/world/level/block/$Rotation"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"
import {$DirectionProperty, $DirectionProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$DirectionProperty"

export class $CrystalDisplayBlock extends $WaterBlock {
static readonly "POWER": $IntegerProperty
static readonly "ATTACHED": $BooleanProperty
static readonly "FACING": $DirectionProperty
static readonly "WATERLOGGED": $BooleanProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(properties: $BlockBehaviour$Properties$Type)

public "getStateForPlacement"(context: $BlockPlaceContext$Type): $BlockState
public "setPlacedBy"(worldIn: $Level$Type, pos: $BlockPos$Type, state: $BlockState$Type, placer: $LivingEntity$Type, stack: $ItemStack$Type): void
public "neighborChanged"(state: $BlockState$Type, level: $Level$Type, pos: $BlockPos$Type, neighborBlock: $Block$Type, fromPos: $BlockPos$Type, moving: boolean): void
public "updateShape"(stateIn: $BlockState$Type, facing: $Direction$Type, facingState: $BlockState$Type, worldIn: $LevelAccessor$Type, currentPos: $BlockPos$Type, facingPos: $BlockPos$Type): $BlockState
public "rotate"(state: $BlockState$Type, rot: $Rotation$Type): $BlockState
public "mirror"(state: $BlockState$Type, mirrorIn: $Mirror$Type): $BlockState
public "getShape"(state: $BlockState$Type, world: $BlockGetter$Type, pos: $BlockPos$Type, context: $CollisionContext$Type): $VoxelShape
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CrystalDisplayBlock$Type = ($CrystalDisplayBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CrystalDisplayBlock_ = $CrystalDisplayBlock$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/blocks/$PulleyBlock" {
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$EntityBlock, $EntityBlock$Type} from "packages/net/minecraft/world/level/block/$EntityBlock"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$RotatedPillarBlock, $RotatedPillarBlock$Type} from "packages/net/minecraft/world/level/block/$RotatedPillarBlock"
import {$EnumProperty, $EnumProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$EnumProperty"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$IRotatable, $IRotatable$Type} from "packages/net/mehvahdjukaar/moonlight/api/block/$IRotatable"
import {$Direction$Axis, $Direction$Axis$Type} from "packages/net/minecraft/core/$Direction$Axis"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$Rotation, $Rotation$Type} from "packages/net/minecraft/world/level/block/$Rotation"
import {$MenuProvider, $MenuProvider$Type} from "packages/net/minecraft/world/$MenuProvider"
import {$BlockEntityTicker, $BlockEntityTicker$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityTicker"
import {$GameEventListener, $GameEventListener$Type} from "packages/net/minecraft/world/level/gameevent/$GameEventListener"
import {$ModBlockProperties$Winding, $ModBlockProperties$Winding$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/$ModBlockProperties$Winding"

export class $PulleyBlock extends $RotatedPillarBlock implements $EntityBlock, $IRotatable {
static readonly "TYPE": $EnumProperty<($ModBlockProperties$Winding)>
static readonly "FLIPPED": $BooleanProperty
static readonly "AXIS": $EnumProperty<($Direction$Axis)>
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(properties: $BlockBehaviour$Properties$Type)

public "windPulley"(state: $BlockState$Type, pos: $BlockPos$Type, world: $LevelAccessor$Type, rot: $Rotation$Type, dir: $Direction$Type): boolean
public "setPlacedBy"(worldIn: $Level$Type, pos: $BlockPos$Type, state: $BlockState$Type, placer: $LivingEntity$Type, stack: $ItemStack$Type): void
public "getRotatedState"(state: $BlockState$Type, world: $LevelAccessor$Type, pos: $BlockPos$Type, rotation: $Rotation$Type, axis: $Direction$Type, hit: $Vec3$Type): $Optional<($BlockState)>
public "onRotated"(newState: $BlockState$Type, oldState: $BlockState$Type, world: $LevelAccessor$Type, pos: $BlockPos$Type, originalRot: $Rotation$Type, axis: $Direction$Type, hit: $Vec3$Type): void
public "use"(state: $BlockState$Type, worldIn: $Level$Type, pos: $BlockPos$Type, player: $Player$Type, handIn: $InteractionHand$Type, hit: $BlockHitResult$Type): $InteractionResult
public "hasAnalogOutputSignal"(state: $BlockState$Type): boolean
public "onRemove"(state: $BlockState$Type, world: $Level$Type, pos: $BlockPos$Type, newState: $BlockState$Type, isMoving: boolean): void
public "getMenuProvider"(state: $BlockState$Type, blockEntity: $Level$Type, pos: $BlockPos$Type): $MenuProvider
public "getAnalogOutputSignal"(blockState: $BlockState$Type, world: $Level$Type, pos: $BlockPos$Type): integer
public "newBlockEntity"(pPos: $BlockPos$Type, pState: $BlockState$Type): $BlockEntity
public "getTicker"<T extends $BlockEntity>(arg0: $Level$Type, arg1: $BlockState$Type, arg2: $BlockEntityType$Type<(T)>): $BlockEntityTicker<(T)>
public "getListener"<T extends $BlockEntity>(arg0: $ServerLevel$Type, arg1: T): $GameEventListener
public "rotateOverAxis"(state: $BlockState$Type, world: $LevelAccessor$Type, pos: $BlockPos$Type, rotation: $Rotation$Type, axis: $Direction$Type, hit: $Vec3$Type): $Optional<($Direction)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PulleyBlock$Type = ($PulleyBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PulleyBlock_ = $PulleyBlock$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/integration/forge/$QuarkClientCompatImpl" {
import {$RenderTooltipEvent$GatherComponents, $RenderTooltipEvent$GatherComponents$Type} from "packages/net/minecraftforge/client/event/$RenderTooltipEvent$GatherComponents"
import {$UsageTickerEvent$GetCount, $UsageTickerEvent$GetCount$Type} from "packages/org/violetmoon/quark/api/event/$UsageTickerEvent$GetCount"
import {$ClientHelper$TooltipComponentEvent, $ClientHelper$TooltipComponentEvent$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/$ClientHelper$TooltipComponentEvent"

export class $QuarkClientCompatImpl {

constructor()

public static "registerTooltipComponent"(event: $ClientHelper$TooltipComponentEvent$Type): void
public static "initClient"(): void
public static "onItemTooltipEvent"(event: $RenderTooltipEvent$GatherComponents$Type): void
public static "quiverUsageTicker"(event: $UsageTickerEvent$GetCount$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $QuarkClientCompatImpl$Type = ($QuarkClientCompatImpl);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $QuarkClientCompatImpl_ = $QuarkClientCompatImpl$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/renderers/items/$CageItemRenderer" {
import {$ItemDisplayContext, $ItemDisplayContext$Type} from "packages/net/minecraft/world/item/$ItemDisplayContext"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$ItemStackRenderer, $ItemStackRenderer$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/$ItemStackRenderer"

export class $CageItemRenderer extends $ItemStackRenderer {

constructor()

public "renderByItem"(stack: $ItemStack$Type, transformType: $ItemDisplayContext$Type, matrixStackIn: $PoseStack$Type, bufferIn: $MultiBufferSource$Type, combinedLightIn: integer, combinedOverlayIn: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CageItemRenderer$Type = ($CageItemRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CageItemRenderer_ = $CageItemRenderer$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/particles/$CannonFireParticle" {
import {$ParticleRenderType, $ParticleRenderType$Type} from "packages/net/minecraft/client/particle/$ParticleRenderType"
import {$VertexConsumer, $VertexConsumer$Type} from "packages/com/mojang/blaze3d/vertex/$VertexConsumer"
import {$Camera, $Camera$Type} from "packages/net/minecraft/client/$Camera"
import {$TextureSheetParticle, $TextureSheetParticle$Type} from "packages/net/minecraft/client/particle/$TextureSheetParticle"
import {$SpriteSet, $SpriteSet$Type} from "packages/net/minecraft/client/particle/$SpriteSet"

export class $CannonFireParticle extends $TextureSheetParticle {
 "x": double
 "y": double
 "z": double
 "xd": double
 "yd": double
 "zd": double
 "age": integer
 "rCol": float
 "gCol": float
 "bCol": float


public "m_6355_"(partialTick: float): integer
public "setSpriteFromAge"(sprite: $SpriteSet$Type): void
public "getRenderType"(): $ParticleRenderType
public "tick"(): void
public "render"(buffer: $VertexConsumer$Type, renderInfo: $Camera$Type, partialTicks: float): void
set "spriteFromAge"(value: $SpriteSet$Type)
get "renderType"(): $ParticleRenderType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CannonFireParticle$Type = ($CannonFireParticle);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CannonFireParticle_ = $CannonFireParticle$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/renderers/color/$CogBlockColor" {
import {$BlockColor, $BlockColor$Type} from "packages/net/minecraft/client/color/block/$BlockColor"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockAndTintGetter, $BlockAndTintGetter$Type} from "packages/net/minecraft/world/level/$BlockAndTintGetter"

export class $CogBlockColor implements $BlockColor {

constructor()

public "getColor"(state: $BlockState$Type, reader: $BlockAndTintGetter$Type, pos: $BlockPos$Type, color: integer): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CogBlockColor$Type = ($CogBlockColor);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CogBlockColor_ = $CogBlockColor$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/blocks/$IronGateBlock" {
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$Fluid, $Fluid$Type} from "packages/net/minecraft/world/level/material/$Fluid"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$SimpleWaterloggedBlock, $SimpleWaterloggedBlock$Type} from "packages/net/minecraft/world/level/block/$SimpleWaterloggedBlock"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$FluidState, $FluidState$Type} from "packages/net/minecraft/world/level/material/$FluidState"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"
import {$DirectionProperty, $DirectionProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$DirectionProperty"
import {$FenceGateBlock, $FenceGateBlock$Type} from "packages/net/minecraft/world/level/block/$FenceGateBlock"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$CollisionContext, $CollisionContext$Type} from "packages/net/minecraft/world/phys/shapes/$CollisionContext"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$SoundType, $SoundType$Type} from "packages/net/minecraft/world/level/block/$SoundType"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"

export class $IronGateBlock extends $FenceGateBlock implements $SimpleWaterloggedBlock {
static readonly "WATERLOGGED": $BooleanProperty
static readonly "OPEN": $BooleanProperty
static readonly "POWERED": $BooleanProperty
static readonly "IN_WALL": $BooleanProperty
static readonly "FACING": $DirectionProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(properties: $BlockBehaviour$Properties$Type, gold: boolean)

public "getStateForPlacement"(context: $BlockPlaceContext$Type): $BlockState
public "getSoundType"(state: $BlockState$Type): $SoundType
public "neighborChanged"(state: $BlockState$Type, world: $Level$Type, pos: $BlockPos$Type, neighborBlock: $Block$Type, fromPos: $BlockPos$Type, moving: boolean): void
public "updateShape"(stateIn: $BlockState$Type, facing: $Direction$Type, facingState: $BlockState$Type, worldIn: $LevelAccessor$Type, currentPos: $BlockPos$Type, facingPos: $BlockPos$Type): $BlockState
public "use"(state: $BlockState$Type, level: $Level$Type, pos: $BlockPos$Type, player: $Player$Type, hand: $InteractionHand$Type, result: $BlockHitResult$Type): $InteractionResult
public "getFluidState"(state: $BlockState$Type): $FluidState
public "getShape"(state: $BlockState$Type, level: $BlockGetter$Type, pos: $BlockPos$Type, collisionContext: $CollisionContext$Type): $VoxelShape
public static "messWithIronBarsState"(level: $LevelAccessor$Type, clickedPos: $BlockPos$Type, returnValue: $BlockState$Type): $BlockState
public "getPickupSound"(): $Optional<($SoundEvent)>
public "canPlaceLiquid"(arg0: $BlockGetter$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: $Fluid$Type): boolean
public "placeLiquid"(arg0: $LevelAccessor$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: $FluidState$Type): boolean
public "pickupBlock"(arg0: $LevelAccessor$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type): $ItemStack
public "getPickupSound"(arg0: $BlockState$Type): $Optional<($SoundEvent)>
get "pickupSound"(): $Optional<($SoundEvent)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IronGateBlock$Type = ($IronGateBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IronGateBlock_ = $IronGateBlock$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/common/block/$WaterloggedLilyBlock" {
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$Fluid, $Fluid$Type} from "packages/net/minecraft/world/level/material/$Fluid"
import {$EntityBlock, $EntityBlock$Type} from "packages/net/minecraft/world/level/block/$EntityBlock"
import {$WaterlilyBlock, $WaterlilyBlock$Type} from "packages/net/minecraft/world/level/block/$WaterlilyBlock"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$LiquidBlockContainer, $LiquidBlockContainer$Type} from "packages/net/minecraft/world/level/block/$LiquidBlockContainer"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$PathComputationType, $PathComputationType$Type} from "packages/net/minecraft/world/level/pathfinder/$PathComputationType"
import {$FluidState, $FluidState$Type} from "packages/net/minecraft/world/level/material/$FluidState"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$List, $List$Type} from "packages/java/util/$List"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$CollisionContext, $CollisionContext$Type} from "packages/net/minecraft/world/phys/shapes/$CollisionContext"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$LootParams$Builder, $LootParams$Builder$Type} from "packages/net/minecraft/world/level/storage/loot/$LootParams$Builder"
import {$SoundType, $SoundType$Type} from "packages/net/minecraft/world/level/block/$SoundType"
import {$Explosion, $Explosion$Type} from "packages/net/minecraft/world/level/$Explosion"
import {$BlockEntityTicker, $BlockEntityTicker$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityTicker"
import {$GameEventListener, $GameEventListener$Type} from "packages/net/minecraft/world/level/gameevent/$GameEventListener"

export class $WaterloggedLilyBlock extends $WaterlilyBlock implements $LiquidBlockContainer, $EntityBlock {
static readonly "EXTENDED": $BooleanProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(properties: $BlockBehaviour$Properties$Type)

public "getCloneItemStack"(level: $BlockGetter$Type, pos: $BlockPos$Type, state: $BlockState$Type): $ItemStack
public "getExplosionResistance"(state: $BlockState$Type, world: $BlockGetter$Type, pos: $BlockPos$Type, explosion: $Explosion$Type): float
public "getSoundType"(state: $BlockState$Type, world: $LevelReader$Type, pos: $BlockPos$Type, entity: $Entity$Type): $SoundType
public "isPathfindable"(state: $BlockState$Type, worldIn: $BlockGetter$Type, pos: $BlockPos$Type, type: $PathComputationType$Type): boolean
public "neighborChanged"(state: $BlockState$Type, world: $Level$Type, pos: $BlockPos$Type, neighborBlock: $Block$Type, fromPos: $BlockPos$Type, moving: boolean): void
public "updateShape"(stateIn: $BlockState$Type, facing: $Direction$Type, facingState: $BlockState$Type, worldIn: $LevelAccessor$Type, currentPos: $BlockPos$Type, facingPos: $BlockPos$Type): $BlockState
public "use"(state: $BlockState$Type, level: $Level$Type, pos: $BlockPos$Type, player: $Player$Type, hand: $InteractionHand$Type, hit: $BlockHitResult$Type): $InteractionResult
public "getFluidState"(state: $BlockState$Type): $FluidState
public "getSeed"(pState: $BlockState$Type, pPos: $BlockPos$Type): long
public "getDrops"(state: $BlockState$Type, builder: $LootParams$Builder$Type): $List<($ItemStack)>
public "getBlockSupportShape"(state: $BlockState$Type, reader: $BlockGetter$Type, pos: $BlockPos$Type): $VoxelShape
public "getCollisionShape"(state: $BlockState$Type, level: $BlockGetter$Type, pos: $BlockPos$Type, context: $CollisionContext$Type): $VoxelShape
public "getVisualShape"(state: $BlockState$Type, level: $BlockGetter$Type, pos: $BlockPos$Type, context: $CollisionContext$Type): $VoxelShape
public "getShape"(state: $BlockState$Type, level: $BlockGetter$Type, pos: $BlockPos$Type, collisionContext: $CollisionContext$Type): $VoxelShape
public "getDestroyProgress"(state: $BlockState$Type, player: $Player$Type, worldIn: $BlockGetter$Type, pos: $BlockPos$Type): float
public "tick"(state: $BlockState$Type, serverLevel: $ServerLevel$Type, pos: $BlockPos$Type, random: $RandomSource$Type): void
public "getDescriptionId"(): string
public "canPlaceLiquid"(level: $BlockGetter$Type, pos: $BlockPos$Type, state: $BlockState$Type, fluid: $Fluid$Type): boolean
public "placeLiquid"(level: $LevelAccessor$Type, pos: $BlockPos$Type, state: $BlockState$Type, fluidState: $FluidState$Type): boolean
public "newBlockEntity"(pos: $BlockPos$Type, state: $BlockState$Type): $BlockEntity
public "getTicker"<T extends $BlockEntity>(arg0: $Level$Type, arg1: $BlockState$Type, arg2: $BlockEntityType$Type<(T)>): $BlockEntityTicker<(T)>
public "getListener"<T extends $BlockEntity>(arg0: $ServerLevel$Type, arg1: T): $GameEventListener
get "descriptionId"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WaterloggedLilyBlock$Type = ($WaterloggedLilyBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WaterloggedLilyBlock_ = $WaterloggedLilyBlock$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/faucet/$DataItemInteraction" {
import {$FaucetItemSource, $FaucetItemSource$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/faucet/$FaucetItemSource"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$RuleTest, $RuleTest$Type} from "packages/net/minecraft/world/level/levelgen/structure/templatesystem/$RuleTest"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Codec, $Codec$Type} from "packages/com/mojang/serialization/$Codec"

export class $DataItemInteraction extends $Record implements $FaucetItemSource {
static readonly "CODEC": $Codec<($DataItemInteraction)>

constructor(target: $RuleTest$Type, stack: $ItemStack$Type, output: $Optional$Type<($BlockState$Type)>)

public "equals"(o: any): boolean
public "target"(): $RuleTest
public "toString"(): string
public "hashCode"(): integer
public "stack"(): $ItemStack
public "output"(): $Optional<($BlockState)>
public "tryExtractItem"(level: $Level$Type, pos: $BlockPos$Type, state: $BlockState$Type, direction: $Direction$Type, tile: $BlockEntity$Type): $ItemStack
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DataItemInteraction$Type = ($DataItemInteraction);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DataItemInteraction_ = $DataItemInteraction$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/platform/$RegHelper$ItemToTabEvent" {
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$CreativeModeTab, $CreativeModeTab$Type} from "packages/net/minecraft/world/item/$CreativeModeTab"
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$QuadConsumer, $QuadConsumer$Type} from "packages/net/mehvahdjukaar/moonlight/api/misc/$QuadConsumer"
import {$ResourceKey, $ResourceKey$Type} from "packages/net/minecraft/resources/$ResourceKey"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ItemLike, $ItemLike$Type} from "packages/net/minecraft/world/level/$ItemLike"

export class $RegHelper$ItemToTabEvent extends $Record {

constructor(action: $QuadConsumer$Type<($ResourceKey$Type<($CreativeModeTab$Type)>), ($Predicate$Type<($ItemStack$Type)>), (boolean), ($Collection$Type<($ItemStack$Type)>)>)

public "add"(tab: $ResourceKey$Type<($CreativeModeTab$Type)>, ...items: ($ItemStack$Type)[]): void
public "add"(tab: $ResourceKey$Type<($CreativeModeTab$Type)>, ...items: ($ItemLike$Type)[]): void
public "equals"(o: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "action"(): $QuadConsumer<($ResourceKey<($CreativeModeTab)>), ($Predicate<($ItemStack)>), (boolean), ($Collection<($ItemStack)>)>
public "addBefore"(tab: $ResourceKey$Type<($CreativeModeTab$Type)>, target: $Predicate$Type<($ItemStack$Type)>, ...items: ($ItemLike$Type)[]): void
public "addBefore"(tab: $ResourceKey$Type<($CreativeModeTab$Type)>, target: $Predicate$Type<($ItemStack$Type)>, ...items: ($ItemStack$Type)[]): void
public "addAfter"(tab: $ResourceKey$Type<($CreativeModeTab$Type)>, target: $Predicate$Type<($ItemStack$Type)>, ...items: ($ItemLike$Type)[]): void
public "addAfter"(tab: $ResourceKey$Type<($CreativeModeTab$Type)>, target: $Predicate$Type<($ItemStack$Type)>, ...items: ($ItemStack$Type)[]): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RegHelper$ItemToTabEvent$Type = ($RegHelper$ItemToTabEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RegHelper$ItemToTabEvent_ = $RegHelper$ItemToTabEvent$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/items/$BambooSpikesTippedItem" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$WoodBasedBlockItem, $WoodBasedBlockItem$Type} from "packages/net/mehvahdjukaar/moonlight/api/item/$WoodBasedBlockItem"
import {$Fluid, $Fluid$Type} from "packages/net/minecraft/world/level/material/$Fluid"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$SimpleWaterloggedBlock, $SimpleWaterloggedBlock$Type} from "packages/net/minecraft/world/level/block/$SimpleWaterloggedBlock"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Potion, $Potion$Type} from "packages/net/minecraft/world/item/alchemy/$Potion"
import {$FluidState, $FluidState$Type} from "packages/net/minecraft/world/level/material/$FluidState"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$List, $List$Type} from "packages/java/util/$List"
import {$AdditionalItemPlacement, $AdditionalItemPlacement$Type} from "packages/net/mehvahdjukaar/moonlight/api/item/additional_placements/$AdditionalItemPlacement"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $BambooSpikesTippedItem extends $WoodBasedBlockItem implements $SimpleWaterloggedBlock {
static readonly "BLOCK_ENTITY_TAG": string
static readonly "BLOCK_STATE_TAG": string
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(blockIn: $Block$Type, builder: $Item$Properties$Type)

public "getDefaultInstance"(): $ItemStack
public "getBarColor"(stack: $ItemStack$Type): integer
public "isBarVisible"(stack: $ItemStack$Type): boolean
public "getDescriptionId"(stack: $ItemStack$Type): string
public "getName"(stack: $ItemStack$Type): $Component
public "appendHoverText"(stack: $ItemStack$Type, worldIn: $Level$Type, tooltip: $List$Type<($Component$Type)>, flagIn: $TooltipFlag$Type): void
public "getEnchantmentValue"(): integer
public "isRepairable"(stack: $ItemStack$Type): boolean
public "isEnchantable"(stack: $ItemStack$Type): boolean
public "isValidRepairItem"(toRepair: $ItemStack$Type, repair: $ItemStack$Type): boolean
public "isBookEnchantable"(stack: $ItemStack$Type, book: $ItemStack$Type): boolean
public static "makeSpikeItem"(potion: $Potion$Type): $ItemStack
public static "isPotionValid"(potion: $Potion$Type): boolean
public "getPickupSound"(): $Optional<($SoundEvent)>
public "canPlaceLiquid"(arg0: $BlockGetter$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: $Fluid$Type): boolean
public "placeLiquid"(arg0: $LevelAccessor$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: $FluidState$Type): boolean
public "pickupBlock"(arg0: $LevelAccessor$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type): $ItemStack
public "getPickupSound"(arg0: $BlockState$Type): $Optional<($SoundEvent)>
public "moonlight$addAdditionalBehavior"(arg0: $AdditionalItemPlacement$Type): void
public "moonlight$getAdditionalBehavior"(): $AdditionalItemPlacement
public "moonlight$getClientAnimationExtension"(): any
public "moonlight$setClientAnimationExtension"(arg0: any): void
get "defaultInstance"(): $ItemStack
get "enchantmentValue"(): integer
get "pickupSound"(): $Optional<($SoundEvent)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BambooSpikesTippedItem$Type = ($BambooSpikesTippedItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BambooSpikesTippedItem_ = $BambooSpikesTippedItem$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/renderers/color/$DefaultWaterColor" {
import {$BlockColor, $BlockColor$Type} from "packages/net/minecraft/client/color/block/$BlockColor"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$ItemColor, $ItemColor$Type} from "packages/net/minecraft/client/color/item/$ItemColor"
import {$BlockAndTintGetter, $BlockAndTintGetter$Type} from "packages/net/minecraft/world/level/$BlockAndTintGetter"

export class $DefaultWaterColor implements $ItemColor, $BlockColor {

constructor()

public "getColor"(stack: $ItemStack$Type, color: integer): integer
public "getColor"(state: $BlockState$Type, reader: $BlockAndTintGetter$Type, pos: $BlockPos$Type, tint: integer): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DefaultWaterColor$Type = ($DefaultWaterColor);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DefaultWaterColor_ = $DefaultWaterColor$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/renderers/$SlimedRenderType" {
import {$RenderStateShard$OverlayStateShard, $RenderStateShard$OverlayStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$OverlayStateShard"
import {$RenderStateShard$TexturingStateShard, $RenderStateShard$TexturingStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$TexturingStateShard"
import {$RenderStateShard$LineStateShard, $RenderStateShard$LineStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$LineStateShard"
import {$RenderStateShard$TextureStateShard, $RenderStateShard$TextureStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$TextureStateShard"
import {$RenderStateShard$EmptyTextureStateShard, $RenderStateShard$EmptyTextureStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$EmptyTextureStateShard"
import {$RenderStateShard$LightmapStateShard, $RenderStateShard$LightmapStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$LightmapStateShard"
import {$RenderStateShard$LayeringStateShard, $RenderStateShard$LayeringStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$LayeringStateShard"
import {$RenderStateShard$WriteMaskStateShard, $RenderStateShard$WriteMaskStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$WriteMaskStateShard"
import {$Runnable, $Runnable$Type} from "packages/java/lang/$Runnable"
import {$RenderType$CompositeRenderType, $RenderType$CompositeRenderType$Type} from "packages/net/minecraft/client/renderer/$RenderType$CompositeRenderType"
import {$VertexFormat, $VertexFormat$Type} from "packages/com/mojang/blaze3d/vertex/$VertexFormat"
import {$RenderType, $RenderType$Type} from "packages/net/minecraft/client/renderer/$RenderType"
import {$RenderStateShard$OutputStateShard, $RenderStateShard$OutputStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$OutputStateShard"
import {$RenderStateShard$ColorLogicStateShard, $RenderStateShard$ColorLogicStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$ColorLogicStateShard"
import {$VertexFormat$Mode, $VertexFormat$Mode$Type} from "packages/com/mojang/blaze3d/vertex/$VertexFormat$Mode"
import {$RenderStateShard$ShaderStateShard, $RenderStateShard$ShaderStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$ShaderStateShard"
import {$RenderStateShard$DepthTestStateShard, $RenderStateShard$DepthTestStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$DepthTestStateShard"
import {$DrawBuffer, $DrawBuffer$Type} from "packages/com/jozufozu/flywheel/backend/instancing/$DrawBuffer"
import {$RenderStateShard$TransparencyStateShard, $RenderStateShard$TransparencyStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$TransparencyStateShard"
import {$RenderStateShard$CullStateShard, $RenderStateShard$CullStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$CullStateShard"

export class $SlimedRenderType extends $RenderType {
static readonly "BIG_BUFFER_SIZE": integer
static readonly "MEDIUM_BUFFER_SIZE": integer
static readonly "SMALL_BUFFER_SIZE": integer
static readonly "TRANSIENT_BUFFER_SIZE": integer
static readonly "LINES": $RenderType$CompositeRenderType
static readonly "LINE_STRIP": $RenderType$CompositeRenderType
 "sortOnUpload": boolean
static readonly "VIEW_SCALE_Z_EPSILON": float
static readonly "MAX_ENCHANTMENT_GLINT_SPEED_MILLIS": double
readonly "name": string
 "setupState": $Runnable
static readonly "NO_TRANSPARENCY": $RenderStateShard$TransparencyStateShard
static readonly "ADDITIVE_TRANSPARENCY": $RenderStateShard$TransparencyStateShard
static readonly "LIGHTNING_TRANSPARENCY": $RenderStateShard$TransparencyStateShard
static readonly "GLINT_TRANSPARENCY": $RenderStateShard$TransparencyStateShard
static readonly "CRUMBLING_TRANSPARENCY": $RenderStateShard$TransparencyStateShard
static readonly "TRANSLUCENT_TRANSPARENCY": $RenderStateShard$TransparencyStateShard
static readonly "NO_SHADER": $RenderStateShard$ShaderStateShard
static readonly "POSITION_COLOR_LIGHTMAP_SHADER": $RenderStateShard$ShaderStateShard
static readonly "POSITION_SHADER": $RenderStateShard$ShaderStateShard
static readonly "POSITION_COLOR_TEX_SHADER": $RenderStateShard$ShaderStateShard
static readonly "POSITION_TEX_SHADER": $RenderStateShard$ShaderStateShard
static readonly "POSITION_COLOR_TEX_LIGHTMAP_SHADER": $RenderStateShard$ShaderStateShard
static readonly "POSITION_COLOR_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_SOLID_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_CUTOUT_MIPPED_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_CUTOUT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_TRANSLUCENT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_TRANSLUCENT_MOVING_BLOCK_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_TRANSLUCENT_NO_CRUMBLING_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ARMOR_CUTOUT_NO_CULL_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_SOLID_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_CUTOUT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_CUTOUT_NO_CULL_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_CUTOUT_NO_CULL_Z_OFFSET_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ITEM_ENTITY_TRANSLUCENT_CULL_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_TRANSLUCENT_CULL_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_TRANSLUCENT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_TRANSLUCENT_EMISSIVE_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_SMOOTH_CUTOUT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_BEACON_BEAM_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_DECAL_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_NO_OUTLINE_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_SHADOW_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_ALPHA_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_EYES_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENERGY_SWIRL_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_LEASH_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_WATER_MASK_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_OUTLINE_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ARMOR_GLINT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ARMOR_ENTITY_GLINT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_GLINT_TRANSLUCENT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_GLINT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_GLINT_DIRECT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_GLINT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_GLINT_DIRECT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_CRUMBLING_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_TEXT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_TEXT_BACKGROUND_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_TEXT_INTENSITY_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_TEXT_SEE_THROUGH_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_TEXT_BACKGROUND_SEE_THROUGH_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_TEXT_INTENSITY_SEE_THROUGH_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_LIGHTNING_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_TRIPWIRE_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_END_PORTAL_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_END_GATEWAY_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_LINES_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_GUI_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_GUI_OVERLAY_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_GUI_TEXT_HIGHLIGHT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_GUI_GHOST_RECIPE_OVERLAY_SHADER": $RenderStateShard$ShaderStateShard
static readonly "BLOCK_SHEET_MIPPED": $RenderStateShard$TextureStateShard
static readonly "BLOCK_SHEET": $RenderStateShard$TextureStateShard
static readonly "NO_TEXTURE": $RenderStateShard$EmptyTextureStateShard
static readonly "DEFAULT_TEXTURING": $RenderStateShard$TexturingStateShard
static readonly "GLINT_TEXTURING": $RenderStateShard$TexturingStateShard
static readonly "ENTITY_GLINT_TEXTURING": $RenderStateShard$TexturingStateShard
static readonly "LIGHTMAP": $RenderStateShard$LightmapStateShard
static readonly "NO_LIGHTMAP": $RenderStateShard$LightmapStateShard
static readonly "OVERLAY": $RenderStateShard$OverlayStateShard
static readonly "NO_OVERLAY": $RenderStateShard$OverlayStateShard
static readonly "CULL": $RenderStateShard$CullStateShard
static readonly "NO_CULL": $RenderStateShard$CullStateShard
static readonly "NO_DEPTH_TEST": $RenderStateShard$DepthTestStateShard
static readonly "EQUAL_DEPTH_TEST": $RenderStateShard$DepthTestStateShard
static readonly "LEQUAL_DEPTH_TEST": $RenderStateShard$DepthTestStateShard
static readonly "GREATER_DEPTH_TEST": $RenderStateShard$DepthTestStateShard
static readonly "COLOR_DEPTH_WRITE": $RenderStateShard$WriteMaskStateShard
static readonly "COLOR_WRITE": $RenderStateShard$WriteMaskStateShard
static readonly "DEPTH_WRITE": $RenderStateShard$WriteMaskStateShard
static readonly "NO_LAYERING": $RenderStateShard$LayeringStateShard
static readonly "POLYGON_OFFSET_LAYERING": $RenderStateShard$LayeringStateShard
static readonly "VIEW_OFFSET_Z_LAYERING": $RenderStateShard$LayeringStateShard
static readonly "MAIN_TARGET": $RenderStateShard$OutputStateShard
static readonly "OUTLINE_TARGET": $RenderStateShard$OutputStateShard
static readonly "TRANSLUCENT_TARGET": $RenderStateShard$OutputStateShard
static readonly "PARTICLES_TARGET": $RenderStateShard$OutputStateShard
static readonly "WEATHER_TARGET": $RenderStateShard$OutputStateShard
static readonly "CLOUDS_TARGET": $RenderStateShard$OutputStateShard
static readonly "ITEM_ENTITY_TARGET": $RenderStateShard$OutputStateShard
static readonly "DEFAULT_LINE": $RenderStateShard$LineStateShard
static readonly "NO_COLOR_LOGIC": $RenderStateShard$ColorLogicStateShard
static readonly "OR_REVERSE_COLOR_LOGIC": $RenderStateShard$ColorLogicStateShard

constructor(s: string, vertexFormat: $VertexFormat$Type, mode: $VertexFormat$Mode$Type, i: integer, b: boolean, b1: boolean, runnable: $Runnable$Type, aSuper: $Runnable$Type)

public static "getDrawBuffer"(arg0: $RenderType$Type): $DrawBuffer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SlimedRenderType$Type = ($SlimedRenderType);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SlimedRenderType_ = $SlimedRenderType$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/blocks/$SpringLauncherHeadBlock" {
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$CollisionContext, $CollisionContext$Type} from "packages/net/minecraft/world/phys/shapes/$CollisionContext"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Mirror, $Mirror$Type} from "packages/net/minecraft/world/level/block/$Mirror"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$Rotation, $Rotation$Type} from "packages/net/minecraft/world/level/block/$Rotation"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"
import {$DirectionProperty, $DirectionProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$DirectionProperty"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$DirectionalBlock, $DirectionalBlock$Type} from "packages/net/minecraft/world/level/block/$DirectionalBlock"

export class $SpringLauncherHeadBlock extends $DirectionalBlock {
static readonly "FACING": $DirectionProperty
static readonly "SHORT": $BooleanProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(properties: $BlockBehaviour$Properties$Type)

public "propagatesSkylightDown"(state: $BlockState$Type, reader: $BlockGetter$Type, pos: $BlockPos$Type): boolean
public "getStateForPlacement"(context: $BlockPlaceContext$Type): $BlockState
public "getCloneItemStack"(level: $BlockGetter$Type, pos: $BlockPos$Type, state: $BlockState$Type): $ItemStack
public "playerWillDestroy"(worldIn: $Level$Type, pos: $BlockPos$Type, state: $BlockState$Type, player: $Player$Type): void
public "fallOn"(level: $Level$Type, state: $BlockState$Type, pos: $BlockPos$Type, entityIn: $Entity$Type, fallDistance: float): void
public "neighborChanged"(state: $BlockState$Type, worldIn: $Level$Type, pos: $BlockPos$Type, blockIn: $Block$Type, fromPos: $BlockPos$Type, isMoving: boolean): void
public "updateShape"(stateIn: $BlockState$Type, facing: $Direction$Type, facingState: $BlockState$Type, worldIn: $LevelAccessor$Type, currentPos: $BlockPos$Type, facingPos: $BlockPos$Type): $BlockState
public "onRemove"(state: $BlockState$Type, worldIn: $Level$Type, pos: $BlockPos$Type, newState: $BlockState$Type, isMoving: boolean): void
public "rotate"(state: $BlockState$Type, rot: $Rotation$Type): $BlockState
public "mirror"(state: $BlockState$Type, mirrorIn: $Mirror$Type): $BlockState
public "canSurvive"(state: $BlockState$Type, worldIn: $LevelReader$Type, pos: $BlockPos$Type): boolean
public "getShape"(state: $BlockState$Type, worldIn: $BlockGetter$Type, pos: $BlockPos$Type, context: $CollisionContext$Type): $VoxelShape
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SpringLauncherHeadBlock$Type = ($SpringLauncherHeadBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SpringLauncherHeadBlock_ = $SpringLauncherHeadBlock$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/map/$CustomMapDecoration" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$MapDecorationType, $MapDecorationType$Type} from "packages/net/mehvahdjukaar/moonlight/api/map/type/$MapDecorationType"

export class $CustomMapDecoration {

constructor(type: $MapDecorationType$Type<(any), (any)>, buffer: $FriendlyByteBuf$Type)
constructor(type: $MapDecorationType$Type<(any), (any)>, x: byte, y: byte, rot: byte, displayName: $Component$Type)

public "equals"(obj: any): boolean
public "hashCode"(): integer
public "getType"(): $MapDecorationType<(any), (any)>
public "getDisplayName"(): $Component
public "setDisplayName"(displayName: $Component$Type): void
public "setRot"(rot: byte): void
public "saveToBuffer"(buffer: $FriendlyByteBuf$Type): void
public "getRot"(): byte
public "getY"(): byte
public "setX"(x: byte): void
public "setY"(y: byte): void
public "getX"(): byte
get "type"(): $MapDecorationType<(any), (any)>
get "displayName"(): $Component
set "displayName"(value: $Component$Type)
set "rot"(value: byte)
get "rot"(): byte
get "y"(): byte
set "x"(value: byte)
set "y"(value: byte)
get "x"(): byte
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CustomMapDecoration$Type = ($CustomMapDecoration);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CustomMapDecoration_ = $CustomMapDecoration$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/events/behaviors/$DoubleCakeConversion" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$ItemUseOnBlock, $ItemUseOnBlock$Type} from "packages/net/mehvahdjukaar/amendments/events/behaviors/$ItemUseOnBlock"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $DoubleCakeConversion implements $ItemUseOnBlock {


public "isEnabled"(): boolean
public "getTooltip"(): $MutableComponent
public "placesBlock"(): boolean
public "appliesToItem"(item: $Item$Type): boolean
public "altersWorld"(): boolean
public "tryPerformingAction"(level: $Level$Type, player: $Player$Type, hand: $InteractionHand$Type, stack: $ItemStack$Type, hit: $BlockHitResult$Type): $InteractionResult
public "shouldBlockMapToItem"(item: $Item$Type): boolean
get "enabled"(): boolean
get "tooltip"(): $MutableComponent
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DoubleCakeConversion$Type = ($DoubleCakeConversion);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DoubleCakeConversion_ = $DoubleCakeConversion$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/particles/$RotationTrailParticle" {
import {$SimpleAnimatedParticle, $SimpleAnimatedParticle$Type} from "packages/net/minecraft/client/particle/$SimpleAnimatedParticle"

export class $RotationTrailParticle extends $SimpleAnimatedParticle {
static readonly "SPEED": float
static readonly "LIFE": integer
 "x": double
 "y": double
 "z": double
 "xd": double
 "yd": double
 "zd": double
 "age": integer
 "rCol": float
 "gCol": float
 "bCol": float


public static "increment"(age: float, step: integer): float
public "setFadeColor"(pRgb: integer): void
public "getLightColor"(pPartialTick: float): integer
public "move"(x: double, y: double, z: double): void
public "tick"(): void
set "fadeColor"(value: integer)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RotationTrailParticle$Type = ($RotationTrailParticle);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RotationTrailParticle_ = $RotationTrailParticle$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/item/additional_placements/$BlockPlacerItem" {
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$FoodProperties, $FoodProperties$Type} from "packages/net/minecraft/world/food/$FoodProperties"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$UseOnContext, $UseOnContext$Type} from "packages/net/minecraft/world/item/context/$UseOnContext"
import {$BlockItem, $BlockItem$Type} from "packages/net/minecraft/world/item/$BlockItem"
import {$SoundType, $SoundType$Type} from "packages/net/minecraft/world/level/block/$SoundType"
import {$AdditionalItemPlacement, $AdditionalItemPlacement$Type} from "packages/net/mehvahdjukaar/moonlight/api/item/additional_placements/$AdditionalItemPlacement"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $BlockPlacerItem extends $BlockItem {
static readonly "BLOCK_ENTITY_TAG": string
static readonly "BLOCK_STATE_TAG": string
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(pBlock: $Block$Type, pProperties: $Item$Properties$Type)

public static "get"(): $BlockPlacerItem
public "getDescriptionId"(): string
public "isEdible"(): boolean
public "getFoodProperties"(): $FoodProperties
public "getBlock"(): $Block
public "mimicPlace"(pContext: $BlockPlaceContext$Type, toPlace: $Block$Type, overrideSound: $SoundType$Type): $InteractionResult
public "mimicUseOn"(pContext: $UseOnContext$Type, toPlace: $Block$Type, foodProperties: $FoodProperties$Type): $InteractionResult
public "mimicGetPlacementState"(pContext: $BlockPlaceContext$Type, toPlace: $Block$Type): $BlockState
public "m_40610_"(pContext: $BlockPlaceContext$Type, pState: $BlockState$Type): boolean
public "registerBlocks"(pBlockToItemMap: $Map$Type<($Block$Type), ($Item$Type)>, pItem: $Item$Type): void
public "moonlight$addAdditionalBehavior"(arg0: $AdditionalItemPlacement$Type): void
public "moonlight$getAdditionalBehavior"(): $AdditionalItemPlacement
public "moonlight$getClientAnimationExtension"(): any
public "moonlight$setClientAnimationExtension"(arg0: any): void
get "descriptionId"(): string
get "edible"(): boolean
get "foodProperties"(): $FoodProperties
get "block"(): $Block
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BlockPlacerItem$Type = ($BlockPlacerItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BlockPlacerItem_ = $BlockPlacerItem$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/platform/$RegHelper$SpawnPlacementEvent" {
import {$SpawnPlacements$Type, $SpawnPlacements$Type$Type} from "packages/net/minecraft/world/entity/$SpawnPlacements$Type"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$SpawnPlacements$SpawnPredicate, $SpawnPlacements$SpawnPredicate$Type} from "packages/net/minecraft/world/entity/$SpawnPlacements$SpawnPredicate"
import {$Heightmap$Types, $Heightmap$Types$Type} from "packages/net/minecraft/world/level/levelgen/$Heightmap$Types"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export interface $RegHelper$SpawnPlacementEvent {

 "register"<T extends $Entity>(arg0: $EntityType$Type<(T)>, arg1: $SpawnPlacements$Type$Type, arg2: $Heightmap$Types$Type, arg3: $SpawnPlacements$SpawnPredicate$Type<(T)>): void

(arg0: $EntityType$Type<(T)>, arg1: $SpawnPlacements$Type$Type, arg2: $Heightmap$Types$Type, arg3: $SpawnPlacements$SpawnPredicate$Type<(T)>): void
}

export namespace $RegHelper$SpawnPlacementEvent {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RegHelper$SpawnPlacementEvent$Type = ($RegHelper$SpawnPlacementEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RegHelper$SpawnPlacementEvent_ = $RegHelper$SpawnPlacementEvent$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/set/$BlockType" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$SoundType, $SoundType$Type} from "packages/net/minecraft/world/level/block/$SoundType"
import {$ItemLike, $ItemLike$Type} from "packages/net/minecraft/world/level/$ItemLike"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Map$Entry, $Map$Entry$Type} from "packages/java/util/$Map$Entry"

export class $BlockType {
readonly "id": $ResourceLocation


public "toString"(): string
public "getTypeName"(): string
public "getId"(): $ResourceLocation
public "getChildren"(): $Set<($Map$Entry<(string), (any)>)>
public "getChild"(key: string): any
public "getReadableName"(): string
public "addChild"(genericName: string, obj: any): void
public "getNamespace"(): string
public "getVariantId"(baseName: string, prefix: boolean): string
public "getVariantId"(postfix: string, prefix: string): string
public "getVariantId"(baseName: string): string
public "isVanilla"(): boolean
public "getTranslationKey"(): string
public "getSound"(): $SoundType
public "getAppendableId"(): string
public static "changeType"(current: any, originalMat: $BlockType$Type, destinationMat: $BlockType$Type): any
public "getItemOfThis"(key: string): $Item
public static "changeItemType"(current: $Item$Type, originalMat: $BlockType$Type, destinationMat: $BlockType$Type): $Item
public "getChildKey"(child: any): string
public "getBlockOfThis"(key: string): $Block
public "mainChild"(): $ItemLike
public static "changeBlockType"(current: $Block$Type, originalMat: $BlockType$Type, destinationMat: $BlockType$Type): $Block
get "typeName"(): string
get "id"(): $ResourceLocation
get "children"(): $Set<($Map$Entry<(string), (any)>)>
get "readableName"(): string
get "namespace"(): string
get "vanilla"(): boolean
get "translationKey"(): string
get "sound"(): $SoundType
get "appendableId"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BlockType$Type = ($BlockType);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BlockType_ = $BlockType$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/block/$ISoftFluidConsumer" {
import {$SoftFluidStack, $SoftFluidStack$Type} from "packages/net/mehvahdjukaar/moonlight/api/fluids/$SoftFluidStack"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export interface $ISoftFluidConsumer {

 "tryAcceptingFluid"(arg0: $Level$Type, arg1: $BlockState$Type, arg2: $BlockPos$Type, arg3: $SoftFluidStack$Type): boolean

(arg0: $Level$Type, arg1: $BlockState$Type, arg2: $BlockPos$Type, arg3: $SoftFluidStack$Type): boolean
}

export namespace $ISoftFluidConsumer {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ISoftFluidConsumer$Type = ($ISoftFluidConsumer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ISoftFluidConsumer_ = $ISoftFluidConsumer$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/network/$ServerBoundSyncCannonPacket" {
import {$Message, $Message$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/network/$Message"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$ChannelHandler$Context, $ChannelHandler$Context$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/network/$ChannelHandler$Context"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $ServerBoundSyncCannonPacket implements $Message {

constructor(buf: $FriendlyByteBuf$Type)
constructor(yaw: float, pitch: float, firePower: byte, fire: boolean, pos: $BlockPos$Type)

public "handle"(context: $ChannelHandler$Context$Type): void
public "writeToBuffer"(buf: $FriendlyByteBuf$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ServerBoundSyncCannonPacket$Type = ($ServerBoundSyncCannonPacket);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ServerBoundSyncCannonPacket_ = $ServerBoundSyncCannonPacket$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/commands/$ChangeGlobeSeedCommand" {
import {$CommandSourceStack, $CommandSourceStack$Type} from "packages/net/minecraft/commands/$CommandSourceStack"
import {$Command, $Command$Type} from "packages/com/mojang/brigadier/$Command"
import {$ArgumentBuilder, $ArgumentBuilder$Type} from "packages/com/mojang/brigadier/builder/$ArgumentBuilder"
import {$CommandDispatcher, $CommandDispatcher$Type} from "packages/com/mojang/brigadier/$CommandDispatcher"
import {$CommandContext, $CommandContext$Type} from "packages/com/mojang/brigadier/context/$CommandContext"

export class $ChangeGlobeSeedCommand implements $Command<($CommandSourceStack)> {

constructor()

public "run"(context: $CommandContext$Type<($CommandSourceStack$Type)>): integer
public static "register"(dispatcher: $CommandDispatcher$Type<($CommandSourceStack$Type)>): $ArgumentBuilder<($CommandSourceStack), (any)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ChangeGlobeSeedCommand$Type = ($ChangeGlobeSeedCommand);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ChangeGlobeSeedCommand_ = $ChangeGlobeSeedCommand$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/screens/$BlackBoardScreen" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$List, $List$Type} from "packages/java/util/$List"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$BlackboardBlockTile, $BlackboardBlockTile$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$BlackboardBlockTile"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $BlackBoardScreen extends $Screen {
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering


public static "open"(sign: $BlackboardBlockTile$Type): void
public "onClose"(): void
public "removed"(): void
public "render"(graphics: $GuiGraphics$Type, mouseX: integer, mouseY: integer, partialTicks: float): void
public "tick"(): void
public "updateBlackboard"(x: integer, y: integer, newColor: byte): void
public "getSelectedColor"(): byte
public "addHistory"(x: integer, y: integer, oldColor: byte): void
public "onButtonDragged"(mx: double, my: double, buttonValue: byte): void
public "setSelectedColor"(color: byte): void
public "saveHistoryStep"(): void
get "selectedColor"(): byte
set "selectedColor"(value: byte)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BlackBoardScreen$Type = ($BlackBoardScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BlackBoardScreen_ = $BlackBoardScreen$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/particles/$SplashingLiquidParticle" {
import {$WaterDropParticle, $WaterDropParticle$Type} from "packages/net/minecraft/client/particle/$WaterDropParticle"

export class $SplashingLiquidParticle extends $WaterDropParticle {
 "x": double
 "y": double
 "z": double
 "xd": double
 "yd": double
 "zd": double
 "age": integer
 "rCol": float
 "gCol": float
 "bCol": float


}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SplashingLiquidParticle$Type = ($SplashingLiquidParticle);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SplashingLiquidParticle_ = $SplashingLiquidParticle$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/blocks/$SpeakerBlock" {
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$EntityBlock, $EntityBlock$Type} from "packages/net/minecraft/world/level/block/$EntityBlock"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Mirror, $Mirror$Type} from "packages/net/minecraft/world/level/block/$Mirror"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"
import {$DirectionProperty, $DirectionProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$DirectionProperty"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$Rotation, $Rotation$Type} from "packages/net/minecraft/world/level/block/$Rotation"
import {$BlockEntityTicker, $BlockEntityTicker$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityTicker"
import {$GameEventListener, $GameEventListener$Type} from "packages/net/minecraft/world/level/gameevent/$GameEventListener"

export class $SpeakerBlock extends $Block implements $EntityBlock {
static readonly "FACING": $DirectionProperty
static readonly "POWERED": $BooleanProperty
static readonly "ANTIQUE": $BooleanProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(properties: $BlockBehaviour$Properties$Type)

public "getStateForPlacement"(context: $BlockPlaceContext$Type): $BlockState
public "setPlacedBy"(worldIn: $Level$Type, pos: $BlockPos$Type, state: $BlockState$Type, placer: $LivingEntity$Type, stack: $ItemStack$Type): void
public "updatePower"(state: $BlockState$Type, world: $Level$Type, pos: $BlockPos$Type): void
public "neighborChanged"(state: $BlockState$Type, world: $Level$Type, pos: $BlockPos$Type, neighborBlock: $Block$Type, fromPos: $BlockPos$Type, moving: boolean): void
public "triggerEvent"(state: $BlockState$Type, world: $Level$Type, pos: $BlockPos$Type, eventID: integer, eventParam: integer): boolean
public "use"(state: $BlockState$Type, level: $Level$Type, pos: $BlockPos$Type, player: $Player$Type, hand: $InteractionHand$Type, hit: $BlockHitResult$Type): $InteractionResult
public "rotate"(state: $BlockState$Type, rot: $Rotation$Type): $BlockState
public "mirror"(state: $BlockState$Type, mirrorIn: $Mirror$Type): $BlockState
public "newBlockEntity"(pPos: $BlockPos$Type, pState: $BlockState$Type): $BlockEntity
public "getTicker"<T extends $BlockEntity>(arg0: $Level$Type, arg1: $BlockState$Type, arg2: $BlockEntityType$Type<(T)>): $BlockEntityTicker<(T)>
public "getListener"<T extends $BlockEntity>(arg0: $ServerLevel$Type, arg1: T): $GameEventListener
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SpeakerBlock$Type = ($SpeakerBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SpeakerBlock_ = $SpeakerBlock$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$BlackboardBlockTile" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$IOnePlayerGui, $IOnePlayerGui$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/$IOnePlayerGui"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$Connection, $Connection$Type} from "packages/net/minecraft/network/$Connection"
import {$ModelData, $ModelData$Type} from "packages/net/minecraftforge/client/model/data/$ModelData"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$BlackboardManager$Key, $BlackboardManager$Key$Type} from "packages/net/mehvahdjukaar/supplementaries/client/$BlackboardManager$Key"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$ExtraModelData, $ExtraModelData$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$ExtraModelData"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ClientboundBlockEntityDataPacket, $ClientboundBlockEntityDataPacket$Type} from "packages/net/minecraft/network/protocol/game/$ClientboundBlockEntityDataPacket"
import {$ExtraModelData$Builder, $ExtraModelData$Builder$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$ExtraModelData$Builder"
import {$IExtraModelDataProvider, $IExtraModelDataProvider$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$IExtraModelDataProvider"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$ModelDataKey, $ModelDataKey$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$ModelDataKey"
import {$IOwnerProtected, $IOwnerProtected$Type} from "packages/net/mehvahdjukaar/moonlight/api/block/$IOwnerProtected"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$IWaxable, $IWaxable$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/$IWaxable"

export class $BlackboardBlockTile extends $BlockEntity implements $IOwnerProtected, $IOnePlayerGui, $IWaxable, $IExtraModelDataProvider {
static readonly "BLACKBOARD_KEY": $ModelDataKey<($BlackboardManager$Key)>
 "blockState": $BlockState

constructor(pos: $BlockPos$Type, state: $BlockState$Type)

public "clear"(): void
public "isEmpty"(): boolean
public "getOwner"(): $UUID
public "setOwner"(owner: $UUID$Type): void
public "openScreen"(level: $Level$Type, pos: $BlockPos$Type, player: $Player$Type): void
public "isWaxed"(): boolean
public "savePixels"(compound: $CompoundTag$Type): $CompoundTag
public "setWaxed"(b: boolean): void
public "setChanged"(): void
public "setPixels"(pixels: ((byte)[])[]): void
public "refreshTextureKey"(): void
public "getTextureKey"(): $BlackboardManager$Key
public "loadFromTag"(compound: $CompoundTag$Type): void
public static "unpackPixels"(packed: (long)[]): ((byte)[])[]
public static "packPixelsToString"(packed: (long)[]): string
public static "packPixels"(pixels: ((byte)[])[]): (long)[]
public "setPlayerWhoMayEdit"(playerWhoMayEdit: $UUID$Type): void
public "getPlayerWhoMayEdit"(): $UUID
public static "unpackPixelsFromString"(packed: string): (long)[]
public static "unpackPixelsFromStringWhiteOnly"(packed: string): (long)[]
public static "packPixelsToStringWhiteOnly"(packed: (long)[]): string
public "getUpdatePacket"(): $ClientboundBlockEntityDataPacket
public "getPixel"(xx: integer, yy: integer): byte
public "load"(compound: $CompoundTag$Type): void
public "m_183515_"(compound: $CompoundTag$Type): void
public "getDirection"(): $Direction
public "setPixel"(x: integer, y: integer, b: byte): void
public "getExtraModelData"(): $ExtraModelData
public "afterDataPacket"(oldData: $ExtraModelData$Type): void
public "getUpdateTag"(): $CompoundTag
public "isPublic"(): boolean
public "isOwnedBy"(player: $Player$Type): boolean
public "isAccessibleBy"(player: $Player$Type): boolean
public "loadOwner"(tag: $CompoundTag$Type): void
public "saveOwner"(tag: $CompoundTag$Type): void
public "isNotOwnedBy"(player: $Player$Type): boolean
public "tryOpeningEditGui"(player: $ServerPlayer$Type, pos: $BlockPos$Type): boolean
public "playerIsTooFarAwayToEdit"(level: $Level$Type, pos: $BlockPos$Type, uUID: $UUID$Type): boolean
public "shouldUseContainerMenu"(): boolean
public "validatePlayerWhoMayEdit"(level: $Level$Type, pos: $BlockPos$Type): void
public "isOtherPlayerEditing"(player: $Player$Type): boolean
public "tryWaxing"(level: $Level$Type, pos: $BlockPos$Type, player: $Player$Type, hand: $InteractionHand$Type): $InteractionResult
public "addExtraModelData"(builder: $ExtraModelData$Builder$Type): void
public "requestModelReload"(): void
public "onDataPacket"(net: $Connection$Type, pkt: $ClientboundBlockEntityDataPacket$Type): void
public "getModelData"(): $ModelData
public "openScreen"(level: $Level$Type, pos: $BlockPos$Type, player: $Player$Type, direction: $Direction$Type): void
public "sendOpenGuiPacket"(level: $Level$Type, pos: $BlockPos$Type, player: $Player$Type, hitFace: $Direction$Type): void
public "sendOpenGuiPacket"(level: $Level$Type, pos: $BlockPos$Type, player: $Player$Type): void
get "empty"(): boolean
get "owner"(): $UUID
set "owner"(value: $UUID$Type)
get "waxed"(): boolean
set "waxed"(value: boolean)
set "pixels"(value: ((byte)[])[])
get "textureKey"(): $BlackboardManager$Key
set "playerWhoMayEdit"(value: $UUID$Type)
get "playerWhoMayEdit"(): $UUID
get "updatePacket"(): $ClientboundBlockEntityDataPacket
get "direction"(): $Direction
get "extraModelData"(): $ExtraModelData
get "updateTag"(): $CompoundTag
get "public"(): boolean
get "modelData"(): $ModelData
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BlackboardBlockTile$Type = ($BlackboardBlockTile);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BlackboardBlockTile_ = $BlackboardBlockTile$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/misc/songs/$SongsManager" {
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$Song, $Song$Type} from "packages/net/mehvahdjukaar/supplementaries/common/misc/songs/$Song"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$SoundInstance, $SoundInstance$Type} from "packages/net/minecraft/client/resources/sounds/$SoundInstance"
import {$NoteBlockInstrument, $NoteBlockInstrument$Type} from "packages/net/minecraft/world/level/block/state/properties/$NoteBlockInstrument"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$SimpleJsonResourceReloadListener, $SimpleJsonResourceReloadListener$Type} from "packages/net/minecraft/server/packs/resources/$SimpleJsonResourceReloadListener"
import {$InstrumentItem, $InstrumentItem$Type} from "packages/net/mehvahdjukaar/supplementaries/common/items/$InstrumentItem"
import {$List, $List$Type} from "packages/java/util/$List"
import {$SongsManager$Source, $SongsManager$Source$Type} from "packages/net/mehvahdjukaar/supplementaries/common/misc/songs/$SongsManager$Source"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $SongsManager extends $SimpleJsonResourceReloadListener {
static readonly "RELOAD_INSTANCE": $SongsManager

constructor()

public static "playRandomSong"(stack: $ItemStack$Type, instrument: $InstrumentItem$Type, entity: $LivingEntity$Type, timeSinceStarted: long): void
public static "playSong"(instrumentItem: $InstrumentItem$Type, entity: $LivingEntity$Type, sandstorm: string, timeSinceStarted: long): boolean
public static "playSong"(instrument: $InstrumentItem$Type, entity: $LivingEntity$Type, song: $Song$Type, timeSinceStarted: long): boolean
public static "recordNoteFromNoteBlock"(levelAccessor: $LevelAccessor$Type, pos: $BlockPos$Type): void
public static "recordNoteFromSound"(sound: $SoundInstance$Type, name: string): void
public static "startRecording"(source: $SongsManager$Source$Type, whitelist: ($NoteBlockInstrument$Type)[]): void
public static "stopRecording"(level: $Level$Type, name: string, speedup: integer): string
public static "setCurrentlyPlaying"(id: $UUID$Type, songKey: string): $Song
public static "clearCurrentlyPlaying"(id: $UUID$Type): void
public static "acceptClientSongs"(songs: $List$Type<($Song$Type)>): void
public static "sendDataToClient"(player: $ServerPlayer$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SongsManager$Type = ($SongsManager);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SongsManager_ = $SongsManager$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/integration/$AlexCavesCompat" {
import {$SoftFluidStack, $SoftFluidStack$Type} from "packages/net/mehvahdjukaar/moonlight/api/fluids/$SoftFluidStack"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $AlexCavesCompat {

constructor()

public static "acidDamage"(fluid: $SoftFluidStack$Type, level: $Level$Type, pos: $BlockPos$Type, state: $BlockState$Type, entity: $Entity$Type): void
public static "acidParticles"(fluid: $SoftFluidStack$Type, level: $Level$Type, pos: $BlockPos$Type, rand: $RandomSource$Type, height: double): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AlexCavesCompat$Type = ($AlexCavesCompat);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AlexCavesCompat_ = $AlexCavesCompat$Type;
}}
declare module "packages/net/mehvahdjukaar/dummmmmmy/common/$DummyMobType" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MobType, $MobType$Type} from "packages/net/minecraft/world/entity/$MobType"

export class $DummyMobType extends $Enum<($DummyMobType)> {
static readonly "UNDEFINED": $DummyMobType
static readonly "UNDEAD": $DummyMobType
static readonly "WATER": $DummyMobType
static readonly "ILLAGER": $DummyMobType
static readonly "ARTHROPOD": $DummyMobType
static readonly "SCARECROW": $DummyMobType
static readonly "DECOY": $DummyMobType


public static "get"(headStack: $ItemStack$Type): $DummyMobType
public static "values"(): ($DummyMobType)[]
public static "valueOf"(name: string): $DummyMobType
public "getType"(): $MobType
get "type"(): $MobType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DummyMobType$Type = (("illager") | ("undead") | ("arthropod") | ("decoy") | ("water") | ("scarecrow") | ("undefined")) | ($DummyMobType);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DummyMobType_ = $DummyMobType$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/integration/$CompatObjects" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Enchantment, $Enchantment$Type} from "packages/net/minecraft/world/item/enchantment/$Enchantment"
import {$ParticleType, $ParticleType$Type} from "packages/net/minecraft/core/particles/$ParticleType"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"

export class $CompatObjects {
static readonly "WALL_LANTERN": $Supplier<($Block)>
static readonly "DIRECTIONAL_CAKE": $Supplier<($Block)>
static readonly "COPPER_LANTERN": $Supplier<($Block)>
static readonly "CHANDELIER": $Supplier<($Block)>
static readonly "SOUL_CHANDELIER": $Supplier<($Block)>
static readonly "GLOW_CHANDELIER": $Supplier<($Block)>
static readonly "ENDER_CHANDELIER": $Supplier<($Block)>
static readonly "SAPPY_MAPLE_LOG": $Supplier<($Block)>
static readonly "SAPPY_MAPLE_WOOD": $Supplier<($Block)>
static readonly "TATER": $Supplier<($Block)>
static readonly "TOMATO_CROP": $Supplier<($Block)>
static readonly "ENDER_FLAME": $Supplier<($ParticleType<(any)>)>
static readonly "GLOW_FLAME": $Supplier<($ParticleType<(any)>)>
static readonly "NETHER_BRASS_FLAME": $Supplier<($ParticleType<(any)>)>
static readonly "SMALL_SOUL_FLAME": $Supplier<($ParticleType<(any)>)>
static readonly "SOUL_CANDLE_ITEM": $Supplier<($Item)>
static readonly "SOUL_CANDLE": $Supplier<($Block)>
static readonly "SPECTACLE_CANDLE_ITEM": $Supplier<($Item)>
static readonly "SPECTACLE_CANDLE": $Supplier<($Block)>
static readonly "SUGAR_WATER": $Supplier<($Block)>
static readonly "MILK_CAULDRON": $Supplier<($Block)>
static readonly "TOME": $Supplier<($Item)>
static readonly "GENE_BOOK": $Supplier<($Item)>
static readonly "BARBARIC_HELMET": $Supplier<($Item)>
static readonly "ATLAS": $Supplier<($Item)>
static readonly "RICH_SOIL": $Supplier<($Block)>
static readonly "TOMATOES": $Supplier<($Block)>
static readonly "RICH_SOUL_SOIL": $Supplier<($Block)>
static readonly "SHARPNEL": $Supplier<($ParticleType<(any)>)>
static readonly "STUNNED_EFFECT": $Supplier<($MobEffect)>
static readonly "END_VEIL": $Supplier<($Enchantment)>
static readonly "ALEX_NUKE": $Supplier<($EntityType<(any)>)>
static readonly "NUKE_BLOCK": $Supplier<($Block)>

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CompatObjects$Type = ($CompatObjects);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CompatObjects_ = $CompatObjects$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/renderers/$CapturedMobCache" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$EndCrystal, $EndCrystal$Type} from "packages/net/minecraft/world/entity/boss/enderdragon/$EndCrystal"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $CapturedMobCache {

constructor()

public static "clear"(): void
public static "getEndCrystal"(level: $Level$Type): $EndCrystal
public static "tickCrystal"(): void
public static "addMob"(e: $Entity$Type): void
public static "getOrCreateCachedMob"(id: $UUID$Type, tag: $CompoundTag$Type): $Entity
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CapturedMobCache$Type = ($CapturedMobCache);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CapturedMobCache_ = $CapturedMobCache$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/particles/$SlingshotParticle" {
import {$ParticleRenderType, $ParticleRenderType$Type} from "packages/net/minecraft/client/particle/$ParticleRenderType"
import {$TextureSheetParticle, $TextureSheetParticle$Type} from "packages/net/minecraft/client/particle/$TextureSheetParticle"

export class $SlingshotParticle extends $TextureSheetParticle {
 "x": double
 "y": double
 "z": double
 "xd": double
 "yd": double
 "zd": double
 "age": integer
 "rCol": float
 "gCol": float
 "bCol": float


public "getRenderType"(): $ParticleRenderType
public "tick"(): void
get "renderType"(): $ParticleRenderType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SlingshotParticle$Type = ($SlingshotParticle);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SlingshotParticle_ = $SlingshotParticle$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/screens/$CannonScreen" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$ContainerListener, $ContainerListener$Type} from "packages/net/minecraft/world/inventory/$ContainerListener"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$AbstractContainerScreen, $AbstractContainerScreen$Type} from "packages/net/minecraft/client/gui/screens/inventory/$AbstractContainerScreen"
import {$CannonContainerMenu, $CannonContainerMenu$Type} from "packages/net/mehvahdjukaar/supplementaries/common/inventories/$CannonContainerMenu"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$List, $List$Type} from "packages/java/util/$List"
import {$AbstractContainerMenu, $AbstractContainerMenu$Type} from "packages/net/minecraft/world/inventory/$AbstractContainerMenu"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"

export class $CannonScreen extends $AbstractContainerScreen<($CannonContainerMenu)> implements $ContainerListener {
static readonly "INVENTORY_LOCATION": $ResourceLocation
static readonly "SLOT_ITEM_BLIT_OFFSET": integer
 "imageWidth": integer
 "hoveredSlot": $Slot
 "leftPos": integer
 "topPos": integer
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering

constructor(menu: $CannonContainerMenu$Type, inventory: $Inventory$Type, text: $Component$Type)

public "keyPressed"(key: integer, a: integer, b: integer): boolean
public "m_7856_"(): void
public "removed"(): void
public "render"(graphics: $GuiGraphics$Type, mouseX: integer, mouseY: integer, partialTicks: float): void
public "m_181908_"(): void
public "slotChanged"(container: $AbstractContainerMenu$Type, slot: integer, stack: $ItemStack$Type): void
public "dataChanged"(container: $AbstractContainerMenu$Type, dataSlotIndex: integer, value: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CannonScreen$Type = ($CannonScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CannonScreen_ = $CannonScreen$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/integration/create/$PresentRecipientAttribute" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$ItemAttribute, $ItemAttribute$Type} from "packages/com/simibubi/create/content/logistics/filter/$ItemAttribute"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $PresentRecipientAttribute implements $ItemAttribute {
static readonly "EMPTY": $PresentRecipientAttribute

constructor(recipient: string)

public "getTranslationParameters"(): (any)[]
public "writeNBT"(compoundTag: $CompoundTag$Type): void
public "readNBT"(compoundTag: $CompoundTag$Type): $ItemAttribute
public "listAttributesOf"(itemStack: $ItemStack$Type): $List<($ItemAttribute)>
public "appliesTo"(itemStack: $ItemStack$Type): boolean
public "getTranslationKey"(): string
public "format"(arg0: boolean): $MutableComponent
public static "register"(arg0: $ItemAttribute$Type): $ItemAttribute
public "canRead"(arg0: $CompoundTag$Type): boolean
public "getNBTKey"(): string
public "listAttributesOf"(arg0: $ItemStack$Type, arg1: $Level$Type): $List<($ItemAttribute)>
public static "fromNBT"(arg0: $CompoundTag$Type): $ItemAttribute
public "appliesTo"(arg0: $ItemStack$Type, arg1: $Level$Type): boolean
public "serializeNBT"(arg0: $CompoundTag$Type): void
get "translationParameters"(): (any)[]
get "translationKey"(): string
get "nBTKey"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PresentRecipientAttribute$Type = ($PresentRecipientAttribute);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PresentRecipientAttribute_ = $PresentRecipientAttribute$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/renderers/items/$SlingshotItemOverlayRenderer" {
import {$Font, $Font$Type} from "packages/net/minecraft/client/gui/$Font"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$IItemDecoratorRenderer, $IItemDecoratorRenderer$Type} from "packages/net/mehvahdjukaar/moonlight/api/item/$IItemDecoratorRenderer"

export class $SlingshotItemOverlayRenderer implements $IItemDecoratorRenderer {

constructor()

public "render"(graphics: $GuiGraphics$Type, font: $Font$Type, stack: $ItemStack$Type, x: integer, y: integer): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SlingshotItemOverlayRenderer$Type = ($SlingshotItemOverlayRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SlingshotItemOverlayRenderer_ = $SlingshotItemOverlayRenderer$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/client/particles/$ColoredSplashParticle" {
import {$WaterDropParticle, $WaterDropParticle$Type} from "packages/net/minecraft/client/particle/$WaterDropParticle"

export class $ColoredSplashParticle extends $WaterDropParticle {
 "x": double
 "y": double
 "z": double
 "xd": double
 "yd": double
 "zd": double
 "age": integer
 "rCol": float
 "gCol": float
 "bCol": float


}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ColoredSplashParticle$Type = ($ColoredSplashParticle);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ColoredSplashParticle_ = $ColoredSplashParticle$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/blocks/$SpringLauncherBlock" {
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$CollisionContext, $CollisionContext$Type} from "packages/net/minecraft/world/phys/shapes/$CollisionContext"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Mirror, $Mirror$Type} from "packages/net/minecraft/world/level/block/$Mirror"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$PushReaction, $PushReaction$Type} from "packages/net/minecraft/world/level/material/$PushReaction"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$Rotation, $Rotation$Type} from "packages/net/minecraft/world/level/block/$Rotation"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"
import {$DirectionProperty, $DirectionProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$DirectionProperty"

export class $SpringLauncherBlock extends $Block {
static readonly "FACING": $DirectionProperty
static readonly "EXTENDED": $BooleanProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(properties: $BlockBehaviour$Properties$Type)

public "propagatesSkylightDown"(state: $BlockState$Type, reader: $BlockGetter$Type, pos: $BlockPos$Type): boolean
public "getStateForPlacement"(context: $BlockPlaceContext$Type): $BlockState
public "setPlacedBy"(level: $Level$Type, pos: $BlockPos$Type, state: $BlockState$Type, placer: $LivingEntity$Type, stack: $ItemStack$Type): void
public "getPistonPushReaction"(state: $BlockState$Type): $PushReaction
public "neighborChanged"(state: $BlockState$Type, level: $Level$Type, pos: $BlockPos$Type, neighborBlock: $Block$Type, fromPos: $BlockPos$Type, moving: boolean): void
public "useShapeForLightOcclusion"(state: $BlockState$Type): boolean
public "rotate"(state: $BlockState$Type, rot: $Rotation$Type): $BlockState
public "mirror"(state: $BlockState$Type, mirrorIn: $Mirror$Type): $BlockState
public "getShape"(state: $BlockState$Type, level: $BlockGetter$Type, pos: $BlockPos$Type, context: $CollisionContext$Type): $VoxelShape
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SpringLauncherBlock$Type = ($SpringLauncherBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SpringLauncherBlock_ = $SpringLauncherBlock$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/common/entity/$FallingLanternEntity" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$ImprovedFallingBlockEntity, $ImprovedFallingBlockEntity$Type} from "packages/net/mehvahdjukaar/moonlight/api/entity/$ImprovedFallingBlockEntity"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$FallingBlockEntity, $FallingBlockEntity$Type} from "packages/net/minecraft/world/entity/item/$FallingBlockEntity"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $FallingLanternEntity extends $ImprovedFallingBlockEntity {
 "blockState": $BlockState
 "time": integer
 "dropItem": boolean
 "cancelDrop": boolean
 "blockData": $CompoundTag
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(level: $Level$Type, pos: $BlockPos$Type, blockState: $BlockState$Type, yOffset: double)
constructor(level: $Level$Type)
constructor(type: $EntityType$Type<($FallingLanternEntity$Type)>, level: $Level$Type)

public static "fall"(level: $Level$Type, pos: $BlockPos$Type, state: $BlockState$Type, yOffset: double): $FallingBlockEntity
public static "createFallingLantern"(state: $BlockState$Type, pos: $BlockPos$Type, level: $Level$Type): boolean
public "causeFallDamage"(height: float, amount: float, source: $DamageSource$Type): boolean
public static "canSurviveCeilingAndMaybeFall"(state: $BlockState$Type, pos: $BlockPos$Type, worldIn: $LevelReader$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FallingLanternEntity$Type = ($FallingLanternEntity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FallingLanternEntity_ = $FallingLanternEntity$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/events/forge/$ILightningStruckBlockEventImpl" {
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$ILightningStruckBlockEvent, $ILightningStruckBlockEvent$Type} from "packages/net/mehvahdjukaar/moonlight/api/events/$ILightningStruckBlockEvent"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$LightningBolt, $LightningBolt$Type} from "packages/net/minecraft/world/entity/$LightningBolt"

export class $ILightningStruckBlockEventImpl {

constructor()

public static "create"(state: $BlockState$Type, level: $LevelAccessor$Type, pos: $BlockPos$Type, entity: $LightningBolt$Type): $ILightningStruckBlockEvent
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ILightningStruckBlockEventImpl$Type = ($ILightningStruckBlockEventImpl);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ILightningStruckBlockEventImpl_ = $ILightningStruckBlockEventImpl$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/entity/$IExtraClientSpawnData" {
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$SelfEntitySpawnDataMixin, $SelfEntitySpawnDataMixin$Type} from "packages/net/mehvahdjukaar/moonlight/core/mixins/forge/$SelfEntitySpawnDataMixin"
import {$IEntityAdditionalSpawnData, $IEntityAdditionalSpawnData$Type} from "packages/net/minecraftforge/entity/$IEntityAdditionalSpawnData"

export interface $IExtraClientSpawnData extends $SelfEntitySpawnDataMixin, $IEntityAdditionalSpawnData {

 "writeSpawnData"(arg0: $FriendlyByteBuf$Type): void
 "readSpawnData"(arg0: $FriendlyByteBuf$Type): void
}

export namespace $IExtraClientSpawnData {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IExtraClientSpawnData$Type = ($IExtraClientSpawnData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IExtraClientSpawnData_ = $IExtraClientSpawnData$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/platform/network/$ChannelHandler$Builder" {
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$Message, $Message$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/network/$Message"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$ChannelHandler, $ChannelHandler$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/network/$ChannelHandler"
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$NetworkDir, $NetworkDir$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/network/$NetworkDir"

export class $ChannelHandler$Builder {


public "version"(version: integer): $ChannelHandler$Builder
public "register"<M extends $Message>(direction: $NetworkDir$Type, messageClass: $Class$Type<(M)>, decoder: $Function$Type<($FriendlyByteBuf$Type), (M)>): $ChannelHandler$Builder
public "build"(): $ChannelHandler
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ChannelHandler$Builder$Type = ($ChannelHandler$Builder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ChannelHandler$Builder_ = $ChannelHandler$Builder$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/fluids/$FoodProvider" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Codec, $Codec$Type} from "packages/com/mojang/serialization/$Codec"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $FoodProvider {
static readonly "CODEC": $Codec<($FoodProvider)>
static readonly "EMPTY": $FoodProvider
static readonly "CUSTOM_PROVIDERS": $Map<($Item), ($FoodProvider)>


public "isEmpty"(): boolean
public static "create"(item: $Item$Type, divider: integer): $FoodProvider
public "consume"(player: $Player$Type, world: $Level$Type, nbtApplier: $Consumer$Type<($ItemStack$Type)>): boolean
public "getFood"(): $Item
public "getDivider"(): integer
get "empty"(): boolean
get "food"(): $Item
get "divider"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FoodProvider$Type = ($FoodProvider);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FoodProvider_ = $FoodProvider$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/inventories/$DelegatingSlot" {
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$AbstractContainerMenu, $AbstractContainerMenu$Type} from "packages/net/minecraft/world/inventory/$AbstractContainerMenu"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export class $DelegatingSlot extends $Slot {
readonly "container": $Container
 "index": integer
 "x": integer
 "y": integer

constructor(inventory: $Container$Type, index: integer, xPosition: integer, yPosition: integer, menu: $AbstractContainerMenu$Type)

public "mayPlace"(stack: $ItemStack$Type): boolean
public "setChanged"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DelegatingSlot$Type = ($DelegatingSlot);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DelegatingSlot_ = $DelegatingSlot$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/client/texture_renderer/$FrameBufferBackedDynamicTexture" {
import {$Path, $Path$Type} from "packages/java/nio/file/$Path"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$List, $List$Type} from "packages/java/util/$List"
import {$NativeImage, $NativeImage$Type} from "packages/com/mojang/blaze3d/platform/$NativeImage"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$ResourceManager, $ResourceManager$Type} from "packages/net/minecraft/server/packs/resources/$ResourceManager"
import {$RenderTarget, $RenderTarget$Type} from "packages/com/mojang/blaze3d/pipeline/$RenderTarget"
import {$AbstractTexture, $AbstractTexture$Type} from "packages/net/minecraft/client/renderer/texture/$AbstractTexture"

export class $FrameBufferBackedDynamicTexture extends $AbstractTexture {
static readonly "NOT_ASSIGNED": integer

constructor(resourceLocation: $ResourceLocation$Type, width: integer, height: integer, textureDrawingFunction: $Consumer$Type<($FrameBufferBackedDynamicTexture$Type)>)
constructor(resourceLocation: $ResourceLocation$Type, size: integer, textureDrawingFunction: $Consumer$Type<($FrameBufferBackedDynamicTexture$Type)>)

public "initialize"(): void
public "close"(): void
public "releaseId"(): void
public "load"(manager: $ResourceManager$Type): void
public "getWidth"(): integer
public "getHeight"(): integer
public "getId"(): integer
public "redraw"(): void
public "bindWrite"(): void
public "getFrameBuffer"(): $RenderTarget
public "saveTextureToFile"(texturesDir: $Path$Type): $List<($Path)>
public "saveTextureToFile"(texturesDir: $Path$Type, name: string): $List<($Path)>
public "getTextureLocation"(): $ResourceLocation
public "download"(): void
public "upload"(): void
public "isInitialized"(): boolean
public "getPixels"(): $NativeImage
get "width"(): integer
get "height"(): integer
get "id"(): integer
get "frameBuffer"(): $RenderTarget
get "textureLocation"(): $ResourceLocation
get "initialized"(): boolean
get "pixels"(): $NativeImage
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FrameBufferBackedDynamicTexture$Type = ($FrameBufferBackedDynamicTexture);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FrameBufferBackedDynamicTexture_ = $FrameBufferBackedDynamicTexture$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/integration/$CaveEnhancementsCompat$SpectacleCandleHolderTile" {
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $CaveEnhancementsCompat$SpectacleCandleHolderTile extends $BlockEntity {
 "blockState": $BlockState

constructor(blockPos: $BlockPos$Type, blockState: $BlockState$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CaveEnhancementsCompat$SpectacleCandleHolderTile$Type = ($CaveEnhancementsCompat$SpectacleCandleHolderTile);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CaveEnhancementsCompat$SpectacleCandleHolderTile_ = $CaveEnhancementsCompat$SpectacleCandleHolderTile$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/events/$AfterLanguageLoadEvent" {
import {$LangBuilder, $LangBuilder$Type} from "packages/net/mehvahdjukaar/moonlight/api/resources/assets/$LangBuilder"
import {$List, $List$Type} from "packages/java/util/$List"
import {$SimpleEvent, $SimpleEvent$Type} from "packages/net/mehvahdjukaar/moonlight/api/events/$SimpleEvent"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $AfterLanguageLoadEvent implements $SimpleEvent {

constructor(lines: $Map$Type<(string), (string)>, info: $List$Type<(string)>)

public "addEntry"(key: string, translation: string): void
public "isDefault"(): boolean
public "getEntry"(key: string): string
public "addEntries"(builder: $LangBuilder$Type): void
get "default"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AfterLanguageLoadEvent$Type = ($AfterLanguageLoadEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AfterLanguageLoadEvent_ = $AfterLanguageLoadEvent$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/fluids/$FlammableLiquidBlock" {
import {$IntegerProperty, $IntegerProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$IntegerProperty"
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$ILightable, $ILightable$Type} from "packages/net/mehvahdjukaar/moonlight/api/block/$ILightable"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$Projectile, $Projectile$Type} from "packages/net/minecraft/world/entity/projectile/$Projectile"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$FiniteLiquidBlock, $FiniteLiquidBlock$Type} from "packages/net/mehvahdjukaar/supplementaries/common/fluids/$FiniteLiquidBlock"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$CollisionContext, $CollisionContext$Type} from "packages/net/minecraft/world/phys/shapes/$CollisionContext"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$ILightable$FireSourceType, $ILightable$FireSourceType$Type} from "packages/net/mehvahdjukaar/moonlight/api/block/$ILightable$FireSourceType"
import {$RenderShape, $RenderShape$Type} from "packages/net/minecraft/world/level/block/$RenderShape"

export class $FlammableLiquidBlock extends $FiniteLiquidBlock implements $ILightable {
static readonly "AGE": $IntegerProperty
readonly "interactionShapes": ($VoxelShape)[]
static readonly "STABLE_SHAPE": $VoxelShape
static readonly "LEVEL": $IntegerProperty
readonly "maxLevel": integer
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(supplier: $Supplier$Type<(any)>, arg: $BlockBehaviour$Properties$Type)

public "isRandomlyTicking"(state: $BlockState$Type): boolean
public "getStateForPlacement"(context: $BlockPlaceContext$Type): $BlockState
public "playerWillDestroy"(level: $Level$Type, pos: $BlockPos$Type, state: $BlockState$Type, player: $Player$Type): void
public "initializeClient"(consumer: $Consumer$Type<(any)>): void
public static "isOnFire"(state: $BlockState$Type): boolean
public "getFireSpreadSpeed"(state: $BlockState$Type, world: $BlockGetter$Type, pos: $BlockPos$Type, face: $Direction$Type): integer
public "getFlammability"(state: $BlockState$Type, world: $BlockGetter$Type, pos: $BlockPos$Type, face: $Direction$Type): integer
public "onCaughtFire"(state: $BlockState$Type, world: $Level$Type, pos: $BlockPos$Type, face: $Direction$Type, igniter: $LivingEntity$Type): void
public "neighborChanged"(state: $BlockState$Type, level: $Level$Type, pos: $BlockPos$Type, block: $Block$Type, fromPos: $BlockPos$Type, isMoving: boolean): void
public "onPlace"(state: $BlockState$Type, world: $Level$Type, pos: $BlockPos$Type, oldState: $BlockState$Type, moving: boolean): void
public "updateShape"(state: $BlockState$Type, direction: $Direction$Type, neighborState: $BlockState$Type, level: $LevelAccessor$Type, currentPos: $BlockPos$Type, neighborPos: $BlockPos$Type): $BlockState
public "use"(state: $BlockState$Type, worldIn: $Level$Type, pos: $BlockPos$Type, player: $Player$Type, handIn: $InteractionHand$Type, hit: $BlockHitResult$Type): $InteractionResult
public "getRenderShape"(state: $BlockState$Type): $RenderShape
public "getInteractionShape"(state: $BlockState$Type, level: $BlockGetter$Type, pos: $BlockPos$Type): $VoxelShape
public "getCollisionShape"(state: $BlockState$Type, level: $BlockGetter$Type, pos: $BlockPos$Type, context: $CollisionContext$Type): $VoxelShape
public "randomTick"(state: $BlockState$Type, level: $ServerLevel$Type, pos: $BlockPos$Type, random: $RandomSource$Type): void
public "getShape"(state: $BlockState$Type, level: $BlockGetter$Type, pos: $BlockPos$Type, context: $CollisionContext$Type): $VoxelShape
public "tick"(state: $BlockState$Type, level: $ServerLevel$Type, pos: $BlockPos$Type, random: $RandomSource$Type): void
public "onProjectileHit"(level: $Level$Type, state: $BlockState$Type, pHit: $BlockHitResult$Type, projectile: $Projectile$Type): void
public "entityInside"(state: $BlockState$Type, level: $Level$Type, pos: $BlockPos$Type, entity: $Entity$Type): void
public "animateTick"(state: $BlockState$Type, level: $Level$Type, pos: $BlockPos$Type, random: $RandomSource$Type): void
public "isLitUp"(state: $BlockState$Type, level: $BlockGetter$Type, pos: $BlockPos$Type): boolean
public "setLitUp"(state: $BlockState$Type, world: $LevelAccessor$Type, pos: $BlockPos$Type, lit: boolean): void
public "lightUp"(player: $Entity$Type, state: $BlockState$Type, pos: $BlockPos$Type, world: $LevelAccessor$Type, fireSourceType: $ILightable$FireSourceType$Type): boolean
public "extinguish"(player: $Entity$Type, state: $BlockState$Type, pos: $BlockPos$Type, world: $LevelAccessor$Type): boolean
public "playExtinguishSound"(world: $LevelAccessor$Type, pos: $BlockPos$Type): void
/**
 * 
 * @deprecated
 */
public "isLitUp"(state: $BlockState$Type): boolean
public "interactWithPlayer"(state: $BlockState$Type, level: $Level$Type, pos: $BlockPos$Type, player: $Player$Type, handIn: $InteractionHand$Type): $InteractionResult
public "playLightUpSound"(world: $LevelAccessor$Type, pos: $BlockPos$Type, type: $ILightable$FireSourceType$Type): void
/**
 * 
 * @deprecated
 */
public "toggleLitState"(state: $BlockState$Type, lit: boolean): $BlockState
public "spawnSmokeParticles"(state: $BlockState$Type, pos: $BlockPos$Type, world: $LevelAccessor$Type): void
public "canBeExtinguishedBy"(item: $ItemStack$Type): boolean
public "interactWithProjectile"(level: $Level$Type, state: $BlockState$Type, projectile: $Projectile$Type, pos: $BlockPos$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FlammableLiquidBlock$Type = ($FlammableLiquidBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FlammableLiquidBlock_ = $FlammableLiquidBlock$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/item/$BlockTypeBasedBlockItem" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$FuelBlockItem, $FuelBlockItem$Type} from "packages/net/mehvahdjukaar/moonlight/api/item/$FuelBlockItem"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$AdditionalItemPlacement, $AdditionalItemPlacement$Type} from "packages/net/mehvahdjukaar/moonlight/api/item/additional_placements/$AdditionalItemPlacement"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$BlockType, $BlockType$Type} from "packages/net/mehvahdjukaar/moonlight/api/set/$BlockType"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $BlockTypeBasedBlockItem<T extends $BlockType> extends $FuelBlockItem {
static readonly "BLOCK_ENTITY_TAG": string
static readonly "BLOCK_STATE_TAG": string
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(pBlock: $Block$Type, pProperties: $Item$Properties$Type, blockType: T, burnTime: $Supplier$Type<(integer)>)
constructor(pBlock: $Block$Type, pProperties: $Item$Properties$Type, blockType: T)

public "getBlockType"(): T
public "moonlight$addAdditionalBehavior"(arg0: $AdditionalItemPlacement$Type): void
public "moonlight$getAdditionalBehavior"(): $AdditionalItemPlacement
public "moonlight$getClientAnimationExtension"(): any
public "moonlight$setClientAnimationExtension"(arg0: any): void
get "blockType"(): T
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BlockTypeBasedBlockItem$Type<T> = ($BlockTypeBasedBlockItem<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BlockTypeBasedBlockItem_<T> = $BlockTypeBasedBlockItem$Type<(T)>;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/platform/network/$Message" {
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$ChannelHandler$Context, $ChannelHandler$Context$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/network/$ChannelHandler$Context"

export interface $Message {

 "handle"(arg0: $ChannelHandler$Context$Type): void
 "writeToBuffer"(arg0: $FriendlyByteBuf$Type): void
}

export namespace $Message {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Message$Type = ($Message);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Message_ = $Message$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$KeyLockableTile" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$IKeyLockable$KeyStatus, $IKeyLockable$KeyStatus$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/$IKeyLockable$KeyStatus"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ClientboundBlockEntityDataPacket, $ClientboundBlockEntityDataPacket$Type} from "packages/net/minecraft/network/protocol/game/$ClientboundBlockEntityDataPacket"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$IKeyLockable, $IKeyLockable$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/$IKeyLockable"

export class $KeyLockableTile extends $BlockEntity implements $IKeyLockable {
 "blockState": $BlockState

constructor(pos: $BlockPos$Type, state: $BlockState$Type)

public "tryClearingKey"(player: $Player$Type, stack: $ItemStack$Type): boolean
public "handleAction"(player: $Player$Type, handIn: $InteractionHand$Type, translName: string): boolean
public "getPassword"(): string
public "setPassword"(password: string): void
public "getUpdatePacket"(): $ClientboundBlockEntityDataPacket
public "load"(compound: $CompoundTag$Type): void
public "m_183515_"(tag: $CompoundTag$Type): void
public "clearPassword"(): void
public "testIfHasCorrectKey"(player: $Player$Type, lockPassword: string, feedbackMessage: boolean, translName: string): boolean
public "getKeyStatus"(key: $ItemStack$Type): $IKeyLockable$KeyStatus
public static "getKeyStatus"(key: $ItemStack$Type, password: string): $IKeyLockable$KeyStatus
public "onKeyAssigned"(level: $Level$Type, pos: $BlockPos$Type, player: $Player$Type, newKey: string): void
public "onPasswordCleared"(player: $Player$Type, pos: $BlockPos$Type): void
public static "getKeyPassword"(key: $ItemStack$Type): string
public "shouldShowPassword"(): boolean
get "password"(): string
set "password"(value: string)
get "updatePacket"(): $ClientboundBlockEntityDataPacket
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $KeyLockableTile$Type = ($KeyLockableTile);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $KeyLockableTile_ = $KeyLockableTile$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/common/$LiquidMixer" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$SoftFluidStack, $SoftFluidStack$Type} from "packages/net/mehvahdjukaar/moonlight/api/fluids/$SoftFluidStack"
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"

export class $LiquidMixer {

constructor()

public static "mixPotions"(tankFluid: $SoftFluidStack$Type, newFluid: $SoftFluidStack$Type): void
public static "mixDye"(tankFluid: $SoftFluidStack$Type, newFluid: $SoftFluidStack$Type): void
public static "saveEffects"(tag: $CompoundTag$Type, effects: $Collection$Type<($MobEffectInstance$Type)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LiquidMixer$Type = ($LiquidMixer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LiquidMixer_ = $LiquidMixer$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/integration/$CaveEnhancementsCompat" {
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $CaveEnhancementsCompat {

constructor()

public static "tick"(level: $Level$Type, pos: $BlockPos$Type, state: $BlockState$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CaveEnhancementsCompat$Type = ($CaveEnhancementsCompat);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CaveEnhancementsCompat_ = $CaveEnhancementsCompat$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/platform/configs/forge/$ConfigBuilderImpl$SpecialValue" {
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"

export class $ConfigBuilderImpl$SpecialValue<T, C> implements $Supplier<(T)> {


public "get"(): T
public "clearCache"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ConfigBuilderImpl$SpecialValue$Type<T, C> = ($ConfigBuilderImpl$SpecialValue<(T), (C)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ConfigBuilderImpl$SpecialValue_<T, C> = $ConfigBuilderImpl$SpecialValue$Type<(T), (C)>;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/inventories/$SackContainerMenu" {
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$VariableSizeContainerMenu, $VariableSizeContainerMenu$Type} from "packages/net/mehvahdjukaar/supplementaries/common/inventories/$VariableSizeContainerMenu"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"

export class $SackContainerMenu extends $VariableSizeContainerMenu {
readonly "inventory": $Container
readonly "unlockedSlots": integer
static readonly "SLOT_CLICKED_OUTSIDE": integer
static readonly "QUICKCRAFT_TYPE_CHARITABLE": integer
static readonly "QUICKCRAFT_TYPE_GREEDY": integer
static readonly "QUICKCRAFT_TYPE_CLONE": integer
static readonly "QUICKCRAFT_HEADER_START": integer
static readonly "QUICKCRAFT_HEADER_CONTINUE": integer
static readonly "QUICKCRAFT_HEADER_END": integer
static readonly "CARRIED_SLOT_SIZE": integer
readonly "lastSlots": $NonNullList<($ItemStack)>
readonly "slots": $NonNullList<($Slot)>
 "remoteSlots": $NonNullList<($ItemStack)>
 "containerId": integer

constructor(id: integer, playerInventory: $Inventory$Type, packetBuffer: $FriendlyByteBuf$Type)
constructor(id: integer, playerInventory: $Inventory$Type, container: $Container$Type, unlockedSlots: integer)
constructor(id: integer, playerInventory: $Inventory$Type, container: $Container$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SackContainerMenu$Type = ($SackContainerMenu);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SackContainerMenu_ = $SackContainerMenu$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/blocks/$SconceLeverBlock" {
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$SconceWallBlock, $SconceWallBlock$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/blocks/$SconceWallBlock"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$SimpleParticleType, $SimpleParticleType$Type} from "packages/net/minecraft/core/particles/$SimpleParticleType"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$ILightable$FireSourceType, $ILightable$FireSourceType$Type} from "packages/net/mehvahdjukaar/moonlight/api/block/$ILightable$FireSourceType"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$DirectionProperty, $DirectionProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$DirectionProperty"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $SconceLeverBlock extends $SconceWallBlock {
static readonly "POWERED": $BooleanProperty
static readonly "FACING": $DirectionProperty
static readonly "WATERLOGGED": $BooleanProperty
static readonly "LIT": $BooleanProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(properties: $BlockBehaviour$Properties$Type, particleData: $Supplier$Type<($SimpleParticleType$Type)>)

public "extinguish"(player: $Entity$Type, state: $BlockState$Type, pos: $BlockPos$Type, world: $LevelAccessor$Type): boolean
public "use"(state: $BlockState$Type, worldIn: $Level$Type, pos: $BlockPos$Type, player: $Player$Type, handIn: $InteractionHand$Type, hit: $BlockHitResult$Type): $InteractionResult
public "isSignalSource"(state: $BlockState$Type): boolean
public "onRemove"(state: $BlockState$Type, worldIn: $Level$Type, pos: $BlockPos$Type, newState: $BlockState$Type, isMoving: boolean): void
public "getSignal"(blockState: $BlockState$Type, blockAccess: $BlockGetter$Type, pos: $BlockPos$Type, side: $Direction$Type): integer
public "getDirectSignal"(blockState: $BlockState$Type, blockAccess: $BlockGetter$Type, pos: $BlockPos$Type, side: $Direction$Type): integer
public "animateTick"(stateIn: $BlockState$Type, worldIn: $Level$Type, pos: $BlockPos$Type, rand: $RandomSource$Type): void
public "lightUp"(entity: $Entity$Type, state: $BlockState$Type, pos: $BlockPos$Type, world: $LevelAccessor$Type, fireSourceType: $ILightable$FireSourceType$Type): boolean
public "setPowered"(state: $BlockState$Type, world: $Level$Type, pos: $BlockPos$Type): $BlockState
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SconceLeverBlock$Type = ($SconceLeverBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SconceLeverBlock_ = $SconceLeverBlock$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/core/misc/$VillagerAIInternal" {
import {$Schedule, $Schedule$Type} from "packages/net/minecraft/world/entity/schedule/$Schedule"
import {$Villager, $Villager$Type} from "packages/net/minecraft/world/entity/npc/$Villager"
import {$AbstractVillager, $AbstractVillager$Type} from "packages/net/minecraft/world/entity/npc/$AbstractVillager"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$IVillagerBrainEvent, $IVillagerBrainEvent$Type} from "packages/net/mehvahdjukaar/moonlight/api/events/$IVillagerBrainEvent"
import {$Brain, $Brain$Type} from "packages/net/minecraft/world/entity/ai/$Brain"

export class $VillagerAIInternal {
static readonly "CUSTOM_VILLAGER_SCHEDULE": $Supplier<($Schedule)>

constructor()

public static "init"(): void
public static "createEvent"(brain: $Brain$Type<($Villager$Type)>, villager: $Villager$Type): $IVillagerBrainEvent
public static "onRegisterBrainGoals"(brain: $Brain$Type<($Villager$Type)>, villager: $AbstractVillager$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $VillagerAIInternal$Type = ($VillagerAIInternal);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $VillagerAIInternal_ = $VillagerAIInternal$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/items/$TimberFrameItem" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$UseOnContext, $UseOnContext$Type} from "packages/net/minecraft/world/item/context/$UseOnContext"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$FuelBlockItem, $FuelBlockItem$Type} from "packages/net/mehvahdjukaar/moonlight/api/item/$FuelBlockItem"
import {$List, $List$Type} from "packages/java/util/$List"
import {$AdditionalItemPlacement, $AdditionalItemPlacement$Type} from "packages/net/mehvahdjukaar/moonlight/api/item/additional_placements/$AdditionalItemPlacement"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $TimberFrameItem extends $FuelBlockItem {
static readonly "BLOCK_ENTITY_TAG": string
static readonly "BLOCK_STATE_TAG": string
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(block: $Block$Type, properties: $Item$Properties$Type, burnTicks: integer)
constructor(block: $Block$Type, properties: $Item$Properties$Type)

public "useOn"(context: $UseOnContext$Type): $InteractionResult
public "appendHoverText"(stack: $ItemStack$Type, worldIn: $Level$Type, tooltip: $List$Type<($Component$Type)>, flagIn: $TooltipFlag$Type): void
public "moonlight$addAdditionalBehavior"(arg0: $AdditionalItemPlacement$Type): void
public "moonlight$getAdditionalBehavior"(): $AdditionalItemPlacement
public "moonlight$getClientAnimationExtension"(): any
public "moonlight$setClientAnimationExtension"(arg0: any): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TimberFrameItem$Type = ($TimberFrameItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TimberFrameItem_ = $TimberFrameItem$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/$GlobeManager$Model" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $GlobeManager$Model extends $Enum<($GlobeManager$Model)> {
static readonly "GLOBE": $GlobeManager$Model
static readonly "FLAT": $GlobeManager$Model
static readonly "SNOW": $GlobeManager$Model
static readonly "SHEARED": $GlobeManager$Model


public static "values"(): ($GlobeManager$Model)[]
public static "valueOf"(name: string): $GlobeManager$Model
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GlobeManager$Model$Type = (("sheared") | ("globe") | ("flat") | ("snow")) | ($GlobeManager$Model);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GlobeManager$Model_ = $GlobeManager$Model$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/misc/$Registrator" {
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export interface $Registrator<T> {

 "register"(arg0: $ResourceLocation$Type, arg1: T): void
 "register"(name: string, instance: T): void

(arg0: $ResourceLocation$Type, arg1: T): void
}

export namespace $Registrator {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Registrator$Type<T> = ($Registrator<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Registrator_<T> = $Registrator$Type<(T)>;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/renderers/$VertexUtils" {
import {$VertexConsumer, $VertexConsumer$Type} from "packages/com/mojang/blaze3d/vertex/$VertexConsumer"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $VertexUtils {

constructor()

public static "vert"(builder: $VertexConsumer$Type, poseStack: $PoseStack$Type, x: float, y: float, z: float, u: float, v: float, color: integer, lu: integer, lv: integer, nx: float, ny: float, nz: float): void
public static "renderFish"(buffers: $MultiBufferSource$Type, poseStack: $PoseStack$Type, wo: float, ho: float, fishType: integer, combinedLightIn: integer): void
public static "renderBubble"(builder: $VertexConsumer$Type, poseStack: $PoseStack$Type, combinedLightIn: integer, pos: $BlockPos$Type, level: $Level$Type, partialTicks: float): void
public static "setColorForAge"(age: float, phase: float): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $VertexUtils$Type = ($VertexUtils);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $VertexUtils_ = $VertexUtils$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/screens/$DoormatScreen" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$DoormatBlockTile, $DoormatBlockTile$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$DoormatBlockTile"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$TextHolderEditScreen, $TextHolderEditScreen$Type} from "packages/net/mehvahdjukaar/supplementaries/client/screens/$TextHolderEditScreen"
import {$List, $List$Type} from "packages/java/util/$List"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $DoormatScreen extends $TextHolderEditScreen<($DoormatBlockTile)> {
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering


public static "open"(tile: $DoormatBlockTile$Type): void
public "render"(graphics: $GuiGraphics$Type, mouseX: integer, mouseY: integer, partialTicks: float): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DoormatScreen$Type = ($DoormatScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DoormatScreen_ = $DoormatScreen$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/client/util/$TextUtil" {
import {$FormattedCharSequence, $FormattedCharSequence$Type} from "packages/net/minecraft/util/$FormattedCharSequence"
import {$BooleanSupplier, $BooleanSupplier$Type} from "packages/java/util/function/$BooleanSupplier"
import {$MultiBufferSource$BufferSource, $MultiBufferSource$BufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource$BufferSource"
import {$Vector3f, $Vector3f$Type} from "packages/org/joml/$Vector3f"
import {$Style, $Style$Type} from "packages/net/minecraft/network/chat/$Style"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$FormattedText, $FormattedText$Type} from "packages/net/minecraft/network/chat/$FormattedText"
import {$Font, $Font$Type} from "packages/net/minecraft/client/gui/$Font"
import {$TextUtil$RenderProperties, $TextUtil$RenderProperties$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/util/$TextUtil$RenderProperties"
import {$DyeColor, $DyeColor$Type} from "packages/net/minecraft/world/item/$DyeColor"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Pair, $Pair$Type} from "packages/com/mojang/datafixers/util/$Pair"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"

export class $TextUtil {

constructor()

public static "parseText"(s: string): $FormattedText
public static "renderProperties"(dyeColor: $DyeColor$Type, glowing: boolean, darkColorMult: float, combinedLight: integer, style: $Style$Type, normal: $Vector3f$Type, isVeryNear: $BooleanSupplier$Type): $TextUtil$RenderProperties
public static "renderProperties"(dyeColor: $DyeColor$Type, glowing: boolean, combinedLight: integer, style: $Style$Type, normal: $Vector3f$Type, isVeryNear: $BooleanSupplier$Type): $TextUtil$RenderProperties
public static "fitLinesToBox"(font: $Font$Type, text: $FormattedText$Type, width: float, height: float): $Pair<($List<($FormattedCharSequence)>), (float)>
public static "renderLine"(formattedCharSequences: $FormattedCharSequence$Type, font: $Font$Type, yOffset: float, poseStack: $PoseStack$Type, buffer: $MultiBufferSource$Type, properties: $TextUtil$RenderProperties$Type): void
public static "renderGuiText"(properties: $TextUtil$RenderProperties$Type, guiLines: (string)[], font: $Font$Type, graphics: $GuiGraphics$Type, buffer: $MultiBufferSource$BufferSource$Type, cursorPos: integer, selectionPos: integer, currentLine: integer, blink: boolean, lineSpacing: integer): void
public static "renderGuiLine"(properties: $TextUtil$RenderProperties$Type, string: string, font: $Font$Type, graphics: $GuiGraphics$Type, buffer: $MultiBufferSource$BufferSource$Type, cursorPos: integer, selectionPos: integer, isSelected: boolean, blink: boolean, yOffset: integer): void
public static "renderAllLines"(charSequences: ($FormattedCharSequence$Type)[], ySeparation: integer, font: $Font$Type, poseStack: $PoseStack$Type, buffer: $MultiBufferSource$Type, properties: $TextUtil$RenderProperties$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TextUtil$Type = ($TextUtil);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TextUtil_ = $TextUtil$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/common/tile/$DoubleSkullBlockTile" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$EnhancedSkullBlockTile, $EnhancedSkullBlockTile$Type} from "packages/net/mehvahdjukaar/amendments/common/tile/$EnhancedSkullBlockTile"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$SkullBlockEntity, $SkullBlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$SkullBlockEntity"
import {$Rotation, $Rotation$Type} from "packages/net/minecraft/world/level/block/$Rotation"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $DoubleSkullBlockTile extends $EnhancedSkullBlockTile {
 "blockState": $BlockState

constructor(pWorldPosition: $BlockPos$Type, pBlockState: $BlockState$Type)

public "initialize"(oldTile: $SkullBlockEntity$Type, skullStack: $ItemStack$Type, player: $Player$Type, hand: $InteractionHand$Type): void
public "getSkullUp"(): $BlockState
public "getWaxTexture"(): $ResourceLocation
public "getSkullItemUp"(): $ItemStack
public "getSkullTileUp"(): $BlockEntity
public "updateWax"(above: $BlockState$Type): void
public "rotateUp"(rotation: $Rotation$Type): void
public static "ti2ck"(level: $Level$Type, pos: $BlockPos$Type, state: $BlockState$Type, e: $DoubleSkullBlockTile$Type): void
public "rotateUpStep"(step: integer): void
public "load"(tag: $CompoundTag$Type): void
public "m_183515_"(tag: $CompoundTag$Type): void
get "skullUp"(): $BlockState
get "waxTexture"(): $ResourceLocation
get "skullItemUp"(): $ItemStack
get "skullTileUp"(): $BlockEntity
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DoubleSkullBlockTile$Type = ($DoubleSkullBlockTile);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DoubleSkullBlockTile_ = $DoubleSkullBlockTile$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/client/util/$RotHlpr" {
import {$Vector3f, $Vector3f$Type} from "packages/org/joml/$Vector3f"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$Matrix4f, $Matrix4f$Type} from "packages/org/joml/$Matrix4f"
import {$Quaternionf, $Quaternionf$Type} from "packages/org/joml/$Quaternionf"

export class $RotHlpr {
static readonly "Y180": $Quaternionf
static readonly "Y90": $Quaternionf
static readonly "Y45": $Quaternionf
static readonly "YN45": $Quaternionf
static readonly "YN90": $Quaternionf
static readonly "YN180": $Quaternionf
static readonly "X180": $Quaternionf
static readonly "X90": $Quaternionf
static readonly "X22": $Quaternionf
static readonly "XN22": $Quaternionf
static readonly "XN90": $Quaternionf
static readonly "XN180": $Quaternionf
static readonly "Z180": $Quaternionf
static readonly "Z135": $Quaternionf
static readonly "Z90": $Quaternionf
static readonly "ZN45": $Quaternionf
static readonly "ZN90": $Quaternionf
static readonly "ZN180": $Quaternionf

constructor()

public static "rot"(rot: integer): $Quaternionf
public static "rot"(dir: $Direction$Type): $Quaternionf
/**
 * 
 * @deprecated
 */
public static "rotateDirection"(direction: $Direction$Type, transform: $Matrix4f$Type): $Direction
/**
 * 
 * @deprecated
 */
public static "rotateVertexOnCenterBy"(x: float, y: float, z: float, pTransform: $Matrix4f$Type): $Vector3f
/**
 * 
 * @deprecated
 */
public static "rotateVertexBy"(pPos: $Vector3f$Type, pOrigin: $Vector3f$Type, pTransform: $Matrix4f$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RotHlpr$Type = ($RotHlpr);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RotHlpr_ = $RotHlpr$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/events/behaviors/$InteractEvents" {
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$InteractionResultHolder, $InteractionResultHolder$Type} from "packages/net/minecraft/world/$InteractionResultHolder"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$SoundType, $SoundType$Type} from "packages/net/minecraft/world/level/block/$SoundType"
import {$Property, $Property$Type} from "packages/net/minecraft/world/level/block/state/properties/$Property"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $InteractEvents {

constructor()

public static "replaceSimilarBlock"(blockOverride: $Block$Type, player: $Player$Type, stack: $ItemStack$Type, pos: $BlockPos$Type, level: $Level$Type, replaced: $BlockState$Type, sound: $SoundType$Type, keepWater: boolean, playEvent: boolean, ...properties: ($Property$Type<(any)>)[]): $InteractionResult
public static "setupOverrides"(): void
public static "onItemUse"(player: $Player$Type, level: $Level$Type, hand: $InteractionHand$Type, stack: $ItemStack$Type): $InteractionResultHolder<($ItemStack)>
public static "onItemUsedOnBlockHP"(player: $Player$Type, level: $Level$Type, stack: $ItemStack$Type, hand: $InteractionHand$Type, hit: $BlockHitResult$Type): $InteractionResult
public static "hasBlockPlacementAssociated"(item: $Item$Type): boolean
public static "onItemUsedOnBlock"(player: $Player$Type, level: $Level$Type, stack: $ItemStack$Type, hand: $InteractionHand$Type, hit: $BlockHitResult$Type): $InteractionResult
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $InteractEvents$Type = ($InteractEvents);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $InteractEvents_ = $InteractEvents$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/dispenser/$PancakeBehavior" {
import {$DispenserHelper$AdditionalDispenserBehavior, $DispenserHelper$AdditionalDispenserBehavior$Type} from "packages/net/mehvahdjukaar/moonlight/api/util/$DispenserHelper$AdditionalDispenserBehavior"
import {$BlockSource, $BlockSource$Type} from "packages/net/minecraft/core/$BlockSource"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $PancakeBehavior extends $DispenserHelper$AdditionalDispenserBehavior {


public static "bootStrap"(): void
public static "setEntityPokingOutOfBlock"(arg0: $BlockSource$Type, arg1: $Entity$Type, arg2: $Direction$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PancakeBehavior$Type = ($PancakeBehavior);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PancakeBehavior_ = $PancakeBehavior$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/blocks/$LockBlock" {
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$EntityBlock, $EntityBlock$Type} from "packages/net/minecraft/world/level/block/$EntityBlock"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$List, $List$Type} from "packages/java/util/$List"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$BlockEntityTicker, $BlockEntityTicker$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityTicker"
import {$GameEventListener, $GameEventListener$Type} from "packages/net/minecraft/world/level/gameevent/$GameEventListener"

export class $LockBlock extends $Block implements $EntityBlock {
static readonly "POWERED": $BooleanProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(properties: $BlockBehaviour$Properties$Type)

public "activate"(state: $BlockState$Type, worldIn: $Level$Type, pos: $BlockPos$Type, player: $Player$Type): void
public "appendHoverText"(stack: $ItemStack$Type, worldIn: $BlockGetter$Type, tooltip: $List$Type<($Component$Type)>, flagIn: $TooltipFlag$Type): void
public "use"(state: $BlockState$Type, worldIn: $Level$Type, pos: $BlockPos$Type, player: $Player$Type, handIn: $InteractionHand$Type, hit: $BlockHitResult$Type): $InteractionResult
public "isSignalSource"(state: $BlockState$Type): boolean
public "tick"(state: $BlockState$Type, worldIn: $ServerLevel$Type, pos: $BlockPos$Type, rand: $RandomSource$Type): void
public "getSignal"(blockState: $BlockState$Type, blockAccess: $BlockGetter$Type, pos: $BlockPos$Type, side: $Direction$Type): integer
public "newBlockEntity"(pPos: $BlockPos$Type, pState: $BlockState$Type): $BlockEntity
public "getTicker"<T extends $BlockEntity>(arg0: $Level$Type, arg1: $BlockState$Type, arg2: $BlockEntityType$Type<(T)>): $BlockEntityTicker<(T)>
public "getListener"<T extends $BlockEntity>(arg0: $ServerLevel$Type, arg1: T): $GameEventListener
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LockBlock$Type = ($LockBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LockBlock_ = $LockBlock$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/$IRopeConnection" {
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export interface $IRopeConnection {

 "shouldConnectToFace"(thisState: $BlockState$Type, facingState: $BlockState$Type, facingPos: $BlockPos$Type, dir: $Direction$Type, world: $LevelReader$Type): boolean
 "canSideAcceptConnection"(arg0: $BlockState$Type, arg1: $Direction$Type): boolean

(thisState: $BlockState$Type, facingState: $BlockState$Type, facingPos: $BlockPos$Type, dir: $Direction$Type, world: $LevelReader$Type): boolean
}

export namespace $IRopeConnection {
function canConnectDown(downState: $BlockState$Type): boolean
function isSupportingCeiling(upState: $BlockState$Type, pos: $BlockPos$Type, world: $LevelReader$Type): boolean
function isSupportingCeiling(pos: $BlockPos$Type, world: $LevelReader$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IRopeConnection$Type = ($IRopeConnection);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IRopeConnection_ = $IRopeConnection$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/integration/$FlanCompat" {
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $FlanCompat {

constructor()

public static "canReplace"(player: $Player$Type, pos: $BlockPos$Type): boolean
public static "canPlace"(player: $Player$Type, pos: $BlockPos$Type): boolean
public static "canInteract"(player: $Player$Type, targetPos: $BlockPos$Type): boolean
public static "canBreak"(player: $Player$Type, pos: $BlockPos$Type): boolean
public static "canAttack"(player: $Player$Type, victim: $Entity$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FlanCompat$Type = ($FlanCompat);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FlanCompat_ = $FlanCompat$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/particles/$BubbleBlockParticle" {
import {$ClientLevel, $ClientLevel$Type} from "packages/net/minecraft/client/multiplayer/$ClientLevel"
import {$ParticleRenderType, $ParticleRenderType$Type} from "packages/net/minecraft/client/particle/$ParticleRenderType"
import {$TextureSheetParticle, $TextureSheetParticle$Type} from "packages/net/minecraft/client/particle/$TextureSheetParticle"
import {$SpriteSet, $SpriteSet$Type} from "packages/net/minecraft/client/particle/$SpriteSet"

export class $BubbleBlockParticle extends $TextureSheetParticle {
 "x": double
 "y": double
 "z": double
 "xd": double
 "yd": double
 "zd": double
 "age": integer
 "rCol": float
 "gCol": float
 "bCol": float

constructor(pLevel: $ClientLevel$Type, pX: double, pY: double, pZ: double, pXSpeed: double, pYSpeed: double, pZSpeed: double, pSprites: $SpriteSet$Type)

public "getQuadSize"(age: float): float
public "getRenderType"(): $ParticleRenderType
public "tick"(): void
public "updateSprite"(): void
public "setColorForAge"(): void
get "renderType"(): $ParticleRenderType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BubbleBlockParticle$Type = ($BubbleBlockParticle);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BubbleBlockParticle_ = $BubbleBlockParticle$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/misc/$ModItemListing" {
import {$MerchantOffer, $MerchantOffer$Type} from "packages/net/minecraft/world/item/trading/$MerchantOffer"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$VillagerTrades$ItemListing, $VillagerTrades$ItemListing$Type} from "packages/net/minecraft/world/entity/npc/$VillagerTrades$ItemListing"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

/**
 * 
 * @deprecated
 */
export class $ModItemListing implements $VillagerTrades$ItemListing {

constructor(emeralds: integer, forSale: $ItemStack$Type, maxTrades: integer, xp: integer)
constructor(emeralds: integer, forSale: $ItemStack$Type, maxTrades: integer, xp: integer, mult: float)
constructor(price: $ItemStack$Type, forSale: $ItemStack$Type, maxTrades: integer, xp: integer, priceMult: float)
constructor(price: $ItemStack$Type, price2: $ItemStack$Type, forSale: $ItemStack$Type, maxTrades: integer, xp: integer, priceMult: float)

public "getOffer"(entity: $Entity$Type, randomSource: $RandomSource$Type): $MerchantOffer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModItemListing$Type = ($ModItemListing);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModItemListing_ = $ModItemListing$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/core/fluid/$SoftFluidInternal" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Fluid, $Fluid$Type} from "packages/net/minecraft/world/level/material/$Fluid"
import {$Holder, $Holder$Type} from "packages/net/minecraft/core/$Holder"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$SoftFluid, $SoftFluid$Type} from "packages/net/mehvahdjukaar/moonlight/api/fluids/$SoftFluid"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $SoftFluidInternal {
static readonly "FLUID_MAP": $Map<($Fluid), ($Holder<($SoftFluid)>)>
static readonly "ITEM_MAP": $Map<($Item), ($Holder<($SoftFluid)>)>

constructor()

public static "init"(): void
public static "postInitClient"(): void
public static "onDataSyncToPlayer"(player: $ServerPlayer$Type, isJoined: boolean): void
public static "doPostInitServer"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SoftFluidInternal$Type = ($SoftFluidInternal);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SoftFluidInternal_ = $SoftFluidInternal$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/reg/$ModSounds" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$ModSoundType, $ModSoundType$Type} from "packages/net/mehvahdjukaar/moonlight/api/misc/$ModSoundType"
import {$RegSupplier, $RegSupplier$Type} from "packages/net/mehvahdjukaar/moonlight/api/misc/$RegSupplier"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"

export class $ModSounds {
static readonly "TOM": $Supplier<($SoundEvent)>
static readonly "CLOCK_TICK_1": $Supplier<($SoundEvent)>
static readonly "CLOCK_TICK_2": $Supplier<($SoundEvent)>
static readonly "BOMB_EXPLOSION": $Supplier<($SoundEvent)>
static readonly "PANCAKE_MUSIC": $Supplier<($SoundEvent)>
static readonly "GUNPOWDER_IGNITE": $Supplier<($SoundEvent)>
static readonly "CRANK": $Supplier<($SoundEvent)>
static readonly "BLOCK_ROTATE": $Supplier<($SoundEvent)>
static readonly "WRENCH_ROTATE": $Supplier<($SoundEvent)>
static readonly "WRENCH_HIT": $Supplier<($SoundEvent)>
static readonly "WRENCH_FAIL": $Supplier<($SoundEvent)>
static readonly "PRESENT_BREAK": $Supplier<($SoundEvent)>
static readonly "PRESENT_PLACE": $Supplier<($SoundEvent)>
static readonly "PRESENT_OPEN": $Supplier<($SoundEvent)>
static readonly "PRESENT_PACK": $Supplier<($SoundEvent)>
static readonly "SACK_BREAK": $Supplier<($SoundEvent)>
static readonly "SACK_PLACE": $Supplier<($SoundEvent)>
static readonly "SACK_OPEN": $Supplier<($SoundEvent)>
static readonly "ROPE_BREAK": $Supplier<($SoundEvent)>
static readonly "ROPE_PLACE": $Supplier<($SoundEvent)>
static readonly "ROPE_SLIDE": $Supplier<($SoundEvent)>
static readonly "ROPE_STEP": $Supplier<($SoundEvent)>
static readonly "BUBBLE_POP": $Supplier<($SoundEvent)>
static readonly "BUBBLE_PLACE": $Supplier<($SoundEvent)>
static readonly "BUBBLE_BLOW": $Supplier<($SoundEvent)>
static readonly "JAR_PLACE": $Supplier<($SoundEvent)>
static readonly "JAR_BREAK": $Supplier<($SoundEvent)>
static readonly "JAR_COOKIE": $Supplier<($SoundEvent)>
static readonly "BELLOWS_BLOW": $Supplier<($SoundEvent)>
static readonly "BELLOWS_RETRACT": $Supplier<($SoundEvent)>
static readonly "GLOBE_SPIN": $Supplier<($SoundEvent)>
static readonly "FAUCET": $Supplier<($SoundEvent)>
static readonly "SLINGSHOT_CHARGE_0": $Supplier<($SoundEvent)>
static readonly "SLINGSHOT_CHARGE_1": $Supplier<($SoundEvent)>
static readonly "SLINGSHOT_CHARGE_2": $Supplier<($SoundEvent)>
static readonly "SLINGSHOT_CHARGE_3": $Supplier<($SoundEvent)>
static readonly "SLINGSHOT_SHOOT": $Supplier<($SoundEvent)>
static readonly "IMITATE_ENDERMAN": $RegSupplier<($SoundEvent)>
static readonly "JAR": $ModSoundType
static readonly "BUBBLE_BLOCK": $ModSoundType
static readonly "BOOKS": $ModSoundType
static readonly "PRESENT": $ModSoundType
static readonly "SACK": $ModSoundType
static readonly "ROPE": $ModSoundType

constructor()

public static "init"(): void
public static "regSound"(name: string): $RegSupplier<($SoundEvent)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModSounds$Type = ($ModSounds);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModSounds_ = $ModSounds$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/blocks/$FlaxBlockUpper" {
import {$IntegerProperty, $IntegerProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$IntegerProperty"
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$CollisionContext, $CollisionContext$Type} from "packages/net/minecraft/world/phys/shapes/$CollisionContext"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$EnumProperty, $EnumProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$EnumProperty"
import {$DoubleBlockHalf, $DoubleBlockHalf$Type} from "packages/net/minecraft/world/level/block/state/properties/$DoubleBlockHalf"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $FlaxBlockUpper extends $Block {
static readonly "HALF": $EnumProperty<($DoubleBlockHalf)>
static readonly "AGE": $IntegerProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(properties: $BlockBehaviour$Properties$Type)

public "updateShape"(stateIn: $BlockState$Type, facing: $Direction$Type, facingState: $BlockState$Type, worldIn: $LevelAccessor$Type, currentPos: $BlockPos$Type, facingPos: $BlockPos$Type): $BlockState
public "canSurvive"(state: $BlockState$Type, worldIn: $LevelReader$Type, pos: $BlockPos$Type): boolean
public "getShape"(state: $BlockState$Type, worldIn: $BlockGetter$Type, pos: $BlockPos$Type, context: $CollisionContext$Type): $VoxelShape
public "isValidLowerStage"(state: $BlockState$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FlaxBlockUpper$Type = ($FlaxBlockUpper);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FlaxBlockUpper_ = $FlaxBlockUpper$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/util/math/colors/$HSVColor" {
import {$RGBColor, $RGBColor$Type} from "packages/net/mehvahdjukaar/moonlight/api/util/math/colors/$RGBColor"
import {$Codec, $Codec$Type} from "packages/com/mojang/serialization/$Codec"
import {$BaseColor, $BaseColor$Type} from "packages/net/mehvahdjukaar/moonlight/api/util/math/colors/$BaseColor"

export class $HSVColor extends $BaseColor<($HSVColor)> {
/**
 * 
 * @deprecated
 */
static readonly "CODEC": $Codec<(integer)>

constructor(h: float, s: float, b: float, a: float)

public "value"(): float
public "toString"(): string
public "multiply"(hue: float, saturation: float, value: float, alpha: float): $HSVColor
/**
 * 
 * @deprecated
 */
public "multiply"(color: $HSVColor$Type, hue: float, chroma: float, luminance: float, alpha: float): $HSVColor
public "hue"(): float
public "saturation"(): float
public "alpha"(): float
public "distTo"(other: $HSVColor$Type): float
public "mixWith"(color: $HSVColor$Type, bias: float): $HSVColor
public "asRGB"(): $RGBColor
public "withSaturation"(saturation: float): $HSVColor
public "withHue"(hue: float): $HSVColor
public "withAlpha"(alpha: float): $HSVColor
public "asHSV"(): $HSVColor
public static "averageColors"(...colors: ($HSVColor$Type)[]): $HSVColor
public "withValue"(value: float): $HSVColor
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $HSVColor$Type = ($HSVColor);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $HSVColor_ = $HSVColor$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/client/renderers/$JukeboxTileRenderer" {
import {$JukeboxBlockEntity, $JukeboxBlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$JukeboxBlockEntity"
import {$BlockEntityRendererProvider$Context, $BlockEntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/blockentity/$BlockEntityRendererProvider$Context"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$BlockEntityRenderer, $BlockEntityRenderer$Type} from "packages/net/minecraft/client/renderer/blockentity/$BlockEntityRenderer"

export class $JukeboxTileRenderer implements $BlockEntityRenderer<($JukeboxBlockEntity)> {

constructor(context: $BlockEntityRendererProvider$Context$Type)

public "render"(blockEntity: $JukeboxBlockEntity$Type, partialTick: float, poseStack: $PoseStack$Type, bufferSource: $MultiBufferSource$Type, packedLight: integer, packedOverlay: integer): void
public "shouldRender"(arg0: $JukeboxBlockEntity$Type, arg1: $Vec3$Type): boolean
public "shouldRenderOffScreen"(arg0: $JukeboxBlockEntity$Type): boolean
public "getViewDistance"(): integer
get "viewDistance"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $JukeboxTileRenderer$Type = ($JukeboxTileRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $JukeboxTileRenderer_ = $JukeboxTileRenderer$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/screens/widgets/$BlackboardButton" {
import {$BlackBoardScreen, $BlackBoardScreen$Type} from "packages/net/mehvahdjukaar/supplementaries/client/screens/$BlackBoardScreen"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$ComponentPath, $ComponentPath$Type} from "packages/net/minecraft/client/gui/$ComponentPath"
import {$FocusNavigationEvent, $FocusNavigationEvent$Type} from "packages/net/minecraft/client/gui/navigation/$FocusNavigationEvent"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$SoundManager, $SoundManager$Type} from "packages/net/minecraft/client/sounds/$SoundManager"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$NarratableEntry$NarrationPriority, $NarratableEntry$NarrationPriority$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry$NarrationPriority"
import {$ScreenRectangle, $ScreenRectangle$Type} from "packages/net/minecraft/client/gui/navigation/$ScreenRectangle"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$NarrationElementOutput, $NarrationElementOutput$Type} from "packages/net/minecraft/client/gui/narration/$NarrationElementOutput"

export class $BlackboardButton implements $GuiEventListener, $Renderable, $NarratableEntry {
readonly "size": integer
readonly "x": integer
readonly "y": integer

constructor(screen: $BlackBoardScreen$Type, x: integer, y: integer, color: byte, size: integer)

public "isMouseOver"(mouseX: double, mouseY: double): boolean
public "updateNarration"(narrationElementOutput: $NarrationElementOutput$Type): void
public "narrationPriority"(): $NarratableEntry$NarrationPriority
public "setFocused"(focused: boolean): void
public "render"(graphics: $GuiGraphics$Type, mouseX: integer, mouseY: integer, partialTicks: float): void
public "mouseClicked"(mouseX: double, mouseY: double, button: integer): boolean
public "isFocused"(): boolean
public "getColor"(): byte
public "renderHoverOverlay"(graphics: $GuiGraphics$Type): void
public "playDownSound"(handler: $SoundManager$Type): void
public "isShouldDrawOverlay"(): boolean
public "getCurrentFocusPath"(): $ComponentPath
public "keyPressed"(arg0: integer, arg1: integer, arg2: integer): boolean
public "nextFocusPath"(arg0: $FocusNavigationEvent$Type): $ComponentPath
public "getRectangle"(): $ScreenRectangle
public "mouseReleased"(arg0: double, arg1: double, arg2: integer): boolean
public "charTyped"(arg0: character, arg1: integer): boolean
public "mouseScrolled"(arg0: double, arg1: double, arg2: double): boolean
public "mouseDragged"(arg0: double, arg1: double, arg2: integer, arg3: double, arg4: double): boolean
public "keyReleased"(arg0: integer, arg1: integer, arg2: integer): boolean
public "mouseMoved"(arg0: double, arg1: double): void
public "isActive"(): boolean
public "getTabOrderGroup"(): integer
set "focused"(value: boolean)
get "focused"(): boolean
get "color"(): byte
get "shouldDrawOverlay"(): boolean
get "currentFocusPath"(): $ComponentPath
get "rectangle"(): $ScreenRectangle
get "active"(): boolean
get "tabOrderGroup"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BlackboardButton$Type = ($BlackboardButton);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BlackboardButton_ = $BlackboardButton$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/item/$ILeftClickReact" {
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export interface $ILeftClickReact {

 "onLeftClick"(arg0: $ItemStack$Type, arg1: $Player$Type, arg2: $InteractionHand$Type): boolean

(arg0: $ItemStack$Type, arg1: $Player$Type, arg2: $InteractionHand$Type): boolean
}

export namespace $ILeftClickReact {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ILeftClickReact$Type = ($ILeftClickReact);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ILeftClickReact_ = $ILeftClickReact$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/reg/$ModRegistry" {
import {$ToolHookBlock, $ToolHookBlock$Type} from "packages/net/mehvahdjukaar/amendments/common/block/$ToolHookBlock"
import {$CeilingBannerBlockTile, $CeilingBannerBlockTile$Type} from "packages/net/mehvahdjukaar/amendments/common/tile/$CeilingBannerBlockTile"
import {$MenuType, $MenuType$Type} from "packages/net/minecraft/world/inventory/$MenuType"
import {$ToolHookBlockTile, $ToolHookBlockTile$Type} from "packages/net/mehvahdjukaar/amendments/common/tile/$ToolHookBlockTile"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$DoubleCakeBlock, $DoubleCakeBlock$Type} from "packages/net/mehvahdjukaar/amendments/common/block/$DoubleCakeBlock"
import {$DyeBottleRecipe, $DyeBottleRecipe$Type} from "packages/net/mehvahdjukaar/amendments/common/recipe/$DyeBottleRecipe"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$DyeColor, $DyeColor$Type} from "packages/net/minecraft/world/item/$DyeColor"
import {$LiquidCauldronBlock, $LiquidCauldronBlock$Type} from "packages/net/mehvahdjukaar/amendments/common/block/$LiquidCauldronBlock"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$SimpleParticleType, $SimpleParticleType$Type} from "packages/net/minecraft/core/particles/$SimpleParticleType"
import {$CakeRegistry$CakeType, $CakeRegistry$CakeType$Type} from "packages/net/mehvahdjukaar/amendments/common/$CakeRegistry$CakeType"
import {$WallLanternBlock, $WallLanternBlock$Type} from "packages/net/mehvahdjukaar/amendments/common/block/$WallLanternBlock"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$EntityType$Builder, $EntityType$Builder$Type} from "packages/net/minecraft/world/entity/$EntityType$Builder"
import {$WallLanternBlockTile, $WallLanternBlockTile$Type} from "packages/net/mehvahdjukaar/amendments/common/tile/$WallLanternBlockTile"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$LecternEditMenu, $LecternEditMenu$Type} from "packages/net/mehvahdjukaar/amendments/common/$LecternEditMenu"
import {$CarpetedBlockTile, $CarpetedBlockTile$Type} from "packages/net/mehvahdjukaar/amendments/common/tile/$CarpetedBlockTile"
import {$RecipeSerializer, $RecipeSerializer$Type} from "packages/net/minecraft/world/item/crafting/$RecipeSerializer"
import {$RegSupplier, $RegSupplier$Type} from "packages/net/mehvahdjukaar/moonlight/api/misc/$RegSupplier"
import {$AdditionalItemPlacementsAPI$Event, $AdditionalItemPlacementsAPI$Event$Type} from "packages/net/mehvahdjukaar/moonlight/api/item/additional_placements/$AdditionalItemPlacementsAPI$Event"
import {$LiquidCauldronBlockTile, $LiquidCauldronBlockTile$Type} from "packages/net/mehvahdjukaar/amendments/common/tile/$LiquidCauldronBlockTile"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$DoubleSkullBlockTile, $DoubleSkullBlockTile$Type} from "packages/net/mehvahdjukaar/amendments/common/tile/$DoubleSkullBlockTile"
import {$SoftFluid, $SoftFluid$Type} from "packages/net/mehvahdjukaar/moonlight/api/fluids/$SoftFluid"
import {$WaterloggedLilyBlockTile, $WaterloggedLilyBlockTile$Type} from "packages/net/mehvahdjukaar/amendments/common/tile/$WaterloggedLilyBlockTile"
import {$DataObjectReference, $DataObjectReference$Type} from "packages/net/mehvahdjukaar/moonlight/api/misc/$DataObjectReference"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$HangingFlowerPotBlockTile, $HangingFlowerPotBlockTile$Type} from "packages/net/mehvahdjukaar/amendments/common/tile/$HangingFlowerPotBlockTile"
import {$DamageType, $DamageType$Type} from "packages/net/minecraft/world/damagesource/$DamageType"
import {$CandleSkullBlockTile, $CandleSkullBlockTile$Type} from "packages/net/mehvahdjukaar/amendments/common/tile/$CandleSkullBlockTile"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$FallingLanternEntity, $FallingLanternEntity$Type} from "packages/net/mehvahdjukaar/amendments/common/entity/$FallingLanternEntity"

export class $ModRegistry {
static readonly "BOILING_DAMAGE": $DataObjectReference<($DamageType)>
static readonly "DYE_SOFT_FLUID": $DataObjectReference<($SoftFluid)>
static readonly "DYE_BOTTLE_RECIPE": $RegSupplier<($RecipeSerializer<($DyeBottleRecipe)>)>
static readonly "LECTERN_EDIT_MENU": $Supplier<($MenuType<($LecternEditMenu)>)>
static readonly "BOILING_PARTICLE": $RegSupplier<($SimpleParticleType)>
static readonly "SPLASH_PARTICLE": $RegSupplier<($SimpleParticleType)>
static readonly "DYE_BOTTLE_ITEM": $Supplier<($Item)>
static readonly "WATERLILY_BLOCK": $Supplier<($Block)>
static readonly "WATERLILY_TILE": $Supplier<($BlockEntityType<($WaterloggedLilyBlockTile)>)>
static readonly "LIQUID_CAULDRON": $Supplier<($LiquidCauldronBlock)>
static readonly "DYE_CAULDRON": $Supplier<($Block)>
static readonly "LIQUID_CAULDRON_TILE": $Supplier<($BlockEntityType<($LiquidCauldronBlockTile)>)>
static readonly "HANGING_FLOWER_POT": $Supplier<($Block)>
static readonly "HANGING_FLOWER_POT_TILE": $Supplier<($BlockEntityType<($HangingFlowerPotBlockTile)>)>
static readonly "CEILING_BANNERS": $Map<($DyeColor), ($Supplier<($Block)>)>
static readonly "CEILING_BANNER_TILE": $Supplier<($BlockEntityType<($CeilingBannerBlockTile)>)>
static readonly "CARPET_STAIRS": $Supplier<($Block)>
static readonly "CARPET_SLAB": $Supplier<($Block)>
static readonly "CARPET_STAIRS_TILE": $Supplier<($BlockEntityType<($CarpetedBlockTile)>)>
static readonly "WALL_LANTERN": $Supplier<($WallLanternBlock)>
static readonly "WALL_LANTERN_TILE": $Supplier<($BlockEntityType<($WallLanternBlockTile)>)>
static readonly "FALLING_LANTERN": $Supplier<($EntityType<($FallingLanternEntity)>)>
static readonly "TOOL_HOOK": $Supplier<($ToolHookBlock)>
static readonly "TOOL_HOOK_TILE": $Supplier<($BlockEntityType<($ToolHookBlockTile)>)>
static readonly "SKULL_PILE": $Supplier<($Block)>
static readonly "SKULL_PILE_TILE": $Supplier<($BlockEntityType<($DoubleSkullBlockTile)>)>
static readonly "SKULL_CANDLE": $Supplier<($Block)>
static readonly "SKULL_CANDLE_WALL": $Supplier<($Block)>
static readonly "SKULL_CANDLE_SOUL": $Supplier<($Block)>
static readonly "SKULL_CANDLE_SOUL_WALL": $Supplier<($Block)>
static readonly "SKULL_CANDLE_TILE": $Supplier<($BlockEntityType<($CandleSkullBlockTile)>)>
static readonly "DIRECTIONAL_CAKE": $Supplier<($Block)>
static readonly "DOUBLE_CAKES": $Map<($CakeRegistry$CakeType), ($DoubleCakeBlock)>

constructor()

public static "init"(): void
public static "registerAdditionalPlacements"(event: $AdditionalItemPlacementsAPI$Event$Type): void
public static "regBlock"<T extends $Block>(name: string, sup: $Supplier$Type<(T)>): $RegSupplier<(T)>
public static "regTile"<T extends $BlockEntityType<(E)>, E extends $BlockEntity>(name: string, sup: $Supplier$Type<(T)>): $Supplier<(T)>
public static "regItem"<T extends $Item>(name: string, sup: $Supplier$Type<(T)>): $RegSupplier<(T)>
public static "regEntity"<T extends $Entity>(name: string, builder: $Supplier$Type<($EntityType$Builder$Type<(T)>)>): $Supplier<($EntityType<(T)>)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModRegistry$Type = ($ModRegistry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModRegistry_ = $ModRegistry$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/integration/$JadeCompat" {
import {$IWailaClientRegistration, $IWailaClientRegistration$Type} from "packages/snownee/jade/api/$IWailaClientRegistration"
import {$IWailaPlugin, $IWailaPlugin$Type} from "packages/snownee/jade/api/$IWailaPlugin"
import {$IWailaCommonRegistration, $IWailaCommonRegistration$Type} from "packages/snownee/jade/api/$IWailaCommonRegistration"

export class $JadeCompat implements $IWailaPlugin {

constructor()

public "register"(registration: $IWailaCommonRegistration$Type): void
public "registerClient"(registration: $IWailaClientRegistration$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $JadeCompat$Type = ($JadeCompat);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $JadeCompat_ = $JadeCompat$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/entities/$CannonballEntity" {
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$ImprovedProjectileEntity, $ImprovedProjectileEntity$Type} from "packages/net/mehvahdjukaar/moonlight/api/entity/$ImprovedProjectileEntity"

export class $CannonballEntity extends $ImprovedProjectileEntity {
/**
 * 
 * @deprecated
 */
 "touchedGround": boolean
/**
 * 
 * @deprecated
 */
 "groundTime": integer
 "ownerUUID": $UUID
 "cachedOwner": $Entity
 "leftOwner": boolean
 "hasBeenShot": boolean
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>


}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CannonballEntity$Type = ($CannonballEntity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CannonballEntity_ = $CannonballEntity$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/renderers/items/$SlingshotRendererHelper" {
import {$Minecraft, $Minecraft$Type} from "packages/net/minecraft/client/$Minecraft"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$Camera, $Camera$Type} from "packages/net/minecraft/client/$Camera"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export class $SlingshotRendererHelper {

constructor()

public static "renderBlockOutline"(matrixStack: $PoseStack$Type, camera: $Camera$Type, mc: $Minecraft$Type): void
public static "getAmmoForPreview"(cannon: $ItemStack$Type, world: $Level$Type, player: $Player$Type): $ItemStack
public static "grabNewLookPos"(player: $Player$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SlingshotRendererHelper$Type = ($SlingshotRendererHelper);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SlingshotRendererHelper_ = $SlingshotRendererHelper$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/renderers/tiles/$BubbleBlockTileRenderer" {
import {$BlockEntityRendererProvider$Context, $BlockEntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/blockentity/$BlockEntityRendererProvider$Context"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$BubbleBlockTile, $BubbleBlockTile$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$BubbleBlockTile"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$BlockEntityRenderer, $BlockEntityRenderer$Type} from "packages/net/minecraft/client/renderer/blockentity/$BlockEntityRenderer"

export class $BubbleBlockTileRenderer implements $BlockEntityRenderer<($BubbleBlockTile)> {

constructor(context: $BlockEntityRendererProvider$Context$Type)

public "render"(tile: $BubbleBlockTile$Type, partialTicks: float, poseStack: $PoseStack$Type, buffer: $MultiBufferSource$Type, light: integer, overlay: integer): void
public "shouldRender"(arg0: $BubbleBlockTile$Type, arg1: $Vec3$Type): boolean
public "shouldRenderOffScreen"(arg0: $BubbleBlockTile$Type): boolean
public "getViewDistance"(): integer
get "viewDistance"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BubbleBlockTileRenderer$Type = ($BubbleBlockTileRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BubbleBlockTileRenderer_ = $BubbleBlockTileRenderer$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/blocks/$PresentBlock" {
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$DyeColor, $DyeColor$Type} from "packages/net/minecraft/world/item/$DyeColor"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$AbstractPresentBlock, $AbstractPresentBlock$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/blocks/$AbstractPresentBlock"

export class $PresentBlock extends $AbstractPresentBlock {
static readonly "SHAPE_LID": $VoxelShape
static readonly "SHAPE_OPEN": $VoxelShape
static readonly "SHAPE_CLOSED": $VoxelShape
static readonly "PACKED": $BooleanProperty
static readonly "WATERLOGGED": $BooleanProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(color: $DyeColor$Type, properties: $BlockBehaviour$Properties$Type)

public "newBlockEntity"(pPos: $BlockPos$Type, pState: $BlockState$Type): $BlockEntity
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PresentBlock$Type = ($PresentBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PresentBlock_ = $PresentBlock$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/reg/$ModBlockProperties" {
import {$IntegerProperty, $IntegerProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$IntegerProperty"
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$EnumProperty, $EnumProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$EnumProperty"
import {$ModBlockProperties$SignAttachment, $ModBlockProperties$SignAttachment$Type} from "packages/net/mehvahdjukaar/amendments/reg/$ModBlockProperties$SignAttachment"
import {$ModelDataKey, $ModelDataKey$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$ModelDataKey"
import {$ModBlockProperties$BlockAttachment, $ModBlockProperties$BlockAttachment$Type} from "packages/net/mehvahdjukaar/amendments/reg/$ModBlockProperties$BlockAttachment"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export class $ModBlockProperties {
static readonly "MIMIC": $ModelDataKey<($BlockState)>
static readonly "ITEM": $ModelDataKey<($ItemStack)>
static readonly "SIGN_ATTACHMENT": $EnumProperty<($ModBlockProperties$SignAttachment)>
static readonly "BLOCK_ATTACHMENT": $EnumProperty<($ModBlockProperties$BlockAttachment)>
static readonly "LIGHT_LEVEL": $IntegerProperty
static readonly "SOLID": $BooleanProperty
static readonly "BOILING": $BooleanProperty
static readonly "LEVEL_1_4": $IntegerProperty

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModBlockProperties$Type = ($ModBlockProperties);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModBlockProperties_ = $ModBlockProperties$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/common/block/$DoubleSkullBlock" {
import {$IntegerProperty, $IntegerProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$IntegerProperty"
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$SkullBlock, $SkullBlock$Type} from "packages/net/minecraft/world/level/block/$SkullBlock"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Equipable, $Equipable$Type} from "packages/net/minecraft/world/item/$Equipable"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$List, $List$Type} from "packages/java/util/$List"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$CollisionContext, $CollisionContext$Type} from "packages/net/minecraft/world/phys/shapes/$CollisionContext"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$HitResult, $HitResult$Type} from "packages/net/minecraft/world/phys/$HitResult"
import {$LootParams$Builder, $LootParams$Builder$Type} from "packages/net/minecraft/world/level/storage/loot/$LootParams$Builder"
import {$IRotatable, $IRotatable$Type} from "packages/net/mehvahdjukaar/moonlight/api/block/$IRotatable"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$Rotation, $Rotation$Type} from "packages/net/minecraft/world/level/block/$Rotation"
import {$BlockEntityTicker, $BlockEntityTicker$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityTicker"

export class $DoubleSkullBlock extends $SkullBlock implements $IRotatable {
static readonly "MAX": integer
static readonly "ROTATION": $IntegerProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(properties: $BlockBehaviour$Properties$Type)

public "getTicker"<T extends $BlockEntity>(level: $Level$Type, state: $BlockState$Type, type: $BlockEntityType$Type<(T)>): $BlockEntityTicker<(T)>
public "getCloneItemStack"(level: $BlockGetter$Type, pos: $BlockPos$Type, state: $BlockState$Type): $ItemStack
public "getCloneItemStack"(state: $BlockState$Type, hitResult: $HitResult$Type, world: $BlockGetter$Type, pos: $BlockPos$Type, player: $Player$Type): $ItemStack
public "getRotatedState"(state: $BlockState$Type, world: $LevelAccessor$Type, pos: $BlockPos$Type, rotation: $Rotation$Type, axis: $Direction$Type, hit: $Vec3$Type): $Optional<($BlockState)>
public "rotateOverAxis"(state: $BlockState$Type, world: $LevelAccessor$Type, pos: $BlockPos$Type, rot: $Rotation$Type, axis: $Direction$Type, hit: $Vec3$Type): $Optional<($Direction)>
public "updateShape"(pState: $BlockState$Type, dir: $Direction$Type, pNeighborState: $BlockState$Type, pLevel: $LevelAccessor$Type, pCurrentPos: $BlockPos$Type, pNeighborPos: $BlockPos$Type): $BlockState
public "getDrops"(pState: $BlockState$Type, builder: $LootParams$Builder$Type): $List<($ItemStack)>
public "getShape"(pState: $BlockState$Type, pLevel: $BlockGetter$Type, pPos: $BlockPos$Type, pContext: $CollisionContext$Type): $VoxelShape
public "newBlockEntity"(pPos: $BlockPos$Type, pState: $BlockState$Type): $BlockEntity
public "onRotated"(newState: $BlockState$Type, oldState: $BlockState$Type, world: $LevelAccessor$Type, pos: $BlockPos$Type, rotation: $Rotation$Type, axis: $Direction$Type, hit: $Vec3$Type): void
public static "get"(arg0: $ItemStack$Type): $Equipable
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DoubleSkullBlock$Type = ($DoubleSkullBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DoubleSkullBlock_ = $DoubleSkullBlock$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/configs/$ClientConfigs" {
import {$ConfigSpec, $ConfigSpec$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/configs/$ConfigSpec"

export class $ClientConfigs {
static readonly "SPEC": $ConfigSpec

constructor()

public static "init"(): void
public static "getSignColorMult"(): float
get "signColorMult"(): float
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientConfigs$Type = ($ClientConfigs);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientConfigs_ = $ClientConfigs$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$ClockBlockTile" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ClientboundBlockEntityDataPacket, $ClientboundBlockEntityDataPacket$Type} from "packages/net/minecraft/network/protocol/game/$ClientboundBlockEntityDataPacket"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $ClockBlockTile extends $BlockEntity {
 "blockState": $BlockState

constructor(pos: $BlockPos$Type, state: $BlockState$Type)

public static "tick"(level: $Level$Type, pPos: $BlockPos$Type, pState: $BlockState$Type, tile: $ClockBlockTile$Type): void
public "updateTime"(time: integer, level: $Level$Type, state: $BlockState$Type, pos: $BlockPos$Type): void
public "getUpdatePacket"(): $ClientboundBlockEntityDataPacket
public "getRoll"(partialTicks: float): float
public "load"(compound: $CompoundTag$Type): void
public "m_183515_"(tag: $CompoundTag$Type): void
public "getPower"(): integer
public "getDirection"(): $Direction
public static "canReadTime"(level: $Level$Type): boolean
public "getRollS"(partialTicks: float): float
public "updateInitialTime"(level: $Level$Type, state: $BlockState$Type, pos: $BlockPos$Type): void
public "getUpdateTag"(): $CompoundTag
get "updatePacket"(): $ClientboundBlockEntityDataPacket
get "power"(): integer
get "direction"(): $Direction
get "updateTag"(): $CompoundTag
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClockBlockTile$Type = ($ClockBlockTile);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClockBlockTile_ = $ClockBlockTile$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/block_models/$FaucetModelLoader" {
import {$Material, $Material$Type} from "packages/net/minecraft/client/resources/model/$Material"
import {$JsonObject, $JsonObject$Type} from "packages/com/google/gson/$JsonObject"
import {$JsonElement, $JsonElement$Type} from "packages/com/google/gson/$JsonElement"
import {$ModelBaker, $ModelBaker$Type} from "packages/net/minecraft/client/resources/model/$ModelBaker"
import {$ModelState, $ModelState$Type} from "packages/net/minecraft/client/resources/model/$ModelState"
import {$BakedModel, $BakedModel$Type} from "packages/net/minecraft/client/resources/model/$BakedModel"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$CustomModelLoader, $CustomModelLoader$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$CustomModelLoader"
import {$CustomGeometry, $CustomGeometry$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$CustomGeometry"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$JsonDeserializationContext, $JsonDeserializationContext$Type} from "packages/com/google/gson/$JsonDeserializationContext"
import {$TextureAtlasSprite, $TextureAtlasSprite$Type} from "packages/net/minecraft/client/renderer/texture/$TextureAtlasSprite"

export class $FaucetModelLoader implements $CustomModelLoader {

constructor()

public "deserialize"(json: $JsonObject$Type, jsonDeserializationContext: $JsonDeserializationContext$Type): $CustomGeometry
public static "parseModel"(j: $JsonElement$Type, modelBaker: $ModelBaker$Type, spriteGetter: $Function$Type<($Material$Type), ($TextureAtlasSprite$Type)>, transform: $ModelState$Type, location: $ResourceLocation$Type): $BakedModel
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FaucetModelLoader$Type = ($FaucetModelLoader);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FaucetModelLoader_ = $FaucetModelLoader$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/dispenser/$FillFluidHolderBehavior" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$DispenserHelper$AdditionalDispenserBehavior, $DispenserHelper$AdditionalDispenserBehavior$Type} from "packages/net/mehvahdjukaar/moonlight/api/util/$DispenserHelper$AdditionalDispenserBehavior"
import {$BlockSource, $BlockSource$Type} from "packages/net/minecraft/core/$BlockSource"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $FillFluidHolderBehavior extends $DispenserHelper$AdditionalDispenserBehavior {

constructor(item: $Item$Type)

public static "bootStrap"(): void
public static "setEntityPokingOutOfBlock"(arg0: $BlockSource$Type, arg1: $Entity$Type, arg2: $Direction$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FillFluidHolderBehavior$Type = ($FillFluidHolderBehavior);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FillFluidHolderBehavior_ = $FillFluidHolderBehavior$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/resources/$BlockTypeResTransformer" {
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$BlockTypeResTransformer$TextModification, $BlockTypeResTransformer$TextModification$Type} from "packages/net/mehvahdjukaar/moonlight/api/resources/$BlockTypeResTransformer$TextModification"
import {$StaticResource, $StaticResource$Type} from "packages/net/mehvahdjukaar/moonlight/api/resources/$StaticResource"
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$WoodType, $WoodType$Type} from "packages/net/mehvahdjukaar/moonlight/api/set/wood/$WoodType"
import {$ItemLike, $ItemLike$Type} from "packages/net/minecraft/world/level/$ItemLike"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$BlockType, $BlockType$Type} from "packages/net/mehvahdjukaar/moonlight/api/set/$BlockType"
import {$ResourceManager, $ResourceManager$Type} from "packages/net/minecraft/server/packs/resources/$ResourceManager"
import {$LeavesType, $LeavesType$Type} from "packages/net/mehvahdjukaar/moonlight/api/set/leaves/$LeavesType"

export class $BlockTypeResTransformer<T extends $BlockType> {


public "transform"(resource: $StaticResource$Type, blockId: $ResourceLocation$Type, type: T): $StaticResource
public static "create"<T extends $BlockType>(modId: string, manager: $ResourceManager$Type): $BlockTypeResTransformer<(T)>
public static "wood"(modId: string, manager: $ResourceManager$Type): $BlockTypeResTransformer<($WoodType)>
public static "leaves"(modId: string, manager: $ResourceManager$Type): $BlockTypeResTransformer<($LeavesType)>
public "addModifier"(modifier: $BlockTypeResTransformer$TextModification$Type<(T)>): $BlockTypeResTransformer<(T)>
public "replaceLeavesTextures"(woodType: $LeavesType$Type): $BlockTypeResTransformer<(T)>
public static "replaceTypeNoNamespace"(text: string, blockType: $BlockType$Type, blockId: $ResourceLocation$Type, oldTypeName: string): string
public "replaceWoodTextures"(woodType: $WoodType$Type): $BlockTypeResTransformer<(T)>
public "replaceWithTextureFromChild"(target: string, childProvider: $Function$Type<(T), ($ItemLike$Type)>, texturePredicate: $Predicate$Type<(string)>): $BlockTypeResTransformer<(T)>
public "replaceWithTextureFromChild"(target: string, textureFromChild: string): $BlockTypeResTransformer<(T)>
public "replaceWithTextureFromChild"(target: string, textureFromChild: string, texturePredicate: $Predicate$Type<(string)>): $BlockTypeResTransformer<(T)>
public static "replaceFullGenericType"(text: string, blockType: $BlockType$Type, blockId: $ResourceLocation$Type, oldTypeName: string, oldNamespace: string, classType: string): string
public "IDReplaceBlock"(blockName: string): $BlockTypeResTransformer<(T)>
public "replaceSimpleType"(oldTypeName: string): $BlockTypeResTransformer<(T)>
public "setIDModifier"(modifier: $BlockTypeResTransformer$TextModification$Type<(T)>): $BlockTypeResTransformer<(T)>
public "IDReplaceType"(oldTypeName: string): $BlockTypeResTransformer<(T)>
public "replaceOakBark"(): $BlockTypeResTransformer<(T)>
public "replaceOakStripped"(): $BlockTypeResTransformer<(T)>
public "replaceGenericType"(oldTypeName: string, entryClass: string): $BlockTypeResTransformer<(T)>
public "replaceString"(from: string, to: string): $BlockTypeResTransformer<(T)>
public "replaceOakPlanks"(): $BlockTypeResTransformer<(T)>
public "replaceOakLeaves"(): $BlockTypeResTransformer<(T)>
public "replaceItemType"(oldTypeName: string): $BlockTypeResTransformer<(T)>
public "replaceBlockType"(oldTypeName: string): $BlockTypeResTransformer<(T)>
public static "replaceType"(text: string, blockType: $BlockType$Type, blockId: $ResourceLocation$Type, oldTypeName: string, oldNamespace: string): string
set "iDModifier"(value: $BlockTypeResTransformer$TextModification$Type<(T)>)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BlockTypeResTransformer$Type<T> = ($BlockTypeResTransformer<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BlockTypeResTransformer_<T> = $BlockTypeResTransformer$Type<(T)>;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/integration/$FlywheelCompat" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $FlywheelCompat {

constructor()

public static "setupClient"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FlywheelCompat$Type = ($FlywheelCompat);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FlywheelCompat_ = $FlywheelCompat$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/core/criteria_triggers/$OptionalAdvancementTrigger$Instance" {
import {$JsonObject, $JsonObject$Type} from "packages/com/google/gson/$JsonObject"
import {$AbstractCriterionTriggerInstance, $AbstractCriterionTriggerInstance$Type} from "packages/net/minecraft/advancements/critereon/$AbstractCriterionTriggerInstance"
import {$OptionalAdvancementTrigger, $OptionalAdvancementTrigger$Type} from "packages/net/mehvahdjukaar/moonlight/core/criteria_triggers/$OptionalAdvancementTrigger"
import {$SerializationContext, $SerializationContext$Type} from "packages/net/minecraft/advancements/critereon/$SerializationContext"
import {$ContextAwarePredicate, $ContextAwarePredicate$Type} from "packages/net/minecraft/advancements/critereon/$ContextAwarePredicate"

export class $OptionalAdvancementTrigger$Instance extends $AbstractCriterionTriggerInstance {

constructor(this$0: $OptionalAdvancementTrigger$Type, composite: $ContextAwarePredicate$Type, condition: string)

public "serializeToJson"(serializer: $SerializationContext$Type): $JsonObject
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $OptionalAdvancementTrigger$Instance$Type = ($OptionalAdvancementTrigger$Instance);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $OptionalAdvancementTrigger$Instance_ = $OptionalAdvancementTrigger$Instance$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/common/$SwayingAnimation" {
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$Vector3f, $Vector3f$Type} from "packages/org/joml/$Vector3f"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$SwingAnimation, $SwingAnimation$Type} from "packages/net/mehvahdjukaar/amendments/common/$SwingAnimation"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $SwayingAnimation extends $SwingAnimation {

constructor(getRotationAxis: $Function$Type<($BlockState$Type), ($Vector3f$Type)>)

public "reset"(): void
public "tick"(pLevel: $Level$Type, pPos: $BlockPos$Type, pState: $BlockState$Type): void
public "getAngle"(partialTicks: float): float
public "hitByEntity"(entity: $Entity$Type, state: $BlockState$Type, pos: $BlockPos$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SwayingAnimation$Type = ($SwayingAnimation);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SwayingAnimation_ = $SwayingAnimation$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/entities/$BombEntity" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Packet, $Packet$Type} from "packages/net/minecraft/network/protocol/$Packet"
import {$IExtraClientSpawnData, $IExtraClientSpawnData$Type} from "packages/net/mehvahdjukaar/moonlight/api/entity/$IExtraClientSpawnData"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$ImprovedProjectileEntity, $ImprovedProjectileEntity$Type} from "packages/net/mehvahdjukaar/moonlight/api/entity/$ImprovedProjectileEntity"
import {$ClientGamePacketListener, $ClientGamePacketListener$Type} from "packages/net/minecraft/network/protocol/game/$ClientGamePacketListener"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BombEntity$BombType, $BombEntity$BombType$Type} from "packages/net/mehvahdjukaar/supplementaries/common/entities/$BombEntity$BombType"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $BombEntity extends $ImprovedProjectileEntity implements $IExtraClientSpawnData {
/**
 * 
 * @deprecated
 */
 "touchedGround": boolean
/**
 * 
 * @deprecated
 */
 "groundTime": integer
 "ownerUUID": $UUID
 "cachedOwner": $Entity
 "leftOwner": boolean
 "hasBeenShot": boolean
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(worldIn: $Level$Type, x: double, y: double, z: double, type: $BombEntity$BombType$Type)
constructor(worldIn: $Level$Type, throwerIn: $LivingEntity$Type, type: $BombEntity$BombType$Type)
constructor(type: $EntityType$Type<(any)>, world: $Level$Type)

public "reachedEndOfLife"(): void
public "turnOff"(): void
public "tick"(): void
public "handleEntityEvent"(id: byte): void
public "playerTouch"(entityIn: $Player$Type): void
public "readAdditionalSaveData"(compound: $CompoundTag$Type): void
public "addAdditionalSaveData"(compound: $CompoundTag$Type): void
public "spawnTrailParticles"(): void
public "hasReachedEndOfLife"(): boolean
public "getAddEntityPacket"(): $Packet<($ClientGamePacketListener)>
public "writeSpawnData"(buffer: $FriendlyByteBuf$Type): void
public "readSpawnData"(buffer: $FriendlyByteBuf$Type): void
public "getItem"(): $ItemStack
get "addEntityPacket"(): $Packet<($ClientGamePacketListener)>
get "item"(): $ItemStack
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BombEntity$Type = ($BombEntity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BombEntity_ = $BombEntity$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/renderers/tiles/$BookPileBlockTileRenderer" {
import {$VertexConsumer, $VertexConsumer$Type} from "packages/com/mojang/blaze3d/vertex/$VertexConsumer"
import {$BookPileBlockTile, $BookPileBlockTile$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$BookPileBlockTile"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$BlockEntityRendererProvider$Context, $BlockEntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/blockentity/$BlockEntityRendererProvider$Context"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$BookPileBlockTile$BooksList, $BookPileBlockTile$BooksList$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$BookPileBlockTile$BooksList"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$BookPileBlockTile$VisualBook, $BookPileBlockTile$VisualBook$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$BookPileBlockTile$VisualBook"
import {$BlockEntityRenderer, $BlockEntityRenderer$Type} from "packages/net/minecraft/client/renderer/blockentity/$BlockEntityRenderer"

export class $BookPileBlockTileRenderer implements $BlockEntityRenderer<($BookPileBlockTile)> {

constructor(context: $BlockEntityRendererProvider$Context$Type)

public "render"(tile: $BookPileBlockTile$Type, partialTicks: float, matrixStack: $PoseStack$Type, bufferIn: $MultiBufferSource$Type, light: integer, overlay: integer): void
public "shouldRender"(blockEntity: $BookPileBlockTile$Type, cameraPos: $Vec3$Type): boolean
public static "renderBookPile"(horizontal: boolean, books: $BookPileBlockTile$BooksList$Type, matrixStack: $PoseStack$Type, bufferIn: $Function$Type<($BookPileBlockTile$VisualBook$Type), ($VertexConsumer$Type)>, light: integer, overlay: integer, state: $BlockState$Type): void
public "shouldRenderOffScreen"(arg0: $BookPileBlockTile$Type): boolean
public "getViewDistance"(): integer
get "viewDistance"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BookPileBlockTileRenderer$Type = ($BookPileBlockTileRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BookPileBlockTileRenderer_ = $BookPileBlockTileRenderer$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/items/crafting/$RecipeBookHack" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$RecipeBookCategories, $RecipeBookCategories$Type} from "packages/net/minecraft/client/$RecipeBookCategories"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Recipe, $Recipe$Type} from "packages/net/minecraft/world/item/crafting/$Recipe"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $RecipeBookHack {

constructor()

public static "reloadServer"(): void
public static "createClientRecipes"(): $Map<($RecipeBookCategories), ($List<($List<($Recipe<(any)>)>)>)>
public static "getSpecialRecipe"(recipe: $ResourceLocation$Type): $Recipe<(any)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RecipeBookHack$Type = ($RecipeBookHack);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RecipeBookHack_ = $RecipeBookHack$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/events/$IDropItemOnDeathEvent" {
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$SimpleEvent, $SimpleEvent$Type} from "packages/net/mehvahdjukaar/moonlight/api/events/$SimpleEvent"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export interface $IDropItemOnDeathEvent extends $SimpleEvent {

 "setCanceled"(arg0: boolean): void
 "isCanceled"(): boolean
 "getPlayer"(): $Player
 "getReturnItemStack"(): $ItemStack
 "getItemStack"(): $ItemStack
 "setReturnItemStack"(arg0: $ItemStack$Type): void
 "isBeforeDrop"(): boolean
}

export namespace $IDropItemOnDeathEvent {
function create(itemStack: $ItemStack$Type, player: $Player$Type, beforeDrop: boolean): $IDropItemOnDeathEvent
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IDropItemOnDeathEvent$Type = ($IDropItemOnDeathEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IDropItemOnDeathEvent_ = $IDropItemOnDeathEvent$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/blocks/$AshLayerBlock" {
import {$IntegerProperty, $IntegerProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$IntegerProperty"
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$Fluid, $Fluid$Type} from "packages/net/minecraft/world/level/material/$Fluid"
import {$IFireConsumeBlockEvent, $IFireConsumeBlockEvent$Type} from "packages/net/mehvahdjukaar/moonlight/api/events/$IFireConsumeBlockEvent"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$Projectile, $Projectile$Type} from "packages/net/minecraft/world/entity/projectile/$Projectile"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$FallingBlockEntity, $FallingBlockEntity$Type} from "packages/net/minecraft/world/entity/item/$FallingBlockEntity"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$PathComputationType, $PathComputationType$Type} from "packages/net/minecraft/world/level/pathfinder/$PathComputationType"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$FallingBlock, $FallingBlock$Type} from "packages/net/minecraft/world/level/block/$FallingBlock"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"
import {$Biome$Precipitation, $Biome$Precipitation$Type} from "packages/net/minecraft/world/level/biome/$Biome$Precipitation"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$CollisionContext, $CollisionContext$Type} from "packages/net/minecraft/world/phys/shapes/$CollisionContext"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ThreadLocal, $ThreadLocal$Type} from "packages/java/lang/$ThreadLocal"

export class $AshLayerBlock extends $FallingBlock {
static readonly "LAYERS": $IntegerProperty
static readonly "RECURSION_HACK": $ThreadLocal<(boolean)>
static readonly "GRASS_SPREAD_WIDTH": integer
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(properties: $BlockBehaviour$Properties$Type)

public static "updateBasaltBelow"(selfPos: $BlockPos$Type, level: $Level$Type): boolean
public "getStateForPlacement"(context: $BlockPlaceContext$Type): $BlockState
public "setPlacedBy"(level: $Level$Type, pos: $BlockPos$Type, state: $BlockState$Type, placer: $LivingEntity$Type, stack: $ItemStack$Type): void
public "handlePrecipitation"(pState: $BlockState$Type, level: $Level$Type, pPos: $BlockPos$Type, pPrecipitation: $Biome$Precipitation$Type): void
public "fallOn"(level: $Level$Type, state: $BlockState$Type, pos: $BlockPos$Type, entity: $Entity$Type, height: float): void
public "isPathfindable"(state: $BlockState$Type, blockGetter: $BlockGetter$Type, pos: $BlockPos$Type, pathType: $PathComputationType$Type): boolean
public "onPlace"(state: $BlockState$Type, worldIn: $Level$Type, pos: $BlockPos$Type, oldState: $BlockState$Type, isMoving: boolean): void
public "updateShape"(state: $BlockState$Type, direction: $Direction$Type, facingState: $BlockState$Type, world: $LevelAccessor$Type, currentPos: $BlockPos$Type, otherPos: $BlockPos$Type): $BlockState
public "useShapeForLightOcclusion"(state: $BlockState$Type): boolean
public "canBeReplaced"(pState: $BlockState$Type, useContext: $BlockPlaceContext$Type): boolean
public "canBeReplaced"(state: $BlockState$Type, fluid: $Fluid$Type): boolean
public "getBlockSupportShape"(pState: $BlockState$Type, pReader: $BlockGetter$Type, pPos: $BlockPos$Type): $VoxelShape
public "getCollisionShape"(pState: $BlockState$Type, pLevel: $BlockGetter$Type, pPos: $BlockPos$Type, pContext: $CollisionContext$Type): $VoxelShape
public "getVisualShape"(pState: $BlockState$Type, pReader: $BlockGetter$Type, pPos: $BlockPos$Type, pContext: $CollisionContext$Type): $VoxelShape
public "randomTick"(pState: $BlockState$Type, level: $ServerLevel$Type, pPos: $BlockPos$Type, pRandom: $RandomSource$Type): void
public "getShape"(pState: $BlockState$Type, pLevel: $BlockGetter$Type, pPos: $BlockPos$Type, pContext: $CollisionContext$Type): $VoxelShape
public "tick"(state: $BlockState$Type, level: $ServerLevel$Type, pos: $BlockPos$Type, pRand: $RandomSource$Type): void
public "onProjectileHit"(level: $Level$Type, state: $BlockState$Type, pHit: $BlockHitResult$Type, projectile: $Projectile$Type): void
public "entityInside"(state: $BlockState$Type, level: $Level$Type, pos: $BlockPos$Type, entity: $Entity$Type): void
public static "applyBonemeal"(stack: $ItemStack$Type, level: $Level$Type, pos: $BlockPos$Type, player: $Player$Type): boolean
public "getDustColor"(state: $BlockState$Type, reader: $BlockGetter$Type, pos: $BlockPos$Type): integer
public "onLand"(level: $Level$Type, pos: $BlockPos$Type, state: $BlockState$Type, replaceableState: $BlockState$Type, fallingBlock: $FallingBlockEntity$Type): void
public static "tryConvertToAsh"(event: $IFireConsumeBlockEvent$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AshLayerBlock$Type = ($AshLayerBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AshLayerBlock_ = $AshLayerBlock$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/misc/$OverencumberedEffect" {
import {$AttributeMap, $AttributeMap$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeMap"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $OverencumberedEffect extends $MobEffect {

constructor()

public "addAttributeModifiers"(pLivingEntity: $LivingEntity$Type, pAttributeMap: $AttributeMap$Type, pAmplifier: integer): void
public "removeAttributeModifiers"(pLivingEntity: $LivingEntity$Type, pAttributeMap: $AttributeMap$Type, pAmplifier: integer): void
public "isInstantenous"(): boolean
public "applyEffectTick"(pLivingEntity: $LivingEntity$Type, pAmplifier: integer): void
public "applyInstantenousEffect"(pSource: $Entity$Type, pIndirectSource: $Entity$Type, pLivingEntity: $LivingEntity$Type, pAmplifier: integer, pHealth: double): void
get "instantenous"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $OverencumberedEffect$Type = ($OverencumberedEffect);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $OverencumberedEffect_ = $OverencumberedEffect$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/entity/$VillagerAIHooks" {
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$MemoryModuleType, $MemoryModuleType$Type} from "packages/net/minecraft/world/entity/ai/memory/$MemoryModuleType"
import {$IVillagerBrainEvent, $IVillagerBrainEvent$Type} from "packages/net/mehvahdjukaar/moonlight/api/events/$IVillagerBrainEvent"

export class $VillagerAIHooks {

constructor()

public static "registerMemory"(memoryModuleType: $MemoryModuleType$Type<(any)>): void
public static "addBrainModification"(eventConsumer: $Consumer$Type<($IVillagerBrainEvent$Type)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $VillagerAIHooks$Type = ($VillagerAIHooks);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $VillagerAIHooks_ = $VillagerAIHooks$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/client/model/forge/$ExtraModelDataImpl" {
import {$ModelData, $ModelData$Type} from "packages/net/minecraftforge/client/model/data/$ModelData"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$ModelDataKey, $ModelDataKey$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$ModelDataKey"
import {$ExtraModelData, $ExtraModelData$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$ExtraModelData"
import {$ExtraModelData$Builder, $ExtraModelData$Builder$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$ExtraModelData$Builder"

export class $ExtraModelDataImpl extends $Record implements $ExtraModelData {

constructor(data: $ModelData$Type)

public "get"<T>(key: $ModelDataKey$Type<(T)>): T
public "equals"(o: any): boolean
public "toString"(): string
public "hashCode"(): integer
public static "builder"(): $ExtraModelData$Builder
public "data"(): $ModelData
public "isEmpty"(): boolean
get "empty"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ExtraModelDataImpl$Type = ($ExtraModelDataImpl);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ExtraModelDataImpl_ = $ExtraModelDataImpl$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/worldgen/$RoadSignFeature$Config" {
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$ConfiguredFeature, $ConfiguredFeature$Type} from "packages/net/minecraft/world/level/levelgen/feature/$ConfiguredFeature"
import {$RoadSignFeature$RandomState, $RoadSignFeature$RandomState$Type} from "packages/net/mehvahdjukaar/supplementaries/common/worldgen/$RoadSignFeature$RandomState"
import {$Stream, $Stream$Type} from "packages/java/util/stream/$Stream"
import {$WoodType, $WoodType$Type} from "packages/net/mehvahdjukaar/moonlight/api/set/wood/$WoodType"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$FeatureConfiguration, $FeatureConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$FeatureConfiguration"
import {$Codec, $Codec$Type} from "packages/com/mojang/serialization/$Codec"

export class $RoadSignFeature$Config extends $Record implements $FeatureConfiguration {
static readonly "CODEC": $Codec<($RoadSignFeature$Config)>

constructor(randomState: $RoadSignFeature$RandomState$Type, postWood: $WoodType$Type, signWood: $WoodType$Type, fence: $BlockState$Type, trapdoor: $BlockState$Type, slab: $BlockState$Type, log: $BlockState$Type, cobble: $BlockState$Type, mossyCobble: $BlockState$Type, wall: $BlockState$Type, mossyWall: $BlockState$Type, lanternUp: $BlockState$Type, lanternDown: $BlockState$Type, candleHolder: $BlockState$Type, stone: $BlockState$Type, stoneSlab: $BlockState$Type, stoneStairs: $BlockState$Type, invalidMessage: string)

public "equals"(o: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "log"(): $BlockState
public "fence"(): $BlockState
public "wall"(): $BlockState
public "mossyCobble"(): $BlockState
public "mossyWall"(): $BlockState
public "cobble"(): $BlockState
public "lanternDown"(): $BlockState
public "lanternUp"(): $BlockState
public "candleHolder"(): $BlockState
public "stoneStairs"(): $BlockState
public "stoneSlab"(): $BlockState
public "signWood"(): $WoodType
public "slab"(): $BlockState
public "postWood"(): $WoodType
public "invalidMessage"(): string
public "randomState"(): $RoadSignFeature$RandomState
public "stone"(): $BlockState
public "trapdoor"(): $BlockState
public "getFeatures"(): $Stream<($ConfiguredFeature<(any), (any)>)>
get "features"(): $Stream<($ConfiguredFeature<(any), (any)>)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RoadSignFeature$Config$Type = ($RoadSignFeature$Config);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RoadSignFeature$Config_ = $RoadSignFeature$Config$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/blocks/$RedstoneDriverBlock" {
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$DiodeBlock, $DiodeBlock$Type} from "packages/net/minecraft/world/level/block/$DiodeBlock"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$DirectionProperty, $DirectionProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$DirectionProperty"

export class $RedstoneDriverBlock extends $DiodeBlock {
static readonly "POWERED": $BooleanProperty
static readonly "FACING": $DirectionProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(properties: $BlockBehaviour$Properties$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RedstoneDriverBlock$Type = ($RedstoneDriverBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RedstoneDriverBlock_ = $RedstoneDriverBlock$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/integration/forge/$FramedBlocksCompatImpl" {
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$ExtraModelData, $ExtraModelData$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$ExtraModelData"
import {$SignPostBlockTile, $SignPostBlockTile$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$SignPostBlockTile"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"

export class $FramedBlocksCompatImpl {

constructor()

public static "tryGettingFramedBlock"(targetBlock: $Block$Type, world: $Level$Type, blockpos: $BlockPos$Type): $Block
public static "interactWithFramedSignPost"(tile: $SignPostBlockTile$Type, player: $Player$Type, handIn: $InteractionHand$Type, itemstack: $ItemStack$Type, level: $Level$Type, pos: $BlockPos$Type): boolean
public static "getFramedFence"(): $BlockState
public static "getModelData"(mimic: $BlockState$Type): $ExtraModelData
get "framedFence"(): $BlockState
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FramedBlocksCompatImpl$Type = ($FramedBlocksCompatImpl);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FramedBlocksCompatImpl_ = $FramedBlocksCompatImpl$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/core/fake_player/$FakeLocalPlayer" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$WalkAnimationState, $WalkAnimationState$Type} from "packages/net/minecraft/world/entity/$WalkAnimationState"
import {$Abilities, $Abilities$Type} from "packages/net/minecraft/world/entity/player/$Abilities"
import {$ClientLevel, $ClientLevel$Type} from "packages/net/minecraft/client/multiplayer/$ClientLevel"
import {$AttributeMap, $AttributeMap$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeMap"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$AbstractContainerMenu, $AbstractContainerMenu$Type} from "packages/net/minecraft/world/inventory/$AbstractContainerMenu"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$GameProfile, $GameProfile$Type} from "packages/com/mojang/authlib/$GameProfile"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$LevelRenderer, $LevelRenderer$Type} from "packages/net/minecraft/client/renderer/$LevelRenderer"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"
import {$AbstractClientPlayer, $AbstractClientPlayer$Type} from "packages/net/minecraft/client/player/$AbstractClientPlayer"
import {$FishingHook, $FishingHook$Type} from "packages/net/minecraft/world/entity/projectile/$FishingHook"
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Pose, $Pose$Type} from "packages/net/minecraft/world/entity/$Pose"
import {$InventoryMenu, $InventoryMenu$Type} from "packages/net/minecraft/world/inventory/$InventoryMenu"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$PlayerInfo, $PlayerInfo$Type} from "packages/net/minecraft/client/multiplayer/$PlayerInfo"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $FakeLocalPlayer extends $AbstractClientPlayer {
 "playerInfo": $PlayerInfo
 "elytraRotX": float
 "elytraRotY": float
 "elytraRotZ": float
readonly "clientLevel": $ClientLevel
static readonly "PERSISTED_NBT_TAG": string
static readonly "MAX_NAME_LENGTH": integer
static readonly "MAX_HEALTH": integer
static readonly "SLEEP_DURATION": integer
static readonly "WAKE_UP_DURATION": integer
static readonly "ENDER_SLOT_OFFSET": integer
static readonly "CROUCH_BB_HEIGHT": float
static readonly "SWIMMING_BB_WIDTH": float
static readonly "SWIMMING_BB_HEIGHT": float
static readonly "DEFAULT_EYE_HEIGHT": float
static readonly "STANDING_DIMENSIONS": $EntityDimensions
 "inventoryMenu": $InventoryMenu
 "containerMenu": $AbstractContainerMenu
 "oBob": float
 "bob": float
 "takeXpDelay": integer
 "xCloakO": double
 "yCloakO": double
 "zCloakO": double
 "xCloak": double
 "yCloak": double
 "zCloak": double
readonly "abilities": $Abilities
 "experienceLevel": integer
 "totalExperience": integer
 "experienceProgress": float
 "fishing": $FishingHook
readonly "animatorJS$objectPlayer": $Player
static readonly "HAND_SLOTS": integer
static readonly "ARMOR_SLOTS": integer
static readonly "EQUIPMENT_SLOT_OFFSET": integer
static readonly "ARMOR_SLOT_OFFSET": integer
static readonly "SWING_DURATION": integer
static readonly "PLAYER_HURT_EXPERIENCE_TIME": integer
static readonly "MIN_MOVEMENT_DISTANCE": double
static readonly "DEFAULT_BASE_GRAVITY": double
static readonly "DEATH_DURATION": integer
static readonly "USE_ITEM_INTERVAL": integer
static readonly "EXTRA_RENDER_CULLING_SIZE_WITH_BIG_HAT": float
 "attributes": $AttributeMap
readonly "activeEffects": $Map<($MobEffect), ($MobEffectInstance)>
 "swinging": boolean
 "swingingArm": $InteractionHand
 "swingTime": integer
 "removeArrowTime": integer
 "removeStingerTime": integer
 "hurtTime": integer
 "hurtDuration": integer
 "deathTime": integer
 "oAttackAnim": float
 "attackAnim": float
 "attackStrengthTicker": integer
readonly "walkAnimation": $WalkAnimationState
readonly "invulnerableDuration": integer
readonly "timeOffs": float
readonly "rotA": float
 "yBodyRot": float
 "yBodyRotO": float
 "yHeadRot": float
 "yHeadRotO": float
 "dead": boolean
 "jumping": boolean
 "xxa": float
 "yya": float
 "zza": float
 "effectsDirty": boolean
 "noJumpDelay": integer
 "entityJs$builder": any
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(pClientLevel: $ClientLevel$Type, pGameProfile: $GameProfile$Type)

public "setPitch"(pXRot: float): void
public "setYaw"(pYRot: float): void
public "getDimensions"(pose: $Pose$Type): $EntityDimensions
public "tick"(): void
public "playSound"(pSound: $SoundEvent$Type, pVolume: float, pPitch: float): void
public "position"(): $Vec3
public "blockPosition"(): $BlockPos
public "tdv$getDynamicLightX"(): double
public "tdv$getDynamicLightZ"(): double
public "tdv$getDynamicLightWorld"(): $Level
public "tdv$shouldUpdateDynamicLight"(): boolean
public "tdv$resetDynamicLight"(): void
public "tdv$getDynamicLightY"(): double
public "tdv$lambdynlights$scheduleTrackedChunksRebuild"(arg0: $LevelRenderer$Type): void
public "tdv$lambdynlights$updateDynamicLight"(arg0: $LevelRenderer$Type): boolean
public "getCachedFeetBlockState"(): $BlockState
set "pitch"(value: float)
set "yaw"(value: float)
get "cachedFeetBlockState"(): $BlockState
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FakeLocalPlayer$Type = ($FakeLocalPlayer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FakeLocalPlayer_ = $FakeLocalPlayer$Type;
}}
declare module "packages/net/mehvahdjukaar/modelfix/forge/$ModelFixForge" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $ModelFixForge {

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModelFixForge$Type = ($ModelFixForge);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModelFixForge_ = $ModelFixForge$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/trades/$ModItemListing" {
import {$MerchantOffer, $MerchantOffer$Type} from "packages/net/minecraft/world/item/trading/$MerchantOffer"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$VillagerTrades$ItemListing, $VillagerTrades$ItemListing$Type} from "packages/net/minecraft/world/entity/npc/$VillagerTrades$ItemListing"
import {$Codec, $Codec$Type} from "packages/com/mojang/serialization/$Codec"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export interface $ModItemListing extends $VillagerTrades$ItemListing {

 "isValid"(): boolean
 "getLevel"(): integer
 "getCodec"(): $Codec<(any)>
 "getOffer"(arg0: $Entity$Type, arg1: $RandomSource$Type): $MerchantOffer
}

export namespace $ModItemListing {
const CODEC: $Codec<($ModItemListing)>
function defaultXp(buying: boolean, villagerLevel: integer): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModItemListing$Type = ($ModItemListing);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModItemListing_ = $ModItemListing$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/renderers/items/$AltimeterItemRenderer" {
import {$ItemDisplayContext, $ItemDisplayContext$Type} from "packages/net/minecraft/world/item/$ItemDisplayContext"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$ItemStackRenderer, $ItemStackRenderer$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/$ItemStackRenderer"

export class $AltimeterItemRenderer extends $ItemStackRenderer {

constructor()

public static "onReload"(): void
public "renderByItem"(stack: $ItemStack$Type, transformType: $ItemDisplayContext$Type, poseStack: $PoseStack$Type, buffer: $MultiBufferSource$Type, packedLight: integer, packedOverlay: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AltimeterItemRenderer$Type = ($AltimeterItemRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AltimeterItemRenderer_ = $AltimeterItemRenderer$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/tooltip/$QuiverTooltipComponent" {
import {$TooltipComponent, $TooltipComponent$Type} from "packages/net/minecraft/world/inventory/tooltip/$TooltipComponent"
import {$FormattedCharSequence, $FormattedCharSequence$Type} from "packages/net/minecraft/util/$FormattedCharSequence"
import {$Font, $Font$Type} from "packages/net/minecraft/client/gui/$Font"
import {$MultiBufferSource$BufferSource, $MultiBufferSource$BufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource$BufferSource"
import {$Matrix4f, $Matrix4f$Type} from "packages/org/joml/$Matrix4f"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$ClientTooltipComponent, $ClientTooltipComponent$Type} from "packages/net/minecraft/client/gui/screens/inventory/tooltip/$ClientTooltipComponent"
import {$QuiverTooltip, $QuiverTooltip$Type} from "packages/net/mehvahdjukaar/supplementaries/common/items/tooltip_components/$QuiverTooltip"

export class $QuiverTooltipComponent implements $ClientTooltipComponent {
static readonly "TEXTURE_LOCATION": $ResourceLocation

constructor(tooltip: $QuiverTooltip$Type)

public "getWidth"(font: $Font$Type): integer
public "getHeight"(): integer
public "renderImage"(font: $Font$Type, mouseX: integer, mouseY: integer, graphics: $GuiGraphics$Type): void
public static "create"(arg0: $TooltipComponent$Type): $ClientTooltipComponent
public "renderText"(arg0: $Font$Type, arg1: integer, arg2: integer, arg3: $Matrix4f$Type, arg4: $MultiBufferSource$BufferSource$Type): void
public static "create"(arg0: $FormattedCharSequence$Type): $ClientTooltipComponent
get "height"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $QuiverTooltipComponent$Type = ($QuiverTooltipComponent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $QuiverTooltipComponent_ = $QuiverTooltipComponent$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/core/recipe/$StoneCutterRecipeTemplate" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$JsonObject, $JsonObject$Type} from "packages/com/google/gson/$JsonObject"
import {$IRecipeTemplate, $IRecipeTemplate$Type} from "packages/net/mehvahdjukaar/moonlight/api/resources/recipe/$IRecipeTemplate"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Ingredient, $Ingredient$Type} from "packages/net/minecraft/world/item/crafting/$Ingredient"
import {$RecipeCategory, $RecipeCategory$Type} from "packages/net/minecraft/data/recipes/$RecipeCategory"
import {$CraftingBookCategory, $CraftingBookCategory$Type} from "packages/net/minecraft/world/item/crafting/$CraftingBookCategory"
import {$SingleItemRecipeBuilder$Result, $SingleItemRecipeBuilder$Result$Type} from "packages/net/minecraft/data/recipes/$SingleItemRecipeBuilder$Result"
import {$BlockType, $BlockType$Type} from "packages/net/mehvahdjukaar/moonlight/api/set/$BlockType"

export class $StoneCutterRecipeTemplate implements $IRecipeTemplate<($SingleItemRecipeBuilder$Result)> {
readonly "result": $Item
readonly "count": integer
readonly "group": string
readonly "ingredient": $Ingredient
readonly "category": $CraftingBookCategory

constructor(json: $JsonObject$Type)

public "addCondition"(condition: any): void
public "getConditions"(): $List<(any)>
public "createSimilar"<T extends $BlockType>(originalMat: T, destinationMat: T, unlockItem: $Item$Type): $SingleItemRecipeBuilder$Result
public static "convertIngredients"<T extends $BlockType>(originalMat: T, destinationMat: T, ing: $Ingredient$Type): $Ingredient
public "determineBookCategory"(recipeCategory: $CraftingBookCategory$Type): $RecipeCategory
get "conditions"(): $List<(any)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $StoneCutterRecipeTemplate$Type = ($StoneCutterRecipeTemplate);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $StoneCutterRecipeTemplate_ = $StoneCutterRecipeTemplate$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/platform/forge/$RegHelperImpl" {
import {$FireworkRocketItem$Shape, $FireworkRocketItem$Shape$Type} from "packages/net/minecraft/world/item/$FireworkRocketItem$Shape"
import {$Fluid, $Fluid$Type} from "packages/net/minecraft/world/level/material/$Fluid"
import {$TriFunction, $TriFunction$Type} from "packages/net/mehvahdjukaar/moonlight/api/misc/$TriFunction"
import {$RegHelper$SpawnPlacementEvent, $RegHelper$SpawnPlacementEvent$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/$RegHelper$SpawnPlacementEvent"
import {$Registrator, $Registrator$Type} from "packages/net/mehvahdjukaar/moonlight/api/misc/$Registrator"
import {$MenuType, $MenuType$Type} from "packages/net/minecraft/world/inventory/$MenuType"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$VillagerProfession, $VillagerProfession$Type} from "packages/net/minecraft/world/entity/npc/$VillagerProfession"
import {$CreativeModeTab$Builder, $CreativeModeTab$Builder$Type} from "packages/net/minecraft/world/item/$CreativeModeTab$Builder"
import {$RegHelper$AttributeEvent, $RegHelper$AttributeEvent$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/$RegHelper$AttributeEvent"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$List, $List$Type} from "packages/java/util/$List"
import {$RegHelper$CommandRegistration, $RegHelper$CommandRegistration$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/$RegHelper$CommandRegistration"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$AbstractContainerMenu, $AbstractContainerMenu$Type} from "packages/net/minecraft/world/inventory/$AbstractContainerMenu"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"
import {$MobCategory, $MobCategory$Type} from "packages/net/minecraft/world/entity/$MobCategory"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$RegHelper$ItemToTabEvent, $RegHelper$ItemToTabEvent$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/$RegHelper$ItemToTabEvent"
import {$RecipeSerializer, $RecipeSerializer$Type} from "packages/net/minecraft/world/item/crafting/$RecipeSerializer"
import {$RegSupplier, $RegSupplier$Type} from "packages/net/mehvahdjukaar/moonlight/api/misc/$RegSupplier"
import {$CreativeModeTab, $CreativeModeTab$Type} from "packages/net/minecraft/world/item/$CreativeModeTab"
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$EntityType$EntityFactory, $EntityType$EntityFactory$Type} from "packages/net/minecraft/world/entity/$EntityType$EntityFactory"
import {$VillagerTrades$ItemListing, $VillagerTrades$ItemListing$Type} from "packages/net/minecraft/world/entity/npc/$VillagerTrades$ItemListing"
import {$Registry, $Registry$Type} from "packages/net/minecraft/core/$Registry"
import {$RegHelper$LootInjectEvent, $RegHelper$LootInjectEvent$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/$RegHelper$LootInjectEvent"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$CraftingRecipe, $CraftingRecipe$Type} from "packages/net/minecraft/world/item/crafting/$CraftingRecipe"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$ResourceKey, $ResourceKey$Type} from "packages/net/minecraft/resources/$ResourceKey"
import {$SimpleCraftingRecipeSerializer$Factory, $SimpleCraftingRecipeSerializer$Factory$Type} from "packages/net/minecraft/world/item/crafting/$SimpleCraftingRecipeSerializer$Factory"

export class $RegHelperImpl {

constructor()

public static "register"<T, E extends T>(name: $ResourceLocation$Type, supplier: $Supplier$Type<(E)>, regKey: $ResourceKey$Type<(any)>): $RegSupplier<(E)>
public static "register"<T, E extends T>(name: $ResourceLocation$Type, supplier: $Supplier$Type<(E)>, reg: $Registry$Type<(T)>): $RegSupplier<(E)>
public static "addCommandRegistration"(eventListener: $RegHelper$CommandRegistration$Type): void
public static "registerWanderingTraderTrades"(level: integer, factories: $Consumer$Type<($List$Type<($VillagerTrades$ItemListing$Type)>)>): void
public static "registerBlockFlammability"(item: $Block$Type, fireSpread: integer, flammability: integer): void
public static "registerFireworkRecipe"(shape: $FireworkRocketItem$Shape$Type, ingredient: $Item$Type): void
public static "registerSpecialRecipe"<T extends $CraftingRecipe>(name: $ResourceLocation$Type, factory: $SimpleCraftingRecipeSerializer$Factory$Type<(T)>): $RegSupplier<($RecipeSerializer<(T)>)>
public static "registerVillagerTrades"(profession: $VillagerProfession$Type, level: integer, factories: $Consumer$Type<($List$Type<($VillagerTrades$ItemListing$Type)>)>): void
public static "addSpawnPlacementsRegistration"(eventListener: $Consumer$Type<($RegHelper$SpawnPlacementEvent$Type)>): void
public static "registerSimpleRecipeCondition"(id: $ResourceLocation$Type, predicate: $Predicate$Type<(string)>): void
public static "registerCreativeModeTab"(name: $ResourceLocation$Type, hasSearchBar: boolean, afterEntries: $List$Type<($ResourceLocation$Type)>, beforeEntries: $List$Type<($ResourceLocation$Type)>, configurator: $Consumer$Type<($CreativeModeTab$Builder$Type)>): $RegSupplier<($CreativeModeTab)>
public static "addLootTableInjects"(eventListener: $Consumer$Type<($RegHelper$LootInjectEvent$Type)>): void
public static "registerItemBurnTime"(item: $Item$Type, burnTime: integer): void
public static "registerInBatch"<T>(reg: $Registry$Type<(T)>, eventListener: $Consumer$Type<($Registrator$Type<(T)>)>): void
public static "registerAsync"<T, E extends T>(name: $ResourceLocation$Type, supplier: $Supplier$Type<(E)>, reg: $ResourceKey$Type<(any)>): $RegSupplier<(E)>
public static "registerMenuType"<C extends $AbstractContainerMenu>(name: $ResourceLocation$Type, containerFactory: $TriFunction$Type<(integer), ($Inventory$Type), ($FriendlyByteBuf$Type), (C)>): $RegSupplier<($MenuType<(C)>)>
public static "addItemsToTabsRegistration"(eventListener: $Consumer$Type<($RegHelper$ItemToTabEvent$Type)>): void
public static "addAttributeRegistration"(eventListener: $Consumer$Type<($RegHelper$AttributeEvent$Type)>): void
public static "registerFluid"<T extends $Fluid>(name: $ResourceLocation$Type, fluid: $Supplier$Type<(T)>): $RegSupplier<(T)>
public static "registerEntityType"<T extends $Entity>(name: $ResourceLocation$Type, factory: $EntityType$EntityFactory$Type<(T)>, category: $MobCategory$Type, width: float, height: float, clientTrackingRange: integer, updateInterval: integer): $RegSupplier<($EntityType<(T)>)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RegHelperImpl$Type = ($RegHelperImpl);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RegHelperImpl_ = $RegHelperImpl$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/integration/$ShimmerCompat" {
import {$BiConsumer, $BiConsumer$Type} from "packages/java/util/function/$BiConsumer"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"

export class $ShimmerCompat {

constructor()

public static "renderWithBloom"(poseStack: $PoseStack$Type, renderFunction: $BiConsumer$Type<($PoseStack$Type), ($MultiBufferSource$Type)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ShimmerCompat$Type = ($ShimmerCompat);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ShimmerCompat_ = $ShimmerCompat$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/blocks/$FodderBlock" {
import {$IntegerProperty, $IntegerProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$IntegerProperty"
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$CollisionContext, $CollisionContext$Type} from "packages/net/minecraft/world/phys/shapes/$CollisionContext"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$PathComputationType, $PathComputationType$Type} from "packages/net/minecraft/world/level/pathfinder/$PathComputationType"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$WaterBlock, $WaterBlock$Type} from "packages/net/mehvahdjukaar/moonlight/api/block/$WaterBlock"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"

export class $FodderBlock extends $WaterBlock {
static readonly "LAYERS": $IntegerProperty
static readonly "WATERLOGGED": $BooleanProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(properties: $BlockBehaviour$Properties$Type)

public "getStateForPlacement"(context: $BlockPlaceContext$Type): $BlockState
public "isPathfindable"(state: $BlockState$Type, blockGetter: $BlockGetter$Type, pos: $BlockPos$Type, pathType: $PathComputationType$Type): boolean
public "updateShape"(state: $BlockState$Type, direction: $Direction$Type, facingState: $BlockState$Type, world: $LevelAccessor$Type, currentPos: $BlockPos$Type, otherPos: $BlockPos$Type): $BlockState
public "use"(state: $BlockState$Type, world: $Level$Type, pos: $BlockPos$Type, player: $Player$Type, hand: $InteractionHand$Type, hit: $BlockHitResult$Type): $InteractionResult
public "useShapeForLightOcclusion"(state: $BlockState$Type): boolean
public "getShape"(state: $BlockState$Type, blockGetter: $BlockGetter$Type, pos: $BlockPos$Type, collisionContext: $CollisionContext$Type): $VoxelShape
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FodderBlock$Type = ($FodderBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FodderBlock_ = $FodderBlock$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/client/particles/$BoilingParticle" {
import {$ParticleRenderType, $ParticleRenderType$Type} from "packages/net/minecraft/client/particle/$ParticleRenderType"
import {$VertexConsumer, $VertexConsumer$Type} from "packages/com/mojang/blaze3d/vertex/$VertexConsumer"
import {$Camera, $Camera$Type} from "packages/net/minecraft/client/$Camera"
import {$TextureSheetParticle, $TextureSheetParticle$Type} from "packages/net/minecraft/client/particle/$TextureSheetParticle"
import {$SpriteSet, $SpriteSet$Type} from "packages/net/minecraft/client/particle/$SpriteSet"

export class $BoilingParticle extends $TextureSheetParticle {
 "x": double
 "y": double
 "z": double
 "xd": double
 "yd": double
 "zd": double
 "age": integer
 "rCol": float
 "gCol": float
 "bCol": float


public "setSpriteFromAge"(sprite: $SpriteSet$Type): void
public "getRenderType"(): $ParticleRenderType
public "tick"(): void
public "render"(buffer: $VertexConsumer$Type, renderInfo: $Camera$Type, partialTicks: float): void
set "spriteFromAge"(value: $SpriteSet$Type)
get "renderType"(): $ParticleRenderType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BoilingParticle$Type = ($BoilingParticle);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BoilingParticle_ = $BoilingParticle$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/misc/$EventCalled" {
import {$Annotation, $Annotation$Type} from "packages/java/lang/annotation/$Annotation"
import {$Class, $Class$Type} from "packages/java/lang/$Class"

export interface $EventCalled extends $Annotation {

 "equals"(arg0: any): boolean
 "toString"(): string
 "hashCode"(): integer
 "annotationType"(): $Class<(any)>
}

export namespace $EventCalled {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EventCalled$Type = ($EventCalled);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EventCalled_ = $EventCalled$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/common/tile/$CandleSkullBlockTile" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$EnhancedSkullBlockTile, $EnhancedSkullBlockTile$Type} from "packages/net/mehvahdjukaar/amendments/common/tile/$EnhancedSkullBlockTile"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$CandleBlock, $CandleBlock$Type} from "packages/net/minecraft/world/level/block/$CandleBlock"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$SkullBlockEntity, $SkullBlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$SkullBlockEntity"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $CandleSkullBlockTile extends $EnhancedSkullBlockTile {
 "blockState": $BlockState

constructor(pWorldPosition: $BlockPos$Type, pBlockState: $BlockState$Type)

public "initialize"(oldTile: $SkullBlockEntity$Type, stack: $ItemStack$Type, player: $Player$Type, hand: $InteractionHand$Type): void
public static "tick"(level: $Level$Type, pos: $BlockPos$Type, state: $BlockState$Type, e: $CandleSkullBlockTile$Type): void
public "getWaxTexture"(): $ResourceLocation
public "tryAddingCandle"(candle: $CandleBlock$Type): boolean
public "load"(tag: $CompoundTag$Type): void
public "m_183515_"(tag: $CompoundTag$Type): void
public "getCandle"(): $BlockState
public "setCandle"(candle: $BlockState$Type): void
get "waxTexture"(): $ResourceLocation
get "candle"(): $BlockState
set "candle"(value: $BlockState$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CandleSkullBlockTile$Type = ($CandleSkullBlockTile);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CandleSkullBlockTile_ = $CandleSkullBlockTile$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$BookPileBlockTile$BooksList" {
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$List, $List$Type} from "packages/java/util/$List"
import {$BookPileBlockTile$VisualBook, $BookPileBlockTile$VisualBook$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$BookPileBlockTile$VisualBook"

export class $BookPileBlockTile$BooksList extends $Record {

constructor()
constructor(books: $List$Type<($BookPileBlockTile$VisualBook$Type)>)

public "add"(i: integer, visualBook: $BookPileBlockTile$VisualBook$Type): void
public "add"(visualBook: $BookPileBlockTile$VisualBook$Type): void
public "get"(i: integer): $BookPileBlockTile$VisualBook
public "equals"(o: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "clear"(): void
public "isEmpty"(): boolean
public "size"(): integer
public "books"(): $List<($BookPileBlockTile$VisualBook)>
get "empty"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BookPileBlockTile$BooksList$Type = ($BookPileBlockTile$BooksList);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BookPileBlockTile$BooksList_ = $BookPileBlockTile$BooksList$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/common/$IBellConnections$BellConnection" {
import {$StringRepresentable$EnumCodec, $StringRepresentable$EnumCodec$Type} from "packages/net/minecraft/util/$StringRepresentable$EnumCodec"
import {$StringRepresentable, $StringRepresentable$Type} from "packages/net/minecraft/util/$StringRepresentable"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$Keyable, $Keyable$Type} from "packages/com/mojang/serialization/$Keyable"
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"

export class $IBellConnections$BellConnection extends $Enum<($IBellConnections$BellConnection)> implements $StringRepresentable {
static readonly "NONE": $IBellConnections$BellConnection
static readonly "CHAIN": $IBellConnections$BellConnection
static readonly "ROPE": $IBellConnections$BellConnection


public static "values"(): ($IBellConnections$BellConnection)[]
public static "valueOf"(name: string): $IBellConnections$BellConnection
public "isEmpty"(): boolean
public "getSerializedName"(): string
public "isChain"(): boolean
public "isRope"(): boolean
public static "fromEnumWithMapping"<E extends ($Enum<(E)>) & ($StringRepresentable)>(arg0: $Supplier$Type<((E)[])>, arg1: $Function$Type<(string), (string)>): $StringRepresentable$EnumCodec<(E)>
public static "keys"(arg0: ($StringRepresentable$Type)[]): $Keyable
public static "fromEnum"<E extends ($Enum<(E)>) & ($StringRepresentable)>(arg0: $Supplier$Type<((E)[])>): $StringRepresentable$EnumCodec<(E)>
get "empty"(): boolean
get "serializedName"(): string
get "chain"(): boolean
get "rope"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IBellConnections$BellConnection$Type = (("chain") | ("rope") | ("none")) | ($IBellConnections$BellConnection);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IBellConnections$BellConnection_ = $IBellConnections$BellConnection$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/block_models/$BuntingsBakedModel" {
import {$Material, $Material$Type} from "packages/net/minecraft/client/resources/model/$Material"
import {$ModelData, $ModelData$Type} from "packages/net/minecraftforge/client/model/data/$ModelData"
import {$ModelState, $ModelState$Type} from "packages/net/minecraft/client/resources/model/$ModelState"
import {$ItemTransforms, $ItemTransforms$Type} from "packages/net/minecraft/client/renderer/block/model/$ItemTransforms"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$ExtraModelData, $ExtraModelData$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$ExtraModelData"
import {$CustomBakedModel, $CustomBakedModel$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$CustomBakedModel"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$BakedModel, $BakedModel$Type} from "packages/net/minecraft/client/resources/model/$BakedModel"
import {$RenderType, $RenderType$Type} from "packages/net/minecraft/client/renderer/$RenderType"
import {$ItemOverrides, $ItemOverrides$Type} from "packages/net/minecraft/client/renderer/block/model/$ItemOverrides"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$ItemDisplayContext, $ItemDisplayContext$Type} from "packages/net/minecraft/world/item/$ItemDisplayContext"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$List, $List$Type} from "packages/java/util/$List"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$ChunkRenderTypeSet, $ChunkRenderTypeSet$Type} from "packages/net/minecraftforge/client/$ChunkRenderTypeSet"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockAndTintGetter, $BlockAndTintGetter$Type} from "packages/net/minecraft/world/level/$BlockAndTintGetter"
import {$TextureAtlasSprite, $TextureAtlasSprite$Type} from "packages/net/minecraft/client/renderer/texture/$TextureAtlasSprite"
import {$BakedQuad, $BakedQuad$Type} from "packages/net/minecraft/client/renderer/block/model/$BakedQuad"

export class $BuntingsBakedModel implements $CustomBakedModel {

constructor(transform: $ModelState$Type, spriteGetter: $Function$Type<($Material$Type), ($TextureAtlasSprite$Type)>)

public "usesBlockLight"(): boolean
public "isGui3d"(): boolean
public "getBlockQuads"(state: $BlockState$Type, side: $Direction$Type, rand: $RandomSource$Type, renderType: $RenderType$Type, data: $ExtraModelData$Type): $List<($BakedQuad)>
public "getBlockParticle"(extraModelData: $ExtraModelData$Type): $TextureAtlasSprite
public "isCustomRenderer"(): boolean
public "getOverrides"(): $ItemOverrides
public "getTransforms"(): $ItemTransforms
public "useAmbientOcclusion"(): boolean
public "getParticleIcon"(): $TextureAtlasSprite
public "getQuads"(state: $BlockState$Type, side: $Direction$Type, rand: $RandomSource$Type): $List<(any)>
public "getQuads"(state: $BlockState$Type, side: $Direction$Type, rand: $RandomSource$Type, modelData: $ModelData$Type, type: $RenderType$Type): $List<(any)>
public "getParticleIcon"(data: $ModelData$Type): $TextureAtlasSprite
public "getModelData"(level: $BlockAndTintGetter$Type, pos: $BlockPos$Type, state: $BlockState$Type, modelData: $ModelData$Type): $ModelData
public "getModelData"(originalData: $ExtraModelData$Type, stack: $ItemStack$Type): $ExtraModelData
public "getModelData"(tileData: $ExtraModelData$Type, pos: $BlockPos$Type, state: $BlockState$Type, level: $BlockAndTintGetter$Type): $ExtraModelData
public "useAmbientOcclusion"(arg0: $BlockState$Type, arg1: $RenderType$Type): boolean
public "useAmbientOcclusion"(arg0: $BlockState$Type): boolean
public "getRenderTypes"(arg0: $ItemStack$Type, arg1: boolean): $List<($RenderType)>
public "getRenderTypes"(arg0: $BlockState$Type, arg1: $RandomSource$Type, arg2: $ModelData$Type): $ChunkRenderTypeSet
public "getRenderPasses"(arg0: $ItemStack$Type, arg1: boolean): $List<($BakedModel)>
public "applyTransform"(arg0: $ItemDisplayContext$Type, arg1: $PoseStack$Type, arg2: boolean): $BakedModel
public "useAmbientOcclusionWithLightEmission"(arg0: $BlockState$Type, arg1: $RenderType$Type): boolean
get "gui3d"(): boolean
get "customRenderer"(): boolean
get "overrides"(): $ItemOverrides
get "transforms"(): $ItemTransforms
get "particleIcon"(): $TextureAtlasSprite
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BuntingsBakedModel$Type = ($BuntingsBakedModel);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BuntingsBakedModel_ = $BuntingsBakedModel$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/block/$MimicBlockTile" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$IExtraModelDataProvider, $IExtraModelDataProvider$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$IExtraModelDataProvider"
import {$Connection, $Connection$Type} from "packages/net/minecraft/network/$Connection"
import {$ModelData, $ModelData$Type} from "packages/net/minecraftforge/client/model/data/$ModelData"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$IBlockHolder, $IBlockHolder$Type} from "packages/net/mehvahdjukaar/moonlight/api/block/$IBlockHolder"
import {$ModelDataKey, $ModelDataKey$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$ModelDataKey"
import {$ExtraModelData, $ExtraModelData$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$ExtraModelData"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$ClientboundBlockEntityDataPacket, $ClientboundBlockEntityDataPacket$Type} from "packages/net/minecraft/network/protocol/game/$ClientboundBlockEntityDataPacket"
import {$ExtraModelData$Builder, $ExtraModelData$Builder$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$ExtraModelData$Builder"

export class $MimicBlockTile extends $BlockEntity implements $IBlockHolder, $IExtraModelDataProvider {
static readonly "MIMIC_KEY": $ModelDataKey<($BlockState)>
 "blockState": $BlockState


public "getUpdatePacket"(): $ClientboundBlockEntityDataPacket
public "getHeldBlock"(index: integer): $BlockState
public "load"(compound: $CompoundTag$Type): void
public "m_183515_"(tag: $CompoundTag$Type): void
public "addExtraModelData"(builder: $ExtraModelData$Builder$Type): void
public "setHeldBlock"(state: $BlockState$Type, index: integer): boolean
public "getUpdateTag"(): $CompoundTag
public "getHeldBlock"(): $BlockState
public "setHeldBlock"(state: $BlockState$Type): boolean
public "requestModelReload"(): void
/**
 * 
 * @deprecated
 */
public "getExtraModelData"(): $ExtraModelData
public "afterDataPacket"(oldData: $ExtraModelData$Type): void
public "onDataPacket"(net: $Connection$Type, pkt: $ClientboundBlockEntityDataPacket$Type): void
public "getModelData"(): $ModelData
get "updatePacket"(): $ClientboundBlockEntityDataPacket
get "updateTag"(): $CompoundTag
get "heldBlock"(): $BlockState
set "heldBlock"(value: $BlockState$Type)
get "extraModelData"(): $ExtraModelData
get "modelData"(): $ModelData
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MimicBlockTile$Type = ($MimicBlockTile);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MimicBlockTile_ = $MimicBlockTile$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$BlockGeneratorBlockTile" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$RoadSignFeature$Config, $RoadSignFeature$Config$Type} from "packages/net/mehvahdjukaar/supplementaries/common/worldgen/$RoadSignFeature$Config"

export class $BlockGeneratorBlockTile extends $BlockEntity {
 "blockState": $BlockState

constructor(pos: $BlockPos$Type, state: $BlockState$Type)

public static "tick"(level: $Level$Type, pos: $BlockPos$Type, state: $BlockState$Type, tile: $BlockGeneratorBlockTile$Type): void
public "load"(tag: $CompoundTag$Type): void
public "setConfig"(c: $RoadSignFeature$Config$Type): void
set "config"(value: $RoadSignFeature$Config$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BlockGeneratorBlockTile$Type = ($BlockGeneratorBlockTile);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BlockGeneratorBlockTile_ = $BlockGeneratorBlockTile$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/renderers/entities/models/$GenericAnimationStuff" {
import {$AnimationState, $AnimationState$Type} from "packages/net/minecraft/world/entity/$AnimationState"
import {$IRootModel, $IRootModel$Type} from "packages/net/mehvahdjukaar/supplementaries/client/renderers/entities/models/$IRootModel"
import {$EntityModel, $EntityModel$Type} from "packages/net/minecraft/client/model/$EntityModel"
import {$AnimationDefinition, $AnimationDefinition$Type} from "packages/net/minecraft/client/animation/$AnimationDefinition"

export class $GenericAnimationStuff {

constructor()

public static "animate"<M extends ($EntityModel<(any)>) & ($IRootModel)>(model: M, pAnimationState: $AnimationState$Type, pAnimationDefinition: $AnimationDefinition$Type, pAgeInTicks: float): void
public static "animate"<M extends ($EntityModel<(any)>) & ($IRootModel)>(model: M, pAnimationState: $AnimationState$Type, pAnimationDefinition: $AnimationDefinition$Type, pAgeInTicks: float, pSpeed: float): void
public static "animate"<M extends ($EntityModel<(any)>) & ($IRootModel)>(model: M, animationDefinition: $AnimationDefinition$Type, accumulatedTime: long, scale: float): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GenericAnimationStuff$Type = ($GenericAnimationStuff);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GenericAnimationStuff_ = $GenericAnimationStuff$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/reg/$ModEntities" {
import {$PearlMarker, $PearlMarker$Type} from "packages/net/mehvahdjukaar/supplementaries/common/entities/$PearlMarker"
import {$EntityType$EntityFactory, $EntityType$EntityFactory$Type} from "packages/net/minecraft/world/entity/$EntityType$EntityFactory"
import {$ImprovedFallingBlockEntity, $ImprovedFallingBlockEntity$Type} from "packages/net/mehvahdjukaar/moonlight/api/entity/$ImprovedFallingBlockEntity"
import {$BombEntity, $BombEntity$Type} from "packages/net/mehvahdjukaar/supplementaries/common/entities/$BombEntity"
import {$DispenserMinecartEntity, $DispenserMinecartEntity$Type} from "packages/net/mehvahdjukaar/supplementaries/common/entities/dispenser_minecart/$DispenserMinecartEntity"
import {$SlingshotProjectileEntity, $SlingshotProjectileEntity$Type} from "packages/net/mehvahdjukaar/supplementaries/common/entities/$SlingshotProjectileEntity"
import {$RedMerchantEntity, $RedMerchantEntity$Type} from "packages/net/mehvahdjukaar/supplementaries/common/entities/$RedMerchantEntity"
import {$FallingAshEntity, $FallingAshEntity$Type} from "packages/net/mehvahdjukaar/supplementaries/common/entities/$FallingAshEntity"
import {$RegHelper$AttributeEvent, $RegHelper$AttributeEvent$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/$RegHelper$AttributeEvent"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$HatStandEntity, $HatStandEntity$Type} from "packages/net/mehvahdjukaar/supplementaries/common/entities/$HatStandEntity"
import {$FallingUrnEntity, $FallingUrnEntity$Type} from "packages/net/mehvahdjukaar/supplementaries/common/entities/$FallingUrnEntity"
import {$ThrowableBrickEntity, $ThrowableBrickEntity$Type} from "packages/net/mehvahdjukaar/supplementaries/common/entities/$ThrowableBrickEntity"
import {$RopeArrowEntity, $RopeArrowEntity$Type} from "packages/net/mehvahdjukaar/supplementaries/common/entities/$RopeArrowEntity"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$EntityType$Builder, $EntityType$Builder$Type} from "packages/net/minecraft/world/entity/$EntityType$Builder"
import {$MobCategory, $MobCategory$Type} from "packages/net/minecraft/world/entity/$MobCategory"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $ModEntities {
static readonly "PEARL_MARKER": $Supplier<($EntityType<($PearlMarker)>)>
static readonly "DISPENSER_MINECART": $Supplier<($EntityType<($DispenserMinecartEntity)>)>
static readonly "HAT_STAND": $Supplier<($EntityType<($HatStandEntity)>)>
static readonly "RED_MERCHANT": $Supplier<($EntityType<($RedMerchantEntity)>)>
static readonly "FALLING_URN": $Supplier<($EntityType<($FallingUrnEntity)>)>
static readonly "FALLING_ASH": $Supplier<($EntityType<($FallingAshEntity)>)>
static readonly "FALLING_SACK": $Supplier<($EntityType<($ImprovedFallingBlockEntity)>)>
static readonly "THROWABLE_BRICK": $Supplier<($EntityType<($ThrowableBrickEntity)>)>
static readonly "BOMB": $Supplier<($EntityType<($BombEntity)>)>
static readonly "ROPE_ARROW": $Supplier<($EntityType<($RopeArrowEntity)>)>
static readonly "SLINGSHOT_PROJECTILE": $Supplier<($EntityType<($SlingshotProjectileEntity)>)>

constructor()

public static "init"(): void
public static "registerEntityAttributes"(event: $RegHelper$AttributeEvent$Type): void
public static "regEntity"<T extends $Entity>(name: string, factory: $EntityType$EntityFactory$Type<(T)>, category: $MobCategory$Type, width: float, height: float, clientTrackingRange: integer, velocityUpdates: boolean, updateInterval: integer): $Supplier<($EntityType<(T)>)>
public static "regEntity"<T extends $Entity>(name: string, builder: $Supplier$Type<($EntityType$Builder$Type<(T)>)>): $Supplier<($EntityType<(T)>)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModEntities$Type = ($ModEntities);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModEntities_ = $ModEntities$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/reg/$RegUtils" {
import {$RegSupplier, $RegSupplier$Type} from "packages/net/mehvahdjukaar/moonlight/api/misc/$RegSupplier"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$BiFunction, $BiFunction$Type} from "packages/java/util/function/$BiFunction"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$BlockItem, $BlockItem$Type} from "packages/net/minecraft/world/item/$BlockItem"
import {$DyeColor, $DyeColor$Type} from "packages/net/minecraft/world/item/$DyeColor"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $RegUtils {

constructor()

public static "regBlockItem"(name: string, blockSup: $Supplier$Type<(any)>, properties: $Item$Properties$Type, burnTime: integer): $RegSupplier<($BlockItem)>
public static "regBlock"<T extends $Block>(name: string, sup: $Supplier$Type<(T)>): $RegSupplier<(T)>
public static "regTile"<T extends $BlockEntityType<(E)>, E extends $BlockEntity>(name: string, sup: $Supplier$Type<(T)>): $Supplier<(T)>
public static "regItem"<T extends $Item>(name: string, sup: $Supplier$Type<(T)>): $Supplier<(T)>
public static "registerFlags"(baseName: string): $Map<($DyeColor), ($Supplier<($Block)>)>
public static "registerPresents"(baseName: string, presentFactory: $BiFunction$Type<($DyeColor$Type), ($BlockBehaviour$Properties$Type), ($Block$Type)>): $Map<($DyeColor), ($Supplier<($Block)>)>
public static "regWithItem"<T extends $Block>(name: string, blockFactory: $Supplier$Type<(T)>): $RegSupplier<(T)>
public static "regWithItem"<T extends $Block>(name: string, blockFactory: $Supplier$Type<(T)>, properties: $Item$Properties$Type, burnTime: integer): $RegSupplier<(T)>
public static "regWithItem"<T extends $Block>(name: string, blockFactory: $Supplier$Type<(T)>, burnTime: integer): $RegSupplier<(T)>
public static "initDynamicRegistry"(): void
public static "registerCandleHolders"(baseName: $ResourceLocation$Type): $Map<($DyeColor), ($Supplier<($Block)>)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RegUtils$Type = ($RegUtils);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RegUtils_ = $RegUtils$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/blocks/$BookPileBlock" {
import {$IntegerProperty, $IntegerProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$IntegerProperty"
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$EntityBlock, $EntityBlock$Type} from "packages/net/minecraft/world/level/block/$EntityBlock"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$WaterBlock, $WaterBlock$Type} from "packages/net/mehvahdjukaar/moonlight/api/block/$WaterBlock"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$CollisionContext, $CollisionContext$Type} from "packages/net/minecraft/world/phys/shapes/$CollisionContext"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$HitResult, $HitResult$Type} from "packages/net/minecraft/world/phys/$HitResult"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$BlockEntityTicker, $BlockEntityTicker$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityTicker"
import {$GameEventListener, $GameEventListener$Type} from "packages/net/minecraft/world/level/gameevent/$GameEventListener"
import {$RenderShape, $RenderShape$Type} from "packages/net/minecraft/world/level/block/$RenderShape"

export class $BookPileBlock extends $WaterBlock implements $EntityBlock {
static readonly "BOOKS": $IntegerProperty
static readonly "WATERLOGGED": $BooleanProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(properties: $BlockBehaviour$Properties$Type)

public "isAcceptedItem"(i: $Item$Type): boolean
public "getStateForPlacement"(context: $BlockPlaceContext$Type): $BlockState
public "setPlacedBy"(world: $Level$Type, pos: $BlockPos$Type, state: $BlockState$Type, entity: $LivingEntity$Type, stack: $ItemStack$Type): void
public "getCloneItemStack"(level: $BlockGetter$Type, pos: $BlockPos$Type, state: $BlockState$Type): $ItemStack
public "getEnchantPowerBonus"(state: $BlockState$Type, world: $LevelReader$Type, pos: $BlockPos$Type): float
public "getCloneItemStack"(state: $BlockState$Type, target: $HitResult$Type, world: $BlockGetter$Type, pos: $BlockPos$Type, player: $Player$Type): $ItemStack
public "use"(state: $BlockState$Type, level: $Level$Type, pos: $BlockPos$Type, player: $Player$Type, hand: $InteractionHand$Type, hit: $BlockHitResult$Type): $InteractionResult
public "getRenderShape"(state: $BlockState$Type): $RenderShape
public "onRemove"(state: $BlockState$Type, world: $Level$Type, pos: $BlockPos$Type, newState: $BlockState$Type, isMoving: boolean): void
public "canBeReplaced"(state: $BlockState$Type, context: $BlockPlaceContext$Type): boolean
public "canSurvive"(state: $BlockState$Type, level: $LevelReader$Type, pos: $BlockPos$Type): boolean
public "getShape"(state: $BlockState$Type, world: $BlockGetter$Type, pos: $BlockPos$Type, context: $CollisionContext$Type): $VoxelShape
public "newBlockEntity"(pPos: $BlockPos$Type, pState: $BlockState$Type): $BlockEntity
public "getTicker"<T extends $BlockEntity>(arg0: $Level$Type, arg1: $BlockState$Type, arg2: $BlockEntityType$Type<(T)>): $BlockEntityTicker<(T)>
public "getListener"<T extends $BlockEntity>(arg0: $ServerLevel$Type, arg1: T): $GameEventListener
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BookPileBlock$Type = ($BookPileBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BookPileBlock_ = $BookPileBlock$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/entities/trades/$StarItemListing" {
import {$MerchantOffer, $MerchantOffer$Type} from "packages/net/minecraft/world/item/trading/$MerchantOffer"
import {$ModItemListing, $ModItemListing$Type} from "packages/net/mehvahdjukaar/moonlight/api/trades/$ModItemListing"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$FireworkRocketItem$Shape, $FireworkRocketItem$Shape$Type} from "packages/net/minecraft/world/item/$FireworkRocketItem$Shape"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Codec, $Codec$Type} from "packages/com/mojang/serialization/$Codec"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $StarItemListing extends $Record implements $ModItemListing {
static readonly "CODEC": $Codec<($StarItemListing)>

constructor(emeralds: $ItemStack$Type, priceSecondary: $ItemStack$Type, stars: integer, maxTrades: integer, xp: integer, priceMult: float, level: integer)

public "equals"(o: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "xp"(): integer
public "level"(): integer
public "getLevel"(): integer
public "priceMult"(): float
public "emeralds"(): $ItemStack
public "maxTrades"(): integer
public "priceSecondary"(): $ItemStack
public "stars"(): integer
public static "createDefault"(price: $ItemStack$Type, price2: $ItemStack$Type, rockets: integer, maxTrades: integer, xp: $Optional$Type<(integer)>, priceMult: float, level: integer): $StarItemListing
public "getOffer"(entity: $Entity$Type, random: $RandomSource$Type): $MerchantOffer
public static "createRandomFireworkStar"(random: $RandomSource$Type, usedShapes: $List$Type<($FireworkRocketItem$Shape$Type)>): $CompoundTag
public "getCodec"(): $Codec<(any)>
public "isValid"(): boolean
public static "defaultXp"(buying: boolean, villagerLevel: integer): integer
get "codec"(): $Codec<(any)>
get "valid"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $StarItemListing$Type = ($StarItemListing);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $StarItemListing_ = $StarItemListing$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/screens/$SpeakerBlockScreen" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$List, $List$Type} from "packages/java/util/$List"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$SpeakerBlockTile, $SpeakerBlockTile$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$SpeakerBlockTile"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $SpeakerBlockScreen extends $Screen {
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering

constructor(te: $SpeakerBlockTile$Type)

public static "open"(te: $SpeakerBlockTile$Type): void
public "keyPressed"(keyCode: integer, scanCode: integer, modifiers: integer): boolean
public "onClose"(): void
public "m_7856_"(): void
public "removed"(): void
public "render"(graphics: $GuiGraphics$Type, mouseX: integer, mouseY: integer, partialTicks: float): void
public "tick"(): void
public "mouseReleased"(mouseX: double, mouseY: double, button: integer): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SpeakerBlockScreen$Type = ($SpeakerBlockScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SpeakerBlockScreen_ = $SpeakerBlockScreen$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/platform/$ClientHelper$ItemColorEvent" {
import {$ItemLike, $ItemLike$Type} from "packages/net/minecraft/world/level/$ItemLike"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ItemColor, $ItemColor$Type} from "packages/net/minecraft/client/color/item/$ItemColor"

export interface $ClientHelper$ItemColorEvent {

 "register"(arg0: $ItemColor$Type, ...arg1: ($ItemLike$Type)[]): void
 "getColor"(arg0: $ItemStack$Type, arg1: integer): integer
}

export namespace $ClientHelper$ItemColorEvent {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientHelper$ItemColorEvent$Type = ($ClientHelper$ItemColorEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientHelper$ItemColorEvent_ = $ClientHelper$ItemColorEvent$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/items/$SpeedometerItem" {
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$InteractionResultHolder, $InteractionResultHolder$Type} from "packages/net/minecraft/world/$InteractionResultHolder"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $SpeedometerItem extends $Item {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(properties: $Item$Properties$Type)

public "use"(world: $Level$Type, player: $Player$Type, hand: $InteractionHand$Type): $InteractionResultHolder<($ItemStack)>
public "interactLivingEntity"(stack: $ItemStack$Type, player: $Player$Type, entity: $LivingEntity$Type, hand: $InteractionHand$Type): $InteractionResult
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SpeedometerItem$Type = ($SpeedometerItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SpeedometerItem_ = $SpeedometerItem$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/client/util/$ColorUtil" {
import {$DataResult, $DataResult$Type} from "packages/com/mojang/serialization/$DataResult"
import {$Vector3f, $Vector3f$Type} from "packages/org/joml/$Vector3f"
import {$Codec, $Codec$Type} from "packages/com/mojang/serialization/$Codec"

/**
 * 
 * @deprecated
 */
export class $ColorUtil {
static readonly "CODEC": $Codec<(integer)>
static readonly "MINECRAFT_LIGHT_POWER": float
static readonly "MINECRAFT_AMBIENT_LIGHT": float

constructor()

public static "multiply"(color: integer, amount: float): integer
public static "pack"(rgb: (float)[]): integer
public static "isValidStringOrError"(s: string): $DataResult<(string)>
public static "shadeColor"(normal: $Vector3f$Type, color: integer): integer
public static "swapFormat"(argb: integer): integer
public static "getShading"(normal: $Vector3f$Type): float
public static "isValidString"(s: string): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ColorUtil$Type = ($ColorUtil);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ColorUtil_ = $ColorUtil$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/$MoonlightRegistry" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$CaveFilter, $CaveFilter$Type} from "packages/net/mehvahdjukaar/moonlight/core/misc/$CaveFilter"
import {$LootItemConditionType, $LootItemConditionType$Type} from "packages/net/minecraft/world/level/storage/loot/predicates/$LootItemConditionType"
import {$BlockPlacerItem, $BlockPlacerItem$Type} from "packages/net/mehvahdjukaar/moonlight/api/item/additional_placements/$BlockPlacerItem"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$LootPoolEntryType, $LootPoolEntryType$Type} from "packages/net/minecraft/world/level/storage/loot/entries/$LootPoolEntryType"
import {$GrindItemTrigger, $GrindItemTrigger$Type} from "packages/net/mehvahdjukaar/moonlight/core/criteria_triggers/$GrindItemTrigger"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$PlacementModifierType, $PlacementModifierType$Type} from "packages/net/minecraft/world/level/levelgen/placement/$PlacementModifierType"

export class $MoonlightRegistry {
static readonly "SHEARABLE_TAG": $TagKey<($Block)>
static readonly "NON_RECOLORABLE_BLOCKS_TAG": $TagKey<($Block)>
static readonly "NON_RECOLORABLE_ITEMS_TAG": $TagKey<($Item)>
static readonly "CAVE_MODIFIER": $Supplier<($PlacementModifierType<($CaveFilter)>)>
static readonly "BLOCK_PLACER": $Supplier<($BlockPlacerItem)>
static readonly "LAZY_ITEM": $Supplier<($LootPoolEntryType)>
static readonly "LAZY_PROPERTY": $Supplier<($LootItemConditionType)>
static readonly "GRIND_TRIGGER": $GrindItemTrigger

constructor()

public static "init"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MoonlightRegistry$Type = ($MoonlightRegistry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MoonlightRegistry_ = $MoonlightRegistry$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/renderers/tiles/$GlobeBlockTileRenderer" {
import {$BlockEntityRendererProvider$Context, $BlockEntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/blockentity/$BlockEntityRendererProvider$Context"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$Pair, $Pair$Type} from "packages/com/mojang/datafixers/util/$Pair"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$GlobeManager$Model, $GlobeManager$Model$Type} from "packages/net/mehvahdjukaar/supplementaries/client/$GlobeManager$Model"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$GlobeBlockTile, $GlobeBlockTile$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$GlobeBlockTile"
import {$LayerDefinition, $LayerDefinition$Type} from "packages/net/minecraft/client/model/geom/builders/$LayerDefinition"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$BlockEntityRenderer, $BlockEntityRenderer$Type} from "packages/net/minecraft/client/renderer/blockentity/$BlockEntityRenderer"

export class $GlobeBlockTileRenderer implements $BlockEntityRenderer<($GlobeBlockTile)> {
static "INSTANCE": $GlobeBlockTileRenderer

constructor(context: $BlockEntityRendererProvider$Context$Type)

public static "createSpecialMesh"(): $LayerDefinition
public static "createBaseMesh"(): $LayerDefinition
public "renderGlobe"(data: $Pair$Type<($GlobeManager$Model$Type), ($ResourceLocation$Type)>, poseStack: $PoseStack$Type, buffer: $MultiBufferSource$Type, light: integer, overlay: integer, isSepia: boolean, level: $Level$Type): void
public "render"(tile: $GlobeBlockTile$Type, partialTicks: float, matrixStackIn: $PoseStack$Type, bufferIn: $MultiBufferSource$Type, combinedLightIn: integer, combinedOverlayIn: integer): void
public "shouldRender"(arg0: $GlobeBlockTile$Type, arg1: $Vec3$Type): boolean
public "shouldRenderOffScreen"(arg0: $GlobeBlockTile$Type): boolean
public "getViewDistance"(): integer
get "viewDistance"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GlobeBlockTileRenderer$Type = ($GlobeBlockTileRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GlobeBlockTileRenderer_ = $GlobeBlockTileRenderer$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/placeable_book/$BookType" {
import {$DyeColor, $DyeColor$Type} from "packages/net/minecraft/world/item/$DyeColor"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Codec, $Codec$Type} from "packages/com/mojang/serialization/$Codec"

export class $BookType {
static readonly "CODEC": $Codec<($BookType)>

constructor(color: $DyeColor$Type)
constructor(color: $DyeColor$Type, angle: float, enchanted: boolean)
constructor(name: string, rgb: integer, enchanted: boolean)
constructor(name: string, rgb: integer, angle: float, hasGlint: boolean)

public "name"(): string
public "modelPath"(): $ResourceLocation
public "hue"(): float
public "hueShift"(): float
public "looksGoodNextTo"(other: $BookType$Type): boolean
public "hasGlint"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BookType$Type = ($BookType);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BookType_ = $BookType$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/$ModBlockProperties$Topping" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$StringRepresentable$EnumCodec, $StringRepresentable$EnumCodec$Type} from "packages/net/minecraft/util/$StringRepresentable$EnumCodec"
import {$StringRepresentable, $StringRepresentable$Type} from "packages/net/minecraft/util/$StringRepresentable"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$Keyable, $Keyable$Type} from "packages/com/mojang/serialization/$Keyable"
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$Pair, $Pair$Type} from "packages/com/mojang/datafixers/util/$Pair"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$SoftFluid, $SoftFluid$Type} from "packages/net/mehvahdjukaar/moonlight/api/fluids/$SoftFluid"

export class $ModBlockProperties$Topping extends $Enum<($ModBlockProperties$Topping)> implements $StringRepresentable {
static readonly "NONE": $ModBlockProperties$Topping
static readonly "HONEY": $ModBlockProperties$Topping
static readonly "SYRUP": $ModBlockProperties$Topping
static readonly "CHOCOLATE": $ModBlockProperties$Topping
static readonly "JAM": $ModBlockProperties$Topping


public static "values"(): ($ModBlockProperties$Topping)[]
public static "valueOf"(name: string): $ModBlockProperties$Topping
public "getSerializedName"(): string
public static "fromFluid"(s: $SoftFluid$Type): $ModBlockProperties$Topping
public static "fromFluidItem"(item: $Item$Type): $Pair<($ModBlockProperties$Topping), ($Item)>
public static "fromItem"(stack: $ItemStack$Type): $Pair<($ModBlockProperties$Topping), ($Item)>
public static "fromEnumWithMapping"<E extends ($Enum<(E)>) & ($StringRepresentable)>(arg0: $Supplier$Type<((E)[])>, arg1: $Function$Type<(string), (string)>): $StringRepresentable$EnumCodec<(E)>
public static "keys"(arg0: ($StringRepresentable$Type)[]): $Keyable
public static "fromEnum"<E extends ($Enum<(E)>) & ($StringRepresentable)>(arg0: $Supplier$Type<((E)[])>): $StringRepresentable$EnumCodec<(E)>
get "serializedName"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModBlockProperties$Topping$Type = (("honey") | ("jam") | ("syrup") | ("none") | ("chocolate")) | ($ModBlockProperties$Topping);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModBlockProperties$Topping_ = $ModBlockProperties$Topping$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/utils/$Credits" {
import {$Credits$Supporter, $Credits$Supporter$Type} from "packages/net/mehvahdjukaar/supplementaries/common/utils/$Credits$Supporter"
import {$Serializable, $Serializable$Type} from "packages/java/io/$Serializable"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Pair, $Pair$Type} from "packages/com/mojang/datafixers/util/$Pair"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $Credits implements $Serializable {
static "INSTANCE": $Credits

constructor(supporters: $Map$Type<(string), ($Credits$Supporter$Type)>, artists: $List$Type<(string)>, translators: $List$Type<(string)>, mod_compat: $List$Type<(string)>, sounds: $List$Type<(string)>, others: $List$Type<(string)>)

public "createCreditsText"(): string
public "statues"(): $Map<(string), ($Pair<($UUID), (string)>)>
public "globes"(): $Map<(string), ($ResourceLocation)>
public "supporters"(): $Map<(string), ($Credits$Supporter)>
public "getDevs"(): $List<($UUID)>
public static "fetchFromServer"(): void
public static "stuff"(player: $ServerPlayer$Type): void
get "devs"(): $List<($UUID)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Credits$Type = ($Credits);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Credits_ = $Credits$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/integration/$DecoBlocksCompat" {
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $DecoBlocksCompat {

constructor()

public static "init"(): void
public static "setupClient"(): void
public static "isPalisade"(state: $BlockState$Type): boolean
public static "tryConvertingRopeChandelier"(facingState: $BlockState$Type, worldIn: $LevelAccessor$Type, facingPos: $BlockPos$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DecoBlocksCompat$Type = ($DecoBlocksCompat);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DecoBlocksCompat_ = $DecoBlocksCompat$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/network/$ClientBoundPlaySongNotesPacket" {
import {$Message, $Message$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/network/$Message"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$IntList, $IntList$Type} from "packages/it/unimi/dsi/fastutil/ints/$IntList"
import {$ChannelHandler$Context, $ChannelHandler$Context$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/network/$ChannelHandler$Context"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $ClientBoundPlaySongNotesPacket implements $Message {
readonly "notes": $IntList
readonly "entityID": integer

constructor(buf: $FriendlyByteBuf$Type)
constructor(notes: $IntList$Type, player: $LivingEntity$Type)

public "handle"(context: $ChannelHandler$Context$Type): void
public "writeToBuffer"(buf: $FriendlyByteBuf$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientBoundPlaySongNotesPacket$Type = ($ClientBoundPlaySongNotesPacket);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientBoundPlaySongNotesPacket_ = $ClientBoundPlaySongNotesPacket$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/items/loot/$RandomArrowFunction" {
import {$LootContext, $LootContext$Type} from "packages/net/minecraft/world/level/storage/loot/$LootContext"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$LootItemFunctionType, $LootItemFunctionType$Type} from "packages/net/minecraft/world/level/storage/loot/functions/$LootItemFunctionType"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$BiFunction, $BiFunction$Type} from "packages/java/util/function/$BiFunction"
import {$LootItemConditionalFunction, $LootItemConditionalFunction$Type} from "packages/net/minecraft/world/level/storage/loot/functions/$LootItemConditionalFunction"

export class $RandomArrowFunction extends $LootItemConditionalFunction {


public static "setup"(): void
public static "createRandomQuiver"(random: $RandomSource$Type, specialMultiplier: float): $ItemStack
public "getType"(): $LootItemFunctionType
public "m_7372_"(pStack: $ItemStack$Type, pContext: $LootContext$Type): $ItemStack
public static "decorate"(arg0: $BiFunction$Type<($ItemStack$Type), ($LootContext$Type), ($ItemStack$Type)>, arg1: $Consumer$Type<($ItemStack$Type)>, arg2: $LootContext$Type): $Consumer<($ItemStack)>
get "type"(): $LootItemFunctionType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RandomArrowFunction$Type = ($RandomArrowFunction);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RandomArrowFunction_ = $RandomArrowFunction$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/blocks/$CannonBlock" {
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$EntityBlock, $EntityBlock$Type} from "packages/net/minecraft/world/level/block/$EntityBlock"
import {$ILightable, $ILightable$Type} from "packages/net/mehvahdjukaar/moonlight/api/block/$ILightable"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$Projectile, $Projectile$Type} from "packages/net/minecraft/world/entity/projectile/$Projectile"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Mirror, $Mirror$Type} from "packages/net/minecraft/world/level/block/$Mirror"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"
import {$DirectionProperty, $DirectionProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$DirectionProperty"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$CollisionContext, $CollisionContext$Type} from "packages/net/minecraft/world/phys/shapes/$CollisionContext"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$IRotatable, $IRotatable$Type} from "packages/net/mehvahdjukaar/moonlight/api/block/$IRotatable"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$ILightable$FireSourceType, $ILightable$FireSourceType$Type} from "packages/net/mehvahdjukaar/moonlight/api/block/$ILightable$FireSourceType"
import {$Rotation, $Rotation$Type} from "packages/net/minecraft/world/level/block/$Rotation"
import {$BlockEntityTicker, $BlockEntityTicker$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityTicker"
import {$GameEventListener, $GameEventListener$Type} from "packages/net/minecraft/world/level/gameevent/$GameEventListener"
import {$RenderShape, $RenderShape$Type} from "packages/net/minecraft/world/level/block/$RenderShape"
import {$DirectionalBlock, $DirectionalBlock$Type} from "packages/net/minecraft/world/level/block/$DirectionalBlock"

export class $CannonBlock extends $DirectionalBlock implements $EntityBlock, $ILightable, $IRotatable {
static readonly "POWERED": $BooleanProperty
static readonly "FACING": $DirectionProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(properties: $BlockBehaviour$Properties$Type)

public "getTicker"<T extends $BlockEntity>(pLevel: $Level$Type, pState: $BlockState$Type, pBlockEntityType: $BlockEntityType$Type<(T)>): $BlockEntityTicker<(T)>
public "getStateForPlacement"(context: $BlockPlaceContext$Type): $BlockState
public "setPlacedBy"(level: $Level$Type, pos: $BlockPos$Type, state: $BlockState$Type, placer: $LivingEntity$Type, stack: $ItemStack$Type): void
public "getRotatedState"(blockState: $BlockState$Type, levelAccessor: $LevelAccessor$Type, blockPos: $BlockPos$Type, rotation: $Rotation$Type, direction: $Direction$Type, vec3: $Vec3$Type): $Optional<($BlockState)>
public "use"(state: $BlockState$Type, level: $Level$Type, pos: $BlockPos$Type, player: $Player$Type, hand: $InteractionHand$Type, hit: $BlockHitResult$Type): $InteractionResult
public "getRenderShape"(state: $BlockState$Type): $RenderShape
public "rotate"(state: $BlockState$Type, rot: $Rotation$Type): $BlockState
public "mirror"(state: $BlockState$Type, mirrorIn: $Mirror$Type): $BlockState
public "getOcclusionShape"(state: $BlockState$Type, level: $BlockGetter$Type, pos: $BlockPos$Type): $VoxelShape
public "getCollisionShape"(state: $BlockState$Type, level: $BlockGetter$Type, pos: $BlockPos$Type, context: $CollisionContext$Type): $VoxelShape
public "getVisualShape"(state: $BlockState$Type, level: $BlockGetter$Type, pos: $BlockPos$Type, context: $CollisionContext$Type): $VoxelShape
public "isLitUp"(blockState: $BlockState$Type): boolean
public "toggleLitState"(blockState: $BlockState$Type, b: boolean): $BlockState
public "newBlockEntity"(pos: $BlockPos$Type, state: $BlockState$Type): $BlockEntity
public "getListener"<T extends $BlockEntity>(arg0: $ServerLevel$Type, arg1: T): $GameEventListener
public "extinguish"(player: $Entity$Type, state: $BlockState$Type, pos: $BlockPos$Type, world: $LevelAccessor$Type): boolean
public "playExtinguishSound"(world: $LevelAccessor$Type, pos: $BlockPos$Type): void
public "isLitUp"(state: $BlockState$Type, level: $BlockGetter$Type, pos: $BlockPos$Type): boolean
public "interactWithPlayer"(state: $BlockState$Type, level: $Level$Type, pos: $BlockPos$Type, player: $Player$Type, handIn: $InteractionHand$Type): $InteractionResult
public "setLitUp"(state: $BlockState$Type, world: $LevelAccessor$Type, pos: $BlockPos$Type, lit: boolean): void
public "lightUp"(player: $Entity$Type, state: $BlockState$Type, pos: $BlockPos$Type, world: $LevelAccessor$Type, fireSourceType: $ILightable$FireSourceType$Type): boolean
public "playLightUpSound"(world: $LevelAccessor$Type, pos: $BlockPos$Type, type: $ILightable$FireSourceType$Type): void
public "spawnSmokeParticles"(state: $BlockState$Type, pos: $BlockPos$Type, world: $LevelAccessor$Type): void
public "canBeExtinguishedBy"(item: $ItemStack$Type): boolean
public "interactWithProjectile"(level: $Level$Type, state: $BlockState$Type, projectile: $Projectile$Type, pos: $BlockPos$Type): boolean
public "rotateOverAxis"(state: $BlockState$Type, world: $LevelAccessor$Type, pos: $BlockPos$Type, rotation: $Rotation$Type, axis: $Direction$Type, hit: $Vec3$Type): $Optional<($Direction)>
public "onRotated"(newState: $BlockState$Type, oldState: $BlockState$Type, world: $LevelAccessor$Type, pos: $BlockPos$Type, rotation: $Rotation$Type, axis: $Direction$Type, hit: $Vec3$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CannonBlock$Type = ($CannonBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CannonBlock_ = $CannonBlock$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/entities/dispenser_minecart/$MovingBlockSource" {
import {$BlockSource, $BlockSource$Type} from "packages/net/minecraft/core/$BlockSource"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $MovingBlockSource<T extends $BlockEntity> implements $BlockSource {

constructor(entity: $Entity$Type, internal: T)

public "getMinecartEntity"(): $Entity
public "z"(): double
public "x"(): double
public "y"(): double
public "getLevel"(): $ServerLevel
public "getPos"(): $BlockPos
public "getEntity"<A extends $BlockEntity>(): A
public "getBlockState"(): $BlockState
get "minecartEntity"(): $Entity
get "level"(): $ServerLevel
get "pos"(): $BlockPos
get "entity"(): A
get "blockState"(): $BlockState
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MovingBlockSource$Type<T> = ($MovingBlockSource<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MovingBlockSource_<T> = $MovingBlockSource$Type<(T)>;
}}
declare module "packages/net/mehvahdjukaar/amendments/common/$SwingAnimation" {
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $SwingAnimation {


public "reset"(): void
public "tick"(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type): void
public "getAngle"(arg0: float): float
public "hitByEntity"(arg0: $Entity$Type, arg1: $BlockState$Type, arg2: $BlockPos$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SwingAnimation$Type = ($SwingAnimation);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SwingAnimation_ = $SwingAnimation$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/block_models/$RopeKnotBlockBakedModel" {
import {$ModelData, $ModelData$Type} from "packages/net/minecraftforge/client/model/data/$ModelData"
import {$ModelState, $ModelState$Type} from "packages/net/minecraft/client/resources/model/$ModelState"
import {$ItemTransforms, $ItemTransforms$Type} from "packages/net/minecraft/client/renderer/block/model/$ItemTransforms"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$ExtraModelData, $ExtraModelData$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$ExtraModelData"
import {$CustomBakedModel, $CustomBakedModel$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$CustomBakedModel"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BakedModel, $BakedModel$Type} from "packages/net/minecraft/client/resources/model/$BakedModel"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$RenderType, $RenderType$Type} from "packages/net/minecraft/client/renderer/$RenderType"
import {$ItemOverrides, $ItemOverrides$Type} from "packages/net/minecraft/client/renderer/block/model/$ItemOverrides"
import {$ItemDisplayContext, $ItemDisplayContext$Type} from "packages/net/minecraft/world/item/$ItemDisplayContext"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$List, $List$Type} from "packages/java/util/$List"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$ChunkRenderTypeSet, $ChunkRenderTypeSet$Type} from "packages/net/minecraftforge/client/$ChunkRenderTypeSet"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockAndTintGetter, $BlockAndTintGetter$Type} from "packages/net/minecraft/world/level/$BlockAndTintGetter"
import {$BakedQuad, $BakedQuad$Type} from "packages/net/minecraft/client/renderer/block/model/$BakedQuad"
import {$TextureAtlasSprite, $TextureAtlasSprite$Type} from "packages/net/minecraft/client/renderer/texture/$TextureAtlasSprite"

export class $RopeKnotBlockBakedModel implements $CustomBakedModel {

constructor(knot: $BakedModel$Type, state: $ModelState$Type)

public "usesBlockLight"(): boolean
public "isGui3d"(): boolean
public "getBlockQuads"(state: $BlockState$Type, side: $Direction$Type, rand: $RandomSource$Type, renderType: $RenderType$Type, data: $ExtraModelData$Type): $List<($BakedQuad)>
public "getBlockParticle"(data: $ExtraModelData$Type): $TextureAtlasSprite
public "isCustomRenderer"(): boolean
public "getOverrides"(): $ItemOverrides
public "getTransforms"(): $ItemTransforms
public "useAmbientOcclusion"(): boolean
public "getParticleIcon"(): $TextureAtlasSprite
public "getQuads"(state: $BlockState$Type, side: $Direction$Type, rand: $RandomSource$Type): $List<(any)>
public "getQuads"(state: $BlockState$Type, side: $Direction$Type, rand: $RandomSource$Type, modelData: $ModelData$Type, type: $RenderType$Type): $List<(any)>
public "getParticleIcon"(data: $ModelData$Type): $TextureAtlasSprite
public "getModelData"(level: $BlockAndTintGetter$Type, pos: $BlockPos$Type, state: $BlockState$Type, modelData: $ModelData$Type): $ModelData
public "getModelData"(originalData: $ExtraModelData$Type, stack: $ItemStack$Type): $ExtraModelData
public "getModelData"(tileData: $ExtraModelData$Type, pos: $BlockPos$Type, state: $BlockState$Type, level: $BlockAndTintGetter$Type): $ExtraModelData
public "useAmbientOcclusion"(arg0: $BlockState$Type, arg1: $RenderType$Type): boolean
public "useAmbientOcclusion"(arg0: $BlockState$Type): boolean
public "getRenderTypes"(arg0: $ItemStack$Type, arg1: boolean): $List<($RenderType)>
public "getRenderTypes"(arg0: $BlockState$Type, arg1: $RandomSource$Type, arg2: $ModelData$Type): $ChunkRenderTypeSet
public "getRenderPasses"(arg0: $ItemStack$Type, arg1: boolean): $List<($BakedModel)>
public "applyTransform"(arg0: $ItemDisplayContext$Type, arg1: $PoseStack$Type, arg2: boolean): $BakedModel
public "useAmbientOcclusionWithLightEmission"(arg0: $BlockState$Type, arg1: $RenderType$Type): boolean
get "gui3d"(): boolean
get "customRenderer"(): boolean
get "overrides"(): $ItemOverrides
get "transforms"(): $ItemTransforms
get "particleIcon"(): $TextureAtlasSprite
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RopeKnotBlockBakedModel$Type = ($RopeKnotBlockBakedModel);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RopeKnotBlockBakedModel_ = $RopeKnotBlockBakedModel$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/core/misc/$AntiRepostWarning" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $AntiRepostWarning {

constructor()

public static "run"(): void
public static "addMod"(id: string): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AntiRepostWarning$Type = ($AntiRepostWarning);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AntiRepostWarning_ = $AntiRepostWarning$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/core/network/$ClientBoundFinalizeFluidsMessage" {
import {$Message, $Message$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/network/$Message"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$ChannelHandler$Context, $ChannelHandler$Context$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/network/$ChannelHandler$Context"

export class $ClientBoundFinalizeFluidsMessage implements $Message {

constructor()
constructor(pBuffer: $FriendlyByteBuf$Type)

public "handle"(context: $ChannelHandler$Context$Type): void
public "writeToBuffer"(buffer: $FriendlyByteBuf$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientBoundFinalizeFluidsMessage$Type = ($ClientBoundFinalizeFluidsMessage);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientBoundFinalizeFluidsMessage_ = $ClientBoundFinalizeFluidsMessage$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/present/$IPresentItemBehavior" {
import {$BlockSource, $BlockSource$Type} from "packages/net/minecraft/core/$BlockSource"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Position, $Position$Type} from "packages/net/minecraft/core/$Position"

export interface $IPresentItemBehavior {

 "trigger"(pSource: $BlockSource$Type, pStack: $ItemStack$Type): $ItemStack
 "performSpecialAction"(arg0: $BlockSource$Type, arg1: $ItemStack$Type): $Optional<($ItemStack)>
 "playAnimation"(pSource: $BlockSource$Type): void

(pSource: $BlockSource$Type, pStack: $ItemStack$Type): $ItemStack
}

export namespace $IPresentItemBehavior {
function spawnItem(pLevel: $Level$Type, pStack: $ItemStack$Type, pSpeed: double, source: $BlockSource$Type): void
function getDispensePosition(source: $BlockSource$Type): $Position
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IPresentItemBehavior$Type = ($IPresentItemBehavior);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IPresentItemBehavior_ = $IPresentItemBehavior$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/forge/$SupplementariesForgeClient" {
import {$RegisterShadersEvent, $RegisterShadersEvent$Type} from "packages/net/minecraftforge/client/event/$RegisterShadersEvent"
import {$ScreenEvent$Init$Post, $ScreenEvent$Init$Post$Type} from "packages/net/minecraftforge/client/event/$ScreenEvent$Init$Post"
import {$FMLClientSetupEvent, $FMLClientSetupEvent$Type} from "packages/net/minecraftforge/fml/event/lifecycle/$FMLClientSetupEvent"
import {$ShaderInstance, $ShaderInstance$Type} from "packages/net/minecraft/client/renderer/$ShaderInstance"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$RenderType, $RenderType$Type} from "packages/net/minecraft/client/renderer/$RenderType"

export class $SupplementariesForgeClient {

constructor()

public static "setup"(event: $FMLClientSetupEvent$Type): void
public static "handleDrawScreenEventPost"(event: $ScreenEvent$Init$Post$Type): void
public static "getStaticNoiseShader"(): $ShaderInstance
public static "registerShader"(event: $RegisterShadersEvent$Type): void
public static "staticNoise"(location: $ResourceLocation$Type): $RenderType
set "up"(value: $FMLClientSetupEvent$Type)
get "staticNoiseShader"(): $ShaderInstance
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SupplementariesForgeClient$Type = ($SupplementariesForgeClient);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SupplementariesForgeClient_ = $SupplementariesForgeClient$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/events/behaviors/$SkullPileConversion" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$ItemUseOnBlock, $ItemUseOnBlock$Type} from "packages/net/mehvahdjukaar/amendments/events/behaviors/$ItemUseOnBlock"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $SkullPileConversion implements $ItemUseOnBlock {


public "isEnabled"(): boolean
public "getTooltip"(): $MutableComponent
public "placesBlock"(): boolean
public "appliesToItem"(item: $Item$Type): boolean
public "altersWorld"(): boolean
public "tryPerformingAction"(world: $Level$Type, player: $Player$Type, hand: $InteractionHand$Type, stack: $ItemStack$Type, hit: $BlockHitResult$Type): $InteractionResult
public "shouldBlockMapToItem"(item: $Item$Type): boolean
get "enabled"(): boolean
get "tooltip"(): $MutableComponent
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SkullPileConversion$Type = ($SkullPileConversion);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SkullPileConversion_ = $SkullPileConversion$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/integration/$MapAtlasCompat" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$MapItemSavedData, $MapItemSavedData$Type} from "packages/net/minecraft/world/level/saveddata/maps/$MapItemSavedData"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export class $MapAtlasCompat {

constructor()

public static "getMapIdFromAtlas"(atlas: $ItemStack$Type, level: $Level$Type, data: any): integer
public static "isAtlas"(item: $Item$Type): boolean
public static "scaleDecoration"(poseStack: $PoseStack$Type): void
public static "getSavedDataFromAtlas"(atlas: $ItemStack$Type, level: $Level$Type, player: $Player$Type): $MapItemSavedData
public static "scaleDecorationText"(poseStack: $PoseStack$Type, textWidth: float, textScale: float): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MapAtlasCompat$Type = ($MapAtlasCompat);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MapAtlasCompat_ = $MapAtlasCompat$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/blocks/$FenceMimicBlock" {
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$Fluid, $Fluid$Type} from "packages/net/minecraft/world/level/material/$Fluid"
import {$EntityBlock, $EntityBlock$Type} from "packages/net/minecraft/world/level/block/$EntityBlock"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$SimpleWaterloggedBlock, $SimpleWaterloggedBlock$Type} from "packages/net/minecraft/world/level/block/$SimpleWaterloggedBlock"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$FluidState, $FluidState$Type} from "packages/net/minecraft/world/level/material/$FluidState"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$CollisionContext, $CollisionContext$Type} from "packages/net/minecraft/world/phys/shapes/$CollisionContext"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$MimicBlock, $MimicBlock$Type} from "packages/net/mehvahdjukaar/moonlight/api/block/$MimicBlock"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$MenuProvider, $MenuProvider$Type} from "packages/net/minecraft/world/$MenuProvider"
import {$BlockEntityTicker, $BlockEntityTicker$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityTicker"
import {$GameEventListener, $GameEventListener$Type} from "packages/net/minecraft/world/level/gameevent/$GameEventListener"
import {$RenderShape, $RenderShape$Type} from "packages/net/minecraft/world/level/block/$RenderShape"

export class $FenceMimicBlock extends $MimicBlock implements $SimpleWaterloggedBlock, $EntityBlock {
static readonly "WATERLOGGED": $BooleanProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation


public "getStateForPlacement"(context: $BlockPlaceContext$Type): $BlockState
public "updateShape"(state: $BlockState$Type, facing: $Direction$Type, facingState: $BlockState$Type, world: $LevelAccessor$Type, currentPos: $BlockPos$Type, facingPos: $BlockPos$Type): $BlockState
public "getRenderShape"(state: $BlockState$Type): $RenderShape
public "getFluidState"(state: $BlockState$Type): $FluidState
public "getMenuProvider"(state: $BlockState$Type, worldIn: $Level$Type, pos: $BlockPos$Type): $MenuProvider
public "getCollisionShape"(state: $BlockState$Type, worldIn: $BlockGetter$Type, pos: $BlockPos$Type, context: $CollisionContext$Type): $VoxelShape
public "getShape"(state: $BlockState$Type, world: $BlockGetter$Type, pos: $BlockPos$Type, context: $CollisionContext$Type): $VoxelShape
public "getPickupSound"(): $Optional<($SoundEvent)>
public "canPlaceLiquid"(arg0: $BlockGetter$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: $Fluid$Type): boolean
public "placeLiquid"(arg0: $LevelAccessor$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: $FluidState$Type): boolean
public "pickupBlock"(arg0: $LevelAccessor$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type): $ItemStack
public "getTicker"<T extends $BlockEntity>(arg0: $Level$Type, arg1: $BlockState$Type, arg2: $BlockEntityType$Type<(T)>): $BlockEntityTicker<(T)>
public "newBlockEntity"(arg0: $BlockPos$Type, arg1: $BlockState$Type): $BlockEntity
public "getListener"<T extends $BlockEntity>(arg0: $ServerLevel$Type, arg1: T): $GameEventListener
public "getPickupSound"(arg0: $BlockState$Type): $Optional<($SoundEvent)>
get "pickupSound"(): $Optional<($SoundEvent)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FenceMimicBlock$Type = ($FenceMimicBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FenceMimicBlock_ = $FenceMimicBlock$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/integration/create/$GlobeDisplaySource" {
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$SingleLineDisplaySource, $SingleLineDisplaySource$Type} from "packages/com/simibubi/create/content/redstone/displayLink/source/$SingleLineDisplaySource"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $GlobeDisplaySource extends $SingleLineDisplaySource {
static readonly "EMPTY": $MutableComponent
static readonly "EMPTY_LINE": $MutableComponent
static readonly "WHITESPACE": $MutableComponent
 "id": $ResourceLocation

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GlobeDisplaySource$Type = ($GlobeDisplaySource);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GlobeDisplaySource_ = $GlobeDisplaySource$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/platform/forge/$ClientHelperImpl" {
import {$ClientHelper$SpecialModelEvent, $ClientHelper$SpecialModelEvent$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/$ClientHelper$SpecialModelEvent"
import {$PreparableReloadListener, $PreparableReloadListener$Type} from "packages/net/minecraft/server/packs/resources/$PreparableReloadListener"
import {$Fluid, $Fluid$Type} from "packages/net/minecraft/world/level/material/$Fluid"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$BakedModel, $BakedModel$Type} from "packages/net/minecraft/client/resources/model/$BakedModel"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Runnable, $Runnable$Type} from "packages/java/lang/$Runnable"
import {$ClientHelper$ParticleEvent, $ClientHelper$ParticleEvent$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/$ClientHelper$ParticleEvent"
import {$RenderType, $RenderType$Type} from "packages/net/minecraft/client/renderer/$RenderType"
import {$ClientHelper$TooltipComponentEvent, $ClientHelper$TooltipComponentEvent$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/$ClientHelper$TooltipComponentEvent"
import {$ClientHelper$EntityRendererEvent, $ClientHelper$EntityRendererEvent$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/$ClientHelper$EntityRendererEvent"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$ClientHelper$ModelLayerEvent, $ClientHelper$ModelLayerEvent$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/$ClientHelper$ModelLayerEvent"
import {$ClientHelper$KeyBindEvent, $ClientHelper$KeyBindEvent$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/$ClientHelper$KeyBindEvent"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$UnbakedModel, $UnbakedModel$Type} from "packages/net/minecraft/client/resources/model/$UnbakedModel"
import {$ClientHelper$ItemColorEvent, $ClientHelper$ItemColorEvent$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/$ClientHelper$ItemColorEvent"
import {$BlockModel, $BlockModel$Type} from "packages/net/minecraft/client/renderer/block/model/$BlockModel"
import {$JsonElement, $JsonElement$Type} from "packages/com/google/gson/$JsonElement"
import {$Path, $Path$Type} from "packages/java/nio/file/$Path"
import {$ClientHelper$ModelLoaderEvent, $ClientHelper$ModelLoaderEvent$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/$ClientHelper$ModelLoaderEvent"
import {$ClientHelper$BlockEntityRendererEvent, $ClientHelper$BlockEntityRendererEvent$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/$ClientHelper$BlockEntityRendererEvent"
import {$ClientHelper$ItemDecoratorEvent, $ClientHelper$ItemDecoratorEvent$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/$ClientHelper$ItemDecoratorEvent"
import {$ClientHelper$BlockColorEvent, $ClientHelper$BlockColorEvent$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/$ClientHelper$BlockColorEvent"
import {$ModelManager, $ModelManager$Type} from "packages/net/minecraft/client/resources/model/$ModelManager"
import {$TextureAtlasSprite, $TextureAtlasSprite$Type} from "packages/net/minecraft/client/renderer/texture/$TextureAtlasSprite"

export class $ClientHelperImpl {

constructor()

public static "registerRenderType"(block: $Block$Type, ...types: ($RenderType$Type)[]): void
public static "addClientSetup"(clientSetup: $Runnable$Type): void
public static "getModel"(modelManager: $ModelManager$Type, modelLocation: $ResourceLocation$Type): $BakedModel
public static "addBlockEntityRenderersRegistration"(eventListener: $Consumer$Type<($ClientHelper$BlockEntityRendererEvent$Type)>): void
public static "getPixelRGBA"(sprite: $TextureAtlasSprite$Type, frameIndex: integer, x: integer, y: integer): integer
public static "parseBlockModel"(json: $JsonElement$Type): $BlockModel
public static "getModIcon"(modId: string): $Path
public static "getUnbakedModel"(modelManager: $ModelManager$Type, modelLocation: $ResourceLocation$Type): $UnbakedModel
public static "addModelLoaderRegistration"(eventListener: $Consumer$Type<($ClientHelper$ModelLoaderEvent$Type)>): void
public static "addKeyBindRegistration"(eventListener: $Consumer$Type<($ClientHelper$KeyBindEvent$Type)>): void
public static "addItemColorsRegistration"(eventListener: $Consumer$Type<($ClientHelper$ItemColorEvent$Type)>): void
public static "addTooltipComponentRegistration"(eventListener: $Consumer$Type<($ClientHelper$TooltipComponentEvent$Type)>): void
public static "addSpecialModelRegistration"(eventListener: $Consumer$Type<($ClientHelper$SpecialModelEvent$Type)>): void
public static "registerOptionalTexturePack"(folderName: $ResourceLocation$Type, displayName: $Component$Type, defaultEnabled: boolean): void
public static "addItemDecoratorsRegistration"(eventListener: $Consumer$Type<($ClientHelper$ItemDecoratorEvent$Type)>): void
public static "addBlockColorsRegistration"(eventListener: $Consumer$Type<($ClientHelper$BlockColorEvent$Type)>): void
public static "addEntityRenderersRegistration"(eventListener: $Consumer$Type<($ClientHelper$EntityRendererEvent$Type)>): void
public static "addParticleRegistration"(eventListener: $Consumer$Type<($ClientHelper$ParticleEvent$Type)>): void
public static "registerFluidRenderType"(fluid: $Fluid$Type, type: $RenderType$Type): void
public static "addClientReloadListener"(listener: $Supplier$Type<($PreparableReloadListener$Type)>, location: $ResourceLocation$Type): void
public static "addModelLayerRegistration"(eventListener: $Consumer$Type<($ClientHelper$ModelLayerEvent$Type)>): void
public static "addClientSetupAsync"(clientSetup: $Runnable$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientHelperImpl$Type = ($ClientHelperImpl);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientHelperImpl_ = $ClientHelperImpl$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$CannonBlockTile" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ClientboundBlockEntityDataPacket, $ClientboundBlockEntityDataPacket$Type} from "packages/net/minecraft/network/protocol/game/$ClientboundBlockEntityDataPacket"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$AbstractContainerMenu, $AbstractContainerMenu$Type} from "packages/net/minecraft/world/inventory/$AbstractContainerMenu"
import {$OpeneableContainerBlockEntity, $OpeneableContainerBlockEntity$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$OpeneableContainerBlockEntity"
import {$LockCode, $LockCode$Type} from "packages/net/minecraft/world/$LockCode"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"

export class $CannonBlockTile extends $OpeneableContainerBlockEntity {
static readonly "LOOT_TABLE_TAG": string
static readonly "LOOT_TABLE_SEED_TAG": string
 "lootTable": $ResourceLocation
 "lootTableSeed": long
 "lockKey": $LockCode
 "blockState": $BlockState

constructor(pos: $BlockPos$Type, blockState: $BlockState$Type)

public "ignite"(): void
public "getProjectileGravity"(): float
public static "tick"(level: $Level$Type, pos: $BlockPos$Type, state: $BlockState$Type, t: $CannonBlockTile$Type): void
public "use"(player: $Player$Type, hand: $InteractionHand$Type, hit: $BlockHitResult$Type): void
public "getCooldown"(): float
public "getProjectile"(): $ItemStack
public "setChanged"(): void
public "fire"(): void
public "canTakeItemThroughFace"(index: integer, stack: $ItemStack$Type, direction: $Direction$Type): boolean
public "getSlotsForFace"(side: $Direction$Type): (integer)[]
public "canPlaceItemThroughFace"(index: integer, itemStack: $ItemStack$Type, direction: $Direction$Type): boolean
public "getFuel"(): $ItemStack
public "getUpdatePacket"(): $ClientboundBlockEntityDataPacket
public "getFireTimer"(): float
public "getFirePower"(): byte
public "setPitch"(pitch: float): void
public "setYaw"(yaw: float): void
public "getPitch"(partialTicks: float): float
public "getYaw"(partialTicks: float): float
public "load"(tag: $CompoundTag$Type): void
public "canPlaceItem"(index: integer, stack: $ItemStack$Type): boolean
public "m_6555_"(id: integer, player: $Inventory$Type): $AbstractContainerMenu
public "syncAttributes"(yaw: float, pitch: float, firePower: byte, fire: boolean): void
public "getProjectileDrag"(): float
public "readyToFire"(): boolean
public "hasFuelAndProjectiles"(): boolean
public static "stillValidBlockEntity"(arg0: $BlockEntity$Type, arg1: $Player$Type, arg2: integer): boolean
public static "stillValidBlockEntity"(arg0: $BlockEntity$Type, arg1: $Player$Type): boolean
public static "tryClear"(arg0: any): void
get "projectileGravity"(): float
get "cooldown"(): float
get "projectile"(): $ItemStack
get "fuel"(): $ItemStack
get "updatePacket"(): $ClientboundBlockEntityDataPacket
get "fireTimer"(): float
get "firePower"(): byte
set "pitch"(value: float)
set "yaw"(value: float)
get "projectileDrag"(): float
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CannonBlockTile$Type = ($CannonBlockTile);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CannonBlockTile_ = $CannonBlockTile$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/renderers/items/$EndermanHeadItemRenderer" {
import {$ItemDisplayContext, $ItemDisplayContext$Type} from "packages/net/minecraft/world/item/$ItemDisplayContext"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$ItemStackRenderer, $ItemStackRenderer$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/$ItemStackRenderer"

export class $EndermanHeadItemRenderer extends $ItemStackRenderer {

constructor()

public "renderByItem"(stack: $ItemStack$Type, transformType: $ItemDisplayContext$Type, poseStack: $PoseStack$Type, bufferSource: $MultiBufferSource$Type, packedLight: integer, combinedOverlayIn: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EndermanHeadItemRenderer$Type = ($EndermanHeadItemRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EndermanHeadItemRenderer_ = $EndermanHeadItemRenderer$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/platform/$ClientHelper$ModelLoaderEvent" {
import {$Material, $Material$Type} from "packages/net/minecraft/client/resources/model/$Material"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$ModelState, $ModelState$Type} from "packages/net/minecraft/client/resources/model/$ModelState"
import {$CustomBakedModel, $CustomBakedModel$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$CustomBakedModel"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$CustomModelLoader, $CustomModelLoader$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$CustomModelLoader"
import {$BiFunction, $BiFunction$Type} from "packages/java/util/function/$BiFunction"
import {$TextureAtlasSprite, $TextureAtlasSprite$Type} from "packages/net/minecraft/client/renderer/texture/$TextureAtlasSprite"

export interface $ClientHelper$ModelLoaderEvent {

 "register"(id: $ResourceLocation$Type, bakedModelFactory: $BiFunction$Type<($ModelState$Type), ($Function$Type<($Material$Type), ($TextureAtlasSprite$Type)>), ($CustomBakedModel$Type)>): void
 "register"(id: $ResourceLocation$Type, bakedModelFactory: $Supplier$Type<($CustomBakedModel$Type)>): void
 "register"(arg0: $ResourceLocation$Type, arg1: $CustomModelLoader$Type): void

(id: $ResourceLocation$Type, bakedModelFactory: $BiFunction$Type<($ModelState$Type), ($Function$Type<($Material$Type), ($TextureAtlasSprite$Type)>), ($CustomBakedModel$Type)>): void
}

export namespace $ClientHelper$ModelLoaderEvent {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientHelper$ModelLoaderEvent$Type = ($ClientHelper$ModelLoaderEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientHelper$ModelLoaderEvent_ = $ClientHelper$ModelLoaderEvent$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/events/$SimpleEvent" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $SimpleEvent {

}

export namespace $SimpleEvent {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SimpleEvent$Type = ($SimpleEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SimpleEvent_ = $SimpleEvent$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/items/crafting/$BlackboardDuplicateRecipe" {
import {$RegistryAccess, $RegistryAccess$Type} from "packages/net/minecraft/core/$RegistryAccess"
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$RecipeSerializer, $RecipeSerializer$Type} from "packages/net/minecraft/world/item/crafting/$RecipeSerializer"
import {$CustomRecipe, $CustomRecipe$Type} from "packages/net/minecraft/world/item/crafting/$CustomRecipe"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$CraftingContainer, $CraftingContainer$Type} from "packages/net/minecraft/world/inventory/$CraftingContainer"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$CraftingBookCategory, $CraftingBookCategory$Type} from "packages/net/minecraft/world/item/crafting/$CraftingBookCategory"

export class $BlackboardDuplicateRecipe extends $CustomRecipe {

constructor(idIn: $ResourceLocation$Type, category: $CraftingBookCategory$Type)

public "matches"(inv: $CraftingContainer$Type, worldIn: $Level$Type): boolean
public "getRemainingItems"(inv: $CraftingContainer$Type): $NonNullList<($ItemStack)>
public "canCraftInDimensions"(width: integer, height: integer): boolean
public "getSerializer"(): $RecipeSerializer<(any)>
public "assemble"(inv: $CraftingContainer$Type, access: $RegistryAccess$Type): $ItemStack
get "serializer"(): $RecipeSerializer<(any)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BlackboardDuplicateRecipe$Type = ($BlackboardDuplicateRecipe);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BlackboardDuplicateRecipe_ = $BlackboardDuplicateRecipe$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/events/overrides/$SoapBehavior" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$ItemUseOnBlockOverride, $ItemUseOnBlockOverride$Type} from "packages/net/mehvahdjukaar/supplementaries/common/events/overrides/$ItemUseOnBlockOverride"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $SoapBehavior implements $ItemUseOnBlockOverride {


public "isEnabled"(): boolean
public "appliesToItem"(item: $Item$Type): boolean
public "altersWorld"(): boolean
public "tryPerformingAction"(level: $Level$Type, player: $Player$Type, hand: $InteractionHand$Type, stack: $ItemStack$Type, hit: $BlockHitResult$Type): $InteractionResult
public "getTooltip"(): $MutableComponent
public "placesBlock"(): boolean
public "shouldBlockMapToItem"(item: $Item$Type): boolean
get "enabled"(): boolean
get "tooltip"(): $MutableComponent
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SoapBehavior$Type = ($SoapBehavior);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SoapBehavior_ = $SoapBehavior$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/integration/$CompatObjects" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$ParticleType, $ParticleType$Type} from "packages/net/minecraft/core/particles/$ParticleType"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"

export class $CompatObjects {
static readonly "SOUL_CANDLE_ITEM": $Supplier<($Item)>
static readonly "SOUL_CANDLE": $Supplier<($Block)>
static readonly "ENDER_CANDLE": $Supplier<($Block)>
static readonly "CUPRIC_CANDLE": $Supplier<($Block)>
static readonly "SPECTACLE_CANDLE_ITEM": $Supplier<($Item)>
static readonly "ETCHED_DISC": $Supplier<($Item)>
static readonly "CAKE_SLICE": $Supplier<($Item)>
static readonly "SOUL_CANDLE_HOLDER": $Supplier<($Item)>
static readonly "SPECTACLE_CANDLE": $Supplier<($Block)>
static readonly "SMALL_SOUL_FLAME": $Supplier<($ParticleType<(any)>)>

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CompatObjects$Type = ($CompatObjects);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CompatObjects_ = $CompatObjects$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/entities/trades/$PresentItemListing" {
import {$ModItemListing, $ModItemListing$Type} from "packages/net/mehvahdjukaar/moonlight/api/trades/$ModItemListing"
import {$MerchantOffer, $MerchantOffer$Type} from "packages/net/minecraft/world/item/trading/$MerchantOffer"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$Codec, $Codec$Type} from "packages/com/mojang/serialization/$Codec"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $PresentItemListing extends $Record implements $ModItemListing {
static readonly "CODEC": $Codec<($PresentItemListing)>

constructor(original: $ModItemListing$Type)

public "equals"(o: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "original"(): $ModItemListing
public "isValid"(): boolean
public "getLevel"(): integer
public "getOffer"(entity: $Entity$Type, random: $RandomSource$Type): $MerchantOffer
public "getCodec"(): $Codec<(any)>
public static "defaultXp"(buying: boolean, villagerLevel: integer): integer
get "valid"(): boolean
get "level"(): integer
get "codec"(): $Codec<(any)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PresentItemListing$Type = ($PresentItemListing);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PresentItemListing_ = $PresentItemListing$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/renderers/color/$GunpowderBlockColor" {
import {$BlockColor, $BlockColor$Type} from "packages/net/minecraft/client/color/block/$BlockColor"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockAndTintGetter, $BlockAndTintGetter$Type} from "packages/net/minecraft/world/level/$BlockAndTintGetter"

export class $GunpowderBlockColor implements $BlockColor {

constructor()

public "getColor"(state: $BlockState$Type, reader: $BlockAndTintGetter$Type, pos: $BlockPos$Type, color: integer): integer
public static "getColor"(f: float): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GunpowderBlockColor$Type = ($GunpowderBlockColor);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GunpowderBlockColor_ = $GunpowderBlockColor$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/items/$RopeArrowItem" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$AbstractArrow, $AbstractArrow$Type} from "packages/net/minecraft/world/entity/projectile/$AbstractArrow"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ArrowItem, $ArrowItem$Type} from "packages/net/minecraft/world/item/$ArrowItem"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $RopeArrowItem extends $ArrowItem {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(builder: $Item$Properties$Type)

public "isInfinite"(stack: $ItemStack$Type, bow: $ItemStack$Type, player: $Player$Type): boolean
public "getBarColor"(stack: $ItemStack$Type): integer
public "isBarVisible"(stack: $ItemStack$Type): boolean
public "getBarWidth"(stack: $ItemStack$Type): integer
public "appendHoverText"(stack: $ItemStack$Type, worldIn: $Level$Type, tooltip: $List$Type<($Component$Type)>, flagIn: $TooltipFlag$Type): void
public "getEnchantmentValue"(): integer
public "isRepairable"(stack: $ItemStack$Type): boolean
public "isEnchantable"(stack: $ItemStack$Type): boolean
public "isValidRepairItem"(toRepair: $ItemStack$Type, repair: $ItemStack$Type): boolean
public "getMaxDamage"(stack: $ItemStack$Type): integer
public "isBookEnchantable"(stack: $ItemStack$Type, book: $ItemStack$Type): boolean
public "createArrow"(world: $Level$Type, stack: $ItemStack$Type, shooter: $LivingEntity$Type): $AbstractArrow
get "enchantmentValue"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RopeArrowItem$Type = ($RopeArrowItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RopeArrowItem_ = $RopeArrowItem$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/renderers/tiles/$CageBlockTileRenderer" {
import {$IMobContainerProvider, $IMobContainerProvider$Type} from "packages/net/mehvahdjukaar/supplementaries/common/misc/mob_container/$IMobContainerProvider"
import {$EntityRenderDispatcher, $EntityRenderDispatcher$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRenderDispatcher"
import {$MobContainer, $MobContainer$Type} from "packages/net/mehvahdjukaar/supplementaries/common/misc/mob_container/$MobContainer"
import {$BlockEntityRendererProvider$Context, $BlockEntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/blockentity/$BlockEntityRendererProvider$Context"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$BlockEntityRenderer, $BlockEntityRenderer$Type} from "packages/net/minecraft/client/renderer/blockentity/$BlockEntityRenderer"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $CageBlockTileRenderer<T extends ($BlockEntity) & ($IMobContainerProvider)> implements $BlockEntityRenderer<(T)> {

constructor(context: $BlockEntityRendererProvider$Context$Type)

public static "relativeOffset"(pos: double): double
public "render"(tile: T, partialTicks: float, matrixStackIn: $PoseStack$Type, bufferIn: $MultiBufferSource$Type, combinedLightIn: integer, combinedOverlayIn: integer): void
public "getViewDistance"(): integer
public "renderMob"(mobHolder: $MobContainer$Type, partialTicks: float, matrixStack: $PoseStack$Type, bufferIn: $MultiBufferSource$Type, combinedLightIn: integer, dir: $Direction$Type): void
public static "renderMobStatic"(mob: $Entity$Type, scale: float, renderer: $EntityRenderDispatcher$Type, matrixStack: $PoseStack$Type, partialTicks: float, bufferIn: $MultiBufferSource$Type, combinedLightIn: integer, rot: float): void
public "shouldRender"(arg0: T, arg1: $Vec3$Type): boolean
public "shouldRenderOffScreen"(arg0: T): boolean
get "viewDistance"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CageBlockTileRenderer$Type<T> = ($CageBlockTileRenderer<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CageBlockTileRenderer_<T> = $CageBlockTileRenderer$Type<(T)>;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/$ModBlockProperties$Bunting" {
import {$StringRepresentable$EnumCodec, $StringRepresentable$EnumCodec$Type} from "packages/net/minecraft/util/$StringRepresentable$EnumCodec"
import {$StringRepresentable, $StringRepresentable$Type} from "packages/net/minecraft/util/$StringRepresentable"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$Keyable, $Keyable$Type} from "packages/com/mojang/serialization/$Keyable"
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"

export class $ModBlockProperties$Bunting extends $Enum<($ModBlockProperties$Bunting)> implements $StringRepresentable {
static readonly "NONE": $ModBlockProperties$Bunting
static readonly "ROPE": $ModBlockProperties$Bunting
static readonly "BUNTING": $ModBlockProperties$Bunting


public "toString"(): string
public static "values"(): ($ModBlockProperties$Bunting)[]
public static "valueOf"(name: string): $ModBlockProperties$Bunting
public "getSerializedName"(): string
public "isConnected"(): boolean
public "hasBunting"(): boolean
public static "fromEnumWithMapping"<E extends ($Enum<(E)>) & ($StringRepresentable)>(arg0: $Supplier$Type<((E)[])>, arg1: $Function$Type<(string), (string)>): $StringRepresentable$EnumCodec<(E)>
public static "keys"(arg0: ($StringRepresentable$Type)[]): $Keyable
public static "fromEnum"<E extends ($Enum<(E)>) & ($StringRepresentable)>(arg0: $Supplier$Type<((E)[])>): $StringRepresentable$EnumCodec<(E)>
get "serializedName"(): string
get "connected"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModBlockProperties$Bunting$Type = (("rope") | ("bunting") | ("none")) | ($ModBlockProperties$Bunting);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModBlockProperties$Bunting_ = $ModBlockProperties$Bunting$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/items/$EndermanHeadItem" {
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$ICustomItemRendererProvider, $ICustomItemRendererProvider$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/$ICustomItemRendererProvider"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$EnderMan, $EnderMan$Type} from "packages/net/minecraft/world/entity/monster/$EnderMan"
import {$ItemStackRenderer, $ItemStackRenderer$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/$ItemStackRenderer"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$StandingAndWallBlockItem, $StandingAndWallBlockItem$Type} from "packages/net/minecraft/world/item/$StandingAndWallBlockItem"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$AdditionalItemPlacement, $AdditionalItemPlacement$Type} from "packages/net/mehvahdjukaar/moonlight/api/item/additional_placements/$AdditionalItemPlacement"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $EndermanHeadItem extends $StandingAndWallBlockItem implements $ICustomItemRendererProvider {
static readonly "BLOCK_ENTITY_TAG": string
static readonly "BLOCK_STATE_TAG": string
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(block: $Block$Type, block2: $Block$Type, properties: $Item$Properties$Type)

public "isEnderMask"(stack: $ItemStack$Type, player: $Player$Type, endermanEntity: $EnderMan$Type): boolean
public "getRendererFactory"(): $Supplier<($ItemStackRenderer)>
/**
 * 
 * @deprecated
 */
public "registerFabricRenderer"(): void
public "asItem"(): $Item
public "moonlight$addAdditionalBehavior"(arg0: $AdditionalItemPlacement$Type): void
public "moonlight$getAdditionalBehavior"(): $AdditionalItemPlacement
public "moonlight$getClientAnimationExtension"(): any
public "moonlight$setClientAnimationExtension"(arg0: any): void
get "rendererFactory"(): $Supplier<($ItemStackRenderer)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EndermanHeadItem$Type = ($EndermanHeadItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EndermanHeadItem_ = $EndermanHeadItem$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/tooltip/$BlackboardTooltipComponent" {
import {$TooltipComponent, $TooltipComponent$Type} from "packages/net/minecraft/world/inventory/tooltip/$TooltipComponent"
import {$FormattedCharSequence, $FormattedCharSequence$Type} from "packages/net/minecraft/util/$FormattedCharSequence"
import {$Font, $Font$Type} from "packages/net/minecraft/client/gui/$Font"
import {$MultiBufferSource$BufferSource, $MultiBufferSource$BufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource$BufferSource"
import {$BlackboardManager$Key, $BlackboardManager$Key$Type} from "packages/net/mehvahdjukaar/supplementaries/client/$BlackboardManager$Key"
import {$Matrix4f, $Matrix4f$Type} from "packages/org/joml/$Matrix4f"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$ClientTooltipComponent, $ClientTooltipComponent$Type} from "packages/net/minecraft/client/gui/screens/inventory/tooltip/$ClientTooltipComponent"

export class $BlackboardTooltipComponent implements $ClientTooltipComponent {

constructor(key: $BlackboardManager$Key$Type)

public "getWidth"(pFont: $Font$Type): integer
public "getHeight"(): integer
public "renderImage"(pFont: $Font$Type, x: integer, y: integer, graphics: $GuiGraphics$Type): void
public static "create"(arg0: $TooltipComponent$Type): $ClientTooltipComponent
public "renderText"(arg0: $Font$Type, arg1: integer, arg2: integer, arg3: $Matrix4f$Type, arg4: $MultiBufferSource$BufferSource$Type): void
public static "create"(arg0: $FormattedCharSequence$Type): $ClientTooltipComponent
get "height"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BlackboardTooltipComponent$Type = ($BlackboardTooltipComponent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BlackboardTooltipComponent_ = $BlackboardTooltipComponent$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/$IOnePlayerGui" {
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$IScreenProvider, $IScreenProvider$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/$IScreenProvider"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export interface $IOnePlayerGui extends $IScreenProvider {

 "tryOpeningEditGui"(player: $ServerPlayer$Type, pos: $BlockPos$Type): boolean
 "setPlayerWhoMayEdit"(arg0: $UUID$Type): void
 "playerIsTooFarAwayToEdit"(level: $Level$Type, pos: $BlockPos$Type, uUID: $UUID$Type): boolean
 "shouldUseContainerMenu"(): boolean
 "getPlayerWhoMayEdit"(): $UUID
 "validatePlayerWhoMayEdit"(level: $Level$Type, pos: $BlockPos$Type): void
 "isOtherPlayerEditing"(player: $Player$Type): boolean
/**
 * 
 * @deprecated
 */
 "openScreen"(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $Player$Type): void
 "openScreen"(level: $Level$Type, pos: $BlockPos$Type, player: $Player$Type, direction: $Direction$Type): void
 "sendOpenGuiPacket"(level: $Level$Type, pos: $BlockPos$Type, player: $Player$Type, hitFace: $Direction$Type): void
 "sendOpenGuiPacket"(level: $Level$Type, pos: $BlockPos$Type, player: $Player$Type): void
}

export namespace $IOnePlayerGui {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IOnePlayerGui$Type = ($IOnePlayerGui);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IOnePlayerGui_ = $IOnePlayerGui$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/blocks/$WildFlaxBlock" {
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$CollisionContext, $CollisionContext$Type} from "packages/net/minecraft/world/phys/shapes/$CollisionContext"
import {$BonemealableBlock, $BonemealableBlock$Type} from "packages/net/minecraft/world/level/block/$BonemealableBlock"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"
import {$BushBlock, $BushBlock$Type} from "packages/net/minecraft/world/level/block/$BushBlock"

export class $WildFlaxBlock extends $BushBlock implements $BonemealableBlock {
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(properties: $BlockBehaviour$Properties$Type)

public "getFireSpreadSpeed"(state: $BlockState$Type, world: $BlockGetter$Type, pos: $BlockPos$Type, face: $Direction$Type): integer
public "getFlammability"(state: $BlockState$Type, world: $BlockGetter$Type, pos: $BlockPos$Type, face: $Direction$Type): integer
public "canBeReplaced"(state: $BlockState$Type, useContext: $BlockPlaceContext$Type): boolean
public "getShape"(state: $BlockState$Type, worldIn: $BlockGetter$Type, pos: $BlockPos$Type, context: $CollisionContext$Type): $VoxelShape
public "isValidBonemealTarget"(worldIn: $LevelReader$Type, pos: $BlockPos$Type, state: $BlockState$Type, isClient: boolean): boolean
public "isBonemealSuccess"(worldIn: $Level$Type, rand: $RandomSource$Type, pos: $BlockPos$Type, state: $BlockState$Type): boolean
public "performBonemeal"(worldIn: $ServerLevel$Type, random: $RandomSource$Type, pos: $BlockPos$Type, state: $BlockState$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WildFlaxBlock$Type = ($WildFlaxBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WildFlaxBlock_ = $WildFlaxBlock$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/common/recipe/$RecipeUtils" {
import {$SoftFluidStack, $SoftFluidStack$Type} from "packages/net/mehvahdjukaar/moonlight/api/fluids/$SoftFluidStack"
import {$Pair, $Pair$Type} from "packages/com/mojang/datafixers/util/$Pair"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export class $RecipeUtils {

constructor()

public static "craftWithFluid"(level: $Level$Type, fluidStack: $SoftFluidStack$Type, playerItem: $ItemStack$Type, try9x9: boolean): $Pair<($ItemStack), (float)>
public static "craftWithFluidAndDye"(level: $Level$Type, fluid: $SoftFluidStack$Type, toRecolor: $ItemStack$Type): $Pair<($ItemStack), (float)>
public static "simulateCrafting"(level: $Level$Type, dye: $ItemStack$Type, playerItem: $ItemStack$Type, surround: boolean): $ItemStack
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RecipeUtils$Type = ($RecipeUtils);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RecipeUtils_ = $RecipeUtils$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/integration/forge/$InventoryTooltipComponent" {
import {$TooltipComponent, $TooltipComponent$Type} from "packages/net/minecraft/world/inventory/tooltip/$TooltipComponent"
import {$FormattedCharSequence, $FormattedCharSequence$Type} from "packages/net/minecraft/util/$FormattedCharSequence"
import {$Font, $Font$Type} from "packages/net/minecraft/client/gui/$Font"
import {$InventoryTooltip, $InventoryTooltip$Type} from "packages/net/mehvahdjukaar/supplementaries/common/items/tooltip_components/$InventoryTooltip"
import {$MultiBufferSource$BufferSource, $MultiBufferSource$BufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource$BufferSource"
import {$Matrix4f, $Matrix4f$Type} from "packages/org/joml/$Matrix4f"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$ClientTooltipComponent, $ClientTooltipComponent$Type} from "packages/net/minecraft/client/gui/screens/inventory/tooltip/$ClientTooltipComponent"

export class $InventoryTooltipComponent implements $ClientTooltipComponent {

constructor(tooltip: $InventoryTooltip$Type)

public "getWidth"(font: $Font$Type): integer
public "getHeight"(): integer
public "renderImage"(font: $Font$Type, tooltipX: integer, tooltipY: integer, graphics: $GuiGraphics$Type): void
public static "create"(arg0: $TooltipComponent$Type): $ClientTooltipComponent
public "renderText"(arg0: $Font$Type, arg1: integer, arg2: integer, arg3: $Matrix4f$Type, arg4: $MultiBufferSource$BufferSource$Type): void
public static "create"(arg0: $FormattedCharSequence$Type): $ClientTooltipComponent
get "height"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $InventoryTooltipComponent$Type = ($InventoryTooltipComponent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $InventoryTooltipComponent_ = $InventoryTooltipComponent$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/integration/forge/$CompatHandlerClientImpl" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $CompatHandlerClientImpl {

constructor()

public static "init"(): void
public static "doSetup"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CompatHandlerClientImpl$Type = ($CompatHandlerClientImpl);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CompatHandlerClientImpl_ = $CompatHandlerClientImpl$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/client/model/$BakedQuadsTransformer" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$Matrix4f, $Matrix4f$Type} from "packages/org/joml/$Matrix4f"
import {$IntUnaryOperator, $IntUnaryOperator$Type} from "packages/java/util/function/$IntUnaryOperator"
import {$BakedQuad, $BakedQuad$Type} from "packages/net/minecraft/client/renderer/block/model/$BakedQuad"
import {$TextureAtlasSprite, $TextureAtlasSprite$Type} from "packages/net/minecraft/client/renderer/texture/$TextureAtlasSprite"

export interface $BakedQuadsTransformer {

 "transform"(arg0: $BakedQuad$Type): $BakedQuad
 "applyingAmbientOcclusion"(arg0: boolean): $BakedQuadsTransformer
 "applyingEmissivity"(arg0: integer): $BakedQuadsTransformer
 "applyingSprite"(arg0: $TextureAtlasSprite$Type): $BakedQuadsTransformer
 "transformAll"(quads: $List$Type<($BakedQuad$Type)>): $List<($BakedQuad)>
 "applyingTransform"(arg0: $Matrix4f$Type): $BakedQuadsTransformer
 "applyingColor"(ABGRcolor: integer): $BakedQuadsTransformer
 "applyingColor"(arg0: $IntUnaryOperator$Type): $BakedQuadsTransformer
 "applyingTintIndex"(arg0: integer): $BakedQuadsTransformer
 "applyingShade"(arg0: boolean): $BakedQuadsTransformer
 "applyingLightMap"(arg0: integer): $BakedQuadsTransformer
}

export namespace $BakedQuadsTransformer {
function create(): $BakedQuadsTransformer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BakedQuadsTransformer$Type = ($BakedQuadsTransformer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BakedQuadsTransformer_ = $BakedQuadsTransformer$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/resources/$SimpleTagBuilder" {
import {$JsonObject, $JsonObject$Type} from "packages/com/google/gson/$JsonObject"
import {$JsonElement, $JsonElement$Type} from "packages/com/google/gson/$JsonElement"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$List, $List$Type} from "packages/java/util/$List"
import {$TagEntry, $TagEntry$Type} from "packages/net/minecraft/tags/$TagEntry"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"
import {$TagBuilder, $TagBuilder$Type} from "packages/net/minecraft/tags/$TagBuilder"

export class $SimpleTagBuilder extends $TagBuilder {
readonly "entries": $List<($TagEntry)>


public "add"(entry: $ResourceLocation$Type): $SimpleTagBuilder
public static "of"(key: $TagKey$Type<(any)>): $SimpleTagBuilder
public static "of"(location: $ResourceLocation$Type): $SimpleTagBuilder
public "getId"(): $ResourceLocation
public "addEntry"(entry: any): $SimpleTagBuilder
public "addFromJson"(oldTag: $JsonObject$Type): void
public "add"(entry: $TagEntry$Type): $TagBuilder
public "addEntries"(entries: $Collection$Type<(any)>): $SimpleTagBuilder
public "addOptional"(elementLocation: $ResourceLocation$Type): $TagBuilder
public "addTag"(pId: $ResourceLocation$Type): $SimpleTagBuilder
public "addTag"(tagKey: $TagKey$Type<(any)>): $SimpleTagBuilder
public "addTag"(otherBuilder: $SimpleTagBuilder$Type): $SimpleTagBuilder
public "serializeToJson"(): $JsonElement
public "addOptionalTag"(pId: $ResourceLocation$Type): $SimpleTagBuilder
get "id"(): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SimpleTagBuilder$Type = ($SimpleTagBuilder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SimpleTagBuilder_ = $SimpleTagBuilder$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/reg/$ModDamageSources" {
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $ModDamageSources {

constructor()

public static "bottling"(): $DamageSource
public static "spikePlayer"(player: $Player$Type): $DamageSource
public static "spike"(): $DamageSource
public static "bombExplosion"(entity: $Entity$Type, entity2: $Entity$Type): $DamageSource
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModDamageSources$Type = ($ModDamageSources);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModDamageSources_ = $ModDamageSources$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/faucet/$ContainerItemInteraction" {
import {$FaucetItemSource, $FaucetItemSource$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/faucet/$FaucetItemSource"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $ContainerItemInteraction implements $FaucetItemSource {

constructor()

public "tryExtractItem"(level: $Level$Type, pos: $BlockPos$Type, state: $BlockState$Type, direction: $Direction$Type, tile: $BlockEntity$Type): $ItemStack
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ContainerItemInteraction$Type = ($ContainerItemInteraction);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ContainerItemInteraction_ = $ContainerItemInteraction$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/blocks/$FrameBlock" {
import {$IntegerProperty, $IntegerProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$IntegerProperty"
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$EntityBlock, $EntityBlock$Type} from "packages/net/minecraft/world/level/block/$EntityBlock"
import {$IFrameBlock, $IFrameBlock$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/blocks/$IFrameBlock"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$PathComputationType, $PathComputationType$Type} from "packages/net/minecraft/world/level/pathfinder/$PathComputationType"
import {$FluidState, $FluidState$Type} from "packages/net/minecraft/world/level/material/$FluidState"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$List, $List$Type} from "packages/java/util/$List"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$CollisionContext, $CollisionContext$Type} from "packages/net/minecraft/world/phys/shapes/$CollisionContext"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$MimicBlock, $MimicBlock$Type} from "packages/net/mehvahdjukaar/moonlight/api/block/$MimicBlock"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$BlockEntityTicker, $BlockEntityTicker$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityTicker"
import {$GameEventListener, $GameEventListener$Type} from "packages/net/minecraft/world/level/gameevent/$GameEventListener"

export class $FrameBlock extends $MimicBlock implements $EntityBlock, $IFrameBlock {
static readonly "FRAMED_BLOCKS": $List<($Block)>
static readonly "HAS_BLOCK": $BooleanProperty
static readonly "LIGHT_LEVEL": $IntegerProperty
static readonly "WATERLOGGED": $BooleanProperty
static readonly "OCCLUSION_SHAPE": $VoxelShape
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(properties: $BlockBehaviour$Properties$Type)

public "propagatesSkylightDown"(state: $BlockState$Type, reader: $BlockGetter$Type, pos: $BlockPos$Type): boolean
public "getStateForPlacement"(context: $BlockPlaceContext$Type): $BlockState
public "getCloneItemStack"(level: $BlockGetter$Type, pos: $BlockPos$Type, state: $BlockState$Type): $ItemStack
public "getEnchantPowerBonus"(state: $BlockState$Type, world: $LevelReader$Type, pos: $BlockPos$Type): float
public "registerFilledBlock"(inserted: $Block$Type, filled: $Block$Type): void
public "getFilledBlock"(inserted: $Block$Type): $Block
public "isPathfindable"(state: $BlockState$Type, worldIn: $BlockGetter$Type, pos: $BlockPos$Type, type: $PathComputationType$Type): boolean
public "skipRendering"(state: $BlockState$Type, adjacentBlockState: $BlockState$Type, side: $Direction$Type): boolean
public "updateShape"(stateIn: $BlockState$Type, facing: $Direction$Type, facingState: $BlockState$Type, worldIn: $LevelAccessor$Type, currentPos: $BlockPos$Type, facingPos: $BlockPos$Type): $BlockState
public "use"(state: $BlockState$Type, world: $Level$Type, pos: $BlockPos$Type, player: $Player$Type, hand: $InteractionHand$Type, trace: $BlockHitResult$Type): $InteractionResult
public "hasAnalogOutputSignal"(state: $BlockState$Type): boolean
public "getFluidState"(state: $BlockState$Type): $FluidState
public "getOcclusionShape"(state: $BlockState$Type, reader: $BlockGetter$Type, pos: $BlockPos$Type): $VoxelShape
public "getLightBlock"(state: $BlockState$Type, level: $BlockGetter$Type, pos: $BlockPos$Type): integer
public "getShadeBrightness"(state: $BlockState$Type, reader: $BlockGetter$Type, pos: $BlockPos$Type): float
public "getCollisionShape"(state: $BlockState$Type, reader: $BlockGetter$Type, pos: $BlockPos$Type, context: $CollisionContext$Type): $VoxelShape
public "getAnalogOutputSignal"(state: $BlockState$Type, world: $Level$Type, pos: $BlockPos$Type): integer
public "getShape"(state: $BlockState$Type, level: $BlockGetter$Type, pos: $BlockPos$Type, collisionContext: $CollisionContext$Type): $VoxelShape
public "newBlockEntity"(pPos: $BlockPos$Type, pState: $BlockState$Type): $BlockEntity
public "getTicker"<T extends $BlockEntity>(arg0: $Level$Type, arg1: $BlockState$Type, arg2: $BlockEntityType$Type<(T)>): $BlockEntityTicker<(T)>
public "getListener"<T extends $BlockEntity>(arg0: $ServerLevel$Type, arg1: T): $GameEventListener
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FrameBlock$Type = ($FrameBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FrameBlock_ = $FrameBlock$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/dispenser/$BombsBehavior" {
import {$BlockSource, $BlockSource$Type} from "packages/net/minecraft/core/$BlockSource"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$AbstractProjectileDispenseBehavior, $AbstractProjectileDispenseBehavior$Type} from "packages/net/minecraft/core/dispenser/$AbstractProjectileDispenseBehavior"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $BombsBehavior extends $AbstractProjectileDispenseBehavior {


public static "bootStrap"(): void
public static "setEntityPokingOutOfBlock"(arg0: $BlockSource$Type, arg1: $Entity$Type, arg2: $Direction$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BombsBehavior$Type = ($BombsBehavior);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BombsBehavior_ = $BombsBehavior$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$BookPileBlockTile" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Connection, $Connection$Type} from "packages/net/minecraft/network/$Connection"
import {$ModelData, $ModelData$Type} from "packages/net/minecraftforge/client/model/data/$ModelData"
import {$ExtraModelData, $ExtraModelData$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$ExtraModelData"
import {$BookPileBlockTile$BooksList, $BookPileBlockTile$BooksList$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$BookPileBlockTile$BooksList"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$ClientboundBlockEntityDataPacket, $ClientboundBlockEntityDataPacket$Type} from "packages/net/minecraft/network/protocol/game/$ClientboundBlockEntityDataPacket"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$ExtraModelData$Builder, $ExtraModelData$Builder$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$ExtraModelData$Builder"
import {$IExtraModelDataProvider, $IExtraModelDataProvider$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$IExtraModelDataProvider"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$ModelDataKey, $ModelDataKey$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$ModelDataKey"
import {$List, $List$Type} from "packages/java/util/$List"
import {$LockCode, $LockCode$Type} from "packages/net/minecraft/world/$LockCode"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$ItemDisplayTile, $ItemDisplayTile$Type} from "packages/net/mehvahdjukaar/moonlight/api/block/$ItemDisplayTile"

export class $BookPileBlockTile extends $ItemDisplayTile implements $IExtraModelDataProvider {
readonly "horizontal": boolean
readonly "booksVisuals": $BookPileBlockTile$BooksList
static readonly "BOOKS_KEY": $ModelDataKey<($BookPileBlockTile$BooksList)>
static readonly "DEFAULT_COLORS": $List<(string)>
static readonly "LOOT_TABLE_TAG": string
static readonly "LOOT_TABLE_SEED_TAG": string
 "lootTable": $ResourceLocation
 "lootTableSeed": long
 "lockKey": $LockCode
 "blockState": $BlockState

constructor(pos: $BlockPos$Type, state: $BlockState$Type)
constructor(pos: $BlockPos$Type, state: $BlockState$Type, horizontal: boolean)

public "updateTileOnInventoryChanged"(): void
public "updateClientVisualsOnLoad"(): void
public "load"(compound: $CompoundTag$Type): void
public "m_183515_"(compound: $CompoundTag$Type): void
public "addExtraModelData"(builder: $ExtraModelData$Builder$Type): void
public "getEnchantPower"(): float
public "requestModelReload"(): void
/**
 * 
 * @deprecated
 */
public "getExtraModelData"(): $ExtraModelData
public "afterDataPacket"(oldData: $ExtraModelData$Type): void
public "onDataPacket"(net: $Connection$Type, pkt: $ClientboundBlockEntityDataPacket$Type): void
public "getModelData"(): $ModelData
public "getPersistentData"(): $CompoundTag
public "onChunkUnloaded"(): void
public static "stillValidBlockEntity"(arg0: $BlockEntity$Type, arg1: $Player$Type, arg2: integer): boolean
public static "stillValidBlockEntity"(arg0: $BlockEntity$Type, arg1: $Player$Type): boolean
public static "tryClear"(arg0: any): void
get "enchantPower"(): float
get "extraModelData"(): $ExtraModelData
get "modelData"(): $ModelData
get "persistentData"(): $CompoundTag
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BookPileBlockTile$Type = ($BookPileBlockTile);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BookPileBlockTile_ = $BookPileBlockTile$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/resources/$ResType" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"

export class $ResType extends $Enum<($ResType)> {
static readonly "GENERIC": $ResType
static readonly "TAGS": $ResType
static readonly "LOOT_TABLES": $ResType
static readonly "BLOCK_LOOT_TABLES": $ResType
static readonly "RECIPES": $ResType
static readonly "ADVANCEMENTS": $ResType
static readonly "CONFIGURED_FEATURES": $ResType
static readonly "STRUCTURE": $ResType
static readonly "STRUCTURE_SET": $ResType
static readonly "TEMPLATE_POOL": $ResType
static readonly "LANG": $ResType
static readonly "TEXTURES": $ResType
static readonly "BLOCK_TEXTURES": $ResType
static readonly "ITEM_TEXTURES": $ResType
static readonly "ENTITY_TEXTURES": $ResType
static readonly "PARTICLE_TEXTURES": $ResType
static readonly "MCMETA": $ResType
static readonly "BLOCK_MCMETA": $ResType
static readonly "ITEM_MCMETA": $ResType
static readonly "MODELS": $ResType
static readonly "BLOCK_MODELS": $ResType
static readonly "ITEM_MODELS": $ResType
static readonly "BLOCKSTATES": $ResType
static readonly "PARTICLES": $ResType
static readonly "MOB_EFFECT_TEXTURES": $ResType
static readonly "JSON": $ResType
static readonly "PNG": $ResType


public static "values"(): ($ResType)[]
public static "valueOf"(name: string): $ResType
public "getPath"(relativeLocation: string): $ResourceLocation
public "getPath"(relativeLocation: $ResourceLocation$Type): $ResourceLocation
public static "getTagPath"(tag: $TagKey$Type<(any)>): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ResType$Type = (("template_pool") | ("particle_textures") | ("textures") | ("entity_textures") | ("item_mcmeta") | ("block_textures") | ("advancements") | ("structure_set") | ("json") | ("lang") | ("particles") | ("blockstates") | ("recipes") | ("models") | ("png") | ("configured_features") | ("generic") | ("structure") | ("mob_effect_textures") | ("tags") | ("block_mcmeta") | ("loot_tables") | ("block_models") | ("item_models") | ("item_textures") | ("block_loot_tables") | ("mcmeta")) | ($ResType);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ResType_ = $ResType$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/blocks/$SconceBlock" {
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$ParticleType, $ParticleType$Type} from "packages/net/minecraft/core/particles/$ParticleType"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$CollisionContext, $CollisionContext$Type} from "packages/net/minecraft/world/phys/shapes/$CollisionContext"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$LightUpWaterBlock, $LightUpWaterBlock$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/blocks/$LightUpWaterBlock"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $SconceBlock extends $LightUpWaterBlock {
static readonly "WATERLOGGED": $BooleanProperty
static readonly "LIT": $BooleanProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor<T extends $ParticleType<(any)>>(properties: $BlockBehaviour$Properties$Type, particleData: $Supplier$Type<(T)>)
constructor<T extends $ParticleType<(any)>>(properties: $BlockBehaviour$Properties$Type, lightLevel: integer, particleData: $Supplier$Type<(T)>)

public "updateShape"(stateIn: $BlockState$Type, facing: $Direction$Type, facingState: $BlockState$Type, worldIn: $LevelAccessor$Type, currentPos: $BlockPos$Type, facingPos: $BlockPos$Type): $BlockState
public "canSurvive"(state: $BlockState$Type, worldIn: $LevelReader$Type, pos: $BlockPos$Type): boolean
/**
 * 
 * @deprecated
 */
public "getCollisionShape"(state: $BlockState$Type, level: $BlockGetter$Type, pos: $BlockPos$Type, context: $CollisionContext$Type): $VoxelShape
public "getShape"(state: $BlockState$Type, worldIn: $BlockGetter$Type, pos: $BlockPos$Type, context: $CollisionContext$Type): $VoxelShape
public "animateTick"(stateIn: $BlockState$Type, worldIn: $Level$Type, pos: $BlockPos$Type, rand: $RandomSource$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SconceBlock$Type = ($SconceBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SconceBlock_ = $SconceBlock$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$StructureTempBlockTile" {
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $StructureTempBlockTile extends $BlockEntity {
 "blockState": $BlockState

constructor(pos: $BlockPos$Type, state: $BlockState$Type)

public static "tick"(level: $Level$Type, pos: $BlockPos$Type, state: $BlockState$Type, e: $StructureTempBlockTile$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $StructureTempBlockTile$Type = ($StructureTempBlockTile);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $StructureTempBlockTile_ = $StructureTempBlockTile$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/present/$PresentBehaviorsManager" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $PresentBehaviorsManager {

constructor()

public static "registerBehaviors"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PresentBehaviorsManager$Type = ($PresentBehaviorsManager);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PresentBehaviorsManager_ = $PresentBehaviorsManager$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/screens/$TrappedPresentScreen" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$ContainerListener, $ContainerListener$Type} from "packages/net/minecraft/world/inventory/$ContainerListener"
import {$TrappedPresentContainerMenu, $TrappedPresentContainerMenu$Type} from "packages/net/mehvahdjukaar/supplementaries/common/inventories/$TrappedPresentContainerMenu"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$AbstractContainerScreen, $AbstractContainerScreen$Type} from "packages/net/minecraft/client/gui/screens/inventory/$AbstractContainerScreen"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$List, $List$Type} from "packages/java/util/$List"
import {$AbstractContainerMenu, $AbstractContainerMenu$Type} from "packages/net/minecraft/world/inventory/$AbstractContainerMenu"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"

export class $TrappedPresentScreen extends $AbstractContainerScreen<($TrappedPresentContainerMenu)> implements $ContainerListener {
static readonly "INVENTORY_LOCATION": $ResourceLocation
static readonly "SLOT_ITEM_BLIT_OFFSET": integer
 "imageWidth": integer
 "hoveredSlot": $Slot
 "leftPos": integer
 "topPos": integer
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering

constructor(menu: $TrappedPresentContainerMenu$Type, inventory: $Inventory$Type, text: $Component$Type)

public "keyPressed"(key: integer, a: integer, b: integer): boolean
public "m_7856_"(): void
public "removed"(): void
public "render"(graphics: $GuiGraphics$Type, mouseX: integer, mouseY: integer, partialTicks: float): void
public "m_181908_"(): void
public "slotChanged"(container: $AbstractContainerMenu$Type, slot: integer, stack: $ItemStack$Type): void
public "dataChanged"(container: $AbstractContainerMenu$Type, dataSlotIndex: integer, value: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TrappedPresentScreen$Type = ($TrappedPresentScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TrappedPresentScreen_ = $TrappedPresentScreen$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/tooltip/$SherdTooltipComponent" {
import {$TooltipComponent, $TooltipComponent$Type} from "packages/net/minecraft/world/inventory/tooltip/$TooltipComponent"
import {$FormattedCharSequence, $FormattedCharSequence$Type} from "packages/net/minecraft/util/$FormattedCharSequence"
import {$Font, $Font$Type} from "packages/net/minecraft/client/gui/$Font"
import {$MultiBufferSource$BufferSource, $MultiBufferSource$BufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource$BufferSource"
import {$SherdTooltip, $SherdTooltip$Type} from "packages/net/mehvahdjukaar/supplementaries/common/items/tooltip_components/$SherdTooltip"
import {$Matrix4f, $Matrix4f$Type} from "packages/org/joml/$Matrix4f"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$ClientTooltipComponent, $ClientTooltipComponent$Type} from "packages/net/minecraft/client/gui/screens/inventory/tooltip/$ClientTooltipComponent"

export class $SherdTooltipComponent implements $ClientTooltipComponent {

constructor(tooltip: $SherdTooltip$Type)

public "getWidth"(pFont: $Font$Type): integer
public "getHeight"(): integer
public "renderImage"(pFont: $Font$Type, x: integer, y: integer, graphics: $GuiGraphics$Type): void
public static "create"(arg0: $TooltipComponent$Type): $ClientTooltipComponent
public "renderText"(arg0: $Font$Type, arg1: integer, arg2: integer, arg3: $Matrix4f$Type, arg4: $MultiBufferSource$BufferSource$Type): void
public static "create"(arg0: $FormattedCharSequence$Type): $ClientTooltipComponent
get "height"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SherdTooltipComponent$Type = ($SherdTooltipComponent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SherdTooltipComponent_ = $SherdTooltipComponent$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/faucet/$FluidOffer" {
import {$Holder, $Holder$Type} from "packages/net/minecraft/core/$Holder"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$SoftFluidStack, $SoftFluidStack$Type} from "packages/net/mehvahdjukaar/moonlight/api/fluids/$SoftFluidStack"
import {$SoftFluid, $SoftFluid$Type} from "packages/net/mehvahdjukaar/moonlight/api/fluids/$SoftFluid"

export class $FluidOffer extends $Record {

constructor(fluid: $SoftFluidStack$Type, minAmount: integer)

public "equals"(o: any): boolean
public "toString"(): string
public "hashCode"(): integer
public static "of"(fluid: $Holder$Type<($SoftFluid$Type)>): $FluidOffer
public static "of"(stack: $SoftFluidStack$Type, min: integer): $FluidOffer
public static "of"(stack: $SoftFluidStack$Type): $FluidOffer
public static "of"(fluid: $Holder$Type<($SoftFluid$Type)>, amount: integer, minAmount: integer): $FluidOffer
public static "of"(fluid: $Holder$Type<($SoftFluid$Type)>, amount: integer): $FluidOffer
public "minAmount"(): integer
public "fluid"(): $SoftFluidStack
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FluidOffer$Type = ($FluidOffer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FluidOffer_ = $FluidOffer$Type;
}}
declare module "packages/net/mehvahdjukaar/modelfix/$PlatStuff" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $PlatStuff {

constructor()

public static "isModStateValid"(): boolean
get "modStateValid"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PlatStuff$Type = ($PlatStuff);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PlatStuff_ = $PlatStuff$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/inventories/$VariableSizeContainerMenu" {
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$IContainerProvider, $IContainerProvider$Type} from "packages/net/mehvahdjukaar/moonlight/api/misc/$IContainerProvider"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$MenuProvider, $MenuProvider$Type} from "packages/net/minecraft/world/$MenuProvider"
import {$AbstractContainerMenu, $AbstractContainerMenu$Type} from "packages/net/minecraft/world/inventory/$AbstractContainerMenu"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $VariableSizeContainerMenu extends $AbstractContainerMenu implements $IContainerProvider {
readonly "inventory": $Container
readonly "unlockedSlots": integer
static readonly "SLOT_CLICKED_OUTSIDE": integer
static readonly "QUICKCRAFT_TYPE_CHARITABLE": integer
static readonly "QUICKCRAFT_TYPE_GREEDY": integer
static readonly "QUICKCRAFT_TYPE_CLONE": integer
static readonly "QUICKCRAFT_HEADER_START": integer
static readonly "QUICKCRAFT_HEADER_CONTINUE": integer
static readonly "QUICKCRAFT_HEADER_END": integer
static readonly "CARRIED_SLOT_SIZE": integer
readonly "lastSlots": $NonNullList<($ItemStack)>
readonly "slots": $NonNullList<($Slot)>
 "remoteSlots": $NonNullList<($ItemStack)>
 "containerId": integer

constructor(id: integer, playerInventory: $Inventory$Type, packetBuffer: $FriendlyByteBuf$Type)
constructor(id: integer, playerInventory: $Inventory$Type, container: $Container$Type, unlockedSlots: integer)

public static "openTileMenu"<C extends ($BlockEntity) & ($Container) & ($MenuProvider)>(player: $Player$Type, tile: C): void
public static "openEntityMenu"<C extends ($Entity) & ($Container) & ($MenuProvider)>(player: $Player$Type, entity: C): void
public static "getRatio"(maxSize: integer): (integer)[]
public "getContainer"(): $Container
public "stillValid"(playerIn: $Player$Type): boolean
public "removed"(playerIn: $Player$Type): void
public "quickMoveStack"(playerIn: $Player$Type, index: integer): $ItemStack
get "container"(): $Container
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $VariableSizeContainerMenu$Type = ($VariableSizeContainerMenu);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $VariableSizeContainerMenu_ = $VariableSizeContainerMenu$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/platform/network/$ChannelHandler$Context" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$NetworkDir, $NetworkDir$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/network/$NetworkDir"

export interface $ChannelHandler$Context {

 "disconnect"(arg0: $Component$Type): void
 "getDirection"(): $NetworkDir
 "getSender"(): $Player
}

export namespace $ChannelHandler$Context {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ChannelHandler$Context$Type = ($ChannelHandler$Context);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ChannelHandler$Context_ = $ChannelHandler$Context$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/worldgen/$StructureLocator$LocatedStruct" {
import {$Holder, $Holder$Type} from "packages/net/minecraft/core/$Holder"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$Structure, $Structure$Type} from "packages/net/minecraft/world/level/levelgen/structure/$Structure"
import {$StructureStart, $StructureStart$Type} from "packages/net/minecraft/world/level/levelgen/structure/$StructureStart"
import {$Pair, $Pair$Type} from "packages/com/mojang/datafixers/util/$Pair"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $StructureLocator$LocatedStruct extends $Record {

constructor(pair: $Pair$Type<($BlockPos$Type), ($Holder$Type<($Structure$Type)>)>)
constructor(pos: $BlockPos$Type, structure: $Holder$Type<($Structure$Type)>, start: $StructureStart$Type)

public "equals"(o: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "start"(): $StructureStart
public "pos"(): $BlockPos
public "structure"(): $Holder<($Structure)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $StructureLocator$LocatedStruct$Type = ($StructureLocator$LocatedStruct);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $StructureLocator$LocatedStruct_ = $StructureLocator$LocatedStruct$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/block_models/$GobletBakedModel" {
import {$ModelData, $ModelData$Type} from "packages/net/minecraftforge/client/model/data/$ModelData"
import {$ModelState, $ModelState$Type} from "packages/net/minecraft/client/resources/model/$ModelState"
import {$ItemTransforms, $ItemTransforms$Type} from "packages/net/minecraft/client/renderer/block/model/$ItemTransforms"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$ExtraModelData, $ExtraModelData$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$ExtraModelData"
import {$CustomBakedModel, $CustomBakedModel$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$CustomBakedModel"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BakedModel, $BakedModel$Type} from "packages/net/minecraft/client/resources/model/$BakedModel"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$RenderType, $RenderType$Type} from "packages/net/minecraft/client/renderer/$RenderType"
import {$ItemOverrides, $ItemOverrides$Type} from "packages/net/minecraft/client/renderer/block/model/$ItemOverrides"
import {$ItemDisplayContext, $ItemDisplayContext$Type} from "packages/net/minecraft/world/item/$ItemDisplayContext"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$List, $List$Type} from "packages/java/util/$List"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$ChunkRenderTypeSet, $ChunkRenderTypeSet$Type} from "packages/net/minecraftforge/client/$ChunkRenderTypeSet"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockAndTintGetter, $BlockAndTintGetter$Type} from "packages/net/minecraft/world/level/$BlockAndTintGetter"
import {$BakedQuad, $BakedQuad$Type} from "packages/net/minecraft/client/renderer/block/model/$BakedQuad"
import {$TextureAtlasSprite, $TextureAtlasSprite$Type} from "packages/net/minecraft/client/renderer/texture/$TextureAtlasSprite"

export class $GobletBakedModel implements $CustomBakedModel {

constructor(goblet: $BakedModel$Type, liquid: $BakedModel$Type, rotation: $ModelState$Type)

public "usesBlockLight"(): boolean
public "isGui3d"(): boolean
public "getBlockQuads"(state: $BlockState$Type, side: $Direction$Type, rand: $RandomSource$Type, renderType: $RenderType$Type, data: $ExtraModelData$Type): $List<($BakedQuad)>
public "getBlockParticle"(extraModelData: $ExtraModelData$Type): $TextureAtlasSprite
public "isCustomRenderer"(): boolean
public "getOverrides"(): $ItemOverrides
public "getTransforms"(): $ItemTransforms
public "useAmbientOcclusion"(): boolean
public "getParticleIcon"(): $TextureAtlasSprite
public "getQuads"(state: $BlockState$Type, side: $Direction$Type, rand: $RandomSource$Type): $List<(any)>
public "getQuads"(state: $BlockState$Type, side: $Direction$Type, rand: $RandomSource$Type, modelData: $ModelData$Type, type: $RenderType$Type): $List<(any)>
public "getParticleIcon"(data: $ModelData$Type): $TextureAtlasSprite
public "getModelData"(level: $BlockAndTintGetter$Type, pos: $BlockPos$Type, state: $BlockState$Type, modelData: $ModelData$Type): $ModelData
public "getModelData"(originalData: $ExtraModelData$Type, stack: $ItemStack$Type): $ExtraModelData
public "getModelData"(tileData: $ExtraModelData$Type, pos: $BlockPos$Type, state: $BlockState$Type, level: $BlockAndTintGetter$Type): $ExtraModelData
public "useAmbientOcclusion"(arg0: $BlockState$Type, arg1: $RenderType$Type): boolean
public "useAmbientOcclusion"(arg0: $BlockState$Type): boolean
public "getRenderTypes"(arg0: $ItemStack$Type, arg1: boolean): $List<($RenderType)>
public "getRenderTypes"(arg0: $BlockState$Type, arg1: $RandomSource$Type, arg2: $ModelData$Type): $ChunkRenderTypeSet
public "getRenderPasses"(arg0: $ItemStack$Type, arg1: boolean): $List<($BakedModel)>
public "applyTransform"(arg0: $ItemDisplayContext$Type, arg1: $PoseStack$Type, arg2: boolean): $BakedModel
public "useAmbientOcclusionWithLightEmission"(arg0: $BlockState$Type, arg1: $RenderType$Type): boolean
get "gui3d"(): boolean
get "customRenderer"(): boolean
get "overrides"(): $ItemOverrides
get "transforms"(): $ItemTransforms
get "particleIcon"(): $TextureAtlasSprite
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GobletBakedModel$Type = ($GobletBakedModel);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GobletBakedModel_ = $GobletBakedModel$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/integration/create/$HourglassBehavior" {
import {$ContraptionMatrices, $ContraptionMatrices$Type} from "packages/com/simibubi/create/content/contraptions/render/$ContraptionMatrices"
import {$ActorInstance, $ActorInstance$Type} from "packages/com/simibubi/create/content/contraptions/render/$ActorInstance"
import {$VirtualRenderWorld, $VirtualRenderWorld$Type} from "packages/com/jozufozu/flywheel/core/virtual/$VirtualRenderWorld"
import {$MaterialManager, $MaterialManager$Type} from "packages/com/jozufozu/flywheel/api/$MaterialManager"
import {$MovementBehaviour, $MovementBehaviour$Type} from "packages/com/simibubi/create/content/contraptions/behaviour/$MovementBehaviour"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$MovementContext, $MovementContext$Type} from "packages/com/simibubi/create/content/contraptions/behaviour/$MovementContext"

export class $HourglassBehavior implements $MovementBehaviour {

constructor()

public "tick"(context: $MovementContext$Type): void
public "renderInContraption"(context: $MovementContext$Type, renderWorld: $VirtualRenderWorld$Type, matrices: $ContraptionMatrices$Type, buffer: $MultiBufferSource$Type): void
public "isActive"(arg0: $MovementContext$Type): boolean
public "createInstance"(arg0: $MaterialManager$Type, arg1: $VirtualRenderWorld$Type, arg2: $MovementContext$Type): $ActorInstance
public "cancelStall"(arg0: $MovementContext$Type): void
public "startMoving"(arg0: $MovementContext$Type): void
public "canBeDisabledVia"(arg0: $MovementContext$Type): $ItemStack
public "visitNewPosition"(arg0: $MovementContext$Type, arg1: $BlockPos$Type): void
public "writeExtraData"(arg0: $MovementContext$Type): void
public "onSpeedChanged"(arg0: $MovementContext$Type, arg1: $Vec3$Type, arg2: $Vec3$Type): void
public "stopMoving"(arg0: $MovementContext$Type): void
public "mustTickWhileDisabled"(): boolean
public "getActiveAreaOffset"(arg0: $MovementContext$Type): $Vec3
public "hasSpecialInstancedRendering"(): boolean
public "renderAsNormalBlockEntity"(): boolean
public "onDisabledByControls"(arg0: $MovementContext$Type): void
public "dropItem"(arg0: $MovementContext$Type, arg1: $ItemStack$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $HourglassBehavior$Type = ($HourglassBehavior);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $HourglassBehavior_ = $HourglassBehavior$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/integration/create/$ClockDisplaySource" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$ModularGuiLineBuilder, $ModularGuiLineBuilder$Type} from "packages/com/simibubi/create/foundation/gui/$ModularGuiLineBuilder"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$DisplayLinkContext, $DisplayLinkContext$Type} from "packages/com/simibubi/create/content/redstone/displayLink/$DisplayLinkContext"
import {$SingleLineDisplaySource, $SingleLineDisplaySource$Type} from "packages/com/simibubi/create/content/redstone/displayLink/source/$SingleLineDisplaySource"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $ClockDisplaySource extends $SingleLineDisplaySource {
static readonly "EMPTY_TIME": $MutableComponent
static readonly "EMPTY": $List<($MutableComponent)>
static readonly "EMPTY_LINE": $MutableComponent
static readonly "WHITESPACE": $MutableComponent
 "id": $ResourceLocation

constructor()

public "initConfigurationWidgets"(context: $DisplayLinkContext$Type, builder: $ModularGuiLineBuilder$Type, isFirstLine: boolean): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClockDisplaySource$Type = ($ClockDisplaySource);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClockDisplaySource_ = $ClockDisplaySource$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/items/$WrenchItem" {
import {$Multimap, $Multimap$Type} from "packages/com/google/common/collect/$Multimap"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$UseOnContext, $UseOnContext$Type} from "packages/net/minecraft/world/item/context/$UseOnContext"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$Enchantment, $Enchantment$Type} from "packages/net/minecraft/world/item/enchantment/$Enchantment"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$Attribute, $Attribute$Type} from "packages/net/minecraft/world/entity/ai/attributes/$Attribute"
import {$AttributeModifier, $AttributeModifier$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeModifier"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $WrenchItem extends $Item {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(pProperties: $Item$Properties$Type)

public static "playTurningEffects"(pos: $BlockPos$Type, shiftDown: boolean, dir: $Direction$Type, level: $Level$Type, player: $Player$Type): void
public "canApplyAtEnchantingTable"(stack: $ItemStack$Type, enchantment: $Enchantment$Type): boolean
public "useOn"(context: $UseOnContext$Type): $InteractionResult
public "hurtEnemy"(pStack: $ItemStack$Type, pTarget: $LivingEntity$Type, pAttacker: $LivingEntity$Type): boolean
public "interactLivingEntity"(stack: $ItemStack$Type, player: $Player$Type, entity: $LivingEntity$Type, pUsedHand: $InteractionHand$Type): $InteractionResult
public "getDefaultAttributeModifiers"(pEquipmentSlot: $EquipmentSlot$Type): $Multimap<($Attribute), ($AttributeModifier)>
public "isValidRepairItem"(pStack: $ItemStack$Type, pRepairCandidate: $ItemStack$Type): boolean
public "onLeftClickEntity"(stack: $ItemStack$Type, player: $Player$Type, entity: $Entity$Type): boolean
public "getDamage"(): float
get "damage"(): float
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WrenchItem$Type = ($WrenchItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WrenchItem_ = $WrenchItem$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/network/$ClientBoundSendKnockbackPacket" {
import {$Message, $Message$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/network/$Message"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$ChannelHandler$Context, $ChannelHandler$Context$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/network/$ChannelHandler$Context"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"

export class $ClientBoundSendKnockbackPacket implements $Message {
readonly "id": integer
readonly "knockbackX": double
readonly "knockbackY": double
readonly "knockbackZ": double

constructor(buf: $FriendlyByteBuf$Type)
constructor(knockback: $Vec3$Type, id: integer)

public "handle"(context: $ChannelHandler$Context$Type): void
public "writeToBuffer"(buf: $FriendlyByteBuf$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientBoundSendKnockbackPacket$Type = ($ClientBoundSendKnockbackPacket);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientBoundSendKnockbackPacket_ = $ClientBoundSendKnockbackPacket$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/items/forge/$FiniteFluidBucket" {
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$BucketItem, $BucketItem$Type} from "packages/net/minecraft/world/item/$BucketItem"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $FiniteFluidBucket extends $BucketItem {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(supplier: $Supplier$Type<(any)>, builder: $Item$Properties$Type)

public "emptyContents"(arg: $Player$Type, arg2: $Level$Type, arg3: $BlockPos$Type, arg4: $BlockHitResult$Type, container: $ItemStack$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FiniteFluidBucket$Type = ($FiniteFluidBucket);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FiniteFluidBucket_ = $FiniteFluidBucket$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/common/tile/$LiquidCauldronBlockTile" {
import {$IFluidHandler, $IFluidHandler$Type} from "packages/net/minecraftforge/fluids/capability/$IFluidHandler"
import {$LazyOptional, $LazyOptional$Type} from "packages/net/minecraftforge/common/util/$LazyOptional"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Connection, $Connection$Type} from "packages/net/minecraft/network/$Connection"
import {$ModelData, $ModelData$Type} from "packages/net/minecraftforge/client/model/data/$ModelData"
import {$FluidStack, $FluidStack$Type} from "packages/net/minecraftforge/fluids/$FluidStack"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$ExtraModelData, $ExtraModelData$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$ExtraModelData"
import {$IFluidHandler$FluidAction, $IFluidHandler$FluidAction$Type} from "packages/net/minecraftforge/fluids/capability/$IFluidHandler$FluidAction"
import {$SoftFluidTank, $SoftFluidTank$Type} from "packages/net/mehvahdjukaar/moonlight/api/fluids/$SoftFluidTank"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$ClientboundBlockEntityDataPacket, $ClientboundBlockEntityDataPacket$Type} from "packages/net/minecraft/network/protocol/game/$ClientboundBlockEntityDataPacket"
import {$Capability, $Capability$Type} from "packages/net/minecraftforge/common/capabilities/$Capability"
import {$SoftFluid, $SoftFluid$Type} from "packages/net/mehvahdjukaar/moonlight/api/fluids/$SoftFluid"
import {$ExtraModelData$Builder, $ExtraModelData$Builder$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$ExtraModelData$Builder"
import {$IExtraModelDataProvider, $IExtraModelDataProvider$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$IExtraModelDataProvider"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$ModelDataKey, $ModelDataKey$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$ModelDataKey"
import {$ISoftFluidTankProvider, $ISoftFluidTankProvider$Type} from "packages/net/mehvahdjukaar/moonlight/api/block/$ISoftFluidTankProvider"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $LiquidCauldronBlockTile extends $BlockEntity implements $IExtraModelDataProvider, $ISoftFluidTankProvider, $IFluidHandler {
static readonly "FLUID": $ModelDataKey<($SoftFluid)>
readonly "amendments$cap": $LazyOptional<(any)>
 "blockState": $BlockState

constructor(blockPos: $BlockPos$Type, blockState: $BlockState$Type)

public "fill"(fluidStack: $FluidStack$Type, fluidAction: $IFluidHandler$FluidAction$Type): integer
public "drain"(fluidStack: $FluidStack$Type, fluidAction: $IFluidHandler$FluidAction$Type): $FluidStack
public "drain"(i: integer, fluidAction: $IFluidHandler$FluidAction$Type): $FluidStack
public "setChanged"(): void
public "createCauldronDyeTank"(): $SoftFluidTank
public "createCauldronLiquidTank"(): $SoftFluidTank
public "makeTank"(blockState: $BlockState$Type): $SoftFluidTank
public "consumeOneLayer"(): void
public "getUpdatePacket"(): $ClientboundBlockEntityDataPacket
public "getCapability"(cap: $Capability$Type<(any)>, side: $Direction$Type): $LazyOptional<(any)>
public "load"(compound: $CompoundTag$Type): void
public "m_183515_"(tag: $CompoundTag$Type): void
public "getSoftFluidTank"(): $SoftFluidTank
public "handleInteraction"(player: $Player$Type, hand: $InteractionHand$Type): boolean
public "getTanks"(): integer
public "isFluidValid"(i: integer, fluidStack: $FluidStack$Type): boolean
public "getFluidInTank"(i: integer): $FluidStack
public "getTankCapacity"(i: integer): integer
public "addExtraModelData"(builder: $ExtraModelData$Builder$Type): void
public "getUpdateTag"(): $CompoundTag
public "requestModelReload"(): void
/**
 * 
 * @deprecated
 */
public "getExtraModelData"(): $ExtraModelData
public "afterDataPacket"(oldData: $ExtraModelData$Type): void
public "onDataPacket"(net: $Connection$Type, pkt: $ClientboundBlockEntityDataPacket$Type): void
public "getModelData"(): $ModelData
public "canInteractWithSoftFluidTank"(): boolean
get "updatePacket"(): $ClientboundBlockEntityDataPacket
get "softFluidTank"(): $SoftFluidTank
get "tanks"(): integer
get "updateTag"(): $CompoundTag
get "extraModelData"(): $ExtraModelData
get "modelData"(): $ModelData
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LiquidCauldronBlockTile$Type = ($LiquidCauldronBlockTile);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LiquidCauldronBlockTile_ = $LiquidCauldronBlockTile$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/util/$DispenserHelper" {
import {$DispenserHelper$AdditionalDispenserBehavior, $DispenserHelper$AdditionalDispenserBehavior$Type} from "packages/net/mehvahdjukaar/moonlight/api/util/$DispenserHelper$AdditionalDispenserBehavior"
import {$ItemLike, $ItemLike$Type} from "packages/net/minecraft/world/level/$ItemLike"
import {$DefaultDispenseItemBehavior, $DefaultDispenseItemBehavior$Type} from "packages/net/minecraft/core/dispenser/$DefaultDispenseItemBehavior"

export class $DispenserHelper {
static readonly "PLACE_BLOCK_BEHAVIOR": $DefaultDispenseItemBehavior

constructor()

public static "registerCustomBehavior"(behavior: $DispenserHelper$AdditionalDispenserBehavior$Type): void
public static "registerPlaceBlockBehavior"(block: $ItemLike$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DispenserHelper$Type = ($DispenserHelper);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DispenserHelper_ = $DispenserHelper$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/items/$FlagItem" {
import {$WoodBasedBlockItem, $WoodBasedBlockItem$Type} from "packages/net/mehvahdjukaar/moonlight/api/item/$WoodBasedBlockItem"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$ICustomItemRendererProvider, $ICustomItemRendererProvider$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/$ICustomItemRendererProvider"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$IColored, $IColored$Type} from "packages/net/mehvahdjukaar/moonlight/api/block/$IColored"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ItemStackRenderer, $ItemStackRenderer$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/$ItemStackRenderer"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$DyeColor, $DyeColor$Type} from "packages/net/minecraft/world/item/$DyeColor"
import {$List, $List$Type} from "packages/java/util/$List"
import {$AdditionalItemPlacement, $AdditionalItemPlacement$Type} from "packages/net/mehvahdjukaar/moonlight/api/item/additional_placements/$AdditionalItemPlacement"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $FlagItem extends $WoodBasedBlockItem implements $IColored, $ICustomItemRendererProvider {
static readonly "BLOCK_ENTITY_TAG": string
static readonly "BLOCK_STATE_TAG": string
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(block: $Block$Type, properties: $Item$Properties$Type)

public "appendHoverText"(stack: $ItemStack$Type, world: $Level$Type, tooltip: $List$Type<($Component$Type)>, flag: $TooltipFlag$Type): void
public "getColor"(): $DyeColor
public "getRendererFactory"(): $Supplier<($ItemStackRenderer)>
/**
 * 
 * @deprecated
 */
public "changeItemColor"(color: $DyeColor$Type): $Item
public "supportsBlankColor"(): boolean
/**
 * 
 * @deprecated
 */
public "registerFabricRenderer"(): void
public "asItem"(): $Item
public "moonlight$addAdditionalBehavior"(arg0: $AdditionalItemPlacement$Type): void
public "moonlight$getAdditionalBehavior"(): $AdditionalItemPlacement
public "moonlight$getClientAnimationExtension"(): any
public "moonlight$setClientAnimationExtension"(arg0: any): void
get "color"(): $DyeColor
get "rendererFactory"(): $Supplier<($ItemStackRenderer)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FlagItem$Type = ($FlagItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FlagItem_ = $FlagItem$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/blocks/$GobletBlock" {
import {$IntegerProperty, $IntegerProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$IntegerProperty"
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$EntityBlock, $EntityBlock$Type} from "packages/net/minecraft/world/level/block/$EntityBlock"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$WaterBlock, $WaterBlock$Type} from "packages/net/mehvahdjukaar/moonlight/api/block/$WaterBlock"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$CollisionContext, $CollisionContext$Type} from "packages/net/minecraft/world/phys/shapes/$CollisionContext"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$BlockEntityTicker, $BlockEntityTicker$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityTicker"
import {$GameEventListener, $GameEventListener$Type} from "packages/net/minecraft/world/level/gameevent/$GameEventListener"
import {$RenderShape, $RenderShape$Type} from "packages/net/minecraft/world/level/block/$RenderShape"

export class $GobletBlock extends $WaterBlock implements $EntityBlock {
static readonly "LIGHT_LEVEL": $IntegerProperty
static readonly "WATERLOGGED": $BooleanProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(properties: $BlockBehaviour$Properties$Type)

public "setPlacedBy"(world: $Level$Type, pos: $BlockPos$Type, state: $BlockState$Type, placer: $LivingEntity$Type, stack: $ItemStack$Type): void
public "use"(state: $BlockState$Type, worldIn: $Level$Type, pos: $BlockPos$Type, player: $Player$Type, handIn: $InteractionHand$Type, hit: $BlockHitResult$Type): $InteractionResult
public "getRenderShape"(state: $BlockState$Type): $RenderShape
public "hasAnalogOutputSignal"(state: $BlockState$Type): boolean
public "getAnalogOutputSignal"(blockState: $BlockState$Type, world: $Level$Type, pos: $BlockPos$Type): integer
public "getShape"(state: $BlockState$Type, world: $BlockGetter$Type, pos: $BlockPos$Type, context: $CollisionContext$Type): $VoxelShape
public "animateTick"(state: $BlockState$Type, world: $Level$Type, pos: $BlockPos$Type, random: $RandomSource$Type): void
public "newBlockEntity"(pPos: $BlockPos$Type, pState: $BlockState$Type): $BlockEntity
public "getTicker"<T extends $BlockEntity>(arg0: $Level$Type, arg1: $BlockState$Type, arg2: $BlockEntityType$Type<(T)>): $BlockEntityTicker<(T)>
public "getListener"<T extends $BlockEntity>(arg0: $ServerLevel$Type, arg1: T): $GameEventListener
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GobletBlock$Type = ($GobletBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GobletBlock_ = $GobletBlock$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/map/type/$MapDecorationType" {
import {$HolderSet, $HolderSet$Type} from "packages/net/minecraft/core/$HolderSet"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$CustomMapDecoration, $CustomMapDecoration$Type} from "packages/net/mehvahdjukaar/moonlight/api/map/$CustomMapDecoration"
import {$Structure, $Structure$Type} from "packages/net/minecraft/world/level/levelgen/structure/$Structure"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$MapBlockMarker, $MapBlockMarker$Type} from "packages/net/mehvahdjukaar/moonlight/api/map/markers/$MapBlockMarker"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export interface $MapDecorationType<D extends $CustomMapDecoration, M extends $MapBlockMarker<(D)>> {

 "loadMarkerFromNBT"(arg0: $CompoundTag$Type): M
 "getDefaultMapColor"(): integer
 "createEmptyMarker"(): M
 "isFromWorld"(): boolean
 "getCustomFactoryID"(): $ResourceLocation
 "loadDecorationFromBuffer"(arg0: $FriendlyByteBuf$Type): D
 "getWorldMarkerFromWorld"(arg0: $BlockGetter$Type, arg1: $BlockPos$Type): M
 "getAssociatedStructure"(): $Optional<($HolderSet<($Structure)>)>
}

export namespace $MapDecorationType {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MapDecorationType$Type<D, M> = ($MapDecorationType<(D), (M)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MapDecorationType_<D, M> = $MapDecorationType$Type<(D), (M)>;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/renderers/tiles/$ItemShelfBlockTileRenderer" {
import {$BlockEntityRendererProvider$Context, $BlockEntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/blockentity/$BlockEntityRendererProvider$Context"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$ItemShelfBlockTile, $ItemShelfBlockTile$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$ItemShelfBlockTile"
import {$BlockEntityRenderer, $BlockEntityRenderer$Type} from "packages/net/minecraft/client/renderer/blockentity/$BlockEntityRenderer"

export class $ItemShelfBlockTileRenderer implements $BlockEntityRenderer<($ItemShelfBlockTile)> {

constructor(context: $BlockEntityRendererProvider$Context$Type)

public "render"(tile: $ItemShelfBlockTile$Type, partialTicks: float, matrixStackIn: $PoseStack$Type, bufferIn: $MultiBufferSource$Type, combinedLightIn: integer, combinedOverlayIn: integer): void
public "shouldRender"(arg0: $ItemShelfBlockTile$Type, arg1: $Vec3$Type): boolean
public "shouldRenderOffScreen"(arg0: $ItemShelfBlockTile$Type): boolean
public "getViewDistance"(): integer
get "viewDistance"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ItemShelfBlockTileRenderer$Type = ($ItemShelfBlockTileRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ItemShelfBlockTileRenderer_ = $ItemShelfBlockTileRenderer$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/renderers/entities/layers/$SlimedLayer" {
import {$RenderLayer, $RenderLayer$Type} from "packages/net/minecraft/client/renderer/entity/layers/$RenderLayer"
import {$RenderLayerParent, $RenderLayerParent$Type} from "packages/net/minecraft/client/renderer/entity/$RenderLayerParent"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$EntityModel, $EntityModel$Type} from "packages/net/minecraft/client/model/$EntityModel"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $SlimedLayer<T extends $LivingEntity, M extends $EntityModel<(T)>> extends $RenderLayer<(T), (M)> {

constructor(parent: $RenderLayerParent$Type<(T), (M)>)

public "render"(matrixStackIn: $PoseStack$Type, bufferIn: $MultiBufferSource$Type, packedLightIn: integer, entity: T, limbSwing: float, limbSwingAmount: float, partialTicks: float, ageInTicks: float, netHeadYaw: float, headPitch: float): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SlimedLayer$Type<T, M> = ($SlimedLayer<(T), (M)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SlimedLayer_<T, M> = $SlimedLayer$Type<(T), (M)>;
}}
declare module "packages/net/mehvahdjukaar/moonlight/core/recipe/$ShapedRecipeTemplate" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$JsonObject, $JsonObject$Type} from "packages/com/google/gson/$JsonObject"
import {$ShapedRecipeBuilder$Result, $ShapedRecipeBuilder$Result$Type} from "packages/net/minecraft/data/recipes/$ShapedRecipeBuilder$Result"
import {$IRecipeTemplate, $IRecipeTemplate$Type} from "packages/net/mehvahdjukaar/moonlight/api/resources/recipe/$IRecipeTemplate"
import {$ShapelessRecipeTemplate, $ShapelessRecipeTemplate$Type} from "packages/net/mehvahdjukaar/moonlight/core/recipe/$ShapelessRecipeTemplate"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Ingredient, $Ingredient$Type} from "packages/net/minecraft/world/item/crafting/$Ingredient"
import {$RecipeCategory, $RecipeCategory$Type} from "packages/net/minecraft/data/recipes/$RecipeCategory"
import {$CraftingBookCategory, $CraftingBookCategory$Type} from "packages/net/minecraft/world/item/crafting/$CraftingBookCategory"
import {$BlockType, $BlockType$Type} from "packages/net/mehvahdjukaar/moonlight/api/set/$BlockType"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $ShapedRecipeTemplate implements $IRecipeTemplate<($ShapedRecipeBuilder$Result)> {
readonly "result": $Item
readonly "count": integer
readonly "group": string
readonly "pattern": $List<(string)>
readonly "keys": $Map<(character), ($Ingredient)>
readonly "category": $CraftingBookCategory

constructor(json: $JsonObject$Type)

public "createSimilar"<T extends $BlockType>(originalMat: T, destinationMat: T, unlockItem: $Item$Type, id: string): $ShapedRecipeBuilder$Result
public "addCondition"(condition: any): void
public "getConditions"(): $List<(any)>
public "shouldBeShapeless"(): boolean
public "toShapeless"(): $ShapelessRecipeTemplate
public "createSimilar"<T extends $BlockType>(originalMat: T, destinationMat: T, unlockItem: $Item$Type): $ShapedRecipeBuilder$Result
public static "convertIngredients"<T extends $BlockType>(originalMat: T, destinationMat: T, ing: $Ingredient$Type): $Ingredient
public "determineBookCategory"(recipeCategory: $CraftingBookCategory$Type): $RecipeCategory
get "conditions"(): $List<(any)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ShapedRecipeTemplate$Type = ($ShapedRecipeTemplate);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ShapedRecipeTemplate_ = $ShapedRecipeTemplate$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/blocks/$UrnBlock" {
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$EntityBlock, $EntityBlock$Type} from "packages/net/minecraft/world/level/block/$EntityBlock"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$Projectile, $Projectile$Type} from "packages/net/minecraft/world/entity/projectile/$Projectile"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$PathComputationType, $PathComputationType$Type} from "packages/net/minecraft/world/level/pathfinder/$PathComputationType"
import {$FluidState, $FluidState$Type} from "packages/net/minecraft/world/level/material/$FluidState"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$FallingBlock, $FallingBlock$Type} from "packages/net/minecraft/world/level/block/$FallingBlock"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$List, $List$Type} from "packages/java/util/$List"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$CollisionContext, $CollisionContext$Type} from "packages/net/minecraft/world/phys/shapes/$CollisionContext"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$LootParams$Builder, $LootParams$Builder$Type} from "packages/net/minecraft/world/level/storage/loot/$LootParams$Builder"
import {$BlockEntityTicker, $BlockEntityTicker$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityTicker"
import {$GameEventListener, $GameEventListener$Type} from "packages/net/minecraft/world/level/gameevent/$GameEventListener"

export class $UrnBlock extends $FallingBlock implements $EntityBlock {
static readonly "WATERLOGGED": $BooleanProperty
static readonly "TREASURE": $BooleanProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(properties: $BlockBehaviour$Properties$Type)

public "propagatesSkylightDown"(state: $BlockState$Type, reader: $BlockGetter$Type, pos: $BlockPos$Type): boolean
public "getStateForPlacement"(context: $BlockPlaceContext$Type): $BlockState
public "setPlacedBy"(world: $Level$Type, pos: $BlockPos$Type, state: $BlockState$Type, entity: $LivingEntity$Type, stack: $ItemStack$Type): void
public "playerWillDestroy"(pLevel: $Level$Type, pPos: $BlockPos$Type, pState: $BlockState$Type, pPlayer: $Player$Type): void
public "isPathfindable"(state: $BlockState$Type, reader: $BlockGetter$Type, pos: $BlockPos$Type, pathType: $PathComputationType$Type): boolean
public "onPlace"(state: $BlockState$Type, worldIn: $Level$Type, pos: $BlockPos$Type, oldState: $BlockState$Type, isMoving: boolean): void
public "updateShape"(stateIn: $BlockState$Type, facing: $Direction$Type, facingState: $BlockState$Type, worldIn: $LevelAccessor$Type, currentPos: $BlockPos$Type, facingPos: $BlockPos$Type): $BlockState
public "use"(state: $BlockState$Type, worldIn: $Level$Type, pos: $BlockPos$Type, player: $Player$Type, handIn: $InteractionHand$Type, hit: $BlockHitResult$Type): $InteractionResult
public "hasAnalogOutputSignal"(state: $BlockState$Type): boolean
public "onRemove"(state: $BlockState$Type, world: $Level$Type, pos: $BlockPos$Type, newState: $BlockState$Type, isMoving: boolean): void
public "getFluidState"(state: $BlockState$Type): $FluidState
public "getDrops"(state: $BlockState$Type, builder: $LootParams$Builder$Type): $List<($ItemStack)>
public "getAnalogOutputSignal"(blockState: $BlockState$Type, world: $Level$Type, pos: $BlockPos$Type): integer
public "getShape"(state: $BlockState$Type, world: $BlockGetter$Type, pos: $BlockPos$Type, context: $CollisionContext$Type): $VoxelShape
public "tick"(state: $BlockState$Type, pLevel: $ServerLevel$Type, pos: $BlockPos$Type, pRand: $RandomSource$Type): void
public "spawnAfterBreak"(state: $BlockState$Type, level: $ServerLevel$Type, pos: $BlockPos$Type, stack: $ItemStack$Type, bl: boolean): void
public "onProjectileHit"(pLevel: $Level$Type, pState: $BlockState$Type, pHit: $BlockHitResult$Type, pProjectile: $Projectile$Type): void
public static "spawnExtraBrokenParticles"(state: $BlockState$Type, pos: $BlockPos$Type, level: $Level$Type): void
public "getDustColor"(state: $BlockState$Type, reader: $BlockGetter$Type, pos: $BlockPos$Type): integer
public "newBlockEntity"(pPos: $BlockPos$Type, pState: $BlockState$Type): $BlockEntity
public "getTicker"<T extends $BlockEntity>(arg0: $Level$Type, arg1: $BlockState$Type, arg2: $BlockEntityType$Type<(T)>): $BlockEntityTicker<(T)>
public "getListener"<T extends $BlockEntity>(arg0: $ServerLevel$Type, arg1: T): $GameEventListener
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $UrnBlock$Type = ($UrnBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $UrnBlock_ = $UrnBlock$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/api/$CapturedMobInstance" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $CapturedMobInstance<T extends $Entity> {


public "containerTick"(world: $Level$Type, pos: $BlockPos$Type, entityScale: float, entityData: $CompoundTag$Type): void
public "onPlayerInteract"(world: $Level$Type, pos: $BlockPos$Type, player: $Player$Type, hand: $InteractionHand$Type, entityData: $CompoundTag$Type): $InteractionResult
public "getEntityForRenderer"(): T
public "onContainerWaterlogged"(waterlogged: boolean): void
get "entityForRenderer"(): T
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CapturedMobInstance$Type<T> = ($CapturedMobInstance<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CapturedMobInstance_<T> = $CapturedMobInstance$Type<(T)>;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/$TextUtils" {
import {$Font, $Font$Type} from "packages/net/minecraft/client/gui/$Font"
import {$TextHolder, $TextHolder$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/$TextHolder"
import {$TextUtil$RenderProperties, $TextUtil$RenderProperties$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/util/$TextUtil$RenderProperties"
import {$Vector3f, $Vector3f$Type} from "packages/org/joml/$Vector3f"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$SignText, $SignText$Type} from "packages/net/minecraft/world/level/block/entity/$SignText"
import {$LOD, $LOD$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/util/$LOD"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"

export class $TextUtils {

constructor()

public static "renderTextHolderLines"(textHolder: $TextHolder$Type, ySeparation: integer, font: $Font$Type, poseStack: $PoseStack$Type, buffer: $MultiBufferSource$Type, properties: $TextUtil$RenderProperties$Type): void
public static "renderSignText"(signText: $SignText$Type, font: $Font$Type, poseStack: $PoseStack$Type, buffer: $MultiBufferSource$Type, light: integer, normal: $Vector3f$Type, lod: $LOD$Type, filtered: boolean, lineHeight: integer, lineWidth: integer, colorMult: float): void
public static "renderCredits"(matrixStack: $PoseStack$Type, bufferIn: $MultiBufferSource$Type, light: integer, fontRenderer: $Font$Type, side: float): void
public static "renderBeeMovie"(matrixStack: $PoseStack$Type, bufferIn: $MultiBufferSource$Type, light: integer, fontRenderer: $Font$Type, side: float): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TextUtils$Type = ($TextUtils);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TextUtils_ = $TextUtils$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/renderers/$GlowRenderType" {
import {$RenderStateShard$OverlayStateShard, $RenderStateShard$OverlayStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$OverlayStateShard"
import {$RenderStateShard$TexturingStateShard, $RenderStateShard$TexturingStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$TexturingStateShard"
import {$RenderStateShard$LineStateShard, $RenderStateShard$LineStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$LineStateShard"
import {$RenderStateShard$TextureStateShard, $RenderStateShard$TextureStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$TextureStateShard"
import {$RenderStateShard$EmptyTextureStateShard, $RenderStateShard$EmptyTextureStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$EmptyTextureStateShard"
import {$RenderStateShard$LightmapStateShard, $RenderStateShard$LightmapStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$LightmapStateShard"
import {$RenderStateShard$LayeringStateShard, $RenderStateShard$LayeringStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$LayeringStateShard"
import {$RenderStateShard$WriteMaskStateShard, $RenderStateShard$WriteMaskStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$WriteMaskStateShard"
import {$Runnable, $Runnable$Type} from "packages/java/lang/$Runnable"
import {$RenderType$CompositeRenderType, $RenderType$CompositeRenderType$Type} from "packages/net/minecraft/client/renderer/$RenderType$CompositeRenderType"
import {$VertexFormat, $VertexFormat$Type} from "packages/com/mojang/blaze3d/vertex/$VertexFormat"
import {$RenderType, $RenderType$Type} from "packages/net/minecraft/client/renderer/$RenderType"
import {$RenderStateShard$OutputStateShard, $RenderStateShard$OutputStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$OutputStateShard"
import {$RenderStateShard$ColorLogicStateShard, $RenderStateShard$ColorLogicStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$ColorLogicStateShard"
import {$VertexFormat$Mode, $VertexFormat$Mode$Type} from "packages/com/mojang/blaze3d/vertex/$VertexFormat$Mode"
import {$RenderStateShard$ShaderStateShard, $RenderStateShard$ShaderStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$ShaderStateShard"
import {$RenderStateShard$DepthTestStateShard, $RenderStateShard$DepthTestStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$DepthTestStateShard"
import {$DrawBuffer, $DrawBuffer$Type} from "packages/com/jozufozu/flywheel/backend/instancing/$DrawBuffer"
import {$RenderStateShard$TransparencyStateShard, $RenderStateShard$TransparencyStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$TransparencyStateShard"
import {$RenderStateShard$CullStateShard, $RenderStateShard$CullStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$CullStateShard"

export class $GlowRenderType extends $RenderType {
static readonly "BIG_BUFFER_SIZE": integer
static readonly "MEDIUM_BUFFER_SIZE": integer
static readonly "SMALL_BUFFER_SIZE": integer
static readonly "TRANSIENT_BUFFER_SIZE": integer
static readonly "LINES": $RenderType$CompositeRenderType
static readonly "LINE_STRIP": $RenderType$CompositeRenderType
 "sortOnUpload": boolean
static readonly "VIEW_SCALE_Z_EPSILON": float
static readonly "MAX_ENCHANTMENT_GLINT_SPEED_MILLIS": double
readonly "name": string
 "setupState": $Runnable
static readonly "NO_TRANSPARENCY": $RenderStateShard$TransparencyStateShard
static readonly "ADDITIVE_TRANSPARENCY": $RenderStateShard$TransparencyStateShard
static readonly "LIGHTNING_TRANSPARENCY": $RenderStateShard$TransparencyStateShard
static readonly "GLINT_TRANSPARENCY": $RenderStateShard$TransparencyStateShard
static readonly "CRUMBLING_TRANSPARENCY": $RenderStateShard$TransparencyStateShard
static readonly "TRANSLUCENT_TRANSPARENCY": $RenderStateShard$TransparencyStateShard
static readonly "NO_SHADER": $RenderStateShard$ShaderStateShard
static readonly "POSITION_COLOR_LIGHTMAP_SHADER": $RenderStateShard$ShaderStateShard
static readonly "POSITION_SHADER": $RenderStateShard$ShaderStateShard
static readonly "POSITION_COLOR_TEX_SHADER": $RenderStateShard$ShaderStateShard
static readonly "POSITION_TEX_SHADER": $RenderStateShard$ShaderStateShard
static readonly "POSITION_COLOR_TEX_LIGHTMAP_SHADER": $RenderStateShard$ShaderStateShard
static readonly "POSITION_COLOR_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_SOLID_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_CUTOUT_MIPPED_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_CUTOUT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_TRANSLUCENT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_TRANSLUCENT_MOVING_BLOCK_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_TRANSLUCENT_NO_CRUMBLING_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ARMOR_CUTOUT_NO_CULL_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_SOLID_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_CUTOUT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_CUTOUT_NO_CULL_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_CUTOUT_NO_CULL_Z_OFFSET_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ITEM_ENTITY_TRANSLUCENT_CULL_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_TRANSLUCENT_CULL_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_TRANSLUCENT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_TRANSLUCENT_EMISSIVE_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_SMOOTH_CUTOUT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_BEACON_BEAM_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_DECAL_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_NO_OUTLINE_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_SHADOW_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_ALPHA_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_EYES_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENERGY_SWIRL_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_LEASH_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_WATER_MASK_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_OUTLINE_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ARMOR_GLINT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ARMOR_ENTITY_GLINT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_GLINT_TRANSLUCENT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_GLINT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_GLINT_DIRECT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_GLINT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_GLINT_DIRECT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_CRUMBLING_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_TEXT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_TEXT_BACKGROUND_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_TEXT_INTENSITY_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_TEXT_SEE_THROUGH_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_TEXT_BACKGROUND_SEE_THROUGH_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_TEXT_INTENSITY_SEE_THROUGH_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_LIGHTNING_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_TRIPWIRE_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_END_PORTAL_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_END_GATEWAY_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_LINES_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_GUI_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_GUI_OVERLAY_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_GUI_TEXT_HIGHLIGHT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_GUI_GHOST_RECIPE_OVERLAY_SHADER": $RenderStateShard$ShaderStateShard
static readonly "BLOCK_SHEET_MIPPED": $RenderStateShard$TextureStateShard
static readonly "BLOCK_SHEET": $RenderStateShard$TextureStateShard
static readonly "NO_TEXTURE": $RenderStateShard$EmptyTextureStateShard
static readonly "DEFAULT_TEXTURING": $RenderStateShard$TexturingStateShard
static readonly "GLINT_TEXTURING": $RenderStateShard$TexturingStateShard
static readonly "ENTITY_GLINT_TEXTURING": $RenderStateShard$TexturingStateShard
static readonly "LIGHTMAP": $RenderStateShard$LightmapStateShard
static readonly "NO_LIGHTMAP": $RenderStateShard$LightmapStateShard
static readonly "OVERLAY": $RenderStateShard$OverlayStateShard
static readonly "NO_OVERLAY": $RenderStateShard$OverlayStateShard
static readonly "CULL": $RenderStateShard$CullStateShard
static readonly "NO_CULL": $RenderStateShard$CullStateShard
static readonly "NO_DEPTH_TEST": $RenderStateShard$DepthTestStateShard
static readonly "EQUAL_DEPTH_TEST": $RenderStateShard$DepthTestStateShard
static readonly "LEQUAL_DEPTH_TEST": $RenderStateShard$DepthTestStateShard
static readonly "GREATER_DEPTH_TEST": $RenderStateShard$DepthTestStateShard
static readonly "COLOR_DEPTH_WRITE": $RenderStateShard$WriteMaskStateShard
static readonly "COLOR_WRITE": $RenderStateShard$WriteMaskStateShard
static readonly "DEPTH_WRITE": $RenderStateShard$WriteMaskStateShard
static readonly "NO_LAYERING": $RenderStateShard$LayeringStateShard
static readonly "POLYGON_OFFSET_LAYERING": $RenderStateShard$LayeringStateShard
static readonly "VIEW_OFFSET_Z_LAYERING": $RenderStateShard$LayeringStateShard
static readonly "MAIN_TARGET": $RenderStateShard$OutputStateShard
static readonly "OUTLINE_TARGET": $RenderStateShard$OutputStateShard
static readonly "TRANSLUCENT_TARGET": $RenderStateShard$OutputStateShard
static readonly "PARTICLES_TARGET": $RenderStateShard$OutputStateShard
static readonly "WEATHER_TARGET": $RenderStateShard$OutputStateShard
static readonly "CLOUDS_TARGET": $RenderStateShard$OutputStateShard
static readonly "ITEM_ENTITY_TARGET": $RenderStateShard$OutputStateShard
static readonly "DEFAULT_LINE": $RenderStateShard$LineStateShard
static readonly "NO_COLOR_LOGIC": $RenderStateShard$ColorLogicStateShard
static readonly "OR_REVERSE_COLOR_LOGIC": $RenderStateShard$ColorLogicStateShard

constructor(string: string, vertexFormat: $VertexFormat$Type, mode: $VertexFormat$Mode$Type, i: integer, bl: boolean, bl2: boolean, runnable: $Runnable$Type, runnable2: $Runnable$Type)

public static "getDrawBuffer"(arg0: $RenderType$Type): $DrawBuffer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GlowRenderType$Type = ($GlowRenderType);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GlowRenderType_ = $GlowRenderType$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/events/overrides/$WrittenBookHackBehavior" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$ItemUseOnBlockOverride, $ItemUseOnBlockOverride$Type} from "packages/net/mehvahdjukaar/supplementaries/common/events/overrides/$ItemUseOnBlockOverride"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $WrittenBookHackBehavior implements $ItemUseOnBlockOverride {


public "isEnabled"(): boolean
public "appliesToItem"(item: $Item$Type): boolean
public "altersWorld"(): boolean
public "tryPerformingAction"(world: $Level$Type, player: $Player$Type, hand: $InteractionHand$Type, stack: $ItemStack$Type, hit: $BlockHitResult$Type): $InteractionResult
public "getTooltip"(): $MutableComponent
public "placesBlock"(): boolean
public "shouldBlockMapToItem"(item: $Item$Type): boolean
get "enabled"(): boolean
get "tooltip"(): $MutableComponent
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WrittenBookHackBehavior$Type = ($WrittenBookHackBehavior);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WrittenBookHackBehavior_ = $WrittenBookHackBehavior$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/misc/$MapLightHandler" {
import {$MapLightHandler$LightData, $MapLightHandler$LightData$Type} from "packages/net/mehvahdjukaar/supplementaries/common/misc/$MapLightHandler$LightData"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$CustomMapData$Type, $CustomMapData$Type$Type} from "packages/net/mehvahdjukaar/moonlight/api/map/$CustomMapData$Type"
import {$MapItemSavedData, $MapItemSavedData$Type} from "packages/net/minecraft/world/level/saveddata/maps/$MapItemSavedData"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$NativeImage, $NativeImage$Type} from "packages/com/mojang/blaze3d/platform/$NativeImage"
import {$ResourceKey, $ResourceKey$Type} from "packages/net/minecraft/resources/$ResourceKey"
import {$Object2IntMap, $Object2IntMap$Type} from "packages/it/unimi/dsi/fastutil/objects/$Object2IntMap"

export class $MapLightHandler {
static readonly "LIGHT_DATA": $CustomMapData$Type<($MapLightHandler$LightData)>

constructor()

public static "init"(): void
public static "isActive"(): boolean
public static "setLightMap"(map: $NativeImage$Type): void
public static "setActive"(on: boolean): void
public static "getLightData"(data: $MapItemSavedData$Type): $MapLightHandler$LightData
public static "setAmbientLight"(ambientLight: $Object2IntMap$Type<($ResourceKey$Type<($Level$Type)>)>): void
public static "sendDataToClient"(player: $ServerPlayer$Type): void
get "active"(): boolean
set "lightMap"(value: $NativeImage$Type)
set "active"(value: boolean)
set "ambientLight"(value: $Object2IntMap$Type<($ResourceKey$Type<($Level$Type)>)>)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MapLightHandler$Type = ($MapLightHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MapLightHandler_ = $MapLightHandler$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/items/$BubbleBlockItem" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$BlockItem, $BlockItem$Type} from "packages/net/minecraft/world/item/$BlockItem"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$AdditionalItemPlacement, $AdditionalItemPlacement$Type} from "packages/net/mehvahdjukaar/moonlight/api/item/additional_placements/$AdditionalItemPlacement"
import {$ICustomItemRendererProvider, $ICustomItemRendererProvider$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/$ICustomItemRendererProvider"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$ItemStackRenderer, $ItemStackRenderer$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/$ItemStackRenderer"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $BubbleBlockItem extends $BlockItem implements $ICustomItemRendererProvider {
static readonly "BLOCK_ENTITY_TAG": string
static readonly "BLOCK_STATE_TAG": string
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(block: $Block$Type, properties: $Item$Properties$Type)

public "getRendererFactory"(): $Supplier<($ItemStackRenderer)>
/**
 * 
 * @deprecated
 */
public "registerFabricRenderer"(): void
public "asItem"(): $Item
public "moonlight$addAdditionalBehavior"(arg0: $AdditionalItemPlacement$Type): void
public "moonlight$getAdditionalBehavior"(): $AdditionalItemPlacement
public "moonlight$getClientAnimationExtension"(): any
public "moonlight$setClientAnimationExtension"(arg0: any): void
get "rendererFactory"(): $Supplier<($ItemStackRenderer)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BubbleBlockItem$Type = ($BubbleBlockItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BubbleBlockItem_ = $BubbleBlockItem$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/screens/widgets/$DyeBlackBoardButton" {
import {$BlackBoardScreen, $BlackBoardScreen$Type} from "packages/net/mehvahdjukaar/supplementaries/client/screens/$BlackBoardScreen"
import {$BlackboardButton, $BlackboardButton$Type} from "packages/net/mehvahdjukaar/supplementaries/client/screens/widgets/$BlackboardButton"

export class $DyeBlackBoardButton extends $BlackboardButton {
static readonly "SIZE": integer
readonly "size": integer
readonly "x": integer
readonly "y": integer

constructor(screen: $BlackBoardScreen$Type, x: integer, y: integer, color: byte)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DyeBlackBoardButton$Type = ($DyeBlackBoardButton);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DyeBlackBoardButton_ = $DyeBlackBoardButton$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$SpringLauncherArmBlockTile" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$AABB, $AABB$Type} from "packages/net/minecraft/world/phys/$AABB"

export class $SpringLauncherArmBlockTile extends $BlockEntity {
 "blockState": $BlockState

constructor(pos: $BlockPos$Type, state: $BlockState$Type)

public static "tick"(level: $Level$Type, pos: $BlockPos$Type, state: $BlockState$Type, tile: $SpringLauncherArmBlockTile$Type): void
public "retractOnFallOn"(): void
public "getAdjustedBoundingBox"(): $AABB
public "getAge"(): integer
public "load"(compound: $CompoundTag$Type): void
public "m_183515_"(compound: $CompoundTag$Type): void
public "getDirection"(): $Direction
public "getExtending"(): boolean
public "getRenderOffset"(partialTicks: float): double
public "getUpdateTag"(): $CompoundTag
get "adjustedBoundingBox"(): $AABB
get "age"(): integer
get "direction"(): $Direction
get "extending"(): boolean
get "updateTag"(): $CompoundTag
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SpringLauncherArmBlockTile$Type = ($SpringLauncherArmBlockTile);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SpringLauncherArmBlockTile_ = $SpringLauncherArmBlockTile$Type;
}}
declare module "packages/net/mehvahdjukaar/dummmmmmy/forge/$DummmmmmyForge" {
import {$MobSpawnEvent$FinalizeSpawn, $MobSpawnEvent$FinalizeSpawn$Type} from "packages/net/minecraftforge/event/entity/living/$MobSpawnEvent$FinalizeSpawn"
import {$EntityJoinLevelEvent, $EntityJoinLevelEvent$Type} from "packages/net/minecraftforge/event/entity/$EntityJoinLevelEvent"
import {$CriticalHitEvent, $CriticalHitEvent$Type} from "packages/net/minecraftforge/event/entity/player/$CriticalHitEvent"

export class $DummmmmmyForge {

constructor()

public "onCheckSpawn"(event: $MobSpawnEvent$FinalizeSpawn$Type): void
public "onEntityJoinWorld"(event: $EntityJoinLevelEvent$Type): void
public "onEntityCriticalHit"(event: $CriticalHitEvent$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DummmmmmyForge$Type = ($DummmmmmyForge);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DummmmmmyForge_ = $DummmmmmyForge$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/block/$ItemDisplayTile" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$LazyOptional, $LazyOptional$Type} from "packages/net/minecraftforge/common/util/$LazyOptional"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$WorldlyContainer, $WorldlyContainer$Type} from "packages/net/minecraft/world/$WorldlyContainer"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ClientboundBlockEntityDataPacket, $ClientboundBlockEntityDataPacket$Type} from "packages/net/minecraft/network/protocol/game/$ClientboundBlockEntityDataPacket"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Capability, $Capability$Type} from "packages/net/minecraftforge/common/capabilities/$Capability"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$AbstractContainerMenu, $AbstractContainerMenu$Type} from "packages/net/minecraft/world/inventory/$AbstractContainerMenu"
import {$IOwnerProtected, $IOwnerProtected$Type} from "packages/net/mehvahdjukaar/moonlight/api/block/$IOwnerProtected"
import {$LockCode, $LockCode$Type} from "packages/net/minecraft/world/$LockCode"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"
import {$RandomizableContainerBlockEntity, $RandomizableContainerBlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$RandomizableContainerBlockEntity"

export class $ItemDisplayTile extends $RandomizableContainerBlockEntity implements $WorldlyContainer, $IOwnerProtected {
static readonly "LOOT_TABLE_TAG": string
static readonly "LOOT_TABLE_SEED_TAG": string
 "lootTable": $ResourceLocation
 "lootTableSeed": long
 "lockKey": $LockCode
 "blockState": $BlockState


public "getOwner"(): $UUID
public "setOwner"(owner: $UUID$Type): void
public "setChanged"(): void
public "updateTileOnInventoryChanged"(): void
public "needsToUpdateClientWhenChanged"(): boolean
public "updateClientVisualsOnLoad"(): void
public "getContainerSize"(): integer
public "canTakeItemThroughFace"(index: integer, stack: $ItemStack$Type, direction: $Direction$Type): boolean
public "getSlotsForFace"(side: $Direction$Type): (integer)[]
public "canPlaceItemThroughFace"(index: integer, stack: $ItemStack$Type, direction: $Direction$Type): boolean
public "interact"(player: $Player$Type, handIn: $InteractionHand$Type): $InteractionResult
public "interact"(player: $Player$Type, handIn: $InteractionHand$Type, slot: integer): $InteractionResult
public "getUpdatePacket"(): $ClientboundBlockEntityDataPacket
public "getCapability"(capability: $Capability$Type<(any)>, facing: $Direction$Type): $LazyOptional<(any)>
public "load"(compound: $CompoundTag$Type): void
public "m_183515_"(compound: $CompoundTag$Type): void
public "createMenu"(i: integer, inventory: $Inventory$Type, player: $Player$Type): $AbstractContainerMenu
public "getDisplayedItem"(): $ItemStack
public "getMaxStackSize"(): integer
public "canPlaceItem"(index: integer, stack: $ItemStack$Type): boolean
/**
 * 
 * @deprecated
 */
public "m_6555_"(id: integer, player: $Inventory$Type): $AbstractContainerMenu
public "m_6520_"(stacks: $NonNullList$Type<($ItemStack$Type)>): void
public "onItemRemoved"(player: $Player$Type, stack: $ItemStack$Type, slot: integer): void
public "setDisplayedItem"(stack: $ItemStack$Type): void
public "onItemAdded"(player: $Player$Type, stack: $ItemStack$Type, slot: integer): void
public "getAddItemSound"(): $SoundEvent
public "getUpdateTag"(): $CompoundTag
public "setRemoved"(): void
public "isPublic"(): boolean
public "isOwnedBy"(player: $Player$Type): boolean
public "isAccessibleBy"(player: $Player$Type): boolean
public "loadOwner"(tag: $CompoundTag$Type): void
public "saveOwner"(tag: $CompoundTag$Type): void
public "isNotOwnedBy"(player: $Player$Type): boolean
public static "stillValidBlockEntity"(arg0: $BlockEntity$Type, arg1: $Player$Type, arg2: integer): boolean
public static "stillValidBlockEntity"(arg0: $BlockEntity$Type, arg1: $Player$Type): boolean
public static "tryClear"(arg0: any): void
get "owner"(): $UUID
set "owner"(value: $UUID$Type)
get "containerSize"(): integer
get "updatePacket"(): $ClientboundBlockEntityDataPacket
get "displayedItem"(): $ItemStack
get "maxStackSize"(): integer
set "displayedItem"(value: $ItemStack$Type)
get "addItemSound"(): $SoundEvent
get "updateTag"(): $CompoundTag
get "public"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ItemDisplayTile$Type = ($ItemDisplayTile);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ItemDisplayTile_ = $ItemDisplayTile$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/block_models/$FaucetBakedModel" {
import {$ModelData, $ModelData$Type} from "packages/net/minecraftforge/client/model/data/$ModelData"
import {$ModelState, $ModelState$Type} from "packages/net/minecraft/client/resources/model/$ModelState"
import {$ItemTransforms, $ItemTransforms$Type} from "packages/net/minecraft/client/renderer/block/model/$ItemTransforms"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$ExtraModelData, $ExtraModelData$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$ExtraModelData"
import {$CustomBakedModel, $CustomBakedModel$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$CustomBakedModel"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BakedModel, $BakedModel$Type} from "packages/net/minecraft/client/resources/model/$BakedModel"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$RenderType, $RenderType$Type} from "packages/net/minecraft/client/renderer/$RenderType"
import {$ItemOverrides, $ItemOverrides$Type} from "packages/net/minecraft/client/renderer/block/model/$ItemOverrides"
import {$ItemDisplayContext, $ItemDisplayContext$Type} from "packages/net/minecraft/world/item/$ItemDisplayContext"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$List, $List$Type} from "packages/java/util/$List"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$ChunkRenderTypeSet, $ChunkRenderTypeSet$Type} from "packages/net/minecraftforge/client/$ChunkRenderTypeSet"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockAndTintGetter, $BlockAndTintGetter$Type} from "packages/net/minecraft/world/level/$BlockAndTintGetter"
import {$BakedQuad, $BakedQuad$Type} from "packages/net/minecraft/client/renderer/block/model/$BakedQuad"
import {$TextureAtlasSprite, $TextureAtlasSprite$Type} from "packages/net/minecraft/client/renderer/texture/$TextureAtlasSprite"

export class $FaucetBakedModel implements $CustomBakedModel {

constructor(goblet: $BakedModel$Type, liquid: $BakedModel$Type, rotation: $ModelState$Type)

public "usesBlockLight"(): boolean
public "isGui3d"(): boolean
public "getBlockQuads"(state: $BlockState$Type, side: $Direction$Type, rand: $RandomSource$Type, renderType: $RenderType$Type, data: $ExtraModelData$Type): $List<($BakedQuad)>
public "getBlockParticle"(extraModelData: $ExtraModelData$Type): $TextureAtlasSprite
public "isCustomRenderer"(): boolean
public "getOverrides"(): $ItemOverrides
public "getTransforms"(): $ItemTransforms
public "useAmbientOcclusion"(): boolean
public "getParticleIcon"(): $TextureAtlasSprite
public "getQuads"(state: $BlockState$Type, side: $Direction$Type, rand: $RandomSource$Type): $List<(any)>
public "getQuads"(state: $BlockState$Type, side: $Direction$Type, rand: $RandomSource$Type, modelData: $ModelData$Type, type: $RenderType$Type): $List<(any)>
public "getParticleIcon"(data: $ModelData$Type): $TextureAtlasSprite
public "getModelData"(level: $BlockAndTintGetter$Type, pos: $BlockPos$Type, state: $BlockState$Type, modelData: $ModelData$Type): $ModelData
public "getModelData"(originalData: $ExtraModelData$Type, stack: $ItemStack$Type): $ExtraModelData
public "getModelData"(tileData: $ExtraModelData$Type, pos: $BlockPos$Type, state: $BlockState$Type, level: $BlockAndTintGetter$Type): $ExtraModelData
public "useAmbientOcclusion"(arg0: $BlockState$Type, arg1: $RenderType$Type): boolean
public "useAmbientOcclusion"(arg0: $BlockState$Type): boolean
public "getRenderTypes"(arg0: $ItemStack$Type, arg1: boolean): $List<($RenderType)>
public "getRenderTypes"(arg0: $BlockState$Type, arg1: $RandomSource$Type, arg2: $ModelData$Type): $ChunkRenderTypeSet
public "getRenderPasses"(arg0: $ItemStack$Type, arg1: boolean): $List<($BakedModel)>
public "applyTransform"(arg0: $ItemDisplayContext$Type, arg1: $PoseStack$Type, arg2: boolean): $BakedModel
public "useAmbientOcclusionWithLightEmission"(arg0: $BlockState$Type, arg1: $RenderType$Type): boolean
get "gui3d"(): boolean
get "customRenderer"(): boolean
get "overrides"(): $ItemOverrides
get "transforms"(): $ItemTransforms
get "particleIcon"(): $TextureAtlasSprite
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FaucetBakedModel$Type = ($FaucetBakedModel);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FaucetBakedModel_ = $FaucetBakedModel$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/mixins/$SignRendererAccessor" {
import {$Material, $Material$Type} from "packages/net/minecraft/client/resources/model/$Material"
import {$WoodType, $WoodType$Type} from "packages/net/minecraft/world/level/block/state/properties/$WoodType"

export interface $SignRendererAccessor {

 "invokeGetSignMaterial"(arg0: $WoodType$Type): $Material

(arg0: $WoodType$Type): $Material
}

export namespace $SignRendererAccessor {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SignRendererAccessor$Type = ($SignRendererAccessor);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SignRendererAccessor_ = $SignRendererAccessor$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/platform/$PlatHelper$Platform" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$Runnable, $Runnable$Type} from "packages/java/lang/$Runnable"

export class $PlatHelper$Platform extends $Enum<($PlatHelper$Platform)> {
static readonly "FORGE": $PlatHelper$Platform
static readonly "FABRIC": $PlatHelper$Platform


public static "values"(): ($PlatHelper$Platform)[]
public static "valueOf"(name: string): $PlatHelper$Platform
public "ifFabric"(runnable: $Runnable$Type): void
public "isFabric"(): boolean
public "isForge"(): boolean
public "isQuilt"(): boolean
public "ifForge"(runnable: $Runnable$Type): void
get "fabric"(): boolean
get "forge"(): boolean
get "quilt"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PlatHelper$Platform$Type = (("forge") | ("fabric")) | ($PlatHelper$Platform);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PlatHelper$Platform_ = $PlatHelper$Platform$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/renderers/color/$FluidColor" {
import {$BlockColor, $BlockColor$Type} from "packages/net/minecraft/client/color/block/$BlockColor"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$ItemColor, $ItemColor$Type} from "packages/net/minecraft/client/color/item/$ItemColor"
import {$BlockAndTintGetter, $BlockAndTintGetter$Type} from "packages/net/minecraft/world/level/$BlockAndTintGetter"

export class $FluidColor implements $BlockColor, $ItemColor {

constructor()

public "getColor"(itemStack: $ItemStack$Type, i: integer): integer
public "getColor"(state: $BlockState$Type, level: $BlockAndTintGetter$Type, pos: $BlockPos$Type, tint: integer): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FluidColor$Type = ($FluidColor);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FluidColor_ = $FluidColor$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/worldgen/$WaySignStructure" {
import {$RegistryAccess, $RegistryAccess$Type} from "packages/net/minecraft/core/$RegistryAccess"
import {$StructureTemplatePool, $StructureTemplatePool$Type} from "packages/net/minecraft/world/level/levelgen/structure/pools/$StructureTemplatePool"
import {$Holder, $Holder$Type} from "packages/net/minecraft/core/$Holder"
import {$Structure, $Structure$Type} from "packages/net/minecraft/world/level/levelgen/structure/$Structure"
import {$StructureType, $StructureType$Type} from "packages/net/minecraft/world/level/levelgen/structure/$StructureType"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$Structure$GenerationStub, $Structure$GenerationStub$Type} from "packages/net/minecraft/world/level/levelgen/structure/$Structure$GenerationStub"
import {$Structure$GenerationContext, $Structure$GenerationContext$Type} from "packages/net/minecraft/world/level/levelgen/structure/$Structure$GenerationContext"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Structure$StructureSettings, $Structure$StructureSettings$Type} from "packages/net/minecraft/world/level/levelgen/structure/$Structure$StructureSettings"
import {$Codec, $Codec$Type} from "packages/com/mojang/serialization/$Codec"

export class $WaySignStructure extends $Structure {
static readonly "CODEC": $Codec<($WaySignStructure)>
static readonly "DIRECT_CODEC": $Codec<($Structure)>

constructor(config: $Structure$StructureSettings$Type, startPool: $Holder$Type<($StructureTemplatePool$Type)>, startJigsawName: $Optional$Type<($ResourceLocation$Type)>, minY: integer, maxY: integer)

public static "clearCache"(): void
public static "recomputeValidStructureCache"(access: $RegistryAccess$Type): void
public "type"(): $StructureType<(any)>
public "m_214086_"(context: $Structure$GenerationContext$Type): $Optional<($Structure$GenerationStub)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WaySignStructure$Type = ($WaySignStructure);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WaySignStructure_ = $WaySignStructure$Type;
}}
declare module "packages/net/mehvahdjukaar/modelfix/moonlight_configs/$ConfigType" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $ConfigType extends $Enum<($ConfigType)> {
static readonly "COMMON": $ConfigType
static readonly "CLIENT": $ConfigType


public static "values"(): ($ConfigType)[]
public static "valueOf"(name: string): $ConfigType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ConfigType$Type = (("common") | ("client")) | ($ConfigType);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ConfigType_ = $ConfigType$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/blocks/$NoticeBoardBlock" {
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$EntityBlock, $EntityBlock$Type} from "packages/net/minecraft/world/level/block/$EntityBlock"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Mirror, $Mirror$Type} from "packages/net/minecraft/world/level/block/$Mirror"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"
import {$DirectionProperty, $DirectionProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$DirectionProperty"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$Rotation, $Rotation$Type} from "packages/net/minecraft/world/level/block/$Rotation"
import {$MenuProvider, $MenuProvider$Type} from "packages/net/minecraft/world/$MenuProvider"
import {$BlockEntityTicker, $BlockEntityTicker$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityTicker"
import {$GameEventListener, $GameEventListener$Type} from "packages/net/minecraft/world/level/gameevent/$GameEventListener"

export class $NoticeBoardBlock extends $Block implements $EntityBlock {
static readonly "FACING": $DirectionProperty
static readonly "HAS_BOOK": $BooleanProperty
static readonly "CULLED": $BooleanProperty
static readonly "POWERED": $BooleanProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(properties: $BlockBehaviour$Properties$Type)

public "getStateForPlacement"(context: $BlockPlaceContext$Type): $BlockState
public "setPlacedBy"(worldIn: $Level$Type, pos: $BlockPos$Type, state: $BlockState$Type, placer: $LivingEntity$Type, stack: $ItemStack$Type): void
public "neighborChanged"(state: $BlockState$Type, world: $Level$Type, pos: $BlockPos$Type, pBlock: $Block$Type, pFromPos: $BlockPos$Type, pIsMoving: boolean): void
public "updateShape"(state: $BlockState$Type, facing: $Direction$Type, facingState: $BlockState$Type, level: $LevelAccessor$Type, currentPos: $BlockPos$Type, facingPos: $BlockPos$Type): $BlockState
public "use"(state: $BlockState$Type, worldIn: $Level$Type, pos: $BlockPos$Type, player: $Player$Type, handIn: $InteractionHand$Type, hit: $BlockHitResult$Type): $InteractionResult
public "hasAnalogOutputSignal"(state: $BlockState$Type): boolean
public "onRemove"(state: $BlockState$Type, level: $Level$Type, pos: $BlockPos$Type, newState: $BlockState$Type, isMoving: boolean): void
public "rotate"(state: $BlockState$Type, rot: $Rotation$Type): $BlockState
public "mirror"(state: $BlockState$Type, mirrorIn: $Mirror$Type): $BlockState
public "getMenuProvider"(state: $BlockState$Type, worldIn: $Level$Type, pos: $BlockPos$Type): $MenuProvider
public "getAnalogOutputSignal"(blockState: $BlockState$Type, world: $Level$Type, pos: $BlockPos$Type): integer
public "newBlockEntity"(pPos: $BlockPos$Type, pState: $BlockState$Type): $BlockEntity
public "getTicker"<T extends $BlockEntity>(arg0: $Level$Type, arg1: $BlockState$Type, arg2: $BlockEntityType$Type<(T)>): $BlockEntityTicker<(T)>
public "getListener"<T extends $BlockEntity>(arg0: $ServerLevel$Type, arg1: T): $GameEventListener
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $NoticeBoardBlock$Type = ($NoticeBoardBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $NoticeBoardBlock_ = $NoticeBoardBlock$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/worldgen/$BasaltAshFeature$Config" {
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$BlockStateProvider, $BlockStateProvider$Type} from "packages/net/minecraft/world/level/levelgen/feature/stateproviders/$BlockStateProvider"
import {$ConfiguredFeature, $ConfiguredFeature$Type} from "packages/net/minecraft/world/level/levelgen/feature/$ConfiguredFeature"
import {$RuleTest, $RuleTest$Type} from "packages/net/minecraft/world/level/levelgen/structure/templatesystem/$RuleTest"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$Stream, $Stream$Type} from "packages/java/util/stream/$Stream"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$FeatureConfiguration, $FeatureConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$FeatureConfiguration"
import {$Codec, $Codec$Type} from "packages/com/mojang/serialization/$Codec"

export class $BasaltAshFeature$Config extends $Record implements $FeatureConfiguration {
static readonly "CODEC": $Codec<($BasaltAshFeature$Config)>

constructor(tries: integer, xzSpread: integer, ySpread: integer, target: $RuleTest$Type, ash: $BlockStateProvider$Type, belowAsh: $Optional$Type<($BlockState$Type)>)

public "equals"(o: any): boolean
public "target"(): $RuleTest
public "toString"(): string
public "hashCode"(): integer
public "tries"(): integer
public "belowAsh"(): $Optional<($BlockState)>
public "xzSpread"(): integer
public "ySpread"(): integer
public "ash"(): $BlockStateProvider
public "getFeatures"(): $Stream<($ConfiguredFeature<(any), (any)>)>
get "features"(): $Stream<($ConfiguredFeature<(any), (any)>)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BasaltAshFeature$Config$Type = ($BasaltAshFeature$Config);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BasaltAshFeature$Config_ = $BasaltAshFeature$Config$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/items/crafting/$TrappedPresentRecipe" {
import {$RegistryAccess, $RegistryAccess$Type} from "packages/net/minecraft/core/$RegistryAccess"
import {$RecipeSerializer, $RecipeSerializer$Type} from "packages/net/minecraft/world/item/crafting/$RecipeSerializer"
import {$CustomRecipe, $CustomRecipe$Type} from "packages/net/minecraft/world/item/crafting/$CustomRecipe"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$CraftingContainer, $CraftingContainer$Type} from "packages/net/minecraft/world/inventory/$CraftingContainer"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$CraftingBookCategory, $CraftingBookCategory$Type} from "packages/net/minecraft/world/item/crafting/$CraftingBookCategory"

export class $TrappedPresentRecipe extends $CustomRecipe {

constructor(resourceLocation: $ResourceLocation$Type, category: $CraftingBookCategory$Type)

public "matches"(craftingContainer: $CraftingContainer$Type, level: $Level$Type): boolean
public "canCraftInDimensions"(x: integer, y: integer): boolean
public "getSerializer"(): $RecipeSerializer<(any)>
public "assemble"(craftingContainer: $CraftingContainer$Type, registryAccess: $RegistryAccess$Type): $ItemStack
get "serializer"(): $RecipeSerializer<(any)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TrappedPresentRecipe$Type = ($TrappedPresentRecipe);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TrappedPresentRecipe_ = $TrappedPresentRecipe$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/client/renderer/$FallingBlockRendererGeneric" {
import {$EntityRendererProvider$Context, $EntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRendererProvider$Context"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$EntityRenderer, $EntityRenderer$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRenderer"
import {$FallingBlockEntity, $FallingBlockEntity$Type} from "packages/net/minecraft/world/entity/item/$FallingBlockEntity"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $FallingBlockRendererGeneric<T extends $FallingBlockEntity> extends $EntityRenderer<(T)> {
 "shadowRadius": float

constructor(context: $EntityRendererProvider$Context$Type)

public "render"(entity: T, pEntityYaw: float, pPartialTicks: float, poseStack: $PoseStack$Type, buffer: $MultiBufferSource$Type, pPackedLight: integer): void
public "getTextureLocation"(pEntity: T): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FallingBlockRendererGeneric$Type<T> = ($FallingBlockRendererGeneric<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FallingBlockRendererGeneric_<T> = $FallingBlockRendererGeneric$Type<(T)>;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/platform/$ClientHelper" {
import {$ClientHelper$SpecialModelEvent, $ClientHelper$SpecialModelEvent$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/$ClientHelper$SpecialModelEvent"
import {$PreparableReloadListener, $PreparableReloadListener$Type} from "packages/net/minecraft/server/packs/resources/$PreparableReloadListener"
import {$Fluid, $Fluid$Type} from "packages/net/minecraft/world/level/material/$Fluid"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$BakedModel, $BakedModel$Type} from "packages/net/minecraft/client/resources/model/$BakedModel"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Runnable, $Runnable$Type} from "packages/java/lang/$Runnable"
import {$ClientHelper$ParticleEvent, $ClientHelper$ParticleEvent$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/$ClientHelper$ParticleEvent"
import {$RenderType, $RenderType$Type} from "packages/net/minecraft/client/renderer/$RenderType"
import {$ClientHelper$TooltipComponentEvent, $ClientHelper$TooltipComponentEvent$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/$ClientHelper$TooltipComponentEvent"
import {$ClientHelper$EntityRendererEvent, $ClientHelper$EntityRendererEvent$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/$ClientHelper$EntityRendererEvent"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$ClientHelper$ModelLayerEvent, $ClientHelper$ModelLayerEvent$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/$ClientHelper$ModelLayerEvent"
import {$ClientHelper$KeyBindEvent, $ClientHelper$KeyBindEvent$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/$ClientHelper$KeyBindEvent"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$UnbakedModel, $UnbakedModel$Type} from "packages/net/minecraft/client/resources/model/$UnbakedModel"
import {$ClientHelper$ItemColorEvent, $ClientHelper$ItemColorEvent$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/$ClientHelper$ItemColorEvent"
import {$Material, $Material$Type} from "packages/net/minecraft/client/resources/model/$Material"
import {$BlockModel, $BlockModel$Type} from "packages/net/minecraft/client/renderer/block/model/$BlockModel"
import {$JsonElement, $JsonElement$Type} from "packages/com/google/gson/$JsonElement"
import {$Path, $Path$Type} from "packages/java/nio/file/$Path"
import {$ClientHelper$ModelLoaderEvent, $ClientHelper$ModelLoaderEvent$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/$ClientHelper$ModelLoaderEvent"
import {$ClientHelper$BlockEntityRendererEvent, $ClientHelper$BlockEntityRendererEvent$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/$ClientHelper$BlockEntityRendererEvent"
import {$ClientHelper$ItemDecoratorEvent, $ClientHelper$ItemDecoratorEvent$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/$ClientHelper$ItemDecoratorEvent"
import {$ClientHelper$BlockColorEvent, $ClientHelper$BlockColorEvent$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/$ClientHelper$BlockColorEvent"
import {$ModelManager, $ModelManager$Type} from "packages/net/minecraft/client/resources/model/$ModelManager"
import {$TextureAtlasSprite, $TextureAtlasSprite$Type} from "packages/net/minecraft/client/renderer/texture/$TextureAtlasSprite"

export class $ClientHelper {

constructor()

public static "registerRenderType"(block: $Block$Type, type: $RenderType$Type): void
public static "registerRenderType"(block: $Block$Type, ...types: ($RenderType$Type)[]): void
public static "addClientSetup"(clientSetup: $Runnable$Type): void
public static "getModel"(modelManager: $ModelManager$Type, modelLocation: $ResourceLocation$Type): $BakedModel
public static "addBlockEntityRenderersRegistration"(eventListener: $Consumer$Type<($ClientHelper$BlockEntityRendererEvent$Type)>): void
public static "getPixelRGBA"(sprite: $TextureAtlasSprite$Type, frameIndex: integer, x: integer, y: integer): integer
public static "parseBlockModel"(json: $JsonElement$Type): $BlockModel
public static "getModIcon"(modId: string): $Path
public static "getBlockMaterial"(bockTexture: $ResourceLocation$Type): $Material
public static "getUnbakedModel"(modelManager: $ModelManager$Type, modelLocation: $ResourceLocation$Type): $UnbakedModel
public static "addModelLoaderRegistration"(eventListener: $Consumer$Type<($ClientHelper$ModelLoaderEvent$Type)>): void
public static "addKeyBindRegistration"(eventListener: $Consumer$Type<($ClientHelper$KeyBindEvent$Type)>): void
public static "addItemColorsRegistration"(eventListener: $Consumer$Type<($ClientHelper$ItemColorEvent$Type)>): void
public static "addTooltipComponentRegistration"(eventListener: $Consumer$Type<($ClientHelper$TooltipComponentEvent$Type)>): void
public static "addSpecialModelRegistration"(eventListener: $Consumer$Type<($ClientHelper$SpecialModelEvent$Type)>): void
public static "registerOptionalTexturePack"(folderName: $ResourceLocation$Type, displayName: $Component$Type, defaultEnabled: boolean): void
public static "registerOptionalTexturePack"(folderName: $ResourceLocation$Type): void
public static "addItemDecoratorsRegistration"(eventListener: $Consumer$Type<($ClientHelper$ItemDecoratorEvent$Type)>): void
public static "addBlockColorsRegistration"(eventListener: $Consumer$Type<($ClientHelper$BlockColorEvent$Type)>): void
public static "addEntityRenderersRegistration"(eventListener: $Consumer$Type<($ClientHelper$EntityRendererEvent$Type)>): void
public static "addParticleRegistration"(eventListener: $Consumer$Type<($ClientHelper$ParticleEvent$Type)>): void
public static "registerFluidRenderType"(fluid: $Fluid$Type, type: $RenderType$Type): void
public static "addClientReloadListener"(listener: $Supplier$Type<($PreparableReloadListener$Type)>, location: $ResourceLocation$Type): void
public static "addModelLayerRegistration"(eventListener: $Consumer$Type<($ClientHelper$ModelLayerEvent$Type)>): void
public static "addClientSetupAsync"(clientSetup: $Runnable$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientHelper$Type = ($ClientHelper);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientHelper_ = $ClientHelper$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/$IConvertableHorse" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $IConvertableHorse {

 "supp$isConverting"(): boolean

(): boolean
}

export namespace $IConvertableHorse {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IConvertableHorse$Type = ($IConvertableHorse);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IConvertableHorse_ = $IConvertableHorse$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/common/block/$BoilingWaterCauldronBlock" {
import {$IntegerProperty, $IntegerProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$IntegerProperty"
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$CauldronInteraction, $CauldronInteraction$Type} from "packages/net/minecraft/core/cauldron/$CauldronInteraction"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$LayeredCauldronBlock, $LayeredCauldronBlock$Type} from "packages/net/minecraft/world/level/block/$LayeredCauldronBlock"
import {$Biome$Precipitation, $Biome$Precipitation$Type} from "packages/net/minecraft/world/level/biome/$Biome$Precipitation"
import {$BlockAndTintGetter, $BlockAndTintGetter$Type} from "packages/net/minecraft/world/level/$BlockAndTintGetter"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $BoilingWaterCauldronBlock extends $LayeredCauldronBlock {
static readonly "BOILING": $BooleanProperty
static readonly "MIN_FILL_LEVEL": integer
static readonly "MAX_FILL_LEVEL": integer
static readonly "LEVEL": $IntegerProperty
static readonly "RAIN": $Predicate<($Biome$Precipitation)>
static readonly "SNOW": $Predicate<($Biome$Precipitation)>
readonly "interactions": $Map<($Item), ($CauldronInteraction)>
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(properties: $BlockBehaviour$Properties$Type, fillPredicate: $Predicate$Type<($Biome$Precipitation$Type)>, interactions: $Map$Type<($Item$Type), ($CauldronInteraction$Type)>)

public "fallOn"(level: $Level$Type, state: $BlockState$Type, pos: $BlockPos$Type, entity: $Entity$Type, fallDistance: float): void
public "updateShape"(state: $BlockState$Type, direction: $Direction$Type, neighborState: $BlockState$Type, level: $LevelAccessor$Type, currentPos: $BlockPos$Type, neighborPos: $BlockPos$Type): $BlockState
public "entityInside"(state: $BlockState$Type, level: $Level$Type, pos: $BlockPos$Type, entity: $Entity$Type): void
public "animateTick"(state: $BlockState$Type, level: $Level$Type, pos: $BlockPos$Type, random: $RandomSource$Type): void
public static "getWaterColor"(state: $BlockState$Type, level: $BlockAndTintGetter$Type, pos: $BlockPos$Type, i: integer): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BoilingWaterCauldronBlock$Type = ($BoilingWaterCauldronBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BoilingWaterCauldronBlock_ = $BoilingWaterCauldronBlock$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/renderers/tiles/$JarBlockTileRenderer" {
import {$BlockEntityRendererProvider$Context, $BlockEntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/blockentity/$BlockEntityRendererProvider$Context"
import {$CageBlockTileRenderer, $CageBlockTileRenderer$Type} from "packages/net/mehvahdjukaar/supplementaries/client/renderers/tiles/$CageBlockTileRenderer"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$JarBlockTile, $JarBlockTile$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$JarBlockTile"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $JarBlockTileRenderer extends $CageBlockTileRenderer<($JarBlockTile)> {

constructor(context: $BlockEntityRendererProvider$Context$Type)

public "render"(tile: $JarBlockTile$Type, partialTicks: float, poseStack: $PoseStack$Type, bufferIn: $MultiBufferSource$Type, combinedLightIn: integer, combinedOverlayIn: integer): void
public static "renderFluid"(percentageFill: float, color: integer, luminosity: integer, texture: $ResourceLocation$Type, poseStack: $PoseStack$Type, bufferIn: $MultiBufferSource$Type, light: integer, combinedOverlayIn: integer): void
public static "renderCookies"(poseStack: $PoseStack$Type, buffer: $MultiBufferSource$Type, rand: $RandomSource$Type, light: integer, overlay: integer, itemIterator: $Supplier$Type<($ItemStack$Type)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $JarBlockTileRenderer$Type = ($JarBlockTileRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $JarBlockTileRenderer_ = $JarBlockTileRenderer$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/common/tile/$WallLanternBlockTile" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$LazyOptional, $LazyOptional$Type} from "packages/net/minecraftforge/common/util/$LazyOptional"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Vector3f, $Vector3f$Type} from "packages/org/joml/$Vector3f"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Capability, $Capability$Type} from "packages/net/minecraftforge/common/capabilities/$Capability"
import {$ExtraModelData$Builder, $ExtraModelData$Builder$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$ExtraModelData$Builder"
import {$IExtraModelDataProvider, $IExtraModelDataProvider$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$IExtraModelDataProvider"
import {$SwayingBlockTile, $SwayingBlockTile$Type} from "packages/net/mehvahdjukaar/amendments/common/tile/$SwayingBlockTile"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$IBlockHolder, $IBlockHolder$Type} from "packages/net/mehvahdjukaar/moonlight/api/block/$IBlockHolder"
import {$ModelDataKey, $ModelDataKey$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$ModelDataKey"
import {$IOwnerProtected, $IOwnerProtected$Type} from "packages/net/mehvahdjukaar/moonlight/api/block/$IOwnerProtected"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $WallLanternBlockTile extends $SwayingBlockTile implements $IBlockHolder, $IOwnerProtected, $IExtraModelDataProvider {
static readonly "MIMIC_KEY": $ModelDataKey<($BlockState)>
static readonly "IS_FANCY": $ModelDataKey<(boolean)>
 "blockState": $BlockState

constructor(pos: $BlockPos$Type, state: $BlockState$Type)

public "getOwner"(): $UUID
public "setOwner"(owner: $UUID$Type): void
public "getAttachmentOffset"(): double
public "isRedstoneLantern"(): boolean
public "getHeldBlock"(index: integer): $BlockState
public "load"(compound: $CompoundTag$Type): void
public "m_183515_"(compound: $CompoundTag$Type): void
public "getRotationAxis"(state: $BlockState$Type): $Vector3f
public "addExtraModelData"(builder: $ExtraModelData$Builder$Type): void
public "setHeldBlock"(state: $BlockState$Type, index: integer): boolean
public "getHeldBlock"(): $BlockState
public "setHeldBlock"(state: $BlockState$Type): boolean
public "isPublic"(): boolean
public "isOwnedBy"(player: $Player$Type): boolean
public "isAccessibleBy"(player: $Player$Type): boolean
public "loadOwner"(tag: $CompoundTag$Type): void
public "saveOwner"(tag: $CompoundTag$Type): void
public "isNotOwnedBy"(player: $Player$Type): boolean
public "getPersistentData"(): $CompoundTag
public "onChunkUnloaded"(): void
public "getCapability"<T>(arg0: $Capability$Type<(T)>, arg1: $Direction$Type): $LazyOptional<(T)>
get "owner"(): $UUID
set "owner"(value: $UUID$Type)
get "attachmentOffset"(): double
get "redstoneLantern"(): boolean
get "heldBlock"(): $BlockState
set "heldBlock"(value: $BlockState$Type)
get "public"(): boolean
get "persistentData"(): $CompoundTag
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WallLanternBlockTile$Type = ($WallLanternBlockTile);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WallLanternBlockTile_ = $WallLanternBlockTile$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/misc/map_markers/markers/$BedMarker" {
import {$ColoredMarker, $ColoredMarker$Type} from "packages/net/mehvahdjukaar/supplementaries/common/misc/map_markers/markers/$ColoredMarker"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$DyeColor, $DyeColor$Type} from "packages/net/minecraft/world/item/$DyeColor"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $BedMarker extends $ColoredMarker {
static readonly "HAS_SMALL_TEXTURE_FLAG": integer

constructor()
constructor(pos: $BlockPos$Type, color: $DyeColor$Type)

public static "getFromWorld"(world: $BlockGetter$Type, pos: $BlockPos$Type): $BedMarker
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BedMarker$Type = ($BedMarker);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BedMarker_ = $BedMarker$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/common/block/$CarpetSlabBlock" {
import {$IntegerProperty, $IntegerProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$IntegerProperty"
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$EntityBlock, $EntityBlock$Type} from "packages/net/minecraft/world/level/block/$EntityBlock"
import {$IRecolorable, $IRecolorable$Type} from "packages/net/mehvahdjukaar/moonlight/api/block/$IRecolorable"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$SlabType, $SlabType$Type} from "packages/net/minecraft/world/level/block/state/properties/$SlabType"
import {$FluidState, $FluidState$Type} from "packages/net/minecraft/world/level/material/$FluidState"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$DyeColor, $DyeColor$Type} from "packages/net/minecraft/world/item/$DyeColor"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$SlabBlock, $SlabBlock$Type} from "packages/net/minecraft/world/level/block/$SlabBlock"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$CollisionContext, $CollisionContext$Type} from "packages/net/minecraft/world/phys/shapes/$CollisionContext"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$EnumProperty, $EnumProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$EnumProperty"
import {$HitResult, $HitResult$Type} from "packages/net/minecraft/world/phys/$HitResult"
import {$LootParams$Builder, $LootParams$Builder$Type} from "packages/net/minecraft/world/level/storage/loot/$LootParams$Builder"
import {$SoundType, $SoundType$Type} from "packages/net/minecraft/world/level/block/$SoundType"
import {$BlockEntityTicker, $BlockEntityTicker$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityTicker"
import {$GameEventListener, $GameEventListener$Type} from "packages/net/minecraft/world/level/gameevent/$GameEventListener"

export class $CarpetSlabBlock extends $SlabBlock implements $EntityBlock, $IRecolorable {
static readonly "LIGHT_LEVEL": $IntegerProperty
static readonly "SOLID": $BooleanProperty
static readonly "TYPE": $EnumProperty<($SlabType)>
static readonly "WATERLOGGED": $BooleanProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(block: $Block$Type)

public "getCloneItemStack"(level: $BlockGetter$Type, pos: $BlockPos$Type, state: $BlockState$Type): $ItemStack
public "getSoundType"(state: $BlockState$Type, world: $LevelReader$Type, pos: $BlockPos$Type, entity: $Entity$Type): $SoundType
public "getCloneItemStack"(state: $BlockState$Type, target: $HitResult$Type, level: $BlockGetter$Type, pos: $BlockPos$Type, player: $Player$Type): $ItemStack
public "tryRecolor"(level: $Level$Type, blockPos: $BlockPos$Type, blockState: $BlockState$Type, dyeColor: $DyeColor$Type): boolean
public "isDefaultColor"(level: $Level$Type, blockPos: $BlockPos$Type, blockState: $BlockState$Type): boolean
public "getDrops"(state: $BlockState$Type, builder: $LootParams$Builder$Type): $List<($ItemStack)>
public "getOcclusionShape"(state: $BlockState$Type, level: $BlockGetter$Type, pos: $BlockPos$Type): $VoxelShape
public "getShape"(state: $BlockState$Type, level: $BlockGetter$Type, pos: $BlockPos$Type, context: $CollisionContext$Type): $VoxelShape
public "getDestroyProgress"(state: $BlockState$Type, player: $Player$Type, worldIn: $BlockGetter$Type, pos: $BlockPos$Type): float
public "placeLiquid"(level: $LevelAccessor$Type, pos: $BlockPos$Type, state: $BlockState$Type, fluidState: $FluidState$Type): boolean
public "newBlockEntity"(pPos: $BlockPos$Type, pState: $BlockState$Type): $BlockEntity
public "getTicker"<T extends $BlockEntity>(arg0: $Level$Type, arg1: $BlockState$Type, arg2: $BlockEntityType$Type<(T)>): $BlockEntityTicker<(T)>
public "getListener"<T extends $BlockEntity>(arg0: $ServerLevel$Type, arg1: T): $GameEventListener
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CarpetSlabBlock$Type = ($CarpetSlabBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CarpetSlabBlock_ = $CarpetSlabBlock$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/integration/forge/dynamictrees/$DynamicTreesCompat" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"

export class $DynamicTreesCompat {

constructor()

public static "getOptionalDynamicSapling"(item: $Item$Type, world: $Level$Type, pos: $BlockPos$Type): $Block
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DynamicTreesCompat$Type = ($DynamicTreesCompat);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DynamicTreesCompat_ = $DynamicTreesCompat$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/client/gui/$QuillButton$QuillType" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $QuillButton$QuillType extends $Enum<($QuillButton$QuillType)> {
static readonly "DEFAULT": $QuillButton$QuillType
static readonly "ITALIC": $QuillButton$QuillType
static readonly "BOLD": $QuillButton$QuillType
static readonly "UNDERLINE": $QuillButton$QuillType
static readonly "STRIKETHROUGH": $QuillButton$QuillType
static readonly "OBFUSCATED": $QuillButton$QuillType


public static "values"(): ($QuillButton$QuillType)[]
public static "valueOf"(name: string): $QuillButton$QuillType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $QuillButton$QuillType$Type = (("default") | ("underline") | ("bold") | ("strikethrough") | ("italic") | ("obfuscated")) | ($QuillButton$QuillType);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $QuillButton$QuillType_ = $QuillButton$QuillType$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/block_models/$JarBakedModel" {
import {$ModelData, $ModelData$Type} from "packages/net/minecraftforge/client/model/data/$ModelData"
import {$ModelState, $ModelState$Type} from "packages/net/minecraft/client/resources/model/$ModelState"
import {$Vector3f, $Vector3f$Type} from "packages/org/joml/$Vector3f"
import {$ItemTransforms, $ItemTransforms$Type} from "packages/net/minecraft/client/renderer/block/model/$ItemTransforms"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$ExtraModelData, $ExtraModelData$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$ExtraModelData"
import {$CustomBakedModel, $CustomBakedModel$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$CustomBakedModel"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BakedModel, $BakedModel$Type} from "packages/net/minecraft/client/resources/model/$BakedModel"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$RenderType, $RenderType$Type} from "packages/net/minecraft/client/renderer/$RenderType"
import {$ItemOverrides, $ItemOverrides$Type} from "packages/net/minecraft/client/renderer/block/model/$ItemOverrides"
import {$ItemDisplayContext, $ItemDisplayContext$Type} from "packages/net/minecraft/world/item/$ItemDisplayContext"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$List, $List$Type} from "packages/java/util/$List"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$ChunkRenderTypeSet, $ChunkRenderTypeSet$Type} from "packages/net/minecraftforge/client/$ChunkRenderTypeSet"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockAndTintGetter, $BlockAndTintGetter$Type} from "packages/net/minecraft/world/level/$BlockAndTintGetter"
import {$BakedQuad, $BakedQuad$Type} from "packages/net/minecraft/client/renderer/block/model/$BakedQuad"
import {$TextureAtlasSprite, $TextureAtlasSprite$Type} from "packages/net/minecraft/client/renderer/texture/$TextureAtlasSprite"

export class $JarBakedModel implements $CustomBakedModel {

constructor(goblet: $BakedModel$Type, width: float, height: float, yOffset: float, rotation: $ModelState$Type)

public static "getJarLiquidDimensions"(): $Vector3f
public "usesBlockLight"(): boolean
public "isGui3d"(): boolean
public "getBlockQuads"(state: $BlockState$Type, side: $Direction$Type, rand: $RandomSource$Type, renderType: $RenderType$Type, data: $ExtraModelData$Type): $List<($BakedQuad)>
public "getBlockParticle"(extraModelData: $ExtraModelData$Type): $TextureAtlasSprite
public "isCustomRenderer"(): boolean
public "getOverrides"(): $ItemOverrides
public "getTransforms"(): $ItemTransforms
public "useAmbientOcclusion"(): boolean
public "getParticleIcon"(): $TextureAtlasSprite
public "getQuads"(state: $BlockState$Type, side: $Direction$Type, rand: $RandomSource$Type): $List<(any)>
public "getQuads"(state: $BlockState$Type, side: $Direction$Type, rand: $RandomSource$Type, modelData: $ModelData$Type, type: $RenderType$Type): $List<(any)>
public "getParticleIcon"(data: $ModelData$Type): $TextureAtlasSprite
public "getModelData"(level: $BlockAndTintGetter$Type, pos: $BlockPos$Type, state: $BlockState$Type, modelData: $ModelData$Type): $ModelData
public "getModelData"(originalData: $ExtraModelData$Type, stack: $ItemStack$Type): $ExtraModelData
public "getModelData"(tileData: $ExtraModelData$Type, pos: $BlockPos$Type, state: $BlockState$Type, level: $BlockAndTintGetter$Type): $ExtraModelData
public "useAmbientOcclusion"(arg0: $BlockState$Type, arg1: $RenderType$Type): boolean
public "useAmbientOcclusion"(arg0: $BlockState$Type): boolean
public "getRenderTypes"(arg0: $ItemStack$Type, arg1: boolean): $List<($RenderType)>
public "getRenderTypes"(arg0: $BlockState$Type, arg1: $RandomSource$Type, arg2: $ModelData$Type): $ChunkRenderTypeSet
public "getRenderPasses"(arg0: $ItemStack$Type, arg1: boolean): $List<($BakedModel)>
public "applyTransform"(arg0: $ItemDisplayContext$Type, arg1: $PoseStack$Type, arg2: boolean): $BakedModel
public "useAmbientOcclusionWithLightEmission"(arg0: $BlockState$Type, arg1: $RenderType$Type): boolean
get "jarLiquidDimensions"(): $Vector3f
get "gui3d"(): boolean
get "customRenderer"(): boolean
get "overrides"(): $ItemOverrides
get "transforms"(): $ItemTransforms
get "particleIcon"(): $TextureAtlasSprite
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $JarBakedModel$Type = ($JarBakedModel);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $JarBakedModel_ = $JarBakedModel$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/fluids/forge/$SoftFluidTankImpl" {
import {$IFluidHandler, $IFluidHandler$Type} from "packages/net/minecraftforge/fluids/capability/$IFluidHandler"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$FluidStack, $FluidStack$Type} from "packages/net/minecraftforge/fluids/$FluidStack"
import {$SoftFluidStack, $SoftFluidStack$Type} from "packages/net/mehvahdjukaar/moonlight/api/fluids/$SoftFluidStack"
import {$SoftFluidTank, $SoftFluidTank$Type} from "packages/net/mehvahdjukaar/moonlight/api/fluids/$SoftFluidTank"

/**
 * 
 * @deprecated
 */
export class $SoftFluidTankImpl extends $SoftFluidTank {
static readonly "BOTTLE_COUNT": integer
static readonly "BOWL_COUNT": integer
static readonly "BUCKET_COUNT": integer


/**
 * 
 * @deprecated
 */
public "isSameFluidAs"(fluidStack: $FluidStack$Type, com: $CompoundTag$Type): boolean
/**
 * 
 * @deprecated
 */
public "addVanillaFluid"(fluidStack: $FluidStack$Type): boolean
/**
 * 
 * @deprecated
 */
public static "convertForgeFluid"(fluidStack: $FluidStack$Type): $SoftFluidStack
public "drainFluidTank"(fluidSource: $IFluidHandler$Type): boolean
public "drainFluidTank"(fluidSource: $IFluidHandler$Type, bottles: integer): boolean
public "transferToFluidTank"(fluidDestination: $IFluidHandler$Type, bottles: integer): boolean
public "transferToFluidTank"(fluidDestination: $IFluidHandler$Type): boolean
/**
 * 
 * @deprecated
 */
public "toEquivalentVanillaFluid"(mb: integer): $FluidStack
public "copy"(other: $IFluidHandler$Type): void
public static "create"(capacity: integer): $SoftFluidTank
public "setFluid"(fluidStack: $FluidStack$Type): void
set "fluid"(value: $FluidStack$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SoftFluidTankImpl$Type = ($SoftFluidTankImpl);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SoftFluidTankImpl_ = $SoftFluidTankImpl$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/client/colors/$SoftFluidColor" {
import {$BlockColor, $BlockColor$Type} from "packages/net/minecraft/client/color/block/$BlockColor"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockAndTintGetter, $BlockAndTintGetter$Type} from "packages/net/minecraft/world/level/$BlockAndTintGetter"

export class $SoftFluidColor implements $BlockColor {

constructor()

public "getColor"(state: $BlockState$Type, level: $BlockAndTintGetter$Type, pos: $BlockPos$Type, tint: integer): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SoftFluidColor$Type = ($SoftFluidColor);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SoftFluidColor_ = $SoftFluidColor$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/client/renderers/$WallLanternBlockTileRenderer" {
import {$BlockEntityRendererProvider$Context, $BlockEntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/blockentity/$BlockEntityRendererProvider$Context"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$WallLanternBlockTile, $WallLanternBlockTile$Type} from "packages/net/mehvahdjukaar/amendments/common/tile/$WallLanternBlockTile"
import {$BlockEntityRenderer, $BlockEntityRenderer$Type} from "packages/net/minecraft/client/renderer/blockentity/$BlockEntityRenderer"

export class $WallLanternBlockTileRenderer implements $BlockEntityRenderer<($WallLanternBlockTile)> {

constructor(context: $BlockEntityRendererProvider$Context$Type)

public "render"(tile: $WallLanternBlockTile$Type, partialTicks: float, matrixStackIn: $PoseStack$Type, bufferIn: $MultiBufferSource$Type, combinedLightIn: integer, combinedOverlayIn: integer): void
public "shouldRender"(blockEntity: $WallLanternBlockTile$Type, cameraPos: $Vec3$Type): boolean
public "renderLantern"(tile: $WallLanternBlockTile$Type, lanternState: $BlockState$Type, partialTicks: float, poseStack: $PoseStack$Type, bufferIn: $MultiBufferSource$Type, combinedLightIn: integer, combinedOverlayIn: integer, ceiling: boolean): void
public "shouldRenderOffScreen"(arg0: $WallLanternBlockTile$Type): boolean
public "getViewDistance"(): integer
get "viewDistance"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WallLanternBlockTileRenderer$Type = ($WallLanternBlockTileRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WallLanternBlockTileRenderer_ = $WallLanternBlockTileRenderer$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/integration/create/$BambooSpikesBehavior" {
import {$ContraptionMatrices, $ContraptionMatrices$Type} from "packages/com/simibubi/create/content/contraptions/render/$ContraptionMatrices"
import {$ActorInstance, $ActorInstance$Type} from "packages/com/simibubi/create/content/contraptions/render/$ActorInstance"
import {$MaterialManager, $MaterialManager$Type} from "packages/com/jozufozu/flywheel/api/$MaterialManager"
import {$VirtualRenderWorld, $VirtualRenderWorld$Type} from "packages/com/jozufozu/flywheel/core/virtual/$VirtualRenderWorld"
import {$MovementBehaviour, $MovementBehaviour$Type} from "packages/com/simibubi/create/content/contraptions/behaviour/$MovementBehaviour"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$MovementContext, $MovementContext$Type} from "packages/com/simibubi/create/content/contraptions/behaviour/$MovementContext"

export class $BambooSpikesBehavior implements $MovementBehaviour {

constructor()

public "tick"(context: $MovementContext$Type): void
public "damageEntities"(context: $MovementContext$Type): void
public "isSameDir"(context: $MovementContext$Type): boolean
public "renderAsNormalBlockEntity"(): boolean
public "isOnCooldown"(world: $Level$Type, lastTicked: long): boolean
public "isActive"(arg0: $MovementContext$Type): boolean
public "createInstance"(arg0: $MaterialManager$Type, arg1: $VirtualRenderWorld$Type, arg2: $MovementContext$Type): $ActorInstance
public "cancelStall"(arg0: $MovementContext$Type): void
public "startMoving"(arg0: $MovementContext$Type): void
public "canBeDisabledVia"(arg0: $MovementContext$Type): $ItemStack
public "visitNewPosition"(arg0: $MovementContext$Type, arg1: $BlockPos$Type): void
public "writeExtraData"(arg0: $MovementContext$Type): void
public "onSpeedChanged"(arg0: $MovementContext$Type, arg1: $Vec3$Type, arg2: $Vec3$Type): void
public "stopMoving"(arg0: $MovementContext$Type): void
public "renderInContraption"(arg0: $MovementContext$Type, arg1: $VirtualRenderWorld$Type, arg2: $ContraptionMatrices$Type, arg3: $MultiBufferSource$Type): void
public "mustTickWhileDisabled"(): boolean
public "getActiveAreaOffset"(arg0: $MovementContext$Type): $Vec3
public "hasSpecialInstancedRendering"(): boolean
public "onDisabledByControls"(arg0: $MovementContext$Type): void
public "dropItem"(arg0: $MovementContext$Type, arg1: $ItemStack$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BambooSpikesBehavior$Type = ($BambooSpikesBehavior);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BambooSpikesBehavior_ = $BambooSpikesBehavior$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/common/tile/$SwayingBlockTile" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$DynamicRenderedBlockTile, $DynamicRenderedBlockTile$Type} from "packages/net/mehvahdjukaar/moonlight/api/block/$DynamicRenderedBlockTile"
import {$Vector3f, $Vector3f$Type} from "packages/org/joml/$Vector3f"
import {$ModelDataKey, $ModelDataKey$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$ModelDataKey"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ClientboundBlockEntityDataPacket, $ClientboundBlockEntityDataPacket$Type} from "packages/net/minecraft/network/protocol/game/$ClientboundBlockEntityDataPacket"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$SwingAnimation, $SwingAnimation$Type} from "packages/net/mehvahdjukaar/amendments/common/$SwingAnimation"

export class $SwayingBlockTile extends $DynamicRenderedBlockTile {
static readonly "IS_FANCY": $ModelDataKey<(boolean)>
 "blockState": $BlockState


public "getAnimation"(): $SwingAnimation
public static "clientTick"(pLevel: $Level$Type, pPos: $BlockPos$Type, pState: $BlockState$Type, tile: $SwayingBlockTile$Type): void
public "isNeverFancy"(): boolean
public "onFancyChanged"(newFancy: boolean): void
public "getUpdatePacket"(): $ClientboundBlockEntityDataPacket
public "getRotationAxis"(arg0: $BlockState$Type): $Vector3f
public "getUpdateTag"(): $CompoundTag
get "animation"(): $SwingAnimation
get "neverFancy"(): boolean
get "updatePacket"(): $ClientboundBlockEntityDataPacket
get "updateTag"(): $CompoundTag
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SwayingBlockTile$Type = ($SwayingBlockTile);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SwayingBlockTile_ = $SwayingBlockTile$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/faucet/$XPDroppingInteraction" {
import {$FaucetTarget$BlState, $FaucetTarget$BlState$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/faucet/$FaucetTarget$BlState"
import {$SoftFluidStack, $SoftFluidStack$Type} from "packages/net/mehvahdjukaar/moonlight/api/fluids/$SoftFluidStack"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $XPDroppingInteraction implements $FaucetTarget$BlState {


public "fill"(level: $Level$Type, pos: $BlockPos$Type, state: $BlockState$Type, fluid: $SoftFluidStack$Type, minAmount: integer): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $XPDroppingInteraction$Type = ($XPDroppingInteraction);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $XPDroppingInteraction_ = $XPDroppingInteraction$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/forge/$RemapHandler" {
import {$MissingMappingsEvent, $MissingMappingsEvent$Type} from "packages/net/minecraftforge/registries/$MissingMappingsEvent"

export class $RemapHandler {

constructor()

public static "onRemapBlocks"(event: $MissingMappingsEvent$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RemapHandler$Type = ($RemapHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RemapHandler_ = $RemapHandler$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/fluids/$BuiltInSoftFluids" {
import {$DataObjectReference, $DataObjectReference$Type} from "packages/net/mehvahdjukaar/moonlight/api/misc/$DataObjectReference"
import {$SoftFluid, $SoftFluid$Type} from "packages/net/mehvahdjukaar/moonlight/api/fluids/$SoftFluid"

export class $BuiltInSoftFluids {
static readonly "EMPTY": $DataObjectReference<($SoftFluid)>
static readonly "WATER": $DataObjectReference<($SoftFluid)>
static readonly "LAVA": $DataObjectReference<($SoftFluid)>
static readonly "HONEY": $DataObjectReference<($SoftFluid)>
static readonly "MILK": $DataObjectReference<($SoftFluid)>
static readonly "MUSHROOM_STEW": $DataObjectReference<($SoftFluid)>
static readonly "BEETROOT_SOUP": $DataObjectReference<($SoftFluid)>
static readonly "RABBIT_STEW": $DataObjectReference<($SoftFluid)>
static readonly "SUS_STEW": $DataObjectReference<($SoftFluid)>
static readonly "POTION": $DataObjectReference<($SoftFluid)>
static readonly "DRAGON_BREATH": $DataObjectReference<($SoftFluid)>
static readonly "XP": $DataObjectReference<($SoftFluid)>
static readonly "SLIME": $DataObjectReference<($SoftFluid)>
static readonly "GHAST_TEAR": $DataObjectReference<($SoftFluid)>
static readonly "MAGMA_CREAM": $DataObjectReference<($SoftFluid)>
static readonly "POWDERED_SNOW": $DataObjectReference<($SoftFluid)>

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BuiltInSoftFluids$Type = ($BuiltInSoftFluids);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BuiltInSoftFluids_ = $BuiltInSoftFluids$Type;
}}
declare module "packages/net/mehvahdjukaar/dummmmmmy/configs/$CommonConfigs$DpsMode" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $CommonConfigs$DpsMode extends $Enum<($CommonConfigs$DpsMode)> {
static readonly "DYNAMIC": $CommonConfigs$DpsMode
static readonly "STATIC": $CommonConfigs$DpsMode
static readonly "OFF": $CommonConfigs$DpsMode


public static "values"(): ($CommonConfigs$DpsMode)[]
public static "valueOf"(name: string): $CommonConfigs$DpsMode
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CommonConfigs$DpsMode$Type = (("static") | ("dynamic") | ("off")) | ($CommonConfigs$DpsMode);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CommonConfigs$DpsMode_ = $CommonConfigs$DpsMode$Type;
}}
declare module "packages/net/mehvahdjukaar/modelfix/moonlight_configs/forge/$ConfigHelper" {
import {$ForgeConfigSpec, $ForgeConfigSpec$Type} from "packages/net/minecraftforge/common/$ForgeConfigSpec"
import {$ModConfig, $ModConfig$Type} from "packages/net/minecraftforge/fml/config/$ModConfig"

export class $ConfigHelper {

constructor()

public static "reloadConfigFile"(config: $ModConfig$Type): void
public static "addAndLoadConfigFile"(targetSpec: $ForgeConfigSpec$Type, fileName: string, addToMod: boolean): $ModConfig
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ConfigHelper$Type = ($ConfigHelper);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ConfigHelper_ = $ConfigHelper$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/core/misc/$CaveFilter$Type" {
import {$CaveFilter, $CaveFilter$Type} from "packages/net/mehvahdjukaar/moonlight/core/misc/$CaveFilter"
import {$Codec, $Codec$Type} from "packages/com/mojang/serialization/$Codec"
import {$PlacementModifierType, $PlacementModifierType$Type} from "packages/net/minecraft/world/level/levelgen/placement/$PlacementModifierType"

export class $CaveFilter$Type implements $PlacementModifierType<($CaveFilter)> {

constructor()

public "codec"(): $Codec<($CaveFilter)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CaveFilter$Type$Type = ($CaveFilter$Type);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CaveFilter$Type_ = $CaveFilter$Type$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/platform/configs/forge/$ConfigBuilderImpl" {
import {$ConfigType, $ConfigType$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/configs/$ConfigType"
import {$ConfigBuilderImpl$StringJsonConfigValue, $ConfigBuilderImpl$StringJsonConfigValue$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/configs/forge/$ConfigBuilderImpl$StringJsonConfigValue"
import {$JsonElement, $JsonElement$Type} from "packages/com/google/gson/$JsonElement"
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Codec, $Codec$Type} from "packages/com/mojang/serialization/$Codec"
import {$ConfigBuilder, $ConfigBuilder$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/configs/$ConfigBuilder"
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$ConfigSpecWrapper, $ConfigSpecWrapper$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/configs/forge/$ConfigSpecWrapper"
import {$Supplier as $Supplier$0, $Supplier$Type as $Supplier$0$Type} from "packages/com/google/common/base/$Supplier"

export class $ConfigBuilderImpl extends $ConfigBuilder {
static readonly "STRING_CHECK": $Predicate<(any)>
static readonly "LIST_STRING_CHECK": $Predicate<(any)>

constructor(name: $ResourceLocation$Type, type: $ConfigType$Type)

public "comment"(comment: string): $ConfigBuilder
public static "create"(name: $ResourceLocation$Type, type: $ConfigType$Type): $ConfigBuilder
public "build"(): $ConfigSpecWrapper
public "pop"(): $ConfigBuilderImpl
public "currentCategory"(): string
public "defineColor"(name: string, defaultValue: integer): $Supplier<(integer)>
public "define"<V extends $Enum<(V)>>(name: string, defaultValue: V): $Supplier<(V)>
public "define"<T extends string>(name: string, defaultValue: $List$Type<(any)>, predicate: $Predicate$Type<(any)>): $Supplier<($List<(string)>)>
public "define"(name: string, defaultValue: double, min: double, max: double): $Supplier<(double)>
public "define"(name: string, defaultValue: integer, min: integer, max: integer): $Supplier<(integer)>
public "define"(name: string, defaultValue: boolean): $Supplier<(boolean)>
public "define"(name: string, defaultValue: string, validator: $Predicate$Type<(any)>): $Supplier<(string)>
public "define"<T>(name: string, defaultValue: $Supplier$Type<(T)>, validator: $Predicate$Type<(any)>): $Supplier<(T)>
public "defineJson"(path: string, defaultValue: $Supplier$Type<($JsonElement$Type)>): $ConfigBuilderImpl$StringJsonConfigValue
public "defineObjectList"<T>(name: string, defaultSupplier: $Supplier$0$Type<($List$Type<(T)>)>, codec: $Codec$Type<(T)>): $Supplier<($List<(T)>)>
public "defineObject"<T>(name: string, defaultSupplier: $Supplier$0$Type<(T)>, codec: $Codec$Type<(T)>): $Supplier<(T)>
public "gameRestart"(): $ConfigBuilder
public "worldReload"(): $ConfigBuilder
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ConfigBuilderImpl$Type = ($ConfigBuilderImpl);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ConfigBuilderImpl_ = $ConfigBuilderImpl$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/core/misc/$IExtendedItem" {
import {$AdditionalItemPlacement, $AdditionalItemPlacement$Type} from "packages/net/mehvahdjukaar/moonlight/api/item/additional_placements/$AdditionalItemPlacement"

export interface $IExtendedItem {

 "moonlight$addAdditionalBehavior"(arg0: $AdditionalItemPlacement$Type): void
 "moonlight$getAdditionalBehavior"(): $AdditionalItemPlacement
 "moonlight$getClientAnimationExtension"(): any
 "moonlight$setClientAnimationExtension"(arg0: any): void
}

export namespace $IExtendedItem {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IExtendedItem$Type = ($IExtendedItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IExtendedItem_ = $IExtendedItem$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$FaucetBlockTile" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Connection, $Connection$Type} from "packages/net/minecraft/network/$Connection"
import {$ModelData, $ModelData$Type} from "packages/net/minecraftforge/client/model/data/$ModelData"
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$ExtraModelData, $ExtraModelData$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$ExtraModelData"
import {$SoftFluidTank, $SoftFluidTank$Type} from "packages/net/mehvahdjukaar/moonlight/api/fluids/$SoftFluidTank"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ClientboundBlockEntityDataPacket, $ClientboundBlockEntityDataPacket$Type} from "packages/net/minecraft/network/protocol/game/$ClientboundBlockEntityDataPacket"
import {$SoftFluid, $SoftFluid$Type} from "packages/net/mehvahdjukaar/moonlight/api/fluids/$SoftFluid"
import {$ExtraModelData$Builder, $ExtraModelData$Builder$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$ExtraModelData$Builder"
import {$IExtraModelDataProvider, $IExtraModelDataProvider$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$IExtraModelDataProvider"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$ModelDataKey, $ModelDataKey$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$ModelDataKey"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$AABB, $AABB$Type} from "packages/net/minecraft/world/phys/$AABB"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $FaucetBlockTile extends $BlockEntity implements $IExtraModelDataProvider {
static readonly "FLUID": $ModelDataKey<($SoftFluid)>
static readonly "FLUID_COLOR": $ModelDataKey<(integer)>
static readonly "COOLDOWN_PER_BOTTLE": integer
readonly "tempFluidHolder": $SoftFluidTank
static readonly "NON_PLAYER": $Predicate<($Entity)>
 "blockState": $BlockState

constructor(pos: $BlockPos$Type, state: $BlockState$Type)

public "isOpen"(): boolean
public static "tick"(pLevel: $Level$Type, pPos: $BlockPos$Type, pState: $BlockState$Type, tile: $FaucetBlockTile$Type): void
public "updateLight"(): void
public static "removeDataInteractions"<T>(interactions: $Collection$Type<(T)>): void
public "hasWater"(): boolean
public "getUpdatePacket"(): $ClientboundBlockEntityDataPacket
public "load"(compound: $CompoundTag$Type): void
public "m_183515_"(tag: $CompoundTag$Type): void
public "updateContainedFluidVisuals"(level: $Level$Type, pos: $BlockPos$Type, state: $BlockState$Type): boolean
public "getRenderBoundingBox"(): $AABB
public "isConnectedBelow"(): boolean
public "addExtraModelData"(builder: $ExtraModelData$Builder$Type): void
public static "registerInteraction"(interaction: any): void
public "getUpdateTag"(): $CompoundTag
public "requestModelReload"(): void
/**
 * 
 * @deprecated
 */
public "getExtraModelData"(): $ExtraModelData
public "afterDataPacket"(oldData: $ExtraModelData$Type): void
public "onDataPacket"(net: $Connection$Type, pkt: $ClientboundBlockEntityDataPacket$Type): void
public "getModelData"(): $ModelData
get "open"(): boolean
get "updatePacket"(): $ClientboundBlockEntityDataPacket
get "renderBoundingBox"(): $AABB
get "connectedBelow"(): boolean
get "updateTag"(): $CompoundTag
get "extraModelData"(): $ExtraModelData
get "modelData"(): $ModelData
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FaucetBlockTile$Type = ($FaucetBlockTile);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FaucetBlockTile_ = $FaucetBlockTile$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/client/renderers/$LanternRendererExtension" {
import {$AbstractClientPlayer, $AbstractClientPlayer$Type} from "packages/net/minecraft/client/player/$AbstractClientPlayer"
import {$HeadedModel, $HeadedModel$Type} from "packages/net/minecraft/client/model/$HeadedModel"
import {$HumanoidArm, $HumanoidArm$Type} from "packages/net/minecraft/world/entity/$HumanoidArm"
import {$HumanoidModel, $HumanoidModel$Type} from "packages/net/minecraft/client/model/$HumanoidModel"
import {$ItemInHandRenderer, $ItemInHandRenderer$Type} from "packages/net/minecraft/client/renderer/$ItemInHandRenderer"
import {$IFirstPersonSpecialItemRenderer, $IFirstPersonSpecialItemRenderer$Type} from "packages/net/mehvahdjukaar/moonlight/api/item/$IFirstPersonSpecialItemRenderer"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$ArmedModel, $ArmedModel$Type} from "packages/net/minecraft/client/model/$ArmedModel"
import {$EntityModel, $EntityModel$Type} from "packages/net/minecraft/client/model/$EntityModel"
import {$IThirdPersonAnimationProvider, $IThirdPersonAnimationProvider$Type} from "packages/net/mehvahdjukaar/moonlight/api/item/$IThirdPersonAnimationProvider"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$IThirdPersonSpecialItemRenderer, $IThirdPersonSpecialItemRenderer$Type} from "packages/net/mehvahdjukaar/moonlight/api/item/$IThirdPersonSpecialItemRenderer"

export class $LanternRendererExtension implements $IThirdPersonAnimationProvider, $IThirdPersonSpecialItemRenderer, $IFirstPersonSpecialItemRenderer {

constructor()

public "renderThirdPersonItem"<T extends $Player, M extends ($EntityModel<(T)>) & ($ArmedModel) & ($HeadedModel)>(parentModel: M, entity: $LivingEntity$Type, stack: $ItemStack$Type, humanoidArm: $HumanoidArm$Type, poseStack: $PoseStack$Type, bufferSource: $MultiBufferSource$Type, light: integer): void
public "renderFirstPersonItem"(player: $AbstractClientPlayer$Type, itemStack: $ItemStack$Type, hand: $InteractionHand$Type, arm: $HumanoidArm$Type, poseStack: $PoseStack$Type, partialTicks: float, pitch: float, attackAnim: float, equipAnim: float, buffer: $MultiBufferSource$Type, light: integer, renderer: $ItemInHandRenderer$Type): boolean
public "poseLeftArm"<T extends $LivingEntity>(itemStack: $ItemStack$Type, model: $HumanoidModel$Type<(T)>, t: T, arm: $HumanoidArm$Type): boolean
public "poseRightArm"<T extends $LivingEntity>(itemStack: $ItemStack$Type, model: $HumanoidModel$Type<(T)>, t: T, arm: $HumanoidArm$Type): boolean
public static "get"(target: $Item$Type): $IThirdPersonAnimationProvider
public static "attachToItem"(target: $Item$Type, object: $IThirdPersonAnimationProvider$Type): void
public "isTwoHanded"(): boolean
public static "attachToItem"(target: $Item$Type, object: $IThirdPersonSpecialItemRenderer$Type): void
public static "attachToItem"(target: $Item$Type, object: $IFirstPersonSpecialItemRenderer$Type): void
get "twoHanded"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LanternRendererExtension$Type = ($LanternRendererExtension);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LanternRendererExtension_ = $LanternRendererExtension$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$BookPileBlockTile$VisualBook" {
import {$VertexConsumer, $VertexConsumer$Type} from "packages/com/mojang/blaze3d/vertex/$VertexConsumer"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BookType, $BookType$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/placeable_book/$BookType"

export class $BookPileBlockTile$VisualBook {

constructor(bookStack: $ItemStack$Type, pos: $BlockPos$Type, index: integer, colors: $List$Type<($BookType$Type)>, lastColor: $BookType$Type)

public "getType"(): $BookType
public "getBuilder"(buffer: $MultiBufferSource$Type): $VertexConsumer
public "getAngle"(): float
get "type"(): $BookType
get "angle"(): float
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BookPileBlockTile$VisualBook$Type = ($BookPileBlockTile$VisualBook);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BookPileBlockTile$VisualBook_ = $BookPileBlockTile$VisualBook$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/integration/$FramedBlocksCompat" {
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$ExtraModelData, $ExtraModelData$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$ExtraModelData"
import {$SignPostBlockTile, $SignPostBlockTile$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$SignPostBlockTile"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"

export class $FramedBlocksCompat {

constructor()

public static "tryGettingFramedBlock"(targetBlock: $Block$Type, world: $Level$Type, blockpos: $BlockPos$Type): $Block
public static "interactWithFramedSignPost"(tile: $SignPostBlockTile$Type, player: $Player$Type, handIn: $InteractionHand$Type, itemstack: $ItemStack$Type, level: $Level$Type, pos: $BlockPos$Type): boolean
public static "getFramedFence"(): $BlockState
public static "getModelData"(mimic: $BlockState$Type): $ExtraModelData
get "framedFence"(): $BlockState
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FramedBlocksCompat$Type = ($FramedBlocksCompat);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FramedBlocksCompat_ = $FramedBlocksCompat$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/platform/configs/$ConfigType" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $ConfigType extends $Enum<($ConfigType)> {
static readonly "COMMON": $ConfigType
static readonly "CLIENT": $ConfigType


public static "values"(): ($ConfigType)[]
public static "valueOf"(name: string): $ConfigType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ConfigType$Type = (("common") | ("client")) | ($ConfigType);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ConfigType_ = $ConfigType$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/renderers/entities/funny/$SkibidiAnimations" {
import {$AnimationDefinition, $AnimationDefinition$Type} from "packages/net/minecraft/client/animation/$AnimationDefinition"

export class $SkibidiAnimations {
static readonly "JUMPSCARE": $AnimationDefinition
static readonly "DEFAULT": $AnimationDefinition
static readonly "OLD": $AnimationDefinition

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SkibidiAnimations$Type = ($SkibidiAnimations);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SkibidiAnimations_ = $SkibidiAnimations$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$FrameBlockTile" {
import {$MimicBlockTile, $MimicBlockTile$Type} from "packages/net/mehvahdjukaar/moonlight/api/block/$MimicBlockTile"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$ModelDataKey, $ModelDataKey$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$ModelDataKey"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $FrameBlockTile extends $MimicBlockTile {
static readonly "MIMIC_KEY": $ModelDataKey<($BlockState)>
 "blockState": $BlockState

constructor(pos: $BlockPos$Type, state: $BlockState$Type)

public "acceptBlock"(state: $BlockState$Type): $BlockState
public static "isValidBlock"(state: $BlockState$Type, pos: $BlockPos$Type, world: $Level$Type): boolean
public "handleInteraction"(level: $Level$Type, pos: $BlockPos$Type, player: $Player$Type, hand: $InteractionHand$Type, trace: $BlockHitResult$Type, canStrip: boolean): $InteractionResult
public "setHeldBlock"(state: $BlockState$Type): boolean
set "heldBlock"(value: $BlockState$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FrameBlockTile$Type = ($FrameBlockTile);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FrameBlockTile_ = $FrameBlockTile$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/blocks/$DoormatBlock" {
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$EntityBlock, $EntityBlock$Type} from "packages/net/minecraft/world/level/block/$EntityBlock"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Mirror, $Mirror$Type} from "packages/net/minecraft/world/level/block/$Mirror"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$PathComputationType, $PathComputationType$Type} from "packages/net/minecraft/world/level/pathfinder/$PathComputationType"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$WaterBlock, $WaterBlock$Type} from "packages/net/mehvahdjukaar/moonlight/api/block/$WaterBlock"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"
import {$DirectionProperty, $DirectionProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$DirectionProperty"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$CollisionContext, $CollisionContext$Type} from "packages/net/minecraft/world/phys/shapes/$CollisionContext"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$Rotation, $Rotation$Type} from "packages/net/minecraft/world/level/block/$Rotation"
import {$BlockEntityTicker, $BlockEntityTicker$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityTicker"
import {$GameEventListener, $GameEventListener$Type} from "packages/net/minecraft/world/level/gameevent/$GameEventListener"

export class $DoormatBlock extends $WaterBlock implements $EntityBlock {
static readonly "FACING": $DirectionProperty
static readonly "WATERLOGGED": $BooleanProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(properties: $BlockBehaviour$Properties$Type)

public "getStateForPlacement"(context: $BlockPlaceContext$Type): $BlockState
public "setPlacedBy"(world: $Level$Type, pos: $BlockPos$Type, state: $BlockState$Type, placer: $LivingEntity$Type, stack: $ItemStack$Type): void
public "isPossibleToRespawnInThis"(blockState: $BlockState$Type): boolean
public "isPathfindable"(state: $BlockState$Type, worldIn: $BlockGetter$Type, pos: $BlockPos$Type, type: $PathComputationType$Type): boolean
public "updateShape"(stateIn: $BlockState$Type, facing: $Direction$Type, facingState: $BlockState$Type, worldIn: $LevelAccessor$Type, currentPos: $BlockPos$Type, facingPos: $BlockPos$Type): $BlockState
public "use"(state: $BlockState$Type, level: $Level$Type, pos: $BlockPos$Type, player: $Player$Type, hand: $InteractionHand$Type, hit: $BlockHitResult$Type): $InteractionResult
public "onRemove"(state: $BlockState$Type, world: $Level$Type, pos: $BlockPos$Type, newState: $BlockState$Type, isMoving: boolean): void
public "rotate"(state: $BlockState$Type, rot: $Rotation$Type): $BlockState
public "mirror"(state: $BlockState$Type, mirrorIn: $Mirror$Type): $BlockState
public "canSurvive"(state: $BlockState$Type, worldIn: $LevelReader$Type, pos: $BlockPos$Type): boolean
public "getCollisionShape"(state: $BlockState$Type, level: $BlockGetter$Type, pos: $BlockPos$Type, context: $CollisionContext$Type): $VoxelShape
public "getShape"(state: $BlockState$Type, world: $BlockGetter$Type, pos: $BlockPos$Type, context: $CollisionContext$Type): $VoxelShape
public "newBlockEntity"(pPos: $BlockPos$Type, pState: $BlockState$Type): $BlockEntity
public "getTicker"<T extends $BlockEntity>(arg0: $Level$Type, arg1: $BlockState$Type, arg2: $BlockEntityType$Type<(T)>): $BlockEntityTicker<(T)>
public "getListener"<T extends $BlockEntity>(arg0: $ServerLevel$Type, arg1: T): $GameEventListener
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DoormatBlock$Type = ($DoormatBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DoormatBlock_ = $DoormatBlock$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/utils/$FluidsUtil" {
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$SoftFluidStack, $SoftFluidStack$Type} from "packages/net/mehvahdjukaar/moonlight/api/fluids/$SoftFluidStack"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $FluidsUtil {

constructor()

public static "extractFluidFromTank"(tileBack: $BlockEntity$Type, dir: $Direction$Type, amount: integer): boolean
public static "fillFluidTank"(tileBelow: $BlockEntity$Type, fluidStack: $SoftFluidStack$Type, minAmount: integer): integer
public static "hasFluidHandler"(level: $Level$Type, pos: $BlockPos$Type, dir: $Direction$Type): boolean
public static "getFluidInTank"(level: $Level$Type, pos: $BlockPos$Type, dir: $Direction$Type, source: $BlockEntity$Type): $SoftFluidStack
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FluidsUtil$Type = ($FluidsUtil);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FluidsUtil_ = $FluidsUtil$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/reg/$ModTags" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$DyeColor, $DyeColor$Type} from "packages/net/minecraft/world/item/$DyeColor"
import {$Structure, $Structure$Type} from "packages/net/minecraft/world/level/levelgen/structure/$Structure"
import {$Biome, $Biome$Type} from "packages/net/minecraft/world/level/biome/$Biome"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$Potion, $Potion$Type} from "packages/net/minecraft/world/item/alchemy/$Potion"

export class $ModTags {
static readonly "POSTS": $TagKey<($Block)>
static readonly "PALISADES": $TagKey<($Block)>
static readonly "BEAMS": $TagKey<($Block)>
static readonly "WALLS": $TagKey<($Block)>
static readonly "ROPE_SUPPORT_TAG": $TagKey<($Block)>
static readonly "ROPE_HANG_TAG": $TagKey<($Block)>
static readonly "BELLOWS_TICKABLE_TAG": $TagKey<($Block)>
static readonly "WATER_HOLDER": $TagKey<($Block)>
static readonly "FAUCET_CONNECTION_BLACKLIST": $TagKey<($Block)>
static readonly "FAUCET_CONNECTION_WHITELIST": $TagKey<($Block)>
static readonly "ROTATION_BLACKLIST": $TagKey<($Block)>
static readonly "BOMB_BREAKABLE": $TagKey<($Block)>
static readonly "BRICK_BREAKABLE_GLASS": $TagKey<($Block)>
static readonly "BRICK_BREAKABLE_POTS": $TagKey<($Block)>
static readonly "FLINT_METALS": $TagKey<($Block)>
static readonly "FRAME_BLOCK_BLACKLIST": $TagKey<($Block)>
static readonly "LIGHTS_GUNPOWDER": $TagKey<($Block)>
static readonly "LIGHTABLE_BY_GUNPOWDER": $TagKey<($Block)>
static readonly "PREVENTS_OFFSET_ABOVE": $TagKey<($Block)>
static readonly "TINTED_ON_MAPS_GENERIC": $TagKey<($Block)>
static readonly "TINTED_ON_MAPS_GC": $TagKey<($Block)>
static readonly "TINTED_ON_MAPS_FC": $TagKey<($Block)>
static readonly "TINTED_ON_MAPS_WC": $TagKey<($Block)>
static readonly "NOT_TINTED_ON_MAPS": $TagKey<($Block)>
static readonly "FAST_FALL_ROPES": $TagKey<($Block)>
static readonly "SHULKER_BLACKLIST_TAG": $TagKey<($Item)>
static readonly "SLINGSHOT_BLACKLIST": $TagKey<($Item)>
static readonly "COOKIES": $TagKey<($Item)>
static readonly "BRICKS": $TagKey<($Item)>
static readonly "ROPES": $TagKey<($Item)>
static readonly "CHAINS": $TagKey<($Item)>
static readonly "PEDESTAL_UPRIGHT": $TagKey<($Item)>
static readonly "PEDESTAL_DOWNRIGHT": $TagKey<($Item)>
static readonly "CHOCOLATE_BARS": $TagKey<($Item)>
static readonly "FLINT_AND_STEELS": $TagKey<($Item)>
static readonly "FLOWER_BOX_PLANTABLE": $TagKey<($Item)>
static readonly "BLACKBOARD_TAGS": $Map<($DyeColor), ($TagKey<($Item)>)>
static readonly "BOOKS": $TagKey<($Item)>
static readonly "KEYS": $TagKey<($Item)>
static readonly "STATUE_SWORDS": $TagKey<($Item)>
static readonly "STATUE_TOOLS": $TagKey<($Item)>
static readonly "SYRUP": $TagKey<($Item)>
static readonly "OVERENCUMBERING": $TagKey<($Item)>
static readonly "SOAP_BLACKLIST": $TagKey<($Item)>
static readonly "QUIVER_BLACKLIST": $TagKey<($Item)>
static readonly "JAR_CATCHABLE": $TagKey<($EntityType<(any)>)>
static readonly "JAR_BABY_CATCHABLE": $TagKey<($EntityType<(any)>)>
static readonly "CAGE_CATCHABLE": $TagKey<($EntityType<(any)>)>
static readonly "CAGE_BABY_CATCHABLE": $TagKey<($EntityType<(any)>)>
static readonly "CAPTURE_BLACKLIST": $TagKey<($EntityType<(any)>)>
static readonly "NON_ANGERABLE": $TagKey<($EntityType<(any)>)>
static readonly "FLUTE_PET": $TagKey<($EntityType<(any)>)>
static readonly "EATS_FODDER": $TagKey<($EntityType<(any)>)>
static readonly "ROTATABLE": $TagKey<($EntityType<(any)>)>
static readonly "URN_SPAWN": $TagKey<($EntityType<(any)>)>
static readonly "WAY_SIGN_DESTINATIONS": $TagKey<($Structure)>
static readonly "ADVENTURE_MAP_DESTINATIONS": $TagKey<($Structure)>
static readonly "QUIVER_POTION_BLACKLIST": $TagKey<($Potion)>
static readonly "TIPPED_SPIKES_POTION_BLACKLIST": $TagKey<($Potion)>
static readonly "HAS_WAY_SIGNS": $TagKey<($Biome)>
static readonly "HAS_CAVE_URNS": $TagKey<($Biome)>
static readonly "HAS_WILD_FLAX": $TagKey<($Biome)>
static readonly "HAS_BASALT_ASH": $TagKey<($Biome)>

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModTags$Type = ($ModTags);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModTags_ = $ModTags$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/commands/forge/$RecordSongCommandImpl" {
import {$CommandSourceStack, $CommandSourceStack$Type} from "packages/net/minecraft/commands/$CommandSourceStack"
import {$NoteBlockInstrument, $NoteBlockInstrument$Type} from "packages/net/minecraft/world/level/block/state/properties/$NoteBlockInstrument"
import {$ArgumentBuilder, $ArgumentBuilder$Type} from "packages/com/mojang/brigadier/builder/$ArgumentBuilder"
import {$CommandDispatcher, $CommandDispatcher$Type} from "packages/com/mojang/brigadier/$CommandDispatcher"
import {$CommandContext, $CommandContext$Type} from "packages/com/mojang/brigadier/context/$CommandContext"

export class $RecordSongCommandImpl {

constructor()

public static "start"(context: $CommandContext$Type<($CommandSourceStack$Type)>, ...whitelist: ($NoteBlockInstrument$Type)[]): integer
public static "register"(dispatcher: $CommandDispatcher$Type<($CommandSourceStack$Type)>): $ArgumentBuilder<($CommandSourceStack), (any)>
public static "stop"(context: $CommandContext$Type<($CommandSourceStack$Type)>, name: string, speedup: integer): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RecordSongCommandImpl$Type = ($RecordSongCommandImpl);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RecordSongCommandImpl_ = $RecordSongCommandImpl$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/client/model/$CustomModelLoader" {
import {$Material, $Material$Type} from "packages/net/minecraft/client/resources/model/$Material"
import {$JsonObject, $JsonObject$Type} from "packages/com/google/gson/$JsonObject"
import {$JsonElement, $JsonElement$Type} from "packages/com/google/gson/$JsonElement"
import {$ModelBaker, $ModelBaker$Type} from "packages/net/minecraft/client/resources/model/$ModelBaker"
import {$ModelState, $ModelState$Type} from "packages/net/minecraft/client/resources/model/$ModelState"
import {$BakedModel, $BakedModel$Type} from "packages/net/minecraft/client/resources/model/$BakedModel"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$CustomGeometry, $CustomGeometry$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$CustomGeometry"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$IGeometryLoader, $IGeometryLoader$Type} from "packages/net/minecraftforge/client/model/geometry/$IGeometryLoader"
import {$JsonDeserializationContext, $JsonDeserializationContext$Type} from "packages/com/google/gson/$JsonDeserializationContext"
import {$TextureAtlasSprite, $TextureAtlasSprite$Type} from "packages/net/minecraft/client/renderer/texture/$TextureAtlasSprite"

export interface $CustomModelLoader extends $IGeometryLoader<(any)> {

 "deserialize"(arg0: $JsonObject$Type, arg1: $JsonDeserializationContext$Type): $CustomGeometry

(arg0: $JsonObject$Type, arg1: $JsonDeserializationContext$Type): $CustomGeometry
}

export namespace $CustomModelLoader {
function parseModel(j: $JsonElement$Type, modelBaker: $ModelBaker$Type, spriteGetter: $Function$Type<($Material$Type), ($TextureAtlasSprite$Type)>, transform: $ModelState$Type, location: $ResourceLocation$Type): $BakedModel
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CustomModelLoader$Type = ($CustomModelLoader);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CustomModelLoader_ = $CustomModelLoader$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/entities/goals/$EvokerRedMerchantWololooSpellGoal" {
import {$Goal, $Goal$Type} from "packages/net/minecraft/world/entity/ai/goal/$Goal"
import {$Evoker, $Evoker$Type} from "packages/net/minecraft/world/entity/monster/$Evoker"

export class $EvokerRedMerchantWololooSpellGoal extends $Goal {

constructor(evoker: $Evoker$Type)

public "canUse"(): boolean
public "canContinueToUse"(): boolean
public "start"(): void
public "stop"(): void
public "tick"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EvokerRedMerchantWololooSpellGoal$Type = ($EvokerRedMerchantWololooSpellGoal);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EvokerRedMerchantWololooSpellGoal_ = $EvokerRedMerchantWololooSpellGoal$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/blocks/$PedestalBlock" {
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$EntityBlock, $EntityBlock$Type} from "packages/net/minecraft/world/level/block/$EntityBlock"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$ModBlockProperties$DisplayStatus, $ModBlockProperties$DisplayStatus$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/$ModBlockProperties$DisplayStatus"
import {$WaterBlock, $WaterBlock$Type} from "packages/net/mehvahdjukaar/moonlight/api/block/$WaterBlock"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$CollisionContext, $CollisionContext$Type} from "packages/net/minecraft/world/phys/shapes/$CollisionContext"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$WorldlyContainer, $WorldlyContainer$Type} from "packages/net/minecraft/world/$WorldlyContainer"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$WorldlyContainerHolder, $WorldlyContainerHolder$Type} from "packages/net/minecraft/world/$WorldlyContainerHolder"
import {$EnumProperty, $EnumProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$EnumProperty"
import {$HitResult, $HitResult$Type} from "packages/net/minecraft/world/phys/$HitResult"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$Direction$Axis, $Direction$Axis$Type} from "packages/net/minecraft/core/$Direction$Axis"
import {$Rotation, $Rotation$Type} from "packages/net/minecraft/world/level/block/$Rotation"
import {$BlockEntityTicker, $BlockEntityTicker$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityTicker"
import {$GameEventListener, $GameEventListener$Type} from "packages/net/minecraft/world/level/gameevent/$GameEventListener"

export class $PedestalBlock extends $WaterBlock implements $EntityBlock, $WorldlyContainerHolder {
static readonly "UP": $BooleanProperty
static readonly "DOWN": $BooleanProperty
static readonly "ITEM_STATUS": $EnumProperty<($ModBlockProperties$DisplayStatus)>
static readonly "AXIS": $EnumProperty<($Direction$Axis)>
static readonly "WATERLOGGED": $BooleanProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(properties: $BlockBehaviour$Properties$Type)

public static "canHaveItemAbove"(level: $LevelAccessor$Type, pos: $BlockPos$Type): boolean
public static "canConnectTo"(state: $BlockState$Type, pos: $BlockPos$Type, world: $LevelAccessor$Type, dir: $Direction$Type, hasItem: boolean): boolean
public "getStateForPlacement"(context: $BlockPlaceContext$Type): $BlockState
public "setPlacedBy"(world: $Level$Type, pos: $BlockPos$Type, state: $BlockState$Type, placer: $LivingEntity$Type, stack: $ItemStack$Type): void
public "getEnchantPowerBonus"(state: $BlockState$Type, world: $LevelReader$Type, pos: $BlockPos$Type): float
public "getCloneItemStack"(state: $BlockState$Type, target: $HitResult$Type, world: $BlockGetter$Type, pos: $BlockPos$Type, player: $Player$Type): $ItemStack
public static "getStatus"(level: $LevelAccessor$Type, pos: $BlockPos$Type, hasItem: boolean): $ModBlockProperties$DisplayStatus
public "updateShape"(stateIn: $BlockState$Type, facing: $Direction$Type, facingState: $BlockState$Type, level: $LevelAccessor$Type, currentPos: $BlockPos$Type, facingPos: $BlockPos$Type): $BlockState
public "use"(state: $BlockState$Type, level: $Level$Type, pos: $BlockPos$Type, player: $Player$Type, handIn: $InteractionHand$Type, hit: $BlockHitResult$Type): $InteractionResult
public "hasAnalogOutputSignal"(state: $BlockState$Type): boolean
public "onRemove"(state: $BlockState$Type, world: $Level$Type, pos: $BlockPos$Type, newState: $BlockState$Type, isMoving: boolean): void
public "rotate"(state: $BlockState$Type, rotation: $Rotation$Type): $BlockState
public "getAnalogOutputSignal"(blockState: $BlockState$Type, world: $Level$Type, pos: $BlockPos$Type): integer
public "getShape"(state: $BlockState$Type, world: $BlockGetter$Type, pos: $BlockPos$Type, context: $CollisionContext$Type): $VoxelShape
public "newBlockEntity"(pPos: $BlockPos$Type, pState: $BlockState$Type): $BlockEntity
public "getContainer"(state: $BlockState$Type, level: $LevelAccessor$Type, pos: $BlockPos$Type): $WorldlyContainer
public "getTicker"<T extends $BlockEntity>(arg0: $Level$Type, arg1: $BlockState$Type, arg2: $BlockEntityType$Type<(T)>): $BlockEntityTicker<(T)>
public "getListener"<T extends $BlockEntity>(arg0: $ServerLevel$Type, arg1: T): $GameEventListener
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PedestalBlock$Type = ($PedestalBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PedestalBlock_ = $PedestalBlock$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/blocks/$AbstractRopeKnotBlock" {
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$Fluid, $Fluid$Type} from "packages/net/minecraft/world/level/material/$Fluid"
import {$EntityBlock, $EntityBlock$Type} from "packages/net/minecraft/world/level/block/$EntityBlock"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$SimpleWaterloggedBlock, $SimpleWaterloggedBlock$Type} from "packages/net/minecraft/world/level/block/$SimpleWaterloggedBlock"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$Mirror, $Mirror$Type} from "packages/net/minecraft/world/level/block/$Mirror"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$FluidState, $FluidState$Type} from "packages/net/minecraft/world/level/material/$FluidState"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$ModBlockProperties$PostType, $ModBlockProperties$PostType$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/$ModBlockProperties$PostType"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$CollisionContext, $CollisionContext$Type} from "packages/net/minecraft/world/phys/shapes/$CollisionContext"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$MimicBlock, $MimicBlock$Type} from "packages/net/mehvahdjukaar/moonlight/api/block/$MimicBlock"
import {$EnumProperty, $EnumProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$EnumProperty"
import {$IRotatable, $IRotatable$Type} from "packages/net/mehvahdjukaar/moonlight/api/block/$IRotatable"
import {$Direction$Axis, $Direction$Axis$Type} from "packages/net/minecraft/core/$Direction$Axis"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$Rotation, $Rotation$Type} from "packages/net/minecraft/world/level/block/$Rotation"
import {$BlockEntityTicker, $BlockEntityTicker$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityTicker"
import {$GameEventListener, $GameEventListener$Type} from "packages/net/minecraft/world/level/gameevent/$GameEventListener"

export class $AbstractRopeKnotBlock extends $MimicBlock implements $SimpleWaterloggedBlock, $EntityBlock, $IRotatable {
static readonly "WATERLOGGED": $BooleanProperty
static readonly "AXIS": $EnumProperty<($Direction$Axis)>
static readonly "POST_TYPE": $EnumProperty<($ModBlockProperties$PostType)>
static readonly "DOWN": $BooleanProperty
static readonly "UP": $BooleanProperty
static readonly "NORTH": $BooleanProperty
static readonly "SOUTH": $BooleanProperty
static readonly "WEST": $BooleanProperty
static readonly "EAST": $BooleanProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation


public "getStateForPlacement"(context: $BlockPlaceContext$Type): $BlockState
public "getRotatedState"(state: $BlockState$Type, world: $LevelAccessor$Type, pos: $BlockPos$Type, rotation: $Rotation$Type, axis: $Direction$Type, hit: $Vec3$Type): $Optional<($BlockState)>
public "onRotated"(newState: $BlockState$Type, oldState: $BlockState$Type, world: $LevelAccessor$Type, pos: $BlockPos$Type, rotation: $Rotation$Type, axis: $Direction$Type, hit: $Vec3$Type): void
public static "convertToRopeKnot"(type: $ModBlockProperties$PostType$Type, state: $BlockState$Type, world: $Level$Type, pos: $BlockPos$Type): $BlockState
public "getSideShape"(): $VoxelShape
public "getFluidState"(state: $BlockState$Type): $FluidState
public "rotate"(state: $BlockState$Type, rotation: $Rotation$Type): $BlockState
public "mirror"(state: $BlockState$Type, mirror: $Mirror$Type): $BlockState
public "getOcclusionShape"(state: $BlockState$Type, reader: $BlockGetter$Type, pos: $BlockPos$Type): $VoxelShape
public "getBlockSupportShape"(state: $BlockState$Type, reader: $BlockGetter$Type, pos: $BlockPos$Type): $VoxelShape
public "getCollisionShape"(state: $BlockState$Type, world: $BlockGetter$Type, pos: $BlockPos$Type, context: $CollisionContext$Type): $VoxelShape
public "getShape"(state: $BlockState$Type, world: $BlockGetter$Type, pos: $BlockPos$Type, context: $CollisionContext$Type): $VoxelShape
public "newBlockEntity"(pPos: $BlockPos$Type, pState: $BlockState$Type): $BlockEntity
public "getPickupSound"(): $Optional<($SoundEvent)>
public "canPlaceLiquid"(arg0: $BlockGetter$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: $Fluid$Type): boolean
public "placeLiquid"(arg0: $LevelAccessor$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: $FluidState$Type): boolean
public "pickupBlock"(arg0: $LevelAccessor$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type): $ItemStack
public "getTicker"<T extends $BlockEntity>(arg0: $Level$Type, arg1: $BlockState$Type, arg2: $BlockEntityType$Type<(T)>): $BlockEntityTicker<(T)>
public "getListener"<T extends $BlockEntity>(arg0: $ServerLevel$Type, arg1: T): $GameEventListener
public "rotateOverAxis"(state: $BlockState$Type, world: $LevelAccessor$Type, pos: $BlockPos$Type, rotation: $Rotation$Type, axis: $Direction$Type, hit: $Vec3$Type): $Optional<($Direction)>
public "getPickupSound"(arg0: $BlockState$Type): $Optional<($SoundEvent)>
get "sideShape"(): $VoxelShape
get "pickupSound"(): $Optional<($SoundEvent)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AbstractRopeKnotBlock$Type = ($AbstractRopeKnotBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AbstractRopeKnotBlock_ = $AbstractRopeKnotBlock$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/renderers/items/$QuiverItemOverlayRenderer" {
import {$Font, $Font$Type} from "packages/net/minecraft/client/gui/$Font"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$IItemDecoratorRenderer, $IItemDecoratorRenderer$Type} from "packages/net/mehvahdjukaar/moonlight/api/item/$IItemDecoratorRenderer"

export class $QuiverItemOverlayRenderer implements $IItemDecoratorRenderer {

constructor()

public "render"(graphics: $GuiGraphics$Type, font: $Font$Type, stack: $ItemStack$Type, x: integer, y: integer): boolean
public static "renderAmmo"(graphics: $GuiGraphics$Type, x: integer, y: integer, ammo: $ItemStack$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $QuiverItemOverlayRenderer$Type = ($QuiverItemOverlayRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $QuiverItemOverlayRenderer_ = $QuiverItemOverlayRenderer$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/network/$PicklePacket" {
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Message, $Message$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/network/$Message"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$ChannelHandler$Context, $ChannelHandler$Context$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/network/$ChannelHandler$Context"

export class $PicklePacket implements $Message {

constructor(appliesTo: $UUID$Type, on: boolean, isJar: boolean)
constructor(buf: $FriendlyByteBuf$Type)

public "handle"(context: $ChannelHandler$Context$Type): void
public "writeToBuffer"(buf: $FriendlyByteBuf$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PicklePacket$Type = ($PicklePacket);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PicklePacket_ = $PicklePacket$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/misc/songs/$Song" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$IntList, $IntList$Type} from "packages/it/unimi/dsi/fastutil/ints/$IntList"
import {$Codec, $Codec$Type} from "packages/com/mojang/serialization/$Codec"

export class $Song {
static readonly "EMPTY": $Song
static readonly "CODEC": $Codec<($Song)>

constructor(name: string, tempo: integer, notes: $List$Type<(integer)>, credits: string, weight: integer)

public "getName"(): string
public "toString"(): string
public "isValid"(): boolean
public "validatePlayReady"(): void
public "getTempo"(): integer
public "getNoteToPlay"(timeSinceStarted: long): $IntList
public "getWeight"(): integer
public "getTranslationKey"(): string
public "getNotes"(): (integer)[]
get "name"(): string
get "valid"(): boolean
get "tempo"(): integer
get "weight"(): integer
get "translationKey"(): string
get "notes"(): (integer)[]
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Song$Type = ($Song);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Song_ = $Song$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/integration/inspirations/$CauldronPlugin" {
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$SoftFluidTank, $SoftFluidTank$Type} from "packages/net/mehvahdjukaar/moonlight/api/fluids/$SoftFluidTank"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"

export class $CauldronPlugin {

constructor()

public static "doStuff"(cauldronTile: $BlockEntity$Type, faucetFluidHolder: $SoftFluidTank$Type, doTransfer: boolean, transferBelow: $Supplier$Type<(boolean)>): boolean
public static "tryAddFluid"(cauldronTile: $BlockEntity$Type, faucetFluidHolder: $SoftFluidTank$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CauldronPlugin$Type = ($CauldronPlugin);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CauldronPlugin_ = $CauldronPlugin$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/common/tile/$HangingFlowerPotBlockTile" {
import {$MimicBlockTile, $MimicBlockTile$Type} from "packages/net/mehvahdjukaar/moonlight/api/block/$MimicBlockTile"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$ModelDataKey, $ModelDataKey$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$ModelDataKey"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$IOwnerProtected, $IOwnerProtected$Type} from "packages/net/mehvahdjukaar/moonlight/api/block/$IOwnerProtected"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$AABB, $AABB$Type} from "packages/net/minecraft/world/phys/$AABB"

export class $HangingFlowerPotBlockTile extends $MimicBlockTile implements $IOwnerProtected {
static readonly "MIMIC_KEY": $ModelDataKey<($BlockState)>
 "blockState": $BlockState

constructor(pos: $BlockPos$Type, state: $BlockState$Type)

public "getOwner"(): $UUID
public "setOwner"(owner: $UUID$Type): void
public "load"(compound: $CompoundTag$Type): void
public "m_183515_"(tag: $CompoundTag$Type): void
public "getRenderBoundingBox"(): $AABB
public "setHeldBlock"(state: $BlockState$Type): boolean
public "isPublic"(): boolean
public "isOwnedBy"(player: $Player$Type): boolean
public "isAccessibleBy"(player: $Player$Type): boolean
public "loadOwner"(tag: $CompoundTag$Type): void
public "saveOwner"(tag: $CompoundTag$Type): void
public "isNotOwnedBy"(player: $Player$Type): boolean
get "owner"(): $UUID
set "owner"(value: $UUID$Type)
get "renderBoundingBox"(): $AABB
set "heldBlock"(value: $BlockState$Type)
get "public"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $HangingFlowerPotBlockTile$Type = ($HangingFlowerPotBlockTile);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $HangingFlowerPotBlockTile_ = $HangingFlowerPotBlockTile$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/particles/$StasisParticle" {
import {$SimpleAnimatedParticle, $SimpleAnimatedParticle$Type} from "packages/net/minecraft/client/particle/$SimpleAnimatedParticle"

export class $StasisParticle extends $SimpleAnimatedParticle {
 "x": double
 "y": double
 "z": double
 "xd": double
 "yd": double
 "zd": double
 "age": integer
 "rCol": float
 "gCol": float
 "bCol": float


public "move"(x: double, y: double, z: double): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $StasisParticle$Type = ($StasisParticle);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $StasisParticle_ = $StasisParticle$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/resources/assets/$SimpleModelBuilder" {
import {$JsonElement, $JsonElement$Type} from "packages/com/google/gson/$JsonElement"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $SimpleModelBuilder {

constructor(parent: $ResourceLocation$Type)

public "build"(): $JsonElement
public "texture"(name: string, texture: $ResourceLocation$Type): $SimpleModelBuilder
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SimpleModelBuilder$Type = ($SimpleModelBuilder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SimpleModelBuilder_ = $SimpleModelBuilder$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/renderers/forge/$CannonChargeOverlayImpl" {
import {$Minecraft, $Minecraft$Type} from "packages/net/minecraft/client/$Minecraft"
import {$CannonChargeOverlay, $CannonChargeOverlay$Type} from "packages/net/mehvahdjukaar/supplementaries/client/cannon/$CannonChargeOverlay"
import {$IGuiOverlay, $IGuiOverlay$Type} from "packages/net/minecraftforge/client/gui/overlay/$IGuiOverlay"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$ForgeGui, $ForgeGui$Type} from "packages/net/minecraftforge/client/gui/overlay/$ForgeGui"

export class $CannonChargeOverlayImpl extends $CannonChargeOverlay implements $IGuiOverlay {
static readonly "GUI_ICONS_LOCATION": $ResourceLocation
readonly "minecraft": $Minecraft
 "vignetteBrightness": float
 "screenWidth": integer
 "screenHeight": integer

constructor()

public "render"(forgeGui: $ForgeGui$Type, graphics: $GuiGraphics$Type, f: float, i: integer, j: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CannonChargeOverlayImpl$Type = ($CannonChargeOverlayImpl);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CannonChargeOverlayImpl_ = $CannonChargeOverlayImpl$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/integration/forge/configured/$ModConfigSelectScreen" {
import {$FormattedCharSequence, $FormattedCharSequence$Type} from "packages/net/minecraft/util/$FormattedCharSequence"
import {$CustomConfigSelectScreen, $CustomConfigSelectScreen$Type} from "packages/net/mehvahdjukaar/moonlight/api/integration/configured/$CustomConfigSelectScreen"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$List, $List$Type} from "packages/java/util/$List"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $ModConfigSelectScreen extends $CustomConfigSelectScreen {
static readonly "MISC_ICONS": $ResourceLocation
static readonly "CONFIGURED_LOGO": $ResourceLocation
 "tooltipText": $List<($FormattedCharSequence)>
 "tooltipOutlineColour": integer
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering

constructor(parent: $Screen$Type)

public static "loadTexture"(arg0: any, arg1: $ResourceLocation$Type): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModConfigSelectScreen$Type = ($ModConfigSelectScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModConfigSelectScreen_ = $ModConfigSelectScreen$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/common/$PendulumAnimation$Config" {
import {$Codec, $Codec$Type} from "packages/com/mojang/serialization/$Codec"

export class $PendulumAnimation$Config {
static readonly "CODEC": $Codec<($PendulumAnimation$Config)>

constructor(minAngle: float, maxAngle: float, damping: float, frequency: float, hitbox: boolean, mass: float, force: float)
constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PendulumAnimation$Config$Type = ($PendulumAnimation$Config);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PendulumAnimation$Config_ = $PendulumAnimation$Config$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/block_models/$BookPileModel" {
import {$Material, $Material$Type} from "packages/net/minecraft/client/resources/model/$Material"
import {$ModelData, $ModelData$Type} from "packages/net/minecraftforge/client/model/data/$ModelData"
import {$ModelState, $ModelState$Type} from "packages/net/minecraft/client/resources/model/$ModelState"
import {$ItemTransforms, $ItemTransforms$Type} from "packages/net/minecraft/client/renderer/block/model/$ItemTransforms"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$ExtraModelData, $ExtraModelData$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$ExtraModelData"
import {$CustomBakedModel, $CustomBakedModel$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$CustomBakedModel"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$BakedModel, $BakedModel$Type} from "packages/net/minecraft/client/resources/model/$BakedModel"
import {$RenderType, $RenderType$Type} from "packages/net/minecraft/client/renderer/$RenderType"
import {$ItemOverrides, $ItemOverrides$Type} from "packages/net/minecraft/client/renderer/block/model/$ItemOverrides"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$ItemDisplayContext, $ItemDisplayContext$Type} from "packages/net/minecraft/world/item/$ItemDisplayContext"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$List, $List$Type} from "packages/java/util/$List"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$ChunkRenderTypeSet, $ChunkRenderTypeSet$Type} from "packages/net/minecraftforge/client/$ChunkRenderTypeSet"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockAndTintGetter, $BlockAndTintGetter$Type} from "packages/net/minecraft/world/level/$BlockAndTintGetter"
import {$TextureAtlasSprite, $TextureAtlasSprite$Type} from "packages/net/minecraft/client/renderer/texture/$TextureAtlasSprite"
import {$BakedQuad, $BakedQuad$Type} from "packages/net/minecraft/client/renderer/block/model/$BakedQuad"

export class $BookPileModel implements $CustomBakedModel {

constructor(transform: $ModelState$Type, spriteGetter: $Function$Type<($Material$Type), ($TextureAtlasSprite$Type)>)

public "usesBlockLight"(): boolean
public "isGui3d"(): boolean
public "getBlockQuads"(state: $BlockState$Type, direction: $Direction$Type, randomSource: $RandomSource$Type, renderType: $RenderType$Type, extraModelData: $ExtraModelData$Type): $List<($BakedQuad)>
public "getBlockParticle"(extraModelData: $ExtraModelData$Type): $TextureAtlasSprite
public "isCustomRenderer"(): boolean
public "getOverrides"(): $ItemOverrides
public "getTransforms"(): $ItemTransforms
public "useAmbientOcclusion"(): boolean
public "getParticleIcon"(): $TextureAtlasSprite
public "getQuads"(state: $BlockState$Type, side: $Direction$Type, rand: $RandomSource$Type): $List<(any)>
public "getQuads"(state: $BlockState$Type, side: $Direction$Type, rand: $RandomSource$Type, modelData: $ModelData$Type, type: $RenderType$Type): $List<(any)>
public "getParticleIcon"(data: $ModelData$Type): $TextureAtlasSprite
public "getModelData"(level: $BlockAndTintGetter$Type, pos: $BlockPos$Type, state: $BlockState$Type, modelData: $ModelData$Type): $ModelData
public "getModelData"(originalData: $ExtraModelData$Type, stack: $ItemStack$Type): $ExtraModelData
public "getModelData"(tileData: $ExtraModelData$Type, pos: $BlockPos$Type, state: $BlockState$Type, level: $BlockAndTintGetter$Type): $ExtraModelData
public "useAmbientOcclusion"(arg0: $BlockState$Type, arg1: $RenderType$Type): boolean
public "useAmbientOcclusion"(arg0: $BlockState$Type): boolean
public "getRenderTypes"(arg0: $ItemStack$Type, arg1: boolean): $List<($RenderType)>
public "getRenderTypes"(arg0: $BlockState$Type, arg1: $RandomSource$Type, arg2: $ModelData$Type): $ChunkRenderTypeSet
public "getRenderPasses"(arg0: $ItemStack$Type, arg1: boolean): $List<($BakedModel)>
public "applyTransform"(arg0: $ItemDisplayContext$Type, arg1: $PoseStack$Type, arg2: boolean): $BakedModel
public "useAmbientOcclusionWithLightEmission"(arg0: $BlockState$Type, arg1: $RenderType$Type): boolean
get "gui3d"(): boolean
get "customRenderer"(): boolean
get "overrides"(): $ItemOverrides
get "transforms"(): $ItemTransforms
get "particleIcon"(): $TextureAtlasSprite
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BookPileModel$Type = ($BookPileModel);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BookPileModel_ = $BookPileModel$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/entities/$FallingAshEntity" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$ImprovedFallingBlockEntity, $ImprovedFallingBlockEntity$Type} from "packages/net/mehvahdjukaar/moonlight/api/entity/$ImprovedFallingBlockEntity"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$ItemLike, $ItemLike$Type} from "packages/net/minecraft/world/level/$ItemLike"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$ItemEntity, $ItemEntity$Type} from "packages/net/minecraft/world/entity/item/$ItemEntity"

export class $FallingAshEntity extends $ImprovedFallingBlockEntity {
 "blockState": $BlockState
 "time": integer
 "dropItem": boolean
 "cancelDrop": boolean
 "blockData": $CompoundTag
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(level: $Level$Type, pos: $BlockPos$Type, blockState: $BlockState$Type)
constructor(level: $Level$Type)
constructor(type: $EntityType$Type<($FallingAshEntity$Type)>, level: $Level$Type)

public static "fall"(level: $Level$Type, pos: $BlockPos$Type, state: $BlockState$Type): $FallingAshEntity
public "tick"(): void
public static "isFree"(pState: $BlockState$Type): boolean
public "spawnAtLocation"(pItem: $ItemLike$Type): $ItemEntity
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FallingAshEntity$Type = ($FallingAshEntity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FallingAshEntity_ = $FallingAshEntity$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/screens/$SackScreen" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$AbstractContainerScreen, $AbstractContainerScreen$Type} from "packages/net/minecraft/client/gui/screens/inventory/$AbstractContainerScreen"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$VariableSizeContainerMenu, $VariableSizeContainerMenu$Type} from "packages/net/mehvahdjukaar/supplementaries/common/inventories/$VariableSizeContainerMenu"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"

export class $SackScreen extends $AbstractContainerScreen<($VariableSizeContainerMenu)> {
static readonly "INVENTORY_LOCATION": $ResourceLocation
static readonly "SLOT_ITEM_BLIT_OFFSET": integer
 "imageWidth": integer
 "hoveredSlot": $Slot
 "leftPos": integer
 "topPos": integer
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering

constructor(container: $VariableSizeContainerMenu$Type, inventory: $Inventory$Type, text: $Component$Type)

public "keyPressed"(key: integer, b: integer, c: integer): boolean
public "m_7856_"(): void
public "removed"(): void
public "render"(graphics: $GuiGraphics$Type, mouseX: integer, mouseY: integer, partialTicks: float): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SackScreen$Type = ($SackScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SackScreen_ = $SackScreen$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/reg/$ModTags" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$SoftFluid, $SoftFluid$Type} from "packages/net/mehvahdjukaar/moonlight/api/fluids/$SoftFluid"

export class $ModTags {
static readonly "CAN_BOIL": $TagKey<($SoftFluid)>
static readonly "CAULDRON_BLACKLIST": $TagKey<($SoftFluid)>
static readonly "POSTS": $TagKey<($Block)>
static readonly "PALISADES": $TagKey<($Block)>
static readonly "BEAMS": $TagKey<($Block)>
static readonly "WALLS": $TagKey<($Block)>
static readonly "HEAT_SOURCES": $TagKey<($Block)>
static readonly "STAIRS_CARPETS": $TagKey<($Block)>
static readonly "VINE_SUPPORT": $TagKey<($Block)>
static readonly "GOES_IN_LECTERN": $TagKey<($Item)>
static readonly "GOES_IN_TRIPWIRE_HOOK": $TagKey<($Item)>
static readonly "SET_ENTITY_ON_FIRE": $TagKey<($Item)>

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModTags$Type = ($ModTags);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModTags_ = $ModTags$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/item/$FuelItem" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$RecipeType, $RecipeType$Type} from "packages/net/minecraft/world/item/crafting/$RecipeType"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $FuelItem extends $Item {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(pProperties: $Item$Properties$Type, burnTime: $Supplier$Type<(integer)>)

public "getBurnTime"(itemStack: $ItemStack$Type, recipeType: $RecipeType$Type<(any)>): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FuelItem$Type = ($FuelItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FuelItem_ = $FuelItem$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/renderers/forge/$PicklePlayer" {
import {$PlayerEvent$PlayerLoggedOutEvent, $PlayerEvent$PlayerLoggedOutEvent$Type} from "packages/net/minecraftforge/event/entity/player/$PlayerEvent$PlayerLoggedOutEvent"
import {$PlayerEvent$PlayerLoggedInEvent, $PlayerEvent$PlayerLoggedInEvent$Type} from "packages/net/minecraftforge/event/entity/player/$PlayerEvent$PlayerLoggedInEvent"
import {$RenderPlayerEvent$Pre, $RenderPlayerEvent$Pre$Type} from "packages/net/minecraftforge/client/event/$RenderPlayerEvent$Pre"

export class $PicklePlayer {

constructor()

public static "onPlayerLoggedIn"(event: $PlayerEvent$PlayerLoggedInEvent$Type): void
public static "onChatEvent"(m: string): boolean
public static "onRenderPlayerPre"(event: $RenderPlayerEvent$Pre$Type): void
public static "onLogout"(event: $PlayerEvent$PlayerLoggedOutEvent$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PicklePlayer$Type = ($PicklePlayer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PicklePlayer_ = $PicklePlayer$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/blocks/$RopeKnotBlock" {
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$AbstractRopeKnotBlock, $AbstractRopeKnotBlock$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/blocks/$AbstractRopeKnotBlock"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$IRopeConnection, $IRopeConnection$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/$IRopeConnection"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$EnumProperty, $EnumProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$EnumProperty"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$Direction$Axis, $Direction$Axis$Type} from "packages/net/minecraft/core/$Direction$Axis"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$ModBlockProperties$PostType, $ModBlockProperties$PostType$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/$ModBlockProperties$PostType"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $RopeKnotBlock extends $AbstractRopeKnotBlock implements $IRopeConnection {
static readonly "SIDE_SHAPE": $VoxelShape
static readonly "WATERLOGGED": $BooleanProperty
static readonly "AXIS": $EnumProperty<($Direction$Axis)>
static readonly "POST_TYPE": $EnumProperty<($ModBlockProperties$PostType)>
static readonly "DOWN": $BooleanProperty
static readonly "UP": $BooleanProperty
static readonly "NORTH": $BooleanProperty
static readonly "SOUTH": $BooleanProperty
static readonly "WEST": $BooleanProperty
static readonly "EAST": $BooleanProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(properties: $BlockBehaviour$Properties$Type)

public "canSideAcceptConnection"(state: $BlockState$Type, direction: $Direction$Type): boolean
public "getCloneItemStack"(level: $BlockGetter$Type, pos: $BlockPos$Type, state: $BlockState$Type): $ItemStack
public "getSideShape"(): $VoxelShape
public "updateShape"(state: $BlockState$Type, facing: $Direction$Type, facingState: $BlockState$Type, world: $LevelAccessor$Type, currentPos: $BlockPos$Type, facingPos: $BlockPos$Type): $BlockState
public "use"(state: $BlockState$Type, world: $Level$Type, pos: $BlockPos$Type, player: $Player$Type, hand: $InteractionHand$Type, hit: $BlockHitResult$Type): $InteractionResult
public "newBlockEntity"(pPos: $BlockPos$Type, pState: $BlockState$Type): $BlockEntity
public "shouldConnectToFace"(thisState: $BlockState$Type, facingState: $BlockState$Type, facingPos: $BlockPos$Type, dir: $Direction$Type, world: $LevelReader$Type): boolean
public static "canConnectDown"(downState: $BlockState$Type): boolean
public static "isSupportingCeiling"(upState: $BlockState$Type, pos: $BlockPos$Type, world: $LevelReader$Type): boolean
public static "isSupportingCeiling"(pos: $BlockPos$Type, world: $LevelReader$Type): boolean
get "sideShape"(): $VoxelShape
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RopeKnotBlock$Type = ($RopeKnotBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RopeKnotBlock_ = $RopeKnotBlock$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/common/forge/$FlowerPotHandlerImpl" {
import {$FlowerPotBlock, $FlowerPotBlock$Type} from "packages/net/minecraft/world/level/block/$FlowerPotBlock"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"

export class $FlowerPotHandlerImpl {

constructor()

public static "setup"(): void
public static "getFullPot"(emptyPot: $FlowerPotBlock$Type, flowerBlock: $Block$Type): $Block
public static "isEmptyPot"(b: $Block$Type): boolean
public static "getEmptyPot"(fullPot: $FlowerPotBlock$Type): $Block
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FlowerPotHandlerImpl$Type = ($FlowerPotHandlerImpl);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FlowerPotHandlerImpl_ = $FlowerPotHandlerImpl$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/entity/$ImprovedProjectileEntity" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$ThrowableItemProjectile, $ThrowableItemProjectile$Type} from "packages/net/minecraft/world/entity/projectile/$ThrowableItemProjectile"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $ImprovedProjectileEntity extends $ThrowableItemProjectile {
/**
 * 
 * @deprecated
 */
 "touchedGround": boolean
/**
 * 
 * @deprecated
 */
 "groundTime": integer
 "ownerUUID": $UUID
 "cachedOwner": $Entity
 "leftOwner": boolean
 "hasBeenShot": boolean
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>


public "collidesWithBlocks"(): boolean
public "reachedEndOfLife"(): void
/**
 * 
 * @deprecated
 */
public "isNoPhysics"(): boolean
public "canHarmOwner"(): boolean
/**
 * 
 * @deprecated
 */
public "setNoPhysics"(noGravity: boolean): void
public "tick"(): void
public "readAdditionalSaveData"(tag: $CompoundTag$Type): void
public "addAdditionalSaveData"(tag: $CompoundTag$Type): void
public "maxUpStep"(): float
public "spawnTrailParticles"(): void
/**
 * 
 * @deprecated
 */
public "spawnTrailParticles"(oldPos: $Vec3$Type, newPos: $Vec3$Type): void
public "hasReachedEndOfLife"(): boolean
public "getDefaultShootVelocity"(): float
public "shootFromRotation"(shooter: $Entity$Type, x: float, y: float, z: float, velocity: float, inaccuracy: float): void
public "shoot"(x: double, y: double, z: double, velocity: float, inaccuracy: float): void
get "noPhysics"(): boolean
set "noPhysics"(value: boolean)
get "defaultShootVelocity"(): float
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ImprovedProjectileEntity$Type = ($ImprovedProjectileEntity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ImprovedProjectileEntity_ = $ImprovedProjectileEntity$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/client/model/$CustomBakedModel" {
import {$ModelData, $ModelData$Type} from "packages/net/minecraftforge/client/model/data/$ModelData"
import {$ItemTransforms, $ItemTransforms$Type} from "packages/net/minecraft/client/renderer/block/model/$ItemTransforms"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$ExtraModelData, $ExtraModelData$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$ExtraModelData"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$BakedModel, $BakedModel$Type} from "packages/net/minecraft/client/resources/model/$BakedModel"
import {$RenderType, $RenderType$Type} from "packages/net/minecraft/client/renderer/$RenderType"
import {$ItemOverrides, $ItemOverrides$Type} from "packages/net/minecraft/client/renderer/block/model/$ItemOverrides"
import {$ItemDisplayContext, $ItemDisplayContext$Type} from "packages/net/minecraft/world/item/$ItemDisplayContext"
import {$IDynamicBakedModel, $IDynamicBakedModel$Type} from "packages/net/minecraftforge/client/model/$IDynamicBakedModel"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$List, $List$Type} from "packages/java/util/$List"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$ChunkRenderTypeSet, $ChunkRenderTypeSet$Type} from "packages/net/minecraftforge/client/$ChunkRenderTypeSet"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockAndTintGetter, $BlockAndTintGetter$Type} from "packages/net/minecraft/world/level/$BlockAndTintGetter"
import {$TextureAtlasSprite, $TextureAtlasSprite$Type} from "packages/net/minecraft/client/renderer/texture/$TextureAtlasSprite"
import {$BakedQuad, $BakedQuad$Type} from "packages/net/minecraft/client/renderer/block/model/$BakedQuad"

export interface $CustomBakedModel extends $BakedModel, $IDynamicBakedModel {

 "getParticleIcon"(): $TextureAtlasSprite
 "getBlockQuads"(arg0: $BlockState$Type, arg1: $Direction$Type, arg2: $RandomSource$Type, arg3: $RenderType$Type, arg4: $ExtraModelData$Type): $List<($BakedQuad)>
 "getBlockParticle"(arg0: $ExtraModelData$Type): $TextureAtlasSprite
 "getQuads"(state: $BlockState$Type, side: $Direction$Type, rand: $RandomSource$Type): $List<(any)>
 "getQuads"(state: $BlockState$Type, side: $Direction$Type, rand: $RandomSource$Type, modelData: $ModelData$Type, type: $RenderType$Type): $List<(any)>
 "getParticleIcon"(data: $ModelData$Type): $TextureAtlasSprite
 "getModelData"(level: $BlockAndTintGetter$Type, pos: $BlockPos$Type, state: $BlockState$Type, modelData: $ModelData$Type): $ModelData
 "getModelData"(originalData: $ExtraModelData$Type, stack: $ItemStack$Type): $ExtraModelData
 "getModelData"(tileData: $ExtraModelData$Type, pos: $BlockPos$Type, state: $BlockState$Type, level: $BlockAndTintGetter$Type): $ExtraModelData
 "usesBlockLight"(): boolean
 "isGui3d"(): boolean
 "isCustomRenderer"(): boolean
 "getOverrides"(): $ItemOverrides
/**
 * 
 * @deprecated
 */
 "getTransforms"(): $ItemTransforms
 "useAmbientOcclusion"(): boolean
 "useAmbientOcclusion"(arg0: $BlockState$Type, arg1: $RenderType$Type): boolean
 "useAmbientOcclusion"(arg0: $BlockState$Type): boolean
 "getRenderTypes"(arg0: $ItemStack$Type, arg1: boolean): $List<($RenderType)>
 "getRenderTypes"(arg0: $BlockState$Type, arg1: $RandomSource$Type, arg2: $ModelData$Type): $ChunkRenderTypeSet
 "getRenderPasses"(arg0: $ItemStack$Type, arg1: boolean): $List<($BakedModel)>
 "applyTransform"(arg0: $ItemDisplayContext$Type, arg1: $PoseStack$Type, arg2: boolean): $BakedModel
 "useAmbientOcclusionWithLightEmission"(arg0: $BlockState$Type, arg1: $RenderType$Type): boolean
}

export namespace $CustomBakedModel {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CustomBakedModel$Type = ($CustomBakedModel);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CustomBakedModel_ = $CustomBakedModel$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/misc/$MapLightHandler$LightData" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$NativeImage, $NativeImage$Type} from "packages/com/mojang/blaze3d/platform/$NativeImage"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$CustomMapData$Type, $CustomMapData$Type$Type} from "packages/net/mehvahdjukaar/moonlight/api/map/$CustomMapData$Type"
import {$MapItemSavedData, $MapItemSavedData$Type} from "packages/net/minecraft/world/level/saveddata/maps/$MapItemSavedData"
import {$CustomMapData, $CustomMapData$Type} from "packages/net/mehvahdjukaar/moonlight/api/map/$CustomMapData"
import {$MapLightHandler$Counter, $MapLightHandler$Counter$Type} from "packages/net/mehvahdjukaar/supplementaries/common/misc/$MapLightHandler$Counter"
import {$ResourceKey, $ResourceKey$Type} from "packages/net/minecraft/resources/$ResourceKey"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $MapLightHandler$LightData implements $CustomMapData<($MapLightHandler$Counter)> {
static readonly "MIN_X": string
static readonly "MAX_X": string
static readonly "MIN_Z": string

constructor()

public "load"(tag: $CompoundTag$Type): void
public "clear"(): void
public "save"(tag: $CompoundTag$Type): void
public "getType"(): $CustomMapData$Type<(any)>
public "processTexture"(texture: $NativeImage$Type, startX: integer, startY: integer, levelKey: $ResourceKey$Type<($Level$Type)>): void
public "persistOnCopyOrLock"(): boolean
public "loadUpdateTag"(tag: $CompoundTag$Type): void
public "saveToUpdateTag"(tag: $CompoundTag$Type, dc: $MapLightHandler$Counter$Type): void
public "setLightLevel"(x: integer, z: integer, blockLight: integer, skyLight: integer, data: $MapItemSavedData$Type): void
public "setDirty"(data: $MapItemSavedData$Type, dirtySetter: $Consumer$Type<($MapLightHandler$Counter$Type)>): void
public "onItemTooltip"(data: $MapItemSavedData$Type, stack: $ItemStack$Type): $Component
public "onItemUpdate"(data: $MapItemSavedData$Type, entity: $Entity$Type): boolean
get "type"(): $CustomMapData$Type<(any)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MapLightHandler$LightData$Type = ($MapLightHandler$LightData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MapLightHandler$LightData_ = $MapLightHandler$LightData$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/misc/$OptionalMixin" {
import {$Annotation, $Annotation$Type} from "packages/java/lang/annotation/$Annotation"
import {$Class, $Class$Type} from "packages/java/lang/$Class"

export interface $OptionalMixin extends $Annotation {

 "value"(): string
 "classLoaded"(): boolean
 "equals"(arg0: any): boolean
 "toString"(): string
 "hashCode"(): integer
 "annotationType"(): $Class<(any)>
}

export namespace $OptionalMixin {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $OptionalMixin$Type = ($OptionalMixin);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $OptionalMixin_ = $OptionalMixin$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/$IMapDisplay" {
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export interface $IMapDisplay {

 "getMapStack"(): $ItemStack

(): $ItemStack
}

export namespace $IMapDisplay {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IMapDisplay$Type = ($IMapDisplay);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IMapDisplay_ = $IMapDisplay$Type;
}}
declare module "packages/net/mehvahdjukaar/dummmmmmy/common/$TargetDummyEntity" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$WalkAnimationState, $WalkAnimationState$Type} from "packages/net/minecraft/world/entity/$WalkAnimationState"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$PathNavigation, $PathNavigation$Type} from "packages/net/minecraft/world/entity/ai/navigation/$PathNavigation"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$AttributeMap, $AttributeMap$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeMap"
import {$ClientGamePacketListener, $ClientGamePacketListener$Type} from "packages/net/minecraft/network/protocol/game/$ClientGamePacketListener"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$Mob, $Mob$Type} from "packages/net/minecraft/world/entity/$Mob"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$LevelRenderer, $LevelRenderer$Type} from "packages/net/minecraft/client/renderer/$LevelRenderer"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$GoalSelector, $GoalSelector$Type} from "packages/net/minecraft/world/entity/ai/goal/$GoalSelector"
import {$Packet, $Packet$Type} from "packages/net/minecraft/network/protocol/$Packet"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$CombatEntry, $CombatEntry$Type} from "packages/net/minecraft/world/damagesource/$CombatEntry"
import {$MobType, $MobType$Type} from "packages/net/minecraft/world/entity/$MobType"
import {$AttributeSupplier$Builder, $AttributeSupplier$Builder$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeSupplier$Builder"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $TargetDummyEntity extends $Mob {
static readonly "MAX_WEARING_ARMOR_CHANCE": float
static readonly "MAX_PICKUP_LOOT_CHANCE": float
static readonly "MAX_ENCHANTED_ARMOR_CHANCE": float
static readonly "MAX_ENCHANTED_WEAPON_CHANCE": float
static readonly "LEASH_TAG": string
static readonly "DEFAULT_EQUIPMENT_DROP_CHANCE": float
static readonly "PRESERVE_ITEM_DROP_CHANCE": integer
static readonly "UPDATE_GOAL_SELECTOR_EVERY_N_TICKS": integer
 "ambientSoundTime": integer
 "navigation": $PathNavigation
readonly "goalSelector": $GoalSelector
readonly "targetSelector": $GoalSelector
 "leashInfoTag": $CompoundTag
static readonly "HAND_SLOTS": integer
static readonly "ARMOR_SLOTS": integer
static readonly "EQUIPMENT_SLOT_OFFSET": integer
static readonly "ARMOR_SLOT_OFFSET": integer
static readonly "SWING_DURATION": integer
static readonly "PLAYER_HURT_EXPERIENCE_TIME": integer
static readonly "MIN_MOVEMENT_DISTANCE": double
static readonly "DEFAULT_BASE_GRAVITY": double
static readonly "DEATH_DURATION": integer
static readonly "USE_ITEM_INTERVAL": integer
static readonly "EXTRA_RENDER_CULLING_SIZE_WITH_BIG_HAT": float
 "attributes": $AttributeMap
readonly "activeEffects": $Map<($MobEffect), ($MobEffectInstance)>
 "swinging": boolean
 "swingingArm": $InteractionHand
 "swingTime": integer
 "removeArrowTime": integer
 "removeStingerTime": integer
 "hurtTime": integer
 "hurtDuration": integer
 "deathTime": integer
 "oAttackAnim": float
 "attackAnim": float
 "attackStrengthTicker": integer
readonly "walkAnimation": $WalkAnimationState
readonly "invulnerableDuration": integer
readonly "timeOffs": float
readonly "rotA": float
 "yBodyRot": float
 "yBodyRotO": float
 "yHeadRot": float
 "yHeadRotO": float
 "dead": boolean
 "jumping": boolean
 "xxa": float
 "yya": float
 "zza": float
 "effectsDirty": boolean
 "noJumpDelay": integer
 "entityJs$builder": any
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(type: $EntityType$Type<($TargetDummyEntity$Type)>, world: $Level$Type)
constructor(world: $Level$Type)

public "getLastEntry"(): $CombatEntry
public "dismantle"(drops: boolean): void
public "isPushedByFluid"(): boolean
public "setHealth"(newHealth: float): void
public "kill"(): void
public "canBreatheUnderwater"(): boolean
public "updateAnimation"(shake: float): void
public "tick"(): void
public "aiStep"(): void
public "m_7975_"(ds: $DamageSource$Type): $SoundEvent
public "m_5907_"(): void
public "m_5592_"(): $SoundEvent
public "readAdditionalSaveData"(tag: $CompoundTag$Type): void
public "addAdditionalSaveData"(tag: $CompoundTag$Type): void
public "attack"(source: $DamageSource$Type, damage: float): boolean
public "isInvulnerableTo"(source: $DamageSource$Type): boolean
public "getMobType"(): $MobType
public "knockback"(strength: double, x: double, z: double): void
public "setDeltaMovement"(motionIn: $Vec3$Type): void
public "causeFallDamage"(fallDistance: float, multiplier: float, damageSource: $DamageSource$Type): boolean
public "setYBodyRot"(pOffset: float): void
public "setYHeadRot"(pRotation: float): void
public "isPushable"(): boolean
public "setNoGravity"(ignored: boolean): void
public static "makeAttributes"(): $AttributeSupplier$Builder
public "getAddEntityPacket"(): $Packet<($ClientGamePacketListener)>
public "removeWhenFarAway"(distanceToClosestPlayer: double): boolean
public "canScare"(): boolean
public "interactAt"(player: $Player$Type, vec: $Vec3$Type, hand: $InteractionHand$Type): $InteractionResult
public "getShake"(partialTicks: float): float
public "isSheared"(): boolean
public "setSheared"(sheared: boolean): void
public "canAttract"(): boolean
public "getNextNumberPos"(): integer
public "moist"(attacker: $Entity$Type, critModifier: float): void
public "getPickResult"(): $ItemStack
public "getAnimationPosition"(partialTicks: float): float
public "applyEquipmentModifiers"(): void
public "lithiumOnEquipmentChanged"(): void
public "tdv$getDynamicLightX"(): double
public "tdv$getDynamicLightZ"(): double
public "tdv$getDynamicLightWorld"(): $Level
public "tdv$shouldUpdateDynamicLight"(): boolean
public "tdv$resetDynamicLight"(): void
public "tdv$getDynamicLightY"(): double
public "tdv$lambdynlights$scheduleTrackedChunksRebuild"(arg0: $LevelRenderer$Type): void
public "tdv$lambdynlights$updateDynamicLight"(arg0: $LevelRenderer$Type): boolean
public "getCachedFeetBlockState"(): $BlockState
get "lastEntry"(): $CombatEntry
get "pushedByFluid"(): boolean
set "health"(value: float)
get "mobType"(): $MobType
set "deltaMovement"(value: $Vec3$Type)
set "yBodyRot"(value: float)
set "yHeadRot"(value: float)
get "pushable"(): boolean
set "noGravity"(value: boolean)
get "addEntityPacket"(): $Packet<($ClientGamePacketListener)>
get "sheared"(): boolean
set "sheared"(value: boolean)
get "nextNumberPos"(): integer
get "pickResult"(): $ItemStack
get "cachedFeetBlockState"(): $BlockState
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TargetDummyEntity$Type = ($TargetDummyEntity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TargetDummyEntity_ = $TargetDummyEntity$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/map/client/$DecorationRenderer" {
import {$VertexConsumer, $VertexConsumer$Type} from "packages/com/mojang/blaze3d/vertex/$VertexConsumer"
import {$CustomMapDecoration, $CustomMapDecoration$Type} from "packages/net/mehvahdjukaar/moonlight/api/map/$CustomMapDecoration"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$MapItemSavedData, $MapItemSavedData$Type} from "packages/net/minecraft/world/level/saveddata/maps/$MapItemSavedData"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $DecorationRenderer<T extends $CustomMapDecoration> {

/**
 * 
 * @deprecated
 */
constructor(texture: $ResourceLocation$Type, mapColor: integer, renderOnFrame: boolean)
constructor(texture: $ResourceLocation$Type)

public "render"(decoration: T, matrixStack: $PoseStack$Type, vertexBuilder: $VertexConsumer$Type, buffer: $MultiBufferSource$Type, mapData: $MapItemSavedData$Type, isOnFrame: boolean, light: integer, index: integer): boolean
public "render"(decoration: T, matrixStack: $PoseStack$Type, vertexBuilder: $VertexConsumer$Type, buffer: $MultiBufferSource$Type, mapData: $MapItemSavedData$Type, isOnFrame: boolean, light: integer, index: integer, rendersText: boolean): boolean
public "renderDecorationSprite"(matrixStack: $PoseStack$Type, buffer: $MultiBufferSource$Type, vertexBuilder: $VertexConsumer$Type, light: integer, index: integer, color: integer, alpha: integer, outline: boolean): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DecorationRenderer$Type<T> = ($DecorationRenderer<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DecorationRenderer_<T> = $DecorationRenderer$Type<(T)>;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/misc/map_markers/markers/$SignPostMarker" {
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$SimpleMapBlockMarker, $SimpleMapBlockMarker$Type} from "packages/net/mehvahdjukaar/moonlight/api/map/markers/$SimpleMapBlockMarker"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $SignPostMarker extends $SimpleMapBlockMarker {
static readonly "HAS_SMALL_TEXTURE_FLAG": integer

constructor()
constructor(pos: $BlockPos$Type, name: $Component$Type)

public static "getFromWorld"(world: $BlockGetter$Type, pos: $BlockPos$Type): $SignPostMarker
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SignPostMarker$Type = ($SignPostMarker);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SignPostMarker_ = $SignPostMarker$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/events/$EarlyPackReloadEvent" {
import {$PackType, $PackType$Type} from "packages/net/minecraft/server/packs/$PackType"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$List, $List$Type} from "packages/java/util/$List"
import {$SimpleEvent, $SimpleEvent$Type} from "packages/net/mehvahdjukaar/moonlight/api/events/$SimpleEvent"
import {$PackResources, $PackResources$Type} from "packages/net/minecraft/server/packs/$PackResources"
import {$ResourceManager, $ResourceManager$Type} from "packages/net/minecraft/server/packs/resources/$ResourceManager"

export class $EarlyPackReloadEvent extends $Record implements $SimpleEvent {

constructor(packs: $List$Type<($PackResources$Type)>, manager: $ResourceManager$Type, type: $PackType$Type)

public "type"(): $PackType
public "equals"(o: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "manager"(): $ResourceManager
public "packs"(): $List<($PackResources)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EarlyPackReloadEvent$Type = ($EarlyPackReloadEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EarlyPackReloadEvent_ = $EarlyPackReloadEvent$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/inventories/$TrappedPresentContainerMenu" {
import {$PresentContainerMenu, $PresentContainerMenu$Type} from "packages/net/mehvahdjukaar/supplementaries/common/inventories/$PresentContainerMenu"
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"
import {$AbstractPresentBlockTile, $AbstractPresentBlockTile$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$AbstractPresentBlockTile"

export class $TrappedPresentContainerMenu extends $PresentContainerMenu {
static readonly "SLOT_CLICKED_OUTSIDE": integer
static readonly "QUICKCRAFT_TYPE_CHARITABLE": integer
static readonly "QUICKCRAFT_TYPE_GREEDY": integer
static readonly "QUICKCRAFT_TYPE_CLONE": integer
static readonly "QUICKCRAFT_HEADER_START": integer
static readonly "QUICKCRAFT_HEADER_CONTINUE": integer
static readonly "QUICKCRAFT_HEADER_END": integer
static readonly "CARRIED_SLOT_SIZE": integer
readonly "lastSlots": $NonNullList<($ItemStack)>
readonly "slots": $NonNullList<($Slot)>
 "remoteSlots": $NonNullList<($ItemStack)>
 "containerId": integer

constructor(id: integer, playerInventory: $Inventory$Type, packetBuffer: $FriendlyByteBuf$Type)
constructor(id: integer, playerInventory: $Inventory$Type, inventory: $AbstractPresentBlockTile$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TrappedPresentContainerMenu$Type = ($TrappedPresentContainerMenu);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TrappedPresentContainerMenu_ = $TrappedPresentContainerMenu$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/core/criteria_triggers/$GrindItemTrigger$Instance" {
import {$JsonObject, $JsonObject$Type} from "packages/com/google/gson/$JsonObject"
import {$ItemPredicate, $ItemPredicate$Type} from "packages/net/minecraft/advancements/critereon/$ItemPredicate"
import {$AbstractCriterionTriggerInstance, $AbstractCriterionTriggerInstance$Type} from "packages/net/minecraft/advancements/critereon/$AbstractCriterionTriggerInstance"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$SerializationContext, $SerializationContext$Type} from "packages/net/minecraft/advancements/critereon/$SerializationContext"
import {$ContextAwarePredicate, $ContextAwarePredicate$Type} from "packages/net/minecraft/advancements/critereon/$ContextAwarePredicate"

export class $GrindItemTrigger$Instance extends $AbstractCriterionTriggerInstance {

constructor(contextAwarePredicate: $ContextAwarePredicate$Type, item: $ItemPredicate$Type)

public "matches"(stack: $ItemStack$Type): boolean
public "serializeToJson"(serializer: $SerializationContext$Type): $JsonObject
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GrindItemTrigger$Instance$Type = ($GrindItemTrigger$Instance);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GrindItemTrigger$Instance_ = $GrindItemTrigger$Instance$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/items/crafting/$TatteredBookRecipe" {
import {$RegistryAccess, $RegistryAccess$Type} from "packages/net/minecraft/core/$RegistryAccess"
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$RecipeSerializer, $RecipeSerializer$Type} from "packages/net/minecraft/world/item/crafting/$RecipeSerializer"
import {$CustomRecipe, $CustomRecipe$Type} from "packages/net/minecraft/world/item/crafting/$CustomRecipe"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$CraftingContainer, $CraftingContainer$Type} from "packages/net/minecraft/world/inventory/$CraftingContainer"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$CraftingBookCategory, $CraftingBookCategory$Type} from "packages/net/minecraft/world/item/crafting/$CraftingBookCategory"

export class $TatteredBookRecipe extends $CustomRecipe {

constructor(idIn: $ResourceLocation$Type, category: $CraftingBookCategory$Type)

public "matches"(inv: $CraftingContainer$Type, worldIn: $Level$Type): boolean
public "getRemainingItems"(inv: $CraftingContainer$Type): $NonNullList<($ItemStack)>
public "canCraftInDimensions"(width: integer, height: integer): boolean
public "getSerializer"(): $RecipeSerializer<(any)>
public "assemble"(inv: $CraftingContainer$Type, access: $RegistryAccess$Type): $ItemStack
get "serializer"(): $RecipeSerializer<(any)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TatteredBookRecipe$Type = ($TatteredBookRecipe);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TatteredBookRecipe_ = $TatteredBookRecipe$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/util/math/kmeans/$KMeans" {
import {$LinkedList, $LinkedList$Type} from "packages/java/util/$LinkedList"
import {$DataSet, $DataSet$Type} from "packages/net/mehvahdjukaar/moonlight/api/util/math/kmeans/$DataSet"
import {$IDataEntry, $IDataEntry$Type} from "packages/net/mehvahdjukaar/moonlight/api/util/math/kmeans/$IDataEntry"

export class $KMeans {

constructor()

public static "kMeans"<A>(data: $DataSet$Type<(A)>, K: integer): void
public static "kMeansPP"<A>(data: $DataSet$Type<(A)>, K: integer): $LinkedList<($IDataEntry<(A)>)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $KMeans$Type = ($KMeans);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $KMeans_ = $KMeans$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/items/$SlingshotItem" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$HumanoidArm, $HumanoidArm$Type} from "packages/net/minecraft/world/entity/$HumanoidArm"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$HumanoidModel, $HumanoidModel$Type} from "packages/net/minecraft/client/model/$HumanoidModel"
import {$ProjectileWeaponItem, $ProjectileWeaponItem$Type} from "packages/net/minecraft/world/item/$ProjectileWeaponItem"
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$IFirstPersonAnimationProvider, $IFirstPersonAnimationProvider$Type} from "packages/net/mehvahdjukaar/moonlight/api/item/$IFirstPersonAnimationProvider"
import {$Vanishable, $Vanishable$Type} from "packages/net/minecraft/world/item/$Vanishable"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ModelPart, $ModelPart$Type} from "packages/net/minecraft/client/model/geom/$ModelPart"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$InteractionResultHolder, $InteractionResultHolder$Type} from "packages/net/minecraft/world/$InteractionResultHolder"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$Enchantment, $Enchantment$Type} from "packages/net/minecraft/world/item/enchantment/$Enchantment"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$IThirdPersonAnimationProvider, $IThirdPersonAnimationProvider$Type} from "packages/net/mehvahdjukaar/moonlight/api/item/$IThirdPersonAnimationProvider"
import {$UseAnim, $UseAnim$Type} from "packages/net/minecraft/world/item/$UseAnim"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $SlingshotItem extends $ProjectileWeaponItem implements $Vanishable, $IFirstPersonAnimationProvider, $IThirdPersonAnimationProvider {
static readonly "ARROW_ONLY": $Predicate<($ItemStack)>
static readonly "ARROW_OR_FIREWORK": $Predicate<($ItemStack)>
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(properties: $Item$Properties$Type)

public static "getChargeDuration"(stack: $ItemStack$Type): integer
public "getChargeSound"(stack: $ItemStack$Type): $SoundEvent
public "getAllSupportedProjectiles"(): $Predicate<($ItemStack)>
public "canApplyAtEnchantingTable"(stack: $ItemStack$Type, enchantment: $Enchantment$Type): boolean
public "getUseDuration"(stack: $ItemStack$Type): integer
public "use"(world: $Level$Type, player: $Player$Type, hand: $InteractionHand$Type): $InteractionResultHolder<($ItemStack)>
public "releaseUsing"(stack: $ItemStack$Type, world: $Level$Type, entity: $LivingEntity$Type, timeLeft: integer): void
public "getUseAnimation"(stack: $ItemStack$Type): $UseAnim
public static "animateCrossbowCharge"(offHand: $ModelPart$Type, mainHand: $ModelPart$Type, entity: $LivingEntity$Type, right: boolean): void
public "animateItemFirstPerson"(entity: $LivingEntity$Type, stack: $ItemStack$Type, hand: $InteractionHand$Type, matrixStack: $PoseStack$Type, partialTicks: float, pitch: float, attackAnim: float, handHeight: float): void
public "poseLeftArm"<T extends $LivingEntity>(stack: $ItemStack$Type, model: $HumanoidModel$Type<(T)>, entity: T, mainHand: $HumanoidArm$Type): boolean
public "poseRightArm"<T extends $LivingEntity>(stack: $ItemStack$Type, model: $HumanoidModel$Type<(T)>, entity: T, mainHand: $HumanoidArm$Type): boolean
public "getDefaultProjectileRange"(): integer
public "getPowerForTime"(stack: $ItemStack$Type, timeLeft: float): float
public static "get"(target: $Item$Type): $IFirstPersonAnimationProvider
public static "attachToItem"(target: $Item$Type, object: $IFirstPersonAnimationProvider$Type): void
public "animateItemFirstPerson"(entity: $Player$Type, stack: $ItemStack$Type, hand: $InteractionHand$Type, arm: $HumanoidArm$Type, poseStack: $PoseStack$Type, partialTicks: float, pitch: float, attackAnim: float, handHeight: float): void
public static "attachToItem"(target: $Item$Type, object: $IThirdPersonAnimationProvider$Type): void
public "isTwoHanded"(): boolean
get "allSupportedProjectiles"(): $Predicate<($ItemStack)>
get "defaultProjectileRange"(): integer
get "twoHanded"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SlingshotItem$Type = ($SlingshotItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SlingshotItem_ = $SlingshotItem$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$OpeneableContainerBlockEntity" {
import {$LazyOptional, $LazyOptional$Type} from "packages/net/minecraftforge/common/util/$LazyOptional"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$WorldlyContainer, $WorldlyContainer$Type} from "packages/net/minecraft/world/$WorldlyContainer"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Capability, $Capability$Type} from "packages/net/minecraftforge/common/capabilities/$Capability"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$LockCode, $LockCode$Type} from "packages/net/minecraft/world/$LockCode"
import {$RandomizableContainerBlockEntity, $RandomizableContainerBlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$RandomizableContainerBlockEntity"

export class $OpeneableContainerBlockEntity extends $RandomizableContainerBlockEntity implements $WorldlyContainer {
static readonly "LOOT_TABLE_TAG": string
static readonly "LOOT_TABLE_SEED_TAG": string
 "lootTable": $ResourceLocation
 "lootTableSeed": long
 "lockKey": $LockCode
 "blockState": $BlockState


public "isUnused"(): boolean
public "getContainerSize"(): integer
public "getSlotsForFace"(side: $Direction$Type): (integer)[]
public "getCapability"(capability: $Capability$Type<(any)>, facing: $Direction$Type): $LazyOptional<(any)>
public "recheckOpen"(): void
public "load"(tag: $CompoundTag$Type): void
public "startOpen"(player: $Player$Type): void
public "stopOpen"(player: $Player$Type): void
public "getUpdateTag"(): $CompoundTag
public "setRemoved"(): void
public "canTakeItemThroughFace"(arg0: integer, arg1: $ItemStack$Type, arg2: $Direction$Type): boolean
public "canPlaceItemThroughFace"(arg0: integer, arg1: $ItemStack$Type, arg2: $Direction$Type): boolean
public "setChanged"(): void
public static "stillValidBlockEntity"(arg0: $BlockEntity$Type, arg1: $Player$Type, arg2: integer): boolean
public static "stillValidBlockEntity"(arg0: $BlockEntity$Type, arg1: $Player$Type): boolean
public static "tryClear"(arg0: any): void
get "unused"(): boolean
get "containerSize"(): integer
get "updateTag"(): $CompoundTag
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $OpeneableContainerBlockEntity$Type = ($OpeneableContainerBlockEntity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $OpeneableContainerBlockEntity_ = $OpeneableContainerBlockEntity$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/screens/$SignPostScreen" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$TextHolderEditScreen, $TextHolderEditScreen$Type} from "packages/net/mehvahdjukaar/supplementaries/client/screens/$TextHolderEditScreen"
import {$List, $List$Type} from "packages/java/util/$List"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$SignPostBlockTile, $SignPostBlockTile$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$SignPostBlockTile"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $SignPostScreen extends $TextHolderEditScreen<($SignPostBlockTile)> {
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering


public static "open"(teSign: $SignPostBlockTile$Type): void
public "render"(graphics: $GuiGraphics$Type, mouseX: integer, mouseY: integer, partialTicks: float): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SignPostScreen$Type = ($SignPostScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SignPostScreen_ = $SignPostScreen$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/client/anim/$PendulumAnimation" {
import {$Vector3f, $Vector3f$Type} from "packages/org/joml/$Vector3f"
import {$PendulumAnimation$Config, $PendulumAnimation$Config$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/anim/$PendulumAnimation$Config"
import {$SwingAnimation, $SwingAnimation$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/anim/$SwingAnimation"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $PendulumAnimation extends $SwingAnimation {

constructor(config: $Supplier$Type<($PendulumAnimation$Config$Type)>, axisGetter: $Supplier$Type<($Vector3f$Type)>)

public "reset"(): void
public "tick"(inWater: boolean): void
public "hit"(eVel: $Vec3$Type, eMass: double): boolean
public "addPositiveImpulse"(vel: float): void
public "getAngle"(partialTicks: float): float
public "addImpulse"(vel: float): void
public "hitByEntity"(entity: $Entity$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PendulumAnimation$Type = ($PendulumAnimation);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PendulumAnimation_ = $PendulumAnimation$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/client/renderers/$HangingSignRendererExtension" {
import {$SignBlockEntity, $SignBlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$SignBlockEntity"
import {$Material, $Material$Type} from "packages/net/minecraft/client/resources/model/$Material"
import {$SignRenderer, $SignRenderer$Type} from "packages/net/minecraft/client/renderer/blockentity/$SignRenderer"
import {$Vector3f, $Vector3f$Type} from "packages/org/joml/$Vector3f"
import {$HangingSignRenderer$HangingSignModel, $HangingSignRenderer$HangingSignModel$Type} from "packages/net/minecraft/client/renderer/blockentity/$HangingSignRenderer$HangingSignModel"
import {$LOD, $LOD$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/util/$LOD"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ModelPart, $ModelPart$Type} from "packages/net/minecraft/client/model/geom/$ModelPart"
import {$Font, $Font$Type} from "packages/net/minecraft/client/gui/$Font"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$SignText, $SignText$Type} from "packages/net/minecraft/world/level/block/entity/$SignText"
import {$List, $List$Type} from "packages/java/util/$List"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$LayerDefinition, $LayerDefinition$Type} from "packages/net/minecraft/client/model/geom/builders/$LayerDefinition"
import {$HangingSignTileExtension, $HangingSignTileExtension$Type} from "packages/net/mehvahdjukaar/amendments/common/tile/$HangingSignTileExtension"

export class $HangingSignRendererExtension {

constructor()

public static "renderItem"(stack: $ItemStack$Type, poseStack: $PoseStack$Type, buffer: $MultiBufferSource$Type, light: integer, overlay: integer, level: $Level$Type): void
public static "createChainMesh"(): $LayerDefinition
public static "render"(tile: $SignBlockEntity$Type, extension: $HangingSignTileExtension$Type, partialTicks: float, poseStack: $PoseStack$Type, bufferSource: $MultiBufferSource$Type, light: integer, overlay: integer, state: $BlockState$Type, model: $HangingSignRenderer$HangingSignModel$Type, barModel: $List$Type<($ModelPart$Type)>, chains: $ModelPart$Type, material: $Material$Type, extensionMaterial: $Material$Type, renderer: $SignRenderer$Type, colorMult: float, translucent: boolean): void
public static "createMesh"(): $LayerDefinition
public static "renderSignText"(signText: $SignText$Type, font: $Font$Type, poseStack: $PoseStack$Type, buffer: $MultiBufferSource$Type, light: integer, normal: $Vector3f$Type, lod: $LOD$Type, filtered: boolean, lineHeight: integer, lineWidth: integer, colorMult: float): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $HangingSignRendererExtension$Type = ($HangingSignRendererExtension);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $HangingSignRendererExtension_ = $HangingSignRendererExtension$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/core/network/$ClientBoundSendLoginPacket" {
import {$Message, $Message$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/network/$Message"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$ChannelHandler$Context, $ChannelHandler$Context$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/network/$ChannelHandler$Context"

export class $ClientBoundSendLoginPacket implements $Message {

constructor(buf: $FriendlyByteBuf$Type)
constructor()

public "handle"(context: $ChannelHandler$Context$Type): void
public "writeToBuffer"(buf: $FriendlyByteBuf$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientBoundSendLoginPacket$Type = ($ClientBoundSendLoginPacket);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientBoundSendLoginPacket_ = $ClientBoundSendLoginPacket$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/util/math/kmeans/$DataSet" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$DataSet$ColorPoint, $DataSet$ColorPoint$Type} from "packages/net/mehvahdjukaar/moonlight/api/util/math/kmeans/$DataSet$ColorPoint"
import {$IDataEntry, $IDataEntry$Type} from "packages/net/mehvahdjukaar/moonlight/api/util/math/kmeans/$IDataEntry"
import {$Palette, $Palette$Type} from "packages/net/mehvahdjukaar/moonlight/api/resources/textures/$Palette"

export class $DataSet<A> {

constructor<T extends $IDataEntry<(A)>>(colors: $List$Type<(T)>)

public "calculateCentroid"(clusterNo: integer): $IDataEntry<(A)>
public "calculateTotalSSE"(centroids: $List$Type<($IDataEntry$Type<(A)>)>): double
public "recomputeCentroids"(clusterSize: integer): $List<($IDataEntry<(A)>)>
public "randomFromDataSet"(): $IDataEntry<(A)>
public "getColorPoints"(): $List<($IDataEntry<(A)>)>
public static "fromPalette"(palette: $Palette$Type): $DataSet<($DataSet$ColorPoint)>
public "getLastCentroids"(): $List<($IDataEntry<(A)>)>
public "calculateClusterSSE"(centroid: $IDataEntry$Type<(A)>, clusterNo: integer): double
public "calculateWeighedCentroid"(): $IDataEntry<(A)>
get "colorPoints"(): $List<($IDataEntry<(A)>)>
get "lastCentroids"(): $List<($IDataEntry<(A)>)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DataSet$Type<A> = ($DataSet<(A)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DataSet_<A> = $DataSet$Type<(A)>;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/items/crafting/$RepairBubbleBlowerRecipe" {
import {$RegistryAccess, $RegistryAccess$Type} from "packages/net/minecraft/core/$RegistryAccess"
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$RecipeSerializer, $RecipeSerializer$Type} from "packages/net/minecraft/world/item/crafting/$RecipeSerializer"
import {$CustomRecipe, $CustomRecipe$Type} from "packages/net/minecraft/world/item/crafting/$CustomRecipe"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$CraftingContainer, $CraftingContainer$Type} from "packages/net/minecraft/world/inventory/$CraftingContainer"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$CraftingBookCategory, $CraftingBookCategory$Type} from "packages/net/minecraft/world/item/crafting/$CraftingBookCategory"

export class $RepairBubbleBlowerRecipe extends $CustomRecipe {

constructor(idIn: $ResourceLocation$Type, category: $CraftingBookCategory$Type)

public "matches"(inv: $CraftingContainer$Type, worldIn: $Level$Type): boolean
public "getRemainingItems"(inv: $CraftingContainer$Type): $NonNullList<($ItemStack)>
public "canCraftInDimensions"(width: integer, height: integer): boolean
public "getSerializer"(): $RecipeSerializer<(any)>
public "assemble"(inv: $CraftingContainer$Type, access: $RegistryAccess$Type): $ItemStack
get "serializer"(): $RecipeSerializer<(any)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RepairBubbleBlowerRecipe$Type = ($RepairBubbleBlowerRecipe);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RepairBubbleBlowerRecipe_ = $RepairBubbleBlowerRecipe$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/reg/$ModBlockProperties$BlockAttachment" {
import {$StringRepresentable$EnumCodec, $StringRepresentable$EnumCodec$Type} from "packages/net/minecraft/util/$StringRepresentable$EnumCodec"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$StringRepresentable, $StringRepresentable$Type} from "packages/net/minecraft/util/$StringRepresentable"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$Keyable, $Keyable$Type} from "packages/com/mojang/serialization/$Keyable"
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $ModBlockProperties$BlockAttachment extends $Enum<($ModBlockProperties$BlockAttachment)> implements $StringRepresentable {
static readonly "BLOCK": $ModBlockProperties$BlockAttachment
static readonly "BEAM": $ModBlockProperties$BlockAttachment
static readonly "WALL": $ModBlockProperties$BlockAttachment
static readonly "PALISADE": $ModBlockProperties$BlockAttachment
static readonly "POST": $ModBlockProperties$BlockAttachment
static readonly "STICK": $ModBlockProperties$BlockAttachment


public "getName"(): string
public static "get"(state: $BlockState$Type, pos: $BlockPos$Type, level: $LevelReader$Type, facing: $Direction$Type): $ModBlockProperties$BlockAttachment
public "toString"(): string
public static "values"(): ($ModBlockProperties$BlockAttachment)[]
public static "valueOf"(name: string): $ModBlockProperties$BlockAttachment
public "getSerializedName"(): string
public static "fromEnumWithMapping"<E extends ($Enum<(E)>) & ($StringRepresentable)>(arg0: $Supplier$Type<((E)[])>, arg1: $Function$Type<(string), (string)>): $StringRepresentable$EnumCodec<(E)>
public static "keys"(arg0: ($StringRepresentable$Type)[]): $Keyable
public static "fromEnum"<E extends ($Enum<(E)>) & ($StringRepresentable)>(arg0: $Supplier$Type<((E)[])>): $StringRepresentable$EnumCodec<(E)>
get "name"(): string
get "serializedName"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModBlockProperties$BlockAttachment$Type = (("beam") | ("post") | ("palisade") | ("block") | ("stick") | ("wall")) | ($ModBlockProperties$BlockAttachment);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModBlockProperties$BlockAttachment_ = $ModBlockProperties$BlockAttachment$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/common/$LecternEditMenu" {
import {$LecternMenu, $LecternMenu$Type} from "packages/net/minecraft/world/inventory/$LecternMenu"
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MenuType, $MenuType$Type} from "packages/net/minecraft/world/inventory/$MenuType"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"
import {$LecternBlockEntity, $LecternBlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$LecternBlockEntity"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$ContainerData, $ContainerData$Type} from "packages/net/minecraft/world/inventory/$ContainerData"

export class $LecternEditMenu extends $LecternMenu {
static readonly "BUTTON_PREV_PAGE": integer
static readonly "BUTTON_NEXT_PAGE": integer
static readonly "BUTTON_TAKE_BOOK": integer
static readonly "BUTTON_PAGE_JUMP_RANGE_START": integer
static readonly "SLOT_CLICKED_OUTSIDE": integer
static readonly "QUICKCRAFT_TYPE_CHARITABLE": integer
static readonly "QUICKCRAFT_TYPE_GREEDY": integer
static readonly "QUICKCRAFT_TYPE_CLONE": integer
static readonly "QUICKCRAFT_HEADER_START": integer
static readonly "QUICKCRAFT_HEADER_CONTINUE": integer
static readonly "QUICKCRAFT_HEADER_END": integer
static readonly "CARRIED_SLOT_SIZE": integer
readonly "lastSlots": $NonNullList<($ItemStack)>
readonly "slots": $NonNullList<($Slot)>
 "remoteSlots": $NonNullList<($ItemStack)>
 "containerId": integer

constructor(id: integer, playerInventory: $Inventory$Type, packetBuffer: $FriendlyByteBuf$Type)
constructor(i: integer, container: $LecternBlockEntity$Type, containerData: $ContainerData$Type)

public "getType"(): $MenuType<(any)>
public "getPos"(): $BlockPos
public "initializeContents"(stateId: integer, items: $List$Type<($ItemStack$Type)>, carried: $ItemStack$Type): void
get "type"(): $MenuType<(any)>
get "pos"(): $BlockPos
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LecternEditMenu$Type = ($LecternEditMenu);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LecternEditMenu_ = $LecternEditMenu$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/core/$ClientConfigs$ShadeFix" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $ClientConfigs$ShadeFix extends $Enum<($ClientConfigs$ShadeFix)> {
static readonly "FALSE": $ClientConfigs$ShadeFix
static readonly "NO_GUI": $ClientConfigs$ShadeFix
static readonly "TRUE": $ClientConfigs$ShadeFix


public static "values"(): ($ClientConfigs$ShadeFix)[]
public static "valueOf"(name: string): $ClientConfigs$ShadeFix
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientConfigs$ShadeFix$Type = (("no_gui") | ("false") | ("true")) | ($ClientConfigs$ShadeFix);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientConfigs$ShadeFix_ = $ClientConfigs$ShadeFix$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/commands/$ReloadConfigsCommand" {
import {$CommandSourceStack, $CommandSourceStack$Type} from "packages/net/minecraft/commands/$CommandSourceStack"
import {$Command, $Command$Type} from "packages/com/mojang/brigadier/$Command"
import {$ArgumentBuilder, $ArgumentBuilder$Type} from "packages/com/mojang/brigadier/builder/$ArgumentBuilder"
import {$CommandDispatcher, $CommandDispatcher$Type} from "packages/com/mojang/brigadier/$CommandDispatcher"
import {$CommandContext, $CommandContext$Type} from "packages/com/mojang/brigadier/context/$CommandContext"

export class $ReloadConfigsCommand implements $Command<($CommandSourceStack)> {

constructor()

public "run"(context: $CommandContext$Type<($CommandSourceStack$Type)>): integer
public static "register"(dispatcher: $CommandDispatcher$Type<($CommandSourceStack$Type)>): $ArgumentBuilder<($CommandSourceStack), (any)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ReloadConfigsCommand$Type = ($ReloadConfigsCommand);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ReloadConfigsCommand_ = $ReloadConfigsCommand$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/commands/$OpenConfiguredCommand" {
import {$CommandSourceStack, $CommandSourceStack$Type} from "packages/net/minecraft/commands/$CommandSourceStack"
import {$Command, $Command$Type} from "packages/com/mojang/brigadier/$Command"
import {$ArgumentBuilder, $ArgumentBuilder$Type} from "packages/com/mojang/brigadier/builder/$ArgumentBuilder"
import {$CommandDispatcher, $CommandDispatcher$Type} from "packages/com/mojang/brigadier/$CommandDispatcher"
import {$CommandContext, $CommandContext$Type} from "packages/com/mojang/brigadier/context/$CommandContext"

export class $OpenConfiguredCommand implements $Command<($CommandSourceStack)> {

constructor()

public "run"(context: $CommandContext$Type<($CommandSourceStack$Type)>): integer
public static "register"(dispatcher: $CommandDispatcher$Type<($CommandSourceStack$Type)>): $ArgumentBuilder<($CommandSourceStack), (any)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $OpenConfiguredCommand$Type = ($OpenConfiguredCommand);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $OpenConfiguredCommand_ = $OpenConfiguredCommand$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/reg/$LootTablesInjects$TableType" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $LootTablesInjects$TableType extends $Enum<($LootTablesInjects$TableType)> {
static readonly "OTHER": $LootTablesInjects$TableType
static readonly "MINESHAFT": $LootTablesInjects$TableType
static readonly "SHIPWRECK_TREASURE": $LootTablesInjects$TableType
static readonly "PILLAGER": $LootTablesInjects$TableType
static readonly "DUNGEON": $LootTablesInjects$TableType
static readonly "PYRAMID": $LootTablesInjects$TableType
static readonly "STRONGHOLD": $LootTablesInjects$TableType
static readonly "TEMPLE": $LootTablesInjects$TableType
static readonly "TEMPLE_DISPENSER": $LootTablesInjects$TableType
static readonly "IGLOO": $LootTablesInjects$TableType
static readonly "MANSION": $LootTablesInjects$TableType
static readonly "FORTRESS": $LootTablesInjects$TableType
static readonly "BASTION": $LootTablesInjects$TableType
static readonly "RUIN": $LootTablesInjects$TableType
static readonly "SHIPWRECK_STORAGE": $LootTablesInjects$TableType
static readonly "END_CITY": $LootTablesInjects$TableType
static readonly "FISHING_TREASURE": $LootTablesInjects$TableType


public static "values"(): ($LootTablesInjects$TableType)[]
public static "valueOf"(name: string): $LootTablesInjects$TableType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LootTablesInjects$TableType$Type = (("other") | ("shipwreck_storage") | ("fishing_treasure") | ("mineshaft") | ("dungeon") | ("pillager") | ("fortress") | ("igloo") | ("pyramid") | ("temple") | ("shipwreck_treasure") | ("bastion") | ("stronghold") | ("ruin") | ("end_city") | ("temple_dispenser") | ("mansion")) | ($LootTablesInjects$TableType);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LootTablesInjects$TableType_ = $LootTablesInjects$TableType$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/blocks/$SpringLauncherArmBlock" {
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$EntityBlock, $EntityBlock$Type} from "packages/net/minecraft/world/level/block/$EntityBlock"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$CollisionContext, $CollisionContext$Type} from "packages/net/minecraft/world/phys/shapes/$CollisionContext"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Mirror, $Mirror$Type} from "packages/net/minecraft/world/level/block/$Mirror"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$Rotation, $Rotation$Type} from "packages/net/minecraft/world/level/block/$Rotation"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$BlockEntityTicker, $BlockEntityTicker$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityTicker"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"
import {$GameEventListener, $GameEventListener$Type} from "packages/net/minecraft/world/level/gameevent/$GameEventListener"
import {$DirectionProperty, $DirectionProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$DirectionProperty"
import {$RenderShape, $RenderShape$Type} from "packages/net/minecraft/world/level/block/$RenderShape"

export class $SpringLauncherArmBlock extends $Block implements $EntityBlock {
static readonly "FACING": $DirectionProperty
static readonly "EXTENDING": $BooleanProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(properties: $BlockBehaviour$Properties$Type)

public "getTicker"<T extends $BlockEntity>(pLevel: $Level$Type, pState: $BlockState$Type, pBlockEntityType: $BlockEntityType$Type<(T)>): $BlockEntityTicker<(T)>
public "getStateForPlacement"(context: $BlockPlaceContext$Type): $BlockState
public "getCloneItemStack"(level: $BlockGetter$Type, pos: $BlockPos$Type, state: $BlockState$Type): $ItemStack
public "getRenderShape"(state: $BlockState$Type): $RenderShape
public "rotate"(state: $BlockState$Type, rot: $Rotation$Type): $BlockState
public "mirror"(state: $BlockState$Type, mirrorIn: $Mirror$Type): $BlockState
public "getOcclusionShape"(state: $BlockState$Type, worldIn: $BlockGetter$Type, pos: $BlockPos$Type): $VoxelShape
public "getShape"(state: $BlockState$Type, world: $BlockGetter$Type, pos: $BlockPos$Type, context: $CollisionContext$Type): $VoxelShape
public "newBlockEntity"(pPos: $BlockPos$Type, pState: $BlockState$Type): $BlockEntity
public "getListener"<T extends $BlockEntity>(arg0: $ServerLevel$Type, arg1: T): $GameEventListener
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SpringLauncherArmBlock$Type = ($SpringLauncherArmBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SpringLauncherArmBlock_ = $SpringLauncherArmBlock$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/misc/mob_container/$BuiltinAnimation$Type" {
import {$StringRepresentable$EnumCodec, $StringRepresentable$EnumCodec$Type} from "packages/net/minecraft/util/$StringRepresentable$EnumCodec"
import {$StringRepresentable, $StringRepresentable$Type} from "packages/net/minecraft/util/$StringRepresentable"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$Keyable, $Keyable$Type} from "packages/com/mojang/serialization/$Keyable"
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$Codec, $Codec$Type} from "packages/com/mojang/serialization/$Codec"

export class $BuiltinAnimation$Type extends $Enum<($BuiltinAnimation$Type)> implements $StringRepresentable {
static readonly "NONE": $BuiltinAnimation$Type
static readonly "LAND": $BuiltinAnimation$Type
static readonly "AIR": $BuiltinAnimation$Type
static readonly "FLOATING": $BuiltinAnimation$Type
static readonly "BUILTIN": $BuiltinAnimation$Type
static readonly "CODEC": $Codec<($BuiltinAnimation$Type)>


public static "values"(): ($BuiltinAnimation$Type)[]
public static "valueOf"(name: string): $BuiltinAnimation$Type
public "isFloating"(): boolean
public "getSerializedName"(): string
public "isFlying"(): boolean
public "isLand"(): boolean
public static "fromEnumWithMapping"<E extends ($Enum<(E)>) & ($StringRepresentable)>(arg0: $Supplier$Type<((E)[])>, arg1: $Function$Type<(string), (string)>): $StringRepresentable$EnumCodec<(E)>
public static "keys"(arg0: ($StringRepresentable$Type)[]): $Keyable
public static "fromEnum"<E extends ($Enum<(E)>) & ($StringRepresentable)>(arg0: $Supplier$Type<((E)[])>): $StringRepresentable$EnumCodec<(E)>
get "floating"(): boolean
get "serializedName"(): string
get "flying"(): boolean
get "land"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BuiltinAnimation$Type$Type = (("floating") | ("builtin") | ("land") | ("none") | ("air")) | ($BuiltinAnimation$Type);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BuiltinAnimation$Type_ = $BuiltinAnimation$Type$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/events/overrides/$InteractEventsHandler" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$InteractionResultHolder, $InteractionResultHolder$Type} from "packages/net/minecraft/world/$InteractionResultHolder"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$SoundType, $SoundType$Type} from "packages/net/minecraft/world/level/block/$SoundType"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Property, $Property$Type} from "packages/net/minecraft/world/level/block/state/properties/$Property"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $InteractEventsHandler {

constructor()

public static "init"(): void
public static "addOverrideTooltips"(itemStack: $ItemStack$Type, tooltipFlag: $TooltipFlag$Type, components: $List$Type<($Component$Type)>): void
public static "replaceSimilarBlock"(blockOverride: $Block$Type, player: $Player$Type, stack: $ItemStack$Type, pos: $BlockPos$Type, level: $Level$Type, replaced: $BlockState$Type, sound: $SoundType$Type, ...properties: ($Property$Type<(any)>)[]): $InteractionResult
public static "setupOverrides"(): void
public static "onItemUse"(player: $Player$Type, level: $Level$Type, hand: $InteractionHand$Type, stack: $ItemStack$Type): $InteractionResultHolder<($ItemStack)>
public static "onItemUsedOnBlockHP"(player: $Player$Type, level: $Level$Type, stack: $ItemStack$Type, hand: $InteractionHand$Type, hit: $BlockHitResult$Type): $InteractionResult
public static "hasBlockPlacementAssociated"(item: $Item$Type): boolean
public static "onItemUsedOnBlock"(player: $Player$Type, level: $Level$Type, stack: $ItemStack$Type, hand: $InteractionHand$Type, hit: $BlockHitResult$Type): $InteractionResult
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $InteractEventsHandler$Type = ($InteractEventsHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $InteractEventsHandler_ = $InteractEventsHandler$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/events/behaviors/$ItemUseOnBlock" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$ItemUse, $ItemUse$Type} from "packages/net/mehvahdjukaar/amendments/events/behaviors/$ItemUse"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export interface $ItemUseOnBlock extends $ItemUse {

 "getTooltip"(): $MutableComponent
 "placesBlock"(): boolean
 "altersWorld"(): boolean
 "shouldBlockMapToItem"(item: $Item$Type): boolean
 "isEnabled"(): boolean
 "appliesToItem"(arg0: $Item$Type): boolean
 "tryPerformingAction"(arg0: $Level$Type, arg1: $Player$Type, arg2: $InteractionHand$Type, arg3: $ItemStack$Type, arg4: $BlockHitResult$Type): $InteractionResult
}

export namespace $ItemUseOnBlock {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ItemUseOnBlock$Type = ($ItemUseOnBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ItemUseOnBlock_ = $ItemUseOnBlock$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$TurnTableBlockTile" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $TurnTableBlockTile extends $BlockEntity {
 "blockState": $BlockState

constructor(pos: $BlockPos$Type, state: $BlockState$Type)

public static "tick"(level: $Level$Type, pos: $BlockPos$Type, state: $BlockState$Type, tile: $TurnTableBlockTile$Type): void
public "setCat"(): void
public "tryRotate"(): void
public "getCatTimer"(): integer
public "load"(compound: $CompoundTag$Type): void
public "m_183515_"(compound: $CompoundTag$Type): void
get "catTimer"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TurnTableBlockTile$Type = ($TurnTableBlockTile);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TurnTableBlockTile_ = $TurnTableBlockTile$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/integration/$JEICompat" {
import {$IGuiHandlerRegistration, $IGuiHandlerRegistration$Type} from "packages/mezz/jei/api/registration/$IGuiHandlerRegistration"
import {$IJeiConfigManager, $IJeiConfigManager$Type} from "packages/mezz/jei/api/runtime/config/$IJeiConfigManager"
import {$IAdvancedRegistration, $IAdvancedRegistration$Type} from "packages/mezz/jei/api/registration/$IAdvancedRegistration"
import {$IVanillaCategoryExtensionRegistration, $IVanillaCategoryExtensionRegistration$Type} from "packages/mezz/jei/api/registration/$IVanillaCategoryExtensionRegistration"
import {$IRecipeRegistration, $IRecipeRegistration$Type} from "packages/mezz/jei/api/registration/$IRecipeRegistration"
import {$IRecipeTransferRegistration, $IRecipeTransferRegistration$Type} from "packages/mezz/jei/api/registration/$IRecipeTransferRegistration"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$IJeiRuntime, $IJeiRuntime$Type} from "packages/mezz/jei/api/runtime/$IJeiRuntime"
import {$IRecipeCatalystRegistration, $IRecipeCatalystRegistration$Type} from "packages/mezz/jei/api/registration/$IRecipeCatalystRegistration"
import {$IModPlugin, $IModPlugin$Type} from "packages/mezz/jei/api/$IModPlugin"
import {$IRuntimeRegistration, $IRuntimeRegistration$Type} from "packages/mezz/jei/api/registration/$IRuntimeRegistration"
import {$IRecipeCategoryRegistration, $IRecipeCategoryRegistration$Type} from "packages/mezz/jei/api/registration/$IRecipeCategoryRegistration"
import {$IModIngredientRegistration, $IModIngredientRegistration$Type} from "packages/mezz/jei/api/registration/$IModIngredientRegistration"
import {$ISubtypeRegistration, $ISubtypeRegistration$Type} from "packages/mezz/jei/api/registration/$ISubtypeRegistration"
import {$IPlatformFluidHelper, $IPlatformFluidHelper$Type} from "packages/mezz/jei/api/helpers/$IPlatformFluidHelper"

export class $JEICompat implements $IModPlugin {

constructor()

public "registerItemSubtypes"(registration: $ISubtypeRegistration$Type): void
public "getPluginUid"(): $ResourceLocation
public "registerRecipes"(registry: $IRecipeRegistration$Type): void
public "registerVanillaCategoryExtensions"(arg0: $IVanillaCategoryExtensionRegistration$Type): void
public "registerFluidSubtypes"<T>(arg0: $ISubtypeRegistration$Type, arg1: $IPlatformFluidHelper$Type<(T)>): void
public "onConfigManagerAvailable"(arg0: $IJeiConfigManager$Type): void
public "registerGuiHandlers"(arg0: $IGuiHandlerRegistration$Type): void
public "onRuntimeUnavailable"(): void
public "registerIngredients"(arg0: $IModIngredientRegistration$Type): void
public "registerRecipeTransferHandlers"(arg0: $IRecipeTransferRegistration$Type): void
public "registerRecipeCatalysts"(arg0: $IRecipeCatalystRegistration$Type): void
public "registerAdvanced"(arg0: $IAdvancedRegistration$Type): void
public "onRuntimeAvailable"(arg0: $IJeiRuntime$Type): void
public "registerCategories"(arg0: $IRecipeCategoryRegistration$Type): void
public "registerRuntime"(arg0: $IRuntimeRegistration$Type): void
get "pluginUid"(): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $JEICompat$Type = ($JEICompat);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $JEICompat_ = $JEICompat$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/client/model/$ExtraModelData" {
import {$ModelDataKey, $ModelDataKey$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$ModelDataKey"
import {$ExtraModelData$Builder, $ExtraModelData$Builder$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$ExtraModelData$Builder"

export interface $ExtraModelData {

 "get"<T>(arg0: $ModelDataKey$Type<(T)>): T
 "isEmpty"(): boolean

(arg0: $ModelDataKey$Type<(T)>): T
}

export namespace $ExtraModelData {
const EMPTY: $ExtraModelData
function builder(): $ExtraModelData$Builder
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ExtraModelData$Type = ($ExtraModelData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ExtraModelData_ = $ExtraModelData$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/faucet/$FaucetBehaviorsManager" {
import {$RegistryAccess, $RegistryAccess$Type} from "packages/net/minecraft/core/$RegistryAccess"
import {$JsonElement, $JsonElement$Type} from "packages/com/google/gson/$JsonElement"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$SoftFluidTank, $SoftFluidTank$Type} from "packages/net/mehvahdjukaar/moonlight/api/fluids/$SoftFluidTank"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$SoftFluid, $SoftFluid$Type} from "packages/net/mehvahdjukaar/moonlight/api/fluids/$SoftFluid"
import {$RegistryAccessJsonReloadListener, $RegistryAccessJsonReloadListener$Type} from "packages/net/mehvahdjukaar/moonlight/api/misc/$RegistryAccessJsonReloadListener"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $FaucetBehaviorsManager extends $RegistryAccessJsonReloadListener {
static readonly "RELOAD_INSTANCE": $FaucetBehaviorsManager

constructor()

public "parse"(map: $Map$Type<($ResourceLocation$Type), ($JsonElement$Type)>, registryAccess: $RegistryAccess$Type): void
public static "registerBehaviors"(): void
/**
 * 
 * @deprecated
 */
public static "prepareToTransferBottle"(tempFluidHolder: $SoftFluidTank$Type, softFluid: $SoftFluid$Type, tag: $CompoundTag$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FaucetBehaviorsManager$Type = ($FaucetBehaviorsManager);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FaucetBehaviorsManager_ = $FaucetBehaviorsManager$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$CageBlockTile" {
import {$IMobContainerProvider, $IMobContainerProvider$Type} from "packages/net/mehvahdjukaar/supplementaries/common/misc/mob_container/$IMobContainerProvider"
import {$MobContainer, $MobContainer$Type} from "packages/net/mehvahdjukaar/supplementaries/common/misc/mob_container/$MobContainer"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ClientboundBlockEntityDataPacket, $ClientboundBlockEntityDataPacket$Type} from "packages/net/minecraft/network/protocol/game/$ClientboundBlockEntityDataPacket"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $CageBlockTile extends $BlockEntity implements $IMobContainerProvider {
 "mobContainer": $MobContainer
 "blockState": $BlockState

constructor(pos: $BlockPos$Type, state: $BlockState$Type)

public static "tick"(pLevel: $Level$Type, pPos: $BlockPos$Type, pState: $BlockState$Type, tile: $CageBlockTile$Type): void
public "saveToNbt"(stack: $ItemStack$Type): void
public "getMobContainer"(): $MobContainer
public "getUpdatePacket"(): $ClientboundBlockEntityDataPacket
public "load"(compound: $CompoundTag$Type): void
public "m_183515_"(compound: $CompoundTag$Type): void
public "getDirection"(): $Direction
public "getUpdateTag"(): $CompoundTag
get "mobContainer"(): $MobContainer
get "updatePacket"(): $ClientboundBlockEntityDataPacket
get "direction"(): $Direction
get "updateTag"(): $CompoundTag
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CageBlockTile$Type = ($CageBlockTile);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CageBlockTile_ = $CageBlockTile$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/misc/mob_container/$DataCapturedMobInstance" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$CapturedMobInstance, $CapturedMobInstance$Type} from "packages/net/mehvahdjukaar/supplementaries/api/$CapturedMobInstance"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $DataCapturedMobInstance<T extends $Entity> extends $CapturedMobInstance<(T)> {


public "containerTick"(world: $Level$Type, pos: $BlockPos$Type, entityScale: float, entityData: $CompoundTag$Type): void
public "onContainerWaterlogged"(waterlogged: boolean): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DataCapturedMobInstance$Type<T> = ($DataCapturedMobInstance<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DataCapturedMobInstance_<T> = $DataCapturedMobInstance$Type<(T)>;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/item/$ModBucketItem" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Fluid, $Fluid$Type} from "packages/net/minecraft/world/level/material/$Fluid"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$BucketItem, $BucketItem$Type} from "packages/net/minecraft/world/item/$BucketItem"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $ModBucketItem extends $BucketItem {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(fluid: $Supplier$Type<($Fluid$Type)>, properties: $Item$Properties$Type)
/**
 * 
 * @deprecated
 */
constructor(fluid: $Fluid$Type, properties: $Item$Properties$Type)

public "getFluid"(): $Fluid
get "fluid"(): $Fluid
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModBucketItem$Type = ($ModBucketItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModBucketItem_ = $ModBucketItem$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/items/crafting/$WeatheredMapRecipe" {
import {$RegistryAccess, $RegistryAccess$Type} from "packages/net/minecraft/core/$RegistryAccess"
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$RecipeSerializer, $RecipeSerializer$Type} from "packages/net/minecraft/world/item/crafting/$RecipeSerializer"
import {$CustomRecipe, $CustomRecipe$Type} from "packages/net/minecraft/world/item/crafting/$CustomRecipe"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$CraftingContainer, $CraftingContainer$Type} from "packages/net/minecraft/world/inventory/$CraftingContainer"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$CraftingBookCategory, $CraftingBookCategory$Type} from "packages/net/minecraft/world/item/crafting/$CraftingBookCategory"

export class $WeatheredMapRecipe extends $CustomRecipe {

constructor(idIn: $ResourceLocation$Type, category: $CraftingBookCategory$Type)

public "matches"(inv: $CraftingContainer$Type, level: $Level$Type): boolean
public "getRemainingItems"(inv: $CraftingContainer$Type): $NonNullList<($ItemStack)>
public static "onWorldUnload"(): void
public "canCraftInDimensions"(width: integer, height: integer): boolean
public "getSerializer"(): $RecipeSerializer<(any)>
public "assemble"(inv: $CraftingContainer$Type, access: $RegistryAccess$Type): $ItemStack
get "serializer"(): $RecipeSerializer<(any)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WeatheredMapRecipe$Type = ($WeatheredMapRecipe);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WeatheredMapRecipe_ = $WeatheredMapRecipe$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/misc/map_markers/markers/$BeaconMarker" {
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$CustomMapDecoration, $CustomMapDecoration$Type} from "packages/net/mehvahdjukaar/moonlight/api/map/$CustomMapDecoration"
import {$MapBlockMarker, $MapBlockMarker$Type} from "packages/net/mehvahdjukaar/moonlight/api/map/markers/$MapBlockMarker"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $BeaconMarker extends $MapBlockMarker<($CustomMapDecoration)> {
static readonly "HAS_SMALL_TEXTURE_FLAG": integer

constructor()
constructor(pos: $BlockPos$Type, name: $Component$Type)

public "doCreateDecoration"(mapX: byte, mapY: byte, rot: byte): $CustomMapDecoration
public static "getFromWorld"(world: $BlockGetter$Type, pos: $BlockPos$Type): $BeaconMarker
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BeaconMarker$Type = ($BeaconMarker);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BeaconMarker_ = $BeaconMarker$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/screens/$PresentScreen" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$ContainerListener, $ContainerListener$Type} from "packages/net/minecraft/world/inventory/$ContainerListener"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$AbstractContainerScreen, $AbstractContainerScreen$Type} from "packages/net/minecraft/client/gui/screens/inventory/$AbstractContainerScreen"
import {$PresentContainerMenu, $PresentContainerMenu$Type} from "packages/net/mehvahdjukaar/supplementaries/common/inventories/$PresentContainerMenu"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$List, $List$Type} from "packages/java/util/$List"
import {$AbstractContainerMenu, $AbstractContainerMenu$Type} from "packages/net/minecraft/world/inventory/$AbstractContainerMenu"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"
import {$PlayerInfo, $PlayerInfo$Type} from "packages/net/minecraft/client/multiplayer/$PlayerInfo"

export class $PresentScreen extends $AbstractContainerScreen<($PresentContainerMenu)> implements $ContainerListener {
static readonly "INVENTORY_LOCATION": $ResourceLocation
static readonly "SLOT_ITEM_BLIT_OFFSET": integer
 "imageWidth": integer
 "hoveredSlot": $Slot
 "leftPos": integer
 "topPos": integer
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering

constructor(menu: $PresentContainerMenu$Type, inventory: $Inventory$Type, text: $Component$Type)

public "keyPressed"(key: integer, a: integer, b: integer): boolean
public "m_7856_"(): void
public "removed"(): void
public "render"(graphics: $GuiGraphics$Type, mouseX: integer, mouseY: integer, partialTicks: float): void
public "mouseClicked"(mouseX: double, mouseY: double, key: integer): boolean
public "mouseScrolled"(mouseX: double, mouseY: double, amount: double): boolean
public "mouseDragged"(dx: double, dy: double, key: integer, mouseX: double, mouseY: double): boolean
public "onAddPlayer"(info: $PlayerInfo$Type): void
public "onRemovePlayer"(uuid: $UUID$Type): void
public "m_181908_"(): void
public "slotChanged"(container: $AbstractContainerMenu$Type, slot: integer, stack: $ItemStack$Type): void
public "dataChanged"(container: $AbstractContainerMenu$Type, dataSlotIndex: integer, value: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PresentScreen$Type = ($PresentScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PresentScreen_ = $PresentScreen$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/screens/$NoticeBoardScreen" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$NoticeBoardContainerMenu, $NoticeBoardContainerMenu$Type} from "packages/net/mehvahdjukaar/supplementaries/common/inventories/$NoticeBoardContainerMenu"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$AbstractContainerScreen, $AbstractContainerScreen$Type} from "packages/net/minecraft/client/gui/screens/inventory/$AbstractContainerScreen"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"

export class $NoticeBoardScreen extends $AbstractContainerScreen<($NoticeBoardContainerMenu)> {
static readonly "INVENTORY_LOCATION": $ResourceLocation
static readonly "SLOT_ITEM_BLIT_OFFSET": integer
 "imageWidth": integer
 "hoveredSlot": $Slot
 "leftPos": integer
 "topPos": integer
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering

constructor(container: $NoticeBoardContainerMenu$Type, inventory: $Inventory$Type, text: $Component$Type)

public "keyPressed"(key: integer, b: integer, c: integer): boolean
public "render"(matrixStack: $GuiGraphics$Type, mouseX: integer, mouseY: integer, partialTicks: float): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $NoticeBoardScreen$Type = ($NoticeBoardScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $NoticeBoardScreen_ = $NoticeBoardScreen$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/renderers/tiles/$BuntingBlockTileRenderer" {
import {$VertexConsumer, $VertexConsumer$Type} from "packages/com/mojang/blaze3d/vertex/$VertexConsumer"
import {$BuntingBlockTile, $BuntingBlockTile$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$BuntingBlockTile"
import {$BlockEntityRendererProvider$Context, $BlockEntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/blockentity/$BlockEntityRendererProvider$Context"
import {$DyeColor, $DyeColor$Type} from "packages/net/minecraft/world/item/$DyeColor"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$LayerDefinition, $LayerDefinition$Type} from "packages/net/minecraft/client/model/geom/builders/$LayerDefinition"
import {$BlockEntityRenderer, $BlockEntityRenderer$Type} from "packages/net/minecraft/client/renderer/blockentity/$BlockEntityRenderer"

export class $BuntingBlockTileRenderer implements $BlockEntityRenderer<($BuntingBlockTile)> {

constructor(context: $BlockEntityRendererProvider$Context$Type)

public static "renderBunting"(color: $DyeColor$Type, dir: $Direction$Type, partialTicks: float, poseStack: $PoseStack$Type, vertexConsumer: $VertexConsumer$Type, buffer: $MultiBufferSource$Type, combinedLightIn: integer, combinedOverlayIn: integer, pos: $BlockPos$Type, l: long): void
public "render"(tile: $BuntingBlockTile$Type, partialTicks: float, poseStack: $PoseStack$Type, bufferIn: $MultiBufferSource$Type, combinedLightIn: integer, combinedOverlayIn: integer): void
public static "createMesh"(): $LayerDefinition
public "shouldRender"(blockEntity: $BuntingBlockTile$Type, cameraPos: $Vec3$Type): boolean
public "shouldRenderOffScreen"(arg0: $BuntingBlockTile$Type): boolean
public "getViewDistance"(): integer
get "viewDistance"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BuntingBlockTileRenderer$Type = ($BuntingBlockTileRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BuntingBlockTileRenderer_ = $BuntingBlockTileRenderer$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/integration/forge/configured/$ModConfigScreen" {
import {$Comparator, $Comparator$Type} from "packages/java/util/$Comparator"
import {$FormattedCharSequence, $FormattedCharSequence$Type} from "packages/net/minecraft/util/$FormattedCharSequence"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$IModConfig, $IModConfig$Type} from "packages/com/mrcrayfish/configured/api/$IModConfig"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$CustomConfigScreen, $CustomConfigScreen$Type} from "packages/net/mehvahdjukaar/moonlight/api/integration/configured/$CustomConfigScreen"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$CustomConfigSelectScreen, $CustomConfigSelectScreen$Type} from "packages/net/mehvahdjukaar/moonlight/api/integration/configured/$CustomConfigSelectScreen"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$ListMenuScreen$Item, $ListMenuScreen$Item$Type} from "packages/com/mrcrayfish/configured/client/screen/$ListMenuScreen$Item"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$List, $List$Type} from "packages/java/util/$List"

export class $ModConfigScreen extends $CustomConfigScreen {
readonly "mainIcon": $ItemStack
static readonly "TOOLTIP_WIDTH": integer
static readonly "SORT_ALPHABETICALLY": $Comparator<($ListMenuScreen$Item)>
static readonly "CONFIGURED_LOGO": $ResourceLocation
 "tooltipText": $List<($FormattedCharSequence)>
 "tooltipOutlineColour": integer
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering

constructor(parent: $CustomConfigSelectScreen$Type, config: $IModConfig$Type)
constructor(modId: string, mainIcon: $ItemStack$Type, background: $ResourceLocation$Type, title: $Component$Type, parent: $Screen$Type, config: $IModConfig$Type)

public "onSave"(): void
public "createSubScreen"(title: $Component$Type): $CustomConfigScreen
public static "loadTexture"(arg0: any, arg1: $ResourceLocation$Type): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModConfigScreen$Type = ($ModConfigScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModConfigScreen_ = $ModConfigScreen$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/inventories/$SafeContainerMenu" {
import {$SafeBlockTile, $SafeBlockTile$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$SafeBlockTile"
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$ShulkerBoxMenu, $ShulkerBoxMenu$Type} from "packages/net/minecraft/world/inventory/$ShulkerBoxMenu"
import {$IContainerProvider, $IContainerProvider$Type} from "packages/net/mehvahdjukaar/moonlight/api/misc/$IContainerProvider"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MenuType, $MenuType$Type} from "packages/net/minecraft/world/inventory/$MenuType"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"

export class $SafeContainerMenu extends $ShulkerBoxMenu implements $IContainerProvider {
readonly "container": $Container
static readonly "SLOT_CLICKED_OUTSIDE": integer
static readonly "QUICKCRAFT_TYPE_CHARITABLE": integer
static readonly "QUICKCRAFT_TYPE_GREEDY": integer
static readonly "QUICKCRAFT_TYPE_CLONE": integer
static readonly "QUICKCRAFT_HEADER_START": integer
static readonly "QUICKCRAFT_HEADER_CONTINUE": integer
static readonly "QUICKCRAFT_HEADER_END": integer
static readonly "CARRIED_SLOT_SIZE": integer
readonly "lastSlots": $NonNullList<($ItemStack)>
readonly "slots": $NonNullList<($Slot)>
 "remoteSlots": $NonNullList<($ItemStack)>
 "containerId": integer

constructor(id: integer, inventory: $Inventory$Type, container: $SafeBlockTile$Type)
constructor(id: integer, playerInventory: $Inventory$Type, packetBuffer: $FriendlyByteBuf$Type)

public "getContainer"(): $Container
public "getType"(): $MenuType<(any)>
get "container"(): $Container
get "type"(): $MenuType<(any)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SafeContainerMenu$Type = ($SafeContainerMenu);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SafeContainerMenu_ = $SafeContainerMenu$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/reg/$ModTextures" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$BannerPattern, $BannerPattern$Type} from "packages/net/minecraft/world/level/block/entity/$BannerPattern"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $ModTextures {
static readonly "WHITE_CONCRETE_TEXTURE": $ResourceLocation
static readonly "SAND_TEXTURE": $ResourceLocation
static readonly "CHAIN_TEXTURE": $ResourceLocation
static readonly "HONEY_TEXTURE": $ResourceLocation
static readonly "SLIME_TEXTURE": $ResourceLocation
static readonly "FISHIES_TEXTURE": $ResourceLocation
static readonly "BELLOWS_TEXTURE": $ResourceLocation
static readonly "CLOCK_HAND_TEXTURE": $ResourceLocation
static readonly "HOURGLASS_REDSTONE": $ResourceLocation
static readonly "HOURGLASS_GLOWSTONE": $ResourceLocation
static readonly "HOURGLASS_BLAZE": $ResourceLocation
static readonly "HOURGLASS_GUNPOWDER": $ResourceLocation
static readonly "BLACKBOARD_GRID": $ResourceLocation
static readonly "CANNON_TEXTURE": $ResourceLocation
static readonly "SUGAR": $ResourceLocation
static readonly "ASH": $ResourceLocation
static readonly "TIMBER_CROSS_BRACE_TEXTURE": $ResourceLocation
static readonly "BLACKBOARD_TEXTURE": $ResourceLocation
static readonly "BLACKBOARD_WHITE_TEXTURE": $ResourceLocation
static readonly "BLACKBOARD_BLACK_TEXTURE": $ResourceLocation
static readonly "GLOBE_TEXTURE": $ResourceLocation
static readonly "GLOBE_FLAT_TEXTURE": $ResourceLocation
static readonly "GLOBE_MOON_TEXTURE": $ResourceLocation
static readonly "GLOBE_SUN_TEXTURE": $ResourceLocation
static readonly "GLOBE_SHEARED_TEXTURE": $ResourceLocation
static readonly "GLOBE_SHEARED_SEPIA_TEXTURE": $ResourceLocation
static readonly "ENDERMAN_HEAD": $ResourceLocation
static readonly "ENDERMAN_HEAD_EYES": $ResourceLocation
static readonly "CANNON_TRAJECTORY": $ResourceLocation
static readonly "CANNON_TRAJECTORY_RED": $ResourceLocation
static readonly "BLACKBOARD_GUI_GRID": $ResourceLocation
static readonly "ROPE_ARROW": $ResourceLocation
static readonly "RED_MERCHANT": $ResourceLocation
static readonly "ORANGE_MERCHANT": $ResourceLocation
static readonly "RED_MERCHANT_CHRISTMAS": $ResourceLocation
static readonly "STATUE": $ResourceLocation
static readonly "HAT_STAND": $ResourceLocation
static readonly "FIREFLY_TEXTURE": $ResourceLocation
static readonly "BELL_ROPE_TEXTURE": $ResourceLocation
static readonly "BELL_CHAIN_TEXTURE": $ResourceLocation
static readonly "THICK_GOLEM": $ResourceLocation
static readonly "SEA_PICKLE_RICK": $ResourceLocation
static readonly "JAR_MAN": $ResourceLocation
static readonly "SLIME_ENTITY_OVERLAY": $ResourceLocation
static readonly "ANTIQUABLE_FONT": $ResourceLocation
static readonly "SLIME_GUI_OVERLAY": $ResourceLocation
static readonly "BLACKBOARD_GUI_TEXTURE": $ResourceLocation
static readonly "BLACKBOARD_BLANK_TEXTURE": $ResourceLocation
static readonly "CONFIG_BACKGROUND": $ResourceLocation
static readonly "NOTICE_BOARD_GUI_TEXTURE": $ResourceLocation
static readonly "SACK_GUI_TEXTURE": $ResourceLocation
static readonly "SLOT_TEXTURE": $ResourceLocation
static readonly "PULLEY_BLOCK_GUI_TEXTURE": $ResourceLocation
static readonly "PRESENT_GUI_TEXTURE": $ResourceLocation
static readonly "PRESENT_EMPTY_GUI_TEXTURE": $ResourceLocation
static readonly "TRAPPED_PRESENT_GUI_TEXTURE": $ResourceLocation
static readonly "RED_MERCHANT_GUI_TEXTURE": $ResourceLocation
static readonly "TATTERED_BOOK_GUI_TEXTURE": $ResourceLocation
static readonly "CANNON_ICONS_TEXTURE": $ResourceLocation
static readonly "BOOK_ENCHANTED_TEXTURES": $ResourceLocation
static readonly "BOOK_TOME_TEXTURES": $ResourceLocation
static readonly "BOOK_WRITTEN_TEXTURES": $ResourceLocation
static readonly "BOOK_AND_QUILL_TEXTURES": $ResourceLocation
static readonly "BOOK_ANTIQUE_TEXTURES": $ResourceLocation
static readonly "BUBBLE_BLOCK_TEXTURE": $ResourceLocation
static readonly "BUBBLE_BLOCK_COLORS_TEXTURE": $ResourceLocation
static readonly "FLAG_ICON": $ResourceLocation
static readonly "BANNER_ICON": $ResourceLocation
static readonly "MAP_ICON": $ResourceLocation
static readonly "ROPE_ICON": $ResourceLocation
static readonly "CHAIN_ICON": $ResourceLocation
static readonly "BANNER_PATTERN_ICON": $ResourceLocation
static readonly "BOOK_ICON": $ResourceLocation
static readonly "ANTIQUE_INK_ICON": $ResourceLocation
static readonly "MAP_ATLAS_ICON": $ResourceLocation
static readonly "PAPER_ICON": $ResourceLocation
static readonly "GLASS_PANE_ICON": $ResourceLocation
static readonly "CARTOGRAPHY_INGREDIENTS_ICONS": $List<($ResourceLocation)>
static readonly "MAP_ICONS": $List<($ResourceLocation)>
static readonly "BANNER_SLOT_ICONS": $List<($ResourceLocation)>
static readonly "PULLEY_SLOT_ICONS": $List<($ResourceLocation)>
static readonly "NOTICE_BOARD_SLOT_ICONS": $List<($ResourceLocation)>
static readonly "FLAG_TEXTURES": $Map<($BannerPattern), ($ResourceLocation)>

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModTextures$Type = ($ModTextures);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModTextures_ = $ModTextures$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/$BlackboardManager$Key" {
import {$TooltipComponent, $TooltipComponent$Type} from "packages/net/minecraft/world/inventory/tooltip/$TooltipComponent"

export class $BlackboardManager$Key implements $TooltipComponent {


public "equals"(another: any): boolean
public "hashCode"(): integer
public static "of"(packPixels: (long)[], glowing: boolean): $BlackboardManager$Key
public static "of"(packPixels: (long)[]): $BlackboardManager$Key
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BlackboardManager$Key$Type = ($BlackboardManager$Key);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BlackboardManager$Key_ = $BlackboardManager$Key$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/integration/inspirations/$CauldronRecipes" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $CauldronRecipes {

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CauldronRecipes$Type = ($CauldronRecipes);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CauldronRecipes_ = $CauldronRecipes$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/events/forge/$FireConsumeBlockEvent" {
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$ListenerList, $ListenerList$Type} from "packages/net/minecraftforge/eventbus/$ListenerList"
import {$IFireConsumeBlockEvent, $IFireConsumeBlockEvent$Type} from "packages/net/mehvahdjukaar/moonlight/api/events/$IFireConsumeBlockEvent"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockEvent, $BlockEvent$Type} from "packages/net/minecraftforge/event/level/$BlockEvent"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $FireConsumeBlockEvent extends $BlockEvent implements $IFireConsumeBlockEvent {

constructor()
constructor(world: $Level$Type, pos: $BlockPos$Type, state: $BlockState$Type, chance: integer, age: integer, face: $Direction$Type)

public "getFace"(): $Direction
public "getAge"(): integer
public "setFinalState"(state: $BlockState$Type): void
public "getChance"(): integer
public "getFinalState"(): $BlockState
public "getListenerList"(): $ListenerList
public "getState"(): $BlockState
public static "create"(pos: $BlockPos$Type, level: $Level$Type, state: $BlockState$Type, chance: integer, age: integer, face: $Direction$Type): $IFireConsumeBlockEvent
public "getLevel"(): $LevelAccessor
public "getPos"(): $BlockPos
get "face"(): $Direction
get "age"(): integer
set "finalState"(value: $BlockState$Type)
get "chance"(): integer
get "finalState"(): $BlockState
get "listenerList"(): $ListenerList
get "state"(): $BlockState
get "level"(): $LevelAccessor
get "pos"(): $BlockPos
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FireConsumeBlockEvent$Type = ($FireConsumeBlockEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FireConsumeBlockEvent_ = $FireConsumeBlockEvent$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/integration/framedblocks/$FramedSignPost" {
import {$ModelData, $ModelData$Type} from "packages/net/minecraftforge/client/model/data/$ModelData"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$SignPostBlockTile, $SignPostBlockTile$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$SignPostBlockTile"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"

export class $FramedSignPost {
static "framedFence": $BlockState

constructor()

public static "tryGettingFramedBlock"(targetBlock: $Block$Type, world: $Level$Type, blockpos: $BlockPos$Type): $Block
public static "handleInteraction"(tile: $SignPostBlockTile$Type, player: $Player$Type, handIn: $InteractionHand$Type, itemstack: $ItemStack$Type, level: $Level$Type, pos: $BlockPos$Type): boolean
public static "getModelData"(mimic: $BlockState$Type): $ModelData
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FramedSignPost$Type = ($FramedSignPost);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FramedSignPost_ = $FramedSignPost$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/integration/forge/$CCCompatImpl" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$LazyOptional, $LazyOptional$Type} from "packages/net/minecraftforge/common/util/$LazyOptional"
import {$SpeakerBlockTile, $SpeakerBlockTile$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$SpeakerBlockTile"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Capability, $Capability$Type} from "packages/net/minecraftforge/common/capabilities/$Capability"

export class $CCCompatImpl {

constructor()

public static "setup"(): void
public static "getText"(itemstack: $ItemStack$Type): (string)[]
public static "getPages"(itemstack: $ItemStack$Type): integer
public static "isPrintedBook"(item: $Item$Type): boolean
public static "getPeripheralSupplier"(tile: $SpeakerBlockTile$Type): $LazyOptional<(any)>
public static "isPeripheralCap"(cap: $Capability$Type<(any)>): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CCCompatImpl$Type = ($CCCompatImpl);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CCCompatImpl_ = $CCCompatImpl$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/faucet/$PowderSnowCauldronInteraction" {
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$FluidOffer, $FluidOffer$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/faucet/$FluidOffer"
import {$FaucetTarget$BlState, $FaucetTarget$BlState$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/faucet/$FaucetTarget$BlState"
import {$SoftFluidStack, $SoftFluidStack$Type} from "packages/net/mehvahdjukaar/moonlight/api/fluids/$SoftFluidStack"
import {$FaucetSource$BlState, $FaucetSource$BlState$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/faucet/$FaucetSource$BlState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $PowderSnowCauldronInteraction implements $FaucetTarget$BlState, $FaucetSource$BlState {


public "fill"(level: $Level$Type, pos: $BlockPos$Type, state: $BlockState$Type, fluid: $SoftFluidStack$Type, minAmount: integer): integer
public "drain"(level: $Level$Type, pos: $BlockPos$Type, dir: $Direction$Type, source: $BlockState$Type, amount: integer): void
public "getProvidedFluid"(level: $Level$Type, pos: $BlockPos$Type, dir: $Direction$Type, source: $BlockState$Type): $FluidOffer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PowderSnowCauldronInteraction$Type = ($PowderSnowCauldronInteraction);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PowderSnowCauldronInteraction_ = $PowderSnowCauldronInteraction$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/faucet/$RatsMilkInteraction" {
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$FluidOffer, $FluidOffer$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/faucet/$FluidOffer"
import {$FaucetTarget$BlState, $FaucetTarget$BlState$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/faucet/$FaucetTarget$BlState"
import {$SoftFluidStack, $SoftFluidStack$Type} from "packages/net/mehvahdjukaar/moonlight/api/fluids/$SoftFluidStack"
import {$FaucetSource$BlState, $FaucetSource$BlState$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/faucet/$FaucetSource$BlState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $RatsMilkInteraction implements $FaucetTarget$BlState, $FaucetSource$BlState {

constructor()

public "fill"(level: $Level$Type, pos: $BlockPos$Type, state: $BlockState$Type, fluid: $SoftFluidStack$Type, minAmount: integer): integer
public "drain"(level: $Level$Type, pos: $BlockPos$Type, dir: $Direction$Type, source: $BlockState$Type, amount: integer): void
public "getProvidedFluid"(level: $Level$Type, pos: $BlockPos$Type, dir: $Direction$Type, source: $BlockState$Type): $FluidOffer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RatsMilkInteraction$Type = ($RatsMilkInteraction);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RatsMilkInteraction_ = $RatsMilkInteraction$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/renderers/entities/$SlingshotProjectileRenderer" {
import {$EntityRendererProvider$Context, $EntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRendererProvider$Context"
import {$ItemSupplier, $ItemSupplier$Type} from "packages/net/minecraft/world/entity/projectile/$ItemSupplier"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$EntityRenderer, $EntityRenderer$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRenderer"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$SlingshotProjectileEntity, $SlingshotProjectileEntity$Type} from "packages/net/mehvahdjukaar/supplementaries/common/entities/$SlingshotProjectileEntity"

export class $SlingshotProjectileRenderer<T extends ($SlingshotProjectileEntity) & ($ItemSupplier)> extends $EntityRenderer<(T)> {
 "shadowRadius": float

constructor(context: $EntityRendererProvider$Context$Type)

public "render"(entity: T, pEntityYaw: float, partialTicks: float, poseStack: $PoseStack$Type, buffer: $MultiBufferSource$Type, light: integer): void
public "getTextureLocation"(entity: $SlingshotProjectileEntity$Type): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SlingshotProjectileRenderer$Type<T> = ($SlingshotProjectileRenderer<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SlingshotProjectileRenderer_<T> = $SlingshotProjectileRenderer$Type<(T)>;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$JarBlockTile" {
import {$MobContainer, $MobContainer$Type} from "packages/net/mehvahdjukaar/supplementaries/common/misc/mob_container/$MobContainer"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Connection, $Connection$Type} from "packages/net/minecraft/network/$Connection"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$ExtraModelData, $ExtraModelData$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$ExtraModelData"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ClientboundBlockEntityDataPacket, $ClientboundBlockEntityDataPacket$Type} from "packages/net/minecraft/network/protocol/game/$ClientboundBlockEntityDataPacket"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$IExtraModelDataProvider, $IExtraModelDataProvider$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$IExtraModelDataProvider"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$LockCode, $LockCode$Type} from "packages/net/minecraft/world/$LockCode"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$ItemDisplayTile, $ItemDisplayTile$Type} from "packages/net/mehvahdjukaar/moonlight/api/block/$ItemDisplayTile"
import {$IMobContainerProvider, $IMobContainerProvider$Type} from "packages/net/mehvahdjukaar/supplementaries/common/misc/mob_container/$IMobContainerProvider"
import {$ModelData, $ModelData$Type} from "packages/net/minecraftforge/client/model/data/$ModelData"
import {$SoftFluidTank, $SoftFluidTank$Type} from "packages/net/mehvahdjukaar/moonlight/api/fluids/$SoftFluidTank"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$SoftFluid, $SoftFluid$Type} from "packages/net/mehvahdjukaar/moonlight/api/fluids/$SoftFluid"
import {$ExtraModelData$Builder, $ExtraModelData$Builder$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$ExtraModelData$Builder"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$ModelDataKey, $ModelDataKey$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$ModelDataKey"
import {$ISoftFluidTankProvider, $ISoftFluidTankProvider$Type} from "packages/net/mehvahdjukaar/moonlight/api/block/$ISoftFluidTankProvider"

export class $JarBlockTile extends $ItemDisplayTile implements $IMobContainerProvider, $ISoftFluidTankProvider, $IExtraModelDataProvider {
static readonly "FLUID": $ModelDataKey<($SoftFluid)>
static readonly "FILL_LEVEL": $ModelDataKey<(float)>
readonly "mobContainer": $MobContainer
readonly "fluidHolder": $SoftFluidTank
static readonly "LOOT_TABLE_TAG": string
static readonly "LOOT_TABLE_SEED_TAG": string
 "lootTable": $ResourceLocation
 "lootTableSeed": long
 "lockKey": $LockCode
 "blockState": $BlockState

constructor(pos: $BlockPos$Type, state: $BlockState$Type)

public static "tick"(pLevel: $Level$Type, pPos: $BlockPos$Type, pState: $BlockState$Type, tile: $JarBlockTile$Type): void
public "isFull"(): boolean
public "updateTileOnInventoryChanged"(): void
public "updateClientVisualsOnLoad"(): void
public "getMobContainer"(): $MobContainer
public "isPonyJar"(): boolean
public "tryAddingItem"(itemstack: $ItemStack$Type): boolean
public "tryAddingItem"(stack: $ItemStack$Type, player: $Player$Type, handIn: $InteractionHand$Type): boolean
public "handleExtractItem"(player: $Player$Type, hand: $InteractionHand$Type): boolean
public "resetHolders"(): void
public "canInteractWithSoftFluidTank"(): boolean
public "canTakeItemThroughFace"(index: integer, stack: $ItemStack$Type, direction: $Direction$Type): boolean
public "canPlaceItemThroughFace"(index: integer, stack: $ItemStack$Type, direction: $Direction$Type): boolean
public "hasContent"(): boolean
public "extractItem"(): $ItemStack
public "load"(compound: $CompoundTag$Type): void
public "m_183515_"(tag: $CompoundTag$Type): void
public "getSoftFluidTank"(): $SoftFluidTank
public "getDirection"(): $Direction
public "canPlaceItem"(index: integer, stack: $ItemStack$Type): boolean
public "m_6820_"(): $Component
public "handleInteraction"(player: $Player$Type, hand: $InteractionHand$Type, level: $Level$Type, pos: $BlockPos$Type): boolean
public "addExtraModelData"(builder: $ExtraModelData$Builder$Type): void
public "requestModelReload"(): void
/**
 * 
 * @deprecated
 */
public "getExtraModelData"(): $ExtraModelData
public "afterDataPacket"(oldData: $ExtraModelData$Type): void
public "onDataPacket"(net: $Connection$Type, pkt: $ClientboundBlockEntityDataPacket$Type): void
public "getModelData"(): $ModelData
public "getPersistentData"(): $CompoundTag
public "onChunkUnloaded"(): void
public static "stillValidBlockEntity"(arg0: $BlockEntity$Type, arg1: $Player$Type, arg2: integer): boolean
public static "stillValidBlockEntity"(arg0: $BlockEntity$Type, arg1: $Player$Type): boolean
public static "tryClear"(arg0: any): void
get "full"(): boolean
get "mobContainer"(): $MobContainer
get "ponyJar"(): boolean
get "softFluidTank"(): $SoftFluidTank
get "direction"(): $Direction
get "extraModelData"(): $ExtraModelData
get "modelData"(): $ModelData
get "persistentData"(): $CompoundTag
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $JarBlockTile$Type = ($JarBlockTile);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $JarBlockTile_ = $JarBlockTile$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/misc/map_markers/markers/$FlagMarker" {
import {$ColoredMarker, $ColoredMarker$Type} from "packages/net/mehvahdjukaar/supplementaries/common/misc/map_markers/markers/$ColoredMarker"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$DyeColor, $DyeColor$Type} from "packages/net/minecraft/world/item/$DyeColor"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $FlagMarker extends $ColoredMarker {
static readonly "HAS_SMALL_TEXTURE_FLAG": integer

constructor()
constructor(pos: $BlockPos$Type, color: $DyeColor$Type, name: $Component$Type)

public static "getFromWorld"(world: $BlockGetter$Type, pos: $BlockPos$Type): $FlagMarker
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FlagMarker$Type = ($FlagMarker);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FlagMarker_ = $FlagMarker$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$TrappedPresentBlockTile" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$AbstractContainerMenu, $AbstractContainerMenu$Type} from "packages/net/minecraft/world/inventory/$AbstractContainerMenu"
import {$LockCode, $LockCode$Type} from "packages/net/minecraft/world/$LockCode"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"
import {$AbstractPresentBlockTile, $AbstractPresentBlockTile$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$AbstractPresentBlockTile"

export class $TrappedPresentBlockTile extends $AbstractPresentBlockTile {
static readonly "LOOT_TABLE_TAG": string
static readonly "LOOT_TABLE_SEED_TAG": string
 "lootTable": $ResourceLocation
 "lootTableSeed": long
 "lockKey": $LockCode
 "blockState": $BlockState

constructor(pos: $BlockPos$Type, state: $BlockState$Type)

public "canHoldItems"(): boolean
public "detonate"(level: $ServerLevel$Type, pos: $BlockPos$Type): void
public "isPrimed"(): boolean
public static "isPrimed"(stack: $ItemStack$Type): boolean
public "updateState"(primed: boolean): void
public "interact"(level: $Level$Type, pos: $BlockPos$Type, state: $BlockState$Type, player: $Player$Type): $InteractionResult
public "getMaxStackSize"(): integer
public "m_6555_"(id: integer, inv: $Inventory$Type): $AbstractContainerMenu
public "m_6820_"(): $Component
public "canOpen"(player: $Player$Type): boolean
public "setChanged"(): void
public static "stillValidBlockEntity"(arg0: $BlockEntity$Type, arg1: $Player$Type, arg2: integer): boolean
public static "stillValidBlockEntity"(arg0: $BlockEntity$Type, arg1: $Player$Type): boolean
public static "tryClear"(arg0: any): void
get "primed"(): boolean
get "maxStackSize"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TrappedPresentBlockTile$Type = ($TrappedPresentBlockTile);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TrappedPresentBlockTile_ = $TrappedPresentBlockTile$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/core/misc/$IMapDataPacketExtension" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$MapItemSavedData$MapPatch, $MapItemSavedData$MapPatch$Type} from "packages/net/minecraft/world/level/saveddata/maps/$MapItemSavedData$MapPatch"
import {$CustomMapDecoration, $CustomMapDecoration$Type} from "packages/net/mehvahdjukaar/moonlight/api/map/$CustomMapDecoration"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ResourceKey, $ResourceKey$Type} from "packages/net/minecraft/resources/$ResourceKey"

export interface $IMapDataPacketExtension {

 "moonlight$sendCustomMapDataTag"(arg0: $CompoundTag$Type): void
 "moonlight$sendCustomDecorations"(arg0: $Collection$Type<($CustomMapDecoration$Type)>): void
 "moonlight$getDimension"(): $ResourceKey<($Level)>
 "moonlight$getColorPatch"(): $MapItemSavedData$MapPatch
 "moonlight$getCustomMapDataTag"(): $CompoundTag
}

export namespace $IMapDataPacketExtension {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IMapDataPacketExtension$Type = ($IMapDataPacketExtension);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IMapDataPacketExtension_ = $IMapDataPacketExtension$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/$BlackboardManager" {
import {$BlackboardManager$Key, $BlackboardManager$Key$Type} from "packages/net/mehvahdjukaar/supplementaries/client/$BlackboardManager$Key"
import {$BlackboardManager$Blackboard, $BlackboardManager$Blackboard$Type} from "packages/net/mehvahdjukaar/supplementaries/client/$BlackboardManager$Blackboard"

export class $BlackboardManager {

constructor()

public static "getInstance"(key: $BlackboardManager$Key$Type): $BlackboardManager$Blackboard
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BlackboardManager$Type = ($BlackboardManager);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BlackboardManager_ = $BlackboardManager$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/common/block/$CarpetStairBlock" {
import {$IntegerProperty, $IntegerProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$IntegerProperty"
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$EntityBlock, $EntityBlock$Type} from "packages/net/minecraft/world/level/block/$EntityBlock"
import {$StairsShape, $StairsShape$Type} from "packages/net/minecraft/world/level/block/state/properties/$StairsShape"
import {$IRecolorable, $IRecolorable$Type} from "packages/net/mehvahdjukaar/moonlight/api/block/$IRecolorable"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$FluidState, $FluidState$Type} from "packages/net/minecraft/world/level/material/$FluidState"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$DyeColor, $DyeColor$Type} from "packages/net/minecraft/world/item/$DyeColor"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$DirectionProperty, $DirectionProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$DirectionProperty"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$Half, $Half$Type} from "packages/net/minecraft/world/level/block/state/properties/$Half"
import {$ModStairBlock, $ModStairBlock$Type} from "packages/net/mehvahdjukaar/moonlight/api/block/$ModStairBlock"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$CollisionContext, $CollisionContext$Type} from "packages/net/minecraft/world/phys/shapes/$CollisionContext"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$EnumProperty, $EnumProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$EnumProperty"
import {$HitResult, $HitResult$Type} from "packages/net/minecraft/world/phys/$HitResult"
import {$LootParams$Builder, $LootParams$Builder$Type} from "packages/net/minecraft/world/level/storage/loot/$LootParams$Builder"
import {$SoundType, $SoundType$Type} from "packages/net/minecraft/world/level/block/$SoundType"
import {$BlockEntityTicker, $BlockEntityTicker$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityTicker"
import {$GameEventListener, $GameEventListener$Type} from "packages/net/minecraft/world/level/gameevent/$GameEventListener"

export class $CarpetStairBlock extends $ModStairBlock implements $EntityBlock, $IRecolorable {
static readonly "LIGHT_LEVEL": $IntegerProperty
static readonly "SOLID": $BooleanProperty
static readonly "FACING": $DirectionProperty
static readonly "HALF": $EnumProperty<($Half)>
static readonly "SHAPE": $EnumProperty<($StairsShape)>
static readonly "WATERLOGGED": $BooleanProperty
readonly "baseState": $BlockState
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(block: $Block$Type)

public "destroy"(level: $LevelAccessor$Type, pos: $BlockPos$Type, state: $BlockState$Type): void
public "getCloneItemStack"(level: $BlockGetter$Type, pos: $BlockPos$Type, state: $BlockState$Type): $ItemStack
public "getSoundType"(state: $BlockState$Type, world: $LevelReader$Type, pos: $BlockPos$Type, entity: $Entity$Type): $SoundType
public "getCloneItemStack"(state: $BlockState$Type, target: $HitResult$Type, level: $BlockGetter$Type, pos: $BlockPos$Type, player: $Player$Type): $ItemStack
public "tryRecolor"(level: $Level$Type, blockPos: $BlockPos$Type, blockState: $BlockState$Type, dyeColor: $DyeColor$Type): boolean
public "isDefaultColor"(level: $Level$Type, blockPos: $BlockPos$Type, blockState: $BlockState$Type): boolean
public "updateShape"(state: $BlockState$Type, facing: $Direction$Type, facingState: $BlockState$Type, world: $LevelAccessor$Type, currentPos: $BlockPos$Type, facingPos: $BlockPos$Type): $BlockState
public "getDrops"(state: $BlockState$Type, builder: $LootParams$Builder$Type): $List<($ItemStack)>
public "getOcclusionShape"(state: $BlockState$Type, level: $BlockGetter$Type, pos: $BlockPos$Type): $VoxelShape
public "getShape"(state: $BlockState$Type, level: $BlockGetter$Type, pos: $BlockPos$Type, context: $CollisionContext$Type): $VoxelShape
public "getDestroyProgress"(state: $BlockState$Type, player: $Player$Type, worldIn: $BlockGetter$Type, pos: $BlockPos$Type): float
public "placeLiquid"(level: $LevelAccessor$Type, pos: $BlockPos$Type, state: $BlockState$Type, fluidState: $FluidState$Type): boolean
public "newBlockEntity"(pPos: $BlockPos$Type, pState: $BlockState$Type): $BlockEntity
public "getTicker"<T extends $BlockEntity>(arg0: $Level$Type, arg1: $BlockState$Type, arg2: $BlockEntityType$Type<(T)>): $BlockEntityTicker<(T)>
public "getListener"<T extends $BlockEntity>(arg0: $ServerLevel$Type, arg1: T): $GameEventListener
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CarpetStairBlock$Type = ($CarpetStairBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CarpetStairBlock_ = $CarpetStairBlock$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$SpeakerBlockTile" {
import {$LazyOptional, $LazyOptional$Type} from "packages/net/minecraftforge/common/util/$LazyOptional"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$IOnePlayerGui, $IOnePlayerGui$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/$IOnePlayerGui"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Packet, $Packet$Type} from "packages/net/minecraft/network/protocol/$Packet"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$SpeakerBlockTile$Mode, $SpeakerBlockTile$Mode$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$SpeakerBlockTile$Mode"
import {$Capability, $Capability$Type} from "packages/net/minecraftforge/common/capabilities/$Capability"
import {$ClientGamePacketListener, $ClientGamePacketListener$Type} from "packages/net/minecraft/network/protocol/game/$ClientGamePacketListener"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$FilteredText, $FilteredText$Type} from "packages/net/minecraft/server/network/$FilteredText"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$IOwnerProtected, $IOwnerProtected$Type} from "packages/net/mehvahdjukaar/moonlight/api/block/$IOwnerProtected"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Nameable, $Nameable$Type} from "packages/net/minecraft/world/$Nameable"

export class $SpeakerBlockTile extends $BlockEntity implements $Nameable, $IOwnerProtected, $IOnePlayerGui {
 "ccHack": any
 "blockState": $BlockState

constructor(pos: $BlockPos$Type, state: $BlockState$Type)

public "getMessage"(filtered: boolean): $Component
public "getOwner"(): $UUID
public "setOwner"(owner: $UUID$Type): void
public "openScreen"(level: $Level$Type, pos: $BlockPos$Type, player: $Player$Type): void
public "getName"(): $Component
public "sendMessage"(): void
public "setMode"(mode: $SpeakerBlockTile$Mode$Type): void
public "getMode"(): $SpeakerBlockTile$Mode
public "setMessage"(message: $Component$Type, filteredMessage: $Component$Type): void
public "setMessage"(message: $Component$Type): void
public "setPlayerWhoMayEdit"(playerWhoMayEdit: $UUID$Type): void
public "getPlayerWhoMayEdit"(): $UUID
public "setVolume"(volume: double): void
public "getVolume"(): double
public "getDefaultName"(): $Component
public "getCapability"(cap: $Capability$Type<(any)>, direction: $Direction$Type): $LazyOptional<(any)>
public "setCustomName"(name: $Component$Type): void
public "load"(compound: $CompoundTag$Type): void
public "m_183515_"(compound: $CompoundTag$Type): void
public "tryAcceptingClientText"(player: $ServerPlayer$Type, filteredText: $FilteredText$Type): boolean
public "getCustomName"(): $Component
public "getUpdateTag"(): $CompoundTag
public "getUpdatePacket"(): $Packet<($ClientGamePacketListener)>
public "setRemoved"(): void
public "getDisplayName"(): $Component
public "hasCustomName"(): boolean
public "isPublic"(): boolean
public "isOwnedBy"(player: $Player$Type): boolean
public "isAccessibleBy"(player: $Player$Type): boolean
public "loadOwner"(tag: $CompoundTag$Type): void
public "saveOwner"(tag: $CompoundTag$Type): void
public "isNotOwnedBy"(player: $Player$Type): boolean
public "tryOpeningEditGui"(player: $ServerPlayer$Type, pos: $BlockPos$Type): boolean
public "playerIsTooFarAwayToEdit"(level: $Level$Type, pos: $BlockPos$Type, uUID: $UUID$Type): boolean
public "shouldUseContainerMenu"(): boolean
public "validatePlayerWhoMayEdit"(level: $Level$Type, pos: $BlockPos$Type): void
public "isOtherPlayerEditing"(player: $Player$Type): boolean
public "openScreen"(level: $Level$Type, pos: $BlockPos$Type, player: $Player$Type, direction: $Direction$Type): void
public "sendOpenGuiPacket"(level: $Level$Type, pos: $BlockPos$Type, player: $Player$Type, hitFace: $Direction$Type): void
public "sendOpenGuiPacket"(level: $Level$Type, pos: $BlockPos$Type, player: $Player$Type): void
get "owner"(): $UUID
set "owner"(value: $UUID$Type)
get "name"(): $Component
set "mode"(value: $SpeakerBlockTile$Mode$Type)
get "mode"(): $SpeakerBlockTile$Mode
set "message"(value: $Component$Type)
set "playerWhoMayEdit"(value: $UUID$Type)
get "playerWhoMayEdit"(): $UUID
set "volume"(value: double)
get "volume"(): double
get "defaultName"(): $Component
set "customName"(value: $Component$Type)
get "customName"(): $Component
get "updateTag"(): $CompoundTag
get "updatePacket"(): $Packet<($ClientGamePacketListener)>
get "displayName"(): $Component
get "public"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SpeakerBlockTile$Type = ($SpeakerBlockTile);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SpeakerBlockTile_ = $SpeakerBlockTile$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/util/math/kmeans/$DataSet$ColorPoint" {
import {$PaletteColor, $PaletteColor$Type} from "packages/net/mehvahdjukaar/moonlight/api/resources/textures/$PaletteColor"
import {$List, $List$Type} from "packages/java/util/$List"
import {$IDataEntry, $IDataEntry$Type} from "packages/net/mehvahdjukaar/moonlight/api/util/math/kmeans/$IDataEntry"

export class $DataSet$ColorPoint implements $IDataEntry<($DataSet$ColorPoint)> {

constructor(color: $PaletteColor$Type)

public "cast"(): $DataSet$ColorPoint
public "average"(others: $List$Type<($IDataEntry$Type<($DataSet$ColorPoint$Type)>)>): $IDataEntry<($DataSet$ColorPoint)>
public "distTo"(a: $IDataEntry$Type<($DataSet$ColorPoint$Type)>): float
public "getColor"(): $PaletteColor
public "getClusterNo"(): integer
public "setClusterNo"(clusterNo: integer): void
get "color"(): $PaletteColor
get "clusterNo"(): integer
set "clusterNo"(value: integer)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DataSet$ColorPoint$Type = ($DataSet$ColorPoint);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DataSet$ColorPoint_ = $DataSet$ColorPoint$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/util/forge/$UtilsImpl" {
import {$BaseMapCodec, $BaseMapCodec$Type} from "packages/com/mojang/serialization/codecs/$BaseMapCodec"
import {$Codec, $Codec$Type} from "packages/com/mojang/serialization/$Codec"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $UtilsImpl {

constructor()

public static "optionalMapCodec"<K, V, C extends ($BaseMapCodec<(K), (V)>) & ($Codec<($Map<(K), (V)>)>)>(keyCodec: $Codec$Type<(K)>, elementCodec: $Codec$Type<(V)>): C
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $UtilsImpl$Type = ($UtilsImpl);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $UtilsImpl_ = $UtilsImpl$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/core/network/$ClientBoundSpawnCustomEntityMessage" {
import {$Message, $Message$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/network/$Message"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$ChannelHandler$Context, $ChannelHandler$Context$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/network/$ChannelHandler$Context"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $ClientBoundSpawnCustomEntityMessage implements $Message {

constructor(e: $Entity$Type)
constructor(buf: $FriendlyByteBuf$Type)

public "handle"(context: $ChannelHandler$Context$Type): void
public "writeToBuffer"(buf: $FriendlyByteBuf$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientBoundSpawnCustomEntityMessage$Type = ($ClientBoundSpawnCustomEntityMessage);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientBoundSpawnCustomEntityMessage_ = $ClientBoundSpawnCustomEntityMessage$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/set/wood/$WoodType" {
import {$WoodType as $WoodType$0, $WoodType$Type as $WoodType$0$Type} from "packages/net/minecraft/world/level/block/state/properties/$WoodType"
import {$MapColor, $MapColor$Type} from "packages/net/minecraft/world/level/material/$MapColor"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$ItemLike, $ItemLike$Type} from "packages/net/minecraft/world/level/$ItemLike"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Codec, $Codec$Type} from "packages/com/mojang/serialization/$Codec"
import {$BlockType, $BlockType$Type} from "packages/net/mehvahdjukaar/moonlight/api/set/$BlockType"

export class $WoodType extends $BlockType {
static readonly "CODEC": $Codec<($WoodType)>
readonly "planks": $Block
readonly "log": $Block
readonly "id": $ResourceLocation

constructor(id: $ResourceLocation$Type, baseBlock: $Block$Type, logBlock: $Block$Type)

public "toVanilla"(): $WoodType$0
public "getColor"(): $MapColor
public "copyProperties"(): $BlockBehaviour$Properties
public "getTranslationKey"(): string
public "initializeChildrenBlocks"(): void
public "initializeChildrenItems"(): void
public "mainChild"(): $ItemLike
public "getTexturePath"(): string
public "toVanillaOrOak"(): $WoodType$0
public "canBurn"(): boolean
get "color"(): $MapColor
get "translationKey"(): string
get "texturePath"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WoodType$Type = ($WoodType);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WoodType_ = $WoodType$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/resources/textures/$TextureImage$FramePixelConsumer" {
import {$TriConsumer, $TriConsumer$Type} from "packages/org/apache/logging/log4j/util/$TriConsumer"

export interface $TextureImage$FramePixelConsumer extends $TriConsumer<(integer), (integer), (integer)> {

 "accept"(arg0: integer, arg1: integer, arg2: integer): void

(arg0: integer, arg1: integer, arg2: integer): void
}

export namespace $TextureImage$FramePixelConsumer {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TextureImage$FramePixelConsumer$Type = ($TextureImage$FramePixelConsumer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TextureImage$FramePixelConsumer_ = $TextureImage$FramePixelConsumer$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/blocks/$BlazeRodBlock" {
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Direction$Axis, $Direction$Axis$Type} from "packages/net/minecraft/core/$Direction$Axis"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$StickBlock, $StickBlock$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/blocks/$StickBlock"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $BlazeRodBlock extends $StickBlock {
static readonly "AXIS_X": $BooleanProperty
static readonly "AXIS_Y": $BooleanProperty
static readonly "AXIS_Z": $BooleanProperty
static readonly "AXIS2PROPERTY": $Map<($Direction$Axis), ($BooleanProperty)>
static readonly "WATERLOGGED": $BooleanProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(properties: $BlockBehaviour$Properties$Type)

public "stepOn"(world: $Level$Type, pos: $BlockPos$Type, state: $BlockState$Type, entity: $Entity$Type): void
public "animateTick"(state: $BlockState$Type, world: $Level$Type, pos: $BlockPos$Type, random: $RandomSource$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BlazeRodBlock$Type = ($BlazeRodBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BlazeRodBlock_ = $BlazeRodBlock$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/blocks/$FlaxBaleBlock" {
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$DirectionProperty, $DirectionProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$DirectionProperty"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $FlaxBaleBlock extends $Block {
static readonly "FACING": $DirectionProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(properties: $BlockBehaviour$Properties$Type)

public "getStateForPlacement"(context: $BlockPlaceContext$Type): $BlockState
public "fallOn"(level: $Level$Type, state: $BlockState$Type, pos: $BlockPos$Type, entity: $Entity$Type, height: float): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FlaxBaleBlock$Type = ($FlaxBaleBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FlaxBaleBlock_ = $FlaxBaleBlock$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/block_models/$GobletModelLoader" {
import {$Material, $Material$Type} from "packages/net/minecraft/client/resources/model/$Material"
import {$JsonObject, $JsonObject$Type} from "packages/com/google/gson/$JsonObject"
import {$JsonElement, $JsonElement$Type} from "packages/com/google/gson/$JsonElement"
import {$ModelBaker, $ModelBaker$Type} from "packages/net/minecraft/client/resources/model/$ModelBaker"
import {$ModelState, $ModelState$Type} from "packages/net/minecraft/client/resources/model/$ModelState"
import {$BakedModel, $BakedModel$Type} from "packages/net/minecraft/client/resources/model/$BakedModel"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$CustomModelLoader, $CustomModelLoader$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$CustomModelLoader"
import {$CustomGeometry, $CustomGeometry$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$CustomGeometry"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$JsonDeserializationContext, $JsonDeserializationContext$Type} from "packages/com/google/gson/$JsonDeserializationContext"
import {$TextureAtlasSprite, $TextureAtlasSprite$Type} from "packages/net/minecraft/client/renderer/texture/$TextureAtlasSprite"

export class $GobletModelLoader implements $CustomModelLoader {

constructor()

public "deserialize"(json: $JsonObject$Type, jsonDeserializationContext: $JsonDeserializationContext$Type): $CustomGeometry
public static "parseModel"(j: $JsonElement$Type, modelBaker: $ModelBaker$Type, spriteGetter: $Function$Type<($Material$Type), ($TextureAtlasSprite$Type)>, transform: $ModelState$Type, location: $ResourceLocation$Type): $BakedModel
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GobletModelLoader$Type = ($GobletModelLoader);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GobletModelLoader_ = $GobletModelLoader$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/events/behaviors/$CauldronConversion" {
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$SoftFluidStack, $SoftFluidStack$Type} from "packages/net/mehvahdjukaar/moonlight/api/fluids/$SoftFluidStack"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$BlockUse, $BlockUse$Type} from "packages/net/mehvahdjukaar/amendments/events/behaviors/$BlockUse"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"

export class $CauldronConversion implements $BlockUse {

constructor()

public static "convert"(state: $BlockState$Type, pos: $BlockPos$Type, level: $Level$Type, player: $Player$Type, hand: $InteractionHand$Type, stack: $ItemStack$Type, checkCauldronInteractions: boolean): $InteractionResult
public "isEnabled"(): boolean
public "appliesToBlock"(block: $Block$Type): boolean
public static "getNewState"(pos: $BlockPos$Type, level: $Level$Type, fluid: $SoftFluidStack$Type): $BlockState
public static "getNewState"(pos: $BlockPos$Type, level: $Level$Type, stack: $ItemStack$Type, checkCauldronInteractions: boolean): $BlockState
public static "getNewState"(pos: $BlockPos$Type, level: $Level$Type, stack: $ItemStack$Type): $BlockState
public "tryPerformingAction"(state: $BlockState$Type, pos: $BlockPos$Type, level: $Level$Type, player: $Player$Type, hand: $InteractionHand$Type, stack: $ItemStack$Type, hit: $BlockHitResult$Type): $InteractionResult
public "altersWorld"(): boolean
get "enabled"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CauldronConversion$Type = ($CauldronConversion);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CauldronConversion_ = $CauldronConversion$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/misc/mob_container/$BucketHelper" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $BucketHelper {

constructor()

public static "isFishBucket"(item: $Item$Type): boolean
public static "getValidBuckets"(): $Collection<($Item)>
public static "isModdedFish"(entity: $Entity$Type): boolean
public static "getBucketFromEntity"(entity: $Entity$Type): $ItemStack
public static "getEntityTypeFromBucket"(bucket: $Item$Type): $EntityType<(any)>
get "validBuckets"(): $Collection<($Item)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BucketHelper$Type = ($BucketHelper);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BucketHelper_ = $BucketHelper$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/client/model/$WallLanternBakedModel" {
import {$ModelData, $ModelData$Type} from "packages/net/minecraftforge/client/model/data/$ModelData"
import {$ModelState, $ModelState$Type} from "packages/net/minecraft/client/resources/model/$ModelState"
import {$ItemTransforms, $ItemTransforms$Type} from "packages/net/minecraft/client/renderer/block/model/$ItemTransforms"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$ExtraModelData, $ExtraModelData$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$ExtraModelData"
import {$CustomBakedModel, $CustomBakedModel$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$CustomBakedModel"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BakedModel, $BakedModel$Type} from "packages/net/minecraft/client/resources/model/$BakedModel"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$RenderType, $RenderType$Type} from "packages/net/minecraft/client/renderer/$RenderType"
import {$ItemOverrides, $ItemOverrides$Type} from "packages/net/minecraft/client/renderer/block/model/$ItemOverrides"
import {$ItemDisplayContext, $ItemDisplayContext$Type} from "packages/net/minecraft/world/item/$ItemDisplayContext"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$List, $List$Type} from "packages/java/util/$List"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$ChunkRenderTypeSet, $ChunkRenderTypeSet$Type} from "packages/net/minecraftforge/client/$ChunkRenderTypeSet"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockAndTintGetter, $BlockAndTintGetter$Type} from "packages/net/minecraft/world/level/$BlockAndTintGetter"
import {$BakedQuad, $BakedQuad$Type} from "packages/net/minecraft/client/renderer/block/model/$BakedQuad"
import {$TextureAtlasSprite, $TextureAtlasSprite$Type} from "packages/net/minecraft/client/renderer/texture/$TextureAtlasSprite"

export class $WallLanternBakedModel implements $CustomBakedModel {

constructor(support: $BakedModel$Type, state: $ModelState$Type)

public "usesBlockLight"(): boolean
public "isGui3d"(): boolean
public "getBlockQuads"(state: $BlockState$Type, side: $Direction$Type, rand: $RandomSource$Type, renderType: $RenderType$Type, data: $ExtraModelData$Type): $List<($BakedQuad)>
public "getBlockParticle"(data: $ExtraModelData$Type): $TextureAtlasSprite
public "isCustomRenderer"(): boolean
public "getOverrides"(): $ItemOverrides
public "getTransforms"(): $ItemTransforms
public "useAmbientOcclusion"(): boolean
public "getParticleIcon"(): $TextureAtlasSprite
public "getQuads"(state: $BlockState$Type, side: $Direction$Type, rand: $RandomSource$Type): $List<(any)>
public "getQuads"(state: $BlockState$Type, side: $Direction$Type, rand: $RandomSource$Type, modelData: $ModelData$Type, type: $RenderType$Type): $List<(any)>
public "getParticleIcon"(data: $ModelData$Type): $TextureAtlasSprite
public "getModelData"(level: $BlockAndTintGetter$Type, pos: $BlockPos$Type, state: $BlockState$Type, modelData: $ModelData$Type): $ModelData
public "getModelData"(originalData: $ExtraModelData$Type, stack: $ItemStack$Type): $ExtraModelData
public "getModelData"(tileData: $ExtraModelData$Type, pos: $BlockPos$Type, state: $BlockState$Type, level: $BlockAndTintGetter$Type): $ExtraModelData
public "useAmbientOcclusion"(arg0: $BlockState$Type, arg1: $RenderType$Type): boolean
public "useAmbientOcclusion"(arg0: $BlockState$Type): boolean
public "getRenderTypes"(arg0: $ItemStack$Type, arg1: boolean): $List<($RenderType)>
public "getRenderTypes"(arg0: $BlockState$Type, arg1: $RandomSource$Type, arg2: $ModelData$Type): $ChunkRenderTypeSet
public "getRenderPasses"(arg0: $ItemStack$Type, arg1: boolean): $List<($BakedModel)>
public "applyTransform"(arg0: $ItemDisplayContext$Type, arg1: $PoseStack$Type, arg2: boolean): $BakedModel
public "useAmbientOcclusionWithLightEmission"(arg0: $BlockState$Type, arg1: $RenderType$Type): boolean
get "gui3d"(): boolean
get "customRenderer"(): boolean
get "overrides"(): $ItemOverrides
get "transforms"(): $ItemTransforms
get "particleIcon"(): $TextureAtlasSprite
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WallLanternBakedModel$Type = ($WallLanternBakedModel);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WallLanternBakedModel_ = $WallLanternBakedModel$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/events/$ILightningStruckBlockEvent" {
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$SimpleEvent, $SimpleEvent$Type} from "packages/net/mehvahdjukaar/moonlight/api/events/$SimpleEvent"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$LightningBolt, $LightningBolt$Type} from "packages/net/minecraft/world/entity/$LightningBolt"

export interface $ILightningStruckBlockEvent extends $SimpleEvent {

 "getState"(): $BlockState
 "getLevel"(): $LevelAccessor
 "getEntity"(): $LightningBolt
 "getPos"(): $BlockPos
}

export namespace $ILightningStruckBlockEvent {
function create(state: $BlockState$Type, level: $LevelAccessor$Type, pos: $BlockPos$Type, entity: $LightningBolt$Type): $ILightningStruckBlockEvent
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ILightningStruckBlockEvent$Type = ($ILightningStruckBlockEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ILightningStruckBlockEvent_ = $ILightningStruckBlockEvent$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/item/additional_placements/$AdditionalItemPlacementsAPI" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$AdditionalItemPlacementsAPI$Event, $AdditionalItemPlacementsAPI$Event$Type} from "packages/net/mehvahdjukaar/moonlight/api/item/additional_placements/$AdditionalItemPlacementsAPI$Event"
import {$AdditionalItemPlacement, $AdditionalItemPlacement$Type} from "packages/net/mehvahdjukaar/moonlight/api/item/additional_placements/$AdditionalItemPlacement"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"

export class $AdditionalItemPlacementsAPI {

constructor()

/**
 * 
 * @deprecated
 */
public static "register"(placement: $Supplier$Type<(any)>, itemSupplier: $Supplier$Type<(any)>): void
/**
 * 
 * @deprecated
 */
public static "register"(placement: $Function$Type<($Item$Type), (any)>, itemPredicate: $Predicate$Type<($Item$Type)>): void
public static "afterItemReg"(): void
public static "addRegistration"(eventConsumer: $Consumer$Type<($AdditionalItemPlacementsAPI$Event$Type)>): void
/**
 * 
 * @deprecated
 */
public static "registerSimple"(block: $Supplier$Type<(any)>, itemSupplier: $Supplier$Type<(any)>): void
public static "hasBehavior"(item: $Item$Type): boolean
public static "getBehavior"(item: $Item$Type): $AdditionalItemPlacement
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AdditionalItemPlacementsAPI$Type = ($AdditionalItemPlacementsAPI);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AdditionalItemPlacementsAPI_ = $AdditionalItemPlacementsAPI$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/items/$DispenserMinecartItem" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$UseOnContext, $UseOnContext$Type} from "packages/net/minecraft/world/item/context/$UseOnContext"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$DispenseItemBehavior, $DispenseItemBehavior$Type} from "packages/net/minecraft/core/dispenser/$DispenseItemBehavior"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $DispenserMinecartItem extends $Item {
static readonly "DISPENSE_ITEM_BEHAVIOR": $DispenseItemBehavior
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(pProperties: $Item$Properties$Type)

public "useOn"(pContext: $UseOnContext$Type): $InteractionResult
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DispenserMinecartItem$Type = ($DispenserMinecartItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DispenserMinecartItem_ = $DispenserMinecartItem$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/block/$DynamicRenderedBlockTile" {
import {$IExtraModelDataProvider, $IExtraModelDataProvider$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$IExtraModelDataProvider"
import {$Connection, $Connection$Type} from "packages/net/minecraft/network/$Connection"
import {$ModelData, $ModelData$Type} from "packages/net/minecraftforge/client/model/data/$ModelData"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$ModelDataKey, $ModelDataKey$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$ModelDataKey"
import {$ExtraModelData, $ExtraModelData$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$ExtraModelData"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$ClientboundBlockEntityDataPacket, $ClientboundBlockEntityDataPacket$Type} from "packages/net/minecraft/network/protocol/game/$ClientboundBlockEntityDataPacket"
import {$ExtraModelData$Builder, $ExtraModelData$Builder$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$ExtraModelData$Builder"

export class $DynamicRenderedBlockTile extends $BlockEntity implements $IExtraModelDataProvider {
static readonly "IS_FANCY": $ModelDataKey<(boolean)>
 "blockState": $BlockState


public "isNeverFancy"(): boolean
public "onFancyChanged"(fancy: boolean): void
public "rendersFancy"(): boolean
public "shouldRenderFancy"(cameraPos: $Vec3$Type): boolean
public "addExtraModelData"(builder: $ExtraModelData$Builder$Type): void
public "requestModelReload"(): void
/**
 * 
 * @deprecated
 */
public "getExtraModelData"(): $ExtraModelData
public "afterDataPacket"(oldData: $ExtraModelData$Type): void
public "onDataPacket"(net: $Connection$Type, pkt: $ClientboundBlockEntityDataPacket$Type): void
public "getModelData"(): $ModelData
get "neverFancy"(): boolean
get "extraModelData"(): $ExtraModelData
get "modelData"(): $ModelData
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DynamicRenderedBlockTile$Type = ($DynamicRenderedBlockTile);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DynamicRenderedBlockTile_ = $DynamicRenderedBlockTile$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/events/$IFireConsumeBlockEvent" {
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$SimpleEvent, $SimpleEvent$Type} from "packages/net/mehvahdjukaar/moonlight/api/events/$SimpleEvent"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export interface $IFireConsumeBlockEvent extends $SimpleEvent {

 "getState"(): $BlockState
 "getLevel"(): $LevelAccessor
 "getFace"(): $Direction
 "getAge"(): integer
 "getPos"(): $BlockPos
 "setFinalState"(arg0: $BlockState$Type): void
 "getChance"(): integer
 "getFinalState"(): $BlockState
}

export namespace $IFireConsumeBlockEvent {
function create(pos: $BlockPos$Type, level: $Level$Type, state: $BlockState$Type, chance: integer, age: integer, face: $Direction$Type): $IFireConsumeBlockEvent
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IFireConsumeBlockEvent$Type = ($IFireConsumeBlockEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IFireConsumeBlockEvent_ = $IFireConsumeBlockEvent$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$BuntingBlockTile" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$ExtraModelData$Builder, $ExtraModelData$Builder$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$ExtraModelData$Builder"
import {$DynamicRenderedItemDisplayTile, $DynamicRenderedItemDisplayTile$Type} from "packages/net/mehvahdjukaar/moonlight/api/block/$DynamicRenderedItemDisplayTile"
import {$DyeColor, $DyeColor$Type} from "packages/net/minecraft/world/item/$DyeColor"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$ModelDataKey, $ModelDataKey$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$ModelDataKey"
import {$LockCode, $LockCode$Type} from "packages/net/minecraft/world/$LockCode"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$AABB, $AABB$Type} from "packages/net/minecraft/world/phys/$AABB"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $BuntingBlockTile extends $DynamicRenderedItemDisplayTile {
static readonly "NORTH_BUNTING": $ModelDataKey<($DyeColor)>
static readonly "SOUTH_BUNTING": $ModelDataKey<($DyeColor)>
static readonly "EAST_BUNTING": $ModelDataKey<($DyeColor)>
static readonly "WEST_BUNTING": $ModelDataKey<($DyeColor)>
static readonly "IS_FANCY": $ModelDataKey<(boolean)>
static readonly "LOOT_TABLE_TAG": string
static readonly "LOOT_TABLE_SEED_TAG": string
 "lootTable": $ResourceLocation
 "lootTableSeed": long
 "lockKey": $LockCode
 "blockState": $BlockState

constructor(pos: $BlockPos$Type, state: $BlockState$Type)

public "getBuntings"(): $Map<($Direction), ($DyeColor)>
public "updateTileOnInventoryChanged"(): void
public "needsToUpdateClientWhenChanged"(): boolean
public "updateClientVisualsOnLoad"(): void
public "isNeverFancy"(): boolean
public "canPlaceItem"(index: integer, stack: $ItemStack$Type): boolean
public "getRenderBoundingBox"(): $AABB
public "addExtraModelData"(builder: $ExtraModelData$Builder$Type): void
public "getPersistentData"(): $CompoundTag
public "onChunkUnloaded"(): void
public static "stillValidBlockEntity"(arg0: $BlockEntity$Type, arg1: $Player$Type, arg2: integer): boolean
public static "stillValidBlockEntity"(arg0: $BlockEntity$Type, arg1: $Player$Type): boolean
public static "tryClear"(arg0: any): void
get "buntings"(): $Map<($Direction), ($DyeColor)>
get "neverFancy"(): boolean
get "renderBoundingBox"(): $AABB
get "persistentData"(): $CompoundTag
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BuntingBlockTile$Type = ($BuntingBlockTile);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BuntingBlockTile_ = $BuntingBlockTile$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/items/forge/$QuiverItemImpl$QuiverCapability" {
import {$LazyOptional, $LazyOptional$Type} from "packages/net/minecraftforge/common/util/$LazyOptional"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$QuiverItem$Data, $QuiverItem$Data$Type} from "packages/net/mehvahdjukaar/supplementaries/common/items/$QuiverItem$Data"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$ItemStackHandler, $ItemStackHandler$Type} from "packages/net/minecraftforge/items/$ItemStackHandler"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ICapabilitySerializable, $ICapabilitySerializable$Type} from "packages/net/minecraftforge/common/capabilities/$ICapabilitySerializable"
import {$Capability, $Capability$Type} from "packages/net/minecraftforge/common/capabilities/$Capability"

export class $QuiverItemImpl$QuiverCapability extends $ItemStackHandler implements $ICapabilitySerializable<($CompoundTag)>, $QuiverItem$Data {

constructor()

public "removeOneStack"(): $Optional<($ItemStack)>
public "getSelectedSlot"(): integer
public "cycle"(slotsMoved: integer): boolean
public "getContentView"(): $List<($ItemStack)>
public "isItemValid"(slot: integer, stack: $ItemStack$Type): boolean
public "getCapability"<T>(cap: $Capability$Type<(T)>, side: $Direction$Type): $LazyOptional<(T)>
public "consumeArrow"(): void
public "setSelectedSlot"(selectedSlot: integer): void
public "tryAdding"(toInsert: $ItemStack$Type, onlyOnExisting: boolean): $ItemStack
public "deserializeNBT"(nbt: $CompoundTag$Type): void
public "getSelected"(supporterArrows: $Predicate$Type<($ItemStack$Type)>): $ItemStack
public "getSelected"(): $ItemStack
public "cycle"(): boolean
public "cycle"(clockWise: boolean): boolean
public "updateSelectedIfNeeded"(): void
public "getSelectedArrowCount"(): integer
public "canAcceptItem"(toInsert: $ItemStack$Type): boolean
public "tryAdding"(pInsertedStack: $ItemStack$Type): $ItemStack
public "getCapability"<T>(arg0: $Capability$Type<(T)>): $LazyOptional<(T)>
get "selectedSlot"(): integer
get "contentView"(): $List<($ItemStack)>
set "selectedSlot"(value: integer)
get "selected"(): $ItemStack
get "selectedArrowCount"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $QuiverItemImpl$QuiverCapability$Type = ($QuiverItemImpl$QuiverCapability);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $QuiverItemImpl$QuiverCapability_ = $QuiverItemImpl$QuiverCapability$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/network/$ClientBoundSyncGlobeDataPacket" {
import {$Message, $Message$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/network/$Message"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$ChannelHandler$Context, $ChannelHandler$Context$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/network/$ChannelHandler$Context"
import {$GlobeData, $GlobeData$Type} from "packages/net/mehvahdjukaar/supplementaries/common/misc/globe/$GlobeData"

export class $ClientBoundSyncGlobeDataPacket implements $Message {
readonly "data": $GlobeData

constructor(buffer: $FriendlyByteBuf$Type)
constructor(data: $GlobeData$Type)

public "handle"(context: $ChannelHandler$Context$Type): void
public "writeToBuffer"(buf: $FriendlyByteBuf$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientBoundSyncGlobeDataPacket$Type = ($ClientBoundSyncGlobeDataPacket);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientBoundSyncGlobeDataPacket_ = $ClientBoundSyncGlobeDataPacket$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/resources/recipe/$TemplateRecipeManager" {
import {$JsonObject, $JsonObject$Type} from "packages/com/google/gson/$JsonObject"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$RecipeSerializer, $RecipeSerializer$Type} from "packages/net/minecraft/world/item/crafting/$RecipeSerializer"
import {$IRecipeTemplate, $IRecipeTemplate$Type} from "packages/net/mehvahdjukaar/moonlight/api/resources/recipe/$IRecipeTemplate"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $TemplateRecipeManager {

constructor()

public static "read"(recipe: $JsonObject$Type): $IRecipeTemplate<(any)>
public static "registerTemplate"<T extends $IRecipeTemplate<(any)>>(serializer: $RecipeSerializer$Type<(any)>, deserializer: $Function$Type<($JsonObject$Type), (T)>): void
public static "registerTemplate"<T extends $IRecipeTemplate<(any)>>(serializerId: $ResourceLocation$Type, deserializer: $Function$Type<($JsonObject$Type), (T)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TemplateRecipeManager$Type = ($TemplateRecipeManager);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TemplateRecipeManager_ = $TemplateRecipeManager$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/inventories/$PresentContainerMenu" {
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$IContainerProvider, $IContainerProvider$Type} from "packages/net/mehvahdjukaar/moonlight/api/misc/$IContainerProvider"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$AbstractContainerMenu, $AbstractContainerMenu$Type} from "packages/net/minecraft/world/inventory/$AbstractContainerMenu"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MenuType, $MenuType$Type} from "packages/net/minecraft/world/inventory/$MenuType"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"
import {$AbstractPresentBlockTile, $AbstractPresentBlockTile$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$AbstractPresentBlockTile"

export class $PresentContainerMenu extends $AbstractContainerMenu implements $IContainerProvider {
static readonly "SLOT_CLICKED_OUTSIDE": integer
static readonly "QUICKCRAFT_TYPE_CHARITABLE": integer
static readonly "QUICKCRAFT_TYPE_GREEDY": integer
static readonly "QUICKCRAFT_TYPE_CLONE": integer
static readonly "QUICKCRAFT_HEADER_START": integer
static readonly "QUICKCRAFT_HEADER_CONTINUE": integer
static readonly "QUICKCRAFT_HEADER_END": integer
static readonly "CARRIED_SLOT_SIZE": integer
readonly "lastSlots": $NonNullList<($ItemStack)>
readonly "slots": $NonNullList<($Slot)>
 "remoteSlots": $NonNullList<($ItemStack)>
 "containerId": integer

constructor<T extends $PresentContainerMenu>(id: integer, playerInventory: $Inventory$Type, inventory: $AbstractPresentBlockTile$Type)
constructor<T extends $PresentContainerMenu>(type: $MenuType$Type<(T)>, id: integer, playerInventory: $Inventory$Type, inventory: $AbstractPresentBlockTile$Type)

public static "create"(integer: integer, inventory: $Inventory$Type, buf: $FriendlyByteBuf$Type): $PresentContainerMenu
public "stillValid"(playerIn: $Player$Type): boolean
public "removed"(playerIn: $Player$Type): void
public "quickMoveStack"(player: $Player$Type, index: integer): $ItemStack
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PresentContainerMenu$Type = ($PresentContainerMenu);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PresentContainerMenu_ = $PresentContainerMenu$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$GobletBlockTile" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Connection, $Connection$Type} from "packages/net/minecraft/network/$Connection"
import {$ModelData, $ModelData$Type} from "packages/net/minecraftforge/client/model/data/$ModelData"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$ExtraModelData, $ExtraModelData$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$ExtraModelData"
import {$SoftFluidTank, $SoftFluidTank$Type} from "packages/net/mehvahdjukaar/moonlight/api/fluids/$SoftFluidTank"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$ClientboundBlockEntityDataPacket, $ClientboundBlockEntityDataPacket$Type} from "packages/net/minecraft/network/protocol/game/$ClientboundBlockEntityDataPacket"
import {$SoftFluid, $SoftFluid$Type} from "packages/net/mehvahdjukaar/moonlight/api/fluids/$SoftFluid"
import {$ExtraModelData$Builder, $ExtraModelData$Builder$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$ExtraModelData$Builder"
import {$IExtraModelDataProvider, $IExtraModelDataProvider$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$IExtraModelDataProvider"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$ModelDataKey, $ModelDataKey$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$ModelDataKey"
import {$ISoftFluidTankProvider, $ISoftFluidTankProvider$Type} from "packages/net/mehvahdjukaar/moonlight/api/block/$ISoftFluidTankProvider"
import {$IOwnerProtected, $IOwnerProtected$Type} from "packages/net/mehvahdjukaar/moonlight/api/block/$IOwnerProtected"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $GobletBlockTile extends $BlockEntity implements $ISoftFluidTankProvider, $IOwnerProtected, $IExtraModelDataProvider {
readonly "fluidHolder": $SoftFluidTank
static readonly "FLUID_ID": $ModelDataKey<($SoftFluid)>
 "blockState": $BlockState

constructor(pos: $BlockPos$Type, state: $BlockState$Type)

public "getOwner"(): $UUID
public "setOwner"(owner: $UUID$Type): void
public "setChanged"(): void
public "getUpdatePacket"(): $ClientboundBlockEntityDataPacket
public "load"(compound: $CompoundTag$Type): void
public "m_183515_"(tag: $CompoundTag$Type): void
public "getSoftFluidTank"(): $SoftFluidTank
public "handleInteraction"(player: $Player$Type, hand: $InteractionHand$Type): boolean
public "addExtraModelData"(builder: $ExtraModelData$Builder$Type): void
public "getUpdateTag"(): $CompoundTag
public "canInteractWithSoftFluidTank"(): boolean
public "isPublic"(): boolean
public "isOwnedBy"(player: $Player$Type): boolean
public "isAccessibleBy"(player: $Player$Type): boolean
public "loadOwner"(tag: $CompoundTag$Type): void
public "saveOwner"(tag: $CompoundTag$Type): void
public "isNotOwnedBy"(player: $Player$Type): boolean
public "requestModelReload"(): void
/**
 * 
 * @deprecated
 */
public "getExtraModelData"(): $ExtraModelData
public "afterDataPacket"(oldData: $ExtraModelData$Type): void
public "onDataPacket"(net: $Connection$Type, pkt: $ClientboundBlockEntityDataPacket$Type): void
public "getModelData"(): $ModelData
get "owner"(): $UUID
set "owner"(value: $UUID$Type)
get "updatePacket"(): $ClientboundBlockEntityDataPacket
get "softFluidTank"(): $SoftFluidTank
get "updateTag"(): $CompoundTag
get "public"(): boolean
get "extraModelData"(): $ExtraModelData
get "modelData"(): $ModelData
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GobletBlockTile$Type = ($GobletBlockTile);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GobletBlockTile_ = $GobletBlockTile$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/blocks/$PlanterBlock" {
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$CollisionContext, $CollisionContext$Type} from "packages/net/minecraft/world/phys/shapes/$CollisionContext"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$TreeConfiguration, $TreeConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$TreeConfiguration"
import {$BiConsumer, $BiConsumer$Type} from "packages/java/util/function/$BiConsumer"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$WaterBlock, $WaterBlock$Type} from "packages/net/mehvahdjukaar/moonlight/api/block/$WaterBlock"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$IPlantable, $IPlantable$Type} from "packages/net/minecraftforge/common/$IPlantable"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"

export class $PlanterBlock extends $WaterBlock {
static readonly "EXTENDED": $BooleanProperty
static readonly "WATERLOGGED": $BooleanProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(properties: $BlockBehaviour$Properties$Type)

public "getStateForPlacement"(context: $BlockPlaceContext$Type): $BlockState
public "canSustainPlant"(state: $BlockState$Type, world: $BlockGetter$Type, pos: $BlockPos$Type, direction: $Direction$Type, plantable: $IPlantable$Type): boolean
public "isFertile"(state: $BlockState$Type, world: $BlockGetter$Type, pos: $BlockPos$Type): boolean
public "onTreeGrow"(state: $BlockState$Type, level: $LevelReader$Type, placeFunction: $BiConsumer$Type<($BlockPos$Type), ($BlockState$Type)>, randomSource: $RandomSource$Type, pos: $BlockPos$Type, config: $TreeConfiguration$Type): boolean
public "updateShape"(stateIn: $BlockState$Type, facing: $Direction$Type, facingState: $BlockState$Type, worldIn: $LevelAccessor$Type, currentPos: $BlockPos$Type, facingPos: $BlockPos$Type): $BlockState
public "getCollisionShape"(state: $BlockState$Type, worldIn: $BlockGetter$Type, pos: $BlockPos$Type, context: $CollisionContext$Type): $VoxelShape
public "getShape"(state: $BlockState$Type, worldIn: $BlockGetter$Type, pos: $BlockPos$Type, context: $CollisionContext$Type): $VoxelShape
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PlanterBlock$Type = ($PlanterBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PlanterBlock_ = $PlanterBlock$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/$IKeyLockable" {
import {$IKeyLockable$KeyStatus, $IKeyLockable$KeyStatus$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/$IKeyLockable$KeyStatus"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export interface $IKeyLockable {

 "testIfHasCorrectKey"(player: $Player$Type, lockPassword: string, feedbackMessage: boolean, translName: string): boolean
 "getPassword"(): string
 "setPassword"(arg0: string): void
 "getKeyStatus"(key: $ItemStack$Type): $IKeyLockable$KeyStatus
 "onKeyAssigned"(level: $Level$Type, pos: $BlockPos$Type, player: $Player$Type, newKey: string): void
 "onPasswordCleared"(player: $Player$Type, pos: $BlockPos$Type): void
 "shouldShowPassword"(): boolean
 "clearPassword"(): void
}

export namespace $IKeyLockable {
const MAX_ITEM_NAME_LEN: integer
function getKeyStatus(key: $ItemStack$Type, password: string): $IKeyLockable$KeyStatus
function getKeyPassword(key: $ItemStack$Type): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IKeyLockable$Type = ($IKeyLockable);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IKeyLockable_ = $IKeyLockable$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/integration/enchantedbooks/$EnchantedBookRedesignRenderer" {
import {$RenderStateShard$OverlayStateShard, $RenderStateShard$OverlayStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$OverlayStateShard"
import {$VertexConsumer, $VertexConsumer$Type} from "packages/com/mojang/blaze3d/vertex/$VertexConsumer"
import {$RenderStateShard$TexturingStateShard, $RenderStateShard$TexturingStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$TexturingStateShard"
import {$RenderStateShard$LineStateShard, $RenderStateShard$LineStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$LineStateShard"
import {$RenderStateShard$TextureStateShard, $RenderStateShard$TextureStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$TextureStateShard"
import {$RenderStateShard$EmptyTextureStateShard, $RenderStateShard$EmptyTextureStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$EmptyTextureStateShard"
import {$RenderStateShard$LightmapStateShard, $RenderStateShard$LightmapStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$LightmapStateShard"
import {$RenderStateShard$LayeringStateShard, $RenderStateShard$LayeringStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$LayeringStateShard"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$RenderStateShard$WriteMaskStateShard, $RenderStateShard$WriteMaskStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$WriteMaskStateShard"
import {$Runnable, $Runnable$Type} from "packages/java/lang/$Runnable"
import {$RenderStateShard$OutputStateShard, $RenderStateShard$OutputStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$OutputStateShard"
import {$RenderStateShard$ColorLogicStateShard, $RenderStateShard$ColorLogicStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$ColorLogicStateShard"
import {$RenderStateShard$ShaderStateShard, $RenderStateShard$ShaderStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$ShaderStateShard"
import {$RenderStateShard$DepthTestStateShard, $RenderStateShard$DepthTestStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$DepthTestStateShard"
import {$RenderStateShard$TransparencyStateShard, $RenderStateShard$TransparencyStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$TransparencyStateShard"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$RenderStateShard, $RenderStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard"
import {$RenderStateShard$CullStateShard, $RenderStateShard$CullStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$CullStateShard"

export class $EnchantedBookRedesignRenderer extends $RenderStateShard {
static readonly "VIEW_SCALE_Z_EPSILON": float
static readonly "MAX_ENCHANTMENT_GLINT_SPEED_MILLIS": double
readonly "name": string
 "setupState": $Runnable
static readonly "NO_TRANSPARENCY": $RenderStateShard$TransparencyStateShard
static readonly "ADDITIVE_TRANSPARENCY": $RenderStateShard$TransparencyStateShard
static readonly "LIGHTNING_TRANSPARENCY": $RenderStateShard$TransparencyStateShard
static readonly "GLINT_TRANSPARENCY": $RenderStateShard$TransparencyStateShard
static readonly "CRUMBLING_TRANSPARENCY": $RenderStateShard$TransparencyStateShard
static readonly "TRANSLUCENT_TRANSPARENCY": $RenderStateShard$TransparencyStateShard
static readonly "NO_SHADER": $RenderStateShard$ShaderStateShard
static readonly "POSITION_COLOR_LIGHTMAP_SHADER": $RenderStateShard$ShaderStateShard
static readonly "POSITION_SHADER": $RenderStateShard$ShaderStateShard
static readonly "POSITION_COLOR_TEX_SHADER": $RenderStateShard$ShaderStateShard
static readonly "POSITION_TEX_SHADER": $RenderStateShard$ShaderStateShard
static readonly "POSITION_COLOR_TEX_LIGHTMAP_SHADER": $RenderStateShard$ShaderStateShard
static readonly "POSITION_COLOR_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_SOLID_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_CUTOUT_MIPPED_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_CUTOUT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_TRANSLUCENT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_TRANSLUCENT_MOVING_BLOCK_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_TRANSLUCENT_NO_CRUMBLING_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ARMOR_CUTOUT_NO_CULL_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_SOLID_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_CUTOUT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_CUTOUT_NO_CULL_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_CUTOUT_NO_CULL_Z_OFFSET_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ITEM_ENTITY_TRANSLUCENT_CULL_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_TRANSLUCENT_CULL_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_TRANSLUCENT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_TRANSLUCENT_EMISSIVE_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_SMOOTH_CUTOUT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_BEACON_BEAM_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_DECAL_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_NO_OUTLINE_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_SHADOW_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_ALPHA_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_EYES_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENERGY_SWIRL_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_LEASH_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_WATER_MASK_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_OUTLINE_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ARMOR_GLINT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ARMOR_ENTITY_GLINT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_GLINT_TRANSLUCENT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_GLINT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_GLINT_DIRECT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_GLINT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_GLINT_DIRECT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_CRUMBLING_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_TEXT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_TEXT_BACKGROUND_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_TEXT_INTENSITY_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_TEXT_SEE_THROUGH_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_TEXT_BACKGROUND_SEE_THROUGH_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_TEXT_INTENSITY_SEE_THROUGH_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_LIGHTNING_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_TRIPWIRE_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_END_PORTAL_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_END_GATEWAY_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_LINES_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_GUI_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_GUI_OVERLAY_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_GUI_TEXT_HIGHLIGHT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_GUI_GHOST_RECIPE_OVERLAY_SHADER": $RenderStateShard$ShaderStateShard
static readonly "BLOCK_SHEET_MIPPED": $RenderStateShard$TextureStateShard
static readonly "BLOCK_SHEET": $RenderStateShard$TextureStateShard
static readonly "NO_TEXTURE": $RenderStateShard$EmptyTextureStateShard
static readonly "DEFAULT_TEXTURING": $RenderStateShard$TexturingStateShard
static readonly "GLINT_TEXTURING": $RenderStateShard$TexturingStateShard
static readonly "ENTITY_GLINT_TEXTURING": $RenderStateShard$TexturingStateShard
static readonly "LIGHTMAP": $RenderStateShard$LightmapStateShard
static readonly "NO_LIGHTMAP": $RenderStateShard$LightmapStateShard
static readonly "OVERLAY": $RenderStateShard$OverlayStateShard
static readonly "NO_OVERLAY": $RenderStateShard$OverlayStateShard
static readonly "CULL": $RenderStateShard$CullStateShard
static readonly "NO_CULL": $RenderStateShard$CullStateShard
static readonly "NO_DEPTH_TEST": $RenderStateShard$DepthTestStateShard
static readonly "EQUAL_DEPTH_TEST": $RenderStateShard$DepthTestStateShard
static readonly "LEQUAL_DEPTH_TEST": $RenderStateShard$DepthTestStateShard
static readonly "GREATER_DEPTH_TEST": $RenderStateShard$DepthTestStateShard
static readonly "COLOR_DEPTH_WRITE": $RenderStateShard$WriteMaskStateShard
static readonly "COLOR_WRITE": $RenderStateShard$WriteMaskStateShard
static readonly "DEPTH_WRITE": $RenderStateShard$WriteMaskStateShard
static readonly "NO_LAYERING": $RenderStateShard$LayeringStateShard
static readonly "POLYGON_OFFSET_LAYERING": $RenderStateShard$LayeringStateShard
static readonly "VIEW_OFFSET_Z_LAYERING": $RenderStateShard$LayeringStateShard
static readonly "MAIN_TARGET": $RenderStateShard$OutputStateShard
static readonly "OUTLINE_TARGET": $RenderStateShard$OutputStateShard
static readonly "TRANSLUCENT_TARGET": $RenderStateShard$OutputStateShard
static readonly "PARTICLES_TARGET": $RenderStateShard$OutputStateShard
static readonly "WEATHER_TARGET": $RenderStateShard$OutputStateShard
static readonly "CLOUDS_TARGET": $RenderStateShard$OutputStateShard
static readonly "ITEM_ENTITY_TARGET": $RenderStateShard$OutputStateShard
static readonly "DEFAULT_LINE": $RenderStateShard$LineStateShard
static readonly "NO_COLOR_LOGIC": $RenderStateShard$ColorLogicStateShard
static readonly "OR_REVERSE_COLOR_LOGIC": $RenderStateShard$ColorLogicStateShard

constructor(p_i225973_1_: string, p_i225973_2_: $Runnable$Type, p_i225973_3_: $Runnable$Type)

public static "getColoredFoil"(stack: $ItemStack$Type, buffer: $MultiBufferSource$Type): $VertexConsumer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EnchantedBookRedesignRenderer$Type = ($EnchantedBookRedesignRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EnchantedBookRedesignRenderer_ = $EnchantedBookRedesignRenderer$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/common/$ExtendedHangingSign" {
import {$HangingSignTileExtension, $HangingSignTileExtension$Type} from "packages/net/mehvahdjukaar/amendments/common/tile/$HangingSignTileExtension"

export interface $ExtendedHangingSign {

 "getExtension"(): $HangingSignTileExtension

(): $HangingSignTileExtension
}

export namespace $ExtendedHangingSign {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ExtendedHangingSign$Type = ($ExtendedHangingSign);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ExtendedHangingSign_ = $ExtendedHangingSign$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/core/set/forge/$BlockSetInternalImpl" {
import {$IForgeRegistry, $IForgeRegistry$Type} from "packages/net/minecraftforge/registries/$IForgeRegistry"
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$Registry, $Registry$Type} from "packages/net/minecraft/core/$Registry"
import {$BlockType, $BlockType$Type} from "packages/net/mehvahdjukaar/moonlight/api/set/$BlockType"
import {$BlockSetAPI$BlockTypeRegistryCallback, $BlockSetAPI$BlockTypeRegistryCallback$Type} from "packages/net/mehvahdjukaar/moonlight/api/set/$BlockSetAPI$BlockTypeRegistryCallback"

export class $BlockSetInternalImpl {

constructor()

public static "hasFilledBlockSets"(): boolean
public static "addEvent"<T extends $BlockType, E>(reg: $IForgeRegistry$Type<(E)>, registrationFunction: $BlockSetAPI$BlockTypeRegistryCallback$Type<(E), (T)>, blockType: $Class$Type<(T)>): void
public static "addDynamicRegistration"<T extends $BlockType, E>(registrationFunction: $BlockSetAPI$BlockTypeRegistryCallback$Type<(E), (T)>, blockType: $Class$Type<(T)>, registry: $Registry$Type<(E)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BlockSetInternalImpl$Type = ($BlockSetInternalImpl);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BlockSetInternalImpl_ = $BlockSetInternalImpl$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/core/loot/$OptionalPropertyCondition" {
import {$LootContextParam, $LootContextParam$Type} from "packages/net/minecraft/world/level/storage/loot/parameters/$LootContextParam"
import {$LootItemConditionType, $LootItemConditionType$Type} from "packages/net/minecraft/world/level/storage/loot/predicates/$LootItemConditionType"
import {$LootContext, $LootContext$Type} from "packages/net/minecraft/world/level/storage/loot/$LootContext"
import {$ValidationContext, $ValidationContext$Type} from "packages/net/minecraft/world/level/storage/loot/$ValidationContext"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$LootItemCondition, $LootItemCondition$Type} from "packages/net/minecraft/world/level/storage/loot/predicates/$LootItemCondition"

export class $OptionalPropertyCondition implements $LootItemCondition {


public "test"(lootContext: $LootContext$Type): boolean
public "getType"(): $LootItemConditionType
public "getReferencedContextParams"(): $Set<($LootContextParam<(any)>)>
public "validate"(arg0: $ValidationContext$Type): void
public "or"(arg0: $Predicate$Type<(any)>): $Predicate<($LootContext)>
public "negate"(): $Predicate<($LootContext)>
public "and"(arg0: $Predicate$Type<(any)>): $Predicate<($LootContext)>
public static "not"<T>(arg0: $Predicate$Type<(any)>): $Predicate<($LootContext)>
public static "isEqual"<T>(arg0: any): $Predicate<($LootContext)>
public "applyLootHandler"(context: $LootContext$Type, loot: $List$Type<($ItemStack$Type)>): boolean
get "type"(): $LootItemConditionType
get "referencedContextParams"(): $Set<($LootContextParam<(any)>)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $OptionalPropertyCondition$Type = ($OptionalPropertyCondition);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $OptionalPropertyCondition_ = $OptionalPropertyCondition$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/util/math/colors/$HCLVColor" {
import {$RGBColor, $RGBColor$Type} from "packages/net/mehvahdjukaar/moonlight/api/util/math/colors/$RGBColor"
import {$Codec, $Codec$Type} from "packages/com/mojang/serialization/$Codec"
import {$BaseColor, $BaseColor$Type} from "packages/net/mehvahdjukaar/moonlight/api/util/math/colors/$BaseColor"

export class $HCLVColor extends $BaseColor<($HCLVColor)> {
/**
 * 
 * @deprecated
 */
static readonly "CODEC": $Codec<(integer)>

constructor(h: float, c: float, l: float, a: float)

public "toString"(): string
public "multiply"(hue: float, chroma: float, luminance: float, alpha: float): $HCLVColor
/**
 * 
 * @deprecated
 */
public "multiply"(color: $HCLVColor$Type, hue: float, chroma: float, luminance: float, alpha: float): $HCLVColor
public "luminance"(): float
public "hue"(): float
public "alpha"(): float
public "distTo"(other: $HCLVColor$Type): float
public "mixWith"(color: $HCLVColor$Type, bias: float): $HCLVColor
public "asRGB"(): $RGBColor
public "withHue"(hue: float): $HCLVColor
public "fromRGB"(rgb: $RGBColor$Type): $HCLVColor
public "withAlpha"(alpha: float): $HCLVColor
public "asHCLV"(): $HCLVColor
public static "averageColors"(...colors: ($HCLVColor$Type)[]): $HCLVColor
public "withLuminance"(luminance: float): $HCLVColor
public "chroma"(): float
public "withChroma"(chroma: float): $HCLVColor
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $HCLVColor$Type = ($HCLVColor);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $HCLVColor_ = $HCLVColor$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/resources/$RPUtils$OverrideAppender" {
import {$ItemOverride, $ItemOverride$Type} from "packages/net/minecraft/client/renderer/block/model/$ItemOverride"

export interface $RPUtils$OverrideAppender {

 "add"(arg0: $ItemOverride$Type): void

(arg0: $ItemOverride$Type): void
}

export namespace $RPUtils$OverrideAppender {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RPUtils$OverrideAppender$Type = ($RPUtils$OverrideAppender);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RPUtils$OverrideAppender_ = $RPUtils$OverrideAppender$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/trades/$ItemListingRegistry" {
import {$RegistryAccess, $RegistryAccess$Type} from "packages/net/minecraft/core/$RegistryAccess"
import {$JsonElement, $JsonElement$Type} from "packages/com/google/gson/$JsonElement"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$List, $List$Type} from "packages/java/util/$List"
import {$VillagerTrades$ItemListing, $VillagerTrades$ItemListing$Type} from "packages/net/minecraft/world/entity/npc/$VillagerTrades$ItemListing"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$VillagerProfession, $VillagerProfession$Type} from "packages/net/minecraft/world/entity/npc/$VillagerProfession"
import {$Codec, $Codec$Type} from "packages/com/mojang/serialization/$Codec"
import {$RegistryAccessJsonReloadListener, $RegistryAccessJsonReloadListener$Type} from "packages/net/mehvahdjukaar/moonlight/api/misc/$RegistryAccessJsonReloadListener"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $ItemListingRegistry extends $RegistryAccessJsonReloadListener {

constructor()

public "parse"(jsons: $Map$Type<($ResourceLocation$Type), ($JsonElement$Type)>, registryAccess: $RegistryAccess$Type): void
public static "getSpecialListings"(entityType: $EntityType$Type<(any)>, level: integer): $List<(any)>
public static "getVillagerListings"(profession: $VillagerProfession$Type, level: integer): $List<(any)>
public static "registerSimple"(id: $ResourceLocation$Type, instance: $VillagerTrades$ItemListing$Type, level: integer): void
public static "registerSerializer"(id: $ResourceLocation$Type, trade: $Codec$Type<(any)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ItemListingRegistry$Type = ($ItemListingRegistry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ItemListingRegistry_ = $ItemListingRegistry$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/screens/$RedMerchantScreen" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$RedMerchantMenu, $RedMerchantMenu$Type} from "packages/net/mehvahdjukaar/supplementaries/common/inventories/$RedMerchantMenu"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$AbstractContainerScreen, $AbstractContainerScreen$Type} from "packages/net/minecraft/client/gui/screens/inventory/$AbstractContainerScreen"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"

export class $RedMerchantScreen extends $AbstractContainerScreen<($RedMerchantMenu)> {
static readonly "INVENTORY_LOCATION": $ResourceLocation
static readonly "SLOT_ITEM_BLIT_OFFSET": integer
 "imageWidth": integer
 "hoveredSlot": $Slot
 "leftPos": integer
 "topPos": integer
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering

constructor(merchantMenu: $RedMerchantMenu$Type, inventory: $Inventory$Type, component: $Component$Type)

public "render"(guiGraphics: $GuiGraphics$Type, mouseX: integer, mouseY: integer, partialTick: float): void
public "mouseClicked"(mouseX: double, mouseY: double, button: integer): boolean
public "mouseScrolled"(mouseX: double, mouseY: double, delta: double): boolean
public "mouseDragged"(mouseX: double, mouseY: double, button: integer, dragX: double, dragY: double): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RedMerchantScreen$Type = ($RedMerchantScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RedMerchantScreen_ = $RedMerchantScreen$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/set/leaves/$LeavesTypeRegistry" {
import {$BlockTypeRegistry, $BlockTypeRegistry$Type} from "packages/net/mehvahdjukaar/moonlight/api/set/$BlockTypeRegistry"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$AfterLanguageLoadEvent, $AfterLanguageLoadEvent$Type} from "packages/net/mehvahdjukaar/moonlight/api/events/$AfterLanguageLoadEvent"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LeavesType, $LeavesType$Type} from "packages/net/mehvahdjukaar/moonlight/api/set/leaves/$LeavesType"

export class $LeavesTypeRegistry extends $BlockTypeRegistry<($LeavesType)> {
static readonly "INSTANCE": $LeavesTypeRegistry
static readonly "OAK_TYPE": $LeavesType

constructor()

public static "getValue"(name: $ResourceLocation$Type): $LeavesType
public static "fromNBT"(name: string): $LeavesType
public static "getTypes"(): $Collection<($LeavesType)>
public "addTypeTranslations"(language: $AfterLanguageLoadEvent$Type): void
public "detectTypeFromBlock"(baseBlock: $Block$Type, baseRes: $ResourceLocation$Type): $Optional<($LeavesType)>
get "types"(): $Collection<($LeavesType)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LeavesTypeRegistry$Type = ($LeavesTypeRegistry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LeavesTypeRegistry_ = $LeavesTypeRegistry$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/$ILavaAndWaterLoggable" {
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$Fluid, $Fluid$Type} from "packages/net/minecraft/world/level/material/$Fluid"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$BucketPickup, $BucketPickup$Type} from "packages/net/minecraft/world/level/block/$BucketPickup"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$LiquidBlockContainer, $LiquidBlockContainer$Type} from "packages/net/minecraft/world/level/block/$LiquidBlockContainer"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$FluidState, $FluidState$Type} from "packages/net/minecraft/world/level/material/$FluidState"

export interface $ILavaAndWaterLoggable extends $BucketPickup, $LiquidBlockContainer {

 "takeLiquid"(world: $LevelAccessor$Type, pos: $BlockPos$Type, state: $BlockState$Type): $Fluid
 "getPickupSound"(): $Optional<($SoundEvent)>
 "canPlaceLiquid"(reader: $BlockGetter$Type, pos: $BlockPos$Type, state: $BlockState$Type, fluid: $Fluid$Type): boolean
 "placeLiquid"(world: $LevelAccessor$Type, pos: $BlockPos$Type, state: $BlockState$Type, fluidState: $FluidState$Type): boolean
 "pickupBlock"(pLevel: $LevelAccessor$Type, pPos: $BlockPos$Type, pState: $BlockState$Type): $ItemStack
 "getPickupSound"(arg0: $BlockState$Type): $Optional<($SoundEvent)>
}

export namespace $ILavaAndWaterLoggable {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ILavaAndWaterLoggable$Type = ($ILavaAndWaterLoggable);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ILavaAndWaterLoggable_ = $ILavaAndWaterLoggable$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/blocks/$LightUpBlock" {
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$ILightable, $ILightable$Type} from "packages/net/mehvahdjukaar/moonlight/api/block/$ILightable"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$Projectile, $Projectile$Type} from "packages/net/minecraft/world/entity/projectile/$Projectile"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$ILightable$FireSourceType, $ILightable$FireSourceType$Type} from "packages/net/mehvahdjukaar/moonlight/api/block/$ILightable$FireSourceType"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $LightUpBlock extends $Block implements $ILightable {
static readonly "LIT": $BooleanProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation


public "getStateForPlacement"(context: $BlockPlaceContext$Type): $BlockState
public "use"(state: $BlockState$Type, worldIn: $Level$Type, pos: $BlockPos$Type, player: $Player$Type, handIn: $InteractionHand$Type, hit: $BlockHitResult$Type): $InteractionResult
public "onProjectileHit"(level: $Level$Type, state: $BlockState$Type, pHit: $BlockHitResult$Type, projectile: $Projectile$Type): void
public "entityInside"(state: $BlockState$Type, worldIn: $Level$Type, pos: $BlockPos$Type, entityIn: $Entity$Type): void
public "isLitUp"(state: $BlockState$Type, level: $BlockGetter$Type, pos: $BlockPos$Type): boolean
public "setLitUp"(state: $BlockState$Type, world: $LevelAccessor$Type, pos: $BlockPos$Type, lit: boolean): void
public "extinguish"(player: $Entity$Type, state: $BlockState$Type, pos: $BlockPos$Type, world: $LevelAccessor$Type): boolean
public "playExtinguishSound"(world: $LevelAccessor$Type, pos: $BlockPos$Type): void
/**
 * 
 * @deprecated
 */
public "isLitUp"(state: $BlockState$Type): boolean
public "interactWithPlayer"(state: $BlockState$Type, level: $Level$Type, pos: $BlockPos$Type, player: $Player$Type, handIn: $InteractionHand$Type): $InteractionResult
public "lightUp"(player: $Entity$Type, state: $BlockState$Type, pos: $BlockPos$Type, world: $LevelAccessor$Type, fireSourceType: $ILightable$FireSourceType$Type): boolean
public "playLightUpSound"(world: $LevelAccessor$Type, pos: $BlockPos$Type, type: $ILightable$FireSourceType$Type): void
/**
 * 
 * @deprecated
 */
public "toggleLitState"(state: $BlockState$Type, lit: boolean): $BlockState
public "spawnSmokeParticles"(state: $BlockState$Type, pos: $BlockPos$Type, world: $LevelAccessor$Type): void
public "canBeExtinguishedBy"(item: $ItemStack$Type): boolean
public "interactWithProjectile"(level: $Level$Type, state: $BlockState$Type, projectile: $Projectile$Type, pos: $BlockPos$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LightUpBlock$Type = ($LightUpBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LightUpBlock_ = $LightUpBlock$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/$ModBlockProperties$RakeDirection" {
import {$StringRepresentable$EnumCodec, $StringRepresentable$EnumCodec$Type} from "packages/net/minecraft/util/$StringRepresentable$EnumCodec"
import {$StringRepresentable, $StringRepresentable$Type} from "packages/net/minecraft/util/$StringRepresentable"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$Keyable, $Keyable$Type} from "packages/com/mojang/serialization/$Keyable"
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"

export class $ModBlockProperties$RakeDirection extends $Enum<($ModBlockProperties$RakeDirection)> implements $StringRepresentable {
static readonly "NORTH_SOUTH": $ModBlockProperties$RakeDirection
static readonly "EAST_WEST": $ModBlockProperties$RakeDirection
static readonly "SOUTH_EAST": $ModBlockProperties$RakeDirection
static readonly "SOUTH_WEST": $ModBlockProperties$RakeDirection
static readonly "NORTH_WEST": $ModBlockProperties$RakeDirection
static readonly "NORTH_EAST": $ModBlockProperties$RakeDirection


public "toString"(): string
public static "values"(): ($ModBlockProperties$RakeDirection)[]
public static "valueOf"(name: string): $ModBlockProperties$RakeDirection
public "getSerializedName"(): string
public "getDirections"(): $List<($Direction)>
public static "fromDirections"(directions: $List$Type<($Direction$Type)>): $ModBlockProperties$RakeDirection
public static "fromEnumWithMapping"<E extends ($Enum<(E)>) & ($StringRepresentable)>(arg0: $Supplier$Type<((E)[])>, arg1: $Function$Type<(string), (string)>): $StringRepresentable$EnumCodec<(E)>
public static "keys"(arg0: ($StringRepresentable$Type)[]): $Keyable
public static "fromEnum"<E extends ($Enum<(E)>) & ($StringRepresentable)>(arg0: $Supplier$Type<((E)[])>): $StringRepresentable$EnumCodec<(E)>
get "serializedName"(): string
get "directions"(): $List<($Direction)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModBlockProperties$RakeDirection$Type = (("south_west") | ("north_east") | ("east_west") | ("north_west") | ("south_east") | ("north_south")) | ($ModBlockProperties$RakeDirection);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModBlockProperties$RakeDirection_ = $ModBlockProperties$RakeDirection$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/placeable_book/$PlaceableBookManager" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$DyeColor, $DyeColor$Type} from "packages/net/minecraft/world/item/$DyeColor"
import {$ArrayList, $ArrayList$Type} from "packages/java/util/$ArrayList"
import {$Random, $Random$Type} from "packages/java/util/$Random"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$BookType, $BookType$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/placeable_book/$BookType"

export class $PlaceableBookManager {

constructor()

public static "register"(type: $BookType$Type, item: $Item$Type): void
public static "setup"(): void
public static "getByName"(name: string): $BookType
public static "getAll"(): $ArrayList<($BookType)>
public static "rand"(r: $Random$Type): $BookType
public static "registerDefault"(color: $DyeColor$Type): void
public static "registerDefault"(color: $DyeColor$Type, angle: integer): void
public static "registerDefault"(name: string, color: integer): void
public static "getByItem"(stack: $ItemStack$Type): $ArrayList<($BookType)>
get "all"(): $ArrayList<($BookType)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PlaceableBookManager$Type = ($PlaceableBookManager);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PlaceableBookManager_ = $PlaceableBookManager$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/utils/forge/$ItemsUtilImpl" {
import {$IKeyLockable$KeyStatus, $IKeyLockable$KeyStatus$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/$IKeyLockable$KeyStatus"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$Pair, $Pair$Type} from "packages/com/mojang/datafixers/util/$Pair"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$IItemHandler, $IItemHandler$Type} from "packages/net/minecraftforge/items/$IItemHandler"

export class $ItemsUtilImpl {

constructor()

public static "addToContainerItem"(player: $Player$Type, containerStack: $ItemStack$Type, stack: $ItemStack$Type, slot: $Slot$Type, simulate: boolean, inSlot: boolean): boolean
public static "getEncumbermentFromInventory"(stack: $ItemStack$Type, player: $ServerPlayer$Type): float
public static "tryAddingItem"(stack: $ItemStack$Type, level: $Level$Type, dir: $Direction$Type, container: any): $ItemStack
public static "tryExtractingItem"(level: $Level$Type, dir: $Direction$Type, tile: any): $ItemStack
public static "getItemHandler"(containerStack: $ItemStack$Type, player: $Player$Type): $Pair<($IItemHandler), ($BlockEntity)>
public static "hasKeyInInventory"(player: $Player$Type, key: string): $IKeyLockable$KeyStatus
public static "extractFromContainerItemIntoSlot"(player: $Player$Type, containerStack: $ItemStack$Type, slot: $Slot$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ItemsUtilImpl$Type = ($ItemsUtilImpl);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ItemsUtilImpl_ = $ItemsUtilImpl$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/blocks/$FaucetBlock" {
import {$IntegerProperty, $IntegerProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$IntegerProperty"
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$EntityBlock, $EntityBlock$Type} from "packages/net/minecraft/world/level/block/$EntityBlock"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Mirror, $Mirror$Type} from "packages/net/minecraft/world/level/block/$Mirror"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$WaterBlock, $WaterBlock$Type} from "packages/net/mehvahdjukaar/moonlight/api/block/$WaterBlock"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"
import {$DirectionProperty, $DirectionProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$DirectionProperty"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$CollisionContext, $CollisionContext$Type} from "packages/net/minecraft/world/phys/shapes/$CollisionContext"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$Rotation, $Rotation$Type} from "packages/net/minecraft/world/level/block/$Rotation"
import {$BlockEntityTicker, $BlockEntityTicker$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityTicker"
import {$GameEventListener, $GameEventListener$Type} from "packages/net/minecraft/world/level/gameevent/$GameEventListener"

export class $FaucetBlock extends $WaterBlock implements $EntityBlock {
static readonly "FACING": $DirectionProperty
static readonly "ENABLED": $BooleanProperty
static readonly "POWERED": $BooleanProperty
static readonly "HAS_WATER": $BooleanProperty
static readonly "LIGHT_LEVEL": $IntegerProperty
static readonly "CONNECTED": $BooleanProperty
static readonly "WATERLOGGED": $BooleanProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(properties: $BlockBehaviour$Properties$Type)

public "isOpen"(state: $BlockState$Type): boolean
public "getTicker"<T extends $BlockEntity>(pLevel: $Level$Type, pState: $BlockState$Type, pBlockEntityType: $BlockEntityType$Type<(T)>): $BlockEntityTicker<(T)>
public "getStateForPlacement"(context: $BlockPlaceContext$Type): $BlockState
public "setPlacedBy"(worldIn: $Level$Type, pos: $BlockPos$Type, state: $BlockState$Type, placer: $LivingEntity$Type, stack: $ItemStack$Type): void
public "onNeighborChange"(state: $BlockState$Type, world: $LevelReader$Type, pos: $BlockPos$Type, neighbor: $BlockPos$Type): void
public "neighborChanged"(state: $BlockState$Type, world: $Level$Type, pos: $BlockPos$Type, neighborBlock: $Block$Type, fromPos: $BlockPos$Type, moving: boolean): void
public "updateShape"(stateIn: $BlockState$Type, facing: $Direction$Type, facingState: $BlockState$Type, worldIn: $LevelAccessor$Type, currentPos: $BlockPos$Type, facingPos: $BlockPos$Type): $BlockState
public "use"(state: $BlockState$Type, worldIn: $Level$Type, pos: $BlockPos$Type, player: $Player$Type, handIn: $InteractionHand$Type, hit: $BlockHitResult$Type): $InteractionResult
public "rotate"(state: $BlockState$Type, rot: $Rotation$Type): $BlockState
public "mirror"(state: $BlockState$Type, mirrorIn: $Mirror$Type): $BlockState
public "getShape"(state: $BlockState$Type, world: $BlockGetter$Type, pos: $BlockPos$Type, context: $CollisionContext$Type): $VoxelShape
public "animateTick"(state: $BlockState$Type, world: $Level$Type, pos: $BlockPos$Type, random: $RandomSource$Type): void
public "getTileParticleColor"(pos: $BlockPos$Type, world: $Level$Type): integer
public "updateBlock"(state: $BlockState$Type, world: $Level$Type, pos: $BlockPos$Type, toggle: boolean): void
public "updateTileFluid"(state: $BlockState$Type, pos: $BlockPos$Type, world: $LevelAccessor$Type): boolean
public "newBlockEntity"(pPos: $BlockPos$Type, pState: $BlockState$Type): $BlockEntity
public "getListener"<T extends $BlockEntity>(arg0: $ServerLevel$Type, arg1: T): $GameEventListener
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FaucetBlock$Type = ($FaucetBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FaucetBlock_ = $FaucetBlock$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/block/$IColored" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$DyeColor, $DyeColor$Type} from "packages/net/minecraft/world/item/$DyeColor"

export interface $IColored {

/**
 * 
 * @deprecated
 */
 "changeItemColor"(color: $DyeColor$Type): $Item
 "supportsBlankColor"(): boolean
 "getColor"(): $DyeColor

(color: $DyeColor$Type): $Item
}

export namespace $IColored {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IColored$Type = ($IColored);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IColored_ = $IColored$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/reg/$ModConstants" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $ModConstants {
static readonly "CEILING_BANNER_NAME": string
static readonly "HANGING_FLOWER_POT_NAME": string
static readonly "LIQUID_CAULDRON_NAME": string
static readonly "DYE_CAULDRON_NAME": string
static readonly "WATER_LILY_NAME": string
static readonly "DYE_BOTTLE_NAME": string
static readonly "CARPETED_STAIR_NAME": string
static readonly "CARPETED_SLAB_NAME": string
static readonly "DIRECTIONAL_CAKE_NAME": string
static readonly "SKULL_PILE_NAME": string
static readonly "SKULL_CANDLE_NAME": string
static readonly "SKULL_CANDLE_SOUL_NAME": string
static readonly "WALL_LANTERN_NAME": string
static readonly "FALLING_LANTERN_NAME": string
static readonly "TOOL_HOOK_NAME": string

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModConstants$Type = ($ModConstants);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModConstants_ = $ModConstants$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/integration/$BreezyCompat" {
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $BreezyCompat {

constructor()

public static "getWindDirection"(pos: $BlockPos$Type, level: $Level$Type): float
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BreezyCompat$Type = ($BreezyCompat);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BreezyCompat_ = $BreezyCompat$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/integration/$TrinketsCompat" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $TrinketsCompat {

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TrinketsCompat$Type = ($TrinketsCompat);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TrinketsCompat_ = $TrinketsCompat$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/events/forge/$IDropItemOnDeathEventImpl" {
import {$IDropItemOnDeathEvent, $IDropItemOnDeathEvent$Type} from "packages/net/mehvahdjukaar/moonlight/api/events/$IDropItemOnDeathEvent"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export class $IDropItemOnDeathEventImpl {

constructor()

public static "create"(itemStack: $ItemStack$Type, player: $Player$Type, beforeDrop: boolean): $IDropItemOnDeathEvent
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IDropItemOnDeathEventImpl$Type = ($IDropItemOnDeathEventImpl);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IDropItemOnDeathEventImpl_ = $IDropItemOnDeathEventImpl$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/client/$ItemHoldingAnimationsManager" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $ItemHoldingAnimationsManager {

constructor()

public static "addAnimations"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ItemHoldingAnimationsManager$Type = ($ItemHoldingAnimationsManager);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ItemHoldingAnimationsManager_ = $ItemHoldingAnimationsManager$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/blocks/$ItemShelfBlock" {
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$EntityBlock, $EntityBlock$Type} from "packages/net/minecraft/world/level/block/$EntityBlock"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Mirror, $Mirror$Type} from "packages/net/minecraft/world/level/block/$Mirror"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$PathComputationType, $PathComputationType$Type} from "packages/net/minecraft/world/level/pathfinder/$PathComputationType"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$WaterBlock, $WaterBlock$Type} from "packages/net/mehvahdjukaar/moonlight/api/block/$WaterBlock"
import {$List, $List$Type} from "packages/java/util/$List"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"
import {$DirectionProperty, $DirectionProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$DirectionProperty"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$CollisionContext, $CollisionContext$Type} from "packages/net/minecraft/world/phys/shapes/$CollisionContext"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$HitResult, $HitResult$Type} from "packages/net/minecraft/world/phys/$HitResult"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$Rotation, $Rotation$Type} from "packages/net/minecraft/world/level/block/$Rotation"
import {$MenuProvider, $MenuProvider$Type} from "packages/net/minecraft/world/$MenuProvider"
import {$BlockEntityTicker, $BlockEntityTicker$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityTicker"
import {$GameEventListener, $GameEventListener$Type} from "packages/net/minecraft/world/level/gameevent/$GameEventListener"

export class $ItemShelfBlock extends $WaterBlock implements $EntityBlock {
static readonly "ITEM_SHELF_BLOCKS": $List<($Block)>
static readonly "FACING": $DirectionProperty
static readonly "WATERLOGGED": $BooleanProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(properties: $BlockBehaviour$Properties$Type)

public "propagatesSkylightDown"(state: $BlockState$Type, reader: $BlockGetter$Type, pos: $BlockPos$Type): boolean
public "getStateForPlacement"(context: $BlockPlaceContext$Type): $BlockState
public "setPlacedBy"(world: $Level$Type, pos: $BlockPos$Type, state: $BlockState$Type, entity: $LivingEntity$Type, stack: $ItemStack$Type): void
public "isLadder"(state: $BlockState$Type, world: $LevelReader$Type, pos: $BlockPos$Type, entity: $LivingEntity$Type): boolean
public "getCloneItemStack"(state: $BlockState$Type, target: $HitResult$Type, world: $BlockGetter$Type, pos: $BlockPos$Type, player: $Player$Type): $ItemStack
public "isPathfindable"(state: $BlockState$Type, reader: $BlockGetter$Type, pos: $BlockPos$Type, pathType: $PathComputationType$Type): boolean
public "updateShape"(stateIn: $BlockState$Type, facing: $Direction$Type, facingState: $BlockState$Type, worldIn: $LevelAccessor$Type, currentPos: $BlockPos$Type, facingPos: $BlockPos$Type): $BlockState
public "use"(state: $BlockState$Type, worldIn: $Level$Type, pos: $BlockPos$Type, player: $Player$Type, handIn: $InteractionHand$Type, hit: $BlockHitResult$Type): $InteractionResult
public "hasAnalogOutputSignal"(state: $BlockState$Type): boolean
public "onRemove"(state: $BlockState$Type, world: $Level$Type, pos: $BlockPos$Type, newState: $BlockState$Type, isMoving: boolean): void
public "rotate"(state: $BlockState$Type, rot: $Rotation$Type): $BlockState
public "mirror"(state: $BlockState$Type, mirrorIn: $Mirror$Type): $BlockState
public "getMenuProvider"(state: $BlockState$Type, worldIn: $Level$Type, pos: $BlockPos$Type): $MenuProvider
public "canSurvive"(state: $BlockState$Type, worldIn: $LevelReader$Type, pos: $BlockPos$Type): boolean
public "getAnalogOutputSignal"(blockState: $BlockState$Type, world: $Level$Type, pos: $BlockPos$Type): integer
public "getShape"(state: $BlockState$Type, world: $BlockGetter$Type, pos: $BlockPos$Type, context: $CollisionContext$Type): $VoxelShape
public "newBlockEntity"(pPos: $BlockPos$Type, pState: $BlockState$Type): $BlockEntity
public "getTicker"<T extends $BlockEntity>(arg0: $Level$Type, arg1: $BlockState$Type, arg2: $BlockEntityType$Type<(T)>): $BlockEntityTicker<(T)>
public "getListener"<T extends $BlockEntity>(arg0: $ServerLevel$Type, arg1: T): $GameEventListener
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ItemShelfBlock$Type = ($ItemShelfBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ItemShelfBlock_ = $ItemShelfBlock$Type;
}}
declare module "packages/net/mehvahdjukaar/dummmmmmy/network/$NetworkHandler" {
import {$ChannelHandler, $ChannelHandler$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/network/$ChannelHandler"

export class $NetworkHandler {
static readonly "CHANNEL": $ChannelHandler

constructor()

public static "registerMessages"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $NetworkHandler$Type = ($NetworkHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $NetworkHandler_ = $NetworkHandler$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$JarBoatTile" {
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $JarBoatTile extends $BlockEntity {
 "blockState": $BlockState

constructor(pos: $BlockPos$Type, state: $BlockState$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $JarBoatTile$Type = ($JarBoatTile);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $JarBoatTile_ = $JarBoatTile$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/resources/textures/$Respriter" {
import {$AnimationMetadataSection, $AnimationMetadataSection$Type} from "packages/net/minecraft/client/resources/metadata/animation/$AnimationMetadataSection"
import {$TextureImage, $TextureImage$Type} from "packages/net/mehvahdjukaar/moonlight/api/resources/textures/$TextureImage"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Palette, $Palette$Type} from "packages/net/mehvahdjukaar/moonlight/api/resources/textures/$Palette"

export class $Respriter {


public static "of"(imageToRecolor: $TextureImage$Type): $Respriter
public "recolor"(targetPalettes: $List$Type<($Palette$Type)>): $TextureImage
public "recolor"(targetPalette: $Palette$Type): $TextureImage
public "recolorWithAnimation"(targetPalettes: $List$Type<($Palette$Type)>, targetAnimationData: $AnimationMetadataSection$Type): $TextureImage
public "recolorWithAnimationOf"(textureImage: $TextureImage$Type): $TextureImage
public static "ofPalette"(imageToRecolor: $TextureImage$Type, colorsToSwap: $List$Type<($Palette$Type)>): $Respriter
public static "ofPalette"(imageToRecolor: $TextureImage$Type, colorsToSwap: $Palette$Type): $Respriter
public static "masked"(imageToRecolor: $TextureImage$Type, colorMask: $TextureImage$Type): $Respriter
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Respriter$Type = ($Respriter);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Respriter_ = $Respriter$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/faucet/$FiniteFluidInteraction" {
import {$FaucetSource$Fluid, $FaucetSource$Fluid$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/faucet/$FaucetSource$Fluid"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$FluidOffer, $FluidOffer$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/faucet/$FluidOffer"
import {$SoftFluidStack, $SoftFluidStack$Type} from "packages/net/mehvahdjukaar/moonlight/api/fluids/$SoftFluidStack"
import {$FaucetTarget$Fluid, $FaucetTarget$Fluid$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/faucet/$FaucetTarget$Fluid"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$FluidState, $FluidState$Type} from "packages/net/minecraft/world/level/material/$FluidState"

export class $FiniteFluidInteraction implements $FaucetTarget$Fluid, $FaucetSource$Fluid {

constructor()

public "fill"(level: $Level$Type, pos: $BlockPos$Type, existing: $FluidState$Type, fluid: $SoftFluidStack$Type, minAmount: integer): integer
public "drain"(level: $Level$Type, pos: $BlockPos$Type, dir: $Direction$Type, source: $FluidState$Type, amount: integer): void
public "getProvidedFluid"(level: $Level$Type, pos: $BlockPos$Type, dir: $Direction$Type, source: $FluidState$Type): $FluidOffer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FiniteFluidInteraction$Type = ($FiniteFluidInteraction);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FiniteFluidInteraction_ = $FiniteFluidInteraction$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/blocks/$SafeBlock" {
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$Fluid, $Fluid$Type} from "packages/net/minecraft/world/level/material/$Fluid"
import {$EntityBlock, $EntityBlock$Type} from "packages/net/minecraft/world/level/block/$EntityBlock"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$ILavaAndWaterLoggable, $ILavaAndWaterLoggable$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/$ILavaAndWaterLoggable"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Mirror, $Mirror$Type} from "packages/net/minecraft/world/level/block/$Mirror"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$FluidState, $FluidState$Type} from "packages/net/minecraft/world/level/material/$FluidState"
import {$PathComputationType, $PathComputationType$Type} from "packages/net/minecraft/world/level/pathfinder/$PathComputationType"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$List, $List$Type} from "packages/java/util/$List"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"
import {$DirectionProperty, $DirectionProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$DirectionProperty"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$CollisionContext, $CollisionContext$Type} from "packages/net/minecraft/world/phys/shapes/$CollisionContext"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$LootParams$Builder, $LootParams$Builder$Type} from "packages/net/minecraft/world/level/storage/loot/$LootParams$Builder"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$Rotation, $Rotation$Type} from "packages/net/minecraft/world/level/block/$Rotation"
import {$MenuProvider, $MenuProvider$Type} from "packages/net/minecraft/world/$MenuProvider"
import {$BlockEntityTicker, $BlockEntityTicker$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityTicker"
import {$GameEventListener, $GameEventListener$Type} from "packages/net/minecraft/world/level/gameevent/$GameEventListener"

export class $SafeBlock extends $Block implements $ILavaAndWaterLoggable, $EntityBlock {
static readonly "SHAPE": $VoxelShape
static readonly "FACING": $DirectionProperty
static readonly "WATERLOGGED": $BooleanProperty
static readonly "LAVALOGGED": $BooleanProperty
static readonly "OPEN": $BooleanProperty
static readonly "CONTENTS": $ResourceLocation
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(properties: $BlockBehaviour$Properties$Type)

public "propagatesSkylightDown"(state: $BlockState$Type, reader: $BlockGetter$Type, pos: $BlockPos$Type): boolean
public "getStateForPlacement"(context: $BlockPlaceContext$Type): $BlockState
public "setPlacedBy"(level: $Level$Type, pos: $BlockPos$Type, state: $BlockState$Type, placer: $LivingEntity$Type, stack: $ItemStack$Type): void
public "getCloneItemStack"(level: $BlockGetter$Type, pos: $BlockPos$Type, state: $BlockState$Type): $ItemStack
public "playerWillDestroy"(level: $Level$Type, pos: $BlockPos$Type, state: $BlockState$Type, player: $Player$Type): void
public "appendHoverText"(stack: $ItemStack$Type, level: $BlockGetter$Type, tooltip: $List$Type<($Component$Type)>, flagIn: $TooltipFlag$Type): void
public "onDestroyedByPlayer"(state: $BlockState$Type, world: $Level$Type, pos: $BlockPos$Type, player: $Player$Type, willHarvest: boolean, fluid: $FluidState$Type): boolean
public "isPathfindable"(state: $BlockState$Type, worldIn: $BlockGetter$Type, pos: $BlockPos$Type, type: $PathComputationType$Type): boolean
public "updateShape"(stateIn: $BlockState$Type, facing: $Direction$Type, facingState: $BlockState$Type, level: $LevelAccessor$Type, currentPos: $BlockPos$Type, facingPos: $BlockPos$Type): $BlockState
public "use"(state: $BlockState$Type, level: $Level$Type, pos: $BlockPos$Type, player: $Player$Type, handIn: $InteractionHand$Type, hit: $BlockHitResult$Type): $InteractionResult
public "hasAnalogOutputSignal"(state: $BlockState$Type): boolean
public "onRemove"(state: $BlockState$Type, level: $Level$Type, pos: $BlockPos$Type, newState: $BlockState$Type, isMoving: boolean): void
public "getFluidState"(state: $BlockState$Type): $FluidState
public "rotate"(state: $BlockState$Type, rot: $Rotation$Type): $BlockState
public "mirror"(state: $BlockState$Type, mirrorIn: $Mirror$Type): $BlockState
public "getDrops"(state: $BlockState$Type, builder: $LootParams$Builder$Type): $List<($ItemStack)>
public "getMenuProvider"(state: $BlockState$Type, level: $Level$Type, pos: $BlockPos$Type): $MenuProvider
public "getAnalogOutputSignal"(blockState: $BlockState$Type, level: $Level$Type, pos: $BlockPos$Type): integer
public "getShape"(state: $BlockState$Type, level: $BlockGetter$Type, pos: $BlockPos$Type, context: $CollisionContext$Type): $VoxelShape
public "tick"(state: $BlockState$Type, serverLevel: $ServerLevel$Type, pos: $BlockPos$Type, rand: $RandomSource$Type): void
public "newBlockEntity"(pos: $BlockPos$Type, state: $BlockState$Type): $BlockEntity
public "takeLiquid"(world: $LevelAccessor$Type, pos: $BlockPos$Type, state: $BlockState$Type): $Fluid
public "getPickupSound"(): $Optional<($SoundEvent)>
public "canPlaceLiquid"(reader: $BlockGetter$Type, pos: $BlockPos$Type, state: $BlockState$Type, fluid: $Fluid$Type): boolean
public "placeLiquid"(world: $LevelAccessor$Type, pos: $BlockPos$Type, state: $BlockState$Type, fluidState: $FluidState$Type): boolean
public "pickupBlock"(pLevel: $LevelAccessor$Type, pPos: $BlockPos$Type, pState: $BlockState$Type): $ItemStack
public "getTicker"<T extends $BlockEntity>(arg0: $Level$Type, arg1: $BlockState$Type, arg2: $BlockEntityType$Type<(T)>): $BlockEntityTicker<(T)>
public "getListener"<T extends $BlockEntity>(arg0: $ServerLevel$Type, arg1: T): $GameEventListener
public "getPickupSound"(arg0: $BlockState$Type): $Optional<($SoundEvent)>
get "pickupSound"(): $Optional<($SoundEvent)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SafeBlock$Type = ($SafeBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SafeBlock_ = $SafeBlock$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/renderers/entities/funny/$JarredModel" {
import {$VertexConsumer, $VertexConsumer$Type} from "packages/com/mojang/blaze3d/vertex/$VertexConsumer"
import {$HumanoidArm, $HumanoidArm$Type} from "packages/net/minecraft/world/entity/$HumanoidArm"
import {$HumanoidModel$ArmPose, $HumanoidModel$ArmPose$Type} from "packages/net/minecraft/client/model/$HumanoidModel$ArmPose"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$ModelPart, $ModelPart$Type} from "packages/net/minecraft/client/model/geom/$ModelPart"
import {$LayerDefinition, $LayerDefinition$Type} from "packages/net/minecraft/client/model/geom/builders/$LayerDefinition"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$PlayerModel, $PlayerModel$Type} from "packages/net/minecraft/client/model/$PlayerModel"

export class $JarredModel<T extends $LivingEntity> extends $PlayerModel<(T)> {
readonly "leftSleeve": $ModelPart
readonly "rightSleeve": $ModelPart
readonly "leftPants": $ModelPart
readonly "rightPants": $ModelPart
readonly "jacket": $ModelPart
static readonly "OVERLAY_SCALE": float
static readonly "HAT_OVERLAY_SCALE": float
static readonly "LEGGINGS_OVERLAY_SCALE": float
static readonly "TOOT_HORN_XROT_BASE": float
static readonly "TOOT_HORN_YROT_BASE": float
readonly "head": $ModelPart
readonly "hat": $ModelPart
readonly "body": $ModelPart
readonly "rightArm": $ModelPart
readonly "leftArm": $ModelPart
readonly "rightLeg": $ModelPart
readonly "leftLeg": $ModelPart
 "leftArmPose": $HumanoidModel$ArmPose
 "rightArmPose": $HumanoidModel$ArmPose
 "crouching": boolean
 "swimAmount": float
readonly "scaleHead": boolean
readonly "babyYHeadOffset": float
readonly "babyZHeadOffset": float
readonly "babyHeadScale": float
readonly "babyBodyScale": float
readonly "bodyYOffset": float
 "attackTime": float
 "riding": boolean
 "young": boolean

constructor(modelPart: $ModelPart$Type)

public "setupAnim"(player: T, limbSwing: float, limbSwingAmount: float, ageInTicks: float, netHeadYaw: float, headPitch: float): void
public static "createMesh"(): $LayerDefinition
public "renderToBuffer"(matrixStack: $PoseStack$Type, buffer: $VertexConsumer$Type, packedLight: integer, packedOverlay: integer, red: float, green: float, blue: float, alpha: float): void
public "translateToHand"(handSide: $HumanoidArm$Type, matrixStack: $PoseStack$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $JarredModel$Type<T> = ($JarredModel<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $JarredModel_<T> = $JarredModel$Type<(T)>;
}}
declare module "packages/net/mehvahdjukaar/amendments/forge/$Test" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $Test {

constructor()

public static "aa"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Test$Type = ($Test);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Test_ = $Test$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/block_models/$SignPostBlockBakedModel" {
import {$ModelData, $ModelData$Type} from "packages/net/minecraftforge/client/model/data/$ModelData"
import {$ItemTransforms, $ItemTransforms$Type} from "packages/net/minecraft/client/renderer/block/model/$ItemTransforms"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$ExtraModelData, $ExtraModelData$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$ExtraModelData"
import {$CustomBakedModel, $CustomBakedModel$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$CustomBakedModel"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$BakedModel, $BakedModel$Type} from "packages/net/minecraft/client/resources/model/$BakedModel"
import {$RenderType, $RenderType$Type} from "packages/net/minecraft/client/renderer/$RenderType"
import {$ItemOverrides, $ItemOverrides$Type} from "packages/net/minecraft/client/renderer/block/model/$ItemOverrides"
import {$ItemDisplayContext, $ItemDisplayContext$Type} from "packages/net/minecraft/world/item/$ItemDisplayContext"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$List, $List$Type} from "packages/java/util/$List"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$ChunkRenderTypeSet, $ChunkRenderTypeSet$Type} from "packages/net/minecraftforge/client/$ChunkRenderTypeSet"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockAndTintGetter, $BlockAndTintGetter$Type} from "packages/net/minecraft/world/level/$BlockAndTintGetter"
import {$BakedQuad, $BakedQuad$Type} from "packages/net/minecraft/client/renderer/block/model/$BakedQuad"
import {$TextureAtlasSprite, $TextureAtlasSprite$Type} from "packages/net/minecraft/client/renderer/texture/$TextureAtlasSprite"

export class $SignPostBlockBakedModel implements $CustomBakedModel {

constructor()

public "usesBlockLight"(): boolean
public "isGui3d"(): boolean
public "getBlockQuads"(state: $BlockState$Type, side: $Direction$Type, rand: $RandomSource$Type, renderType: $RenderType$Type, data: $ExtraModelData$Type): $List<($BakedQuad)>
public "getBlockParticle"(data: $ExtraModelData$Type): $TextureAtlasSprite
public "isCustomRenderer"(): boolean
public "getOverrides"(): $ItemOverrides
public "getTransforms"(): $ItemTransforms
public "useAmbientOcclusion"(): boolean
public "getParticleIcon"(): $TextureAtlasSprite
public "getQuads"(state: $BlockState$Type, side: $Direction$Type, rand: $RandomSource$Type): $List<(any)>
public "getQuads"(state: $BlockState$Type, side: $Direction$Type, rand: $RandomSource$Type, modelData: $ModelData$Type, type: $RenderType$Type): $List<(any)>
public "getParticleIcon"(data: $ModelData$Type): $TextureAtlasSprite
public "getModelData"(level: $BlockAndTintGetter$Type, pos: $BlockPos$Type, state: $BlockState$Type, modelData: $ModelData$Type): $ModelData
public "getModelData"(originalData: $ExtraModelData$Type, stack: $ItemStack$Type): $ExtraModelData
public "getModelData"(tileData: $ExtraModelData$Type, pos: $BlockPos$Type, state: $BlockState$Type, level: $BlockAndTintGetter$Type): $ExtraModelData
public "useAmbientOcclusion"(arg0: $BlockState$Type, arg1: $RenderType$Type): boolean
public "useAmbientOcclusion"(arg0: $BlockState$Type): boolean
public "getRenderTypes"(arg0: $ItemStack$Type, arg1: boolean): $List<($RenderType)>
public "getRenderTypes"(arg0: $BlockState$Type, arg1: $RandomSource$Type, arg2: $ModelData$Type): $ChunkRenderTypeSet
public "getRenderPasses"(arg0: $ItemStack$Type, arg1: boolean): $List<($BakedModel)>
public "applyTransform"(arg0: $ItemDisplayContext$Type, arg1: $PoseStack$Type, arg2: boolean): $BakedModel
public "useAmbientOcclusionWithLightEmission"(arg0: $BlockState$Type, arg1: $RenderType$Type): boolean
get "gui3d"(): boolean
get "customRenderer"(): boolean
get "overrides"(): $ItemOverrides
get "transforms"(): $ItemTransforms
get "particleIcon"(): $TextureAtlasSprite
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SignPostBlockBakedModel$Type = ($SignPostBlockBakedModel);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SignPostBlockBakedModel_ = $SignPostBlockBakedModel$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/client/model/forge/$BakedQuadsTransformerImpl" {
import {$BakedQuadsTransformer, $BakedQuadsTransformer$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$BakedQuadsTransformer"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Matrix4f, $Matrix4f$Type} from "packages/org/joml/$Matrix4f"
import {$IntUnaryOperator, $IntUnaryOperator$Type} from "packages/java/util/function/$IntUnaryOperator"
import {$BakedQuad, $BakedQuad$Type} from "packages/net/minecraft/client/renderer/block/model/$BakedQuad"
import {$TextureAtlasSprite, $TextureAtlasSprite$Type} from "packages/net/minecraft/client/renderer/texture/$TextureAtlasSprite"

export class $BakedQuadsTransformerImpl implements $BakedQuadsTransformer {

constructor()

public "transform"(quad: $BakedQuad$Type): $BakedQuad
public static "create"(): $BakedQuadsTransformer
public "applyingAmbientOcclusion"(ambientOcclusion: boolean): $BakedQuadsTransformer
public "applyingEmissivity"(emissivity: integer): $BakedQuadsTransformer
public "applyingSprite"(sprite: $TextureAtlasSprite$Type): $BakedQuadsTransformer
public "applyingTransform"(transform: $Matrix4f$Type): $BakedQuadsTransformer
public "applyingColor"(indexToABGR: $IntUnaryOperator$Type): $BakedQuadsTransformer
public "applyingTintIndex"(tintIndex: integer): $BakedQuadsTransformer
public "applyingShade"(shade: boolean): $BakedQuadsTransformer
public "applyingLightMap"(packedLight: integer): $BakedQuadsTransformer
public "transformAll"(quads: $List$Type<($BakedQuad$Type)>): $List<($BakedQuad)>
public "applyingColor"(ABGRcolor: integer): $BakedQuadsTransformer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BakedQuadsTransformerImpl$Type = ($BakedQuadsTransformerImpl);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BakedQuadsTransformerImpl_ = $BakedQuadsTransformerImpl$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/blocks/$WindVaneBlock" {
import {$IntegerProperty, $IntegerProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$IntegerProperty"
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$EntityBlock, $EntityBlock$Type} from "packages/net/minecraft/world/level/block/$EntityBlock"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$WaterBlock, $WaterBlock$Type} from "packages/net/mehvahdjukaar/moonlight/api/block/$WaterBlock"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$CollisionContext, $CollisionContext$Type} from "packages/net/minecraft/world/phys/shapes/$CollisionContext"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$BlockEntityTicker, $BlockEntityTicker$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityTicker"
import {$GameEventListener, $GameEventListener$Type} from "packages/net/minecraft/world/level/gameevent/$GameEventListener"
import {$RenderShape, $RenderShape$Type} from "packages/net/minecraft/world/level/block/$RenderShape"

export class $WindVaneBlock extends $WaterBlock implements $EntityBlock {
static readonly "WIND_STRENGTH": $IntegerProperty
static readonly "WATERLOGGED": $BooleanProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(properties: $BlockBehaviour$Properties$Type)

public "getTicker"<T extends $BlockEntity>(pLevel: $Level$Type, pState: $BlockState$Type, pBlockEntityType: $BlockEntityType$Type<(T)>): $BlockEntityTicker<(T)>
public "appendHoverText"(stack: $ItemStack$Type, worldIn: $BlockGetter$Type, tooltip: $List$Type<($Component$Type)>, flagIn: $TooltipFlag$Type): void
public static "updatePower"(bs: $BlockState$Type, world: $Level$Type, pos: $BlockPos$Type): void
public "getRenderShape"(state: $BlockState$Type): $RenderShape
public "isSignalSource"(state: $BlockState$Type): boolean
public "hasAnalogOutputSignal"(state: $BlockState$Type): boolean
public "getAnalogOutputSignal"(blockState: $BlockState$Type, world: $Level$Type, pos: $BlockPos$Type): integer
public "getShape"(state: $BlockState$Type, world: $BlockGetter$Type, pos: $BlockPos$Type, context: $CollisionContext$Type): $VoxelShape
public "getSignal"(blockState: $BlockState$Type, blockAccess: $BlockGetter$Type, pos: $BlockPos$Type, side: $Direction$Type): integer
public "getDirectSignal"(blockState: $BlockState$Type, blockAccess: $BlockGetter$Type, pos: $BlockPos$Type, side: $Direction$Type): integer
public "newBlockEntity"(pPos: $BlockPos$Type, pState: $BlockState$Type): $BlockEntity
public "getListener"<T extends $BlockEntity>(arg0: $ServerLevel$Type, arg1: T): $GameEventListener
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WindVaneBlock$Type = ($WindVaneBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WindVaneBlock_ = $WindVaneBlock$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/renderers/forge/$ModSlider" {
import {$ISlider, $ISlider$Type} from "packages/net/mehvahdjukaar/supplementaries/client/screens/widgets/$ISlider"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$ComponentPath, $ComponentPath$Type} from "packages/net/minecraft/client/gui/$ComponentPath"
import {$ForgeSlider, $ForgeSlider$Type} from "packages/net/minecraftforge/client/gui/widget/$ForgeSlider"
import {$FocusNavigationEvent, $FocusNavigationEvent$Type} from "packages/net/minecraft/client/gui/navigation/$FocusNavigationEvent"
import {$NarratableEntry$NarrationPriority, $NarratableEntry$NarrationPriority$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry$NarrationPriority"
import {$ScreenRectangle, $ScreenRectangle$Type} from "packages/net/minecraft/client/gui/navigation/$ScreenRectangle"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$NarrationElementOutput, $NarrationElementOutput$Type} from "packages/net/minecraft/client/gui/narration/$NarrationElementOutput"

export class $ModSlider extends $ForgeSlider implements $ISlider, $GuiEventListener {
static readonly "SLIDER_LOCATION": $ResourceLocation
static readonly "WIDGETS_LOCATION": $ResourceLocation
static readonly "ACCESSIBILITY_TEXTURE": $ResourceLocation
 "height": integer
 "x": integer
 "y": integer
 "active": boolean
 "visible": boolean
static readonly "UNSET_FG_COLOR": integer

constructor(x: integer, y: integer, width: integer, height: integer, prefix: $Component$Type, suffix: $Component$Type, minValue: double, maxValue: double, currentValue: double, stepSize: double, precision: integer, drawString: boolean)
constructor(x: integer, y: integer, width: integer, height: integer, prefix: $Component$Type, suffix: $Component$Type, minValue: double, maxValue: double, currentValue: double, drawString: boolean)

public "onReleased"(x: double, y: double): void
public "getValue"(): double
public "keyPressed"(arg0: integer, arg1: integer, arg2: integer): boolean
public "nextFocusPath"(arg0: $FocusNavigationEvent$Type): $ComponentPath
public "isMouseOver"(arg0: double, arg1: double): boolean
public "getRectangle"(): $ScreenRectangle
public "setFocused"(arg0: boolean): void
public "mouseReleased"(arg0: double, arg1: double, arg2: integer): boolean
public "mouseClicked"(arg0: double, arg1: double, arg2: integer): boolean
public "mouseDragged"(arg0: double, arg1: double, arg2: integer, arg3: double, arg4: double): boolean
public "isFocused"(): boolean
public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
public "isActive"(): boolean
public "narrationPriority"(): $NarratableEntry$NarrationPriority
public "getTabOrderGroup"(): integer
public "updateNarration"(arg0: $NarrationElementOutput$Type): void
get "value"(): double
get "rectangle"(): $ScreenRectangle
set "focused"(value: boolean)
get "focused"(): boolean
get "active"(): boolean
get "tabOrderGroup"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModSlider$Type = ($ModSlider);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModSlider_ = $ModSlider$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/core/misc/forge/$ModLootConditions" {
import {$LootItemConditionType, $LootItemConditionType$Type} from "packages/net/minecraft/world/level/storage/loot/predicates/$LootItemConditionType"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"

export class $ModLootConditions {
static readonly "ICONDITION_LOOT_CONDITION": $Supplier<($LootItemConditionType)>
static readonly "PATTERN_MATCH_CONDITION": $Supplier<($LootItemConditionType)>

constructor()

public static "register"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModLootConditions$Type = ($ModLootConditions);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModLootConditions_ = $ModLootConditions$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/forge/$SuppClientPlatformStuffImpl" {
import {$ISlider, $ISlider$Type} from "packages/net/mehvahdjukaar/supplementaries/client/screens/widgets/$ISlider"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$ShaderInstance, $ShaderInstance$Type} from "packages/net/minecraft/client/renderer/$ShaderInstance"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$RenderType, $RenderType$Type} from "packages/net/minecraft/client/renderer/$RenderType"

export class $SuppClientPlatformStuffImpl {

constructor()

public static "getNoiseShader"(): $ShaderInstance
public static "staticNoise"(location: $ResourceLocation$Type): $RenderType
public static "createSlider"(x: integer, y: integer, width: integer, height: integer, prefix: $Component$Type, suffix: $Component$Type, minValue: double, maxValue: double, currentValue: double, stepSize: double, precision: integer, drawString: boolean): $ISlider
get "noiseShader"(): $ShaderInstance
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SuppClientPlatformStuffImpl$Type = ($SuppClientPlatformStuffImpl);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SuppClientPlatformStuffImpl_ = $SuppClientPlatformStuffImpl$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/core/network/$ClientBoundOnPistonMovedBlockPacket" {
import {$Message, $Message$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/network/$Message"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$ChannelHandler$Context, $ChannelHandler$Context$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/network/$ChannelHandler$Context"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $ClientBoundOnPistonMovedBlockPacket implements $Message {
readonly "pos": $BlockPos

constructor(buffer: $FriendlyByteBuf$Type)
constructor(pos: $BlockPos$Type, movedState: $BlockState$Type, direction: $Direction$Type, extending: boolean)

public "handle"(context: $ChannelHandler$Context$Type): void
public static "handlePacket"(message: $ClientBoundOnPistonMovedBlockPacket$Type): void
public "writeToBuffer"(buffer: $FriendlyByteBuf$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientBoundOnPistonMovedBlockPacket$Type = ($ClientBoundOnPistonMovedBlockPacket);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientBoundOnPistonMovedBlockPacket_ = $ClientBoundOnPistonMovedBlockPacket$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/$SuppPlatformStuff" {
import {$MobBucketItem, $MobBucketItem$Type} from "packages/net/minecraft/world/item/$MobBucketItem"
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$VillagerTrades$ItemListing, $VillagerTrades$ItemListing$Type} from "packages/net/minecraft/world/entity/npc/$VillagerTrades$ItemListing"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$EnderMan, $EnderMan$Type} from "packages/net/minecraft/world/entity/monster/$EnderMan"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$CreativeModeTab$Builder, $CreativeModeTab$Builder$Type} from "packages/net/minecraft/world/item/$CreativeModeTab$Builder"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Biome, $Biome$Type} from "packages/net/minecraft/world/level/biome/$Biome"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$ItemEntity, $ItemEntity$Type} from "packages/net/minecraft/world/entity/item/$ItemEntity"

export class $SuppPlatformStuff {

constructor()

public static "getUnoxidised"(level: $Level$Type, pos: $BlockPos$Type, state: $BlockState$Type): $BlockState
public static "getForgeCap"<T>(object: any, capClass: $Class$Type<(T)>): T
public static "getDownfall"(biome: $Biome$Type): float
public static "disableAMWarn"(): void
public static "disableOFWarn"(on: boolean): void
public static "searchBar"(c: $CreativeModeTab$Builder$Type): $CreativeModeTab$Builder
public static "isEndermanMask"(enderMan: $EnderMan$Type, player: $Player$Type, itemstack: $ItemStack$Type): boolean
public static "getFishType"(bucketItem: $MobBucketItem$Type): $EntityType<(any)>
public static "fireRedMerchantTradesEvent"(listings: $List$Type<($VillagerTrades$ItemListing$Type)>): ($VillagerTrades$ItemListing)[]
public static "getItemLifeSpawn"(itemEntity: $ItemEntity$Type): integer
public static "onItemPickup"(player: $Player$Type, itemEntity: $ItemEntity$Type, copy: $ItemStack$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SuppPlatformStuff$Type = ($SuppPlatformStuff);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SuppPlatformStuff_ = $SuppPlatformStuff$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/set/wood/$WoodTypeRegistry" {
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$WoodType, $WoodType$Type} from "packages/net/minecraft/world/level/block/state/properties/$WoodType"
import {$BlockTypeRegistry, $BlockTypeRegistry$Type} from "packages/net/mehvahdjukaar/moonlight/api/set/$BlockTypeRegistry"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$WoodType as $WoodType$0, $WoodType$Type as $WoodType$0$Type} from "packages/net/mehvahdjukaar/moonlight/api/set/wood/$WoodType"
import {$AfterLanguageLoadEvent, $AfterLanguageLoadEvent$Type} from "packages/net/mehvahdjukaar/moonlight/api/events/$AfterLanguageLoadEvent"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"

export class $WoodTypeRegistry extends $BlockTypeRegistry<($WoodType$0)> {
static readonly "OAK_TYPE": $WoodType$0
static readonly "INSTANCE": $WoodTypeRegistry
static "IGNORED_MODS": $Set<(string)>

constructor()

public static "getValue"(name: $ResourceLocation$Type): $WoodType$0
public static "fromNBT"(name: string): $WoodType$0
public static "fromVanilla"(vanillaType: $WoodType$Type): $WoodType$0
public "getFromVanilla"(woodType: $WoodType$Type): $WoodType$0
public "getDefaultType"(): $WoodType$0
public static "getTypes"(): $Collection<($WoodType$0)>
public "addTypeTranslations"(language: $AfterLanguageLoadEvent$Type): void
public "detectTypeFromBlock"(baseBlock: $Block$Type, baseRes: $ResourceLocation$Type): $Optional<($WoodType$0)>
get "defaultType"(): $WoodType$0
get "types"(): $Collection<($WoodType$0)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WoodTypeRegistry$Type = ($WoodTypeRegistry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WoodTypeRegistry_ = $WoodTypeRegistry$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/client/renderer/$DynamicRenderedBlockTile" {
import {$IExtraModelDataProvider, $IExtraModelDataProvider$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$IExtraModelDataProvider"
import {$Connection, $Connection$Type} from "packages/net/minecraft/network/$Connection"
import {$ModelData, $ModelData$Type} from "packages/net/minecraftforge/client/model/data/$ModelData"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$ModelDataKey, $ModelDataKey$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$ModelDataKey"
import {$ExtraModelData, $ExtraModelData$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$ExtraModelData"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$ClientboundBlockEntityDataPacket, $ClientboundBlockEntityDataPacket$Type} from "packages/net/minecraft/network/protocol/game/$ClientboundBlockEntityDataPacket"
import {$ExtraModelData$Builder, $ExtraModelData$Builder$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$ExtraModelData$Builder"

/**
 * 
 * @deprecated
 */
export class $DynamicRenderedBlockTile extends $BlockEntity implements $IExtraModelDataProvider {
static readonly "IS_FANCY": $ModelDataKey<(boolean)>
 "blockState": $BlockState


public "isNeverFancy"(): boolean
public "onFancyChanged"(fancy: boolean): void
public "rendersFancy"(): boolean
public "shouldRenderFancy"(cameraPos: $Vec3$Type): boolean
public "addExtraModelData"(builder: $ExtraModelData$Builder$Type): void
public "requestModelReload"(): void
/**
 * 
 * @deprecated
 */
public "getExtraModelData"(): $ExtraModelData
public "afterDataPacket"(oldData: $ExtraModelData$Type): void
public "onDataPacket"(net: $Connection$Type, pkt: $ClientboundBlockEntityDataPacket$Type): void
public "getModelData"(): $ModelData
get "neverFancy"(): boolean
get "extraModelData"(): $ExtraModelData
get "modelData"(): $ModelData
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DynamicRenderedBlockTile$Type = ($DynamicRenderedBlockTile);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DynamicRenderedBlockTile_ = $DynamicRenderedBlockTile$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/integration/quark/$CartographersQuillItem$State" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"

export class $CartographersQuillItem$State {


public "save"(tag: $CompoundTag$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CartographersQuillItem$State$Type = ($CartographersQuillItem$State);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CartographersQuillItem$State_ = $CartographersQuillItem$State$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/renderers/entities/models/$StatueEntityModel" {
import {$VertexConsumer, $VertexConsumer$Type} from "packages/com/mojang/blaze3d/vertex/$VertexConsumer"
import {$BlockEntityRendererProvider$Context, $BlockEntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/blockentity/$BlockEntityRendererProvider$Context"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$Model, $Model$Type} from "packages/net/minecraft/client/model/$Model"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$StatueBlockTile$StatuePose, $StatueBlockTile$StatuePose$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$StatueBlockTile$StatuePose"
import {$ModelPart, $ModelPart$Type} from "packages/net/minecraft/client/model/geom/$ModelPart"

export class $StatueEntityModel extends $Model {
readonly "head": $ModelPart
readonly "hat": $ModelPart
readonly "body": $ModelPart
readonly "rightArm": $ModelPart
readonly "leftArm": $ModelPart
readonly "rightLeg": $ModelPart
readonly "leftLeg": $ModelPart
readonly "leftSleeve": $ModelPart
readonly "rightSleeve": $ModelPart
readonly "leftPants": $ModelPart
readonly "rightPants": $ModelPart
readonly "jacket": $ModelPart
readonly "rightArmS": $ModelPart
readonly "leftArmS": $ModelPart
readonly "leftSleeveS": $ModelPart
readonly "rightSleeveS": $ModelPart

constructor(context: $BlockEntityRendererProvider$Context$Type)

public "setupAnim"(ticks: long, partialTricks: float, dir: $Direction$Type, pose: $StatueBlockTile$StatuePose$Type, waving: boolean, slim: boolean): void
public "renderToBuffer"(matrixStackIn: $PoseStack$Type, bufferIn: $VertexConsumer$Type, packedLightIn: integer, packedOverlayIn: integer, red: float, green: float, blue: float, alpha: float): void
public "renderCloak"(p_228289_1_: $PoseStack$Type, p_228289_2_: $VertexConsumer$Type, p_228289_3_: integer, p_228289_4_: integer): void
public "renderEars"(p_228287_1_: $PoseStack$Type, p_228287_2_: $VertexConsumer$Type, p_228287_3_: integer, p_228287_4_: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $StatueEntityModel$Type = ($StatueEntityModel);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $StatueEntityModel_ = $StatueEntityModel$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/renderers/tiles/$CannonBlockTileRenderer" {
import {$CannonBlockTile, $CannonBlockTile$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$CannonBlockTile"
import {$BlockEntityRendererProvider$Context, $BlockEntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/blockentity/$BlockEntityRendererProvider$Context"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$LayerDefinition, $LayerDefinition$Type} from "packages/net/minecraft/client/model/geom/builders/$LayerDefinition"
import {$BlockEntityRenderer, $BlockEntityRenderer$Type} from "packages/net/minecraft/client/renderer/blockentity/$BlockEntityRenderer"

export class $CannonBlockTileRenderer implements $BlockEntityRenderer<($CannonBlockTile)> {

constructor(context: $BlockEntityRendererProvider$Context$Type)

public "shouldRenderOffScreen"(blockEntity: $CannonBlockTile$Type): boolean
public "render"(tile: $CannonBlockTile$Type, partialTick: float, poseStack: $PoseStack$Type, bufferSource: $MultiBufferSource$Type, packedLight: integer, packedOverlay: integer): void
public static "createMesh"(): $LayerDefinition
public "shouldRender"(arg0: $CannonBlockTile$Type, arg1: $Vec3$Type): boolean
public "getViewDistance"(): integer
get "viewDistance"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CannonBlockTileRenderer$Type = ($CannonBlockTileRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CannonBlockTileRenderer_ = $CannonBlockTileRenderer$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/worldgen/$RoadSignFeature" {
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$RandomFeatureConfiguration, $RandomFeatureConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$RandomFeatureConfiguration"
import {$SpikeConfiguration, $SpikeConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$SpikeConfiguration"
import {$MultifaceGrowthConfiguration, $MultifaceGrowthConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$MultifaceGrowthConfiguration"
import {$RootSystemConfiguration, $RootSystemConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$RootSystemConfiguration"
import {$UnderwaterMagmaConfiguration, $UnderwaterMagmaConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$UnderwaterMagmaConfiguration"
import {$RoadSignFeature$Config, $RoadSignFeature$Config$Type} from "packages/net/mehvahdjukaar/supplementaries/common/worldgen/$RoadSignFeature$Config"
import {$TwistingVinesConfig, $TwistingVinesConfig$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$TwistingVinesConfig"
import {$FeaturePlaceContext, $FeaturePlaceContext$Type} from "packages/net/minecraft/world/level/levelgen/feature/$FeaturePlaceContext"
import {$HugeMushroomFeatureConfiguration, $HugeMushroomFeatureConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$HugeMushroomFeatureConfiguration"
import {$List, $List$Type} from "packages/java/util/$List"
import {$HugeFungusConfiguration, $HugeFungusConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/$HugeFungusConfiguration"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$FossilFeatureConfiguration, $FossilFeatureConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/$FossilFeatureConfiguration"
import {$DeltaFeatureConfiguration, $DeltaFeatureConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$DeltaFeatureConfiguration"
import {$BlockPileConfiguration, $BlockPileConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$BlockPileConfiguration"
import {$OreConfiguration, $OreConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$OreConfiguration"
import {$SculkPatchConfiguration, $SculkPatchConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$SculkPatchConfiguration"
import {$NetherForestVegetationConfig, $NetherForestVegetationConfig$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$NetherForestVegetationConfig"
import {$GeodeConfiguration, $GeodeConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$GeodeConfiguration"
import {$RandomBooleanFeatureConfiguration, $RandomBooleanFeatureConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$RandomBooleanFeatureConfiguration"
import {$ColumnFeatureConfiguration, $ColumnFeatureConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$ColumnFeatureConfiguration"
import {$CountConfiguration, $CountConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$CountConfiguration"
import {$VegetationPatchConfiguration, $VegetationPatchConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$VegetationPatchConfiguration"
import {$Feature, $Feature$Type} from "packages/net/minecraft/world/level/levelgen/feature/$Feature"
import {$BonusChestFeature, $BonusChestFeature$Type} from "packages/net/minecraft/world/level/levelgen/feature/$BonusChestFeature"
import {$LakeFeature$Configuration, $LakeFeature$Configuration$Type} from "packages/net/minecraft/world/level/levelgen/feature/$LakeFeature$Configuration"
import {$BlockColumnConfiguration, $BlockColumnConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$BlockColumnConfiguration"
import {$RandomPatchConfiguration, $RandomPatchConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$RandomPatchConfiguration"
import {$ProbabilityFeatureConfiguration, $ProbabilityFeatureConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$ProbabilityFeatureConfiguration"
import {$Codec, $Codec$Type} from "packages/com/mojang/serialization/$Codec"
import {$TreeConfiguration, $TreeConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$TreeConfiguration"
import {$DripstoneClusterConfiguration, $DripstoneClusterConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$DripstoneClusterConfiguration"
import {$LayerConfiguration, $LayerConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$LayerConfiguration"
import {$ReplaceBlockConfiguration, $ReplaceBlockConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$ReplaceBlockConfiguration"
import {$BlockStateConfiguration, $BlockStateConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$BlockStateConfiguration"
import {$SimpleBlockConfiguration, $SimpleBlockConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$SimpleBlockConfiguration"
import {$DiskConfiguration, $DiskConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$DiskConfiguration"
import {$SeagrassFeature, $SeagrassFeature$Type} from "packages/net/minecraft/world/level/levelgen/feature/$SeagrassFeature"
import {$ReplaceSphereConfiguration, $ReplaceSphereConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$ReplaceSphereConfiguration"
import {$StructureLocator$LocatedStruct, $StructureLocator$LocatedStruct$Type} from "packages/net/mehvahdjukaar/supplementaries/common/worldgen/$StructureLocator$LocatedStruct"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$PointedDripstoneConfiguration, $PointedDripstoneConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$PointedDripstoneConfiguration"
import {$SpringConfiguration, $SpringConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$SpringConfiguration"
import {$SimpleRandomFeatureConfiguration, $SimpleRandomFeatureConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$SimpleRandomFeatureConfiguration"
import {$LargeDripstoneConfiguration, $LargeDripstoneConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$LargeDripstoneConfiguration"
import {$NoneFeatureConfiguration, $NoneFeatureConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$NoneFeatureConfiguration"
import {$EndGatewayConfiguration, $EndGatewayConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$EndGatewayConfiguration"

export class $RoadSignFeature extends $Feature<($RoadSignFeature$Config)> {
static readonly "NO_OP": $Feature<($NoneFeatureConfiguration)>
static readonly "TREE": $Feature<($TreeConfiguration)>
static readonly "FLOWER": $Feature<($RandomPatchConfiguration)>
static readonly "NO_BONEMEAL_FLOWER": $Feature<($RandomPatchConfiguration)>
static readonly "RANDOM_PATCH": $Feature<($RandomPatchConfiguration)>
static readonly "BLOCK_PILE": $Feature<($BlockPileConfiguration)>
static readonly "SPRING": $Feature<($SpringConfiguration)>
static readonly "CHORUS_PLANT": $Feature<($NoneFeatureConfiguration)>
static readonly "REPLACE_SINGLE_BLOCK": $Feature<($ReplaceBlockConfiguration)>
static readonly "VOID_START_PLATFORM": $Feature<($NoneFeatureConfiguration)>
static readonly "DESERT_WELL": $Feature<($NoneFeatureConfiguration)>
static readonly "FOSSIL": $Feature<($FossilFeatureConfiguration)>
static readonly "HUGE_RED_MUSHROOM": $Feature<($HugeMushroomFeatureConfiguration)>
static readonly "HUGE_BROWN_MUSHROOM": $Feature<($HugeMushroomFeatureConfiguration)>
static readonly "ICE_SPIKE": $Feature<($NoneFeatureConfiguration)>
static readonly "GLOWSTONE_BLOB": $Feature<($NoneFeatureConfiguration)>
static readonly "FREEZE_TOP_LAYER": $Feature<($NoneFeatureConfiguration)>
static readonly "VINES": $Feature<($NoneFeatureConfiguration)>
static readonly "BLOCK_COLUMN": $Feature<($BlockColumnConfiguration)>
static readonly "VEGETATION_PATCH": $Feature<($VegetationPatchConfiguration)>
static readonly "WATERLOGGED_VEGETATION_PATCH": $Feature<($VegetationPatchConfiguration)>
static readonly "ROOT_SYSTEM": $Feature<($RootSystemConfiguration)>
static readonly "MULTIFACE_GROWTH": $Feature<($MultifaceGrowthConfiguration)>
static readonly "UNDERWATER_MAGMA": $Feature<($UnderwaterMagmaConfiguration)>
static readonly "MONSTER_ROOM": $Feature<($NoneFeatureConfiguration)>
static readonly "BLUE_ICE": $Feature<($NoneFeatureConfiguration)>
static readonly "ICEBERG": $Feature<($BlockStateConfiguration)>
static readonly "FOREST_ROCK": $Feature<($BlockStateConfiguration)>
static readonly "DISK": $Feature<($DiskConfiguration)>
static readonly "LAKE": $Feature<($LakeFeature$Configuration)>
static readonly "ORE": $Feature<($OreConfiguration)>
static readonly "END_SPIKE": $Feature<($SpikeConfiguration)>
static readonly "END_ISLAND": $Feature<($NoneFeatureConfiguration)>
static readonly "END_GATEWAY": $Feature<($EndGatewayConfiguration)>
static readonly "SEAGRASS": $SeagrassFeature
static readonly "KELP": $Feature<($NoneFeatureConfiguration)>
static readonly "CORAL_TREE": $Feature<($NoneFeatureConfiguration)>
static readonly "CORAL_MUSHROOM": $Feature<($NoneFeatureConfiguration)>
static readonly "CORAL_CLAW": $Feature<($NoneFeatureConfiguration)>
static readonly "SEA_PICKLE": $Feature<($CountConfiguration)>
static readonly "SIMPLE_BLOCK": $Feature<($SimpleBlockConfiguration)>
static readonly "BAMBOO": $Feature<($ProbabilityFeatureConfiguration)>
static readonly "HUGE_FUNGUS": $Feature<($HugeFungusConfiguration)>
static readonly "NETHER_FOREST_VEGETATION": $Feature<($NetherForestVegetationConfig)>
static readonly "WEEPING_VINES": $Feature<($NoneFeatureConfiguration)>
static readonly "TWISTING_VINES": $Feature<($TwistingVinesConfig)>
static readonly "BASALT_COLUMNS": $Feature<($ColumnFeatureConfiguration)>
static readonly "DELTA_FEATURE": $Feature<($DeltaFeatureConfiguration)>
static readonly "REPLACE_BLOBS": $Feature<($ReplaceSphereConfiguration)>
static readonly "FILL_LAYER": $Feature<($LayerConfiguration)>
static readonly "BONUS_CHEST": $BonusChestFeature
static readonly "BASALT_PILLAR": $Feature<($NoneFeatureConfiguration)>
static readonly "SCATTERED_ORE": $Feature<($OreConfiguration)>
static readonly "RANDOM_SELECTOR": $Feature<($RandomFeatureConfiguration)>
static readonly "SIMPLE_RANDOM_SELECTOR": $Feature<($SimpleRandomFeatureConfiguration)>
static readonly "RANDOM_BOOLEAN_SELECTOR": $Feature<($RandomBooleanFeatureConfiguration)>
static readonly "GEODE": $Feature<($GeodeConfiguration)>
static readonly "DRIPSTONE_CLUSTER": $Feature<($DripstoneClusterConfiguration)>
static readonly "LARGE_DRIPSTONE": $Feature<($LargeDripstoneConfiguration)>
static readonly "POINTED_DRIPSTONE": $Feature<($PointedDripstoneConfiguration)>
static readonly "SCULK_PATCH": $Feature<($SculkPatchConfiguration)>

constructor(codec: $Codec$Type<($RoadSignFeature$Config$Type)>)

public static "isNotSolid"(world: $LevelAccessor$Type, pos: $BlockPos$Type): boolean
public static "applyPostProcess"(c: $RoadSignFeature$Config$Type, level: $ServerLevel$Type, generatorPos: $BlockPos$Type, foundVillages: $List$Type<($StructureLocator$LocatedStruct$Type)>): void
public "place"(context: $FeaturePlaceContext$Type<($RoadSignFeature$Config$Type)>): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RoadSignFeature$Type = ($RoadSignFeature);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RoadSignFeature_ = $RoadSignFeature$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/network/$ServerBoundSetTextHolderPacket" {
import {$Message, $Message$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/network/$Message"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$ChannelHandler$Context, $ChannelHandler$Context$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/network/$ChannelHandler$Context"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $ServerBoundSetTextHolderPacket implements $Message {
readonly "textHolderLines": ((string)[])[]

constructor(pos: $BlockPos$Type, line: string)
constructor(pos: $BlockPos$Type, lines: (string)[])
constructor(pos: $BlockPos$Type, holderLines: ((string)[])[])
constructor(buf: $FriendlyByteBuf$Type)

public "handle"(context: $ChannelHandler$Context$Type): void
public "writeToBuffer"(buf: $FriendlyByteBuf$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ServerBoundSetTextHolderPacket$Type = ($ServerBoundSetTextHolderPacket);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ServerBoundSetTextHolderPacket_ = $ServerBoundSetTextHolderPacket$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/$ModBlockProperties$PostType" {
import {$StringRepresentable$EnumCodec, $StringRepresentable$EnumCodec$Type} from "packages/net/minecraft/util/$StringRepresentable$EnumCodec"
import {$StringRepresentable, $StringRepresentable$Type} from "packages/net/minecraft/util/$StringRepresentable"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$Keyable, $Keyable$Type} from "packages/com/mojang/serialization/$Keyable"
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"

export class $ModBlockProperties$PostType extends $Enum<($ModBlockProperties$PostType)> implements $StringRepresentable {
static readonly "POST": $ModBlockProperties$PostType
static readonly "PALISADE": $ModBlockProperties$PostType
static readonly "WALL": $ModBlockProperties$PostType
static readonly "BEAM": $ModBlockProperties$PostType


public "getName"(): string
public static "get"(state: $BlockState$Type): $ModBlockProperties$PostType
public static "get"(state: $BlockState$Type, needsFullHeight: boolean): $ModBlockProperties$PostType
public "toString"(): string
public static "values"(): ($ModBlockProperties$PostType)[]
public static "valueOf"(name: string): $ModBlockProperties$PostType
public "getOffset"(): float
public "getSerializedName"(): string
public "getWidth"(): integer
public static "fromEnumWithMapping"<E extends ($Enum<(E)>) & ($StringRepresentable)>(arg0: $Supplier$Type<((E)[])>, arg1: $Function$Type<(string), (string)>): $StringRepresentable$EnumCodec<(E)>
public static "keys"(arg0: ($StringRepresentable$Type)[]): $Keyable
public static "fromEnum"<E extends ($Enum<(E)>) & ($StringRepresentable)>(arg0: $Supplier$Type<((E)[])>): $StringRepresentable$EnumCodec<(E)>
get "name"(): string
get "offset"(): float
get "serializedName"(): string
get "width"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModBlockProperties$PostType$Type = (("beam") | ("post") | ("palisade") | ("wall")) | ($ModBlockProperties$PostType);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModBlockProperties$PostType_ = $ModBlockProperties$PostType$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/client/model/$CauldronBakedModel" {
import {$ModelData, $ModelData$Type} from "packages/net/minecraftforge/client/model/data/$ModelData"
import {$ModelState, $ModelState$Type} from "packages/net/minecraft/client/resources/model/$ModelState"
import {$ItemTransforms, $ItemTransforms$Type} from "packages/net/minecraft/client/renderer/block/model/$ItemTransforms"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$ExtraModelData, $ExtraModelData$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$ExtraModelData"
import {$CustomBakedModel, $CustomBakedModel$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/model/$CustomBakedModel"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BakedModel, $BakedModel$Type} from "packages/net/minecraft/client/resources/model/$BakedModel"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$RenderType, $RenderType$Type} from "packages/net/minecraft/client/renderer/$RenderType"
import {$ItemOverrides, $ItemOverrides$Type} from "packages/net/minecraft/client/renderer/block/model/$ItemOverrides"
import {$ItemDisplayContext, $ItemDisplayContext$Type} from "packages/net/minecraft/world/item/$ItemDisplayContext"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$List, $List$Type} from "packages/java/util/$List"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$ChunkRenderTypeSet, $ChunkRenderTypeSet$Type} from "packages/net/minecraftforge/client/$ChunkRenderTypeSet"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockAndTintGetter, $BlockAndTintGetter$Type} from "packages/net/minecraft/world/level/$BlockAndTintGetter"
import {$BakedQuad, $BakedQuad$Type} from "packages/net/minecraft/client/renderer/block/model/$BakedQuad"
import {$TextureAtlasSprite, $TextureAtlasSprite$Type} from "packages/net/minecraft/client/renderer/texture/$TextureAtlasSprite"

export class $CauldronBakedModel implements $CustomBakedModel {

constructor(c: $BakedModel$Type, fluid: $BakedModel$Type, transform: $ModelState$Type, translucent: boolean)

public "usesBlockLight"(): boolean
public "isGui3d"(): boolean
public "getBlockQuads"(state: $BlockState$Type, direction: $Direction$Type, randomSource: $RandomSource$Type, renderType: $RenderType$Type, extraModelData: $ExtraModelData$Type): $List<($BakedQuad)>
public "getBlockParticle"(extraModelData: $ExtraModelData$Type): $TextureAtlasSprite
public "isCustomRenderer"(): boolean
public "getOverrides"(): $ItemOverrides
public "getTransforms"(): $ItemTransforms
public "useAmbientOcclusion"(): boolean
public "getParticleIcon"(): $TextureAtlasSprite
public "getQuads"(state: $BlockState$Type, side: $Direction$Type, rand: $RandomSource$Type): $List<(any)>
public "getQuads"(state: $BlockState$Type, side: $Direction$Type, rand: $RandomSource$Type, modelData: $ModelData$Type, type: $RenderType$Type): $List<(any)>
public "getParticleIcon"(data: $ModelData$Type): $TextureAtlasSprite
public "getModelData"(level: $BlockAndTintGetter$Type, pos: $BlockPos$Type, state: $BlockState$Type, modelData: $ModelData$Type): $ModelData
public "getModelData"(originalData: $ExtraModelData$Type, stack: $ItemStack$Type): $ExtraModelData
public "getModelData"(tileData: $ExtraModelData$Type, pos: $BlockPos$Type, state: $BlockState$Type, level: $BlockAndTintGetter$Type): $ExtraModelData
public "useAmbientOcclusion"(arg0: $BlockState$Type, arg1: $RenderType$Type): boolean
public "useAmbientOcclusion"(arg0: $BlockState$Type): boolean
public "getRenderTypes"(arg0: $ItemStack$Type, arg1: boolean): $List<($RenderType)>
public "getRenderTypes"(arg0: $BlockState$Type, arg1: $RandomSource$Type, arg2: $ModelData$Type): $ChunkRenderTypeSet
public "getRenderPasses"(arg0: $ItemStack$Type, arg1: boolean): $List<($BakedModel)>
public "applyTransform"(arg0: $ItemDisplayContext$Type, arg1: $PoseStack$Type, arg2: boolean): $BakedModel
public "useAmbientOcclusionWithLightEmission"(arg0: $BlockState$Type, arg1: $RenderType$Type): boolean
get "gui3d"(): boolean
get "customRenderer"(): boolean
get "overrides"(): $ItemOverrides
get "transforms"(): $ItemTransforms
get "particleIcon"(): $TextureAtlasSprite
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CauldronBakedModel$Type = ($CauldronBakedModel);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CauldronBakedModel_ = $CauldronBakedModel$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/client/renderers/$SkullWithWaxTileRenderer" {
import {$EnhancedSkullBlockTile, $EnhancedSkullBlockTile$Type} from "packages/net/mehvahdjukaar/amendments/common/tile/$EnhancedSkullBlockTile"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$BlockEntityRenderer, $BlockEntityRenderer$Type} from "packages/net/minecraft/client/renderer/blockentity/$BlockEntityRenderer"

export class $SkullWithWaxTileRenderer<T extends $EnhancedSkullBlockTile> implements $BlockEntityRenderer<(T)> {


public "render"(tile: T, pPartialTicks: float, poseStack: $PoseStack$Type, buffer: $MultiBufferSource$Type, pCombinedLight: integer, pCombinedOverlay: integer): void
public "renderInner"<B extends $BlockEntity>(tile: B, pPartialTicks: float, poseStack: $PoseStack$Type, buffer: $MultiBufferSource$Type, pCombinedLight: integer, pCombinedOverlay: integer): void
public "renderWax"(poseStack: $PoseStack$Type, buffer: $MultiBufferSource$Type, pCombinedLight: integer, texture: $ResourceLocation$Type, yaw: float): void
public "shouldRender"(arg0: T, arg1: $Vec3$Type): boolean
public "shouldRenderOffScreen"(arg0: T): boolean
public "getViewDistance"(): integer
get "viewDistance"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SkullWithWaxTileRenderer$Type<T> = ($SkullWithWaxTileRenderer<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SkullWithWaxTileRenderer_<T> = $SkullWithWaxTileRenderer$Type<(T)>;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/inventories/$NoticeBoardContainerMenu" {
import {$NoticeBoardBlockTile, $NoticeBoardBlockTile$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$NoticeBoardBlockTile"
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$IContainerProvider, $IContainerProvider$Type} from "packages/net/mehvahdjukaar/moonlight/api/misc/$IContainerProvider"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$AbstractContainerMenu, $AbstractContainerMenu$Type} from "packages/net/minecraft/world/inventory/$AbstractContainerMenu"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"

export class $NoticeBoardContainerMenu extends $AbstractContainerMenu implements $IContainerProvider {
readonly "container": $NoticeBoardBlockTile
static readonly "SLOT_CLICKED_OUTSIDE": integer
static readonly "QUICKCRAFT_TYPE_CHARITABLE": integer
static readonly "QUICKCRAFT_TYPE_GREEDY": integer
static readonly "QUICKCRAFT_TYPE_CLONE": integer
static readonly "QUICKCRAFT_HEADER_START": integer
static readonly "QUICKCRAFT_HEADER_CONTINUE": integer
static readonly "QUICKCRAFT_HEADER_END": integer
static readonly "CARRIED_SLOT_SIZE": integer
readonly "lastSlots": $NonNullList<($ItemStack)>
readonly "slots": $NonNullList<($Slot)>
 "remoteSlots": $NonNullList<($ItemStack)>
 "containerId": integer

constructor(id: integer, playerInventory: $Inventory$Type, packetBuffer: $FriendlyByteBuf$Type)
constructor(id: integer, playerInventory: $Inventory$Type, container: $NoticeBoardBlockTile$Type)

public "stillValid"(playerIn: $Player$Type): boolean
public "removed"(playerIn: $Player$Type): void
public "quickMoveStack"(player: $Player$Type, index: integer): $ItemStack
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $NoticeBoardContainerMenu$Type = ($NoticeBoardContainerMenu);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $NoticeBoardContainerMenu_ = $NoticeBoardContainerMenu$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/blocks/$EndermanSkullBlock" {
import {$IntegerProperty, $IntegerProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$IntegerProperty"
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$CollisionContext, $CollisionContext$Type} from "packages/net/minecraft/world/phys/shapes/$CollisionContext"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$SkullBlock, $SkullBlock$Type} from "packages/net/minecraft/world/level/block/$SkullBlock"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$SkullBlock$Type, $SkullBlock$Type$Type} from "packages/net/minecraft/world/level/block/$SkullBlock$Type"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$Equipable, $Equipable$Type} from "packages/net/minecraft/world/item/$Equipable"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$BlockEntityTicker, $BlockEntityTicker$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityTicker"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $EndermanSkullBlock extends $SkullBlock {
static readonly "TYPE": $SkullBlock$Type
static readonly "SHAPE_ANGERY": $VoxelShape
static readonly "WATCHED": $BooleanProperty
static readonly "POWER": $IntegerProperty
static readonly "MAX": integer
static readonly "ROTATION": $IntegerProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(properties: $BlockBehaviour$Properties$Type)

public "getTicker"<T extends $BlockEntity>(level: $Level$Type, state: $BlockState$Type, type: $BlockEntityType$Type<(T)>): $BlockEntityTicker<(T)>
public "isSignalSource"(state: $BlockState$Type): boolean
public "getShape"(state: $BlockState$Type, level: $BlockGetter$Type, pos: $BlockPos$Type, context: $CollisionContext$Type): $VoxelShape
public "getSignal"(blockState: $BlockState$Type, blockAccess: $BlockGetter$Type, pos: $BlockPos$Type, side: $Direction$Type): integer
public "animateTick"(state: $BlockState$Type, level: $Level$Type, pos: $BlockPos$Type, random: $RandomSource$Type): void
public "newBlockEntity"(pos: $BlockPos$Type, state: $BlockState$Type): $BlockEntity
public static "get"(arg0: $ItemStack$Type): $Equipable
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EndermanSkullBlock$Type = ($EndermanSkullBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EndermanSkullBlock_ = $EndermanSkullBlock$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/api/$IAntiqueTextProvider" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $IAntiqueTextProvider {

 "hasAntiqueInk"(): boolean
 "setAntiqueInk"(arg0: boolean): void
}

export namespace $IAntiqueTextProvider {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IAntiqueTextProvider$Type = ($IAntiqueTextProvider);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IAntiqueTextProvider_ = $IAntiqueTextProvider$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/resources/pack/$DynServerResourcesGenerator" {
import {$DynamicResourcePack, $DynamicResourcePack$Type} from "packages/net/mehvahdjukaar/moonlight/api/resources/pack/$DynamicResourcePack"
import {$DynResourceGenerator, $DynResourceGenerator$Type} from "packages/net/mehvahdjukaar/moonlight/api/resources/pack/$DynResourceGenerator"
import {$DynamicDataPack, $DynamicDataPack$Type} from "packages/net/mehvahdjukaar/moonlight/api/resources/pack/$DynamicDataPack"

export class $DynServerResourcesGenerator extends $DynResourceGenerator<($DynamicDataPack)> {
readonly "dynamicPack": T


}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DynServerResourcesGenerator$Type = ($DynServerResourcesGenerator);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DynServerResourcesGenerator_ = $DynServerResourcesGenerator$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/core/mixins/$MixinPlugin" {
import {$SimpleMixinPlugin, $SimpleMixinPlugin$Type} from "packages/net/mehvahdjukaar/moonlight/api/misc/$SimpleMixinPlugin"

export class $MixinPlugin extends $SimpleMixinPlugin {

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MixinPlugin$Type = ($MixinPlugin);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MixinPlugin_ = $MixinPlugin$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/integration/$ModernFixCompat" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $ModernFixCompat {

constructor()

public static "areLazyResourcesOn"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModernFixCompat$Type = ($ModernFixCompat);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModernFixCompat_ = $ModernFixCompat$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/common/$IBetterJukebox" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $IBetterJukebox {

 "amendments$getRotation"(arg0: float): float

(arg0: float): float
}

export namespace $IBetterJukebox {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IBetterJukebox$Type = ($IBetterJukebox);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IBetterJukebox_ = $IBetterJukebox$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/integration/$ShimmerCompat" {
import {$BiConsumer, $BiConsumer$Type} from "packages/java/util/function/$BiConsumer"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"

export class $ShimmerCompat {

constructor()

public static "renderWithBloom"(poseStack: $PoseStack$Type, renderFunction: $BiConsumer$Type<($PoseStack$Type), ($MultiBufferSource$Type)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ShimmerCompat$Type = ($ShimmerCompat);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ShimmerCompat_ = $ShimmerCompat$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/blocks/$JarBoatBlock" {
import {$EntityBlock, $EntityBlock$Type} from "packages/net/minecraft/world/level/block/$EntityBlock"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$CollisionContext, $CollisionContext$Type} from "packages/net/minecraft/world/phys/shapes/$CollisionContext"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$PathComputationType, $PathComputationType$Type} from "packages/net/minecraft/world/level/pathfinder/$PathComputationType"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$BlockEntityTicker, $BlockEntityTicker$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityTicker"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"
import {$GameEventListener, $GameEventListener$Type} from "packages/net/minecraft/world/level/gameevent/$GameEventListener"
import {$HorizontalDirectionalBlock, $HorizontalDirectionalBlock$Type} from "packages/net/minecraft/world/level/block/$HorizontalDirectionalBlock"
import {$DirectionProperty, $DirectionProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$DirectionProperty"

export class $JarBoatBlock extends $HorizontalDirectionalBlock implements $EntityBlock {
static readonly "FACING": $DirectionProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(builder: $BlockBehaviour$Properties$Type)

public "getStateForPlacement"(context: $BlockPlaceContext$Type): $BlockState
public "isPathfindable"(state: $BlockState$Type, worldIn: $BlockGetter$Type, pos: $BlockPos$Type, type: $PathComputationType$Type): boolean
public "getShape"(state: $BlockState$Type, world: $BlockGetter$Type, pos: $BlockPos$Type, context: $CollisionContext$Type): $VoxelShape
public "newBlockEntity"(pPos: $BlockPos$Type, pState: $BlockState$Type): $BlockEntity
public "getTicker"<T extends $BlockEntity>(arg0: $Level$Type, arg1: $BlockState$Type, arg2: $BlockEntityType$Type<(T)>): $BlockEntityTicker<(T)>
public "getListener"<T extends $BlockEntity>(arg0: $ServerLevel$Type, arg1: T): $GameEventListener
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $JarBoatBlock$Type = ($JarBoatBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $JarBoatBlock_ = $JarBoatBlock$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/client/$ICustomItemRendererProvider" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$ItemLike, $ItemLike$Type} from "packages/net/minecraft/world/level/$ItemLike"
import {$ItemStackRenderer, $ItemStackRenderer$Type} from "packages/net/mehvahdjukaar/moonlight/api/client/$ItemStackRenderer"

export interface $ICustomItemRendererProvider extends $ItemLike {

 "getRendererFactory"(): $Supplier<($ItemStackRenderer)>
/**
 * 
 * @deprecated
 */
 "registerFabricRenderer"(): void
 "asItem"(): $Item
}

export namespace $ICustomItemRendererProvider {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ICustomItemRendererProvider$Type = ($ICustomItemRendererProvider);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ICustomItemRendererProvider_ = $ICustomItemRendererProvider$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/blocks/$CannonballBlock" {
import {$IntegerProperty, $IntegerProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$IntegerProperty"
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$WaterBlock, $WaterBlock$Type} from "packages/net/mehvahdjukaar/moonlight/api/block/$WaterBlock"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"

export class $CannonballBlock extends $WaterBlock {
static readonly "BALLS": $IntegerProperty
static readonly "WATERLOGGED": $BooleanProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(properties: $BlockBehaviour$Properties$Type)

public "getStateForPlacement"(context: $BlockPlaceContext$Type): $BlockState
public "canBeReplaced"(state: $BlockState$Type, useContext: $BlockPlaceContext$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CannonballBlock$Type = ($CannonballBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CannonballBlock_ = $CannonballBlock$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/forge/$MoonlightForgeClient" {
import {$MovementInputUpdateEvent, $MovementInputUpdateEvent$Type} from "packages/net/minecraftforge/client/event/$MovementInputUpdateEvent"
import {$RegisterShadersEvent, $RegisterShadersEvent$Type} from "packages/net/minecraftforge/client/event/$RegisterShadersEvent"
import {$TextureStitchEvent$Post, $TextureStitchEvent$Post$Type} from "packages/net/minecraftforge/client/event/$TextureStitchEvent$Post"
import {$ShaderInstance, $ShaderInstance$Type} from "packages/net/minecraft/client/renderer/$ShaderInstance"

export class $MoonlightForgeClient {

constructor()

public static "init"(): void
public static "getTextColorShader"(): $ShaderInstance
public static "onTextureStitch"(event: $TextureStitchEvent$Post$Type): void
public static "getTranslucentParticle"(): $ShaderInstance
public static "onInputUpdate"(event: $MovementInputUpdateEvent$Type): void
public static "registerShader"(event: $RegisterShadersEvent$Type): void
public static "registerShaders"(event: $RegisterShadersEvent$Type): void
get "textColorShader"(): $ShaderInstance
get "translucentParticle"(): $ShaderInstance
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MoonlightForgeClient$Type = ($MoonlightForgeClient);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MoonlightForgeClient_ = $MoonlightForgeClient$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/core/$CompatHandler" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $CompatHandler {
static readonly "MAP_ATLASES": boolean
static readonly "MODERNFIX": boolean
static readonly "YACL": boolean
static readonly "CLOTH_CONFIG": boolean

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CompatHandler$Type = ($CompatHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CompatHandler_ = $CompatHandler$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/core/fake_player/$FPClientAccess" {
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$GameProfile, $GameProfile$Type} from "packages/com/mojang/authlib/$GameProfile"

export class $FPClientAccess {

constructor()

public static "get"(level: $Level$Type, id: $GameProfile$Type): $Player
public static "unloadLevel"(level: $LevelAccessor$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FPClientAccess$Type = ($FPClientAccess);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FPClientAccess_ = $FPClientAccess$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/events/forge/$MoonlightEventsHelperImpl" {
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$SimpleEvent, $SimpleEvent$Type} from "packages/net/mehvahdjukaar/moonlight/api/events/$SimpleEvent"
import {$Class, $Class$Type} from "packages/java/lang/$Class"

export class $MoonlightEventsHelperImpl {

constructor()

public static "postEvent"<T extends $SimpleEvent>(event: T, eventClass: $Class$Type<(T)>): void
public static "addListener"<T extends $SimpleEvent>(listener: $Consumer$Type<(T)>, eventClass: $Class$Type<(T)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MoonlightEventsHelperImpl$Type = ($MoonlightEventsHelperImpl);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MoonlightEventsHelperImpl_ = $MoonlightEventsHelperImpl$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/items/crafting/$SpecialRecipeDisplays" {
import {$CraftingRecipe, $CraftingRecipe$Type} from "packages/net/minecraft/world/item/crafting/$CraftingRecipe"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$List, $List$Type} from "packages/java/util/$List"
import {$RecipeBookCategories, $RecipeBookCategories$Type} from "packages/net/minecraft/client/$RecipeBookCategories"

export class $SpecialRecipeDisplays {

constructor()

public static "registerCraftingRecipes"(registry: $Consumer$Type<($List$Type<($CraftingRecipe$Type)>)>): void
public static "registerRecipes"(category: $RecipeBookCategories$Type, registry: $Consumer$Type<($List$Type<($CraftingRecipe$Type)>)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SpecialRecipeDisplays$Type = ($SpecialRecipeDisplays);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SpecialRecipeDisplays_ = $SpecialRecipeDisplays$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/blocks/$RedstoneIlluminatorBlock" {
import {$IntegerProperty, $IntegerProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$IntegerProperty"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"

export class $RedstoneIlluminatorBlock extends $Block {
static readonly "POWER": $IntegerProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(properties: $BlockBehaviour$Properties$Type)

public "getStateForPlacement"(context: $BlockPlaceContext$Type): $BlockState
public "neighborChanged"(state: $BlockState$Type, level: $Level$Type, pos: $BlockPos$Type, neighborBlock: $Block$Type, fromPos: $BlockPos$Type, moving: boolean): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RedstoneIlluminatorBlock$Type = ($RedstoneIlluminatorBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RedstoneIlluminatorBlock_ = $RedstoneIlluminatorBlock$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/blocks/$StatueBlock" {
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$EntityBlock, $EntityBlock$Type} from "packages/net/minecraft/world/level/block/$EntityBlock"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Mirror, $Mirror$Type} from "packages/net/minecraft/world/level/block/$Mirror"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$WaterBlock, $WaterBlock$Type} from "packages/net/mehvahdjukaar/moonlight/api/block/$WaterBlock"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"
import {$DirectionProperty, $DirectionProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$DirectionProperty"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$CollisionContext, $CollisionContext$Type} from "packages/net/minecraft/world/phys/shapes/$CollisionContext"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$Rotation, $Rotation$Type} from "packages/net/minecraft/world/level/block/$Rotation"
import {$BlockEntityTicker, $BlockEntityTicker$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityTicker"
import {$GameEventListener, $GameEventListener$Type} from "packages/net/minecraft/world/level/gameevent/$GameEventListener"

export class $StatueBlock extends $WaterBlock implements $EntityBlock {
static readonly "FACING": $DirectionProperty
static readonly "POWERED": $BooleanProperty
static readonly "LIT": $BooleanProperty
static readonly "WATERLOGGED": $BooleanProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(properties: $BlockBehaviour$Properties$Type)

public static "addCandleParticleAndSound"(level: $Level$Type, vec3: $Vec3$Type, random: $RandomSource$Type): void
public "getStateForPlacement"(context: $BlockPlaceContext$Type): $BlockState
public "setPlacedBy"(worldIn: $Level$Type, pos: $BlockPos$Type, state: $BlockState$Type, placer: $LivingEntity$Type, stack: $ItemStack$Type): void
public "neighborChanged"(state: $BlockState$Type, level: $Level$Type, pos: $BlockPos$Type, block: $Block$Type, fromPos: $BlockPos$Type, isMoving: boolean): void
public "use"(state: $BlockState$Type, worldIn: $Level$Type, pos: $BlockPos$Type, player: $Player$Type, handIn: $InteractionHand$Type, hit: $BlockHitResult$Type): $InteractionResult
public "hasAnalogOutputSignal"(state: $BlockState$Type): boolean
public "onRemove"(state: $BlockState$Type, world: $Level$Type, pos: $BlockPos$Type, newState: $BlockState$Type, isMoving: boolean): void
public "rotate"(state: $BlockState$Type, rot: $Rotation$Type): $BlockState
public "mirror"(state: $BlockState$Type, mirrorIn: $Mirror$Type): $BlockState
public "getAnalogOutputSignal"(blockState: $BlockState$Type, world: $Level$Type, pos: $BlockPos$Type): integer
public "getShape"(state: $BlockState$Type, world: $BlockGetter$Type, pos: $BlockPos$Type, context: $CollisionContext$Type): $VoxelShape
public "animateTick"(stateIn: $BlockState$Type, level: $Level$Type, pos: $BlockPos$Type, rand: $RandomSource$Type): void
public "newBlockEntity"(pPos: $BlockPos$Type, pState: $BlockState$Type): $BlockEntity
public "getTicker"<T extends $BlockEntity>(arg0: $Level$Type, arg1: $BlockState$Type, arg2: $BlockEntityType$Type<(T)>): $BlockEntityTicker<(T)>
public "getListener"<T extends $BlockEntity>(arg0: $ServerLevel$Type, arg1: T): $GameEventListener
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $StatueBlock$Type = ($StatueBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $StatueBlock_ = $StatueBlock$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/renderers/entities/funny/$JarredRenderer" {
import {$AbstractClientPlayer, $AbstractClientPlayer$Type} from "packages/net/minecraft/client/player/$AbstractClientPlayer"
import {$RenderLayer, $RenderLayer$Type} from "packages/net/minecraft/client/renderer/entity/layers/$RenderLayer"
import {$EntityRendererProvider$Context, $EntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRendererProvider$Context"
import {$LivingEntityRenderer, $LivingEntityRenderer$Type} from "packages/net/minecraft/client/renderer/entity/$LivingEntityRenderer"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$JarredModel, $JarredModel$Type} from "packages/net/mehvahdjukaar/supplementaries/client/renderers/entities/funny/$JarredModel"
import {$List, $List$Type} from "packages/java/util/$List"
import {$EntityModel, $EntityModel$Type} from "packages/net/minecraft/client/model/$EntityModel"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $JarredRenderer extends $LivingEntityRenderer<($AbstractClientPlayer), ($JarredModel<($AbstractClientPlayer)>)> {
static "INSTANCE": $JarredRenderer
 "model": M
 "layers": $List<($RenderLayer<(T), (M)>)>
 "shadowRadius": float

constructor(context: $EntityRendererProvider$Context$Type)

public "render"(player: $AbstractClientPlayer$Type, entityYaw: float, partialTicks: float, matrixStack: $PoseStack$Type, bufferSource: $MultiBufferSource$Type, packedLight: integer): void
public "getTextureLocation"(player: $AbstractClientPlayer$Type): $ResourceLocation
public "getRenderOffset"(player: $AbstractClientPlayer$Type, partialTicks: float): $Vec3
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $JarredRenderer$Type = ($JarredRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $JarredRenderer_ = $JarredRenderer$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/events/$MoonlightEventsHelper" {
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$SimpleEvent, $SimpleEvent$Type} from "packages/net/mehvahdjukaar/moonlight/api/events/$SimpleEvent"
import {$Class, $Class$Type} from "packages/java/lang/$Class"

export class $MoonlightEventsHelper {

constructor()

public static "postEvent"<T extends $SimpleEvent>(event: T, eventClass: $Class$Type<(T)>): void
public static "addListener"<T extends $SimpleEvent>(listener: $Consumer$Type<(T)>, eventClass: $Class$Type<(T)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MoonlightEventsHelper$Type = ($MoonlightEventsHelper);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MoonlightEventsHelper_ = $MoonlightEventsHelper$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/resources/pack/$DynResourceGenerator" {
import {$PreparableReloadListener, $PreparableReloadListener$Type} from "packages/net/minecraft/server/packs/resources/$PreparableReloadListener"
import {$CompletableFuture, $CompletableFuture$Type} from "packages/java/util/concurrent/$CompletableFuture"
import {$ResType, $ResType$Type} from "packages/net/mehvahdjukaar/moonlight/api/resources/$ResType"
import {$Executor, $Executor$Type} from "packages/java/util/concurrent/$Executor"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$ProfilerFiller, $ProfilerFiller$Type} from "packages/net/minecraft/util/profiling/$ProfilerFiller"
import {$DynamicResourcePack, $DynamicResourcePack$Type} from "packages/net/mehvahdjukaar/moonlight/api/resources/pack/$DynamicResourcePack"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$PreparableReloadListener$PreparationBarrier, $PreparableReloadListener$PreparationBarrier$Type} from "packages/net/minecraft/server/packs/resources/$PreparableReloadListener$PreparationBarrier"
import {$StaticResource, $StaticResource$Type} from "packages/net/mehvahdjukaar/moonlight/api/resources/$StaticResource"
import {$Logger, $Logger$Type} from "packages/org/apache/logging/log4j/$Logger"
import {$ResourceManager, $ResourceManager$Type} from "packages/net/minecraft/server/packs/resources/$ResourceManager"

export class $DynResourceGenerator<T extends $DynamicResourcePack> implements $PreparableReloadListener {
readonly "dynamicPack": T


public "register"(): void
public "getLogger"(): $Logger
public "getPack"(): T
public "reload"(stage: $PreparableReloadListener$PreparationBarrier$Type, manager: $ResourceManager$Type, workerProfiler: $ProfilerFiller$Type, mainProfiler: $ProfilerFiller$Type, workerExecutor: $Executor$Type, mainExecutor: $Executor$Type): $CompletableFuture<(void)>
public "addResourceIfNotPresent"(manager: $ResourceManager$Type, resource: $StaticResource$Type): void
public "dependsOnLoadedPacks"(): boolean
public "regenerateDynamicAssets"(arg0: $ResourceManager$Type): void
public "alreadyHasAssetAtLocation"(manager: $ResourceManager$Type, res: $ResourceLocation$Type, type: $ResType$Type): boolean
public "alreadyHasAssetAtLocation"(manager: $ResourceManager$Type, res: $ResourceLocation$Type): boolean
public "addSimilarJsonResource"(manager: $ResourceManager$Type, resource: $StaticResource$Type, textTransform: $Function$Type<(string), (string)>): void
public "addSimilarJsonResource"(manager: $ResourceManager$Type, resource: $StaticResource$Type, textTransform: $Function$Type<(string), (string)>, pathTransform: $Function$Type<(string), (string)>): void
public "addSimilarJsonResource"(manager: $ResourceManager$Type, resource: $StaticResource$Type, keyword: string, replaceWith: string): void
public "getName"(): string
get "logger"(): $Logger
get "pack"(): T
get "name"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DynResourceGenerator$Type<T> = ($DynResourceGenerator<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DynResourceGenerator_<T> = $DynResourceGenerator$Type<(T)>;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/network/$ServerBoundSetPresentPacket" {
import {$Message, $Message$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/network/$Message"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$ChannelHandler$Context, $ChannelHandler$Context$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/network/$ChannelHandler$Context"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $ServerBoundSetPresentPacket implements $Message {

constructor(buf: $FriendlyByteBuf$Type)
constructor(pos: $BlockPos$Type, packed: boolean, recipient: string, sender: string, description: string)

public "handle"(context: $ChannelHandler$Context$Type): void
public "writeToBuffer"(buf: $FriendlyByteBuf$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ServerBoundSetPresentPacket$Type = ($ServerBoundSetPresentPacket);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ServerBoundSetPresentPacket_ = $ServerBoundSetPresentPacket$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/client/renderers/$CandleSkullBlockTileRenderer" {
import {$BlockEntityRendererProvider$Context, $BlockEntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/blockentity/$BlockEntityRendererProvider$Context"
import {$CandleSkullBlockTile, $CandleSkullBlockTile$Type} from "packages/net/mehvahdjukaar/amendments/common/tile/$CandleSkullBlockTile"
import {$SkullWithWaxTileRenderer, $SkullWithWaxTileRenderer$Type} from "packages/net/mehvahdjukaar/amendments/client/renderers/$SkullWithWaxTileRenderer"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"

export class $CandleSkullBlockTileRenderer extends $SkullWithWaxTileRenderer<($CandleSkullBlockTile)> {

constructor(context: $BlockEntityRendererProvider$Context$Type)

public "render"(tile: $CandleSkullBlockTile$Type, pPartialTicks: float, poseStack: $PoseStack$Type, buffer: $MultiBufferSource$Type, pCombinedLight: integer, pCombinedOverlay: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CandleSkullBlockTileRenderer$Type = ($CandleSkullBlockTileRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CandleSkullBlockTileRenderer_ = $CandleSkullBlockTileRenderer$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$WindVaneBlockTile" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $WindVaneBlockTile extends $BlockEntity {
 "blockState": $BlockState

constructor(pos: $BlockPos$Type, state: $BlockState$Type)

public static "tick"(pLevel: $Level$Type, pPos: $BlockPos$Type, pState: $BlockState$Type, tile: $WindVaneBlockTile$Type): void
public "getYaw"(partialTicks: float): float
public "load"(compound: $CompoundTag$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WindVaneBlockTile$Type = ($WindVaneBlockTile);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WindVaneBlockTile_ = $WindVaneBlockTile$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/network/$ClientBoundSyncAntiqueInk" {
import {$Message, $Message$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/network/$Message"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$ChannelHandler$Context, $ChannelHandler$Context$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/network/$ChannelHandler$Context"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $ClientBoundSyncAntiqueInk implements $Message {
readonly "pos": $BlockPos
readonly "ink": boolean

constructor(buffer: $FriendlyByteBuf$Type)
constructor(pos: $BlockPos$Type, ink: boolean)

public "handle"(context: $ChannelHandler$Context$Type): void
public "writeToBuffer"(buf: $FriendlyByteBuf$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientBoundSyncAntiqueInk$Type = ($ClientBoundSyncAntiqueInk);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientBoundSyncAntiqueInk_ = $ClientBoundSyncAntiqueInk$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/renderers/tiles/$DoormatBlockTileRenderer" {
import {$BlockEntityRendererProvider$Context, $BlockEntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/blockentity/$BlockEntityRendererProvider$Context"
import {$DoormatBlockTile, $DoormatBlockTile$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$DoormatBlockTile"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$BlockEntityRenderer, $BlockEntityRenderer$Type} from "packages/net/minecraft/client/renderer/blockentity/$BlockEntityRenderer"

export class $DoormatBlockTileRenderer implements $BlockEntityRenderer<($DoormatBlockTile)> {
static readonly "LINE_SEPARATION": integer

constructor(context: $BlockEntityRendererProvider$Context$Type)

public "getViewDistance"(): integer
public "render"(tile: $DoormatBlockTile$Type, partialTicks: float, poseStack: $PoseStack$Type, bufferIn: $MultiBufferSource$Type, combinedLightIn: integer, combinedOverlayIn: integer): void
public "shouldRender"(arg0: $DoormatBlockTile$Type, arg1: $Vec3$Type): boolean
public "shouldRenderOffScreen"(arg0: $DoormatBlockTile$Type): boolean
get "viewDistance"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DoormatBlockTileRenderer$Type = ($DoormatBlockTileRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DoormatBlockTileRenderer_ = $DoormatBlockTileRenderer$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/dispenser/$KeyBehavior" {
import {$DispenserHelper$AdditionalDispenserBehavior, $DispenserHelper$AdditionalDispenserBehavior$Type} from "packages/net/mehvahdjukaar/moonlight/api/util/$DispenserHelper$AdditionalDispenserBehavior"
import {$BlockSource, $BlockSource$Type} from "packages/net/minecraft/core/$BlockSource"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $KeyBehavior extends $DispenserHelper$AdditionalDispenserBehavior {


public static "bootStrap"(): void
public static "setEntityPokingOutOfBlock"(arg0: $BlockSource$Type, arg1: $Entity$Type, arg2: $Direction$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $KeyBehavior$Type = ($KeyBehavior);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $KeyBehavior_ = $KeyBehavior$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/block/$IBeeGrowable" {
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export interface $IBeeGrowable {

 "getPollinated"(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type): boolean

(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type): boolean
}

export namespace $IBeeGrowable {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IBeeGrowable$Type = ($IBeeGrowable);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IBeeGrowable_ = $IBeeGrowable$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/api/platform/$ClientHelper$ParticleEvent" {
import {$ParticleType, $ParticleType$Type} from "packages/net/minecraft/core/particles/$ParticleType"
import {$ClientHelper$ParticleFactory, $ClientHelper$ParticleFactory$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/$ClientHelper$ParticleFactory"
import {$ParticleOptions, $ParticleOptions$Type} from "packages/net/minecraft/core/particles/$ParticleOptions"

export interface $ClientHelper$ParticleEvent {

 "register"<P extends $ParticleType<(T)>, T extends $ParticleOptions>(arg0: P, arg1: $ClientHelper$ParticleFactory$Type<(T)>): void

(arg0: P, arg1: $ClientHelper$ParticleFactory$Type<(T)>): void
}

export namespace $ClientHelper$ParticleEvent {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientHelper$ParticleEvent$Type = ($ClientHelper$ParticleEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientHelper$ParticleEvent_ = $ClientHelper$ParticleEvent$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/events/overrides/$WrenchBehavior" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$ItemUseOnBlockOverride, $ItemUseOnBlockOverride$Type} from "packages/net/mehvahdjukaar/supplementaries/common/events/overrides/$ItemUseOnBlockOverride"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export class $WrenchBehavior implements $ItemUseOnBlockOverride {


public "isEnabled"(): boolean
public "appliesToItem"(item: $Item$Type): boolean
public "altersWorld"(): boolean
public "tryPerformingAction"(world: $Level$Type, player: $Player$Type, hand: $InteractionHand$Type, stack: $ItemStack$Type, hit: $BlockHitResult$Type): $InteractionResult
public "getTooltip"(): $MutableComponent
public "placesBlock"(): boolean
public "shouldBlockMapToItem"(item: $Item$Type): boolean
get "enabled"(): boolean
get "tooltip"(): $MutableComponent
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WrenchBehavior$Type = ($WrenchBehavior);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WrenchBehavior_ = $WrenchBehavior$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/items/$InstrumentItem" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$InteractionResultHolder, $InteractionResultHolder$Type} from "packages/net/minecraft/world/$InteractionResultHolder"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$UseAnim, $UseAnim$Type} from "packages/net/minecraft/world/item/$UseAnim"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $InstrumentItem extends $Item {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any


public "spawnNoteParticle"(level: $Level$Type, entity: $LivingEntity$Type, note: integer): void
public "getUseDuration"(stack: $ItemStack$Type): integer
public "getVolume"(): float
public "onUseTick"(level: $Level$Type, entity: $LivingEntity$Type, stack: $ItemStack$Type, remainingUseDuration: integer): void
public "use"(world: $Level$Type, player: $Player$Type, hand: $InteractionHand$Type): $InteractionResultHolder<($ItemStack)>
public "releaseUsing"(pStack: $ItemStack$Type, pLevel: $Level$Type, entity: $LivingEntity$Type, pTimeCharged: integer): void
public "getUseAnimation"(pStack: $ItemStack$Type): $UseAnim
public "getPitch"(note: integer): float
public "getSound"(): $SoundEvent
get "volume"(): float
get "sound"(): $SoundEvent
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $InstrumentItem$Type = ($InstrumentItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $InstrumentItem_ = $InstrumentItem$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/network/$ClientReceivers" {
import {$ClientBoundSyncTradesPacket, $ClientBoundSyncTradesPacket$Type} from "packages/net/mehvahdjukaar/supplementaries/common/network/$ClientBoundSyncTradesPacket"
import {$ClientBoundPlaySongNotesPacket, $ClientBoundPlaySongNotesPacket$Type} from "packages/net/mehvahdjukaar/supplementaries/common/network/$ClientBoundPlaySongNotesPacket"
import {$ClientBoundPlaySpeakerMessagePacket, $ClientBoundPlaySpeakerMessagePacket$Type} from "packages/net/mehvahdjukaar/supplementaries/common/network/$ClientBoundPlaySpeakerMessagePacket"
import {$ClientBoundSendLoginPacket, $ClientBoundSendLoginPacket$Type} from "packages/net/mehvahdjukaar/supplementaries/common/network/$ClientBoundSendLoginPacket"
import {$SyncSkellyQuiverPacket, $SyncSkellyQuiverPacket$Type} from "packages/net/mehvahdjukaar/supplementaries/common/network/$SyncSkellyQuiverPacket"
import {$ClientBoundParticlePacket, $ClientBoundParticlePacket$Type} from "packages/net/mehvahdjukaar/supplementaries/common/network/$ClientBoundParticlePacket"
import {$ClientBoundSendKnockbackPacket, $ClientBoundSendKnockbackPacket$Type} from "packages/net/mehvahdjukaar/supplementaries/common/network/$ClientBoundSendKnockbackPacket"
import {$ClientBoundSyncAntiqueInk, $ClientBoundSyncAntiqueInk$Type} from "packages/net/mehvahdjukaar/supplementaries/common/network/$ClientBoundSyncAntiqueInk"

export class $ClientReceivers {

constructor()

public static "handleSpawnBlockParticlePacket"(message: $ClientBoundParticlePacket$Type): void
public static "handlePlaySongNotesPacket"(message: $ClientBoundPlaySongNotesPacket$Type): void
public static "handlePlaySpeakerMessagePacket"(message: $ClientBoundPlaySpeakerMessagePacket$Type): void
public static "handleSyncTradesPacket"(message: $ClientBoundSyncTradesPacket$Type): void
public static "handleSendBombKnockbackPacket"(message: $ClientBoundSendKnockbackPacket$Type): void
public static "handleSyncAntiqueInkPacket"(message: $ClientBoundSyncAntiqueInk$Type): void
public static "handleSyncQuiverPacket"(message: $SyncSkellyQuiverPacket$Type): void
public static "handleLoginPacket"(message: $ClientBoundSendLoginPacket$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientReceivers$Type = ($ClientReceivers);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientReceivers_ = $ClientReceivers$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/misc/map_markers/$ModMapMarkers" {
import {$NetherPortalMarker, $NetherPortalMarker$Type} from "packages/net/mehvahdjukaar/supplementaries/common/misc/map_markers/markers/$NetherPortalMarker"
import {$MapBlockMarker, $MapBlockMarker$Type} from "packages/net/mehvahdjukaar/moonlight/api/map/markers/$MapBlockMarker"
import {$BedMarker, $BedMarker$Type} from "packages/net/mehvahdjukaar/supplementaries/common/misc/map_markers/markers/$BedMarker"
import {$WaystoneMarker, $WaystoneMarker$Type} from "packages/net/mehvahdjukaar/supplementaries/common/misc/map_markers/markers/$WaystoneMarker"
import {$SignPostMarker, $SignPostMarker$Type} from "packages/net/mehvahdjukaar/supplementaries/common/misc/map_markers/markers/$SignPostMarker"
import {$BeaconMarker, $BeaconMarker$Type} from "packages/net/mehvahdjukaar/supplementaries/common/misc/map_markers/markers/$BeaconMarker"
import {$DataObjectReference, $DataObjectReference$Type} from "packages/net/mehvahdjukaar/moonlight/api/misc/$DataObjectReference"
import {$ColoredDecoration, $ColoredDecoration$Type} from "packages/net/mehvahdjukaar/supplementaries/common/misc/map_markers/$ColoredDecoration"
import {$CeilingBannerMarker, $CeilingBannerMarker$Type} from "packages/net/mehvahdjukaar/supplementaries/common/misc/map_markers/markers/$CeilingBannerMarker"
import {$CustomMapDecoration, $CustomMapDecoration$Type} from "packages/net/mehvahdjukaar/moonlight/api/map/$CustomMapDecoration"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$FlagMarker, $FlagMarker$Type} from "packages/net/mehvahdjukaar/supplementaries/common/misc/map_markers/markers/$FlagMarker"
import {$ChestMarker, $ChestMarker$Type} from "packages/net/mehvahdjukaar/supplementaries/common/misc/map_markers/markers/$ChestMarker"
import {$CustomDecorationType, $CustomDecorationType$Type} from "packages/net/mehvahdjukaar/moonlight/api/map/type/$CustomDecorationType"
import {$MapItemSavedData, $MapItemSavedData$Type} from "packages/net/minecraft/world/level/saveddata/maps/$MapItemSavedData"
import {$MapDecorationType, $MapDecorationType$Type} from "packages/net/mehvahdjukaar/moonlight/api/map/type/$MapDecorationType"

export class $ModMapMarkers {
static readonly "SIGN_POST_DECORATION_TYPE": $CustomDecorationType<($CustomMapDecoration), ($SignPostMarker)>
static readonly "BED_DECORATION_TYPE": $CustomDecorationType<($ColoredDecoration), ($BedMarker)>
static readonly "FLAG_DECORATION_TYPE": $CustomDecorationType<($ColoredDecoration), ($FlagMarker)>
static readonly "NETHER_PORTAL_DECORATION_TYPE": $CustomDecorationType<($CustomMapDecoration), ($NetherPortalMarker)>
static readonly "BEACON_DECORATION_TYPE": $CustomDecorationType<($CustomMapDecoration), ($BeaconMarker)>
static readonly "BANNER_DECORATION_TYPE": $CustomDecorationType<($ColoredDecoration), ($CeilingBannerMarker)>
static readonly "CHEST_DECORATION_TYPE": $CustomDecorationType<($CustomMapDecoration), ($ChestMarker)>
static readonly "WAYSTONE_DECORATION_TYPE": $CustomDecorationType<($CustomMapDecoration), ($WaystoneMarker)>
static readonly "DEATH_MARKER": $DataObjectReference<($MapDecorationType<(any), (any)>)>

constructor()

public static "init"(): void
public static "getForPlayer"(player: $Player$Type, mapId: integer, data: $MapItemSavedData$Type): $Set<($MapBlockMarker<(any)>)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModMapMarkers$Type = ($ModMapMarkers);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModMapMarkers_ = $ModMapMarkers$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/network/$ServerBoundSetSpeakerBlockPacket" {
import {$Message, $Message$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/network/$Message"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$ChannelHandler$Context, $ChannelHandler$Context$Type} from "packages/net/mehvahdjukaar/moonlight/api/platform/network/$ChannelHandler$Context"
import {$SpeakerBlockTile$Mode, $SpeakerBlockTile$Mode$Type} from "packages/net/mehvahdjukaar/supplementaries/common/block/tiles/$SpeakerBlockTile$Mode"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $ServerBoundSetSpeakerBlockPacket implements $Message {

constructor(buf: $FriendlyByteBuf$Type)
constructor(pos: $BlockPos$Type, str: string, mode: $SpeakerBlockTile$Mode$Type, volume: double)

public "handle"(context: $ChannelHandler$Context$Type): void
public "writeToBuffer"(buf: $FriendlyByteBuf$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ServerBoundSetSpeakerBlockPacket$Type = ($ServerBoundSetSpeakerBlockPacket);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ServerBoundSetSpeakerBlockPacket_ = $ServerBoundSetSpeakerBlockPacket$Type;
}}
declare module "packages/net/mehvahdjukaar/moonlight/core/mixins/compat/$PistonReactQuarkMixin" {
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$IMagnetMoveAction, $IMagnetMoveAction$Type} from "packages/org/violetmoon/quark/api/$IMagnetMoveAction"

export interface $PistonReactQuarkMixin extends $IMagnetMoveAction {

 "onMagnetMoved"(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $Direction$Type, arg3: $BlockState$Type, arg4: $BlockEntity$Type): void
 "canMagnetMove"(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $Direction$Type, arg3: $BlockState$Type, arg4: $BlockEntity$Type): boolean

(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $Direction$Type, arg3: $BlockState$Type, arg4: $BlockEntity$Type): void
}

export namespace $PistonReactQuarkMixin {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PistonReactQuarkMixin$Type = ($PistonReactQuarkMixin);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PistonReactQuarkMixin_ = $PistonReactQuarkMixin$Type;
}}
declare module "packages/net/mehvahdjukaar/amendments/common/recipe/$DummyContainer" {
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$Ingredient, $Ingredient$Type} from "packages/net/minecraft/world/item/crafting/$Ingredient"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$BlockContainerJS, $BlockContainerJS$Type} from "packages/dev/latvian/mods/kubejs/level/$BlockContainerJS"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$List, $List$Type} from "packages/java/util/$List"
import {$AbstractContainerMenu, $AbstractContainerMenu$Type} from "packages/net/minecraft/world/inventory/$AbstractContainerMenu"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$CraftingContainer, $CraftingContainer$Type} from "packages/net/minecraft/world/inventory/$CraftingContainer"
import {$StackedContents, $StackedContents$Type} from "packages/net/minecraft/world/entity/player/$StackedContents"

export class $DummyContainer implements $CraftingContainer {


public static "of"(items: $List$Type<($ItemStack$Type)>): $DummyContainer
public static "of"(...items: ($ItemStack$Type)[]): $DummyContainer
public "setChanged"(): void
public static "surround"(dye: $ItemStack$Type, toRecolor: $ItemStack$Type): $DummyContainer
public "getItems"(): $List<($ItemStack)>
public "getItem"(slot: integer): $ItemStack
public "getContainerSize"(): integer
public "removeItemNoUpdate"(slot: integer): $ItemStack
public "removeItem"(slot: integer, amount: integer): $ItemStack
public "clearContent"(): void
public "isEmpty"(): boolean
public "stillValid"(player: $Player$Type): boolean
public "getHeight"(): integer
public "getWidth"(): integer
public "fillStackedContents"(helper: $StackedContents$Type): void
public "setItem"(slot: integer, stack: $ItemStack$Type): void
public "getMenu"(): $AbstractContainerMenu
public "kjs$self"(): $Container
public "getBlock"(level: $Level$Type): $BlockContainerJS
public "startOpen"(arg0: $Player$Type): void
public "getMaxStackSize"(): integer
public "stopOpen"(arg0: $Player$Type): void
public static "stillValidBlockEntity"(arg0: $BlockEntity$Type, arg1: $Player$Type, arg2: integer): boolean
public "canPlaceItem"(arg0: integer, arg1: $ItemStack$Type): boolean
public "countItem"(arg0: $Item$Type): integer
public "canTakeItem"(arg0: $Container$Type, arg1: integer, arg2: $ItemStack$Type): boolean
public "hasAnyMatching"(arg0: $Predicate$Type<($ItemStack$Type)>): boolean
public "getSlots"(): integer
public "getStackInSlot"(slot: integer): $ItemStack
public "insertItem"(slot: integer, stack: $ItemStack$Type, simulate: boolean): $ItemStack
public static "stillValidBlockEntity"(arg0: $BlockEntity$Type, arg1: $Player$Type): boolean
public "isMutable"(): boolean
public "hasAnyOf"(arg0: $Set$Type<($Item$Type)>): boolean
public "setChanged"(): void
public "asContainer"(): $Container
public "getHeight"(): integer
public "extractItem"(slot: integer, amount: integer, simulate: boolean): $ItemStack
public "isItemValid"(slot: integer, stack: $ItemStack$Type): boolean
public "getWidth"(): integer
public "setStackInSlot"(slot: integer, stack: $ItemStack$Type): void
public "getSlotLimit"(slot: integer): integer
public "clear"(): void
public static "tryClear"(arg0: any): void
public "insertItem"(stack: $ItemStack$Type, simulate: boolean): $ItemStack
public "countNonEmpty"(ingredient: $Ingredient$Type): integer
public "countNonEmpty"(): integer
public "getAllItems"(): $List<($ItemStack)>
public "find"(ingredient: $Ingredient$Type): integer
public "find"(): integer
public "clear"(ingredient: $Ingredient$Type): void
public "count"(ingredient: $Ingredient$Type): integer
public "count"(): integer
public "isEmpty"(): boolean
get "items"(): $List<($ItemStack)>
get "containerSize"(): integer
get "empty"(): boolean
get "height"(): integer
get "width"(): integer
get "menu"(): $AbstractContainerMenu
get "maxStackSize"(): integer
get "slots"(): integer
get "mutable"(): boolean
get "height"(): integer
get "width"(): integer
get "allItems"(): $List<($ItemStack)>
get "empty"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DummyContainer$Type = ($DummyContainer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DummyContainer_ = $DummyContainer$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/integration/quark/$TaterInAJarTileRenderer" {
import {$TinyPotatoBlockEntity, $TinyPotatoBlockEntity$Type} from "packages/org/violetmoon/quark/addons/oddities/block/be/$TinyPotatoBlockEntity"
import {$BlockEntityRendererProvider$Context, $BlockEntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/blockentity/$BlockEntityRendererProvider$Context"
import {$TinyPotatoRenderer, $TinyPotatoRenderer$Type} from "packages/org/violetmoon/quark/addons/oddities/client/render/be/$TinyPotatoRenderer"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"

export class $TaterInAJarTileRenderer extends $TinyPotatoRenderer {
static readonly "DEFAULT": string
static readonly "HALLOWEEN": string
static readonly "ANGRY": string

constructor(ctx: $BlockEntityRendererProvider$Context$Type)

public "render"(potato: $TinyPotatoBlockEntity$Type, partialTicks: float, ms: $PoseStack$Type, buffers: $MultiBufferSource$Type, light: integer, overlay: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TaterInAJarTileRenderer$Type = ($TaterInAJarTileRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TaterInAJarTileRenderer_ = $TaterInAJarTileRenderer$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/common/block/dispenser/$DispenserBehaviorsManager" {
import {$RegistryAccess, $RegistryAccess$Type} from "packages/net/minecraft/core/$RegistryAccess"
import {$SoftFluid, $SoftFluid$Type} from "packages/net/mehvahdjukaar/moonlight/api/fluids/$SoftFluid"

export class $DispenserBehaviorsManager {

constructor()

public static "registerBehaviors"(registryAccess: $RegistryAccess$Type): void
public static "registerFluidBehavior"(f: $SoftFluid$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DispenserBehaviorsManager$Type = ($DispenserBehaviorsManager);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DispenserBehaviorsManager_ = $DispenserBehaviorsManager$Type;
}}
declare module "packages/net/mehvahdjukaar/supplementaries/client/particles/$RotationTrailEmitter" {
import {$NoRenderParticle, $NoRenderParticle$Type} from "packages/net/minecraft/client/particle/$NoRenderParticle"

export class $RotationTrailEmitter extends $NoRenderParticle {
 "x": double
 "y": double
 "z": double
 "xd": double
 "yd": double
 "zd": double
 "age": integer
 "rCol": float
 "gCol": float
 "bCol": float


public "tick"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RotationTrailEmitter$Type = ($RotationTrailEmitter);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RotationTrailEmitter_ = $RotationTrailEmitter$Type;
}}
