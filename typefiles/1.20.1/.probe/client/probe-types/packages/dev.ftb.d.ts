declare module "packages/dev/ftb/mods/ftbxmodcompat/ftbquests/filtering/$ItemFiltersSetup" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $ItemFiltersSetup {


public static "init"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ItemFiltersSetup$Type = ($ItemFiltersSetup);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ItemFiltersSetup_ = $ItemFiltersSetup$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/api/$FTBQuestsAPI" {
import {$FTBQuestsAPI$API, $FTBQuestsAPI$API$Type} from "packages/dev/ftb/mods/ftbquests/api/$FTBQuestsAPI$API"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $FTBQuestsAPI {
static readonly "MOD_ID": string
static readonly "MOD_NAME": string

constructor()

public static "rl"(path: string): $ResourceLocation
public static "api"(): $FTBQuestsAPI$API
public static "_init"(instance: $FTBQuestsAPI$API$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FTBQuestsAPI$Type = ($FTBQuestsAPI);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FTBQuestsAPI_ = $FTBQuestsAPI$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/net/$UpdateTaskProgressMessage" {
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$NetworkManager$PacketContext, $NetworkManager$PacketContext$Type} from "packages/dev/architectury/networking/$NetworkManager$PacketContext"
import {$BaseS2CMessage, $BaseS2CMessage$Type} from "packages/dev/architectury/networking/simple/$BaseS2CMessage"
import {$TeamData, $TeamData$Type} from "packages/dev/ftb/mods/ftbquests/quest/$TeamData"
import {$MessageType, $MessageType$Type} from "packages/dev/architectury/networking/simple/$MessageType"

export class $UpdateTaskProgressMessage extends $BaseS2CMessage {

constructor(buffer: $FriendlyByteBuf$Type)
constructor(teamData: $TeamData$Type, task: long, progress: long)

public "write"(buffer: $FriendlyByteBuf$Type): void
public "getType"(): $MessageType
public "handle"(context: $NetworkManager$PacketContext$Type): void
get "type"(): $MessageType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $UpdateTaskProgressMessage$Type = ($UpdateTaskProgressMessage);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $UpdateTaskProgressMessage_ = $UpdateTaskProgressMessage$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/integration/$RecipeModHelper$Components" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $RecipeModHelper$Components extends $Enum<($RecipeModHelper$Components)> {
static readonly "QUESTS": $RecipeModHelper$Components
static readonly "LOOT_CRATES": $RecipeModHelper$Components


public static "values"(): ($RecipeModHelper$Components)[]
public static "valueOf"(name: string): $RecipeModHelper$Components
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RecipeModHelper$Components$Type = (("quests") | ("loot_crates")) | ($RecipeModHelper$Components);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RecipeModHelper$Components_ = $RecipeModHelper$Components$Type;
}}
declare module "packages/dev/ftb/mods/ftbteams/api/property/$EnumProperty" {
import {$ConfigGroup, $ConfigGroup$Type} from "packages/dev/ftb/mods/ftblibrary/config/$ConfigGroup"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Tag, $Tag$Type} from "packages/net/minecraft/nbt/$Tag"
import {$TeamProperty, $TeamProperty$Type} from "packages/dev/ftb/mods/ftbteams/api/property/$TeamProperty"
import {$TeamPropertyValue, $TeamPropertyValue$Type} from "packages/dev/ftb/mods/ftbteams/api/property/$TeamPropertyValue"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$TeamPropertyType, $TeamPropertyType$Type} from "packages/dev/ftb/mods/ftbteams/api/property/$TeamPropertyType"
import {$NameMap, $NameMap$Type} from "packages/dev/ftb/mods/ftblibrary/config/$NameMap"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $EnumProperty extends $TeamProperty<(string)> {

constructor(id: $ResourceLocation$Type, def: $Supplier$Type<(string)>, values: $List$Type<(string)>, names: $Map$Type<(string), ($Component$Type)>)
constructor<T>(id: $ResourceLocation$Type, nameMap: $NameMap$Type<(T)>)

public "write"(buf: $FriendlyByteBuf$Type): void
public "getType"(): $TeamPropertyType<(string)>
public "config"(config: $ConfigGroup$Type, value: $TeamPropertyValue$Type<(string)>): void
public "fromString"(string: string): $Optional<(string)>
public "fromNBT"(tag: $Tag$Type): $Optional<(string)>
public "toNBT"(value: string): $Tag
get "type"(): $TeamPropertyType<(string)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EnumProperty$Type = ($EnumProperty);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EnumProperty_ = $EnumProperty$Type;
}}
declare module "packages/dev/ftb/mods/ftbxmodcompat/ftbquests/kubejs/$KubeJSIntegration" {
import {$AttachedData, $AttachedData$Type} from "packages/dev/latvian/mods/kubejs/util/$AttachedData"
import {$CustomTaskEvent, $CustomTaskEvent$Type} from "packages/dev/ftb/mods/ftbquests/events/$CustomTaskEvent"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$KubeJSPlugin, $KubeJSPlugin$Type} from "packages/dev/latvian/mods/kubejs/$KubeJSPlugin"
import {$BindingsEvent, $BindingsEvent$Type} from "packages/dev/latvian/mods/kubejs/script/$BindingsEvent"
import {$CustomRewardEvent, $CustomRewardEvent$Type} from "packages/dev/ftb/mods/ftbquests/events/$CustomRewardEvent"
import {$ObjectStartedEvent, $ObjectStartedEvent$Type} from "packages/dev/ftb/mods/ftbquests/events/$ObjectStartedEvent"
import {$EventResult, $EventResult$Type} from "packages/dev/architectury/event/$EventResult"
import {$ObjectCompletedEvent, $ObjectCompletedEvent$Type} from "packages/dev/ftb/mods/ftbquests/events/$ObjectCompletedEvent"

export class $KubeJSIntegration extends $KubeJSPlugin {

constructor()

public "init"(): void
public "registerBindings"(event: $BindingsEvent$Type): void
public "registerEvents"(): void
public "attachPlayerData"(event: $AttachedData$Type<($Player$Type)>): void
public static "onCustomTask"(event: $CustomTaskEvent$Type): $EventResult
public static "onCustomReward"(event: $CustomRewardEvent$Type): $EventResult
public static "onCompleted"(event: $ObjectCompletedEvent$Type<(any)>): $EventResult
public static "onStarted"(event: $ObjectStartedEvent$Type<(any)>): $EventResult
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $KubeJSIntegration$Type = ($KubeJSIntegration);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $KubeJSIntegration_ = $KubeJSIntegration$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/core/mixin/common/$MultilineTextFieldAccess" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $MultilineTextFieldAccess {

 "setSelectCursor"(arg0: integer): void

(arg0: integer): void
}

export namespace $MultilineTextFieldAccess {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MultilineTextFieldAccess$Type = ($MultilineTextFieldAccess);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MultilineTextFieldAccess_ = $MultilineTextFieldAccess$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/client/gui/quests/$OpenShopButton" {
import {$Panel, $Panel$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Panel"
import {$TabButton, $TabButton$Type} from "packages/dev/ftb/mods/ftbquests/client/gui/quests/$TabButton"
import {$MouseButton, $MouseButton$Type} from "packages/dev/ftb/mods/ftblibrary/ui/input/$MouseButton"
import {$TooltipList, $TooltipList$Type} from "packages/dev/ftb/mods/ftblibrary/util/$TooltipList"

export class $OpenShopButton extends $TabButton {
 "posX": integer
 "posY": integer
 "width": integer
 "height": integer

constructor(panel: $Panel$Type)

public "addMouseOverText"(list: $TooltipList$Type): void
public "onClicked"(button: $MouseButton$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $OpenShopButton$Type = ($OpenShopButton);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $OpenShopButton_ = $OpenShopButton$Type;
}}
declare module "packages/dev/ftb/mods/ftbxmodcompat/ftbchunks/ftbessentials/$EssentialsCompat" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $EssentialsCompat {

constructor()

public static "init"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EssentialsCompat$Type = ($EssentialsCompat);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EssentialsCompat_ = $EssentialsCompat$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/client/gui/quests/$QuestScreen$PersistedData" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $QuestScreen$PersistedData {


}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $QuestScreen$PersistedData$Type = ($QuestScreen$PersistedData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $QuestScreen$PersistedData_ = $QuestScreen$PersistedData$Type;
}}
declare module "packages/dev/ftb/mods/ftbteams/net/$SyncMessageHistoryMessage" {
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$NetworkManager$PacketContext, $NetworkManager$PacketContext$Type} from "packages/dev/architectury/networking/$NetworkManager$PacketContext"
import {$BaseS2CMessage, $BaseS2CMessage$Type} from "packages/dev/architectury/networking/simple/$BaseS2CMessage"
import {$Team, $Team$Type} from "packages/dev/ftb/mods/ftbteams/api/$Team"
import {$MessageType, $MessageType$Type} from "packages/dev/architectury/networking/simple/$MessageType"

export class $SyncMessageHistoryMessage extends $BaseS2CMessage {

constructor(buf: $FriendlyByteBuf$Type)
constructor(team: $Team$Type)

public "write"(buf: $FriendlyByteBuf$Type): void
public "getType"(): $MessageType
public "handle"(context: $NetworkManager$PacketContext$Type): void
get "type"(): $MessageType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SyncMessageHistoryMessage$Type = ($SyncMessageHistoryMessage);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SyncMessageHistoryMessage_ = $SyncMessageHistoryMessage$Type;
}}
declare module "packages/dev/ftb/mods/ftbxmodcompat/config/$FTBXModConfig" {
import {$SNBTConfig, $SNBTConfig$Type} from "packages/dev/ftb/mods/ftblibrary/snbt/config/$SNBTConfig"
import {$EnumValue, $EnumValue$Type} from "packages/dev/ftb/mods/ftblibrary/snbt/config/$EnumValue"
import {$FTBXModConfig$StageSelector, $FTBXModConfig$StageSelector$Type} from "packages/dev/ftb/mods/ftbxmodcompat/config/$FTBXModConfig$StageSelector"
import {$FTBXModConfig$PermSelector, $FTBXModConfig$PermSelector$Type} from "packages/dev/ftb/mods/ftbxmodcompat/config/$FTBXModConfig$PermSelector"

export interface $FTBXModConfig {

}

export namespace $FTBXModConfig {
const CONFIG: $SNBTConfig
const STAGE_SELECTOR: $EnumValue<($FTBXModConfig$StageSelector)>
const PERMISSION_SELECTOR: $EnumValue<($FTBXModConfig$PermSelector)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FTBXModConfig$Type = ($FTBXModConfig);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FTBXModConfig_ = $FTBXModConfig$Type;
}}
declare module "packages/dev/ftb/mods/ftbxmodcompat/ftbquests/recipemod_common/$ItemStackToListCache" {
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export class $ItemStackToListCache<T> {

constructor()

public "clear"(): void
public "getList"(stack: $ItemStack$Type, toCompute: $Function$Type<($ItemStack$Type), ($List$Type<(T)>)>): $List<(T)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ItemStackToListCache$Type<T> = ($ItemStackToListCache<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ItemStackToListCache_<T> = $ItemStackToListCache$Type<(T)>;
}}
declare module "packages/dev/ftb/mods/ftblibrary/$FTBLibraryCommon" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $FTBLibraryCommon {

constructor()

public "init"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FTBLibraryCommon$Type = ($FTBLibraryCommon);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FTBLibraryCommon_ = $FTBLibraryCommon$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/util/$ConfigQuestObject" {
import {$QuestObjectBase, $QuestObjectBase$Type} from "packages/dev/ftb/mods/ftbquests/quest/$QuestObjectBase"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$Widget, $Widget$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Widget"
import {$ConfigCallback, $ConfigCallback$Type} from "packages/dev/ftb/mods/ftblibrary/config/$ConfigCallback"
import {$ConfigValue, $ConfigValue$Type} from "packages/dev/ftb/mods/ftblibrary/config/$ConfigValue"
import {$MouseButton, $MouseButton$Type} from "packages/dev/ftb/mods/ftblibrary/ui/input/$MouseButton"
import {$TooltipList, $TooltipList$Type} from "packages/dev/ftb/mods/ftblibrary/util/$TooltipList"

export class $ConfigQuestObject<T extends $QuestObjectBase> extends $ConfigValue<(T)> {
readonly "predicate": $Predicate<($QuestObjectBase)>
static readonly "NULL_TEXT": $Component
 "id": string

constructor(t: $Predicate$Type<($QuestObjectBase$Type)>)

public "getStringForGUI"(value: $QuestObjectBase$Type): $Component
public "addInfo"(list: $TooltipList$Type): void
public "onClicked"(clickedWidget: $Widget$Type, button: $MouseButton$Type, callback: $ConfigCallback$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ConfigQuestObject$Type<T> = ($ConfigQuestObject<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ConfigQuestObject_<T> = $ConfigQuestObject$Type<(T)>;
}}
declare module "packages/dev/ftb/mods/ftblibrary/icon/$FaceIcon" {
import {$Icon, $Icon$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Icon"
import {$GameProfile, $GameProfile$Type} from "packages/com/mojang/authlib/$GameProfile"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $FaceIcon extends $Icon {
readonly "profile": $GameProfile
 "skin": $Icon
 "head": $Icon
 "hat": $Icon


public "draw"(poseStack: $GuiGraphics$Type, x: integer, y: integer, w: integer, h: integer): void
public static "getFace"(profile: $GameProfile$Type): $FaceIcon
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FaceIcon$Type = ($FaceIcon);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FaceIcon_ = $FaceIcon$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/item/$LootCrateItem" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$LootCrate, $LootCrate$Type} from "packages/dev/ftb/mods/ftbquests/quest/loot/$LootCrate"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Rarity, $Rarity$Type} from "packages/net/minecraft/world/item/$Rarity"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$InteractionResultHolder, $InteractionResultHolder$Type} from "packages/net/minecraft/world/$InteractionResultHolder"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $LootCrateItem extends $Item {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor()

public static "getCrate"(stack: $ItemStack$Type): $LootCrate
public "use"(world: $Level$Type, player: $Player$Type, hand: $InteractionHand$Type): $InteractionResultHolder<($ItemStack)>
public "getName"(stack: $ItemStack$Type): $Component
public "isFoil"(stack: $ItemStack$Type): boolean
public "getRarity"(stack: $ItemStack$Type): $Rarity
public "appendHoverText"(stack: $ItemStack$Type, world: $Level$Type, tooltip: $List$Type<($Component$Type)>, flag: $TooltipFlag$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LootCrateItem$Type = ($LootCrateItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LootCrateItem_ = $LootCrateItem$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/snbt/$SNBTSyntaxException" {
import {$IllegalStateException, $IllegalStateException$Type} from "packages/java/lang/$IllegalStateException"

export class $SNBTSyntaxException extends $IllegalStateException {

constructor(s: string)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SNBTSyntaxException$Type = ($SNBTSyntaxException);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SNBTSyntaxException_ = $SNBTSyntaxException$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/snbt/$SNBTCompoundTag" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$TagType, $TagType$Type} from "packages/net/minecraft/nbt/$TagType"
import {$Tag, $Tag$Type} from "packages/net/minecraft/nbt/$Tag"
import {$ListTag, $ListTag$Type} from "packages/net/minecraft/nbt/$ListTag"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$Codec, $Codec$Type} from "packages/com/mojang/serialization/$Codec"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $SNBTCompoundTag extends $CompoundTag {
static readonly "CODEC": $Codec<($CompoundTag)>
static readonly "TYPE": $TagType<($CompoundTag)>
readonly "tags": $Map<(string), ($Tag)>

constructor()

public static "of"(tag: $Tag$Type): $SNBTCompoundTag
public "comment"(key: string, ...comment: (string)[]): void
public "comment"(key: string, comment: string): void
public "getComment"(key: string): string
public "putNull"(key: string): void
public "getList"<T extends $Tag>(key: string, type: $Class$Type<(T)>): $List<(T)>
public "isBoolean"(key: string): boolean
public "getCompound"(string: string): $SNBTCompoundTag
public "putBoolean"(key: string, value: boolean): void
public "getNullableList"(key: string, type: byte): $ListTag
public "putNumber"(key: string, number: number): void
public "singleLine"(): void
public "singleLine"(key: string): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SNBTCompoundTag$Type = ($SNBTCompoundTag);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SNBTCompoundTag_ = $SNBTCompoundTag$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/client/gui/$ContextMenuBuilder" {
import {$QuestObjectBase, $QuestObjectBase$Type} from "packages/dev/ftb/mods/ftbquests/quest/$QuestObjectBase"
import {$QuestScreen, $QuestScreen$Type} from "packages/dev/ftb/mods/ftbquests/client/gui/quests/$QuestScreen"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$ContextMenuItem, $ContextMenuItem$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$ContextMenuItem"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Movable, $Movable$Type} from "packages/dev/ftb/mods/ftbquests/quest/$Movable"
import {$BaseScreen, $BaseScreen$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$BaseScreen"

export class $ContextMenuBuilder {


public "withDeletionFocus"(m: $Movable$Type): $ContextMenuBuilder
public "insertAtTop"(toAdd: $Collection$Type<($ContextMenuItem$Type)>): $ContextMenuBuilder
public static "create"(object: $QuestObjectBase$Type, screen: $QuestScreen$Type): $ContextMenuBuilder
public "build"(gui: $BaseScreen$Type): $List<($ContextMenuItem)>
public "openContextMenu"(gui: $BaseScreen$Type): void
public "insertAtBottom"(toAdd: $Collection$Type<($ContextMenuItem$Type)>): $ContextMenuBuilder
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ContextMenuBuilder$Type = ($ContextMenuBuilder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ContextMenuBuilder_ = $ContextMenuBuilder$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/ui/misc/$KeyReferenceScreen" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Theme, $Theme$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Theme"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$BaseScreen, $BaseScreen$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$BaseScreen"

export class $KeyReferenceScreen extends $BaseScreen {
 "posX": integer
 "posY": integer
 "width": integer
 "height": integer

constructor(...translationKeys: (string)[])

public "alignWidgets"(): void
public "addWidgets"(): void
public "getTheme"(): $Theme
public "onInit"(): boolean
public "getTitle"(): $Component
public "drawBackground"(graphics: $GuiGraphics$Type, theme: $Theme$Type, x: integer, y: integer, w: integer, h: integer): void
get "theme"(): $Theme
get "title"(): $Component
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $KeyReferenceScreen$Type = ($KeyReferenceScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $KeyReferenceScreen_ = $KeyReferenceScreen$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/sidebar/$SidebarButtonManager" {
import {$CompletableFuture, $CompletableFuture$Type} from "packages/java/util/concurrent/$CompletableFuture"
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$PreparableReloadListener$PreparationBarrier, $PreparableReloadListener$PreparationBarrier$Type} from "packages/net/minecraft/server/packs/resources/$PreparableReloadListener$PreparationBarrier"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ResourceManagerReloadListener, $ResourceManagerReloadListener$Type} from "packages/net/minecraft/server/packs/resources/$ResourceManagerReloadListener"
import {$Executor, $Executor$Type} from "packages/java/util/concurrent/$Executor"
import {$ResourceManager, $ResourceManager$Type} from "packages/net/minecraft/server/packs/resources/$ResourceManager"
import {$ProfilerFiller, $ProfilerFiller$Type} from "packages/net/minecraft/util/profiling/$ProfilerFiller"
import {$SidebarButtonGroup, $SidebarButtonGroup$Type} from "packages/dev/ftb/mods/ftblibrary/sidebar/$SidebarButtonGroup"

export class $SidebarButtonManager extends $Enum<($SidebarButtonManager)> implements $ResourceManagerReloadListener {
static readonly "INSTANCE": $SidebarButtonManager


public static "values"(): ($SidebarButtonManager)[]
public static "valueOf"(name: string): $SidebarButtonManager
public "saveConfig"(): void
public "onResourceManagerReload"(manager: $ResourceManager$Type): void
public "getGroups"(): $List<($SidebarButtonGroup)>
public "reload"(arg0: $PreparableReloadListener$PreparationBarrier$Type, arg1: $ResourceManager$Type, arg2: $ProfilerFiller$Type, arg3: $ProfilerFiller$Type, arg4: $Executor$Type, arg5: $Executor$Type): $CompletableFuture<(void)>
public "getName"(): string
get "groups"(): $List<($SidebarButtonGroup)>
get "name"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SidebarButtonManager$Type = (("instance")) | ($SidebarButtonManager);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SidebarButtonManager_ = $SidebarButtonManager$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/quest/reward/$XPReward" {
import {$Quest, $Quest$Type} from "packages/dev/ftb/mods/ftbquests/quest/$Quest"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$ConfigGroup, $ConfigGroup$Type} from "packages/dev/ftb/mods/ftblibrary/config/$ConfigGroup"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$Reward, $Reward$Type} from "packages/dev/ftb/mods/ftbquests/quest/reward/$Reward"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$RewardType, $RewardType$Type} from "packages/dev/ftb/mods/ftbquests/quest/reward/$RewardType"

export class $XPReward extends $Reward {
readonly "id": long

constructor(id: long, quest: $Quest$Type, xp: integer)
constructor(id: long, quest: $Quest$Type)

public "getType"(): $RewardType
public "getButtonText"(): string
public "claim"(player: $ServerPlayer$Type, notify: boolean): void
public "readData"(nbt: $CompoundTag$Type): void
public "getAltTitle"(): $MutableComponent
public "writeNetData"(buffer: $FriendlyByteBuf$Type): void
public "writeData"(nbt: $CompoundTag$Type): void
public "fillConfigGroup"(config: $ConfigGroup$Type): void
public "readNetData"(buffer: $FriendlyByteBuf$Type): void
get "type"(): $RewardType
get "buttonText"(): string
get "altTitle"(): $MutableComponent
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $XPReward$Type = ($XPReward);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $XPReward_ = $XPReward$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/math/$XZ" {
import {$ChunkPos, $ChunkPos$Type} from "packages/net/minecraft/world/level/$ChunkPos"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$Vec3i, $Vec3i$Type} from "packages/net/minecraft/core/$Vec3i"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ResourceKey, $ResourceKey$Type} from "packages/net/minecraft/resources/$ResourceKey"
import {$ChunkDimPos, $ChunkDimPos$Type} from "packages/dev/ftb/mods/ftblibrary/math/$ChunkDimPos"

export class $XZ extends $Record {

constructor(x: integer, z: integer)

public "equals"(o: any): boolean
public "toString"(): string
public "hashCode"(): integer
public static "of"(singleLong: long): $XZ
public static "of"(pos: $ChunkPos$Type): $XZ
public static "of"(x: integer, z: integer): $XZ
public "offset"(ox: integer, oz: integer): $XZ
public "x"(): integer
public "z"(): integer
public "dim"(type: $ResourceKey$Type<($Level$Type)>): $ChunkDimPos
public "dim"(world: $Level$Type): $ChunkDimPos
public "toLong"(): long
public "toRegionString"(): string
public static "regionFromChunk"(x: integer, z: integer): $XZ
public static "regionFromChunk"(p: $ChunkPos$Type): $XZ
public static "chunkFromBlock"(pos: $Vec3i$Type): $XZ
public static "chunkFromBlock"(x: integer, z: integer): $XZ
public static "regionFromBlock"(x: integer, z: integer): $XZ
public static "regionFromBlock"(pos: $Vec3i$Type): $XZ
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $XZ$Type = ($XZ);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $XZ_ = $XZ$Type;
}}
declare module "packages/dev/ftb/mods/ftbteams/api/event/$PlayerLoggedInAfterTeamEvent" {
import {$TeamEvent, $TeamEvent$Type} from "packages/dev/ftb/mods/ftbteams/api/event/$TeamEvent"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$PlayerChangedTeamEvent, $PlayerChangedTeamEvent$Type} from "packages/dev/ftb/mods/ftbteams/api/event/$PlayerChangedTeamEvent"
import {$Event, $Event$Type} from "packages/dev/architectury/event/$Event"
import {$PlayerJoinedPartyTeamEvent, $PlayerJoinedPartyTeamEvent$Type} from "packages/dev/ftb/mods/ftbteams/api/event/$PlayerJoinedPartyTeamEvent"
import {$TeamPropertiesChangedEvent, $TeamPropertiesChangedEvent$Type} from "packages/dev/ftb/mods/ftbteams/api/event/$TeamPropertiesChangedEvent"
import {$TeamAllyEvent, $TeamAllyEvent$Type} from "packages/dev/ftb/mods/ftbteams/api/event/$TeamAllyEvent"
import {$PlayerLeftPartyTeamEvent, $PlayerLeftPartyTeamEvent$Type} from "packages/dev/ftb/mods/ftbteams/api/event/$PlayerLeftPartyTeamEvent"
import {$TeamCreatedEvent, $TeamCreatedEvent$Type} from "packages/dev/ftb/mods/ftbteams/api/event/$TeamCreatedEvent"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$TeamInfoEvent, $TeamInfoEvent$Type} from "packages/dev/ftb/mods/ftbteams/api/event/$TeamInfoEvent"
import {$PlayerTransferredTeamOwnershipEvent, $PlayerTransferredTeamOwnershipEvent$Type} from "packages/dev/ftb/mods/ftbteams/api/event/$PlayerTransferredTeamOwnershipEvent"
import {$TeamCollectPropertiesEvent, $TeamCollectPropertiesEvent$Type} from "packages/dev/ftb/mods/ftbteams/api/event/$TeamCollectPropertiesEvent"
import {$ClientTeamPropertiesChangedEvent, $ClientTeamPropertiesChangedEvent$Type} from "packages/dev/ftb/mods/ftbteams/api/event/$ClientTeamPropertiesChangedEvent"
import {$Team, $Team$Type} from "packages/dev/ftb/mods/ftbteams/api/$Team"

export class $PlayerLoggedInAfterTeamEvent extends $TeamEvent {
static readonly "CREATED": $Event<($Consumer<($TeamCreatedEvent)>)>
static readonly "LOADED": $Event<($Consumer<($TeamEvent)>)>
static readonly "SAVED": $Event<($Consumer<($TeamEvent)>)>
static readonly "DELETED": $Event<($Consumer<($TeamEvent)>)>
static readonly "PLAYER_LOGGED_IN": $Event<($Consumer<($PlayerLoggedInAfterTeamEvent)>)>
static readonly "OWNERSHIP_TRANSFERRED": $Event<($Consumer<($PlayerTransferredTeamOwnershipEvent)>)>
static readonly "COLLECT_PROPERTIES": $Event<($Consumer<($TeamCollectPropertiesEvent)>)>
static readonly "PROPERTIES_CHANGED": $Event<($Consumer<($TeamPropertiesChangedEvent)>)>
static readonly "PLAYER_CHANGED": $Event<($Consumer<($PlayerChangedTeamEvent)>)>
static readonly "PLAYER_JOINED_PARTY": $Event<($Consumer<($PlayerJoinedPartyTeamEvent)>)>
static readonly "PLAYER_LEFT_PARTY": $Event<($Consumer<($PlayerLeftPartyTeamEvent)>)>
static readonly "INFO": $Event<($Consumer<($TeamInfoEvent)>)>
static readonly "ADD_ALLY": $Event<($Consumer<($TeamAllyEvent)>)>
static readonly "REMOVE_ALLY": $Event<($Consumer<($TeamAllyEvent)>)>
static readonly "CLIENT_PROPERTIES_CHANGED": $Event<($Consumer<($ClientTeamPropertiesChangedEvent)>)>

constructor(t: $Team$Type, p: $ServerPlayer$Type)

public "getPlayer"(): $ServerPlayer
get "player"(): $ServerPlayer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PlayerLoggedInAfterTeamEvent$Type = ($PlayerLoggedInAfterTeamEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PlayerLoggedInAfterTeamEvent_ = $PlayerLoggedInAfterTeamEvent$Type;
}}
declare module "packages/dev/ftb/mods/ftbteams/data/$AbstractTeamBase" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Color4I, $Color4I$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Color4I"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$TeamRank, $TeamRank$Type} from "packages/dev/ftb/mods/ftbteams/api/$TeamRank"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$TeamType, $TeamType$Type} from "packages/dev/ftb/mods/ftbteams/data/$TeamType"
import {$TeamMessage, $TeamMessage$Type} from "packages/dev/ftb/mods/ftbteams/api/$TeamMessage"
import {$TeamProperty, $TeamProperty$Type} from "packages/dev/ftb/mods/ftbteams/api/property/$TeamProperty"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$List, $List$Type} from "packages/java/util/$List"
import {$TeamPropertyCollection, $TeamPropertyCollection$Type} from "packages/dev/ftb/mods/ftbteams/api/property/$TeamPropertyCollection"
import {$Team, $Team$Type} from "packages/dev/ftb/mods/ftbteams/api/$Team"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $AbstractTeamBase implements $Team {

constructor(id: $UUID$Type)

public "getName"(): $Component
public "getProperty"<T>(property: $TeamProperty$Type<(T)>): T
public "equals"(o: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "setProperty"<T>(property: $TeamProperty$Type<(T)>, value: T): void
public "getProperties"(): $TeamPropertyCollection
public "getId"(): $UUID
public "getType"(): $TeamType
public "getMembers"(): $Set<($UUID)>
public "getDisplayName"(): string
public "isValid"(): boolean
public "getDescription"(): string
public "getMaxMessageHistorySize"(): integer
public "addMessage"(message: $TeamMessage$Type): void
public "removeMember"(id: $UUID$Type): void
public "getRankForPlayer"(playerId: $UUID$Type): $TeamRank
public "getExtraData"(): $CompoundTag
public "isOfficerOrBetter"(profile: $UUID$Type): boolean
public "getTypeTranslationKey"(): string
public "isMember"(uuid: $UUID$Type): boolean
public "addMember"(id: $UUID$Type, rank: $TeamRank$Type): void
public "markDirty"(): void
public "isFreeToJoin"(): boolean
public "isAllyOrBetter"(profile: $UUID$Type): boolean
public "invalidateTeam"(): void
public "addMessages"(messages: $Collection$Type<($TeamMessage$Type)>): void
public "isInvited"(profile: $UUID$Type): boolean
public "createParty"(description: string, color: $Color4I$Type): $Team
public "getColor"(): integer
public "getMessageHistory"(): $List<($TeamMessage)>
public "getTeamId"(): $UUID
public "getPlayersByRank"(minRank: $TeamRank$Type): $Map<($UUID), ($TeamRank)>
public "getColoredName"(): $Component
public "getShortName"(): string
public "getOwner"(): $UUID
public "sendMessage"(arg0: $UUID$Type, arg1: string): void
public "isPartyTeam"(): boolean
public "getOnlineMembers"(): $Collection<($ServerPlayer)>
public "isPlayerTeam"(): boolean
public "getTeamInfo"(): $List<($Component)>
public "isServerTeam"(): boolean
public "isClientTeam"(): boolean
get "name"(): $Component
get "properties"(): $TeamPropertyCollection
get "id"(): $UUID
get "type"(): $TeamType
get "members"(): $Set<($UUID)>
get "displayName"(): string
get "valid"(): boolean
get "description"(): string
get "maxMessageHistorySize"(): integer
get "extraData"(): $CompoundTag
get "typeTranslationKey"(): string
get "freeToJoin"(): boolean
get "color"(): integer
get "messageHistory"(): $List<($TeamMessage)>
get "teamId"(): $UUID
get "coloredName"(): $Component
get "shortName"(): string
get "owner"(): $UUID
get "partyTeam"(): boolean
get "onlineMembers"(): $Collection<($ServerPlayer)>
get "playerTeam"(): boolean
get "teamInfo"(): $List<($Component)>
get "serverTeam"(): boolean
get "clientTeam"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AbstractTeamBase$Type = ($AbstractTeamBase);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AbstractTeamBase_ = $AbstractTeamBase$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/net/$CreateObjectMessage" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$QuestObjectBase, $QuestObjectBase$Type} from "packages/dev/ftb/mods/ftbquests/quest/$QuestObjectBase"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$NetworkManager$PacketContext, $NetworkManager$PacketContext$Type} from "packages/dev/architectury/networking/$NetworkManager$PacketContext"
import {$BaseC2SMessage, $BaseC2SMessage$Type} from "packages/dev/architectury/networking/simple/$BaseC2SMessage"
import {$MessageType, $MessageType$Type} from "packages/dev/architectury/networking/simple/$MessageType"

export class $CreateObjectMessage extends $BaseC2SMessage {

constructor(o: $QuestObjectBase$Type, e: $CompoundTag$Type)
constructor(o: $QuestObjectBase$Type, e: $CompoundTag$Type, openScreen: boolean)

public "write"(buffer: $FriendlyByteBuf$Type): void
public "getType"(): $MessageType
public "handle"(context: $NetworkManager$PacketContext$Type): void
get "type"(): $MessageType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CreateObjectMessage$Type = ($CreateObjectMessage);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CreateObjectMessage_ = $CreateObjectMessage$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/ui/$ScrollBar" {
import {$Panel, $Panel$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Panel"
import {$Widget, $Widget$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Widget"
import {$Theme, $Theme$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Theme"
import {$MouseButton, $MouseButton$Type} from "packages/dev/ftb/mods/ftblibrary/ui/input/$MouseButton"
import {$ScrollBar$Plane, $ScrollBar$Plane$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$ScrollBar$Plane"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$TooltipList, $TooltipList$Type} from "packages/dev/ftb/mods/ftblibrary/util/$TooltipList"

export class $ScrollBar extends $Widget {
 "posX": integer
 "posY": integer
 "width": integer
 "height": integer

constructor(parent: $Panel$Type, p: $ScrollBar$Plane$Type, ss: integer)

public "getValue"(): double
public "setValue"(v: double): void
public "getMappedValue"(max: double): double
public "getScrollStep"(): double
public "setScrollStep"(s: double): void
public "draw"(graphics: $GuiGraphics$Type, theme: $Theme$Type, x: integer, y: integer, w: integer, h: integer): void
public "mousePressed"(button: $MouseButton$Type): boolean
public "addMouseOverText"(list: $TooltipList$Type): void
public "onMoved"(): void
public "canMouseScrollPlane"(): boolean
public "setCanAlwaysScrollPlane"(v: boolean): void
public "showValueOnMouseOver"(): boolean
public "setMinValue"(min: double): void
public "setMaxValue"(max: double): void
public "getMinValue"(): double
public "getMaxValue"(): double
public "drawBackground"(graphics: $GuiGraphics$Type, theme: $Theme$Type, x: integer, y: integer, w: integer, h: integer): void
public "getScrollBarSize"(): integer
public "canMouseScroll"(): boolean
public "drawScrollBar"(graphics: $GuiGraphics$Type, theme: $Theme$Type, x: integer, y: integer, w: integer, h: integer): void
public "getPlane"(): $ScrollBar$Plane
public "mouseScrolled"(scroll: double): boolean
public "setCanAlwaysScroll"(v: boolean): void
get "value"(): double
set "value"(value: double)
get "scrollStep"(): double
set "scrollStep"(value: double)
set "canAlwaysScrollPlane"(value: boolean)
set "minValue"(value: double)
set "maxValue"(value: double)
get "minValue"(): double
get "maxValue"(): double
get "scrollBarSize"(): integer
get "plane"(): $ScrollBar$Plane
set "canAlwaysScroll"(value: boolean)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ScrollBar$Type = ($ScrollBar);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ScrollBar_ = $ScrollBar$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/net/$SyncTeamDataMessage" {
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$NetworkManager$PacketContext, $NetworkManager$PacketContext$Type} from "packages/dev/architectury/networking/$NetworkManager$PacketContext"
import {$BaseS2CMessage, $BaseS2CMessage$Type} from "packages/dev/architectury/networking/simple/$BaseS2CMessage"
import {$TeamData, $TeamData$Type} from "packages/dev/ftb/mods/ftbquests/quest/$TeamData"
import {$MessageType, $MessageType$Type} from "packages/dev/architectury/networking/simple/$MessageType"

export class $SyncTeamDataMessage extends $BaseS2CMessage {

constructor(teamData: $TeamData$Type, self: boolean)

public "write"(buffer: $FriendlyByteBuf$Type): void
public "getType"(): $MessageType
public "handle"(context: $NetworkManager$PacketContext$Type): void
get "type"(): $MessageType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SyncTeamDataMessage$Type = ($SyncTeamDataMessage);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SyncTeamDataMessage_ = $SyncTeamDataMessage$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/quest/theme/property/$IconProperty" {
import {$Icon, $Icon$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Icon"
import {$ThemeProperty, $ThemeProperty$Type} from "packages/dev/ftb/mods/ftbquests/quest/theme/property/$ThemeProperty"

export class $IconProperty extends $ThemeProperty<($Icon)> {
readonly "builtin": $Icon

constructor(n: string, b: $Icon$Type)
constructor(n: string)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IconProperty$Type = ($IconProperty);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IconProperty_ = $IconProperty$Type;
}}
declare module "packages/dev/ftb/mods/ftbxmodcompat/ftbquests/recipemod_common/$WrappedLootCrate" {
import {$LootCrate, $LootCrate$Type} from "packages/dev/ftb/mods/ftbquests/quest/loot/$LootCrate"
import {$WeightedReward, $WeightedReward$Type} from "packages/dev/ftb/mods/ftbquests/quest/loot/$WeightedReward"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Ingredient, $Ingredient$Type} from "packages/net/minecraft/world/item/crafting/$Ingredient"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export class $WrappedLootCrate {
static readonly "ITEMSX": integer
static readonly "ITEMSY": integer
static readonly "ITEMS": integer
readonly "crate": $LootCrate
readonly "crateStack": $ItemStack
readonly "sortedRewards": $List<($WeightedReward)>
readonly "outputs": $List<($ItemStack)>

constructor(c: $LootCrate$Type)

public "outputIngredients"(): $List<($Ingredient)>
public "inputIngredients"(): $List<($Ingredient)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WrappedLootCrate$Type = ($WrappedLootCrate);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WrappedLootCrate_ = $WrappedLootCrate$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/quest/theme/selector/$NotSelector" {
import {$QuestObjectBase, $QuestObjectBase$Type} from "packages/dev/ftb/mods/ftbquests/quest/$QuestObjectBase"
import {$ThemeSelector, $ThemeSelector$Type} from "packages/dev/ftb/mods/ftbquests/quest/theme/selector/$ThemeSelector"
import {$ThemeSelectorType, $ThemeSelectorType$Type} from "packages/dev/ftb/mods/ftbquests/quest/theme/selector/$ThemeSelectorType"

export class $NotSelector extends $ThemeSelector {
readonly "selector": $ThemeSelector

constructor(s: $ThemeSelector$Type)

public "equals"(o: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "compareTo"(o: $ThemeSelector$Type): integer
public "matches"(object: $QuestObjectBase$Type): boolean
public "getType"(): $ThemeSelectorType
get "type"(): $ThemeSelectorType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $NotSelector$Type = ($NotSelector);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $NotSelector_ = $NotSelector$Type;
}}
declare module "packages/dev/ftb/mods/ftbteams/api/$CustomPartyCreationHandler" {
import {$MouseButton, $MouseButton$Type} from "packages/dev/ftb/mods/ftblibrary/ui/input/$MouseButton"

/**
 * 
 * @deprecated
 */
export interface $CustomPartyCreationHandler {

 "createParty"(arg0: $MouseButton$Type): void

(arg0: $MouseButton$Type): void
}

export namespace $CustomPartyCreationHandler {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CustomPartyCreationHandler$Type = ($CustomPartyCreationHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CustomPartyCreationHandler_ = $CustomPartyCreationHandler$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/quest/$Movable" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$Chapter, $Chapter$Type} from "packages/dev/ftb/mods/ftbquests/quest/$Chapter"

export interface $Movable {

 "move"(arg0: $Chapter$Type, arg1: double, arg2: double): void
 "getShape"(): string
 "getY"(): double
 "getX"(): double
 "getWidth"(): double
 "getHeight"(): double
 "getTitle"(): $Component
 "onMoved"(arg0: double, arg1: double, arg2: long): void
 "getChapter"(): $Chapter
 "getMovableID"(): long
 "copyToClipboard"(): void
 "drawMoved"(graphics: $GuiGraphics$Type): void
}

export namespace $Movable {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Movable$Type = ($Movable);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Movable_ = $Movable$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/quest/$ChapterGroup" {
import {$Comparator, $Comparator$Type} from "packages/java/util/$Comparator"
import {$BaseQuestFile, $BaseQuestFile$Type} from "packages/dev/ftb/mods/ftbquests/quest/$BaseQuestFile"
import {$ConfigGroup, $ConfigGroup$Type} from "packages/dev/ftb/mods/ftblibrary/config/$ConfigGroup"
import {$QuestObjectType, $QuestObjectType$Type} from "packages/dev/ftb/mods/ftbquests/quest/$QuestObjectType"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$Icon, $Icon$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Icon"
import {$TeamData, $TeamData$Type} from "packages/dev/ftb/mods/ftbquests/quest/$TeamData"
import {$QuestObject, $QuestObject$Type} from "packages/dev/ftb/mods/ftbquests/quest/$QuestObject"
import {$QuestProgressEventData, $QuestProgressEventData$Type} from "packages/dev/ftb/mods/ftbquests/events/$QuestProgressEventData"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Chapter, $Chapter$Type} from "packages/dev/ftb/mods/ftbquests/quest/$Chapter"

export class $ChapterGroup extends $QuestObject {
readonly "id": long

constructor(id: long, file: $BaseQuestFile$Type)

public "getFile"(): $BaseQuestFile
public "getChildren"(): $Collection<(any)>
public "getObjectType"(): $QuestObjectType
public "deleteSelf"(): void
public "moveChapterWithinGroup"(chapter: $Chapter$Type, movingUp: boolean): boolean
public "getQuestFile"(): $BaseQuestFile
public "editedFromGUI"(): void
public "isVisible"(data: $TeamData$Type): boolean
public "getAltTitle"(): $Component
public "getAltIcon"(): $Icon
public "removeChapter"(chapter: $Chapter$Type): void
public "getRelativeProgressFromChildren"(data: $TeamData$Type): integer
public "hasUnclaimedRewardsRaw"(teamData: $TeamData$Type, player: $UUID$Type): boolean
public "getFirstVisibleChapter"(data: $TeamData$Type): $Chapter
public "onCompleted"(data: $QuestProgressEventData$Type<(any)>): void
public "onCreated"(): void
public "clearCachedData"(): void
public "clearChapters"(): void
public "getChapters"(): $List<($Chapter)>
public "isDefaultGroup"(): boolean
public "sortChapters"(c: $Comparator$Type<(any)>): void
public "addChapter"(chapter: $Chapter$Type): void
public "getVisibleChapters"(data: $TeamData$Type): $List<($Chapter)>
public "fillConfigGroup"(config: $ConfigGroup$Type): void
public "isLastGroup"(): boolean
public "isFirstGroup"(): boolean
public "isGuiCollapsed"(): boolean
public "toggleCollapsed"(): void
get "file"(): $BaseQuestFile
get "children"(): $Collection<(any)>
get "objectType"(): $QuestObjectType
get "questFile"(): $BaseQuestFile
get "altTitle"(): $Component
get "altIcon"(): $Icon
get "chapters"(): $List<($Chapter)>
get "defaultGroup"(): boolean
get "lastGroup"(): boolean
get "firstGroup"(): boolean
get "guiCollapsed"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ChapterGroup$Type = ($ChapterGroup);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ChapterGroup_ = $ChapterGroup$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/quest/task/$ISingleLongValueTask" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $ISingleLongValueTask {

 "setValue"(arg0: long): void
 "getDefaultConfigValue"(): long
 "getMaxConfigValue"(): long
 "getMinConfigValue"(): long

(arg0: long): void
}

export namespace $ISingleLongValueTask {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ISingleLongValueTask$Type = ($ISingleLongValueTask);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ISingleLongValueTask_ = $ISingleLongValueTask$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/client/gui/quests/$QuestScreen" {
import {$Quest, $Quest$Type} from "packages/dev/ftb/mods/ftbquests/quest/$Quest"
import {$OtherButtonsPanelBottom, $OtherButtonsPanelBottom$Type} from "packages/dev/ftb/mods/ftbquests/client/gui/quests/$OtherButtonsPanelBottom"
import {$QuestObjectBase, $QuestObjectBase$Type} from "packages/dev/ftb/mods/ftbquests/quest/$QuestObjectBase"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$ViewQuestPanel, $ViewQuestPanel$Type} from "packages/dev/ftb/mods/ftbquests/client/gui/quests/$ViewQuestPanel"
import {$Key, $Key$Type} from "packages/dev/ftb/mods/ftblibrary/ui/input/$Key"
import {$Movable, $Movable$Type} from "packages/dev/ftb/mods/ftbquests/quest/$Movable"
import {$ClientQuestFile, $ClientQuestFile$Type} from "packages/dev/ftb/mods/ftbquests/client/$ClientQuestFile"
import {$TooltipList, $TooltipList$Type} from "packages/dev/ftb/mods/ftblibrary/util/$TooltipList"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$Runnable, $Runnable$Type} from "packages/java/lang/$Runnable"
import {$BaseScreen, $BaseScreen$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$BaseScreen"
import {$QuestObject, $QuestObject$Type} from "packages/dev/ftb/mods/ftbquests/quest/$QuestObject"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ContextMenuItem, $ContextMenuItem$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$ContextMenuItem"
import {$Theme, $Theme$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Theme"
import {$QuestPanel, $QuestPanel$Type} from "packages/dev/ftb/mods/ftbquests/client/gui/quests/$QuestPanel"
import {$QuestScreen$PersistedData, $QuestScreen$PersistedData$Type} from "packages/dev/ftb/mods/ftbquests/client/gui/quests/$QuestScreen$PersistedData"
import {$OtherButtonsPanelTop, $OtherButtonsPanelTop$Type} from "packages/dev/ftb/mods/ftbquests/client/gui/quests/$OtherButtonsPanelTop"
import {$Chapter, $Chapter$Type} from "packages/dev/ftb/mods/ftbquests/quest/$Chapter"

export class $QuestScreen extends $BaseScreen {
readonly "questPanel": $QuestPanel
readonly "otherButtonsBottomPanel": $OtherButtonsPanelBottom
readonly "otherButtonsTopPanel": $OtherButtonsPanelTop
readonly "viewQuestPanel": $ViewQuestPanel
 "posX": integer
 "posY": integer
 "width": integer
 "height": integer

constructor(clientQuestFile: $ClientQuestFile$Type, persistedData: $QuestScreen$PersistedData$Type)

public "getQuestButtonSize"(): double
public "getViewedQuest"(): $Quest
public "getSelectedQuests"(): $Collection<($Quest)>
public "closeQuest"(): void
public "addZoom"(up: double): void
public "toggleSelected"(movable: $Movable$Type): void
public "viewQuest"(quest: $Quest$Type): void
public "initiateMoving"(movable: $Movable$Type): void
public "addInfoTooltip"(list: $TooltipList$Type, object: $QuestObjectBase$Type): void
public "open"(object: $QuestObject$Type, focus: boolean): void
public "tick"(): void
public static "displayError"(error: $Component$Type): void
public "handleClick"(scheme: string, path: string): boolean
public "doesGuiPauseGame"(): boolean
public "drawForeground"(graphics: $GuiGraphics$Type, theme: $Theme$Type, x: integer, y: integer, w: integer, h: integer): void
public "onBack"(): void
public "alignWidgets"(): void
public "addWidgets"(): void
public "getTheme"(): $Theme
public "keyPressed"(key: $Key$Type): boolean
public "onInit"(): boolean
public "drawDefaultBackground"(graphics: $GuiGraphics$Type): boolean
public "refreshChapterPanel"(): void
public "getPersistedScreenData"(): $QuestScreen$PersistedData
public "onClosed"(): void
public "addMouseOverText"(list: $TooltipList$Type): void
public "drawBackground"(graphics: $GuiGraphics$Type, theme: $Theme$Type, x: integer, y: integer, w: integer, h: integer): void
public "scrollTo"(movable: $Movable$Type): void
public "getZoom"(): integer
public "refreshViewQuestPanel"(): void
public "isViewingQuest"(): boolean
public "refreshQuestPanel"(): void
public "selectChapter"(chapter: $Chapter$Type): void
public "addObjectMenuItems"(contextMenu: $List$Type<($ContextMenuItem$Type)>, gui: $Runnable$Type, object: $QuestObjectBase$Type, deletionFocus: $Movable$Type): void
public "getQuestButtonSpacing"(): double
get "questButtonSize"(): double
get "viewedQuest"(): $Quest
get "selectedQuests"(): $Collection<($Quest)>
get "theme"(): $Theme
get "persistedScreenData"(): $QuestScreen$PersistedData
get "zoom"(): integer
get "viewingQuest"(): boolean
get "questButtonSpacing"(): double
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $QuestScreen$Type = ($QuestScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $QuestScreen_ = $QuestScreen$Type;
}}
declare module "packages/dev/ftb/mods/ftbteams/net/$OpenMyTeamGUIMessage" {
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$NetworkManager$PacketContext, $NetworkManager$PacketContext$Type} from "packages/dev/architectury/networking/$NetworkManager$PacketContext"
import {$BaseS2CMessage, $BaseS2CMessage$Type} from "packages/dev/architectury/networking/simple/$BaseS2CMessage"
import {$TeamPropertyCollection, $TeamPropertyCollection$Type} from "packages/dev/ftb/mods/ftbteams/api/property/$TeamPropertyCollection"
import {$MessageType, $MessageType$Type} from "packages/dev/architectury/networking/simple/$MessageType"

export class $OpenMyTeamGUIMessage extends $BaseS2CMessage {

constructor(player: $ServerPlayer$Type, properties: $TeamPropertyCollection$Type)

public "write"(buffer: $FriendlyByteBuf$Type): void
public "getType"(): $MessageType
public "handle"(context: $NetworkManager$PacketContext$Type): void
get "type"(): $MessageType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $OpenMyTeamGUIMessage$Type = ($OpenMyTeamGUIMessage);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $OpenMyTeamGUIMessage_ = $OpenMyTeamGUIMessage$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/quest/$ChangeProgress" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$NameMap, $NameMap$Type} from "packages/dev/ftb/mods/ftblibrary/config/$NameMap"

export class $ChangeProgress extends $Enum<($ChangeProgress)> {
static readonly "RESET": $ChangeProgress
static readonly "COMPLETE": $ChangeProgress
static readonly "NAME_MAP": $NameMap<($ChangeProgress)>
readonly "id": string
readonly "reset": boolean
readonly "complete": boolean


public static "values"(): ($ChangeProgress)[]
public static "valueOf"(name: string): $ChangeProgress
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ChangeProgress$Type = (("reset") | ("complete")) | ($ChangeProgress);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ChangeProgress_ = $ChangeProgress$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/snbt/config/$ConfigUtil" {
import {$Path, $Path$Type} from "packages/java/nio/file/$Path"
import {$SNBTConfig, $SNBTConfig$Type} from "packages/dev/ftb/mods/ftblibrary/snbt/config/$SNBTConfig"
import {$LevelResource, $LevelResource$Type} from "packages/net/minecraft/world/level/storage/$LevelResource"

export interface $ConfigUtil {

}

export namespace $ConfigUtil {
const ROOT_DIR: $Path
const DEFAULT_CONFIG_DIR: $Path
const CONFIG_DIR: $Path
const LOCAL_DIR: $Path
const SERVER_CONFIG_DIR: $LevelResource
function loadDefaulted(config: $SNBTConfig$Type, configDir: $Path$Type, namespace: string, filename: string): void
function loadDefaulted(config: $SNBTConfig$Type, configDir: $Path$Type, namespace: string): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ConfigUtil$Type = ($ConfigUtil);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ConfigUtil_ = $ConfigUtil$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/$IQuestProxy" {
import {$LootCrate, $LootCrate$Type} from "packages/dev/ftb/mods/ftbquests/quest/loot/$LootCrate"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"

export interface $IQuestProxy {

 "getKnownLootCrates"(): $Collection<($LootCrate)>

(): $Collection<($LootCrate)>
}

export namespace $IQuestProxy {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IQuestProxy$Type = ($IQuestProxy);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IQuestProxy_ = $IQuestProxy$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/client/gui/quests/$QuestPositionableButton$Position" {
import {$Record, $Record$Type} from "packages/java/lang/$Record"

export class $QuestPositionableButton$Position extends $Record {

constructor(x: double, y: double, w: double, h: double)

public "equals"(o: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "x"(): double
public "h"(): double
public "w"(): double
public "y"(): double
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $QuestPositionableButton$Position$Type = ($QuestPositionableButton$Position);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $QuestPositionableButton$Position_ = $QuestPositionableButton$Position$Type;
}}
declare module "packages/dev/ftb/mods/ftbxmodcompat/generic/gamestages/$KubeJSStageProvider" {
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$StageProvider, $StageProvider$Type} from "packages/dev/ftb/mods/ftblibrary/integration/stages/$StageProvider"

export class $KubeJSStageProvider implements $StageProvider {

constructor()

public "getName"(): string
public "add"(player: $ServerPlayer$Type, stage: string): void
public "remove"(player: $ServerPlayer$Type, stage: string): void
public "sync"(player: $ServerPlayer$Type): void
public "has"(player: $Player$Type, stage: string): boolean
get "name"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $KubeJSStageProvider$Type = ($KubeJSStageProvider);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $KubeJSStageProvider_ = $KubeJSStageProvider$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/client/gui/quests/$AddRewardButton" {
import {$Quest, $Quest$Type} from "packages/dev/ftb/mods/ftbquests/quest/$Quest"
import {$Panel, $Panel$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Panel"
import {$Theme, $Theme$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Theme"
import {$MouseButton, $MouseButton$Type} from "packages/dev/ftb/mods/ftblibrary/ui/input/$MouseButton"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$Button, $Button$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Button"

export class $AddRewardButton extends $Button {
 "posX": integer
 "posY": integer
 "width": integer
 "height": integer

constructor(panel: $Panel$Type, q: $Quest$Type)

public "drawBackground"(matrixStack: $GuiGraphics$Type, theme: $Theme$Type, x: integer, y: integer, w: integer, h: integer): void
public "onClicked"(button: $MouseButton$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AddRewardButton$Type = ($AddRewardButton);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AddRewardButton_ = $AddRewardButton$Type;
}}
declare module "packages/dev/ftb/mods/ftbteams/api/$FTBTeamsAPI$API" {
import {$TeamManager, $TeamManager$Type} from "packages/dev/ftb/mods/ftbteams/api/$TeamManager"
import {$ClientTeamManager, $ClientTeamManager$Type} from "packages/dev/ftb/mods/ftbteams/api/client/$ClientTeamManager"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$TeamMessage, $TeamMessage$Type} from "packages/dev/ftb/mods/ftbteams/api/$TeamMessage"
import {$CustomPartyCreationHandler, $CustomPartyCreationHandler$Type} from "packages/dev/ftb/mods/ftbteams/api/$CustomPartyCreationHandler"

export interface $FTBTeamsAPI$API {

 "getManager"(): $TeamManager
 "getClientManager"(): $ClientTeamManager
 "isManagerLoaded"(): boolean
 "createMessage"(arg0: $UUID$Type, arg1: $Component$Type): $TeamMessage
/**
 * 
 * @deprecated
 */
 "getCustomPartyCreationHandler"(): $CustomPartyCreationHandler
 "setPartyCreationFromAPIOnly"(arg0: boolean): void
/**
 * 
 * @deprecated
 */
 "setCustomPartyCreationHandler"(arg0: $CustomPartyCreationHandler$Type): $CustomPartyCreationHandler
 "isClientManagerLoaded"(): boolean
}

export namespace $FTBTeamsAPI$API {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FTBTeamsAPI$API$Type = ($FTBTeamsAPI$API);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FTBTeamsAPI$API_ = $FTBTeamsAPI$API$Type;
}}
declare module "packages/dev/ftb/mods/ftbxmodcompat/ftbfiltersystem/kubejs/$FFSKubeJSPlugin" {
import {$KubeJSPlugin, $KubeJSPlugin$Type} from "packages/dev/latvian/mods/kubejs/$KubeJSPlugin"

export class $FFSKubeJSPlugin extends $KubeJSPlugin {

constructor()

public "init"(): void
public "registerEvents"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FFSKubeJSPlugin$Type = ($FFSKubeJSPlugin);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FFSKubeJSPlugin_ = $FFSKubeJSPlugin$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/net/$ObjectStartedMessage" {
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$NetworkManager$PacketContext, $NetworkManager$PacketContext$Type} from "packages/dev/architectury/networking/$NetworkManager$PacketContext"
import {$BaseS2CMessage, $BaseS2CMessage$Type} from "packages/dev/architectury/networking/simple/$BaseS2CMessage"
import {$MessageType, $MessageType$Type} from "packages/dev/architectury/networking/simple/$MessageType"

export class $ObjectStartedMessage extends $BaseS2CMessage {

constructor(buffer: $FriendlyByteBuf$Type)
constructor(t: $UUID$Type, i: long)

public "write"(buffer: $FriendlyByteBuf$Type): void
public "getType"(): $MessageType
public "handle"(context: $NetworkManager$PacketContext$Type): void
get "type"(): $MessageType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ObjectStartedMessage$Type = ($ObjectStartedMessage);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ObjectStartedMessage_ = $ObjectStartedMessage$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/icon/$IconProperties" {
import {$Color4I, $Color4I$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Color4I"

export class $IconProperties {

constructor()

public "getBoolean"(key: string, def: boolean): boolean
public "getInt"(key: string, def: integer, min: integer, max: integer): integer
public "getInt"(key: string, def: integer): integer
public "getDouble"(key: string, def: double): double
public "getDouble"(key: string, def: double, min: double, max: double): double
public "set"(key: string, value: string): void
public "getString"(key: string, def: string): string
public "getColor"(key: string): $Color4I
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IconProperties$Type = ($IconProperties);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IconProperties_ = $IconProperties$Type;
}}
declare module "packages/dev/ftb/mods/ftbteams/net/$SyncTeamsMessage" {
import {$ClientTeamManagerImpl, $ClientTeamManagerImpl$Type} from "packages/dev/ftb/mods/ftbteams/data/$ClientTeamManagerImpl"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$NetworkManager$PacketContext, $NetworkManager$PacketContext$Type} from "packages/dev/architectury/networking/$NetworkManager$PacketContext"
import {$BaseS2CMessage, $BaseS2CMessage$Type} from "packages/dev/architectury/networking/simple/$BaseS2CMessage"
import {$Team, $Team$Type} from "packages/dev/ftb/mods/ftbteams/api/$Team"
import {$MessageType, $MessageType$Type} from "packages/dev/architectury/networking/simple/$MessageType"

export class $SyncTeamsMessage extends $BaseS2CMessage {

constructor(manager: $ClientTeamManagerImpl$Type, selfTeam: $Team$Type, fullSync: boolean)

public "write"(buffer: $FriendlyByteBuf$Type): void
public "getType"(): $MessageType
public "handle"(context: $NetworkManager$PacketContext$Type): void
get "type"(): $MessageType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SyncTeamsMessage$Type = ($SyncTeamsMessage);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SyncTeamsMessage_ = $SyncTeamsMessage$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/net/$ClaimAllRewardsMessage" {
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$NetworkManager$PacketContext, $NetworkManager$PacketContext$Type} from "packages/dev/architectury/networking/$NetworkManager$PacketContext"
import {$BaseC2SMessage, $BaseC2SMessage$Type} from "packages/dev/architectury/networking/simple/$BaseC2SMessage"
import {$MessageType, $MessageType$Type} from "packages/dev/architectury/networking/simple/$MessageType"

export class $ClaimAllRewardsMessage extends $BaseC2SMessage {

constructor()

public "write"(buffer: $FriendlyByteBuf$Type): void
public "getType"(): $MessageType
public "handle"(context: $NetworkManager$PacketContext$Type): void
get "type"(): $MessageType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClaimAllRewardsMessage$Type = ($ClaimAllRewardsMessage);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClaimAllRewardsMessage_ = $ClaimAllRewardsMessage$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/ui/$ModalPanel" {
import {$Panel, $Panel$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Panel"

export class $ModalPanel extends $Panel {
 "posX": integer
 "posY": integer
 "width": integer
 "height": integer

constructor(panel: $Panel$Type)

public "getExtraZlevel"(): integer
public "checkMouseOver"(mouseX: integer, mouseY: integer): boolean
public "setExtraZlevel"(extraZlevel: integer): void
get "extraZlevel"(): integer
set "extraZlevel"(value: integer)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModalPanel$Type = ($ModalPanel);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModalPanel_ = $ModalPanel$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/quest/loot/$LootCrate" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Color4I, $Color4I$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Color4I"
import {$ConfigGroup, $ConfigGroup$Type} from "packages/dev/ftb/mods/ftblibrary/config/$ConfigGroup"
import {$RewardTable, $RewardTable$Type} from "packages/dev/ftb/mods/ftbquests/quest/loot/$RewardTable"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$EntityWeight, $EntityWeight$Type} from "packages/dev/ftb/mods/ftbquests/quest/loot/$EntityWeight"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $LootCrate {
static "LOOT_CRATES": $Map<(string), ($LootCrate)>

constructor(table: $RewardTable$Type, initFromTable: boolean)

public "getTable"(): $RewardTable
public "readData"(nbt: $CompoundTag$Type): void
public "getDrops"(): $EntityWeight
public "createStack"(): $ItemStack
public "isGlow"(): boolean
public "getColor"(): $Color4I
public "getItemName"(): string
public "getStringID"(): string
public static "allCrateStacks"(): $Collection<($ItemStack)>
public "writeNetData"(data: $FriendlyByteBuf$Type): void
public "writeData"(nbt: $CompoundTag$Type): void
public "initFromTable"(): void
public "fillConfigGroup"(config: $ConfigGroup$Type): void
public "readNetData"(data: $FriendlyByteBuf$Type): void
get "table"(): $RewardTable
get "drops"(): $EntityWeight
get "glow"(): boolean
get "color"(): $Color4I
get "itemName"(): string
get "stringID"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LootCrate$Type = ($LootCrate);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LootCrate_ = $LootCrate$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/snbt/config/$BaseValue" {
import {$Comparable, $Comparable$Type} from "packages/java/lang/$Comparable"
import {$ConfigGroup, $ConfigGroup$Type} from "packages/dev/ftb/mods/ftblibrary/config/$ConfigGroup"
import {$SNBTConfig, $SNBTConfig$Type} from "packages/dev/ftb/mods/ftblibrary/snbt/config/$SNBTConfig"
import {$BooleanSupplier, $BooleanSupplier$Type} from "packages/java/util/function/$BooleanSupplier"
import {$SNBTCompoundTag, $SNBTCompoundTag$Type} from "packages/dev/ftb/mods/ftblibrary/snbt/$SNBTCompoundTag"

export class $BaseValue<T> implements $Comparable<($BaseValue<(T)>)> {
readonly "parent": $SNBTConfig
readonly "key": string
readonly "defaultValue": T

constructor(c: $SNBTConfig$Type, n: string, def: T)

public "get"(): T
public "toString"(): string
public "compareTo"(o: $BaseValue$Type<(T)>): integer
public "enabled"<E extends $BaseValue<(T)>>(e: $BooleanSupplier$Type): E
public "set"(v: T): void
public "write"(arg0: $SNBTCompoundTag$Type): void
public "read"(arg0: $SNBTCompoundTag$Type): void
public "comment"<E extends $BaseValue<(T)>>(...s: (string)[]): E
public "excluded"<E extends $BaseValue<(T)>>(): E
public "withDisplayOrder"(order: integer): $BaseValue<(T)>
public "createClientConfig"(group: $ConfigGroup$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BaseValue$Type<T> = ($BaseValue<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BaseValue_<T> = $BaseValue$Type<(T)>;
}}
declare module "packages/dev/ftb/mods/ftbteams/data/$ClientTeam" {
import {$AbstractTeamBase, $AbstractTeamBase$Type} from "packages/dev/ftb/mods/ftbteams/data/$AbstractTeamBase"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$List, $List$Type} from "packages/java/util/$List"
import {$TeamType, $TeamType$Type} from "packages/dev/ftb/mods/ftbteams/data/$TeamType"
import {$TeamMessage, $TeamMessage$Type} from "packages/dev/ftb/mods/ftbteams/api/$TeamMessage"
import {$TeamPropertyCollection, $TeamPropertyCollection$Type} from "packages/dev/ftb/mods/ftbteams/api/property/$TeamPropertyCollection"
import {$AbstractTeam, $AbstractTeam$Type} from "packages/dev/ftb/mods/ftbteams/data/$AbstractTeam"

export class $ClientTeam extends $AbstractTeamBase {


public static "copyOf"(team: $AbstractTeam$Type): $ClientTeam
public "write"(buffer: $FriendlyByteBuf$Type, writeAllProperties: boolean): void
public "getType"(): $TeamType
public "getOwner"(): $UUID
public "isValid"(): boolean
public static "invalidTeam"(team: $AbstractTeam$Type): $ClientTeam
public static "fromNetwork"(buffer: $FriendlyByteBuf$Type): $ClientTeam
public "sendMessage"(senderId: $UUID$Type, message: string): void
public "toBeRemoved"(): boolean
public "setMessageHistory"(messages: $List$Type<($TeamMessage$Type)>): void
public "updateProperties"(newProps: $TeamPropertyCollection$Type): void
public "isPartyTeam"(): boolean
public "getOnlineMembers"(): $Collection<($ServerPlayer)>
public "isPlayerTeam"(): boolean
public "getTeamInfo"(): $List<($Component)>
public "isServerTeam"(): boolean
public "isClientTeam"(): boolean
get "type"(): $TeamType
get "owner"(): $UUID
get "valid"(): boolean
set "messageHistory"(value: $List$Type<($TeamMessage$Type)>)
get "partyTeam"(): boolean
get "onlineMembers"(): $Collection<($ServerPlayer)>
get "playerTeam"(): boolean
get "teamInfo"(): $List<($Component)>
get "serverTeam"(): boolean
get "clientTeam"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientTeam$Type = ($ClientTeam);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientTeam_ = $ClientTeam$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/quest/task/$BiomeTask" {
import {$Quest, $Quest$Type} from "packages/dev/ftb/mods/ftbquests/quest/$Quest"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$ConfigGroup, $ConfigGroup$Type} from "packages/dev/ftb/mods/ftblibrary/config/$ConfigGroup"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$TaskType, $TaskType$Type} from "packages/dev/ftb/mods/ftbquests/quest/task/$TaskType"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$AbstractBooleanTask, $AbstractBooleanTask$Type} from "packages/dev/ftb/mods/ftbquests/quest/task/$AbstractBooleanTask"
import {$TeamData, $TeamData$Type} from "packages/dev/ftb/mods/ftbquests/quest/$TeamData"

export class $BiomeTask extends $AbstractBooleanTask {
readonly "id": long

constructor(id: long, quest: $Quest$Type)

public "getType"(): $TaskType
public "readData"(nbt: $CompoundTag$Type): void
public "autoSubmitOnPlayerTick"(): integer
public "checkOnLogin"(): boolean
public "canSubmit"(teamData: $TeamData$Type, player: $ServerPlayer$Type): boolean
public "writeNetData"(buffer: $FriendlyByteBuf$Type): void
public "writeData"(nbt: $CompoundTag$Type): void
public "fillConfigGroup"(config: $ConfigGroup$Type): void
public "readNetData"(buffer: $FriendlyByteBuf$Type): void
get "type"(): $TaskType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BiomeTask$Type = ($BiomeTask);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BiomeTask_ = $BiomeTask$Type;
}}
declare module "packages/dev/ftb/mods/ftbteams/api/client/$KnownClientPlayer" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$GameProfile, $GameProfile$Type} from "packages/com/mojang/authlib/$GameProfile"

export class $KnownClientPlayer extends $Record {

constructor(id: $UUID$Type, name: string, online: boolean, teamId: $UUID$Type, profile: $GameProfile$Type, extraData: $CompoundTag$Type)

public "isOnlineAndNotInParty"(): boolean
public "name"(): string
public "profile"(): $GameProfile
public "equals"(o: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "id"(): $UUID
public "isInternalTeam"(): boolean
public "online"(): boolean
public "teamId"(): $UUID
public "extraData"(): $CompoundTag
get "onlineAndNotInParty"(): boolean
get "internalTeam"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $KnownClientPlayer$Type = ($KnownClientPlayer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $KnownClientPlayer_ = $KnownClientPlayer$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/ui/misc/$CompactGridLayout" {
import {$Panel, $Panel$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Panel"
import {$WidgetLayout$Padding, $WidgetLayout$Padding$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$WidgetLayout$Padding"
import {$WidgetLayout, $WidgetLayout$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$WidgetLayout"

export class $CompactGridLayout implements $WidgetLayout {

constructor(s: integer)

public "align"(panel: $Panel$Type): integer
public "getLayoutPadding"(): $WidgetLayout$Padding
get "layoutPadding"(): $WidgetLayout$Padding
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CompactGridLayout$Type = ($CompactGridLayout);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CompactGridLayout_ = $CompactGridLayout$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/config/ui/$SelectFluidScreen" {
import {$ResourceSearchMode, $ResourceSearchMode$Type} from "packages/dev/ftb/mods/ftblibrary/config/ui/$ResourceSearchMode"
import {$ResourceSelectorScreen, $ResourceSelectorScreen$Type} from "packages/dev/ftb/mods/ftblibrary/config/ui/$ResourceSelectorScreen"
import {$ConfigCallback, $ConfigCallback$Type} from "packages/dev/ftb/mods/ftblibrary/config/$ConfigCallback"
import {$FluidConfig, $FluidConfig$Type} from "packages/dev/ftb/mods/ftblibrary/config/$FluidConfig"
import {$Pair, $Pair$Type} from "packages/com/mojang/datafixers/util/$Pair"
import {$FluidStack, $FluidStack$Type} from "packages/dev/architectury/fluid/$FluidStack"
import {$SearchModeIndex, $SearchModeIndex$Type} from "packages/dev/ftb/mods/ftblibrary/config/ui/$SearchModeIndex"

export class $SelectFluidScreen extends $ResourceSelectorScreen<($FluidStack)> {
static readonly "KNOWN_MODES": $SearchModeIndex<($ResourceSearchMode<($FluidStack)>)>
 "update": long
static readonly "NO_INSET": $Pair<(integer), (integer)>
 "posX": integer
 "posY": integer
 "width": integer
 "height": integer

constructor(config: $FluidConfig$Type, callback: $ConfigCallback$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SelectFluidScreen$Type = ($SelectFluidScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SelectFluidScreen_ = $SelectFluidScreen$Type;
}}
declare module "packages/dev/ftb/mods/ftbxmodcompat/$FTBXModCompat" {
import {$Logger, $Logger$Type} from "packages/org/apache/logging/log4j/$Logger"

export class $FTBXModCompat {
static readonly "MOD_ID": string
static readonly "LOGGER": $Logger
static "isFTBQuestsLoaded": boolean
static "isFTBChunksLoaded": boolean
static "isFTBRanksLoaded": boolean
static "isFTBEssentialsLoaded": boolean
static "isFTBFilterSystemLoaded": boolean
static "isKubeJSLoaded": boolean
static "isItemFiltersLoaded": boolean
static "isGameStagesLoaded": boolean
static "isREILoaded": boolean
static "isJEILoaded": boolean
static "isLuckPermsLoaded": boolean
static "isWaystonesLoaded": boolean
static "isCommonProtLoaded": boolean

constructor()

public static "init"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FTBXModCompat$Type = ($FTBXModCompat);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FTBXModCompat_ = $FTBXModCompat$Type;
}}
declare module "packages/dev/ftb/mods/ftbteams/$FTBTeams" {
import {$Logger, $Logger$Type} from "packages/org/apache/logging/log4j/$Logger"

export class $FTBTeams {
static readonly "LOGGER": $Logger

constructor()

public "setup"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FTBTeams$Type = ($FTBTeams);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FTBTeams_ = $FTBTeams$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/config/ui/$EditConfigScreen$ConfigPanel" {
import {$Panel, $Panel$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Panel"
import {$EditConfigScreen, $EditConfigScreen$Type} from "packages/dev/ftb/mods/ftblibrary/config/ui/$EditConfigScreen"

export class $EditConfigScreen$ConfigPanel extends $Panel {
 "posX": integer
 "posY": integer
 "width": integer
 "height": integer

constructor(this$0: $EditConfigScreen$Type)

public "alignWidgets"(): void
public "addWidgets"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EditConfigScreen$ConfigPanel$Type = ($EditConfigScreen$ConfigPanel);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EditConfigScreen$ConfigPanel_ = $EditConfigScreen$ConfigPanel$Type;
}}
declare module "packages/dev/ftb/mods/ftbteams/client/gui/$CreatePartyScreen" {
import {$InvitationSetup, $InvitationSetup$Type} from "packages/dev/ftb/mods/ftbteams/client/gui/$InvitationSetup"
import {$Theme, $Theme$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Theme"
import {$Key, $Key$Type} from "packages/dev/ftb/mods/ftblibrary/ui/input/$Key"
import {$GameProfile, $GameProfile$Type} from "packages/com/mojang/authlib/$GameProfile"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$BaseScreen, $BaseScreen$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$BaseScreen"
import {$NordColors, $NordColors$Type} from "packages/dev/ftb/mods/ftblibrary/ui/misc/$NordColors"

export class $CreatePartyScreen extends $BaseScreen implements $NordColors, $InvitationSetup {
 "posX": integer
 "posY": integer
 "width": integer
 "height": integer

constructor()

public "drawForeground"(graphics: $GuiGraphics$Type, theme: $Theme$Type, x: integer, y: integer, w: integer, h: integer): void
public "addWidgets"(): void
public "keyPressed"(key: $Key$Type): boolean
public "isInvited"(profile: $GameProfile$Type): boolean
public "drawBackground"(graphics: $GuiGraphics$Type, theme: $Theme$Type, x: integer, y: integer, w: integer, h: integer): void
public "setInvited"(profile: $GameProfile$Type, invited: boolean): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CreatePartyScreen$Type = ($CreatePartyScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CreatePartyScreen_ = $CreatePartyScreen$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/net/$ObjectCompletedResetMessage" {
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$NetworkManager$PacketContext, $NetworkManager$PacketContext$Type} from "packages/dev/architectury/networking/$NetworkManager$PacketContext"
import {$BaseS2CMessage, $BaseS2CMessage$Type} from "packages/dev/architectury/networking/simple/$BaseS2CMessage"
import {$MessageType, $MessageType$Type} from "packages/dev/architectury/networking/simple/$MessageType"

export class $ObjectCompletedResetMessage extends $BaseS2CMessage {

constructor(buffer: $FriendlyByteBuf$Type)
constructor(t: $UUID$Type, i: long)

public "write"(buffer: $FriendlyByteBuf$Type): void
public "getType"(): $MessageType
public "handle"(context: $NetworkManager$PacketContext$Type): void
get "type"(): $MessageType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ObjectCompletedResetMessage$Type = ($ObjectCompletedResetMessage);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ObjectCompletedResetMessage_ = $ObjectCompletedResetMessage$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/config/$ConfigCallback" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $ConfigCallback {

 "save"(arg0: boolean): void

(arg0: boolean): void
}

export namespace $ConfigCallback {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ConfigCallback$Type = ($ConfigCallback);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ConfigCallback_ = $ConfigCallback$Type;
}}
declare module "packages/dev/ftb/mods/ftbteams/data/$PlayerPermissions" {
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"

export class $PlayerPermissions {

constructor(player: $ServerPlayer$Type)

public static "fromNetwork"(buf: $FriendlyByteBuf$Type): $PlayerPermissions
public "toNetwork"(buf: $FriendlyByteBuf$Type): void
public "canCreateParty"(): boolean
public "canInvitePlayer"(): boolean
public "canAddAlly"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PlayerPermissions$Type = ($PlayerPermissions);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PlayerPermissions_ = $PlayerPermissions$Type;
}}
declare module "packages/dev/ftb/mods/ftbteams/client/gui/$InvitedButton" {
import {$KnownClientPlayer, $KnownClientPlayer$Type} from "packages/dev/ftb/mods/ftbteams/api/client/$KnownClientPlayer"
import {$InvitationSetup, $InvitationSetup$Type} from "packages/dev/ftb/mods/ftbteams/client/gui/$InvitationSetup"
import {$Theme, $Theme$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Theme"
import {$NordButton, $NordButton$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$NordButton"
import {$MouseButton, $MouseButton$Type} from "packages/dev/ftb/mods/ftblibrary/ui/input/$MouseButton"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $InvitedButton extends $NordButton {
readonly "screen": $InvitationSetup
readonly "player": $KnownClientPlayer
 "posX": integer
 "posY": integer
 "width": integer
 "height": integer


public "drawIcon"(graphics: $GuiGraphics$Type, theme: $Theme$Type, x: integer, y: integer, w: integer, h: integer): void
public "onClicked"(button: $MouseButton$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $InvitedButton$Type = ($InvitedButton);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $InvitedButton_ = $InvitedButton$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/quest/theme/$ThemeLoader" {
import {$CompletableFuture, $CompletableFuture$Type} from "packages/java/util/concurrent/$CompletableFuture"
import {$PreparableReloadListener$PreparationBarrier, $PreparableReloadListener$PreparationBarrier$Type} from "packages/net/minecraft/server/packs/resources/$PreparableReloadListener$PreparationBarrier"
import {$ResourceManagerReloadListener, $ResourceManagerReloadListener$Type} from "packages/net/minecraft/server/packs/resources/$ResourceManagerReloadListener"
import {$Executor, $Executor$Type} from "packages/java/util/concurrent/$Executor"
import {$ResourceManager, $ResourceManager$Type} from "packages/net/minecraft/server/packs/resources/$ResourceManager"
import {$ProfilerFiller, $ProfilerFiller$Type} from "packages/net/minecraft/util/profiling/$ProfilerFiller"

export class $ThemeLoader implements $ResourceManagerReloadListener {

constructor()

public static "loadTheme"(resourceManager: $ResourceManager$Type): void
public "onResourceManagerReload"(resourceManager: $ResourceManager$Type): void
public "reload"(arg0: $PreparableReloadListener$PreparationBarrier$Type, arg1: $ResourceManager$Type, arg2: $ProfilerFiller$Type, arg3: $ProfilerFiller$Type, arg4: $Executor$Type, arg5: $Executor$Type): $CompletableFuture<(void)>
public "getName"(): string
get "name"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ThemeLoader$Type = ($ThemeLoader);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ThemeLoader_ = $ThemeLoader$Type;
}}
declare module "packages/dev/ftb/mods/ftbteams/api/property/$TeamPropertyValue" {
import {$TeamProperty, $TeamProperty$Type} from "packages/dev/ftb/mods/ftbteams/api/property/$TeamProperty"

export class $TeamPropertyValue<T> {

constructor(property: $TeamProperty$Type<(T)>, value: T)
constructor(k: $TeamProperty$Type<(T)>)

public "getProperty"(): $TeamProperty<(T)>
public "toString"(): string
public "getValue"(): T
public "setValue"(value: T): void
public "copy"(): $TeamPropertyValue<(T)>
get "property"(): $TeamProperty<(T)>
get "value"(): T
set "value"(value: T)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TeamPropertyValue$Type<T> = ($TeamPropertyValue<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TeamPropertyValue_<T> = $TeamPropertyValue$Type<(T)>;
}}
declare module "packages/dev/ftb/mods/ftbquests/net/$SyncQuestsMessage" {
import {$BaseQuestFile, $BaseQuestFile$Type} from "packages/dev/ftb/mods/ftbquests/quest/$BaseQuestFile"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$NetworkManager$PacketContext, $NetworkManager$PacketContext$Type} from "packages/dev/architectury/networking/$NetworkManager$PacketContext"
import {$BaseS2CMessage, $BaseS2CMessage$Type} from "packages/dev/architectury/networking/simple/$BaseS2CMessage"
import {$MessageType, $MessageType$Type} from "packages/dev/architectury/networking/simple/$MessageType"

export class $SyncQuestsMessage extends $BaseS2CMessage {

constructor(f: $BaseQuestFile$Type)

public "write"(buffer: $FriendlyByteBuf$Type): void
public "getType"(): $MessageType
public "handle"(context: $NetworkManager$PacketContext$Type): void
get "type"(): $MessageType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SyncQuestsMessage$Type = ($SyncQuestsMessage);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SyncQuestsMessage_ = $SyncQuestsMessage$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/block/entity/$TaskScreenBlockEntity" {
import {$Task, $Task$Type} from "packages/dev/ftb/mods/ftbquests/quest/task/$Task"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$ConfigGroup, $ConfigGroup$Type} from "packages/dev/ftb/mods/ftblibrary/config/$ConfigGroup"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Packet, $Packet$Type} from "packages/net/minecraft/network/protocol/$Packet"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$TeamData, $TeamData$Type} from "packages/dev/ftb/mods/ftbquests/quest/$TeamData"
import {$ClientGamePacketListener, $ClientGamePacketListener$Type} from "packages/net/minecraft/network/protocol/game/$ClientGamePacketListener"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$ITaskScreen, $ITaskScreen$Type} from "packages/dev/ftb/mods/ftbquests/block/entity/$ITaskScreen"

export class $TaskScreenBlockEntity extends $BlockEntity implements $ITaskScreen {
 "fakeTextureUV": (float)[]
 "blockState": $BlockState

constructor(blockPos: $BlockPos$Type, blockState: $BlockState$Type)

public "getTask"(): $Task
public "setTeamId"(teamId: $UUID$Type): void
public "getSkin"(): $ItemStack
public "getCoreScreen"(): $Optional<($TaskScreenBlockEntity)>
public "isInputOnly"(): boolean
public "isIndestructible"(): boolean
public "removeAllAuxScreens"(): void
public "setInputOnly"(inputOnly: boolean): void
public "setIndestructible"(indestructible: boolean): void
public "setSkin"(skin: $ItemStack$Type): void
public "isTextShadow"(): boolean
public "getInputModeIcon"(): $ItemStack
public "setTask"(task: $Task$Type): void
public "setInputModeIcon"(inputModeIcon: $ItemStack$Type): void
public "getCachedTeamData"(): $TeamData
public "setTextShadow"(textShadow: boolean): void
public "getFakeTextureUV"(): (float)[]
public "load"(compoundTag: $CompoundTag$Type): void
public "getTeamId"(): $UUID
public "fillConfigGroup"(data: $TeamData$Type): $ConfigGroup
public "getUpdateTag"(): $CompoundTag
public "getUpdatePacket"(): $Packet<($ClientGamePacketListener)>
get "task"(): $Task
set "teamId"(value: $UUID$Type)
get "skin"(): $ItemStack
get "coreScreen"(): $Optional<($TaskScreenBlockEntity)>
get "inputOnly"(): boolean
get "indestructible"(): boolean
set "inputOnly"(value: boolean)
set "indestructible"(value: boolean)
set "skin"(value: $ItemStack$Type)
get "textShadow"(): boolean
get "inputModeIcon"(): $ItemStack
set "task"(value: $Task$Type)
set "inputModeIcon"(value: $ItemStack$Type)
get "cachedTeamData"(): $TeamData
set "textShadow"(value: boolean)
get "fakeTextureUV"(): (float)[]
get "teamId"(): $UUID
get "updateTag"(): $CompoundTag
get "updatePacket"(): $Packet<($ClientGamePacketListener)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TaskScreenBlockEntity$Type = ($TaskScreenBlockEntity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TaskScreenBlockEntity_ = $TaskScreenBlockEntity$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/events/$ObjectProgressEvent" {
import {$QuestObject, $QuestObject$Type} from "packages/dev/ftb/mods/ftbquests/quest/$QuestObject"
import {$Date, $Date$Type} from "packages/java/util/$Date"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$List, $List$Type} from "packages/java/util/$List"
import {$TeamData, $TeamData$Type} from "packages/dev/ftb/mods/ftbquests/quest/$TeamData"

export class $ObjectProgressEvent<T extends $QuestObject> {


public "getObject"(): T
public "getTime"(): $Date
public "getData"(): $TeamData
public "isCancelable"(): boolean
public "getNotifiedPlayers"(): $List<($ServerPlayer)>
public "getOnlineMembers"(): $List<($ServerPlayer)>
get "object"(): T
get "time"(): $Date
get "data"(): $TeamData
get "cancelable"(): boolean
get "notifiedPlayers"(): $List<($ServerPlayer)>
get "onlineMembers"(): $List<($ServerPlayer)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ObjectProgressEvent$Type<T> = ($ObjectProgressEvent<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ObjectProgressEvent_<T> = $ObjectProgressEvent$Type<(T)>;
}}
declare module "packages/dev/ftb/mods/ftbquests/integration/$RecipeModHelper" {
import {$QuestObjectBase, $QuestObjectBase$Type} from "packages/dev/ftb/mods/ftbquests/quest/$QuestObjectBase"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$RecipeModHelper$Components, $RecipeModHelper$Components$Type} from "packages/dev/ftb/mods/ftbquests/integration/$RecipeModHelper$Components"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export interface $RecipeModHelper {

 "showRecipes"(arg0: $ItemStack$Type): void
 "updateItemsDynamic"(toRemove: $Collection$Type<($ItemStack$Type)>, toAdd: $Collection$Type<($ItemStack$Type)>): void
 "getHelperName"(): string
 "refreshAll"(arg0: $RecipeModHelper$Components$Type): void
 "refreshRecipes"(arg0: $QuestObjectBase$Type): void
 "isRecipeModAvailable"(): boolean
}

export namespace $RecipeModHelper {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RecipeModHelper$Type = ($RecipeModHelper);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RecipeModHelper_ = $RecipeModHelper$Type;
}}
declare module "packages/dev/ftb/mods/ftbxmodcompat/ftbquests/recipemod_common/$WrappedQuestCache" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$WrappedQuest, $WrappedQuest$Type} from "packages/dev/ftb/mods/ftbxmodcompat/ftbquests/recipemod_common/$WrappedQuest"

export class $WrappedQuestCache {

constructor()

public "findQuestsWithOutput"(stack: $ItemStack$Type): $List<($WrappedQuest)>
public "findQuestsWithInput"(stack: $ItemStack$Type): $List<($WrappedQuest)>
public "clear"(): void
public "getCachedItems"(): $List<($WrappedQuest)>
get "cachedItems"(): $List<($WrappedQuest)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WrappedQuestCache$Type = ($WrappedQuestCache);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WrappedQuestCache_ = $WrappedQuestCache$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/quest/task/$CustomTask" {
import {$Quest, $Quest$Type} from "packages/dev/ftb/mods/ftbquests/quest/$Quest"
import {$Task, $Task$Type} from "packages/dev/ftb/mods/ftbquests/quest/task/$Task"
import {$QuestObjectBase, $QuestObjectBase$Type} from "packages/dev/ftb/mods/ftbquests/quest/$QuestObjectBase"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$TaskType, $TaskType$Type} from "packages/dev/ftb/mods/ftbquests/quest/task/$TaskType"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$TeamData, $TeamData$Type} from "packages/dev/ftb/mods/ftbquests/quest/$TeamData"
import {$CustomTask$Check, $CustomTask$Check$Type} from "packages/dev/ftb/mods/ftbquests/quest/task/$CustomTask$Check"
import {$Button, $Button$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Button"

export class $CustomTask extends $Task {
static readonly "PREDICATE": $Predicate<($QuestObjectBase)>
readonly "id": long

constructor(id: long, quest: $Quest$Type)

public "getType"(): $TaskType
public "submitTask"(teamData: $TeamData$Type, player: $ServerPlayer$Type, craftedItem: $ItemStack$Type): void
public "autoSubmitOnPlayerTick"(): integer
public "setCheck"(check: $CustomTask$Check$Type): void
public "setCheckTimer"(checkTimer: integer): void
public "setMaxProgress"(maxProgress: long): void
public "setEnableButton"(enableButton: boolean): void
public "checkOnLogin"(): boolean
public "getMaxProgress"(): long
public "onButtonClicked"(button: $Button$Type, canClick: boolean): void
public "writeNetData"(buffer: $FriendlyByteBuf$Type): void
public "readNetData"(buffer: $FriendlyByteBuf$Type): void
get "type"(): $TaskType
set "check"(value: $CustomTask$Check$Type)
set "checkTimer"(value: integer)
set "maxProgress"(value: long)
set "enableButton"(value: boolean)
get "maxProgress"(): long
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CustomTask$Type = ($CustomTask);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CustomTask_ = $CustomTask$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/ui/input/$KeyModifiers" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $KeyModifiers {
static readonly "NONE": $KeyModifiers
readonly "modifiers": integer

constructor(m: integer)

public "start"(): boolean
public "shift"(): boolean
public "control"(): boolean
public "alt"(): boolean
public "numLock"(): boolean
public "capsLock"(): boolean
public "onlyControl"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $KeyModifiers$Type = ($KeyModifiers);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $KeyModifiers_ = $KeyModifiers$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/quest/$Chapter" {
import {$Quest, $Quest$Type} from "packages/dev/ftb/mods/ftbquests/quest/$Quest"
import {$BaseQuestFile, $BaseQuestFile$Type} from "packages/dev/ftb/mods/ftbquests/quest/$BaseQuestFile"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$ConfigGroup, $ConfigGroup$Type} from "packages/dev/ftb/mods/ftblibrary/config/$ConfigGroup"
import {$QuestObjectType, $QuestObjectType$Type} from "packages/dev/ftb/mods/ftbquests/quest/$QuestObjectType"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$Icon, $Icon$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Icon"
import {$Movable, $Movable$Type} from "packages/dev/ftb/mods/ftbquests/quest/$Movable"
import {$TeamData, $TeamData$Type} from "packages/dev/ftb/mods/ftbquests/quest/$TeamData"
import {$ChapterImage, $ChapterImage$Type} from "packages/dev/ftb/mods/ftbquests/quest/$ChapterImage"
import {$QuestObject, $QuestObject$Type} from "packages/dev/ftb/mods/ftbquests/quest/$QuestObject"
import {$ProgressionMode, $ProgressionMode$Type} from "packages/dev/ftb/mods/ftbquests/quest/$ProgressionMode"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$QuestProgressEventData, $QuestProgressEventData$Type} from "packages/dev/ftb/mods/ftbquests/events/$QuestProgressEventData"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$QuestLink, $QuestLink$Type} from "packages/dev/ftb/mods/ftbquests/quest/$QuestLink"
import {$ChapterGroup, $ChapterGroup$Type} from "packages/dev/ftb/mods/ftbquests/quest/$ChapterGroup"

export class $Chapter extends $QuestObject {
readonly "file": $BaseQuestFile
readonly "id": long

constructor(id: long, file: $BaseQuestFile$Type, group: $ChapterGroup$Type)
constructor(id: long, file: $BaseQuestFile$Type, group: $ChapterGroup$Type, filename: string)

public "getPath"(): $Optional<(string)>
public "getIndex"(): integer
public "getChildren"(): $Collection<(any)>
public "getObjectType"(): $QuestObjectType
public "deleteSelf"(): void
public "getQuestFile"(): $BaseQuestFile
public "deleteChildren"(): void
public "isVisible"(data: $TeamData$Type): boolean
public "readData"(nbt: $CompoundTag$Type): void
public "getAltIcon"(): $Icon
public "removeQuest"(quest: $Quest$Type): void
public "getQuestChapter"(): $Chapter
public "setDefaultQuestShape"(defaultQuestShape: string): void
public "hasAnyVisibleChildren"(): boolean
public "getFilename"(): string
public "getRelativeProgressFromChildren"(data: $TeamData$Type): integer
public "hasUnclaimedRewardsRaw"(teamData: $TeamData$Type, player: $UUID$Type): boolean
public "getDefaultQuestShape"(): string
public "isDefaultRepeatable"(): boolean
public "hideQuestUntilDepsVisible"(): boolean
public "isRequireSequentialTasks"(): boolean
public "getDefaultQuestSize"(): double
public "hideQuestDetailsUntilStartable"(): boolean
public "addQuest"(quest: $Quest$Type): void
public "getDefaultMinWidth"(): integer
public "setAutofocus"(id: long): void
public "getAutofocus"(): $Optional<($Movable)>
public "isAutofocus"(id: long): boolean
public "hasGroup"(): boolean
public "removeImage"(image: $ChapterImage$Type): void
public "removeQuestLink"(link: $QuestLink$Type): void
public "getGroup"(): $ChapterGroup
public "onCompleted"(data: $QuestProgressEventData$Type<(any)>): void
public "onCreated"(): void
public "onStarted"(data: $QuestProgressEventData$Type<(any)>): void
public "clearCachedData"(): void
public "isAlwaysInvisible"(): boolean
public "getQuestLinks"(): $List<($QuestLink)>
public "getQuests"(): $List<($Quest)>
public "addQuestLink"(link: $QuestLink$Type): void
public "getProgressionMode"(): $ProgressionMode
public "getRawSubtitle"(): $List<(string)>
public "consumeItems"(): boolean
public "addImage"(image: $ChapterImage$Type): void
public "writeNetData"(buffer: $FriendlyByteBuf$Type): void
public "writeData"(nbt: $CompoundTag$Type): void
public "getImages"(): $List<($ChapterImage)>
public "fillConfigGroup"(config: $ConfigGroup$Type): void
public "readNetData"(buffer: $FriendlyByteBuf$Type): void
get "path"(): $Optional<(string)>
get "index"(): integer
get "children"(): $Collection<(any)>
get "objectType"(): $QuestObjectType
get "questFile"(): $BaseQuestFile
get "altIcon"(): $Icon
get "questChapter"(): $Chapter
set "defaultQuestShape"(value: string)
get "filename"(): string
get "defaultQuestShape"(): string
get "defaultRepeatable"(): boolean
get "requireSequentialTasks"(): boolean
get "defaultQuestSize"(): double
get "defaultMinWidth"(): integer
set "autofocus"(value: long)
get "autofocus"(): $Optional<($Movable)>
get "group"(): $ChapterGroup
get "alwaysInvisible"(): boolean
get "questLinks"(): $List<($QuestLink)>
get "quests"(): $List<($Quest)>
get "progressionMode"(): $ProgressionMode
get "rawSubtitle"(): $List<(string)>
get "images"(): $List<($ChapterImage)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Chapter$Type = ($Chapter);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Chapter_ = $Chapter$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/integration/permissions/$FallbackPermissionProvider" {
import {$PermissionProvider, $PermissionProvider$Type} from "packages/dev/ftb/mods/ftblibrary/integration/permissions/$PermissionProvider"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"

export class $FallbackPermissionProvider implements $PermissionProvider {

constructor()

public "getName"(): string
public "getStringPermission"(player: $ServerPlayer$Type, nodeName: string, def: string): string
public "getIntegerPermission"(player: $ServerPlayer$Type, nodeName: string, def: integer): integer
public "getBooleanPermission"(player: $ServerPlayer$Type, nodeName: string, def: boolean): boolean
get "name"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FallbackPermissionProvider$Type = ($FallbackPermissionProvider);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FallbackPermissionProvider_ = $FallbackPermissionProvider$Type;
}}
declare module "packages/dev/ftb/mods/ftbteams/data/$FTBTUtils" {
import {$Color4I, $Color4I$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Color4I"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$MinecraftServer, $MinecraftServer$Type} from "packages/net/minecraft/server/$MinecraftServer"
import {$GameProfile, $GameProfile$Type} from "packages/com/mojang/authlib/$GameProfile"

export class $FTBTUtils {
static readonly "NO_PROFILE": $GameProfile

constructor()

public static "normalize"(profile: $GameProfile$Type): $GameProfile
public static "randomColor"(): $Color4I
public static "getDefaultPartyName"(server: $MinecraftServer$Type, playerId: $UUID$Type, player: $ServerPlayer$Type): string
public static "canPlayerUseCommand"(player: $ServerPlayer$Type, command: string): boolean
public static "getPlayerByUUID"(server: $MinecraftServer$Type, id: $UUID$Type): $ServerPlayer
public static "deserializeProfile"(string: string): $GameProfile
public static "serializeProfile"(profile: $GameProfile$Type): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FTBTUtils$Type = ($FTBTUtils);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FTBTUtils_ = $FTBTUtils$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/icon/$Icon" {
import {$Color4I, $Color4I$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Color4I"
import {$JsonElement, $JsonElement$Type} from "packages/com/google/gson/$JsonElement"
import {$Drawable, $Drawable$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Drawable"
import {$PixelBuffer, $PixelBuffer$Type} from "packages/dev/ftb/mods/ftblibrary/math/$PixelBuffer"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $Icon implements $Drawable {

constructor()

public "equals"(o: any): boolean
public "hashCode"(): integer
public "isEmpty"(): boolean
public static "empty"(): $Color4I
public "copy"(): $Icon
public "getIngredient"(): any
public static "getIcon"(id: string): $Icon
public static "getIcon"(id: $ResourceLocation$Type): $Icon
public static "getIcon"(json: $JsonElement$Type): $Icon
public "combineWith"(...icons: ($Icon$Type)[]): $Icon
public "combineWith"(icon: $Icon$Type): $Icon
public "withBorder"(color: $Color4I$Type, roundEdges: boolean): $Icon
public "withPadding"(padding: integer): $Icon
public "withUV"(x: float, y: float, w: float, h: float, tw: float, th: float): $Icon
public "withUV"(u0: float, v0: float, u1: float, v1: float): $Icon
public "hasPixelBuffer"(): boolean
public "createPixelBuffer"(): $PixelBuffer
public "withColor"(color: $Color4I$Type): $Icon
public "withTint"(color: $Color4I$Type): $Icon
public "getJson"(): $JsonElement
public "draw"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: integer, arg4: integer): void
public "drawStatic"(graphics: $GuiGraphics$Type, x: integer, y: integer, w: integer, h: integer): void
public "draw3D"(graphics: $GuiGraphics$Type): void
get "ingredient"(): any
get "json"(): $JsonElement
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Icon$Type = ($Icon);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Icon_ = $Icon$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/net/$TeamDataChangedMessage" {
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$NetworkManager$PacketContext, $NetworkManager$PacketContext$Type} from "packages/dev/architectury/networking/$NetworkManager$PacketContext"
import {$BaseS2CMessage, $BaseS2CMessage$Type} from "packages/dev/architectury/networking/simple/$BaseS2CMessage"
import {$TeamDataUpdate, $TeamDataUpdate$Type} from "packages/dev/ftb/mods/ftbquests/net/$TeamDataUpdate"
import {$MessageType, $MessageType$Type} from "packages/dev/architectury/networking/simple/$MessageType"

export class $TeamDataChangedMessage extends $BaseS2CMessage {

constructor(oldData: $TeamDataUpdate$Type, newData: $TeamDataUpdate$Type)

public "write"(buffer: $FriendlyByteBuf$Type): void
public "getType"(): $MessageType
public "handle"(context: $NetworkManager$PacketContext$Type): void
get "type"(): $MessageType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TeamDataChangedMessage$Type = ($TeamDataChangedMessage);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TeamDataChangedMessage_ = $TeamDataChangedMessage$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/ui/$CheckBoxList$CheckBoxEntry" {
import {$CheckBoxList, $CheckBoxList$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$CheckBoxList"
import {$List, $List$Type} from "packages/java/util/$List"
import {$MouseButton, $MouseButton$Type} from "packages/dev/ftb/mods/ftblibrary/ui/input/$MouseButton"

export class $CheckBoxList$CheckBoxEntry {

constructor(name: string, checkBoxList: $CheckBoxList$Type)

public "getIndex"(): integer
public "addMouseOverText"(list: $List$Type<(string)>): void
public "onValueChanged"(): void
public "select"(index: integer): $CheckBoxList$CheckBoxEntry
public "onClicked"(button: $MouseButton$Type, index: integer): void
get "index"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CheckBoxList$CheckBoxEntry$Type = ($CheckBoxList$CheckBoxEntry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CheckBoxList$CheckBoxEntry_ = $CheckBoxList$CheckBoxEntry$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/util/$TextComponentParser" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$Char2ObjectOpenHashMap, $Char2ObjectOpenHashMap$Type} from "packages/it/unimi/dsi/fastutil/chars/$Char2ObjectOpenHashMap"
import {$ChatFormatting, $ChatFormatting$Type} from "packages/net/minecraft/$ChatFormatting"

export class $TextComponentParser {
static readonly "CODE_TO_FORMATTING": $Char2ObjectOpenHashMap<($ChatFormatting)>


public static "parse"(text: string, substitutes: $Function$Type<(string), ($Component$Type)>): $Component
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TextComponentParser$Type = ($TextComponentParser);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TextComponentParser_ = $TextComponentParser$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/config/$ColorConfig" {
import {$Color4I, $Color4I$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Color4I"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Widget, $Widget$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Widget"
import {$ConfigCallback, $ConfigCallback$Type} from "packages/dev/ftb/mods/ftblibrary/config/$ConfigCallback"
import {$ConfigValue, $ConfigValue$Type} from "packages/dev/ftb/mods/ftblibrary/config/$ConfigValue"
import {$MouseButton, $MouseButton$Type} from "packages/dev/ftb/mods/ftblibrary/ui/input/$MouseButton"

export class $ColorConfig extends $ConfigValue<($Color4I)> {
static readonly "NULL_TEXT": $Component
 "id": string

constructor()

public "withAlphaEditing"(): $ColorConfig
public "isAllowAlphaEdit"(): boolean
public "getStringForGUI"(v: $Color4I$Type): $Component
public "onClicked"(clicked: $Widget$Type, button: $MouseButton$Type, callback: $ConfigCallback$Type): void
get "allowAlphaEdit"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ColorConfig$Type = ($ColorConfig);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ColorConfig_ = $ColorConfig$Type;
}}
declare module "packages/dev/ftb/mods/ftbteams/api/$FTBTeamsAPI" {
import {$FTBTeamsAPI$API, $FTBTeamsAPI$API$Type} from "packages/dev/ftb/mods/ftbteams/api/$FTBTeamsAPI$API"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $FTBTeamsAPI {
static readonly "MOD_ID": string
static readonly "MOD_NAME": string

constructor()

public static "rl"(path: string): $ResourceLocation
public static "api"(): $FTBTeamsAPI$API
public static "_init"(instance: $FTBTeamsAPI$API$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FTBTeamsAPI$Type = ($FTBTeamsAPI);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FTBTeamsAPI_ = $FTBTeamsAPI$Type;
}}
declare module "packages/dev/ftb/mods/ftbteams/data/$TeamManagerImpl" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Color4I, $Color4I$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Color4I"
import {$PlayerTeam, $PlayerTeam$Type} from "packages/dev/ftb/mods/ftbteams/data/$PlayerTeam"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Pair, $Pair$Type} from "packages/org/apache/commons/lang3/tuple/$Pair"
import {$ServerTeam, $ServerTeam$Type} from "packages/dev/ftb/mods/ftbteams/data/$ServerTeam"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$CommandSourceStack, $CommandSourceStack$Type} from "packages/net/minecraft/commands/$CommandSourceStack"
import {$SNBTCompoundTag, $SNBTCompoundTag$Type} from "packages/dev/ftb/mods/ftblibrary/snbt/$SNBTCompoundTag"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$LevelResource, $LevelResource$Type} from "packages/net/minecraft/world/level/storage/$LevelResource"
import {$PartyTeam, $PartyTeam$Type} from "packages/dev/ftb/mods/ftbteams/data/$PartyTeam"
import {$TeamManager, $TeamManager$Type} from "packages/dev/ftb/mods/ftbteams/api/$TeamManager"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$MinecraftServer, $MinecraftServer$Type} from "packages/net/minecraft/server/$MinecraftServer"
import {$Team, $Team$Type} from "packages/dev/ftb/mods/ftbteams/api/$Team"
import {$AbstractTeam, $AbstractTeam$Type} from "packages/dev/ftb/mods/ftbteams/data/$AbstractTeam"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $TeamManagerImpl implements $TeamManager {
static readonly "FOLDER_NAME": $LevelResource
static "INSTANCE": $TeamManagerImpl

constructor(s: $MinecraftServer$Type)

public "load"(): void
public "getId"(): $UUID
public "getPersonalTeamForPlayerID"(uuid: $UUID$Type): $PlayerTeam
public "getPlayerName"(id: $UUID$Type): $Component
public "createServer"(source: $CommandSourceStack$Type, name: string): $Pair<(integer), ($ServerTeam)>
public "getExtraData"(): $CompoundTag
public "syncAllToPlayer"(player: $ServerPlayer$Type, selfTeam: $AbstractTeam$Type): void
public "getServer"(): $MinecraftServer
public "playerLoggedIn"(player: $ServerPlayer$Type, id: $UUID$Type, name: string): void
public "syncToAll"(...teams: ($Team$Type)[]): void
public "getTeamByName"(name: string): $Optional<($Team)>
public "getTeamByID"(teamId: $UUID$Type): $Optional<($Team)>
public "getTeamForPlayerID"(uuid: $UUID$Type): $Optional<($Team)>
public "getTeams"(): $Collection<($Team)>
public "markDirty"(): void
public "getTeamForPlayer"(player: $ServerPlayer$Type): $Optional<($Team)>
public "createPartyTeam"(player: $ServerPlayer$Type, name: string, description: string, color: $Color4I$Type): $Team
public "getTeamMap"(): $Map<($UUID), ($AbstractTeam)>
public "getTeamNameMap"(): $Map<(string), ($Team)>
public "createParty"(player: $ServerPlayer$Type, name: string): $Pair<(integer), ($PartyTeam)>
public "createParty"(playerId: $UUID$Type, player: $ServerPlayer$Type, name: string, description: string, color: $Color4I$Type): $Pair<(integer), ($PartyTeam)>
public "saveNow"(): void
public "playerLoggedOut"(player: $ServerPlayer$Type): void
public "getPlayerTeamForPlayerID"(uuid: $UUID$Type): $Optional<($Team)>
public "arePlayersInSameTeam"(id1: $UUID$Type, id2: $UUID$Type): boolean
public "getKnownPlayerTeams"(): $Map<($UUID), (any)>
public "serializeNBT"(): $SNBTCompoundTag
get "id"(): $UUID
get "extraData"(): $CompoundTag
get "server"(): $MinecraftServer
get "teams"(): $Collection<($Team)>
get "teamMap"(): $Map<($UUID), ($AbstractTeam)>
get "teamNameMap"(): $Map<(string), ($Team)>
get "knownPlayerTeams"(): $Map<($UUID), (any)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TeamManagerImpl$Type = ($TeamManagerImpl);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TeamManagerImpl_ = $TeamManagerImpl$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/client/gui/quests/$OtherButtonsPanel" {
import {$Panel, $Panel$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Panel"

export class $OtherButtonsPanel extends $Panel {
 "posX": integer
 "posY": integer
 "width": integer
 "height": integer

constructor(panel: $Panel$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $OtherButtonsPanel$Type = ($OtherButtonsPanel);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $OtherButtonsPanel_ = $OtherButtonsPanel$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/quest/reward/$ItemReward" {
import {$Quest, $Quest$Type} from "packages/dev/ftb/mods/ftbquests/quest/$Quest"
import {$PositionedIngredient, $PositionedIngredient$Type} from "packages/dev/ftb/mods/ftblibrary/util/client/$PositionedIngredient"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$ConfigGroup, $ConfigGroup$Type} from "packages/dev/ftb/mods/ftblibrary/config/$ConfigGroup"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Widget, $Widget$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Widget"
import {$Icon, $Icon$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Icon"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$RewardType, $RewardType$Type} from "packages/dev/ftb/mods/ftbquests/quest/reward/$RewardType"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$Reward, $Reward$Type} from "packages/dev/ftb/mods/ftbquests/quest/reward/$Reward"

export class $ItemReward extends $Reward {
readonly "id": long

constructor(id: long, quest: $Quest$Type)
constructor(id: long, quest: $Quest$Type, is: $ItemStack$Type, count: integer)
constructor(id: long, quest: $Quest$Type, is: $ItemStack$Type)

public "getType"(): $RewardType
public "getCount"(): integer
public "getItem"(): $ItemStack
public "getIngredient"(widget: $Widget$Type): $Optional<($PositionedIngredient)>
public "getButtonText"(): string
public "claim"(player: $ServerPlayer$Type, notify: boolean): void
public "readData"(nbt: $CompoundTag$Type): void
public "getAltTitle"(): $MutableComponent
public "getAltIcon"(): $Icon
public "automatedClaimPost"(blockEntity: $BlockEntity$Type, playerId: $UUID$Type, player: $ServerPlayer$Type): void
public "automatedClaimPre"(blockEntity: $BlockEntity$Type, items: $List$Type<($ItemStack$Type)>, random: $RandomSource$Type, playerId: $UUID$Type, player: $ServerPlayer$Type): boolean
public "writeNetData"(buffer: $FriendlyByteBuf$Type): void
public "writeData"(nbt: $CompoundTag$Type): void
public "fillConfigGroup"(config: $ConfigGroup$Type): void
public "readNetData"(buffer: $FriendlyByteBuf$Type): void
get "type"(): $RewardType
get "count"(): integer
get "item"(): $ItemStack
get "buttonText"(): string
get "altTitle"(): $MutableComponent
get "altIcon"(): $Icon
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ItemReward$Type = ($ItemReward);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ItemReward_ = $ItemReward$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/util/$TooltipList" {
import {$Font, $Font$Type} from "packages/net/minecraft/client/gui/$Font"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Style, $Style$Type} from "packages/net/minecraft/network/chat/$Style"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$ChatFormatting, $ChatFormatting$Type} from "packages/net/minecraft/$ChatFormatting"

export class $TooltipList {
 "zOffset": integer
 "zOffsetItemTooltip": integer
 "backgroundColor": integer
 "borderColorStart": integer
 "borderColorEnd": integer
 "maxWidth": integer
 "xOffset": integer
 "yOffset": integer

constructor()

public "add"(component: $Component$Type): void
public "reset"(): void
public "string"(text: string): void
public "styledString"(text: string, style: $Style$Type): void
public "styledString"(text: string, color: $ChatFormatting$Type): void
public "render"(graphics: $GuiGraphics$Type, mouseX: integer, mouseY: integer, screenWidth: integer, screenHeight: integer, font: $Font$Type): void
public "getLines"(): $List<($Component)>
public "translate"(key: string, ...objects: (any)[]): void
public "shouldRender"(): boolean
public "blankLine"(): void
public "styledTranslate"(key: string, style: $Style$Type, ...objects: (any)[]): void
get "lines"(): $List<($Component)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TooltipList$Type = ($TooltipList);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TooltipList_ = $TooltipList$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/config/ui/$SelectImageResourceScreen" {
import {$ResourceSearchMode, $ResourceSearchMode$Type} from "packages/dev/ftb/mods/ftblibrary/config/ui/$ResourceSearchMode"
import {$ResourceSelectorScreen, $ResourceSelectorScreen$Type} from "packages/dev/ftb/mods/ftblibrary/config/ui/$ResourceSelectorScreen"
import {$ConfigCallback, $ConfigCallback$Type} from "packages/dev/ftb/mods/ftblibrary/config/$ConfigCallback"
import {$Pair, $Pair$Type} from "packages/com/mojang/datafixers/util/$Pair"
import {$ResourceConfigValue, $ResourceConfigValue$Type} from "packages/dev/ftb/mods/ftblibrary/config/$ResourceConfigValue"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$SearchModeIndex, $SearchModeIndex$Type} from "packages/dev/ftb/mods/ftblibrary/config/ui/$SearchModeIndex"

export class $SelectImageResourceScreen extends $ResourceSelectorScreen<($ResourceLocation)> {
static readonly "KNOWN_MODES": $SearchModeIndex<($ResourceSearchMode<($ResourceLocation)>)>
 "update": long
static readonly "NO_INSET": $Pair<(integer), (integer)>
 "posX": integer
 "posY": integer
 "width": integer
 "height": integer

constructor(config: $ResourceConfigValue$Type<($ResourceLocation$Type)>, callback: $ConfigCallback$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SelectImageResourceScreen$Type = ($SelectImageResourceScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SelectImageResourceScreen_ = $SelectImageResourceScreen$Type;
}}
declare module "packages/dev/ftb/mods/ftbxmodcompat/ftbquests/jei/$JEIRecipeTypes" {
import {$RecipeType, $RecipeType$Type} from "packages/mezz/jei/api/recipe/$RecipeType"
import {$WrappedLootCrate, $WrappedLootCrate$Type} from "packages/dev/ftb/mods/ftbxmodcompat/ftbquests/recipemod_common/$WrappedLootCrate"
import {$WrappedQuest, $WrappedQuest$Type} from "packages/dev/ftb/mods/ftbxmodcompat/ftbquests/recipemod_common/$WrappedQuest"

export class $JEIRecipeTypes {
static "QUEST": $RecipeType<($WrappedQuest)>
static "LOOT_CRATE": $RecipeType<($WrappedLootCrate)>

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $JEIRecipeTypes$Type = ($JEIRecipeTypes);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $JEIRecipeTypes_ = $JEIRecipeTypes$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/block/forge/$ForgeTaskScreenBlockEntity" {
import {$LazyOptional, $LazyOptional$Type} from "packages/net/minecraftforge/common/util/$LazyOptional"
import {$TaskScreenBlockEntity, $TaskScreenBlockEntity$Type} from "packages/dev/ftb/mods/ftbquests/block/entity/$TaskScreenBlockEntity"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Capability, $Capability$Type} from "packages/net/minecraftforge/common/capabilities/$Capability"
import {$AABB, $AABB$Type} from "packages/net/minecraft/world/phys/$AABB"

export class $ForgeTaskScreenBlockEntity extends $TaskScreenBlockEntity {
 "fakeTextureUV": (float)[]
 "blockState": $BlockState

constructor(blockPos: $BlockPos$Type, blockState: $BlockState$Type)

public "invalidateCaps"(): void
public "getCapability"<T>(cap: $Capability$Type<(T)>, side: $Direction$Type): $LazyOptional<(T)>
public "getRenderBoundingBox"(): $AABB
get "renderBoundingBox"(): $AABB
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ForgeTaskScreenBlockEntity$Type = ($ForgeTaskScreenBlockEntity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ForgeTaskScreenBlockEntity_ = $ForgeTaskScreenBlockEntity$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/client/gui/quests/$TooltipContextMenuItem" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$ContextMenuItem, $ContextMenuItem$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$ContextMenuItem"
import {$Icon, $Icon$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Icon"
import {$TooltipList, $TooltipList$Type} from "packages/dev/ftb/mods/ftblibrary/util/$TooltipList"
import {$Button, $Button$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Button"

export class $TooltipContextMenuItem extends $ContextMenuItem {
static readonly "SEPARATOR": $ContextMenuItem

constructor(title: $Component$Type, icon: $Icon$Type, callback: $Consumer$Type<($Button$Type)>, ...tooltips: ($Component$Type)[])

public "addMouseOverText"(list: $TooltipList$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TooltipContextMenuItem$Type = ($TooltipContextMenuItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TooltipContextMenuItem_ = $TooltipContextMenuItem$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/ui/$ContextMenu" {
import {$Panel, $Panel$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Panel"
import {$ModalPanel, $ModalPanel$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$ModalPanel"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ContextMenuItem, $ContextMenuItem$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$ContextMenuItem"
import {$Theme, $Theme$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Theme"
import {$MouseButton, $MouseButton$Type} from "packages/dev/ftb/mods/ftblibrary/ui/input/$MouseButton"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $ContextMenu extends $ModalPanel {
 "posX": integer
 "posY": integer
 "width": integer
 "height": integer

constructor(panel: $Panel$Type, i: $List$Type<($ContextMenuItem$Type)>)

public "alignWidgets"(): void
public "addWidgets"(): void
public "draw"(graphics: $GuiGraphics$Type, theme: $Theme$Type, x: integer, y: integer, w: integer, h: integer): void
public "mousePressed"(button: $MouseButton$Type): boolean
public "setMaxRows"(maxRows: integer): void
public "setDrawVerticalSeparators"(drawVerticalSeparators: boolean): void
public "drawBackground"(graphics: $GuiGraphics$Type, theme: $Theme$Type, x: integer, y: integer, w: integer, h: integer): void
set "maxRows"(value: integer)
set "drawVerticalSeparators"(value: boolean)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ContextMenu$Type = ($ContextMenu);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ContextMenu_ = $ContextMenu$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/quest/task/$CheckmarkTask" {
import {$Quest, $Quest$Type} from "packages/dev/ftb/mods/ftbquests/quest/$Quest"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$TaskType, $TaskType$Type} from "packages/dev/ftb/mods/ftbquests/quest/task/$TaskType"
import {$AbstractBooleanTask, $AbstractBooleanTask$Type} from "packages/dev/ftb/mods/ftbquests/quest/task/$AbstractBooleanTask"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$TeamData, $TeamData$Type} from "packages/dev/ftb/mods/ftbquests/quest/$TeamData"

export class $CheckmarkTask extends $AbstractBooleanTask {
readonly "id": long

constructor(id: long, quest: $Quest$Type)

public "getType"(): $TaskType
public "checkOnLogin"(): boolean
public "drawGUI"(teamData: $TeamData$Type, graphics: $GuiGraphics$Type, x: integer, y: integer, w: integer, h: integer): void
public "canSubmit"(teamData: $TeamData$Type, player: $ServerPlayer$Type): boolean
get "type"(): $TaskType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CheckmarkTask$Type = ($CheckmarkTask);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CheckmarkTask_ = $CheckmarkTask$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/net/$TaskScreenConfigResponse" {
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$TaskScreenBlockEntity, $TaskScreenBlockEntity$Type} from "packages/dev/ftb/mods/ftbquests/block/entity/$TaskScreenBlockEntity"
import {$NetworkManager$PacketContext, $NetworkManager$PacketContext$Type} from "packages/dev/architectury/networking/$NetworkManager$PacketContext"
import {$BaseC2SMessage, $BaseC2SMessage$Type} from "packages/dev/architectury/networking/simple/$BaseC2SMessage"
import {$MessageType, $MessageType$Type} from "packages/dev/architectury/networking/simple/$MessageType"

export class $TaskScreenConfigResponse extends $BaseC2SMessage {

constructor(taskScreenBlockEntity: $TaskScreenBlockEntity$Type)
constructor(buf: $FriendlyByteBuf$Type)

public "write"(buf: $FriendlyByteBuf$Type): void
public "getType"(): $MessageType
public "handle"(context: $NetworkManager$PacketContext$Type): void
get "type"(): $MessageType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TaskScreenConfigResponse$Type = ($TaskScreenConfigResponse);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TaskScreenConfigResponse_ = $TaskScreenConfigResponse$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/client/gui/quests/$RewardButton" {
import {$Panel, $Panel$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Panel"
import {$PositionedIngredient, $PositionedIngredient$Type} from "packages/dev/ftb/mods/ftblibrary/util/client/$PositionedIngredient"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Theme, $Theme$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Theme"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$MouseButton, $MouseButton$Type} from "packages/dev/ftb/mods/ftblibrary/ui/input/$MouseButton"
import {$Reward, $Reward$Type} from "packages/dev/ftb/mods/ftbquests/quest/reward/$Reward"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$TooltipList, $TooltipList$Type} from "packages/dev/ftb/mods/ftblibrary/util/$TooltipList"
import {$WidgetType, $WidgetType$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$WidgetType"
import {$Button, $Button$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Button"

export class $RewardButton extends $Button {
 "posX": integer
 "posY": integer
 "width": integer
 "height": integer

constructor(panel: $Panel$Type, reward: $Reward$Type)

public "draw"(graphics: $GuiGraphics$Type, theme: $Theme$Type, x: integer, y: integer, w: integer, h: integer): void
public "getWidgetType"(): $WidgetType
public "mousePressed"(button: $MouseButton$Type): boolean
public "addMouseOverText"(list: $TooltipList$Type): void
public "getTitle"(): $Component
public "getIngredientUnderMouse"(): $Optional<($PositionedIngredient)>
public "drawBackground"(graphics: $GuiGraphics$Type, theme: $Theme$Type, x: integer, y: integer, w: integer, h: integer): void
public "onClicked"(button: $MouseButton$Type): void
get "widgetType"(): $WidgetType
get "title"(): $Component
get "ingredientUnderMouse"(): $Optional<($PositionedIngredient)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RewardButton$Type = ($RewardButton);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RewardButton_ = $RewardButton$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/ui/$Button" {
import {$Panel, $Panel$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Panel"
import {$PositionedIngredient, $PositionedIngredient$Type} from "packages/dev/ftb/mods/ftblibrary/util/client/$PositionedIngredient"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$CursorType, $CursorType$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$CursorType"
import {$Widget, $Widget$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Widget"
import {$Icon, $Icon$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Icon"
import {$Theme, $Theme$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Theme"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$MouseButton, $MouseButton$Type} from "packages/dev/ftb/mods/ftblibrary/ui/input/$MouseButton"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $Button extends $Widget {
 "posX": integer
 "posY": integer
 "width": integer
 "height": integer

constructor(panel: $Panel$Type, t: $Component$Type, i: $Icon$Type)
constructor(panel: $Panel$Type)

public "draw"(graphics: $GuiGraphics$Type, theme: $Theme$Type, x: integer, y: integer, w: integer, h: integer): void
public "getCursor"(): $CursorType
public "setTitle"(s: $Component$Type): $Button
public "mousePressed"(button: $MouseButton$Type): boolean
public "getTitle"(): $Component
public "getIngredientUnderMouse"(): $Optional<($PositionedIngredient)>
public "setIcon"(i: $Icon$Type): $Button
public "drawBackground"(graphics: $GuiGraphics$Type, theme: $Theme$Type, x: integer, y: integer, w: integer, h: integer): void
public "drawIcon"(graphics: $GuiGraphics$Type, theme: $Theme$Type, x: integer, y: integer, w: integer, h: integer): void
public "onClicked"(arg0: $MouseButton$Type): void
get "cursor"(): $CursorType
set "title"(value: $Component$Type)
get "title"(): $Component
get "ingredientUnderMouse"(): $Optional<($PositionedIngredient)>
set "icon"(value: $Icon$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Button$Type = ($Button);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Button_ = $Button$Type;
}}
declare module "packages/dev/ftb/mods/ftbteams/api/$MethodsReturnNonnullByDefault" {
import {$Annotation, $Annotation$Type} from "packages/java/lang/annotation/$Annotation"
import {$Class, $Class$Type} from "packages/java/lang/$Class"

export interface $MethodsReturnNonnullByDefault extends $Annotation {

 "equals"(arg0: any): boolean
 "toString"(): string
 "hashCode"(): integer
 "annotationType"(): $Class<(any)>
}

export namespace $MethodsReturnNonnullByDefault {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MethodsReturnNonnullByDefault$Type = ($MethodsReturnNonnullByDefault);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MethodsReturnNonnullByDefault_ = $MethodsReturnNonnullByDefault$Type;
}}
declare module "packages/dev/ftb/mods/ftbteams/client/gui/$InviteScreen" {
import {$BaseInvitationScreen, $BaseInvitationScreen$Type} from "packages/dev/ftb/mods/ftbteams/client/gui/$BaseInvitationScreen"

export class $InviteScreen extends $BaseInvitationScreen {
 "posX": integer
 "posY": integer
 "width": integer
 "height": integer

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $InviteScreen$Type = ($InviteScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $InviteScreen_ = $InviteScreen$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/net/$EditObjectMessage" {
import {$QuestObjectBase, $QuestObjectBase$Type} from "packages/dev/ftb/mods/ftbquests/quest/$QuestObjectBase"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$NetworkManager$PacketContext, $NetworkManager$PacketContext$Type} from "packages/dev/architectury/networking/$NetworkManager$PacketContext"
import {$BaseC2SMessage, $BaseC2SMessage$Type} from "packages/dev/architectury/networking/simple/$BaseC2SMessage"
import {$MessageType, $MessageType$Type} from "packages/dev/architectury/networking/simple/$MessageType"

export class $EditObjectMessage extends $BaseC2SMessage {

constructor(o: $QuestObjectBase$Type)

public "write"(buffer: $FriendlyByteBuf$Type): void
public "getType"(): $MessageType
public "handle"(context: $NetworkManager$PacketContext$Type): void
get "type"(): $MessageType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EditObjectMessage$Type = ($EditObjectMessage);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EditObjectMessage_ = $EditObjectMessage$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/item/$ScreenBlockItem$ScreenSize" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $ScreenBlockItem$ScreenSize extends $Enum<($ScreenBlockItem$ScreenSize)> {
static readonly "ONE_X_ONE": $ScreenBlockItem$ScreenSize
static readonly "THREE_X_THREE": $ScreenBlockItem$ScreenSize
static readonly "FIVE_X_FIVE": $ScreenBlockItem$ScreenSize
static readonly "SEVEN_X_SEVEN": $ScreenBlockItem$ScreenSize


public static "values"(): ($ScreenBlockItem$ScreenSize)[]
public static "valueOf"(name: string): $ScreenBlockItem$ScreenSize
public "getSize"(): integer
get "size"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ScreenBlockItem$ScreenSize$Type = (("three_x_three") | ("one_x_one") | ("five_x_five") | ("seven_x_seven")) | ($ScreenBlockItem$ScreenSize);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ScreenBlockItem$ScreenSize_ = $ScreenBlockItem$ScreenSize$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/math/$ChunkDimPos" {
import {$ChunkPos, $ChunkPos$Type} from "packages/net/minecraft/world/level/$ChunkPos"
import {$Comparable, $Comparable$Type} from "packages/java/lang/$Comparable"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ResourceKey, $ResourceKey$Type} from "packages/net/minecraft/resources/$ResourceKey"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $ChunkDimPos implements $Comparable<($ChunkDimPos)> {

constructor(entity: $Entity$Type)
constructor(world: $Level$Type, pos: $BlockPos$Type)
constructor(dim: $ResourceKey$Type<($Level$Type)>, pos: $ChunkPos$Type)
constructor(dim: $ResourceKey$Type<($Level$Type)>, x: integer, z: integer)

public "equals"(obj: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "compareTo"(o: $ChunkDimPos$Type): integer
public "offset"(ox: integer, oz: integer): $ChunkDimPos
public "x"(): integer
public "z"(): integer
public "dimension"(): $ResourceKey<($Level)>
public "getChunkPos"(): $ChunkPos
get "chunkPos"(): $ChunkPos
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ChunkDimPos$Type = ($ChunkDimPos);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ChunkDimPos_ = $ChunkDimPos$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/item/$QuestBookItem" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$InteractionResultHolder, $InteractionResultHolder$Type} from "packages/net/minecraft/world/$InteractionResultHolder"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $QuestBookItem extends $Item {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor()

public "use"(world: $Level$Type, player: $Player$Type, hand: $InteractionHand$Type): $InteractionResultHolder<($ItemStack)>
public "appendHoverText"(stack: $ItemStack$Type, worldIn: $Level$Type, tooltip: $List$Type<($Component$Type)>, flagIn: $TooltipFlag$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $QuestBookItem$Type = ($QuestBookItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $QuestBookItem_ = $QuestBookItem$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/quest/task/forge/$ForgeEnergyTask" {
import {$Quest, $Quest$Type} from "packages/dev/ftb/mods/ftbquests/quest/$Quest"
import {$EnergyTaskClientData, $EnergyTaskClientData$Type} from "packages/dev/ftb/mods/ftbquests/client/$EnergyTaskClientData"
import {$TaskType, $TaskType$Type} from "packages/dev/ftb/mods/ftbquests/quest/task/$TaskType"
import {$EnergyTask, $EnergyTask$Type} from "packages/dev/ftb/mods/ftbquests/quest/task/$EnergyTask"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $ForgeEnergyTask extends $EnergyTask {
static "TYPE": $TaskType
static readonly "EMPTY_TEXTURE": $ResourceLocation
static readonly "FULL_TEXTURE": $ResourceLocation
readonly "id": long

constructor(id: long, quest: $Quest$Type)

public "getType"(): $TaskType
public "getClientData"(): $EnergyTaskClientData
get "type"(): $TaskType
get "clientData"(): $EnergyTaskClientData
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ForgeEnergyTask$Type = ($ForgeEnergyTask);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ForgeEnergyTask_ = $ForgeEnergyTask$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/net/$UpdateTeamDataMessage" {
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$NetworkManager$PacketContext, $NetworkManager$PacketContext$Type} from "packages/dev/architectury/networking/$NetworkManager$PacketContext"
import {$BaseS2CMessage, $BaseS2CMessage$Type} from "packages/dev/architectury/networking/simple/$BaseS2CMessage"
import {$TeamData, $TeamData$Type} from "packages/dev/ftb/mods/ftbquests/quest/$TeamData"
import {$MessageType, $MessageType$Type} from "packages/dev/architectury/networking/simple/$MessageType"

export class $UpdateTeamDataMessage extends $BaseS2CMessage {

constructor(data: $TeamData$Type)

public "write"(buffer: $FriendlyByteBuf$Type): void
public "getType"(): $MessageType
public "handle"(context: $NetworkManager$PacketContext$Type): void
get "type"(): $MessageType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $UpdateTeamDataMessage$Type = ($UpdateTeamDataMessage);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $UpdateTeamDataMessage_ = $UpdateTeamDataMessage$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/snbt/config/$StringListValue" {
import {$ConfigGroup, $ConfigGroup$Type} from "packages/dev/ftb/mods/ftblibrary/config/$ConfigGroup"
import {$SNBTConfig, $SNBTConfig$Type} from "packages/dev/ftb/mods/ftblibrary/snbt/config/$SNBTConfig"
import {$SNBTCompoundTag, $SNBTCompoundTag$Type} from "packages/dev/ftb/mods/ftblibrary/snbt/$SNBTCompoundTag"
import {$BaseValue, $BaseValue$Type} from "packages/dev/ftb/mods/ftblibrary/snbt/config/$BaseValue"
import {$List, $List$Type} from "packages/java/util/$List"

export class $StringListValue extends $BaseValue<($List<(string)>)> {
readonly "parent": $SNBTConfig
readonly "key": string
readonly "defaultValue": T


public "set"(v: $List$Type<(string)>): void
public "write"(tag: $SNBTCompoundTag$Type): void
public "read"(tag: $SNBTCompoundTag$Type): void
public "createClientConfig"(group: $ConfigGroup$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $StringListValue$Type = ($StringListValue);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $StringListValue_ = $StringListValue$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/util/$BooleanConsumer" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $BooleanConsumer {

 "accept"(arg0: boolean): void

(arg0: boolean): void
}

export namespace $BooleanConsumer {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BooleanConsumer$Type = ($BooleanConsumer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BooleanConsumer_ = $BooleanConsumer$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/client/$FTBQuestsClientConfig" {
import {$SNBTConfig, $SNBTConfig$Type} from "packages/dev/ftb/mods/ftblibrary/snbt/config/$SNBTConfig"
import {$IntValue, $IntValue$Type} from "packages/dev/ftb/mods/ftblibrary/snbt/config/$IntValue"
import {$PanelPositioning, $PanelPositioning$Type} from "packages/dev/ftb/mods/ftblibrary/util/$PanelPositioning"
import {$EnumValue, $EnumValue$Type} from "packages/dev/ftb/mods/ftblibrary/snbt/config/$EnumValue"
import {$BooleanValue, $BooleanValue$Type} from "packages/dev/ftb/mods/ftblibrary/snbt/config/$BooleanValue"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"

export interface $FTBQuestsClientConfig {

}

export namespace $FTBQuestsClientConfig {
const CONFIG: $SNBTConfig
const CLIENT_CONFIG: string
const UI: $SNBTConfig
const OLD_SCROLL_WHEEL: $BooleanValue
const PINNED_QUESTS_POS: $EnumValue<($PanelPositioning)>
const PINNED_QUESTS_INSET_X: $IntValue
const PINNED_QUESTS_INSET_Y: $IntValue
function init(): void
function openSettings(screen: $Screen$Type): void
function saveConfig(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FTBQuestsClientConfig$Type = ($FTBQuestsClientConfig);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FTBQuestsClientConfig_ = $FTBQuestsClientConfig$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/quest/reward/$RewardClaimType" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $RewardClaimType extends $Enum<($RewardClaimType)> {
static readonly "CAN_CLAIM": $RewardClaimType
static readonly "CANT_CLAIM": $RewardClaimType
static readonly "CLAIMED": $RewardClaimType


public "isClaimed"(): boolean
public "canClaim"(): boolean
public "cantClaim"(): boolean
public static "values"(): ($RewardClaimType)[]
public static "valueOf"(name: string): $RewardClaimType
get "claimed"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RewardClaimType$Type = (("can_claim") | ("claimed") | ("cant_claim")) | ($RewardClaimType);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RewardClaimType_ = $RewardClaimType$Type;
}}
declare module "packages/dev/ftb/mods/ftbteams/api/event/$PlayerLeftPartyTeamEvent" {
import {$TeamEvent, $TeamEvent$Type} from "packages/dev/ftb/mods/ftbteams/api/event/$TeamEvent"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$PlayerChangedTeamEvent, $PlayerChangedTeamEvent$Type} from "packages/dev/ftb/mods/ftbteams/api/event/$PlayerChangedTeamEvent"
import {$Event, $Event$Type} from "packages/dev/architectury/event/$Event"
import {$PlayerJoinedPartyTeamEvent, $PlayerJoinedPartyTeamEvent$Type} from "packages/dev/ftb/mods/ftbteams/api/event/$PlayerJoinedPartyTeamEvent"
import {$TeamPropertiesChangedEvent, $TeamPropertiesChangedEvent$Type} from "packages/dev/ftb/mods/ftbteams/api/event/$TeamPropertiesChangedEvent"
import {$TeamAllyEvent, $TeamAllyEvent$Type} from "packages/dev/ftb/mods/ftbteams/api/event/$TeamAllyEvent"
import {$TeamCreatedEvent, $TeamCreatedEvent$Type} from "packages/dev/ftb/mods/ftbteams/api/event/$TeamCreatedEvent"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$TeamInfoEvent, $TeamInfoEvent$Type} from "packages/dev/ftb/mods/ftbteams/api/event/$TeamInfoEvent"
import {$PlayerTransferredTeamOwnershipEvent, $PlayerTransferredTeamOwnershipEvent$Type} from "packages/dev/ftb/mods/ftbteams/api/event/$PlayerTransferredTeamOwnershipEvent"
import {$TeamCollectPropertiesEvent, $TeamCollectPropertiesEvent$Type} from "packages/dev/ftb/mods/ftbteams/api/event/$TeamCollectPropertiesEvent"
import {$PlayerLoggedInAfterTeamEvent, $PlayerLoggedInAfterTeamEvent$Type} from "packages/dev/ftb/mods/ftbteams/api/event/$PlayerLoggedInAfterTeamEvent"
import {$ClientTeamPropertiesChangedEvent, $ClientTeamPropertiesChangedEvent$Type} from "packages/dev/ftb/mods/ftbteams/api/event/$ClientTeamPropertiesChangedEvent"
import {$Team, $Team$Type} from "packages/dev/ftb/mods/ftbteams/api/$Team"

export class $PlayerLeftPartyTeamEvent extends $TeamEvent {
static readonly "CREATED": $Event<($Consumer<($TeamCreatedEvent)>)>
static readonly "LOADED": $Event<($Consumer<($TeamEvent)>)>
static readonly "SAVED": $Event<($Consumer<($TeamEvent)>)>
static readonly "DELETED": $Event<($Consumer<($TeamEvent)>)>
static readonly "PLAYER_LOGGED_IN": $Event<($Consumer<($PlayerLoggedInAfterTeamEvent)>)>
static readonly "OWNERSHIP_TRANSFERRED": $Event<($Consumer<($PlayerTransferredTeamOwnershipEvent)>)>
static readonly "COLLECT_PROPERTIES": $Event<($Consumer<($TeamCollectPropertiesEvent)>)>
static readonly "PROPERTIES_CHANGED": $Event<($Consumer<($TeamPropertiesChangedEvent)>)>
static readonly "PLAYER_CHANGED": $Event<($Consumer<($PlayerChangedTeamEvent)>)>
static readonly "PLAYER_JOINED_PARTY": $Event<($Consumer<($PlayerJoinedPartyTeamEvent)>)>
static readonly "PLAYER_LEFT_PARTY": $Event<($Consumer<($PlayerLeftPartyTeamEvent)>)>
static readonly "INFO": $Event<($Consumer<($TeamInfoEvent)>)>
static readonly "ADD_ALLY": $Event<($Consumer<($TeamAllyEvent)>)>
static readonly "REMOVE_ALLY": $Event<($Consumer<($TeamAllyEvent)>)>
static readonly "CLIENT_PROPERTIES_CHANGED": $Event<($Consumer<($ClientTeamPropertiesChangedEvent)>)>

constructor(team: $Team$Type, playerTeam: $Team$Type, playerId: $UUID$Type, player: $ServerPlayer$Type, teamDeleted: boolean)

public "getPlayerId"(): $UUID
public "getPlayerTeam"(): $Team
public "getTeamDeleted"(): boolean
public "getPlayer"(): $ServerPlayer
get "playerId"(): $UUID
get "playerTeam"(): $Team
get "teamDeleted"(): boolean
get "player"(): $ServerPlayer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PlayerLeftPartyTeamEvent$Type = ($PlayerLeftPartyTeamEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PlayerLeftPartyTeamEvent_ = $PlayerLeftPartyTeamEvent$Type;
}}
declare module "packages/dev/ftb/mods/ftbteams/data/$ClientTeamManagerImpl" {
import {$ClientTeamManager, $ClientTeamManager$Type} from "packages/dev/ftb/mods/ftbteams/api/client/$ClientTeamManager"
import {$KnownClientPlayer, $KnownClientPlayer$Type} from "packages/dev/ftb/mods/ftbteams/api/client/$KnownClientPlayer"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$ClientTeam, $ClientTeam$Type} from "packages/dev/ftb/mods/ftbteams/data/$ClientTeam"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$TeamManagerImpl, $TeamManagerImpl$Type} from "packages/dev/ftb/mods/ftbteams/data/$TeamManagerImpl"
import {$Team, $Team$Type} from "packages/dev/ftb/mods/ftbteams/api/$Team"

export class $ClientTeamManagerImpl implements $ClientTeamManager {


public static "getInstance"(): $ClientTeamManagerImpl
public "write"(buffer: $FriendlyByteBuf$Type, selfTeamID: $UUID$Type): void
public "self"(): $KnownClientPlayer
public "isValid"(): boolean
public "knownClientPlayers"(): $Collection<($KnownClientPlayer)>
public "initSelfDetails"(selfTeamID: $UUID$Type): void
public "getManagerId"(): $UUID
public "addTeam"(team: $ClientTeam$Type): void
public static "fromNetwork"(buffer: $FriendlyByteBuf$Type): $ClientTeamManagerImpl
public static "syncFromServer"(syncedData: $ClientTeamManagerImpl$Type, selfTeamID: $UUID$Type, fullSync: boolean): void
public "getKnownPlayer"(id: $UUID$Type): $Optional<($KnownClientPlayer)>
public "getTeamByID"(teamId: $UUID$Type): $Optional<($Team)>
public "getTeams"(): $Collection<($Team)>
public static "forSyncing"(manager: $TeamManagerImpl$Type, teams: $Collection$Type<(any)>): $ClientTeamManagerImpl
public "formatName"(id: $UUID$Type): $Component
public "selfTeam"(): $ClientTeam
public "updatePresence"(newPlayer: $KnownClientPlayer$Type): void
public "getTeam"(id: $UUID$Type): $Optional<($ClientTeam)>
get "instance"(): $ClientTeamManagerImpl
get "valid"(): boolean
get "managerId"(): $UUID
get "teams"(): $Collection<($Team)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientTeamManagerImpl$Type = ($ClientTeamManagerImpl);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientTeamManagerImpl_ = $ClientTeamManagerImpl$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/quest/reward/$ChoiceReward" {
import {$Quest, $Quest$Type} from "packages/dev/ftb/mods/ftbquests/quest/$Quest"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$List, $List$Type} from "packages/java/util/$List"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$RandomReward, $RandomReward$Type} from "packages/dev/ftb/mods/ftbquests/quest/reward/$RandomReward"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$TooltipList, $TooltipList$Type} from "packages/dev/ftb/mods/ftblibrary/util/$TooltipList"
import {$RewardType, $RewardType$Type} from "packages/dev/ftb/mods/ftbquests/quest/reward/$RewardType"
import {$Button, $Button$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Button"

export class $ChoiceReward extends $RandomReward {
readonly "id": long

constructor(id: long, quest: $Quest$Type)

public "getType"(): $RewardType
public "claim"(player: $ServerPlayer$Type, notify: boolean): void
public "getExcludeFromClaimAll"(): boolean
public "addMouseOverText"(list: $TooltipList$Type): void
public "automatedClaimPre"(blockEntity: $BlockEntity$Type, items: $List$Type<($ItemStack$Type)>, random: $RandomSource$Type, playerId: $UUID$Type, player: $ServerPlayer$Type): boolean
public "onButtonClicked"(button: $Button$Type, canClick: boolean): void
get "type"(): $RewardType
get "excludeFromClaimAll"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ChoiceReward$Type = ($ChoiceReward);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ChoiceReward_ = $ChoiceReward$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/quest/theme/property/$ThemeProperties" {
import {$StringProperty, $StringProperty$Type} from "packages/dev/ftb/mods/ftbquests/quest/theme/property/$StringProperty"
import {$ColorProperty, $ColorProperty$Type} from "packages/dev/ftb/mods/ftbquests/quest/theme/property/$ColorProperty"
import {$IntProperty, $IntProperty$Type} from "packages/dev/ftb/mods/ftbquests/quest/theme/property/$IntProperty"
import {$DoubleProperty, $DoubleProperty$Type} from "packages/dev/ftb/mods/ftbquests/quest/theme/property/$DoubleProperty"
import {$IconProperty, $IconProperty$Type} from "packages/dev/ftb/mods/ftbquests/quest/theme/property/$IconProperty"

export interface $ThemeProperties {

}

export namespace $ThemeProperties {
const BACKGROUND: $IconProperty
const EXTRA_QUEST_SHAPES: $StringProperty
const TEXT_COLOR: $ColorProperty
const HOVER_TEXT_COLOR: $ColorProperty
const DISABLED_TEXT_COLOR: $ColorProperty
const WIDGET_BORDER: $ColorProperty
const WIDGET_BACKGROUND: $ColorProperty
const SYMBOL_IN: $ColorProperty
const SYMBOL_OUT: $ColorProperty
const BUTTON: $IconProperty
const PANEL: $IconProperty
const DISABLED_BUTTON: $IconProperty
const HOVER_BUTTON: $IconProperty
const CONTEXT_MENU: $IconProperty
const SCROLL_BAR_BACKGROUND: $IconProperty
const SCROLL_BAR: $IconProperty
const CONTAINER_SLOT: $IconProperty
const TEXT_BOX: $IconProperty
const CHECK_ICON: $IconProperty
const ADD_ICON: $IconProperty
const ALERT_ICON: $IconProperty
const SUPPORT_ICON: $IconProperty
const WIKI_ICON: $IconProperty
const WIKI_URL: $StringProperty
const PIN_ICON_ON: $IconProperty
const PIN_ICON_OFF: $IconProperty
const EDITOR_ICON_ON: $IconProperty
const EDITOR_ICON_OFF: $IconProperty
const HIDDEN_ICON: $IconProperty
const LINK_ICON: $IconProperty
const SAVE_ICON: $IconProperty
const SETTINGS_ICON: $IconProperty
const PREFS_ICON: $IconProperty
const CLOSE_ICON: $IconProperty
const EMERGENCY_ITEMS_ICON: $IconProperty
const GUIDE_ICON: $IconProperty
const MODPACK_ICON: $IconProperty
const REWARD_TABLE_ICON: $IconProperty
const SHOP_ICON: $IconProperty
const COLLECT_REWARDS_ICON: $IconProperty
const DELETE_ICON: $IconProperty
const RELOAD_ICON: $IconProperty
const DOWNLOAD_ICON: $IconProperty
const EDIT_ICON: $IconProperty
const MOVE_UP_ICON: $IconProperty
const MOVE_DOWN_ICON: $IconProperty
const ICON: $IconProperty
const FULL_SCREEN_QUEST: $IntProperty
const TASKS_TEXT_COLOR: $ColorProperty
const REWARDS_TEXT_COLOR: $ColorProperty
const QUEST_VIEW_BACKGROUND: $IconProperty
const QUEST_VIEW_BORDER: $ColorProperty
const QUEST_VIEW_TITLE: $ColorProperty
const QUEST_COMPLETED_COLOR: $ColorProperty
const QUEST_STARTED_COLOR: $ColorProperty
const QUEST_NOT_STARTED_COLOR: $ColorProperty
const QUEST_LOCKED_COLOR: $ColorProperty
const DEPENDENCY_LINE_TEXTURE: $IconProperty
const DEPENDENCY_LINE_COMPLETED_COLOR: $ColorProperty
const DEPENDENCY_LINE_UNCOMPLETED_COLOR: $ColorProperty
const DEPENDENCY_LINE_REQUIRES_COLOR: $ColorProperty
const DEPENDENCY_LINE_REQUIRED_FOR_COLOR: $ColorProperty
const DEPENDENCY_LINE_SELECTED_SPEED: $DoubleProperty
const DEPENDENCY_LINE_UNSELECTED_SPEED: $DoubleProperty
const DEPENDENCY_LINE_THICKNESS: $DoubleProperty
const QUEST_SPACING: $DoubleProperty
const PINNED_QUEST_SIZE: $DoubleProperty
const LEFT_ARROW: $IconProperty
const RIGHT_ARROW: $IconProperty
const CHECKMARK_TASK_ACTIVE: $IconProperty
const CHECKMARK_TASK_INACTIVE: $IconProperty
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ThemeProperties$Type = ($ThemeProperties);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ThemeProperties_ = $ThemeProperties$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/command/$FTBQuestsCommands" {
import {$CommandSourceStack, $CommandSourceStack$Type} from "packages/net/minecraft/commands/$CommandSourceStack"
import {$CommandDispatcher, $CommandDispatcher$Type} from "packages/com/mojang/brigadier/$CommandDispatcher"

export class $FTBQuestsCommands {

constructor()

public static "register"(dispatcher: $CommandDispatcher$Type<($CommandSourceStack$Type)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FTBQuestsCommands$Type = ($FTBQuestsCommands);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FTBQuestsCommands_ = $FTBQuestsCommands$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/quest/reward/$CustomReward" {
import {$Quest, $Quest$Type} from "packages/dev/ftb/mods/ftbquests/quest/$Quest"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$Reward, $Reward$Type} from "packages/dev/ftb/mods/ftbquests/quest/reward/$Reward"
import {$RewardType, $RewardType$Type} from "packages/dev/ftb/mods/ftbquests/quest/reward/$RewardType"

export class $CustomReward extends $Reward {
readonly "id": long

constructor(id: long, quest: $Quest$Type)

public "getType"(): $RewardType
public "claim"(player: $ServerPlayer$Type, notify: boolean): void
get "type"(): $RewardType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CustomReward$Type = ($CustomReward);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CustomReward_ = $CustomReward$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/events/$CustomRewardEvent" {
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$Event, $Event$Type} from "packages/dev/architectury/event/$Event"
import {$EventActor, $EventActor$Type} from "packages/dev/architectury/event/$EventActor"
import {$CustomReward, $CustomReward$Type} from "packages/dev/ftb/mods/ftbquests/quest/reward/$CustomReward"

export class $CustomRewardEvent {
static readonly "EVENT": $Event<($EventActor<($CustomRewardEvent)>)>

constructor(reward: $CustomReward$Type, player: $ServerPlayer$Type, notify: boolean)

public "getReward"(): $CustomReward
public "getPlayer"(): $ServerPlayer
public "getNotify"(): boolean
get "reward"(): $CustomReward
get "player"(): $ServerPlayer
get "notify"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CustomRewardEvent$Type = ($CustomRewardEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CustomRewardEvent_ = $CustomRewardEvent$Type;
}}
declare module "packages/dev/ftb/mods/ftbteams/data/$FTBTeamsCommands" {
import {$CommandSourceStack, $CommandSourceStack$Type} from "packages/net/minecraft/commands/$CommandSourceStack"
import {$CommandDispatcher, $CommandDispatcher$Type} from "packages/com/mojang/brigadier/$CommandDispatcher"

export class $FTBTeamsCommands {

constructor()

public "register"(dispatcher: $CommandDispatcher$Type<($CommandSourceStack$Type)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FTBTeamsCommands$Type = ($FTBTeamsCommands);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FTBTeamsCommands_ = $FTBTeamsCommands$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/ui/$ScrollBar$Plane" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $ScrollBar$Plane extends $Enum<($ScrollBar$Plane)> {
static readonly "HORIZONTAL": $ScrollBar$Plane
static readonly "VERTICAL": $ScrollBar$Plane
readonly "isVertical": boolean


public static "values"(): ($ScrollBar$Plane)[]
public static "valueOf"(name: string): $ScrollBar$Plane
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ScrollBar$Plane$Type = (("horizontal") | ("vertical")) | ($ScrollBar$Plane);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ScrollBar$Plane_ = $ScrollBar$Plane$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/client/gui/$EmergencyItemsScreen" {
import {$Theme, $Theme$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Theme"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$BaseScreen, $BaseScreen$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$BaseScreen"

export class $EmergencyItemsScreen extends $BaseScreen {
 "posX": integer
 "posY": integer
 "width": integer
 "height": integer

constructor()

public "addWidgets"(): void
public "getTheme"(): $Theme
public "onInit"(): boolean
public "drawBackground"(graphics: $GuiGraphics$Type, theme: $Theme$Type, x: integer, y: integer, w: integer, h: integer): void
get "theme"(): $Theme
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EmergencyItemsScreen$Type = ($EmergencyItemsScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EmergencyItemsScreen_ = $EmergencyItemsScreen$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/icon/$IconPresets" {
import {$Icon, $Icon$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Icon"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $IconPresets {
static readonly "MAP": $Map<(string), ($Icon)>

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IconPresets$Type = ($IconPresets);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IconPresets_ = $IconPresets$Type;
}}
declare module "packages/dev/ftb/mods/ftbteams/api/property/$TeamPropertyArgument$Info" {
import {$JsonObject, $JsonObject$Type} from "packages/com/google/gson/$JsonObject"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$ArgumentTypeInfo, $ArgumentTypeInfo$Type} from "packages/net/minecraft/commands/synchronization/$ArgumentTypeInfo"
import {$TeamPropertyArgument, $TeamPropertyArgument$Type} from "packages/dev/ftb/mods/ftbteams/api/property/$TeamPropertyArgument"
import {$TeamPropertyArgument$Info$Template, $TeamPropertyArgument$Info$Template$Type} from "packages/dev/ftb/mods/ftbteams/api/property/$TeamPropertyArgument$Info$Template"

export class $TeamPropertyArgument$Info implements $ArgumentTypeInfo<($TeamPropertyArgument), ($TeamPropertyArgument$Info$Template)> {

constructor()

public "unpack"(argumentType: $TeamPropertyArgument$Type): $TeamPropertyArgument$Info$Template
public "deserializeFromNetwork"(friendlyByteBuf: $FriendlyByteBuf$Type): $TeamPropertyArgument$Info$Template
public "serializeToJson"(template: $TeamPropertyArgument$Info$Template$Type, jsonObject: $JsonObject$Type): void
public "serializeToNetwork"(template: $TeamPropertyArgument$Info$Template$Type, friendlyByteBuf: $FriendlyByteBuf$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TeamPropertyArgument$Info$Type = ($TeamPropertyArgument$Info);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TeamPropertyArgument$Info_ = $TeamPropertyArgument$Info$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/client/gui/quests/$CollectRewardsButton" {
import {$Panel, $Panel$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Panel"
import {$Theme, $Theme$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Theme"
import {$TabButton, $TabButton$Type} from "packages/dev/ftb/mods/ftbquests/client/gui/quests/$TabButton"
import {$MouseButton, $MouseButton$Type} from "packages/dev/ftb/mods/ftblibrary/ui/input/$MouseButton"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$TooltipList, $TooltipList$Type} from "packages/dev/ftb/mods/ftblibrary/util/$TooltipList"

export class $CollectRewardsButton extends $TabButton {
 "posX": integer
 "posY": integer
 "width": integer
 "height": integer

constructor(panel: $Panel$Type)

public "draw"(graphics: $GuiGraphics$Type, theme: $Theme$Type, x: integer, y: integer, w: integer, h: integer): void
public "addMouseOverText"(list: $TooltipList$Type): void
public "onClicked"(button: $MouseButton$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CollectRewardsButton$Type = ($CollectRewardsButton);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CollectRewardsButton_ = $CollectRewardsButton$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/item/$MissingItem" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $MissingItem extends $Item {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor()

public "getName"(stack: $ItemStack$Type): $Component
public "appendHoverText"(stack: $ItemStack$Type, worldIn: $Level$Type, tooltip: $List$Type<($Component$Type)>, flagIn: $TooltipFlag$Type): void
public static "writeItem"(stack: $ItemStack$Type): $CompoundTag
public static "readItem"(tag: $CompoundTag$Type): $ItemStack
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MissingItem$Type = ($MissingItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MissingItem_ = $MissingItem$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/util/$NonnullByDefault" {
import {$Annotation, $Annotation$Type} from "packages/java/lang/annotation/$Annotation"
import {$Class, $Class$Type} from "packages/java/lang/$Class"

export interface $NonnullByDefault extends $Annotation {

 "equals"(arg0: any): boolean
 "toString"(): string
 "hashCode"(): integer
 "annotationType"(): $Class<(any)>
}

export namespace $NonnullByDefault {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $NonnullByDefault$Type = ($NonnullByDefault);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $NonnullByDefault_ = $NonnullByDefault$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/integration/item_filtering/$DisplayStacksCache" {
import {$ItemFilterAdapter, $ItemFilterAdapter$Type} from "packages/dev/ftb/mods/ftbquests/api/$ItemFilterAdapter"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export class $DisplayStacksCache {

constructor()

public static "getCachedDisplayStacks"(filterStack: $ItemStack$Type, adapter: $ItemFilterAdapter$Type): $List<($ItemStack)>
public static "clear"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DisplayStacksCache$Type = ($DisplayStacksCache);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DisplayStacksCache_ = $DisplayStacksCache$Type;
}}
declare module "packages/dev/ftb/mods/ftbteams/data/$PlayerTeam" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$KnownClientPlayer, $KnownClientPlayer$Type} from "packages/dev/ftb/mods/ftbteams/api/client/$KnownClientPlayer"
import {$TeamRank, $TeamRank$Type} from "packages/dev/ftb/mods/ftbteams/api/$TeamRank"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$TeamManagerImpl, $TeamManagerImpl$Type} from "packages/dev/ftb/mods/ftbteams/data/$TeamManagerImpl"
import {$TeamType, $TeamType$Type} from "packages/dev/ftb/mods/ftbteams/data/$TeamType"
import {$GameProfile, $GameProfile$Type} from "packages/com/mojang/authlib/$GameProfile"
import {$Team, $Team$Type} from "packages/dev/ftb/mods/ftbteams/api/$Team"
import {$AbstractTeam, $AbstractTeam$Type} from "packages/dev/ftb/mods/ftbteams/data/$AbstractTeam"

export class $PlayerTeam extends $AbstractTeam {

constructor(manager: $TeamManagerImpl$Type, id: $UUID$Type)

public "getType"(): $TeamType
public "getPlayerName"(): string
public "setPlayerName"(playerName: string): void
public "getRankForPlayer"(playerId: $UUID$Type): $TeamRank
public "getPlayer"(): $ServerPlayer
public "setOnline"(online: boolean): void
public "setEffectiveTeam"(effectiveTeam: $AbstractTeam$Type): void
public "getEffectiveTeam"(): $AbstractTeam
public "createClientPlayer"(): $KnownClientPlayer
public "hasTeam"(): boolean
public "isOnline"(): boolean
public "createParty"(playerId: $UUID$Type, player: $ServerPlayer$Type, name: string, description: string, color: integer, invited: $Set$Type<($GameProfile$Type)>): $Team
public "updatePresence"(): void
public "getTeamId"(): $UUID
public "isPlayerTeam"(): boolean
public "deserializeNBT"(tag: $CompoundTag$Type): void
get "type"(): $TeamType
get "playerName"(): string
set "playerName"(value: string)
get "player"(): $ServerPlayer
set "online"(value: boolean)
set "effectiveTeam"(value: $AbstractTeam$Type)
get "effectiveTeam"(): $AbstractTeam
get "online"(): boolean
get "teamId"(): $UUID
get "playerTeam"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PlayerTeam$Type = ($PlayerTeam);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PlayerTeam_ = $PlayerTeam$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/ui/$Widget" {
import {$Comparable, $Comparable$Type} from "packages/java/lang/$Comparable"
import {$Panel, $Panel$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Panel"
import {$PositionedIngredient, $PositionedIngredient$Type} from "packages/dev/ftb/mods/ftblibrary/util/client/$PositionedIngredient"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Widget$DrawLayer, $Widget$DrawLayer$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Widget$DrawLayer"
import {$CursorType, $CursorType$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$CursorType"
import {$Key, $Key$Type} from "packages/dev/ftb/mods/ftblibrary/ui/input/$Key"
import {$Window, $Window$Type} from "packages/com/mojang/blaze3d/platform/$Window"
import {$IScreenWrapper, $IScreenWrapper$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$IScreenWrapper"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$TooltipList, $TooltipList$Type} from "packages/dev/ftb/mods/ftblibrary/util/$TooltipList"
import {$Runnable, $Runnable$Type} from "packages/java/lang/$Runnable"
import {$BaseScreen, $BaseScreen$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$BaseScreen"
import {$WidgetType, $WidgetType$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$WidgetType"
import {$KeyModifiers, $KeyModifiers$Type} from "packages/dev/ftb/mods/ftblibrary/ui/input/$KeyModifiers"
import {$Theme, $Theme$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Theme"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$MouseButton, $MouseButton$Type} from "packages/dev/ftb/mods/ftblibrary/ui/input/$MouseButton"

export class $Widget implements $IScreenWrapper, $Comparable<($Widget)> {
 "posX": integer
 "posY": integer
 "width": integer
 "height": integer

constructor(p: $Panel$Type)

public "toString"(): string
public "compareTo"(widget: $Widget$Type): integer
public "getParent"(): $Panel
public "tick"(): void
public "setSize"(w: integer, h: integer): void
public "isEnabled"(): boolean
public "setWidth"(v: integer): void
public "handleClick"(scheme: string, path: string): boolean
public "handleClick"(click: string): boolean
public "getY"(): integer
public "setPos"(x: integer, y: integer): void
public "getMouseX"(): integer
public "getMouseY"(): integer
public "keyPressed"(key: $Key$Type): boolean
public "draw"(graphics: $GuiGraphics$Type, theme: $Theme$Type, x: integer, y: integer, w: integer, h: integer): void
public "getPosY"(): integer
public "getPosX"(): integer
public "getCursor"(): $CursorType
public "setX"(v: integer): void
public "setY"(v: integer): void
public "getX"(): integer
public "getWidth"(): integer
public "getHeight"(): integer
public "getScreen"(): $Window
public "checkMouseOver"(mouseX: integer, mouseY: integer): boolean
public "setDrawLayer"(drawLayer: $Widget$DrawLayer$Type): void
public "onClosed"(): void
public "collidesWith"(x: integer, y: integer, w: integer, h: integer): boolean
public "mouseDoubleClicked"(button: $MouseButton$Type): boolean
public "getWidgetType"(): $WidgetType
public "mousePressed"(button: $MouseButton$Type): boolean
public static "isMouseButtonDown"(button: $MouseButton$Type): boolean
public "setPosAndSize"(x: integer, y: integer, w: integer, h: integer): $Widget
public static "isKeyDown"(key: integer): boolean
public static "setClipboardString"(string: string): void
public static "getClipboardString"(): string
public "updateMouseOver"(mouseX: integer, mouseY: integer): void
public "getDrawLayer"(): $Widget$DrawLayer
public "shouldDraw"(): boolean
public "addMouseOverText"(list: $TooltipList$Type): void
public "playClickSound"(): void
public static "isCtrlKeyDown"(): boolean
public static "isShiftKeyDown"(): boolean
public "getTitle"(): $Component
public "isGhostIngredientTarget"(ingredient: any): boolean
public "acceptGhostIngredient"(ingredient: any): void
public "shouldAddMouseOverText"(): boolean
public "getIngredientUnderMouse"(): $Optional<($PositionedIngredient)>
public "setHeight"(v: integer): void
public "getGui"(): $BaseScreen
public "charTyped"(c: character, modifiers: $KeyModifiers$Type): boolean
public "mouseReleased"(button: $MouseButton$Type): void
public "mouseDragged"(button: integer, dragX: double, dragY: double): boolean
public "mouseScrolled"(scroll: double): boolean
public "keyReleased"(key: $Key$Type): void
public "isMouseOver"(): boolean
public "getPartialTicks"(): float
public "openGui"(): void
public "closeGui"(openPrevScreen: boolean): void
public "run"(): void
public "closeGui"(): void
public "openAfter"(runnable: $Runnable$Type): $Runnable
public "openGuiLater"(): void
public "closeContextMenu"(): void
get "parent"(): $Panel
get "enabled"(): boolean
set "width"(value: integer)
get "y"(): integer
get "mouseX"(): integer
get "mouseY"(): integer
get "posY"(): integer
get "posX"(): integer
get "cursor"(): $CursorType
set "x"(value: integer)
set "y"(value: integer)
get "x"(): integer
get "width"(): integer
get "height"(): integer
get "screen"(): $Window
set "drawLayer"(value: $Widget$DrawLayer$Type)
get "widgetType"(): $WidgetType
set "clipboardString"(value: string)
get "clipboardString"(): string
get "drawLayer"(): $Widget$DrawLayer
get "ctrlKeyDown"(): boolean
get "shiftKeyDown"(): boolean
get "title"(): $Component
get "ingredientUnderMouse"(): $Optional<($PositionedIngredient)>
set "height"(value: integer)
get "gui"(): $BaseScreen
get "mouseOver"(): boolean
get "partialTicks"(): float
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Widget$Type = ($Widget);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Widget_ = $Widget$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/ui/misc/$UITesting" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $UITesting {

constructor()

public static "openTestScreen"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $UITesting$Type = ($UITesting);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $UITesting_ = $UITesting$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/ui/$MultilineTextBox" {
import {$Panel, $Panel$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Panel"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Widget, $Widget$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Widget"
import {$Key, $Key$Type} from "packages/dev/ftb/mods/ftblibrary/ui/input/$Key"
import {$MultilineTextBox$StringExtents, $MultilineTextBox$StringExtents$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$MultilineTextBox$StringExtents"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$Whence, $Whence$Type} from "packages/net/minecraft/client/gui/components/$Whence"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$KeyModifiers, $KeyModifiers$Type} from "packages/dev/ftb/mods/ftblibrary/ui/input/$KeyModifiers"
import {$IFocusableWidget, $IFocusableWidget$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$IFocusableWidget"
import {$Theme, $Theme$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Theme"
import {$MouseButton, $MouseButton$Type} from "packages/dev/ftb/mods/ftblibrary/ui/input/$MouseButton"

export class $MultilineTextBox extends $Widget implements $IFocusableWidget {
 "posX": integer
 "posY": integer
 "width": integer
 "height": integer

constructor(panel: $Panel$Type)

public "tick"(): void
public "getText"(): string
public "setText"(text: string): void
public "setWidth"(v: integer): void
public "hasSelection"(): boolean
public "getSelected"(): $MultilineTextBox$StringExtents
public "keyPressed"(key: $Key$Type): boolean
public "draw"(graphics: $GuiGraphics$Type, theme: $Theme$Type, x: integer, y: integer, w: integer, h: integer): void
public "setFocused"(focused: boolean): void
public "mouseDoubleClicked"(button: $MouseButton$Type): boolean
public "mousePressed"(button: $MouseButton$Type): boolean
public "isFocused"(): boolean
public "getSelectedText"(): string
public "cursorPos"(): integer
public "insertText"(toInsert: string): void
public "seekCursor"(whence: $Whence$Type, pos: integer): void
public "setPlaceHolder"(placeHolder: $Component$Type): void
public "setValueListener"(valueListener: $Consumer$Type<(string)>): void
public "setSelecting"(selecting: boolean): void
public "getLineView"(): $MultilineTextBox$StringExtents
public "getLineView"(line: integer): $MultilineTextBox$StringExtents
public "selectCurrentLine"(): void
public "seekCursorToPoint"(x: double, y: double): void
public "charTyped"(c: character, modifiers: $KeyModifiers$Type): boolean
public "mouseDragged"(button: integer, dragX: double, dragY: double): boolean
get "text"(): string
set "text"(value: string)
set "width"(value: integer)
get "selected"(): $MultilineTextBox$StringExtents
set "focused"(value: boolean)
get "focused"(): boolean
get "selectedText"(): string
set "placeHolder"(value: $Component$Type)
set "valueListener"(value: $Consumer$Type<(string)>)
set "selecting"(value: boolean)
get "lineView"(): $MultilineTextBox$StringExtents
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MultilineTextBox$Type = ($MultilineTextBox);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MultilineTextBox_ = $MultilineTextBox$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/block/entity/$FTBQuestsBlockEntities" {
import {$QuestBarrierBlockEntity, $QuestBarrierBlockEntity$Type} from "packages/dev/ftb/mods/ftbquests/block/entity/$QuestBarrierBlockEntity"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$BlockEntityType$BlockEntitySupplier, $BlockEntityType$BlockEntitySupplier$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType$BlockEntitySupplier"
import {$DetectorBlockEntity, $DetectorBlockEntity$Type} from "packages/dev/ftb/mods/ftbquests/block/entity/$DetectorBlockEntity"
import {$DeferredRegister, $DeferredRegister$Type} from "packages/dev/architectury/registry/registries/$DeferredRegister"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LootCrateOpenerBlockEntity, $LootCrateOpenerBlockEntity$Type} from "packages/dev/ftb/mods/ftbquests/block/entity/$LootCrateOpenerBlockEntity"
import {$TaskScreenAuxBlockEntity, $TaskScreenAuxBlockEntity$Type} from "packages/dev/ftb/mods/ftbquests/block/entity/$TaskScreenAuxBlockEntity"
import {$RegistrySupplier, $RegistrySupplier$Type} from "packages/dev/architectury/registry/registries/$RegistrySupplier"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$TaskScreenBlockEntity, $TaskScreenBlockEntity$Type} from "packages/dev/ftb/mods/ftbquests/block/entity/$TaskScreenBlockEntity"
import {$StageBarrierBlockEntity, $StageBarrierBlockEntity$Type} from "packages/dev/ftb/mods/ftbquests/block/entity/$StageBarrierBlockEntity"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"

export class $FTBQuestsBlockEntities {
static readonly "BLOCK_ENTITIES": $DeferredRegister<($BlockEntityType<(any)>)>
static readonly "BARRIER": $RegistrySupplier<($BlockEntityType<($QuestBarrierBlockEntity)>)>
static readonly "STAGE_BARRIER": $RegistrySupplier<($BlockEntityType<($StageBarrierBlockEntity)>)>
static readonly "DETECTOR": $RegistrySupplier<($BlockEntityType<($DetectorBlockEntity)>)>
static readonly "LOOT_CRATE_OPENER": $RegistrySupplier<($BlockEntityType<($LootCrateOpenerBlockEntity)>)>
static readonly "CORE_TASK_SCREEN": $RegistrySupplier<($BlockEntityType<($TaskScreenBlockEntity)>)>
static readonly "AUX_TASK_SCREEN": $RegistrySupplier<($BlockEntityType<($TaskScreenAuxBlockEntity)>)>

constructor()

public static "register"<T extends $BlockEntity>(id: string, factory: $BlockEntityType$BlockEntitySupplier$Type<(T)>, blocks: $Collection$Type<($RegistrySupplier$Type<($Block$Type)>)>): $RegistrySupplier<($BlockEntityType<(T)>)>
public static "register"(): void
public static "register"<T extends $BlockEntity>(id: string, factory: $BlockEntityType$BlockEntitySupplier$Type<(T)>, block: $Supplier$Type<($Block$Type)>): $RegistrySupplier<($BlockEntityType<(T)>)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FTBQuestsBlockEntities$Type = ($FTBQuestsBlockEntities);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FTBQuestsBlockEntities_ = $FTBQuestsBlockEntities$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/util/forge/$PlayerDisplayNameUtilImpl" {
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"

export class $PlayerDisplayNameUtilImpl {

constructor()

public static "refreshDisplayName"(player: $Player$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PlayerDisplayNameUtilImpl$Type = ($PlayerDisplayNameUtilImpl);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PlayerDisplayNameUtilImpl_ = $PlayerDisplayNameUtilImpl$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/item/$CustomIconItem" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Icon, $Icon$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Icon"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$InteractionResultHolder, $InteractionResultHolder$Type} from "packages/net/minecraft/world/$InteractionResultHolder"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $CustomIconItem extends $Item {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor()

public static "getIcon"(stack: $ItemStack$Type): $Icon
public "use"(level: $Level$Type, player: $Player$Type, interactionHand: $InteractionHand$Type): $InteractionResultHolder<($ItemStack)>
public "appendHoverText"(stack: $ItemStack$Type, worldIn: $Level$Type, tooltip: $List$Type<($Component$Type)>, flagIn: $TooltipFlag$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CustomIconItem$Type = ($CustomIconItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CustomIconItem_ = $CustomIconItem$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/quest/reward/$LootReward" {
import {$Quest, $Quest$Type} from "packages/dev/ftb/mods/ftbquests/quest/$Quest"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$List, $List$Type} from "packages/java/util/$List"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$RandomReward, $RandomReward$Type} from "packages/dev/ftb/mods/ftbquests/quest/reward/$RandomReward"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$TooltipList, $TooltipList$Type} from "packages/dev/ftb/mods/ftblibrary/util/$TooltipList"
import {$RewardType, $RewardType$Type} from "packages/dev/ftb/mods/ftbquests/quest/reward/$RewardType"
import {$Button, $Button$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Button"

export class $LootReward extends $RandomReward {
readonly "id": long

constructor(id: long, quest: $Quest$Type)

public "getType"(): $RewardType
public "claim"(player: $ServerPlayer$Type, notify: boolean): void
public "getExcludeFromClaimAll"(): boolean
public "addMouseOverText"(list: $TooltipList$Type): void
public "automatedClaimPost"(blockEntity: $BlockEntity$Type, playerId: $UUID$Type, player: $ServerPlayer$Type): void
public "automatedClaimPre"(blockEntity: $BlockEntity$Type, items: $List$Type<($ItemStack$Type)>, random: $RandomSource$Type, playerId: $UUID$Type, player: $ServerPlayer$Type): boolean
public "onButtonClicked"(button: $Button$Type, canClick: boolean): void
get "type"(): $RewardType
get "excludeFromClaimAll"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LootReward$Type = ($LootReward);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LootReward_ = $LootReward$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/net/$ClearDisplayCacheMessage" {
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$NetworkManager$PacketContext, $NetworkManager$PacketContext$Type} from "packages/dev/architectury/networking/$NetworkManager$PacketContext"
import {$MinecraftServer, $MinecraftServer$Type} from "packages/net/minecraft/server/$MinecraftServer"
import {$BaseS2CMessage, $BaseS2CMessage$Type} from "packages/dev/architectury/networking/simple/$BaseS2CMessage"
import {$MessageType, $MessageType$Type} from "packages/dev/architectury/networking/simple/$MessageType"

export class $ClearDisplayCacheMessage extends $BaseS2CMessage {

constructor()
constructor(buf: $FriendlyByteBuf$Type)

public "write"(buf: $FriendlyByteBuf$Type): void
public "getType"(): $MessageType
public "handle"(context: $NetworkManager$PacketContext$Type): void
public static "clearForAll"(server: $MinecraftServer$Type): void
get "type"(): $MessageType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClearDisplayCacheMessage$Type = ($ClearDisplayCacheMessage);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClearDisplayCacheMessage_ = $ClearDisplayCacheMessage$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/events/$ObjectStartedEvent$TaskEvent" {
import {$Task, $Task$Type} from "packages/dev/ftb/mods/ftbquests/quest/task/$Task"
import {$Event, $Event$Type} from "packages/dev/architectury/event/$Event"
import {$QuestProgressEventData, $QuestProgressEventData$Type} from "packages/dev/ftb/mods/ftbquests/events/$QuestProgressEventData"
import {$EventActor, $EventActor$Type} from "packages/dev/architectury/event/$EventActor"
import {$ObjectStartedEvent, $ObjectStartedEvent$Type} from "packages/dev/ftb/mods/ftbquests/events/$ObjectStartedEvent"
import {$ObjectStartedEvent$QuestEvent, $ObjectStartedEvent$QuestEvent$Type} from "packages/dev/ftb/mods/ftbquests/events/$ObjectStartedEvent$QuestEvent"
import {$ObjectStartedEvent$FileEvent, $ObjectStartedEvent$FileEvent$Type} from "packages/dev/ftb/mods/ftbquests/events/$ObjectStartedEvent$FileEvent"
import {$ObjectStartedEvent$ChapterEvent, $ObjectStartedEvent$ChapterEvent$Type} from "packages/dev/ftb/mods/ftbquests/events/$ObjectStartedEvent$ChapterEvent"

export class $ObjectStartedEvent$TaskEvent extends $ObjectStartedEvent<($Task)> {
static readonly "GENERIC": $Event<($EventActor<($ObjectStartedEvent<(any)>)>)>
static readonly "FILE": $Event<($EventActor<($ObjectStartedEvent$FileEvent)>)>
static readonly "CHAPTER": $Event<($EventActor<($ObjectStartedEvent$ChapterEvent)>)>
static readonly "QUEST": $Event<($EventActor<($ObjectStartedEvent$QuestEvent)>)>
static readonly "TASK": $Event<($EventActor<($ObjectStartedEvent$TaskEvent)>)>

constructor(d: $QuestProgressEventData$Type<($Task$Type)>)

public "getTask"(): $Task
get "task"(): $Task
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ObjectStartedEvent$TaskEvent$Type = ($ObjectStartedEvent$TaskEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ObjectStartedEvent$TaskEvent_ = $ObjectStartedEvent$TaskEvent$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/ui/misc/$NordColors" {
import {$Color4I, $Color4I$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Color4I"

export interface $NordColors {

}

export namespace $NordColors {
const POLAR_NIGHT_0: $Color4I
const POLAR_NIGHT_1: $Color4I
const POLAR_NIGHT_2: $Color4I
const POLAR_NIGHT_3: $Color4I
const POLAR_NIGHT_4: $Color4I
const POLAR_NIGHT: ($Color4I)[]
const SNOW_STORM_0: $Color4I
const SNOW_STORM_1: $Color4I
const SNOW_STORM_2: $Color4I
const SNOW_STORM_3: $Color4I
const SNOW_STORM: ($Color4I)[]
const FROST_0: $Color4I
const FROST_1: $Color4I
const FROST_2: $Color4I
const FROST_3: $Color4I
const FROST: ($Color4I)[]
const RED: $Color4I
const ORANGE: $Color4I
const YELLOW: $Color4I
const GREEN: $Color4I
const PURPLE: $Color4I
const AURORA: ($Color4I)[]
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $NordColors$Type = ($NordColors);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $NordColors_ = $NordColors$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/$FTBLibraryClient" {
import {$CursorType, $CursorType$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$CursorType"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"

export class $FTBLibraryClient {
static "showButtons": integer
static "lastCursorType": $CursorType

constructor()

public static "init"(): void
public static "editConfig"(isClientConfig: boolean): void
public static "areButtonsVisible"(gui: $Screen$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FTBLibraryClient$Type = ($FTBLibraryClient);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FTBLibraryClient_ = $FTBLibraryClient$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/util/client/forge/$ClientUtilsImpl" {
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$FluidStack, $FluidStack$Type} from "packages/dev/architectury/fluid/$FluidStack"

export class $ClientUtilsImpl {

constructor()

public static "getStillTexture"(stack: $FluidStack$Type): $ResourceLocation
public static "getFluidColor"(stack: $FluidStack$Type): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientUtilsImpl$Type = ($ClientUtilsImpl);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientUtilsImpl_ = $ClientUtilsImpl$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/net/$MoveChapterGroupMessage" {
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$NetworkManager$PacketContext, $NetworkManager$PacketContext$Type} from "packages/dev/architectury/networking/$NetworkManager$PacketContext"
import {$BaseC2SMessage, $BaseC2SMessage$Type} from "packages/dev/architectury/networking/simple/$BaseC2SMessage"
import {$MessageType, $MessageType$Type} from "packages/dev/architectury/networking/simple/$MessageType"

export class $MoveChapterGroupMessage extends $BaseC2SMessage {

constructor(buffer: $FriendlyByteBuf$Type)
constructor(id: long, movingUp: boolean)

public "write"(buffer: $FriendlyByteBuf$Type): void
public "getType"(): $MessageType
public "handle"(context: $NetworkManager$PacketContext$Type): void
get "type"(): $MessageType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MoveChapterGroupMessage$Type = ($MoveChapterGroupMessage);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MoveChapterGroupMessage_ = $MoveChapterGroupMessage$Type;
}}
declare module "packages/dev/ftb/mods/ftbteams/net/$FTBTeamsNet" {
import {$SimpleNetworkManager, $SimpleNetworkManager$Type} from "packages/dev/architectury/networking/simple/$SimpleNetworkManager"
import {$MessageType, $MessageType$Type} from "packages/dev/architectury/networking/simple/$MessageType"

export interface $FTBTeamsNet {

}

export namespace $FTBTeamsNet {
const NET: $SimpleNetworkManager
const SYNC_TEAMS: $MessageType
const SYNC_MESSAGE_HISTORY: $MessageType
const OPEN_GUI: $MessageType
const OPEN_MY_TEAM_GUI: $MessageType
const UPDATE_SETTINGS: $MessageType
const UPDATE_SETTINGS_RESPONSE: $MessageType
const SEND_MESSAGE: $MessageType
const SEND_MESSAGE_RESPONSE: $MessageType
const UPDATE_PRESENCE: $MessageType
const CREATE_PARTY: $MessageType
const PLAYER_GUI_OPERATION: $MessageType
function init(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FTBTeamsNet$Type = ($FTBTeamsNet);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FTBTeamsNet_ = $FTBTeamsNet$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/client/gui/quests/$AddTaskButton" {
import {$Quest, $Quest$Type} from "packages/dev/ftb/mods/ftbquests/quest/$Quest"
import {$Panel, $Panel$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Panel"
import {$Theme, $Theme$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Theme"
import {$MouseButton, $MouseButton$Type} from "packages/dev/ftb/mods/ftblibrary/ui/input/$MouseButton"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$Button, $Button$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Button"

export class $AddTaskButton extends $Button {
 "posX": integer
 "posY": integer
 "width": integer
 "height": integer

constructor(panel: $Panel$Type, quest: $Quest$Type)

public "drawBackground"(graphics: $GuiGraphics$Type, theme: $Theme$Type, x: integer, y: integer, w: integer, h: integer): void
public "onClicked"(button: $MouseButton$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AddTaskButton$Type = ($AddTaskButton);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AddTaskButton_ = $AddTaskButton$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/client/$FTBQuestsClientEventHandler" {
import {$TextureAtlas, $TextureAtlas$Type} from "packages/net/minecraft/client/renderer/texture/$TextureAtlas"
import {$TextureAtlasSprite, $TextureAtlasSprite$Type} from "packages/net/minecraft/client/renderer/texture/$TextureAtlasSprite"

export class $FTBQuestsClientEventHandler {
static "inputOnlySprite": $TextureAtlasSprite
static "tankSprite": $TextureAtlasSprite
static "feEnergyEmptySprite": $TextureAtlasSprite
static "feEnergyFullSprite": $TextureAtlasSprite
static "trEnergyEmptySprite": $TextureAtlasSprite
static "trEnergyFullSprite": $TextureAtlasSprite

constructor()

public "init"(): void
public static "onTextureStitchPost"(textureAtlas: $TextureAtlas$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FTBQuestsClientEventHandler$Type = ($FTBQuestsClientEventHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FTBQuestsClientEventHandler_ = $FTBQuestsClientEventHandler$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/net/$DisplayRewardToastMessage" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$NetworkManager$PacketContext, $NetworkManager$PacketContext$Type} from "packages/dev/architectury/networking/$NetworkManager$PacketContext"
import {$Icon, $Icon$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Icon"
import {$BaseS2CMessage, $BaseS2CMessage$Type} from "packages/dev/architectury/networking/simple/$BaseS2CMessage"
import {$MessageType, $MessageType$Type} from "packages/dev/architectury/networking/simple/$MessageType"

export class $DisplayRewardToastMessage extends $BaseS2CMessage {

constructor(_id: long, t: $Component$Type, i: $Icon$Type)

public "write"(buffer: $FriendlyByteBuf$Type): void
public "getType"(): $MessageType
public "handle"(context: $NetworkManager$PacketContext$Type): void
get "type"(): $MessageType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DisplayRewardToastMessage$Type = ($DisplayRewardToastMessage);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DisplayRewardToastMessage_ = $DisplayRewardToastMessage$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/ui/$Theme" {
import {$ImageIcon, $ImageIcon$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$ImageIcon"
import {$FormattedCharSequence, $FormattedCharSequence$Type} from "packages/net/minecraft/util/$FormattedCharSequence"
import {$Color4I, $Color4I$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Color4I"
import {$Font, $Font$Type} from "packages/net/minecraft/client/gui/$Font"
import {$FormattedText, $FormattedText$Type} from "packages/net/minecraft/network/chat/$FormattedText"
import {$List, $List$Type} from "packages/java/util/$List"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$WidgetType, $WidgetType$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$WidgetType"

export class $Theme {
static readonly "DEFAULT": $Theme
static "renderDebugBoxes": boolean
static readonly "DARK": integer
static readonly "SHADOW": integer
static readonly "CENTERED": integer
static readonly "UNICODE": integer
static readonly "MOUSE_OVER": integer
static readonly "CENTERED_V": integer
static readonly "BACKGROUND_SQUARES": $ImageIcon

constructor()

public "drawGui"(graphics: $GuiGraphics$Type, x: integer, y: integer, w: integer, h: integer, type: $WidgetType$Type): void
public "drawWidget"(graphics: $GuiGraphics$Type, x: integer, y: integer, w: integer, h: integer, type: $WidgetType$Type): void
public "drawString"(graphics: $GuiGraphics$Type, text: any, x: integer, y: integer, flags: integer): integer
public "drawString"(graphics: $GuiGraphics$Type, text: any, x: integer, y: integer): integer
public "drawString"(graphics: $GuiGraphics$Type, text: any, x: integer, y: integer, color: $Color4I$Type, flags: integer): integer
public "drawScrollBarBackground"(graphics: $GuiGraphics$Type, x: integer, y: integer, w: integer, h: integer, type: $WidgetType$Type): void
public "drawContextMenuBackground"(graphics: $GuiGraphics$Type, x: integer, y: integer, w: integer, h: integer): void
public "drawPanelBackground"(graphics: $GuiGraphics$Type, x: integer, y: integer, w: integer, h: integer): void
public "getFont"(): $Font
public "drawScrollBar"(graphics: $GuiGraphics$Type, x: integer, y: integer, w: integer, h: integer, type: $WidgetType$Type, vertical: boolean): void
public "getContentColor"(type: $WidgetType$Type): $Color4I
public "drawTextBox"(graphics: $GuiGraphics$Type, x: integer, y: integer, w: integer, h: integer): void
public "getStringWidth"(text: $FormattedCharSequence$Type): integer
public "getStringWidth"(text: $FormattedText$Type): integer
public "getStringWidth"(text: string): integer
public "trimStringToWidth"(text: string, width: integer): string
public "trimStringToWidth"(text: $FormattedText$Type, width: integer): $FormattedText
public "getFontHeight"(): integer
public "drawButton"(graphics: $GuiGraphics$Type, x: integer, y: integer, w: integer, h: integer, type: $WidgetType$Type): void
public "drawSlot"(graphics: $GuiGraphics$Type, x: integer, y: integer, w: integer, h: integer, type: $WidgetType$Type): void
public "drawHorizontalTab"(graphics: $GuiGraphics$Type, x: integer, y: integer, w: integer, h: integer, selected: boolean): void
public "drawCheckbox"(graphics: $GuiGraphics$Type, x: integer, y: integer, w: integer, h: integer, type: $WidgetType$Type, selected: boolean, radioButton: boolean): void
public "drawContainerSlot"(graphics: $GuiGraphics$Type, x: integer, y: integer, w: integer, h: integer): void
public "listFormattedStringToWidth"(text: $FormattedText$Type, width: integer): $List<($FormattedText)>
public "getInvertedContentColor"(): $Color4I
public "drawCheckboxBackground"(graphics: $GuiGraphics$Type, x: integer, y: integer, w: integer, h: integer, radioButton: boolean): void
public "trimStringToWidthReverse"(text: string, width: integer): string
get "font"(): $Font
get "fontHeight"(): integer
get "invertedContentColor"(): $Color4I
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Theme$Type = ($Theme);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Theme_ = $Theme$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/client/$FTBQClientProxy" {
import {$LootCrate, $LootCrate$Type} from "packages/dev/ftb/mods/ftbquests/quest/loot/$LootCrate"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$IQuestProxy, $IQuestProxy$Type} from "packages/dev/ftb/mods/ftbquests/$IQuestProxy"

export class $FTBQClientProxy implements $IQuestProxy {

constructor()

public "getKnownLootCrates"(): $Collection<($LootCrate)>
get "knownLootCrates"(): $Collection<($LootCrate)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FTBQClientProxy$Type = ($FTBQClientProxy);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FTBQClientProxy_ = $FTBQClientProxy$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/util/$TextComponentUtils" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"

export class $TextComponentUtils {

constructor()

public static "withLinks"(message: string): $Component
public static "hotkeyTooltip"(txt: string): $Component
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TextComponentUtils$Type = ($TextComponentUtils);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TextComponentUtils_ = $TextComponentUtils$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/quest/theme/selector/$TagSelector" {
import {$QuestObjectBase, $QuestObjectBase$Type} from "packages/dev/ftb/mods/ftbquests/quest/$QuestObjectBase"
import {$ThemeSelector, $ThemeSelector$Type} from "packages/dev/ftb/mods/ftbquests/quest/theme/selector/$ThemeSelector"
import {$ThemeSelectorType, $ThemeSelectorType$Type} from "packages/dev/ftb/mods/ftbquests/quest/theme/selector/$ThemeSelectorType"

export class $TagSelector extends $ThemeSelector {
readonly "tag": string

constructor(t: string)

public "equals"(o: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "matches"(quest: $QuestObjectBase$Type): boolean
public "getType"(): $ThemeSelectorType
get "type"(): $ThemeSelectorType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TagSelector$Type = ($TagSelector);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TagSelector_ = $TagSelector$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/quest/task/$Task" {
import {$Quest, $Quest$Type} from "packages/dev/ftb/mods/ftbquests/quest/$Quest"
import {$BaseQuestFile, $BaseQuestFile$Type} from "packages/dev/ftb/mods/ftbquests/quest/$BaseQuestFile"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$ConfigGroup, $ConfigGroup$Type} from "packages/dev/ftb/mods/ftblibrary/config/$ConfigGroup"
import {$QuestObjectType, $QuestObjectType$Type} from "packages/dev/ftb/mods/ftbquests/quest/$QuestObjectType"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Icon, $Icon$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Icon"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$TooltipList, $TooltipList$Type} from "packages/dev/ftb/mods/ftblibrary/util/$TooltipList"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$QuestObject, $QuestObject$Type} from "packages/dev/ftb/mods/ftbquests/quest/$QuestObject"
import {$TaskType, $TaskType$Type} from "packages/dev/ftb/mods/ftbquests/quest/task/$TaskType"
import {$QuestProgressEventData, $QuestProgressEventData$Type} from "packages/dev/ftb/mods/ftbquests/events/$QuestProgressEventData"
import {$Chapter, $Chapter$Type} from "packages/dev/ftb/mods/ftbquests/quest/$Chapter"
import {$PositionedIngredient, $PositionedIngredient$Type} from "packages/dev/ftb/mods/ftblibrary/util/client/$PositionedIngredient"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$Widget, $Widget$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Widget"
import {$RecipeModHelper$Components, $RecipeModHelper$Components$Type} from "packages/dev/ftb/mods/ftbquests/integration/$RecipeModHelper$Components"
import {$ProgressChange, $ProgressChange$Type} from "packages/dev/ftb/mods/ftbquests/util/$ProgressChange"
import {$TeamData, $TeamData$Type} from "packages/dev/ftb/mods/ftbquests/quest/$TeamData"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$Button, $Button$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Button"

export class $Task extends $QuestObject {
readonly "id": long

constructor(id: long, quest: $Quest$Type)

public "getType"(): $TaskType
public "getObjectType"(): $QuestObjectType
public "getQuest"(): $Quest
public "deleteSelf"(): void
public "getQuestFile"(): $BaseQuestFile
public "getIngredient"(widget: $Widget$Type): $Optional<($PositionedIngredient)>
public "getButtonText"(): $MutableComponent
public "deleteChildren"(): void
public "editedFromGUI"(): void
public "readData"(nbt: $CompoundTag$Type): void
public "submitTask"(teamData: $TeamData$Type, player: $ServerPlayer$Type): void
public "submitTask"(teamData: $TeamData$Type, player: $ServerPlayer$Type, craftedItem: $ItemStack$Type): void
public "getAltTitle"(): $Component
public "getAltIcon"(): $Icon
public "forceProgress"(teamData: $TeamData$Type, progressChange: $ProgressChange$Type): void
public "addMouseOverText"(list: $TooltipList$Type, teamData: $TeamData$Type): void
public "getQuestChapter"(): $Chapter
public "getParentID"(): long
public "componentsToRefresh"(): $Set<($RecipeModHelper$Components)>
public "isOptionalForProgression"(): boolean
public "getRelativeProgressFromChildren"(data: $TeamData$Type): integer
public "submitItemsOnInventoryChange"(): boolean
public "autoSubmitOnPlayerTick"(): integer
public "addTitleInMouseOverText"(): boolean
public "hideProgressNumbers"(): boolean
public "onCompleted"(data: $QuestProgressEventData$Type<(any)>): void
public "onCreated"(): void
public "onStarted"(data: $QuestProgressEventData$Type<(any)>): void
public "createSubGroup"(group: $ConfigGroup$Type): $ConfigGroup
public "cacheProgress"(): boolean
public "checkOnLogin"(): boolean
public "formatMaxProgress"(): string
public "getMaxProgress"(): long
public "formatProgress"(teamData: $TeamData$Type, progress: long): string
public "consumesResources"(): boolean
public "canInsertItem"(): boolean
public "addMouseOverHeader"(list: $TooltipList$Type, teamData: $TeamData$Type, advanced: boolean): void
public "onButtonClicked"(button: $Button$Type, canClick: boolean): void
public "drawGUI"(teamData: $TeamData$Type, graphics: $GuiGraphics$Type, x: integer, y: integer, w: integer, h: integer): void
public "writeNetData"(buffer: $FriendlyByteBuf$Type): void
public "writeData"(nbt: $CompoundTag$Type): void
public "fillConfigGroup"(config: $ConfigGroup$Type): void
public "readNetData"(buffer: $FriendlyByteBuf$Type): void
get "type"(): $TaskType
get "objectType"(): $QuestObjectType
get "quest"(): $Quest
get "questFile"(): $BaseQuestFile
get "buttonText"(): $MutableComponent
get "altTitle"(): $Component
get "altIcon"(): $Icon
get "questChapter"(): $Chapter
get "parentID"(): long
get "optionalForProgression"(): boolean
get "maxProgress"(): long
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Task$Type = ($Task);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Task_ = $Task$Type;
}}
declare module "packages/dev/ftb/mods/ftbteams/data/$TeamType" {
import {$StringRepresentable$EnumCodec, $StringRepresentable$EnumCodec$Type} from "packages/net/minecraft/util/$StringRepresentable$EnumCodec"
import {$StringRepresentable, $StringRepresentable$Type} from "packages/net/minecraft/util/$StringRepresentable"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$Keyable, $Keyable$Type} from "packages/com/mojang/serialization/$Keyable"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$TeamManagerImpl, $TeamManagerImpl$Type} from "packages/dev/ftb/mods/ftbteams/data/$TeamManagerImpl"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$AbstractTeam, $AbstractTeam$Type} from "packages/dev/ftb/mods/ftbteams/data/$AbstractTeam"

export class $TeamType extends $Enum<($TeamType)> implements $StringRepresentable {
static readonly "PLAYER": $TeamType
static readonly "PARTY": $TeamType
static readonly "SERVER": $TeamType


public static "values"(): ($TeamType)[]
public static "valueOf"(name: string): $TeamType
public "isPlayer"(): boolean
public "getSerializedName"(): string
public "createTeam"(manager: $TeamManagerImpl$Type, id: $UUID$Type): $AbstractTeam
public "isParty"(): boolean
public "isServer"(): boolean
public static "fromEnumWithMapping"<E extends ($Enum<(E)>) & ($StringRepresentable)>(arg0: $Supplier$Type<((E)[])>, arg1: $Function$Type<(string), (string)>): $StringRepresentable$EnumCodec<(E)>
public static "keys"(arg0: ($StringRepresentable$Type)[]): $Keyable
public static "fromEnum"<E extends ($Enum<(E)>) & ($StringRepresentable)>(arg0: $Supplier$Type<((E)[])>): $StringRepresentable$EnumCodec<(E)>
get "player"(): boolean
get "serializedName"(): string
get "party"(): boolean
get "server"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TeamType$Type = (("server") | ("party") | ("player")) | ($TeamType);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TeamType_ = $TeamType$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/util/$QuestKey" {
import {$Comparable, $Comparable$Type} from "packages/java/lang/$Comparable"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$Reward, $Reward$Type} from "packages/dev/ftb/mods/ftbquests/quest/reward/$Reward"

export class $QuestKey extends $Record implements $Comparable<($QuestKey)> {

constructor(uuid: $UUID$Type, id: long)

public "equals"(o: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "compareTo"(key: $QuestKey$Type): integer
public "id"(): long
public "getId"(): long
public static "create"(uuid: $UUID$Type, questObjectId: long): $QuestKey
public static "fromString"(string: string): $QuestKey
public static "fromNetwork"(buf: $FriendlyByteBuf$Type): $QuestKey
public static "forReward"(uuid: $UUID$Type, reward: $Reward$Type): $QuestKey
public "uuid"(): $UUID
public "toNetwork"(buf: $FriendlyByteBuf$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $QuestKey$Type = ($QuestKey);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $QuestKey_ = $QuestKey$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/client/$QuestFileCacheReloader" {
import {$CompletableFuture, $CompletableFuture$Type} from "packages/java/util/concurrent/$CompletableFuture"
import {$PreparableReloadListener$PreparationBarrier, $PreparableReloadListener$PreparationBarrier$Type} from "packages/net/minecraft/server/packs/resources/$PreparableReloadListener$PreparationBarrier"
import {$ResourceManagerReloadListener, $ResourceManagerReloadListener$Type} from "packages/net/minecraft/server/packs/resources/$ResourceManagerReloadListener"
import {$Executor, $Executor$Type} from "packages/java/util/concurrent/$Executor"
import {$ResourceManager, $ResourceManager$Type} from "packages/net/minecraft/server/packs/resources/$ResourceManager"
import {$ProfilerFiller, $ProfilerFiller$Type} from "packages/net/minecraft/util/profiling/$ProfilerFiller"

export class $QuestFileCacheReloader implements $ResourceManagerReloadListener {

constructor()

public "onResourceManagerReload"(resourceManager: $ResourceManager$Type): void
public "reload"(arg0: $PreparableReloadListener$PreparationBarrier$Type, arg1: $ResourceManager$Type, arg2: $ProfilerFiller$Type, arg3: $ProfilerFiller$Type, arg4: $Executor$Type, arg5: $Executor$Type): $CompletableFuture<(void)>
public "getName"(): string
get "name"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $QuestFileCacheReloader$Type = ($QuestFileCacheReloader);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $QuestFileCacheReloader_ = $QuestFileCacheReloader$Type;
}}
declare module "packages/dev/ftb/mods/ftbteams/net/$SendMessageResponseMessage" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$NetworkManager$PacketContext, $NetworkManager$PacketContext$Type} from "packages/dev/architectury/networking/$NetworkManager$PacketContext"
import {$BaseS2CMessage, $BaseS2CMessage$Type} from "packages/dev/architectury/networking/simple/$BaseS2CMessage"
import {$MessageType, $MessageType$Type} from "packages/dev/architectury/networking/simple/$MessageType"

export class $SendMessageResponseMessage extends $BaseS2CMessage {

constructor(senderId: $UUID$Type, text: $Component$Type)

public "write"(buffer: $FriendlyByteBuf$Type): void
public "getType"(): $MessageType
public "handle"(context: $NetworkManager$PacketContext$Type): void
get "type"(): $MessageType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SendMessageResponseMessage$Type = ($SendMessageResponseMessage);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SendMessageResponseMessage_ = $SendMessageResponseMessage$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/icon/$IconWithPadding" {
import {$Color4I, $Color4I$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Color4I"
import {$JsonElement, $JsonElement$Type} from "packages/com/google/gson/$JsonElement"
import {$IconWithParent, $IconWithParent$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$IconWithParent"
import {$Icon, $Icon$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Icon"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $IconWithPadding extends $IconWithParent {
 "padding": integer
readonly "parent": $Icon


public "draw"(graphics: $GuiGraphics$Type, x: integer, y: integer, w: integer, h: integer): void
public "withColor"(color: $Color4I$Type): $IconWithPadding
public "withTint"(color: $Color4I$Type): $IconWithPadding
public "getJson"(): $JsonElement
get "json"(): $JsonElement
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IconWithPadding$Type = ($IconWithPadding);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IconWithPadding_ = $IconWithPadding$Type;
}}
declare module "packages/dev/ftb/mods/ftbteams/net/$SendMessageMessage" {
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$NetworkManager$PacketContext, $NetworkManager$PacketContext$Type} from "packages/dev/architectury/networking/$NetworkManager$PacketContext"
import {$BaseC2SMessage, $BaseC2SMessage$Type} from "packages/dev/architectury/networking/simple/$BaseC2SMessage"
import {$MessageType, $MessageType$Type} from "packages/dev/architectury/networking/simple/$MessageType"

export class $SendMessageMessage extends $BaseC2SMessage {

constructor(s: string)

public "write"(buffer: $FriendlyByteBuf$Type): void
public "getType"(): $MessageType
public "handle"(context: $NetworkManager$PacketContext$Type): void
get "type"(): $MessageType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SendMessageMessage$Type = ($SendMessageMessage);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SendMessageMessage_ = $SendMessageMessage$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/ui/$IFocusableWidget" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $IFocusableWidget {

 "setFocused"(arg0: boolean): void
 "isFocused"(): boolean
}

export namespace $IFocusableWidget {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IFocusableWidget$Type = ($IFocusableWidget);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IFocusableWidget_ = $IFocusableWidget$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/events/$ObjectStartedEvent$ChapterEvent" {
import {$Event, $Event$Type} from "packages/dev/architectury/event/$Event"
import {$QuestProgressEventData, $QuestProgressEventData$Type} from "packages/dev/ftb/mods/ftbquests/events/$QuestProgressEventData"
import {$EventActor, $EventActor$Type} from "packages/dev/architectury/event/$EventActor"
import {$ObjectStartedEvent, $ObjectStartedEvent$Type} from "packages/dev/ftb/mods/ftbquests/events/$ObjectStartedEvent"
import {$ObjectStartedEvent$QuestEvent, $ObjectStartedEvent$QuestEvent$Type} from "packages/dev/ftb/mods/ftbquests/events/$ObjectStartedEvent$QuestEvent"
import {$ObjectStartedEvent$FileEvent, $ObjectStartedEvent$FileEvent$Type} from "packages/dev/ftb/mods/ftbquests/events/$ObjectStartedEvent$FileEvent"
import {$Chapter, $Chapter$Type} from "packages/dev/ftb/mods/ftbquests/quest/$Chapter"
import {$ObjectStartedEvent$TaskEvent, $ObjectStartedEvent$TaskEvent$Type} from "packages/dev/ftb/mods/ftbquests/events/$ObjectStartedEvent$TaskEvent"

export class $ObjectStartedEvent$ChapterEvent extends $ObjectStartedEvent<($Chapter)> {
static readonly "GENERIC": $Event<($EventActor<($ObjectStartedEvent<(any)>)>)>
static readonly "FILE": $Event<($EventActor<($ObjectStartedEvent$FileEvent)>)>
static readonly "CHAPTER": $Event<($EventActor<($ObjectStartedEvent$ChapterEvent)>)>
static readonly "QUEST": $Event<($EventActor<($ObjectStartedEvent$QuestEvent)>)>
static readonly "TASK": $Event<($EventActor<($ObjectStartedEvent$TaskEvent)>)>

constructor(d: $QuestProgressEventData$Type<($Chapter$Type)>)

public "getChapter"(): $Chapter
get "chapter"(): $Chapter
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ObjectStartedEvent$ChapterEvent$Type = ($ObjectStartedEvent$ChapterEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ObjectStartedEvent$ChapterEvent_ = $ObjectStartedEvent$ChapterEvent$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/client/gui/quests/$ChapterPanel" {
import {$Panel, $Panel$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Panel"
import {$Icon, $Icon$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Icon"
import {$Theme, $Theme$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Theme"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $ChapterPanel extends $Panel {
static readonly "ARROW_COLLAPSED": $Icon
static readonly "ARROW_EXPANDED": $Icon
static readonly "Z_LEVEL": integer
 "posX": integer
 "posY": integer
 "width": integer
 "height": integer

constructor(panel: $Panel$Type)

public "setExpanded"(b: boolean): void
public "alignWidgets"(): void
public "addWidgets"(): void
public "draw"(graphics: $GuiGraphics$Type, theme: $Theme$Type, x: integer, y: integer, w: integer, h: integer): void
public "getX"(): integer
public "checkMouseOver"(mouseX: integer, mouseY: integer): boolean
public "updateMouseOver"(mouseX: integer, mouseY: integer): void
public "drawBackground"(graphics: $GuiGraphics$Type, theme: $Theme$Type, x: integer, y: integer, w: integer, h: integer): void
set "expanded"(value: boolean)
get "x"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ChapterPanel$Type = ($ChapterPanel);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ChapterPanel_ = $ChapterPanel$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/api/$QuestFile" {
import {$Quest, $Quest$Type} from "packages/dev/ftb/mods/ftbquests/quest/$Quest"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$QuestLink, $QuestLink$Type} from "packages/dev/ftb/mods/ftbquests/quest/$QuestLink"
import {$TeamData, $TeamData$Type} from "packages/dev/ftb/mods/ftbquests/quest/$TeamData"
import {$Team, $Team$Type} from "packages/dev/ftb/mods/ftbteams/api/$Team"
import {$Chapter, $Chapter$Type} from "packages/dev/ftb/mods/ftbquests/quest/$Chapter"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export interface $QuestFile {

 "getNullableTeamData"(arg0: $UUID$Type): $TeamData
 "getOrCreateTeamData"(arg0: $UUID$Type): $TeamData
 "getOrCreateTeamData"(arg0: $Team$Type): $TeamData
 "getOrCreateTeamData"(arg0: $Entity$Type): $TeamData
 "forAllQuests"(arg0: $Consumer$Type<($Quest$Type)>): void
 "canEdit"(): boolean
 "isServerSide"(): boolean
 "forAllChapters"(arg0: $Consumer$Type<($Chapter$Type)>): void
 "getAllTeamData"(): $Collection<($TeamData)>
 "forAllQuestLinks"(arg0: $Consumer$Type<($QuestLink$Type)>): void
}

export namespace $QuestFile {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $QuestFile$Type = ($QuestFile);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $QuestFile_ = $QuestFile$Type;
}}
declare module "packages/dev/ftb/mods/ftbxmodcompat/config/$FTBXModConfig$PermSelector" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $FTBXModConfig$PermSelector extends $Enum<($FTBXModConfig$PermSelector)> {
static readonly "DEFAULT": $FTBXModConfig$PermSelector
static readonly "FTB_RANKS": $FTBXModConfig$PermSelector
static readonly "LUCKPERMS": $FTBXModConfig$PermSelector


public static "values"(): ($FTBXModConfig$PermSelector)[]
public static "valueOf"(name: string): $FTBXModConfig$PermSelector
public "isUsable"(): boolean
get "usable"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FTBXModConfig$PermSelector$Type = (("default") | ("ftb_ranks") | ("luckperms")) | ($FTBXModConfig$PermSelector);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FTBXModConfig$PermSelector_ = $FTBXModConfig$PermSelector$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/quest/$QuestObjectBase" {
import {$Comparable, $Comparable$Type} from "packages/java/lang/$Comparable"
import {$BaseQuestFile, $BaseQuestFile$Type} from "packages/dev/ftb/mods/ftbquests/quest/$BaseQuestFile"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$ConfigGroup, $ConfigGroup$Type} from "packages/dev/ftb/mods/ftblibrary/config/$ConfigGroup"
import {$QuestObjectType, $QuestObjectType$Type} from "packages/dev/ftb/mods/ftbquests/quest/$QuestObjectType"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Icon, $Icon$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Icon"
import {$RecipeModHelper$Components, $RecipeModHelper$Components$Type} from "packages/dev/ftb/mods/ftbquests/integration/$RecipeModHelper$Components"
import {$ProgressChange, $ProgressChange$Type} from "packages/dev/ftb/mods/ftbquests/util/$ProgressChange"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Runnable, $Runnable$Type} from "packages/java/lang/$Runnable"
import {$TeamData, $TeamData$Type} from "packages/dev/ftb/mods/ftbquests/quest/$TeamData"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$Chapter, $Chapter$Type} from "packages/dev/ftb/mods/ftbquests/quest/$Chapter"

export class $QuestObjectBase implements $Comparable<($QuestObjectBase)> {
readonly "id": long

constructor(id: long)

public "equals"(object: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "compareTo"(other: $QuestObjectBase$Type): integer
public static "copy"<T extends $QuestObjectBase>(orig: T, factory: $Supplier$Type<(T)>): T
public "getPath"(): $Optional<(string)>
public static "isNull"(object: $QuestObjectBase$Type): boolean
public static "getID"(object: $QuestObjectBase$Type): long
public "isValid"(): boolean
public "getObjectType"(): $QuestObjectType
public "deleteSelf"(): void
public "getQuestFile"(): $BaseQuestFile
public "deleteChildren"(): void
public "editedFromGUI"(): void
public "readData"(nbt: $CompoundTag$Type): void
public "getAltTitle"(): $Component
public "getAltIcon"(): $Icon
public "getIcon"(): $Icon
public "setRawTitle"(rawTitle: string): void
public "forceProgress"(teamData: $TeamData$Type, progressChange: $ProgressChange$Type): void
public static "parseCodeString"(id: string): long
public static "titleToID"(s: string): $Optional<(string)>
public static "parseHexId"(id: string): $Optional<(long)>
public "getTitle"(): $Component
public "getQuestChapter"(): $Chapter
public "getParentID"(): long
public "forceProgressRaw"(teamData: $TeamData$Type, progressChange: $ProgressChange$Type): void
public static "getCodeString"(object: $QuestObjectBase$Type): string
public static "getCodeString"(id: long): string
public "getCodeString"(): string
public "setRawIcon"(rawIcon: $ItemStack$Type): void
public "getRawTitle"(): string
public "hasTag"(tag: string): boolean
public static "shouldSendNotifications"(): boolean
public "onEditButtonClicked"(gui: $Runnable$Type): void
public "editedFromGUIOnServer"(): void
public "componentsToRefresh"(): $Set<($RecipeModHelper$Components)>
public "onCreated"(): void
public "clearCachedData"(): void
public "createSubGroup"(group: $ConfigGroup$Type): $ConfigGroup
public "writeNetData"(buffer: $FriendlyByteBuf$Type): void
public "writeData"(nbt: $CompoundTag$Type): void
public "getMutableTitle"(): $MutableComponent
public "fillConfigGroup"(config: $ConfigGroup$Type): void
public "readNetData"(buffer: $FriendlyByteBuf$Type): void
public "getTags"(): $Set<(string)>
get "path"(): $Optional<(string)>
get "valid"(): boolean
get "objectType"(): $QuestObjectType
get "questFile"(): $BaseQuestFile
get "altTitle"(): $Component
get "altIcon"(): $Icon
get "icon"(): $Icon
set "rawTitle"(value: string)
get "title"(): $Component
get "questChapter"(): $Chapter
get "parentID"(): long
get "codeString"(): string
set "rawIcon"(value: $ItemStack$Type)
get "rawTitle"(): string
get "mutableTitle"(): $MutableComponent
get "tags"(): $Set<(string)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $QuestObjectBase$Type = ($QuestObjectBase);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $QuestObjectBase_ = $QuestObjectBase$Type;
}}
declare module "packages/dev/ftb/mods/ftbteams/api/property/$DoubleProperty" {
import {$ConfigGroup, $ConfigGroup$Type} from "packages/dev/ftb/mods/ftblibrary/config/$ConfigGroup"
import {$TeamPropertyType, $TeamPropertyType$Type} from "packages/dev/ftb/mods/ftbteams/api/property/$TeamPropertyType"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$Tag, $Tag$Type} from "packages/net/minecraft/nbt/$Tag"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$TeamProperty, $TeamProperty$Type} from "packages/dev/ftb/mods/ftbteams/api/property/$TeamProperty"
import {$TeamPropertyValue, $TeamPropertyValue$Type} from "packages/dev/ftb/mods/ftbteams/api/property/$TeamPropertyValue"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $DoubleProperty extends $TeamProperty<(double)> {
readonly "minValue": double
readonly "maxValue": double

constructor(id: $ResourceLocation$Type, def: $Supplier$Type<(double)>)
constructor(id: $ResourceLocation$Type, def: double, min: double, max: double)
constructor(id: $ResourceLocation$Type, def: $Supplier$Type<(double)>, min: double, max: double)

public "write"(buf: $FriendlyByteBuf$Type): void
public "getType"(): $TeamPropertyType<(double)>
public "config"(config: $ConfigGroup$Type, value: $TeamPropertyValue$Type<(double)>): void
public "fromString"(string: string): $Optional<(double)>
public "fromNBT"(tag: $Tag$Type): $Optional<(double)>
public "toNBT"(value: double): $Tag
get "type"(): $TeamPropertyType<(double)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DoubleProperty$Type = ($DoubleProperty);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DoubleProperty_ = $DoubleProperty$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/block/entity/$QuestBarrierBlockEntity" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$ClientGamePacketListener, $ClientGamePacketListener$Type} from "packages/net/minecraft/network/protocol/game/$ClientGamePacketListener"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$Packet, $Packet$Type} from "packages/net/minecraft/network/protocol/$Packet"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BarrierBlockEntity, $BarrierBlockEntity$Type} from "packages/dev/ftb/mods/ftbquests/block/entity/$BarrierBlockEntity"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $QuestBarrierBlockEntity extends $BlockEntity implements $BarrierBlockEntity {
 "blockState": $BlockState

constructor(blockPos: $BlockPos$Type, blockState: $BlockState$Type)

public "update"(s: string): void
public "isOpen"(player: $Player$Type): boolean
public "setChanged"(): void
public "load"(tag: $CompoundTag$Type): void
public "m_183515_"(tag: $CompoundTag$Type): void
public "getUpdateTag"(): $CompoundTag
public "getUpdatePacket"(): $Packet<($ClientGamePacketListener)>
public static "tick"(level: $Level$Type, blockPos: $BlockPos$Type, blockState: $BlockState$Type, blockEntity: $BlockEntity$Type): void
get "updateTag"(): $CompoundTag
get "updatePacket"(): $Packet<($ClientGamePacketListener)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $QuestBarrierBlockEntity$Type = ($QuestBarrierBlockEntity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $QuestBarrierBlockEntity_ = $QuestBarrierBlockEntity$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/snbt/config/$IntValue" {
import {$ConfigGroup, $ConfigGroup$Type} from "packages/dev/ftb/mods/ftblibrary/config/$ConfigGroup"
import {$SNBTConfig, $SNBTConfig$Type} from "packages/dev/ftb/mods/ftblibrary/snbt/config/$SNBTConfig"
import {$SNBTCompoundTag, $SNBTCompoundTag$Type} from "packages/dev/ftb/mods/ftblibrary/snbt/$SNBTCompoundTag"
import {$NumberValue, $NumberValue$Type} from "packages/dev/ftb/mods/ftblibrary/snbt/config/$NumberValue"

export class $IntValue extends $NumberValue<(integer)> {
readonly "parent": $SNBTConfig
readonly "key": string
readonly "defaultValue": T


public "set"(v: integer): void
public "write"(tag: $SNBTCompoundTag$Type): void
public "read"(tag: $SNBTCompoundTag$Type): void
public "range"(max: integer): $NumberValue<(integer)>
public "createClientConfig"(group: $ConfigGroup$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IntValue$Type = ($IntValue);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IntValue_ = $IntValue$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/quest/theme/selector/$ThemeSelector" {
import {$Comparable, $Comparable$Type} from "packages/java/lang/$Comparable"
import {$QuestObjectBase, $QuestObjectBase$Type} from "packages/dev/ftb/mods/ftbquests/quest/$QuestObjectBase"
import {$ThemeSelectorType, $ThemeSelectorType$Type} from "packages/dev/ftb/mods/ftbquests/quest/theme/selector/$ThemeSelectorType"

export class $ThemeSelector implements $Comparable<($ThemeSelector)> {

constructor()

public "compareTo"(o: $ThemeSelector$Type): integer
public "matches"(arg0: $QuestObjectBase$Type): boolean
public "getType"(): $ThemeSelectorType
get "type"(): $ThemeSelectorType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ThemeSelector$Type = ($ThemeSelector);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ThemeSelector_ = $ThemeSelector$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/util/client/$ImageComponent" {
import {$CommandSourceStack, $CommandSourceStack$Type} from "packages/net/minecraft/commands/$CommandSourceStack"
import {$ComponentContents, $ComponentContents$Type} from "packages/net/minecraft/network/chat/$ComponentContents"
import {$Icon, $Icon$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Icon"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$FormattedText$ContentConsumer, $FormattedText$ContentConsumer$Type} from "packages/net/minecraft/network/chat/$FormattedText$ContentConsumer"
import {$FormattedText$StyledContentConsumer, $FormattedText$StyledContentConsumer$Type} from "packages/net/minecraft/network/chat/$FormattedText$StyledContentConsumer"
import {$Style, $Style$Type} from "packages/net/minecraft/network/chat/$Style"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $ImageComponent implements $ComponentContents {
 "image": $Icon
 "width": integer
 "height": integer
 "align": integer
 "fit": boolean

constructor()

public "toString"(): string
public "resolve"(arg0: $CommandSourceStack$Type, arg1: $Entity$Type, arg2: integer): $MutableComponent
public "visit"<T>(arg0: $FormattedText$ContentConsumer$Type<(T)>): $Optional<(T)>
public "visit"<T>(arg0: $FormattedText$StyledContentConsumer$Type<(T)>, arg1: $Style$Type): $Optional<(T)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ImageComponent$Type = ($ImageComponent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ImageComponent_ = $ImageComponent$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/icon/$LazyIcon" {
import {$Color4I, $Color4I$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Color4I"
import {$JsonElement, $JsonElement$Type} from "packages/com/google/gson/$JsonElement"
import {$Icon, $Icon$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Icon"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$PixelBuffer, $PixelBuffer$Type} from "packages/dev/ftb/mods/ftblibrary/math/$PixelBuffer"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $LazyIcon extends $Icon {
readonly "iconSupplier": $Supplier<($Icon)>

constructor(s: $Supplier$Type<($Icon$Type)>)

public "toString"(): string
public "hashCode"(): integer
public "isEmpty"(): boolean
public "copy"(): $Icon
public "getIngredient"(): any
public "draw"(graphics: $GuiGraphics$Type, x: integer, y: integer, w: integer, h: integer): void
public "getIcon"(): $Icon
public "drawStatic"(graphics: $GuiGraphics$Type, x: integer, y: integer, w: integer, h: integer): void
public "withUV"(u0: float, v0: float, u1: float, v1: float): $Icon
public "draw3D"(graphics: $GuiGraphics$Type): void
public "hasPixelBuffer"(): boolean
public "createPixelBuffer"(): $PixelBuffer
public "withColor"(color: $Color4I$Type): $Icon
public "withTint"(color: $Color4I$Type): $Icon
public "getJson"(): $JsonElement
get "empty"(): boolean
get "ingredient"(): any
get "icon"(): $Icon
get "json"(): $JsonElement
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LazyIcon$Type = ($LazyIcon);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LazyIcon_ = $LazyIcon$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/forge/$FTBQuestsForge" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $FTBQuestsForge {

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FTBQuestsForge$Type = ($FTBQuestsForge);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FTBQuestsForge_ = $FTBQuestsForge$Type;
}}
declare module "packages/dev/ftb/mods/ftbteams/api/property/$TeamPropertyArgument" {
import {$Suggestions, $Suggestions$Type} from "packages/com/mojang/brigadier/suggestion/$Suggestions"
import {$CommandSourceStack, $CommandSourceStack$Type} from "packages/net/minecraft/commands/$CommandSourceStack"
import {$StringReader, $StringReader$Type} from "packages/com/mojang/brigadier/$StringReader"
import {$CompletableFuture, $CompletableFuture$Type} from "packages/java/util/concurrent/$CompletableFuture"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$SuggestionsBuilder, $SuggestionsBuilder$Type} from "packages/com/mojang/brigadier/suggestion/$SuggestionsBuilder"
import {$TeamProperty, $TeamProperty$Type} from "packages/dev/ftb/mods/ftbteams/api/property/$TeamProperty"
import {$ArgumentType, $ArgumentType$Type} from "packages/com/mojang/brigadier/arguments/$ArgumentType"
import {$CommandContext, $CommandContext$Type} from "packages/com/mojang/brigadier/context/$CommandContext"

export class $TeamPropertyArgument implements $ArgumentType<($TeamProperty<(any)>)> {


public static "get"(context: $CommandContext$Type<($CommandSourceStack$Type)>, name: string): $TeamProperty<(any)>
public static "create"(): $TeamPropertyArgument
public "parse"(reader: $StringReader$Type): $TeamProperty<(any)>
public "listSuggestions"<S>(context: $CommandContext$Type<(S)>, builder: $SuggestionsBuilder$Type): $CompletableFuture<($Suggestions)>
public "getExamples"(): $Collection<(string)>
get "examples"(): $Collection<(string)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TeamPropertyArgument$Type = ($TeamPropertyArgument);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TeamPropertyArgument_ = $TeamPropertyArgument$Type;
}}
declare module "packages/dev/ftb/mods/ftbxmodcompat/ftbquests/jei/$QuestRecipeManagerPlugin" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$IRecipeCategory, $IRecipeCategory$Type} from "packages/mezz/jei/api/recipe/category/$IRecipeCategory"
import {$List, $List$Type} from "packages/java/util/$List"
import {$RecipeType, $RecipeType$Type} from "packages/mezz/jei/api/recipe/$RecipeType"
import {$IFocus, $IFocus$Type} from "packages/mezz/jei/api/recipe/$IFocus"
import {$IRecipeManagerPlugin, $IRecipeManagerPlugin$Type} from "packages/mezz/jei/api/recipe/advanced/$IRecipeManagerPlugin"

export class $QuestRecipeManagerPlugin extends $Enum<($QuestRecipeManagerPlugin)> implements $IRecipeManagerPlugin {
static readonly "INSTANCE": $QuestRecipeManagerPlugin


public static "values"(): ($QuestRecipeManagerPlugin)[]
public static "valueOf"(name: string): $QuestRecipeManagerPlugin
public "refresh"(): void
public "getRecipeTypes"<V>(focus: $IFocus$Type<(V)>): $List<($RecipeType<(any)>)>
public "getRecipes"<T>(recipeCategory: $IRecipeCategory$Type<(T)>): $List<(T)>
public "getRecipes"<T, V>(recipeCategory: $IRecipeCategory$Type<(T)>, focus: $IFocus$Type<(V)>): $List<(T)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $QuestRecipeManagerPlugin$Type = (("instance")) | ($QuestRecipeManagerPlugin);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $QuestRecipeManagerPlugin_ = $QuestRecipeManagerPlugin$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/quest/theme/selector/$IndirectParentSelector" {
import {$QuestObjectBase, $QuestObjectBase$Type} from "packages/dev/ftb/mods/ftbquests/quest/$QuestObjectBase"
import {$ThemeSelector, $ThemeSelector$Type} from "packages/dev/ftb/mods/ftbquests/quest/theme/selector/$ThemeSelector"
import {$ThemeSelectorType, $ThemeSelectorType$Type} from "packages/dev/ftb/mods/ftbquests/quest/theme/selector/$ThemeSelectorType"

export class $IndirectParentSelector extends $ThemeSelector {
readonly "parent": $ThemeSelector
readonly "child": $ThemeSelector

constructor(s: $ThemeSelector$Type, c: $ThemeSelector$Type)

public "equals"(o: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "matches"(object: $QuestObjectBase$Type): boolean
public "getType"(): $ThemeSelectorType
get "type"(): $ThemeSelectorType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IndirectParentSelector$Type = ($IndirectParentSelector);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IndirectParentSelector_ = $IndirectParentSelector$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/quest/task/$XPTask" {
import {$Quest, $Quest$Type} from "packages/dev/ftb/mods/ftbquests/quest/$Quest"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$ConfigGroup, $ConfigGroup$Type} from "packages/dev/ftb/mods/ftblibrary/config/$ConfigGroup"
import {$ISingleLongValueTask, $ISingleLongValueTask$Type} from "packages/dev/ftb/mods/ftbquests/quest/task/$ISingleLongValueTask"
import {$Task, $Task$Type} from "packages/dev/ftb/mods/ftbquests/quest/task/$Task"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$TaskType, $TaskType$Type} from "packages/dev/ftb/mods/ftbquests/quest/task/$TaskType"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$TeamData, $TeamData$Type} from "packages/dev/ftb/mods/ftbquests/quest/$TeamData"

export class $XPTask extends $Task implements $ISingleLongValueTask {
readonly "id": long

constructor(id: long, quest: $Quest$Type)

public "setValue"(v: long): void
public "getType"(): $TaskType
public "readData"(nbt: $CompoundTag$Type): void
public "submitTask"(teamData: $TeamData$Type, player: $ServerPlayer$Type, craftedItem: $ItemStack$Type): void
public static "getLevelForExperience"(targetXp: integer): integer
public static "getExperienceForLevel"(level: integer): integer
public static "addPlayerXP"(player: $Player$Type, amount: integer): void
public static "xpBarCap"(level: integer): integer
public static "getPlayerXP"(player: $Player$Type): integer
public "formatMaxProgress"(): string
public "getMaxProgress"(): long
public "formatProgress"(teamData: $TeamData$Type, progress: long): string
public "consumesResources"(): boolean
public "writeNetData"(buffer: $FriendlyByteBuf$Type): void
public "writeData"(nbt: $CompoundTag$Type): void
public "fillConfigGroup"(config: $ConfigGroup$Type): void
public "readNetData"(buffer: $FriendlyByteBuf$Type): void
public "getDefaultConfigValue"(): long
public "getMaxConfigValue"(): long
public "getMinConfigValue"(): long
set "value"(value: long)
get "type"(): $TaskType
get "maxProgress"(): long
get "defaultConfigValue"(): long
get "maxConfigValue"(): long
get "minConfigValue"(): long
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $XPTask$Type = ($XPTask);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $XPTask_ = $XPTask$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/snbt/config/$IntArrayValue" {
import {$ConfigGroup, $ConfigGroup$Type} from "packages/dev/ftb/mods/ftblibrary/config/$ConfigGroup"
import {$SNBTConfig, $SNBTConfig$Type} from "packages/dev/ftb/mods/ftblibrary/snbt/config/$SNBTConfig"
import {$SNBTCompoundTag, $SNBTCompoundTag$Type} from "packages/dev/ftb/mods/ftblibrary/snbt/$SNBTCompoundTag"
import {$BaseValue, $BaseValue$Type} from "packages/dev/ftb/mods/ftblibrary/snbt/config/$BaseValue"

export class $IntArrayValue extends $BaseValue<((integer)[])> {
readonly "parent": $SNBTConfig
readonly "key": string
readonly "defaultValue": T


public "write"(tag: $SNBTCompoundTag$Type): void
public "read"(tag: $SNBTCompoundTag$Type): void
public "createClientConfig"(group: $ConfigGroup$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IntArrayValue$Type = ($IntArrayValue);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IntArrayValue_ = $IntArrayValue$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/client/gui/$FTBQuestsTheme" {
import {$ImageIcon, $ImageIcon$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$ImageIcon"
import {$Color4I, $Color4I$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Color4I"
import {$Theme, $Theme$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Theme"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$WidgetType, $WidgetType$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$WidgetType"

export class $FTBQuestsTheme extends $Theme {
static readonly "INSTANCE": $FTBQuestsTheme
static readonly "DEFAULT": $Theme
static "renderDebugBoxes": boolean
static readonly "DARK": integer
static readonly "SHADOW": integer
static readonly "CENTERED": integer
static readonly "UNICODE": integer
static readonly "MOUSE_OVER": integer
static readonly "CENTERED_V": integer
static readonly "BACKGROUND_SQUARES": $ImageIcon

constructor()

public "drawGui"(graphics: $GuiGraphics$Type, x: integer, y: integer, w: integer, h: integer, type: $WidgetType$Type): void
public "drawScrollBarBackground"(graphics: $GuiGraphics$Type, x: integer, y: integer, w: integer, h: integer, type: $WidgetType$Type): void
public "drawContextMenuBackground"(graphics: $GuiGraphics$Type, x: integer, y: integer, w: integer, h: integer): void
public "drawPanelBackground"(graphics: $GuiGraphics$Type, x: integer, y: integer, w: integer, h: integer): void
public "drawScrollBar"(graphics: $GuiGraphics$Type, x: integer, y: integer, w: integer, h: integer, type: $WidgetType$Type, vertical: boolean): void
public "getContentColor"(type: $WidgetType$Type): $Color4I
public "drawTextBox"(graphics: $GuiGraphics$Type, x: integer, y: integer, w: integer, h: integer): void
public "drawButton"(graphics: $GuiGraphics$Type, x: integer, y: integer, w: integer, h: integer, type: $WidgetType$Type): void
public "drawContainerSlot"(graphics: $GuiGraphics$Type, x: integer, y: integer, w: integer, h: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FTBQuestsTheme$Type = ($FTBQuestsTheme);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FTBQuestsTheme_ = $FTBQuestsTheme$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/config/$NumberConfig" {
import {$Color4I, $Color4I$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Color4I"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$ConfigFromString, $ConfigFromString$Type} from "packages/dev/ftb/mods/ftblibrary/config/$ConfigFromString"

export class $NumberConfig<T extends number> extends $ConfigFromString<(T)> {
static readonly "COLOR": $Color4I
readonly "min": T
readonly "max": T
 "fader": boolean
static readonly "NULL_TEXT": $Component
 "id": string

constructor(mn: T, mx: T)

public "fader"(v: boolean): $NumberConfig<(T)>
public "withScrollIncrement"(increment: T): $NumberConfig<(T)>
public "getColor"(v: T): $Color4I
public "canScroll"(): boolean
public "getStringForGUI"(v: T): $Component
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $NumberConfig$Type<T> = ($NumberConfig<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $NumberConfig_<T> = $NumberConfig$Type<(T)>;
}}
declare module "packages/dev/ftb/mods/ftbquests/quest/$QuestShape" {
import {$ImageIcon, $ImageIcon$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$ImageIcon"
import {$NameMap, $NameMap$Type} from "packages/dev/ftb/mods/ftblibrary/config/$NameMap"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Icon, $Icon$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Icon"
import {$PixelBuffer, $PixelBuffer$Type} from "packages/dev/ftb/mods/ftblibrary/math/$PixelBuffer"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $QuestShape extends $Icon {
static "idMap": $NameMap<(string)>
static "idMapWithDefault": $NameMap<(string)>

constructor(id: string)

public static "get"(id: string): $QuestShape
public "equals"(o: any): boolean
public "toString"(): string
public "hashCode"(): integer
public static "map"(): $Map<(string), ($QuestShape)>
public static "reload"(list: $List$Type<(string)>): void
public "getShape"(): $ImageIcon
public "draw"(graphics: $GuiGraphics$Type, x: integer, y: integer, w: integer, h: integer): void
public "getOutline"(): $ImageIcon
public "getBackground"(): $ImageIcon
public "getShapePixels"(): $PixelBuffer
get "shape"(): $ImageIcon
get "outline"(): $ImageIcon
get "background"(): $ImageIcon
get "shapePixels"(): $PixelBuffer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $QuestShape$Type = ($QuestShape);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $QuestShape_ = $QuestShape$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/events/$CustomTaskEvent" {
import {$Event, $Event$Type} from "packages/dev/architectury/event/$Event"
import {$CustomTask, $CustomTask$Type} from "packages/dev/ftb/mods/ftbquests/quest/task/$CustomTask"
import {$EventActor, $EventActor$Type} from "packages/dev/architectury/event/$EventActor"

export class $CustomTaskEvent {
static readonly "EVENT": $Event<($EventActor<($CustomTaskEvent)>)>

constructor(t: $CustomTask$Type)

public "getTask"(): $CustomTask
get "task"(): $CustomTask
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CustomTaskEvent$Type = ($CustomTaskEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CustomTaskEvent_ = $CustomTaskEvent$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/quest/task/$ItemTask" {
import {$Quest, $Quest$Type} from "packages/dev/ftb/mods/ftbquests/quest/$Quest"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$ConfigGroup, $ConfigGroup$Type} from "packages/dev/ftb/mods/ftblibrary/config/$ConfigGroup"
import {$Task, $Task$Type} from "packages/dev/ftb/mods/ftbquests/quest/task/$Task"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$Icon, $Icon$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Icon"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"
import {$TooltipList, $TooltipList$Type} from "packages/dev/ftb/mods/ftblibrary/util/$TooltipList"
import {$TeamData, $TeamData$Type} from "packages/dev/ftb/mods/ftbquests/quest/$TeamData"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Tristate, $Tristate$Type} from "packages/dev/ftb/mods/ftblibrary/config/$Tristate"
import {$TaskType, $TaskType$Type} from "packages/dev/ftb/mods/ftbquests/quest/task/$TaskType"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Button, $Button$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Button"

export class $ItemTask extends $Task implements $Predicate<($ItemStack)> {
/**
 * 
 * @deprecated
 */
static readonly "CHECK_NBT_ITEM_FILTERS": $TagKey<($Item)>
readonly "id": long

constructor(id: long, quest: $Quest$Type)

public "test"(stack: $ItemStack$Type): boolean
public "insert"(teamData: $TeamData$Type, stack: $ItemStack$Type, simulate: boolean): $ItemStack
public "getType"(): $TaskType
public "readData"(nbt: $CompoundTag$Type): void
public "submitTask"(teamData: $TeamData$Type, player: $ServerPlayer$Type, craftedItem: $ItemStack$Type): void
public "getAltTitle"(): $MutableComponent
public "getAltIcon"(): $Icon
public "addMouseOverText"(list: $TooltipList$Type, teamData: $TeamData$Type): void
public "getItemStack"(): $ItemStack
public "submitItemsOnInventoryChange"(): boolean
public "getValidDisplayItems"(): $List<($ItemStack)>
public "isOnlyFromCrafting"(): boolean
public "getMaxProgress"(): long
public "consumesResources"(): boolean
public "canInsertItem"(): boolean
public "setStackAndCount"(stack: $ItemStack$Type, count: integer): $ItemTask
public "addMouseOverHeader"(list: $TooltipList$Type, teamData: $TeamData$Type, advanced: boolean): void
public "onButtonClicked"(button: $Button$Type, canClick: boolean): void
public "setConsumeItems"(consumeItems: $Tristate$Type): void
public "isTaskScreenOnly"(): boolean
public "writeNetData"(buffer: $FriendlyByteBuf$Type): void
public "writeData"(nbt: $CompoundTag$Type): void
public "fillConfigGroup"(config: $ConfigGroup$Type): void
public "readNetData"(buffer: $FriendlyByteBuf$Type): void
public "or"(arg0: $Predicate$Type<(any)>): $Predicate<($ItemStack)>
public "negate"(): $Predicate<($ItemStack)>
public "and"(arg0: $Predicate$Type<(any)>): $Predicate<($ItemStack)>
public static "not"<T>(arg0: $Predicate$Type<(any)>): $Predicate<($ItemStack)>
public static "isEqual"<T>(arg0: any): $Predicate<($ItemStack)>
get "type"(): $TaskType
get "altTitle"(): $MutableComponent
get "altIcon"(): $Icon
get "itemStack"(): $ItemStack
get "validDisplayItems"(): $List<($ItemStack)>
get "onlyFromCrafting"(): boolean
get "maxProgress"(): long
set "consumeItems"(value: $Tristate$Type)
get "taskScreenOnly"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ItemTask$Type = ($ItemTask);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ItemTask_ = $ItemTask$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/util/$KnownServerRegistries" {
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$List, $List$Type} from "packages/java/util/$List"
import {$MinecraftServer, $MinecraftServer$Type} from "packages/net/minecraft/server/$MinecraftServer"
import {$KnownServerRegistries$AdvancementInfo, $KnownServerRegistries$AdvancementInfo$Type} from "packages/dev/ftb/mods/ftblibrary/util/$KnownServerRegistries$AdvancementInfo"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $KnownServerRegistries {
static "client": $KnownServerRegistries
static "server": $KnownServerRegistries
readonly "dimensions": $List<($ResourceLocation)>
readonly "advancements": $Map<($ResourceLocation), ($KnownServerRegistries$AdvancementInfo)>

constructor(buffer: $FriendlyByteBuf$Type)
constructor(server: $MinecraftServer$Type)

public "write"(buffer: $FriendlyByteBuf$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $KnownServerRegistries$Type = ($KnownServerRegistries);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $KnownServerRegistries_ = $KnownServerRegistries$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/util/$ByteCounterOutputStream" {
import {$OutputStream, $OutputStream$Type} from "packages/java/io/$OutputStream"

export class $ByteCounterOutputStream extends $OutputStream {

constructor()

public "write"(b: (byte)[], off: integer, len: integer): void
public "write"(b: (byte)[]): void
public "write"(b: integer): void
public "getSize"(): long
get "size"(): long
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ByteCounterOutputStream$Type = ($ByteCounterOutputStream);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ByteCounterOutputStream_ = $ByteCounterOutputStream$Type;
}}
declare module "packages/dev/ftb/mods/ftbxmodcompat/ftbteams/kubejs/$FTBTeamsKubeJSPlugin" {
import {$KubeJSPlugin, $KubeJSPlugin$Type} from "packages/dev/latvian/mods/kubejs/$KubeJSPlugin"

export class $FTBTeamsKubeJSPlugin extends $KubeJSPlugin {

constructor()

public "init"(): void
public "registerEvents"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FTBTeamsKubeJSPlugin$Type = ($FTBTeamsKubeJSPlugin);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FTBTeamsKubeJSPlugin_ = $FTBTeamsKubeJSPlugin$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/config/$ImageResourceConfig" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Widget, $Widget$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Widget"
import {$OptionalLong, $OptionalLong$Type} from "packages/java/util/$OptionalLong"
import {$ConfigCallback, $ConfigCallback$Type} from "packages/dev/ftb/mods/ftblibrary/config/$ConfigCallback"
import {$Icon, $Icon$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Icon"
import {$MouseButton, $MouseButton$Type} from "packages/dev/ftb/mods/ftblibrary/ui/input/$MouseButton"
import {$ResourceConfigValue, $ResourceConfigValue$Type} from "packages/dev/ftb/mods/ftblibrary/config/$ResourceConfigValue"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$TooltipList, $TooltipList$Type} from "packages/dev/ftb/mods/ftblibrary/util/$TooltipList"
import {$SelectableResource, $SelectableResource$Type} from "packages/dev/ftb/mods/ftblibrary/config/ui/$SelectableResource"

export class $ImageResourceConfig extends $ResourceConfigValue<($ResourceLocation)> {
static readonly "NONE": $ResourceLocation
static readonly "NULL_TEXT": $Component
 "id": string

constructor()

public "isEmpty"(): boolean
public "getResource"(): $SelectableResource<($ResourceLocation)>
public "setAllowEmpty"(allowEmpty: boolean): void
public static "getResourceLocation"(icon: $Icon$Type): $ResourceLocation
public "canHaveNBT"(): boolean
public "addInfo"(list: $TooltipList$Type): void
public "onClicked"(clicked: $Widget$Type, button: $MouseButton$Type, callback: $ConfigCallback$Type): void
public "allowEmptyResource"(): boolean
public "setResource"(selectedStack: $SelectableResource$Type<($ResourceLocation$Type)>): boolean
public "fixedResourceSize"(): $OptionalLong
get "empty"(): boolean
get "resource"(): $SelectableResource<($ResourceLocation)>
set "allowEmpty"(value: boolean)
set "resource"(value: $SelectableResource$Type<($ResourceLocation$Type)>)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ImageResourceConfig$Type = ($ImageResourceConfig);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ImageResourceConfig_ = $ImageResourceConfig$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/ui/$ThemeManager" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$Theme, $Theme$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Theme"

export class $ThemeManager extends $Enum<($ThemeManager)> {
static readonly "INSTANCE": $ThemeManager


public static "values"(): ($ThemeManager)[]
public static "valueOf"(name: string): $ThemeManager
public "getActiveTheme"(): $Theme
get "activeTheme"(): $Theme
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ThemeManager$Type = (("instance")) | ($ThemeManager);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ThemeManager_ = $ThemeManager$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/math/$MathUtils" {
import {$XZ, $XZ$Type} from "packages/dev/ftb/mods/ftblibrary/math/$XZ"
import {$Random, $Random$Type} from "packages/java/util/$Random"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"

export class $MathUtils {
static readonly "RAND": $Random
static readonly "NORMALS_X": (float)[]
static readonly "NORMALS_Y": (float)[]
static readonly "NORMALS_Z": (float)[]
static readonly "ROTATION_X": (integer)[]
static readonly "ROTATION_Y": (integer)[]

constructor()

public static "sqrt"(value: double): double
public static "map"(min1: double, max1: double, min2: double, max2: double, value: double): double
public static "mod"(i: double, n: double): double
public static "mod"(i: integer, n: integer): integer
public static "sq"(value: double): double
public static "chunk"(d: double): integer
public static "chunk"(i: integer): integer
public static "dist"(x1: double, y1: double, x2: double, y2: double): double
public static "dist"(x1: double, y1: double, z1: double, x2: double, y2: double, z2: double): double
public static "clamp"(f: long, g: long, h: long): long
public static "canParseInt"(string: string): boolean
public static "getSpiralPoint0"(index: integer): $XZ
public static "canParseDouble"(string: string): boolean
public static "sqrt3sq"(x: double, y: double, z: double): double
public static "getSpiralPoint"(index: integer): $XZ
public static "sqrt2sq"(x: double, y: double): double
public static "distSq"(x1: double, y1: double, z1: double, x2: double, y2: double, z2: double): double
public static "distSq"(x1: double, y1: double, x2: double, y2: double): double
public static "lerp"(min: float, max: float, value: float): float
public static "lerp"(min: double, max: double, value: double): double
public static "lerp"(v1: $Vec3$Type, v2: $Vec3$Type, value: double): $Vec3
public static "lerp"(x1: double, y1: double, z1: double, x2: double, y2: double, z2: double, value: double): $Vec3
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MathUtils$Type = ($MathUtils);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MathUtils_ = $MathUtils$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/quest/$ProgressionMode" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$NameMap, $NameMap$Type} from "packages/dev/ftb/mods/ftblibrary/config/$NameMap"

export class $ProgressionMode extends $Enum<($ProgressionMode)> {
static readonly "DEFAULT": $ProgressionMode
static readonly "LINEAR": $ProgressionMode
static readonly "FLEXIBLE": $ProgressionMode
static readonly "NAME_MAP": $NameMap<($ProgressionMode)>
static readonly "NAME_MAP_NO_DEFAULT": $NameMap<($ProgressionMode)>


public static "values"(): ($ProgressionMode)[]
public static "valueOf"(name: string): $ProgressionMode
public "getId"(): string
get "id"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ProgressionMode$Type = (("default") | ("linear") | ("flexible")) | ($ProgressionMode);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ProgressionMode_ = $ProgressionMode$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/quest/theme/property/$ThemeProperty" {
import {$QuestObjectBase, $QuestObjectBase$Type} from "packages/dev/ftb/mods/ftbquests/quest/$QuestObjectBase"

export class $ThemeProperty<T> {

constructor(name: string, defaultValue: T)

public "getName"(): string
public "get"(): T
public "get"(object: $QuestObjectBase$Type): T
public "equals"(o: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "getDefaultValue"(): T
public "parse"(arg0: string): T
get "name"(): string
get "defaultValue"(): T
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ThemeProperty$Type<T> = ($ThemeProperty<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ThemeProperty_<T> = $ThemeProperty$Type<(T)>;
}}
declare module "packages/dev/ftb/mods/ftbquests/block/$TaskScreenBlock$Aux" {
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$TaskScreenBlock, $TaskScreenBlock$Type} from "packages/dev/ftb/mods/ftbquests/block/$TaskScreenBlock"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$DirectionProperty, $DirectionProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$DirectionProperty"

export class $TaskScreenBlock$Aux extends $TaskScreenBlock {
static readonly "FACING": $DirectionProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation


public "newBlockEntity"(blockPos: $BlockPos$Type, blockState: $BlockState$Type): $BlockEntity
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TaskScreenBlock$Aux$Type = ($TaskScreenBlock$Aux);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TaskScreenBlock$Aux_ = $TaskScreenBlock$Aux$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/api/$FTBQuestsAPI$API" {
import {$ItemFilterAdapter, $ItemFilterAdapter$Type} from "packages/dev/ftb/mods/ftbquests/api/$ItemFilterAdapter"
import {$BaseQuestFile, $BaseQuestFile$Type} from "packages/dev/ftb/mods/ftbquests/quest/$BaseQuestFile"

export interface $FTBQuestsAPI$API {

 "getQuestFile"(arg0: boolean): $BaseQuestFile
 "registerFilterAdapter"(arg0: $ItemFilterAdapter$Type): void
}

export namespace $FTBQuestsAPI$API {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FTBQuestsAPI$API$Type = ($FTBQuestsAPI$API);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FTBQuestsAPI$API_ = $FTBQuestsAPI$API$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/net/$SetCustomImageMessage" {
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$NetworkManager$PacketContext, $NetworkManager$PacketContext$Type} from "packages/dev/architectury/networking/$NetworkManager$PacketContext"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$BaseC2SMessage, $BaseC2SMessage$Type} from "packages/dev/architectury/networking/simple/$BaseC2SMessage"
import {$MessageType, $MessageType$Type} from "packages/dev/architectury/networking/simple/$MessageType"

export class $SetCustomImageMessage extends $BaseC2SMessage {

constructor(h: $InteractionHand$Type, t: $ResourceLocation$Type)

public "write"(buffer: $FriendlyByteBuf$Type): void
public "getType"(): $MessageType
public "handle"(context: $NetworkManager$PacketContext$Type): void
get "type"(): $MessageType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SetCustomImageMessage$Type = ($SetCustomImageMessage);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SetCustomImageMessage_ = $SetCustomImageMessage$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/quest/task/$StatTask" {
import {$Quest, $Quest$Type} from "packages/dev/ftb/mods/ftbquests/quest/$Quest"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$ConfigGroup, $ConfigGroup$Type} from "packages/dev/ftb/mods/ftblibrary/config/$ConfigGroup"
import {$Task, $Task$Type} from "packages/dev/ftb/mods/ftbquests/quest/task/$Task"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$TaskType, $TaskType$Type} from "packages/dev/ftb/mods/ftbquests/quest/task/$TaskType"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$TeamData, $TeamData$Type} from "packages/dev/ftb/mods/ftbquests/quest/$TeamData"

export class $StatTask extends $Task {
readonly "id": long

constructor(id: long, quest: $Quest$Type)

public "getType"(): $TaskType
public "readData"(nbt: $CompoundTag$Type): void
public "submitTask"(teamData: $TeamData$Type, player: $ServerPlayer$Type, craftedItem: $ItemStack$Type): void
public "autoSubmitOnPlayerTick"(): integer
public "formatMaxProgress"(): string
public "getMaxProgress"(): long
public "formatProgress"(teamData: $TeamData$Type, progress: long): string
public "writeNetData"(buffer: $FriendlyByteBuf$Type): void
public "writeData"(nbt: $CompoundTag$Type): void
public "fillConfigGroup"(config: $ConfigGroup$Type): void
public "readNetData"(buffer: $FriendlyByteBuf$Type): void
get "type"(): $TaskType
get "maxProgress"(): long
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $StatTask$Type = ($StatTask);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $StatTask_ = $StatTask$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/client/gui/quests/$ValidItemsScreen" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$Key, $Key$Type} from "packages/dev/ftb/mods/ftblibrary/ui/input/$Key"
import {$Theme, $Theme$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Theme"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ItemTask, $ItemTask$Type} from "packages/dev/ftb/mods/ftbquests/quest/task/$ItemTask"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$BaseScreen, $BaseScreen$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$BaseScreen"

export class $ValidItemsScreen extends $BaseScreen {
 "posX": integer
 "posY": integer
 "width": integer
 "height": integer

constructor(task: $ItemTask$Type, validItems: $List$Type<($ItemStack$Type)>, canClick: boolean)

public "doesGuiPauseGame"(): boolean
public "onClosedByKey"(key: $Key$Type): boolean
public "addWidgets"(): void
public "getTheme"(): $Theme
public "keyPressed"(key: $Key$Type): boolean
public "drawBackground"(matrixStack: $GuiGraphics$Type, theme: $Theme$Type, x: integer, y: integer, w: integer, h: integer): void
get "theme"(): $Theme
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ValidItemsScreen$Type = ($ValidItemsScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ValidItemsScreen_ = $ValidItemsScreen$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/util/$ContainerKey" {
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"

export class $ContainerKey {
readonly "container": $Container

constructor(c: $Container$Type)

public "equals"(o: any): boolean
public "hashCode"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ContainerKey$Type = ($ContainerKey);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ContainerKey_ = $ContainerKey$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/ui/$GuiHelper" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$Color4I, $Color4I$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Color4I"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$List, $List$Type} from "packages/java/util/$List"
import {$BufferBuilder, $BufferBuilder$Type} from "packages/com/mojang/blaze3d/vertex/$BufferBuilder"
import {$Window, $Window$Type} from "packages/com/mojang/blaze3d/platform/$Window"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$ClickEvent, $ClickEvent$Type} from "packages/net/minecraft/network/chat/$ClickEvent"
import {$BaseScreen, $BaseScreen$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$BaseScreen"

export class $GuiHelper {
static readonly "BLANK_GUI": $BaseScreen

constructor()

public static "addStackTooltip"(stack: $ItemStack$Type, list: $List$Type<($Component$Type)>): void
public static "addStackTooltip"(stack: $ItemStack$Type, list: $List$Type<($Component$Type)>, prefix: $Component$Type): void
public static "addRectToBufferWithUV"(graphics: $GuiGraphics$Type, buffer: $BufferBuilder$Type, x: integer, y: integer, w: integer, h: integer, col: $Color4I$Type, u0: float, v0: float, u1: float, v1: float): void
public static "drawHollowRect"(graphics: $GuiGraphics$Type, x: integer, y: integer, w: integer, h: integer, col: $Color4I$Type, roundEdges: boolean): void
public static "pushScissor"(screen: $Window$Type, x: integer, y: integer, w: integer, h: integer): void
public static "popScissor"(screen: $Window$Type): void
public static "drawItem"(graphics: $GuiGraphics$Type, stack: $ItemStack$Type, hash: integer, renderOverlay: boolean, text: string): void
public static "addRectToBuffer"(graphics: $GuiGraphics$Type, buffer: $BufferBuilder$Type, x: integer, y: integer, w: integer, h: integer, col: $Color4I$Type): void
public static "drawTexturedRect"(graphics: $GuiGraphics$Type, x: integer, y: integer, w: integer, h: integer, col: $Color4I$Type, u0: float, v0: float, u1: float, v1: float): void
public static "drawBorderedPanel"(graphics: $GuiGraphics$Type, x: integer, y: integer, w: integer, h: integer, color: $Color4I$Type, outset: boolean): void
public static "drawGradientRect"(graphics: $GuiGraphics$Type, x: integer, y: integer, w: integer, h: integer, col1: $Color4I$Type, col2: $Color4I$Type): void
public static "setupDrawing"(): void
public static "playSound"(event: $SoundEvent$Type, pitch: float): void
public static "drawRectWithShade"(graphics: $GuiGraphics$Type, x: integer, y: integer, w: integer, h: integer, col: $Color4I$Type, intensity: integer): void
public static "clickEventToString"(event: $ClickEvent$Type): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GuiHelper$Type = ($GuiHelper);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GuiHelper_ = $GuiHelper$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/forge/$ClientSetup" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $ClientSetup {

constructor()

public static "init"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientSetup$Type = ($ClientSetup);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientSetup_ = $ClientSetup$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/net/$ForceSaveMessage" {
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$NetworkManager$PacketContext, $NetworkManager$PacketContext$Type} from "packages/dev/architectury/networking/$NetworkManager$PacketContext"
import {$BaseC2SMessage, $BaseC2SMessage$Type} from "packages/dev/architectury/networking/simple/$BaseC2SMessage"
import {$MessageType, $MessageType$Type} from "packages/dev/architectury/networking/simple/$MessageType"

export class $ForceSaveMessage extends $BaseC2SMessage {

constructor()

public "write"(buffer: $FriendlyByteBuf$Type): void
public "getType"(): $MessageType
public "handle"(context: $NetworkManager$PacketContext$Type): void
get "type"(): $MessageType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ForceSaveMessage$Type = ($ForceSaveMessage);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ForceSaveMessage_ = $ForceSaveMessage$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/net/$SyncStructuresRequestMessage" {
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$NetworkManager$PacketContext, $NetworkManager$PacketContext$Type} from "packages/dev/architectury/networking/$NetworkManager$PacketContext"
import {$BaseC2SMessage, $BaseC2SMessage$Type} from "packages/dev/architectury/networking/simple/$BaseC2SMessage"
import {$MessageType, $MessageType$Type} from "packages/dev/architectury/networking/simple/$MessageType"

export class $SyncStructuresRequestMessage extends $BaseC2SMessage {

constructor()
constructor(buf: $FriendlyByteBuf$Type)

public "write"(buf: $FriendlyByteBuf$Type): void
public "getType"(): $MessageType
public "handle"(context: $NetworkManager$PacketContext$Type): void
get "type"(): $MessageType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SyncStructuresRequestMessage$Type = ($SyncStructuresRequestMessage);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SyncStructuresRequestMessage_ = $SyncStructuresRequestMessage$Type;
}}
declare module "packages/dev/ftb/mods/ftbxmodcompat/ftbfiltersystem/kubejs/$CustomFilterEventJS" {
import {$EventJS, $EventJS$Type} from "packages/dev/latvian/mods/kubejs/event/$EventJS"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export class $CustomFilterEventJS extends $EventJS {

constructor(stack: $ItemStack$Type, data: string)

public "getStack"(): $ItemStack
public "getData"(): string
get "stack"(): $ItemStack
get "data"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CustomFilterEventJS$Type = ($CustomFilterEventJS);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CustomFilterEventJS_ = $CustomFilterEventJS$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/ui/misc/$AbstractButtonListScreen" {
import {$Panel, $Panel$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Panel"
import {$AbstractThreePanelScreen, $AbstractThreePanelScreen$Type} from "packages/dev/ftb/mods/ftblibrary/ui/misc/$AbstractThreePanelScreen"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Widget, $Widget$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Widget"
import {$AbstractButtonListScreen$ButtonPanel, $AbstractButtonListScreen$ButtonPanel$Type} from "packages/dev/ftb/mods/ftblibrary/ui/misc/$AbstractButtonListScreen$ButtonPanel"
import {$Pair, $Pair$Type} from "packages/com/mojang/datafixers/util/$Pair"

export class $AbstractButtonListScreen extends $AbstractThreePanelScreen<($AbstractButtonListScreen$ButtonPanel)> {
static readonly "NO_INSET": $Pair<(integer), (integer)>
 "posX": integer
 "posY": integer
 "width": integer
 "height": integer

constructor()

public "setTitle"(txt: $Component$Type): void
public "getFilterText"(widget: $Widget$Type): string
public "addButtons"(arg0: $Panel$Type): void
public "getTitle"(): $Component
public "setBorder"(h: integer, v: integer, w: integer): void
public "setHasSearchBox"(newVal: boolean): void
public "focus"(): void
set "title"(value: $Component$Type)
get "title"(): $Component
set "hasSearchBox"(value: boolean)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AbstractButtonListScreen$Type = ($AbstractButtonListScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AbstractButtonListScreen_ = $AbstractButtonListScreen$Type;
}}
declare module "packages/dev/ftb/mods/ftbteams/data/$TeamArgument" {
import {$Dynamic2CommandExceptionType, $Dynamic2CommandExceptionType$Type} from "packages/com/mojang/brigadier/exceptions/$Dynamic2CommandExceptionType"
import {$Suggestions, $Suggestions$Type} from "packages/com/mojang/brigadier/suggestion/$Suggestions"
import {$CommandSourceStack, $CommandSourceStack$Type} from "packages/net/minecraft/commands/$CommandSourceStack"
import {$CompletableFuture, $CompletableFuture$Type} from "packages/java/util/concurrent/$CompletableFuture"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$TeamArgumentProvider, $TeamArgumentProvider$Type} from "packages/dev/ftb/mods/ftbteams/data/$TeamArgumentProvider"
import {$ArgumentType, $ArgumentType$Type} from "packages/com/mojang/brigadier/arguments/$ArgumentType"
import {$DynamicCommandExceptionType, $DynamicCommandExceptionType$Type} from "packages/com/mojang/brigadier/exceptions/$DynamicCommandExceptionType"
import {$StringReader, $StringReader$Type} from "packages/com/mojang/brigadier/$StringReader"
import {$SimpleCommandExceptionType, $SimpleCommandExceptionType$Type} from "packages/com/mojang/brigadier/exceptions/$SimpleCommandExceptionType"
import {$SuggestionsBuilder, $SuggestionsBuilder$Type} from "packages/com/mojang/brigadier/suggestion/$SuggestionsBuilder"
import {$Team, $Team$Type} from "packages/dev/ftb/mods/ftbteams/api/$Team"
import {$CommandContext, $CommandContext$Type} from "packages/com/mojang/brigadier/context/$CommandContext"

export class $TeamArgument implements $ArgumentType<($TeamArgumentProvider)> {
static readonly "ALREADY_IN_PARTY": $SimpleCommandExceptionType
static readonly "PLAYER_IN_PARTY": $DynamicCommandExceptionType
static readonly "NOT_IN_PARTY": $SimpleCommandExceptionType
static readonly "TEAM_NOT_FOUND": $DynamicCommandExceptionType
static readonly "CANT_EDIT": $DynamicCommandExceptionType
static readonly "NOT_MEMBER": $Dynamic2CommandExceptionType
static readonly "NOT_OFFICER": $Dynamic2CommandExceptionType
static readonly "NOT_INVITED": $DynamicCommandExceptionType
static readonly "OWNER_CANT_LEAVE": $SimpleCommandExceptionType
static readonly "CANT_KICK_OWNER": $SimpleCommandExceptionType
static readonly "API_OVERRIDE": $SimpleCommandExceptionType
static readonly "NAME_TOO_SHORT": $SimpleCommandExceptionType
static readonly "NO_PERMISSION": $SimpleCommandExceptionType


public static "get"(context: $CommandContext$Type<($CommandSourceStack$Type)>, name: string): $Team
public static "create"(): $TeamArgument
public "parse"(reader: $StringReader$Type): $TeamArgumentProvider
public "listSuggestions"<S>(commandContext: $CommandContext$Type<(S)>, builder: $SuggestionsBuilder$Type): $CompletableFuture<($Suggestions)>
public "getExamples"(): $Collection<(string)>
get "examples"(): $Collection<(string)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TeamArgument$Type = ($TeamArgument);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TeamArgument_ = $TeamArgument$Type;
}}
declare module "packages/dev/ftb/mods/ftbteams/$FTBTeamsCommon" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$KnownClientPlayer, $KnownClientPlayer$Type} from "packages/dev/ftb/mods/ftbteams/api/client/$KnownClientPlayer"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$TeamPropertyCollection, $TeamPropertyCollection$Type} from "packages/dev/ftb/mods/ftbteams/api/property/$TeamPropertyCollection"

export class $FTBTeamsCommon {

constructor()

public "sendMessage"(from: $UUID$Type, text: $Component$Type): void
public "updateSettings"(id: $UUID$Type, properties: $TeamPropertyCollection$Type): void
public "updatePresence"(update: $KnownClientPlayer$Type): void
public "openMyTeamGui"(properties: $TeamPropertyCollection$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FTBTeamsCommon$Type = ($FTBTeamsCommon);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FTBTeamsCommon_ = $FTBTeamsCommon$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/block/$DetectorBlock" {
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$BaseEntityBlock, $BaseEntityBlock$Type} from "packages/net/minecraft/world/level/block/$BaseEntityBlock"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$RenderShape, $RenderShape$Type} from "packages/net/minecraft/world/level/block/$RenderShape"

export class $DetectorBlock extends $BaseEntityBlock {
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor()

public "setPlacedBy"(level: $Level$Type, pos: $BlockPos$Type, state: $BlockState$Type, entity: $LivingEntity$Type, stack: $ItemStack$Type): void
public "neighborChanged"(blockState: $BlockState$Type, level: $Level$Type, blockPos: $BlockPos$Type, block: $Block$Type, blockPos2: $BlockPos$Type, bl: boolean): void
public "getRenderShape"(blockState: $BlockState$Type): $RenderShape
public "newBlockEntity"(blockPos: $BlockPos$Type, blockState: $BlockState$Type): $BlockEntity
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DetectorBlock$Type = ($DetectorBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DetectorBlock_ = $DetectorBlock$Type;
}}
declare module "packages/dev/ftb/mods/ftbteams/data/$TeamPropertyCollectionImpl" {
import {$BiConsumer, $BiConsumer$Type} from "packages/java/util/function/$BiConsumer"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$List, $List$Type} from "packages/java/util/$List"
import {$TeamProperty, $TeamProperty$Type} from "packages/dev/ftb/mods/ftbteams/api/property/$TeamProperty"
import {$TeamPropertyCollection, $TeamPropertyCollection$Type} from "packages/dev/ftb/mods/ftbteams/api/property/$TeamPropertyCollection"
import {$TeamPropertyValue, $TeamPropertyValue$Type} from "packages/dev/ftb/mods/ftbteams/api/property/$TeamPropertyValue"

export class $TeamPropertyCollectionImpl implements $TeamPropertyCollection {

constructor()

public "get"<T>(key: $TeamProperty$Type<(T)>): T
public "set"<T>(key: $TeamProperty$Type<(T)>, value: T): void
public "write"(buffer: $FriendlyByteBuf$Type): void
public "write"(tag: $CompoundTag$Type): $CompoundTag
public "read"(tag: $CompoundTag$Type): void
public "read"(buffer: $FriendlyByteBuf$Type): void
public "forEach"<T>(consumer: $BiConsumer$Type<($TeamProperty$Type<(T)>), ($TeamPropertyValue$Type<(T)>)>): void
public static "fromNetwork"(buf: $FriendlyByteBuf$Type): $TeamPropertyCollectionImpl
public "updateFrom"(otherProperties: $TeamPropertyCollection$Type): void
public "collectProperties"(): void
public "writeSyncableOnly"(buffer: $FriendlyByteBuf$Type, syncableProps: $List$Type<($TeamProperty$Type<(any)>)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TeamPropertyCollectionImpl$Type = ($TeamPropertyCollectionImpl);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TeamPropertyCollectionImpl_ = $TeamPropertyCollectionImpl$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/ui/$BlankPanel" {
import {$Panel, $Panel$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Panel"

export class $BlankPanel extends $Panel {
 "posX": integer
 "posY": integer
 "width": integer
 "height": integer

constructor(panel: $Panel$Type)
constructor(panel: $Panel$Type, _id: string)

public "toString"(): string
public "alignWidgets"(): void
public "clearWidgets"(): void
public "addWidgets"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BlankPanel$Type = ($BlankPanel);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BlankPanel_ = $BlankPanel$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/net/$ToggleEditingModeMessage" {
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$NetworkManager$PacketContext, $NetworkManager$PacketContext$Type} from "packages/dev/architectury/networking/$NetworkManager$PacketContext"
import {$BaseC2SMessage, $BaseC2SMessage$Type} from "packages/dev/architectury/networking/simple/$BaseC2SMessage"
import {$MessageType, $MessageType$Type} from "packages/dev/architectury/networking/simple/$MessageType"

export class $ToggleEditingModeMessage extends $BaseC2SMessage {

constructor()
constructor(friendlyByteBuf: $FriendlyByteBuf$Type)

public "write"(buf: $FriendlyByteBuf$Type): void
public "getType"(): $MessageType
public "handle"(context: $NetworkManager$PacketContext$Type): void
get "type"(): $MessageType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ToggleEditingModeMessage$Type = ($ToggleEditingModeMessage);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ToggleEditingModeMessage_ = $ToggleEditingModeMessage$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/net/$ToggleChapterPinnedResponseMessage" {
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$NetworkManager$PacketContext, $NetworkManager$PacketContext$Type} from "packages/dev/architectury/networking/$NetworkManager$PacketContext"
import {$BaseS2CMessage, $BaseS2CMessage$Type} from "packages/dev/architectury/networking/simple/$BaseS2CMessage"
import {$MessageType, $MessageType$Type} from "packages/dev/architectury/networking/simple/$MessageType"

export class $ToggleChapterPinnedResponseMessage extends $BaseS2CMessage {

constructor(pinned: boolean)

public "write"(buf: $FriendlyByteBuf$Type): void
public "getType"(): $MessageType
public "handle"(context: $NetworkManager$PacketContext$Type): void
get "type"(): $MessageType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ToggleChapterPinnedResponseMessage$Type = ($ToggleChapterPinnedResponseMessage);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ToggleChapterPinnedResponseMessage_ = $ToggleChapterPinnedResponseMessage$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/ui/$NordTheme" {
import {$ImageIcon, $ImageIcon$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$ImageIcon"
import {$Color4I, $Color4I$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Color4I"
import {$Theme, $Theme$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Theme"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$WidgetType, $WidgetType$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$WidgetType"

export class $NordTheme extends $Theme {
static readonly "THEME": $Theme
static readonly "DEFAULT": $Theme
static "renderDebugBoxes": boolean
static readonly "DARK": integer
static readonly "SHADOW": integer
static readonly "CENTERED": integer
static readonly "UNICODE": integer
static readonly "MOUSE_OVER": integer
static readonly "CENTERED_V": integer
static readonly "BACKGROUND_SQUARES": $ImageIcon

constructor()

public "drawGui"(graphics: $GuiGraphics$Type, x: integer, y: integer, w: integer, h: integer, type: $WidgetType$Type): void
public "drawWidget"(graphics: $GuiGraphics$Type, x: integer, y: integer, w: integer, h: integer, type: $WidgetType$Type): void
public "drawScrollBarBackground"(graphics: $GuiGraphics$Type, x: integer, y: integer, w: integer, h: integer, type: $WidgetType$Type): void
public "drawContextMenuBackground"(graphics: $GuiGraphics$Type, x: integer, y: integer, w: integer, h: integer): void
public "drawPanelBackground"(graphics: $GuiGraphics$Type, x: integer, y: integer, w: integer, h: integer): void
public "drawScrollBar"(graphics: $GuiGraphics$Type, x: integer, y: integer, w: integer, h: integer, type: $WidgetType$Type, vertical: boolean): void
public "getContentColor"(type: $WidgetType$Type): $Color4I
public "drawTextBox"(graphics: $GuiGraphics$Type, x: integer, y: integer, w: integer, h: integer): void
public "drawButton"(graphics: $GuiGraphics$Type, x: integer, y: integer, w: integer, h: integer, type: $WidgetType$Type): void
public "drawSlot"(graphics: $GuiGraphics$Type, x: integer, y: integer, w: integer, h: integer, type: $WidgetType$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $NordTheme$Type = ($NordTheme);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $NordTheme_ = $NordTheme$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/snbt/config/$LongValue" {
import {$ConfigGroup, $ConfigGroup$Type} from "packages/dev/ftb/mods/ftblibrary/config/$ConfigGroup"
import {$SNBTConfig, $SNBTConfig$Type} from "packages/dev/ftb/mods/ftblibrary/snbt/config/$SNBTConfig"
import {$SNBTCompoundTag, $SNBTCompoundTag$Type} from "packages/dev/ftb/mods/ftblibrary/snbt/$SNBTCompoundTag"
import {$NumberValue, $NumberValue$Type} from "packages/dev/ftb/mods/ftblibrary/snbt/config/$NumberValue"

export class $LongValue extends $NumberValue<(long)> {
readonly "parent": $SNBTConfig
readonly "key": string
readonly "defaultValue": T


public "set"(v: long): void
public "write"(tag: $SNBTCompoundTag$Type): void
public "read"(tag: $SNBTCompoundTag$Type): void
public "range"(max: long): $NumberValue<(long)>
public "createClientConfig"(group: $ConfigGroup$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LongValue$Type = ($LongValue);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LongValue_ = $LongValue$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/block/forge/$LootCrateOpenerBlockImpl" {
import {$BlockEntityType$BlockEntitySupplier, $BlockEntityType$BlockEntitySupplier$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType$BlockEntitySupplier"
import {$ForgeLootCrateOpenerBlockEntity, $ForgeLootCrateOpenerBlockEntity$Type} from "packages/dev/ftb/mods/ftbquests/block/forge/$ForgeLootCrateOpenerBlockEntity"

export class $LootCrateOpenerBlockImpl {

constructor()

public static "blockEntityProvider"(): $BlockEntityType$BlockEntitySupplier<($ForgeLootCrateOpenerBlockEntity)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LootCrateOpenerBlockImpl$Type = ($LootCrateOpenerBlockImpl);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LootCrateOpenerBlockImpl_ = $LootCrateOpenerBlockImpl$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/net/$DisplayCompletionToastMessage" {
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$NetworkManager$PacketContext, $NetworkManager$PacketContext$Type} from "packages/dev/architectury/networking/$NetworkManager$PacketContext"
import {$BaseS2CMessage, $BaseS2CMessage$Type} from "packages/dev/architectury/networking/simple/$BaseS2CMessage"
import {$MessageType, $MessageType$Type} from "packages/dev/architectury/networking/simple/$MessageType"

export class $DisplayCompletionToastMessage extends $BaseS2CMessage {

constructor(i: long)

public "write"(buffer: $FriendlyByteBuf$Type): void
public "getType"(): $MessageType
public "handle"(context: $NetworkManager$PacketContext$Type): void
get "type"(): $MessageType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DisplayCompletionToastMessage$Type = ($DisplayCompletionToastMessage);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DisplayCompletionToastMessage_ = $DisplayCompletionToastMessage$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/events/$ObjectStartedEvent" {
import {$QuestObject, $QuestObject$Type} from "packages/dev/ftb/mods/ftbquests/quest/$QuestObject"
import {$ObjectProgressEvent, $ObjectProgressEvent$Type} from "packages/dev/ftb/mods/ftbquests/events/$ObjectProgressEvent"
import {$Event, $Event$Type} from "packages/dev/architectury/event/$Event"
import {$EventActor, $EventActor$Type} from "packages/dev/architectury/event/$EventActor"
import {$ObjectStartedEvent$QuestEvent, $ObjectStartedEvent$QuestEvent$Type} from "packages/dev/ftb/mods/ftbquests/events/$ObjectStartedEvent$QuestEvent"
import {$ObjectStartedEvent$FileEvent, $ObjectStartedEvent$FileEvent$Type} from "packages/dev/ftb/mods/ftbquests/events/$ObjectStartedEvent$FileEvent"
import {$ObjectStartedEvent$ChapterEvent, $ObjectStartedEvent$ChapterEvent$Type} from "packages/dev/ftb/mods/ftbquests/events/$ObjectStartedEvent$ChapterEvent"
import {$ObjectStartedEvent$TaskEvent, $ObjectStartedEvent$TaskEvent$Type} from "packages/dev/ftb/mods/ftbquests/events/$ObjectStartedEvent$TaskEvent"

export class $ObjectStartedEvent<T extends $QuestObject> extends $ObjectProgressEvent<(T)> {
static readonly "GENERIC": $Event<($EventActor<($ObjectStartedEvent<(any)>)>)>
static readonly "FILE": $Event<($EventActor<($ObjectStartedEvent$FileEvent)>)>
static readonly "CHAPTER": $Event<($EventActor<($ObjectStartedEvent$ChapterEvent)>)>
static readonly "QUEST": $Event<($EventActor<($ObjectStartedEvent$QuestEvent)>)>
static readonly "TASK": $Event<($EventActor<($ObjectStartedEvent$TaskEvent)>)>


}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ObjectStartedEvent$Type<T> = ($ObjectStartedEvent<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ObjectStartedEvent_<T> = $ObjectStartedEvent$Type<(T)>;
}}
declare module "packages/dev/ftb/mods/ftbquests/events/$ObjectCompletedEvent$TaskEvent" {
import {$Task, $Task$Type} from "packages/dev/ftb/mods/ftbquests/quest/task/$Task"
import {$Event, $Event$Type} from "packages/dev/architectury/event/$Event"
import {$ObjectCompletedEvent$QuestEvent, $ObjectCompletedEvent$QuestEvent$Type} from "packages/dev/ftb/mods/ftbquests/events/$ObjectCompletedEvent$QuestEvent"
import {$QuestProgressEventData, $QuestProgressEventData$Type} from "packages/dev/ftb/mods/ftbquests/events/$QuestProgressEventData"
import {$EventActor, $EventActor$Type} from "packages/dev/architectury/event/$EventActor"
import {$ObjectCompletedEvent$FileEvent, $ObjectCompletedEvent$FileEvent$Type} from "packages/dev/ftb/mods/ftbquests/events/$ObjectCompletedEvent$FileEvent"
import {$ObjectCompletedEvent$ChapterEvent, $ObjectCompletedEvent$ChapterEvent$Type} from "packages/dev/ftb/mods/ftbquests/events/$ObjectCompletedEvent$ChapterEvent"
import {$ObjectCompletedEvent, $ObjectCompletedEvent$Type} from "packages/dev/ftb/mods/ftbquests/events/$ObjectCompletedEvent"

export class $ObjectCompletedEvent$TaskEvent extends $ObjectCompletedEvent<($Task)> {
static readonly "GENERIC": $Event<($EventActor<($ObjectCompletedEvent<(any)>)>)>
static readonly "FILE": $Event<($EventActor<($ObjectCompletedEvent$FileEvent)>)>
static readonly "CHAPTER": $Event<($EventActor<($ObjectCompletedEvent$ChapterEvent)>)>
static readonly "QUEST": $Event<($EventActor<($ObjectCompletedEvent$QuestEvent)>)>
static readonly "TASK": $Event<($EventActor<($ObjectCompletedEvent$TaskEvent)>)>

constructor(d: $QuestProgressEventData$Type<($Task$Type)>)

public "getTask"(): $Task
get "task"(): $Task
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ObjectCompletedEvent$TaskEvent$Type = ($ObjectCompletedEvent$TaskEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ObjectCompletedEvent$TaskEvent_ = $ObjectCompletedEvent$TaskEvent$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/ui/$ColorSelectorPanel" {
import {$Panel, $Panel$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Panel"
import {$ModalPanel, $ModalPanel$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$ModalPanel"
import {$ConfigCallback, $ConfigCallback$Type} from "packages/dev/ftb/mods/ftblibrary/config/$ConfigCallback"
import {$Key, $Key$Type} from "packages/dev/ftb/mods/ftblibrary/ui/input/$Key"
import {$Theme, $Theme$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Theme"
import {$ColorConfig, $ColorConfig$Type} from "packages/dev/ftb/mods/ftblibrary/config/$ColorConfig"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$BaseScreen, $BaseScreen$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$BaseScreen"

export class $ColorSelectorPanel extends $ModalPanel {
 "posX": integer
 "posY": integer
 "width": integer
 "height": integer

constructor(panel: $Panel$Type, config: $ColorConfig$Type, callback: $ConfigCallback$Type)

public "alignWidgets"(): void
public "addWidgets"(): void
public "keyPressed"(key: $Key$Type): boolean
public "draw"(graphics: $GuiGraphics$Type, theme: $Theme$Type, x: integer, y: integer, w: integer, h: integer): void
public "drawBackground"(graphics: $GuiGraphics$Type, theme: $Theme$Type, x: integer, y: integer, w: integer, h: integer): void
public "setAllowAlphaEdit"(allowAlphaEdit: boolean): void
public static "popupAtMouse"(gui: $BaseScreen$Type, config: $ColorConfig$Type, callback: $ConfigCallback$Type): $ColorSelectorPanel
set "allowAlphaEdit"(value: boolean)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ColorSelectorPanel$Type = ($ColorSelectorPanel);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ColorSelectorPanel_ = $ColorSelectorPanel$Type;
}}
declare module "packages/dev/ftb/mods/ftbxmodcompat/ftbfiltersystem/kubejs/$FFSEvents" {
import {$EventHandler, $EventHandler$Type} from "packages/dev/latvian/mods/kubejs/event/$EventHandler"
import {$EventGroup, $EventGroup$Type} from "packages/dev/latvian/mods/kubejs/event/$EventGroup"

export interface $FFSEvents {

}

export namespace $FFSEvents {
const EVENT_GROUP: $EventGroup
const CUSTOM_FILTER: $EventHandler
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FFSEvents$Type = ($FFSEvents);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FFSEvents_ = $FFSEvents$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/ui/$Widget$DrawLayer" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $Widget$DrawLayer extends $Enum<($Widget$DrawLayer)> {
static readonly "BACKGROUND": $Widget$DrawLayer
static readonly "FOREGROUND": $Widget$DrawLayer


public static "values"(): ($Widget$DrawLayer)[]
public static "valueOf"(name: string): $Widget$DrawLayer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Widget$DrawLayer$Type = (("background") | ("foreground")) | ($Widget$DrawLayer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Widget$DrawLayer_ = $Widget$DrawLayer$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/sidebar/$SidebarButton" {
import {$Comparable, $Comparable$Type} from "packages/java/lang/$Comparable"
import {$JsonObject, $JsonObject$Type} from "packages/com/google/gson/$JsonObject"
import {$BooleanSupplier, $BooleanSupplier$Type} from "packages/java/util/function/$BooleanSupplier"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Icon, $Icon$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Icon"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$SidebarButtonGroup, $SidebarButtonGroup$Type} from "packages/dev/ftb/mods/ftblibrary/sidebar/$SidebarButtonGroup"

export class $SidebarButton implements $Comparable<($SidebarButton)> {

constructor(id: $ResourceLocation$Type, group: $SidebarButtonGroup$Type, json: $JsonObject$Type)

public "equals"(o: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "compareTo"(button: $SidebarButton$Type): integer
public "getId"(): $ResourceLocation
public "getCustomTextHandler"(): $Supplier<(string)>
public "setCustomTextHandler"(text: $Supplier$Type<(string)>): void
public "getX"(): integer
public "isVisible"(): boolean
public "addVisibilityCondition"(supplier: $BooleanSupplier$Type): void
public "getIcon"(): $Icon
public "setTooltipHandler"(text: $Consumer$Type<($List$Type<(string)>)>): void
public static "copyWithoutGroup"(toCopy: $SidebarButton$Type): $SidebarButton
public "getTooltipLangKey"(): string
public "getConfig"(): boolean
public "getDefaultConfig"(): boolean
public "setConfig"(value: boolean): void
public "getGroup"(): $SidebarButtonGroup
public "getJson"(): $JsonObject
public "getTooltipHandler"(): $Consumer<($List<(string)>)>
public "onClicked"(shift: boolean): void
public "isActuallyVisible"(): boolean
public "getLangKey"(): string
get "id"(): $ResourceLocation
get "customTextHandler"(): $Supplier<(string)>
set "customTextHandler"(value: $Supplier$Type<(string)>)
get "x"(): integer
get "visible"(): boolean
get "icon"(): $Icon
set "tooltipHandler"(value: $Consumer$Type<($List$Type<(string)>)>)
get "tooltipLangKey"(): string
get "config"(): boolean
get "defaultConfig"(): boolean
set "config"(value: boolean)
get "group"(): $SidebarButtonGroup
get "json"(): $JsonObject
get "tooltipHandler"(): $Consumer<($List<(string)>)>
get "actuallyVisible"(): boolean
get "langKey"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SidebarButton$Type = ($SidebarButton);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SidebarButton_ = $SidebarButton$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/icon/$MutableColor4I" {
import {$Color4I, $Color4I$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Color4I"
import {$JsonElement, $JsonElement$Type} from "packages/com/google/gson/$JsonElement"

export class $MutableColor4I extends $Color4I {
static readonly "TEMP": $Color4I
static readonly "BLACK": $Color4I
static readonly "DARK_GRAY": $Color4I
static readonly "GRAY": $Color4I
static readonly "WHITE": $Color4I
static readonly "RED": $Color4I
static readonly "GREEN": $Color4I
static readonly "BLUE": $Color4I
static readonly "LIGHT_RED": $Color4I
static readonly "LIGHT_GREEN": $Color4I
static readonly "LIGHT_BLUE": $Color4I


public "set"(r: integer, g: integer, b: integer, a: integer): $Color4I
public "set"(col: $Color4I$Type, a: integer): $Color4I
public "set"(col: $Color4I$Type): $Color4I
public "set"(col: integer, a: integer): $Color4I
public "set"(col: integer): $Color4I
public "setFromHSB"(h: float, s: float, b: float): $Color4I
public "setAlpha"(a: integer): $Color4I
public "addBrightness"(b: integer): $Color4I
public "getJson"(): $JsonElement
public "isMutable"(): boolean
public "mutable"(): $MutableColor4I
set "alpha"(value: integer)
get "json"(): $JsonElement
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MutableColor4I$Type = ($MutableColor4I);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MutableColor4I_ = $MutableColor4I$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/api/event/$CustomFilterDisplayItemsEvent" {
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Event, $Event$Type} from "packages/dev/architectury/event/$Event"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export class $CustomFilterDisplayItemsEvent {
static readonly "ADD_ITEMSTACK": $Event<($Consumer<($CustomFilterDisplayItemsEvent)>)>

constructor(callback: $Consumer$Type<($ItemStack$Type)>)

public "add"(stack: $ItemStack$Type): void
public "add"(stacks: $Collection$Type<($ItemStack$Type)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CustomFilterDisplayItemsEvent$Type = ($CustomFilterDisplayItemsEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CustomFilterDisplayItemsEvent_ = $CustomFilterDisplayItemsEvent$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/client/gui/$ChangeChapterGroupScreen" {
import {$Panel, $Panel$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Panel"
import {$QuestScreen, $QuestScreen$Type} from "packages/dev/ftb/mods/ftbquests/client/gui/quests/$QuestScreen"
import {$Pair, $Pair$Type} from "packages/com/mojang/datafixers/util/$Pair"
import {$Chapter, $Chapter$Type} from "packages/dev/ftb/mods/ftbquests/quest/$Chapter"
import {$AbstractButtonListScreen, $AbstractButtonListScreen$Type} from "packages/dev/ftb/mods/ftblibrary/ui/misc/$AbstractButtonListScreen"

export class $ChangeChapterGroupScreen extends $AbstractButtonListScreen {
static readonly "NO_INSET": $Pair<(integer), (integer)>
 "posX": integer
 "posY": integer
 "width": integer
 "height": integer

constructor(chapter: $Chapter$Type, questScreen: $QuestScreen$Type)

public "addButtons"(panel: $Panel$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ChangeChapterGroupScreen$Type = ($ChangeChapterGroupScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ChangeChapterGroupScreen_ = $ChangeChapterGroupScreen$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/util/$DeferredInventoryDetection" {
import {$MinecraftServer, $MinecraftServer$Type} from "packages/net/minecraft/server/$MinecraftServer"

export class $DeferredInventoryDetection {

constructor()

public static "tick"(server: $MinecraftServer$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DeferredInventoryDetection$Type = ($DeferredInventoryDetection);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DeferredInventoryDetection_ = $DeferredInventoryDetection$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/events/$ObjectCompletedEvent$FileEvent" {
import {$BaseQuestFile, $BaseQuestFile$Type} from "packages/dev/ftb/mods/ftbquests/quest/$BaseQuestFile"
import {$ObjectCompletedEvent$TaskEvent, $ObjectCompletedEvent$TaskEvent$Type} from "packages/dev/ftb/mods/ftbquests/events/$ObjectCompletedEvent$TaskEvent"
import {$Event, $Event$Type} from "packages/dev/architectury/event/$Event"
import {$ObjectCompletedEvent$QuestEvent, $ObjectCompletedEvent$QuestEvent$Type} from "packages/dev/ftb/mods/ftbquests/events/$ObjectCompletedEvent$QuestEvent"
import {$QuestProgressEventData, $QuestProgressEventData$Type} from "packages/dev/ftb/mods/ftbquests/events/$QuestProgressEventData"
import {$EventActor, $EventActor$Type} from "packages/dev/architectury/event/$EventActor"
import {$ObjectCompletedEvent$ChapterEvent, $ObjectCompletedEvent$ChapterEvent$Type} from "packages/dev/ftb/mods/ftbquests/events/$ObjectCompletedEvent$ChapterEvent"
import {$ObjectCompletedEvent, $ObjectCompletedEvent$Type} from "packages/dev/ftb/mods/ftbquests/events/$ObjectCompletedEvent"

export class $ObjectCompletedEvent$FileEvent extends $ObjectCompletedEvent<($BaseQuestFile)> {
static readonly "GENERIC": $Event<($EventActor<($ObjectCompletedEvent<(any)>)>)>
static readonly "FILE": $Event<($EventActor<($ObjectCompletedEvent$FileEvent)>)>
static readonly "CHAPTER": $Event<($EventActor<($ObjectCompletedEvent$ChapterEvent)>)>
static readonly "QUEST": $Event<($EventActor<($ObjectCompletedEvent$QuestEvent)>)>
static readonly "TASK": $Event<($EventActor<($ObjectCompletedEvent$TaskEvent)>)>

constructor(d: $QuestProgressEventData$Type<($BaseQuestFile$Type)>)

public "getFile"(): $BaseQuestFile
get "file"(): $BaseQuestFile
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ObjectCompletedEvent$FileEvent$Type = ($ObjectCompletedEvent$FileEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ObjectCompletedEvent$FileEvent_ = $ObjectCompletedEvent$FileEvent$Type;
}}
declare module "packages/dev/ftb/mods/ftbxmodcompat/ftbquests/kubejs/$FTBQuestsKubeJSEvents" {
import {$EventHandler, $EventHandler$Type} from "packages/dev/latvian/mods/kubejs/event/$EventHandler"
import {$EventGroup, $EventGroup$Type} from "packages/dev/latvian/mods/kubejs/event/$EventGroup"

export interface $FTBQuestsKubeJSEvents {

}

export namespace $FTBQuestsKubeJSEvents {
const EVENT_GROUP: $EventGroup
const CUSTOM_TASK: $EventHandler
const CUSTOM_REWARD: $EventHandler
const OBJECT_COMPLETED: $EventHandler
const OBJECT_STARTED: $EventHandler
const CUSTOM_FILTER_ITEM: $EventHandler
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FTBQuestsKubeJSEvents$Type = ($FTBQuestsKubeJSEvents);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FTBQuestsKubeJSEvents_ = $FTBQuestsKubeJSEvents$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/snbt/$SNBTNet" {
import {$IntArrayTag, $IntArrayTag$Type} from "packages/net/minecraft/nbt/$IntArrayTag"
import {$LongArrayTag, $LongArrayTag$Type} from "packages/net/minecraft/nbt/$LongArrayTag"
import {$SNBTCompoundTag, $SNBTCompoundTag$Type} from "packages/dev/ftb/mods/ftblibrary/snbt/$SNBTCompoundTag"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$Tag, $Tag$Type} from "packages/net/minecraft/nbt/$Tag"
import {$ListTag, $ListTag$Type} from "packages/net/minecraft/nbt/$ListTag"
import {$ByteArrayTag, $ByteArrayTag$Type} from "packages/net/minecraft/nbt/$ByteArrayTag"

export class $SNBTNet {
static readonly "EMPTY_BYTE_ARRAY": $ByteArrayTag
static readonly "EMPTY_INT_ARRAY": $IntArrayTag
static readonly "EMPTY_LONG_ARRAY": $LongArrayTag

constructor()

public static "writeCompound"(buf: $FriendlyByteBuf$Type, tag: $SNBTCompoundTag$Type): void
public static "writeByteArray"(buf: $FriendlyByteBuf$Type, tag: $ByteArrayTag$Type): void
public static "writeLongArray"(buf: $FriendlyByteBuf$Type, tag: $LongArrayTag$Type): void
public static "writeIntArray"(buf: $FriendlyByteBuf$Type, tag: $IntArrayTag$Type): void
public static "readLongArray"(buf: $FriendlyByteBuf$Type): $LongArrayTag
public static "write"(buf: $FriendlyByteBuf$Type, tag: $Tag$Type): void
public static "read"(type: byte, buf: $FriendlyByteBuf$Type): $Tag
public static "readIntArray"(buf: $FriendlyByteBuf$Type): $IntArrayTag
public static "readByteArray"(buf: $FriendlyByteBuf$Type): $ByteArrayTag
public static "readCompound"(buf: $FriendlyByteBuf$Type): $SNBTCompoundTag
public static "writeList"(buf: $FriendlyByteBuf$Type, tag: $ListTag$Type): void
public static "readList"(buf: $FriendlyByteBuf$Type): $ListTag
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SNBTNet$Type = ($SNBTNet);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SNBTNet_ = $SNBTNet$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/ui/misc/$SimpleToast" {
import {$Toast, $Toast$Type} from "packages/net/minecraft/client/gui/components/toasts/$Toast"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$SoundManager, $SoundManager$Type} from "packages/net/minecraft/client/sounds/$SoundManager"
import {$Icon, $Icon$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Icon"
import {$ToastComponent, $ToastComponent$Type} from "packages/net/minecraft/client/gui/components/toasts/$ToastComponent"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$Toast$Visibility, $Toast$Visibility$Type} from "packages/net/minecraft/client/gui/components/toasts/$Toast$Visibility"

export class $SimpleToast implements $Toast {

constructor()

public static "info"(title: $Component$Type, subtitle: $Component$Type): void
public static "error"(title: $Component$Type, subtitle: $Component$Type): void
public "getIcon"(): $Icon
public "getTitle"(): $Component
public "render"(graphics: $GuiGraphics$Type, gui: $ToastComponent$Type, delta: long): $Toast$Visibility
public "isImportant"(): boolean
public "getSubtitle"(): $Component
public "playSound"(handler: $SoundManager$Type): void
public "getToken"(): any
public "slotCount"(): integer
public "width"(): integer
public "height"(): integer
get "icon"(): $Icon
get "title"(): $Component
get "important"(): boolean
get "subtitle"(): $Component
get "token"(): any
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SimpleToast$Type = ($SimpleToast);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SimpleToast_ = $SimpleToast$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/client/gui/$ToastQuestObject" {
import {$QuestObject, $QuestObject$Type} from "packages/dev/ftb/mods/ftbquests/quest/$QuestObject"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$SoundManager, $SoundManager$Type} from "packages/net/minecraft/client/sounds/$SoundManager"
import {$Icon, $Icon$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Icon"
import {$SimpleToast, $SimpleToast$Type} from "packages/dev/ftb/mods/ftblibrary/ui/misc/$SimpleToast"

export class $ToastQuestObject extends $SimpleToast {

constructor(q: $QuestObject$Type)

public "getIcon"(): $Icon
public "getTitle"(): $Component
public "isImportant"(): boolean
public "getSubtitle"(): $Component
public "playSound"(handler: $SoundManager$Type): void
get "icon"(): $Icon
get "title"(): $Component
get "important"(): boolean
get "subtitle"(): $Component
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ToastQuestObject$Type = ($ToastQuestObject);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ToastQuestObject_ = $ToastQuestObject$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/$MethodsReturnNonnullByDefault" {
import {$Annotation, $Annotation$Type} from "packages/java/lang/annotation/$Annotation"
import {$Class, $Class$Type} from "packages/java/lang/$Class"

export interface $MethodsReturnNonnullByDefault extends $Annotation {

 "equals"(arg0: any): boolean
 "toString"(): string
 "hashCode"(): integer
 "annotationType"(): $Class<(any)>
}

export namespace $MethodsReturnNonnullByDefault {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MethodsReturnNonnullByDefault$Type = ($MethodsReturnNonnullByDefault);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MethodsReturnNonnullByDefault_ = $MethodsReturnNonnullByDefault$Type;
}}
declare module "packages/dev/ftb/mods/ftbteams/api/event/$PlayerChangedTeamEvent" {
import {$TeamEvent, $TeamEvent$Type} from "packages/dev/ftb/mods/ftbteams/api/event/$TeamEvent"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Event, $Event$Type} from "packages/dev/architectury/event/$Event"
import {$PlayerJoinedPartyTeamEvent, $PlayerJoinedPartyTeamEvent$Type} from "packages/dev/ftb/mods/ftbteams/api/event/$PlayerJoinedPartyTeamEvent"
import {$TeamPropertiesChangedEvent, $TeamPropertiesChangedEvent$Type} from "packages/dev/ftb/mods/ftbteams/api/event/$TeamPropertiesChangedEvent"
import {$TeamAllyEvent, $TeamAllyEvent$Type} from "packages/dev/ftb/mods/ftbteams/api/event/$TeamAllyEvent"
import {$PlayerLeftPartyTeamEvent, $PlayerLeftPartyTeamEvent$Type} from "packages/dev/ftb/mods/ftbteams/api/event/$PlayerLeftPartyTeamEvent"
import {$TeamCreatedEvent, $TeamCreatedEvent$Type} from "packages/dev/ftb/mods/ftbteams/api/event/$TeamCreatedEvent"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$TeamInfoEvent, $TeamInfoEvent$Type} from "packages/dev/ftb/mods/ftbteams/api/event/$TeamInfoEvent"
import {$PlayerTransferredTeamOwnershipEvent, $PlayerTransferredTeamOwnershipEvent$Type} from "packages/dev/ftb/mods/ftbteams/api/event/$PlayerTransferredTeamOwnershipEvent"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$TeamCollectPropertiesEvent, $TeamCollectPropertiesEvent$Type} from "packages/dev/ftb/mods/ftbteams/api/event/$TeamCollectPropertiesEvent"
import {$PlayerLoggedInAfterTeamEvent, $PlayerLoggedInAfterTeamEvent$Type} from "packages/dev/ftb/mods/ftbteams/api/event/$PlayerLoggedInAfterTeamEvent"
import {$ClientTeamPropertiesChangedEvent, $ClientTeamPropertiesChangedEvent$Type} from "packages/dev/ftb/mods/ftbteams/api/event/$ClientTeamPropertiesChangedEvent"
import {$Team, $Team$Type} from "packages/dev/ftb/mods/ftbteams/api/$Team"

export class $PlayerChangedTeamEvent extends $TeamEvent {
static readonly "CREATED": $Event<($Consumer<($TeamCreatedEvent)>)>
static readonly "LOADED": $Event<($Consumer<($TeamEvent)>)>
static readonly "SAVED": $Event<($Consumer<($TeamEvent)>)>
static readonly "DELETED": $Event<($Consumer<($TeamEvent)>)>
static readonly "PLAYER_LOGGED_IN": $Event<($Consumer<($PlayerLoggedInAfterTeamEvent)>)>
static readonly "OWNERSHIP_TRANSFERRED": $Event<($Consumer<($PlayerTransferredTeamOwnershipEvent)>)>
static readonly "COLLECT_PROPERTIES": $Event<($Consumer<($TeamCollectPropertiesEvent)>)>
static readonly "PROPERTIES_CHANGED": $Event<($Consumer<($TeamPropertiesChangedEvent)>)>
static readonly "PLAYER_CHANGED": $Event<($Consumer<($PlayerChangedTeamEvent)>)>
static readonly "PLAYER_JOINED_PARTY": $Event<($Consumer<($PlayerJoinedPartyTeamEvent)>)>
static readonly "PLAYER_LEFT_PARTY": $Event<($Consumer<($PlayerLeftPartyTeamEvent)>)>
static readonly "INFO": $Event<($Consumer<($TeamInfoEvent)>)>
static readonly "ADD_ALLY": $Event<($Consumer<($TeamAllyEvent)>)>
static readonly "REMOVE_ALLY": $Event<($Consumer<($TeamAllyEvent)>)>
static readonly "CLIENT_PROPERTIES_CHANGED": $Event<($Consumer<($ClientTeamPropertiesChangedEvent)>)>

constructor(newTeam: $Team$Type, previousTeam: $Team$Type, playerId: $UUID$Type, player: $ServerPlayer$Type)

public "getPlayerId"(): $UUID
public "getPreviousTeam"(): $Optional<($Team)>
public "getPlayer"(): $ServerPlayer
get "playerId"(): $UUID
get "previousTeam"(): $Optional<($Team)>
get "player"(): $ServerPlayer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PlayerChangedTeamEvent$Type = ($PlayerChangedTeamEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PlayerChangedTeamEvent_ = $PlayerChangedTeamEvent$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/ui/input/forge/$KeyImpl" {
import {$KeyMapping, $KeyMapping$Type} from "packages/net/minecraft/client/$KeyMapping"
import {$InputConstants$Key, $InputConstants$Key$Type} from "packages/com/mojang/blaze3d/platform/$InputConstants$Key"

export class $KeyImpl {

constructor()

public static "matchesWithoutConflicts"(keyBinding: $KeyMapping$Type, keyCode: $InputConstants$Key$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $KeyImpl$Type = ($KeyImpl);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $KeyImpl_ = $KeyImpl$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/config/$DoubleConfig" {
import {$Color4I, $Color4I$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Color4I"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$NumberConfig, $NumberConfig$Type} from "packages/dev/ftb/mods/ftblibrary/config/$NumberConfig"
import {$TooltipList, $TooltipList$Type} from "packages/dev/ftb/mods/ftblibrary/util/$TooltipList"

export class $DoubleConfig extends $NumberConfig<(double)> {
static readonly "COLOR": $Color4I
readonly "min": T
readonly "max": T
 "fader": boolean
static readonly "NULL_TEXT": $Component
 "id": string

constructor(mn: double, mx: double)

public "parse"(callback: $Consumer$Type<(double)>, string: string): boolean
public "scrollValue"(currentValue: double, forward: boolean): $Optional<(double)>
public "getStringFromValue"(v: double): string
public "addInfo"(list: $TooltipList$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DoubleConfig$Type = ($DoubleConfig);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DoubleConfig_ = $DoubleConfig$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/icon/$AtlasSpriteIcon" {
import {$Color4I, $Color4I$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Color4I"
import {$IResourceIcon, $IResourceIcon$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$IResourceIcon"
import {$Icon, $Icon$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Icon"
import {$PixelBuffer, $PixelBuffer$Type} from "packages/dev/ftb/mods/ftblibrary/math/$PixelBuffer"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $AtlasSpriteIcon extends $Icon implements $IResourceIcon {


public "toString"(): string
public "getId"(): $ResourceLocation
public "copy"(): $AtlasSpriteIcon
public "draw"(graphics: $GuiGraphics$Type, x: integer, y: integer, w: integer, h: integer): void
public "hasPixelBuffer"(): boolean
public "createPixelBuffer"(): $PixelBuffer
public "getResourceLocation"(): $ResourceLocation
public "withTint"(c: $Color4I$Type): $AtlasSpriteIcon
get "id"(): $ResourceLocation
get "resourceLocation"(): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AtlasSpriteIcon$Type = ($AtlasSpriteIcon);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AtlasSpriteIcon_ = $AtlasSpriteIcon$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/util/$FileUtils" {
import {$File, $File$Type} from "packages/java/io/$File"
import {$List, $List$Type} from "packages/java/util/$List"
import {$InputStream, $InputStream$Type} from "packages/java/io/$InputStream"

export class $FileUtils {

constructor()

public static "read"(arg0: $InputStream$Type): $List<(string)>
public static "delete"(file: $File$Type): void
public static "readFile"(file: $File$Type): $List<(string)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FileUtils$Type = ($FileUtils);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FileUtils_ = $FileUtils$Type;
}}
declare module "packages/dev/ftb/mods/ftbteams/api/property/$TeamPropertyType" {
import {$Color4I, $Color4I$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Color4I"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$PrivacyMode, $PrivacyMode$Type} from "packages/dev/ftb/mods/ftbteams/api/property/$PrivacyMode"
import {$List, $List$Type} from "packages/java/util/$List"
import {$TeamProperty, $TeamProperty$Type} from "packages/dev/ftb/mods/ftbteams/api/property/$TeamProperty"

export class $TeamPropertyType<T> {
static readonly "BOOLEAN": $TeamPropertyType<(boolean)>
static readonly "STRING": $TeamPropertyType<(string)>
static readonly "STRING_LIST": $TeamPropertyType<($List<(string)>)>
static readonly "INT": $TeamPropertyType<(integer)>
static readonly "DOUBLE": $TeamPropertyType<(double)>
static readonly "COLOR": $TeamPropertyType<($Color4I)>
static readonly "ENUM": $TeamPropertyType<(string)>
static readonly "PRIVACY_MODE": $TeamPropertyType<($PrivacyMode)>


public static "write"(buf: $FriendlyByteBuf$Type, p: $TeamProperty$Type<(any)>): void
public static "read"(buf: $FriendlyByteBuf$Type): $TeamProperty<(any)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TeamPropertyType$Type<T> = ($TeamPropertyType<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TeamPropertyType_<T> = $TeamPropertyType$Type<(T)>;
}}
declare module "packages/dev/ftb/mods/ftbquests/block/$TaskScreenBlock" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$BlockEntityType$BlockEntitySupplier, $BlockEntityType$BlockEntitySupplier$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType$BlockEntitySupplier"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$List, $List$Type} from "packages/java/util/$List"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"
import {$AABB, $AABB$Type} from "packages/net/minecraft/world/phys/$AABB"
import {$DirectionProperty, $DirectionProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$DirectionProperty"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$TaskScreenAuxBlockEntity, $TaskScreenAuxBlockEntity$Type} from "packages/dev/ftb/mods/ftbquests/block/entity/$TaskScreenAuxBlockEntity"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$TaskScreenBlockEntity, $TaskScreenBlockEntity$Type} from "packages/dev/ftb/mods/ftbquests/block/entity/$TaskScreenBlockEntity"
import {$BaseEntityBlock, $BaseEntityBlock$Type} from "packages/net/minecraft/world/level/block/$BaseEntityBlock"
import {$ITaskScreen, $ITaskScreen$Type} from "packages/dev/ftb/mods/ftbquests/block/entity/$ITaskScreen"
import {$RenderShape, $RenderShape$Type} from "packages/net/minecraft/world/level/block/$RenderShape"

export class $TaskScreenBlock extends $BaseEntityBlock {
static readonly "FACING": $DirectionProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation


public "getSize"(): integer
public "getStateForPlacement"(blockPlaceContext: $BlockPlaceContext$Type): $BlockState
public "setPlacedBy"(level: $Level$Type, blockPos: $BlockPos$Type, blockState: $BlockState$Type, livingEntity: $LivingEntity$Type, itemStack: $ItemStack$Type): void
public "appendHoverText"(itemStack: $ItemStack$Type, blockGetter: $BlockGetter$Type, list: $List$Type<($Component$Type)>, tooltipFlag: $TooltipFlag$Type): void
public static "blockEntityProvider"(): $BlockEntityType$BlockEntitySupplier<($TaskScreenBlockEntity)>
public static "blockEntityAuxProvider"(): $BlockEntityType$BlockEntitySupplier<($TaskScreenAuxBlockEntity)>
public "use"(blockState: $BlockState$Type, level: $Level$Type, blockPos: $BlockPos$Type, player: $Player$Type, interactionHand: $InteractionHand$Type, blockHitResult: $BlockHitResult$Type): $InteractionResult
public "getRenderShape"(state: $BlockState$Type): $RenderShape
public "onRemove"(blockState: $BlockState$Type, level: $Level$Type, blockPos: $BlockPos$Type, newState: $BlockState$Type, isMoving: boolean): void
public "getDestroyProgress"(blockState: $BlockState$Type, player: $Player$Type, blockGetter: $BlockGetter$Type, blockPos: $BlockPos$Type): float
public static "getMultiblockBounds"(corePos: $BlockPos$Type, size: integer, facing: $Direction$Type): $AABB
public static "hasPermissionToEdit"(player: $ServerPlayer$Type, screen: $ITaskScreen$Type): boolean
public "newBlockEntity"(blockPos: $BlockPos$Type, blockState: $BlockState$Type): $BlockEntity
get "size"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TaskScreenBlock$Type = ($TaskScreenBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TaskScreenBlock_ = $TaskScreenBlock$Type;
}}
declare module "packages/dev/ftb/mods/ftbteams/client/gui/$AllyScreen" {
import {$GameProfile, $GameProfile$Type} from "packages/com/mojang/authlib/$GameProfile"
import {$BaseInvitationScreen, $BaseInvitationScreen$Type} from "packages/dev/ftb/mods/ftbteams/client/gui/$BaseInvitationScreen"

export class $AllyScreen extends $BaseInvitationScreen {
 "posX": integer
 "posY": integer
 "width": integer
 "height": integer

constructor()

public "setInvited"(profile: $GameProfile$Type, invited: boolean): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AllyScreen$Type = ($AllyScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AllyScreen_ = $AllyScreen$Type;
}}
declare module "packages/dev/ftb/mods/ftbteams/api/$TeamManager" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Color4I, $Color4I$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Color4I"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$MinecraftServer, $MinecraftServer$Type} from "packages/net/minecraft/server/$MinecraftServer"
import {$Team, $Team$Type} from "packages/dev/ftb/mods/ftbteams/api/$Team"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export interface $TeamManager {

 "getId"(): $UUID
 "getExtraData"(): $CompoundTag
 "getServer"(): $MinecraftServer
 "getTeamByName"(arg0: string): $Optional<($Team)>
 "getTeamByID"(arg0: $UUID$Type): $Optional<($Team)>
 "getTeamForPlayerID"(arg0: $UUID$Type): $Optional<($Team)>
 "getTeams"(): $Collection<($Team)>
 "markDirty"(): void
 "getTeamForPlayer"(arg0: $ServerPlayer$Type): $Optional<($Team)>
 "createPartyTeam"(arg0: $ServerPlayer$Type, arg1: string, arg2: string, arg3: $Color4I$Type): $Team
 "getPlayerTeamForPlayerID"(arg0: $UUID$Type): $Optional<($Team)>
 "arePlayersInSameTeam"(arg0: $UUID$Type, arg1: $UUID$Type): boolean
 "getKnownPlayerTeams"(): $Map<($UUID), (any)>
}

export namespace $TeamManager {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TeamManager$Type = ($TeamManager);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TeamManager_ = $TeamManager$Type;
}}
declare module "packages/dev/ftb/mods/ftbteams/data/$TeamArgument$Info" {
import {$JsonObject, $JsonObject$Type} from "packages/com/google/gson/$JsonObject"
import {$TeamArgument, $TeamArgument$Type} from "packages/dev/ftb/mods/ftbteams/data/$TeamArgument"
import {$TeamArgument$Info$Template, $TeamArgument$Info$Template$Type} from "packages/dev/ftb/mods/ftbteams/data/$TeamArgument$Info$Template"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$ArgumentTypeInfo, $ArgumentTypeInfo$Type} from "packages/net/minecraft/commands/synchronization/$ArgumentTypeInfo"

export class $TeamArgument$Info implements $ArgumentTypeInfo<($TeamArgument), ($TeamArgument$Info$Template)> {

constructor()

public "unpack"(argumentType: $TeamArgument$Type): $TeamArgument$Info$Template
public "deserializeFromNetwork"(friendlyByteBuf: $FriendlyByteBuf$Type): $TeamArgument$Info$Template
public "serializeToJson"(template: $TeamArgument$Info$Template$Type, jsonObject: $JsonObject$Type): void
public "serializeToNetwork"(template: $TeamArgument$Info$Template$Type, friendlyByteBuf: $FriendlyByteBuf$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TeamArgument$Info$Type = ($TeamArgument$Info);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TeamArgument$Info_ = $TeamArgument$Info$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/net/$OpenQuestBookMessage" {
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$NetworkManager$PacketContext, $NetworkManager$PacketContext$Type} from "packages/dev/architectury/networking/$NetworkManager$PacketContext"
import {$BaseS2CMessage, $BaseS2CMessage$Type} from "packages/dev/architectury/networking/simple/$BaseS2CMessage"
import {$MessageType, $MessageType$Type} from "packages/dev/architectury/networking/simple/$MessageType"

export class $OpenQuestBookMessage extends $BaseS2CMessage {

constructor(id: long)

public "write"(buf: $FriendlyByteBuf$Type): void
public "getType"(): $MessageType
public "handle"(context: $NetworkManager$PacketContext$Type): void
get "type"(): $MessageType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $OpenQuestBookMessage$Type = ($OpenQuestBookMessage);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $OpenQuestBookMessage_ = $OpenQuestBookMessage$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/util/forge/$ItemKey" {
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export class $ItemKey {
readonly "stack": $ItemStack

constructor(s: $ItemStack$Type)

public "equals"(o: any): boolean
public "hashCode"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ItemKey$Type = ($ItemKey);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ItemKey_ = $ItemKey$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/events/$QuestProgressEventData" {
import {$QuestObject, $QuestObject$Type} from "packages/dev/ftb/mods/ftbquests/quest/$QuestObject"
import {$Date, $Date$Type} from "packages/java/util/$Date"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$List, $List$Type} from "packages/java/util/$List"
import {$TeamData, $TeamData$Type} from "packages/dev/ftb/mods/ftbquests/quest/$TeamData"

export class $QuestProgressEventData<T extends $QuestObject> {

constructor(date: $Date$Type, teamData: $TeamData$Type, object: T, online: $Collection$Type<($ServerPlayer$Type)>, notified: $Collection$Type<($ServerPlayer$Type)>)

public "getObject"(): T
public "getTime"(): $Date
public "setCompleted"(id: long): void
public "getNotifiedPlayers"(): $List<($ServerPlayer)>
public "setStarted"(id: long): void
public "withObject"<N extends $QuestObject>(o: N): $QuestProgressEventData<(N)>
public "notifyPlayers"(id: long): void
public "getOnlineMembers"(): $List<($ServerPlayer)>
public "getTeamData"(): $TeamData
get "object"(): T
get "time"(): $Date
set "completed"(value: long)
get "notifiedPlayers"(): $List<($ServerPlayer)>
set "started"(value: long)
get "onlineMembers"(): $List<($ServerPlayer)>
get "teamData"(): $TeamData
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $QuestProgressEventData$Type<T> = ($QuestProgressEventData<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $QuestProgressEventData_<T> = $QuestProgressEventData$Type<(T)>;
}}
declare module "packages/dev/ftb/mods/ftbquests/events/$ClearFileCacheEvent" {
import {$BaseQuestFile, $BaseQuestFile$Type} from "packages/dev/ftb/mods/ftbquests/quest/$BaseQuestFile"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Event, $Event$Type} from "packages/dev/architectury/event/$Event"

export interface $ClearFileCacheEvent {

}

export namespace $ClearFileCacheEvent {
const EVENT: $Event<($Consumer<($BaseQuestFile)>)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClearFileCacheEvent$Type = ($ClearFileCacheEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClearFileCacheEvent_ = $ClearFileCacheEvent$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/util/$PlayerDisplayNameUtil" {
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"

export class $PlayerDisplayNameUtil {

constructor()

public static "refreshDisplayName"(player: $Player$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PlayerDisplayNameUtil$Type = ($PlayerDisplayNameUtil);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PlayerDisplayNameUtil_ = $PlayerDisplayNameUtil$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/quest/task/$CustomTask$Check" {
import {$CustomTask$Data, $CustomTask$Data$Type} from "packages/dev/ftb/mods/ftbquests/quest/task/$CustomTask$Data"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"

export interface $CustomTask$Check {

 "check"(arg0: $CustomTask$Data$Type, arg1: $ServerPlayer$Type): void

(arg0: $CustomTask$Data$Type, arg1: $ServerPlayer$Type): void
}

export namespace $CustomTask$Check {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CustomTask$Check$Type = ($CustomTask$Check);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CustomTask$Check_ = $CustomTask$Check$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/client/gui/quests/$ChapterImageButton" {
import {$Panel, $Panel$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Panel"
import {$QuestPositionableButton$Position, $QuestPositionableButton$Position$Type} from "packages/dev/ftb/mods/ftbquests/client/gui/quests/$QuestPositionableButton$Position"
import {$Widget, $Widget$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Widget"
import {$QuestPositionableButton, $QuestPositionableButton$Type} from "packages/dev/ftb/mods/ftbquests/client/gui/quests/$QuestPositionableButton"
import {$Movable, $Movable$Type} from "packages/dev/ftb/mods/ftbquests/quest/$Movable"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$TooltipList, $TooltipList$Type} from "packages/dev/ftb/mods/ftblibrary/util/$TooltipList"
import {$ChapterImage, $ChapterImage$Type} from "packages/dev/ftb/mods/ftbquests/quest/$ChapterImage"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$Theme, $Theme$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Theme"
import {$MouseButton, $MouseButton$Type} from "packages/dev/ftb/mods/ftblibrary/ui/input/$MouseButton"
import {$Button, $Button$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Button"

export class $ChapterImageButton extends $Button implements $QuestPositionableButton {
 "posX": integer
 "posY": integer
 "width": integer
 "height": integer

constructor(panel: $Panel$Type, i: $ChapterImage$Type)

public static "getClipboardImage"(): $Optional<($ChapterImage)>
public "moveAndDeleteFocus"(): $Movable
public "compareTo"(o: $Widget$Type): integer
public "getPosition"(): $QuestPositionableButton$Position
public "draw"(graphics: $GuiGraphics$Type, theme: $Theme$Type, x: integer, y: integer, w: integer, h: integer): void
public "checkMouseOver"(mouseX: integer, mouseY: integer): boolean
public "addMouseOverText"(list: $TooltipList$Type): void
public "onClicked"(button: $MouseButton$Type): void
get "clipboardImage"(): $Optional<($ChapterImage)>
get "position"(): $QuestPositionableButton$Position
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ChapterImageButton$Type = ($ChapterImageButton);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ChapterImageButton_ = $ChapterImageButton$Type;
}}
declare module "packages/dev/ftb/mods/ftbxmodcompat/ftbquests/recipemod_common/$LootCrateTextRenderer" {
import {$LootCrate, $LootCrate$Type} from "packages/dev/ftb/mods/ftbquests/quest/loot/$LootCrate"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $LootCrateTextRenderer {

constructor()

public static "drawText"(graphics: $GuiGraphics$Type, crate: $LootCrate$Type, x: integer, width: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LootCrateTextRenderer$Type = ($LootCrateTextRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LootCrateTextRenderer_ = $LootCrateTextRenderer$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/client/gui/$RewardKey" {
import {$Icon, $Icon$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Icon"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export class $RewardKey {

constructor(title: string, icon: $Icon$Type)
constructor(title: string, icon: $Icon$Type, stack: $ItemStack$Type)

public "equals"(o: any): boolean
public "hashCode"(): integer
public "getIcon"(): $Icon
public "getTitle"(): string
get "icon"(): $Icon
get "title"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RewardKey$Type = ($RewardKey);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RewardKey_ = $RewardKey$Type;
}}
declare module "packages/dev/ftb/mods/ftbxmodcompat/generic/gamestages/$StagesSetup" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $StagesSetup {

constructor()

public static "init"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $StagesSetup$Type = ($StagesSetup);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $StagesSetup_ = $StagesSetup$Type;
}}
declare module "packages/dev/ftb/mods/ftbteams/client/gui/$PlayerListScreen" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$List, $List$Type} from "packages/java/util/$List"
import {$GameProfile, $GameProfile$Type} from "packages/com/mojang/authlib/$GameProfile"
import {$BaseScreen, $BaseScreen$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$BaseScreen"

export class $PlayerListScreen extends $BaseScreen {
 "posX": integer
 "posY": integer
 "width": integer
 "height": integer

constructor(t: $Component$Type, p: $List$Type<($GameProfile$Type)>, c: $Consumer$Type<($GameProfile$Type)>)

public "addWidgets"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PlayerListScreen$Type = ($PlayerListScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PlayerListScreen_ = $PlayerListScreen$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/client/$ConfigIconItemStack" {
import {$ItemStackConfig, $ItemStackConfig$Type} from "packages/dev/ftb/mods/ftblibrary/config/$ItemStackConfig"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Widget, $Widget$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Widget"
import {$ConfigCallback, $ConfigCallback$Type} from "packages/dev/ftb/mods/ftblibrary/config/$ConfigCallback"
import {$MouseButton, $MouseButton$Type} from "packages/dev/ftb/mods/ftblibrary/ui/input/$MouseButton"

export class $ConfigIconItemStack extends $ItemStackConfig {
static readonly "NULL_TEXT": $Component
 "id": string

constructor()

public "onClicked"(clickedWidget: $Widget$Type, button: $MouseButton$Type, callback: $ConfigCallback$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ConfigIconItemStack$Type = ($ConfigIconItemStack);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ConfigIconItemStack_ = $ConfigIconItemStack$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/client/$FTBQuestsClient" {
import {$BaseQuestFile, $BaseQuestFile$Type} from "packages/dev/ftb/mods/ftbquests/quest/$BaseQuestFile"
import {$QuestObjectBase, $QuestObjectBase$Type} from "packages/dev/ftb/mods/ftbquests/quest/$QuestObjectBase"
import {$CreativeModeTab$ItemDisplayParameters, $CreativeModeTab$ItemDisplayParameters$Type} from "packages/net/minecraft/world/item/$CreativeModeTab$ItemDisplayParameters"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$TeamData, $TeamData$Type} from "packages/dev/ftb/mods/ftbquests/quest/$TeamData"
import {$KeyMapping, $KeyMapping$Type} from "packages/net/minecraft/client/$KeyMapping"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $FTBQuestsClient {
static "KEY_QUESTS": $KeyMapping

constructor()

public static "init"(): void
public static "createClientQuestFile"(): $BaseQuestFile
public static "creativeTabDisplayParams"(): $Optional<($CreativeModeTab$ItemDisplayParameters)>
public static "getClientPlayerData"(): $TeamData
public static "getClientLevel"(): $Level
public static "openGui"(): void
public static "openCustomIconGui"(player: $Player$Type, hand: $InteractionHand$Type): void
public static "isClientDataLoaded"(): boolean
public static "getClientPlayer"(): $Player
public static "getTextureUV"(state: $BlockState$Type, face: $Direction$Type): (float)[]
public static "rebuildCreativeTabs"(): void
public static "getClientQuestFile"(): $BaseQuestFile
public static "copyToClipboard"(qo: $QuestObjectBase$Type): void
public static "openScreenConfigGui"(pos: $BlockPos$Type): void
get "clientPlayerData"(): $TeamData
get "clientLevel"(): $Level
get "clientDataLoaded"(): boolean
get "clientPlayer"(): $Player
get "clientQuestFile"(): $BaseQuestFile
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FTBQuestsClient$Type = ($FTBQuestsClient);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FTBQuestsClient_ = $FTBQuestsClient$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/util/$CustomComponentParser" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export interface $CustomComponentParser {

 "parse"(arg0: string, arg1: $Map$Type<(string), (string)>): $Component

(arg0: string, arg1: $Map$Type<(string), (string)>): $Component
}

export namespace $CustomComponentParser {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CustomComponentParser$Type = ($CustomComponentParser);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CustomComponentParser_ = $CustomComponentParser$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/block/forge/$ForgeLootCrateOpenerBlockEntity" {
import {$LazyOptional, $LazyOptional$Type} from "packages/net/minecraftforge/common/util/$LazyOptional"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Capability, $Capability$Type} from "packages/net/minecraftforge/common/capabilities/$Capability"
import {$LootCrateOpenerBlockEntity, $LootCrateOpenerBlockEntity$Type} from "packages/dev/ftb/mods/ftbquests/block/entity/$LootCrateOpenerBlockEntity"

export class $ForgeLootCrateOpenerBlockEntity extends $LootCrateOpenerBlockEntity {
 "blockState": $BlockState

constructor(blockPos: $BlockPos$Type, blockState: $BlockState$Type)

public "invalidateCaps"(): void
public "getCapability"<T>(cap: $Capability$Type<(T)>, side: $Direction$Type): $LazyOptional<(T)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ForgeLootCrateOpenerBlockEntity$Type = ($ForgeLootCrateOpenerBlockEntity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ForgeLootCrateOpenerBlockEntity_ = $ForgeLootCrateOpenerBlockEntity$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/util/$TextUtils" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"

export class $TextUtils {

constructor()

public static "parseRawText"(str: string): $Component
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TextUtils$Type = ($TextUtils);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TextUtils_ = $TextUtils$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/quest/reward/$ToastReward" {
import {$Quest, $Quest$Type} from "packages/dev/ftb/mods/ftbquests/quest/$Quest"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$ConfigGroup, $ConfigGroup$Type} from "packages/dev/ftb/mods/ftblibrary/config/$ConfigGroup"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$Reward, $Reward$Type} from "packages/dev/ftb/mods/ftbquests/quest/reward/$Reward"
import {$RewardType, $RewardType$Type} from "packages/dev/ftb/mods/ftbquests/quest/reward/$RewardType"

export class $ToastReward extends $Reward {
readonly "id": long

constructor(id: long, quest: $Quest$Type)

public "getType"(): $RewardType
public "claim"(player: $ServerPlayer$Type, notify: boolean): void
public "readData"(nbt: $CompoundTag$Type): void
public "writeNetData"(buffer: $FriendlyByteBuf$Type): void
public "writeData"(nbt: $CompoundTag$Type): void
public "fillConfigGroup"(config: $ConfigGroup$Type): void
public "readNetData"(buffer: $FriendlyByteBuf$Type): void
get "type"(): $RewardType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ToastReward$Type = ($ToastReward);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ToastReward_ = $ToastReward$Type;
}}
declare module "packages/dev/ftb/mods/ftbteams/data/$ServerTeam" {
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$CommandSourceStack, $CommandSourceStack$Type} from "packages/net/minecraft/commands/$CommandSourceStack"
import {$TeamManagerImpl, $TeamManagerImpl$Type} from "packages/dev/ftb/mods/ftbteams/data/$TeamManagerImpl"
import {$TeamType, $TeamType$Type} from "packages/dev/ftb/mods/ftbteams/data/$TeamType"
import {$AbstractTeam, $AbstractTeam$Type} from "packages/dev/ftb/mods/ftbteams/data/$AbstractTeam"

export class $ServerTeam extends $AbstractTeam {

constructor(manager: $TeamManagerImpl$Type, id: $UUID$Type)

public "delete"(source: $CommandSourceStack$Type): integer
public "getType"(): $TeamType
public "isServerTeam"(): boolean
get "type"(): $TeamType
get "serverTeam"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ServerTeam$Type = ($ServerTeam);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ServerTeam_ = $ServerTeam$Type;
}}
declare module "packages/dev/ftb/mods/ftbxmodcompat/generic/permissions/$FTBRanksProvider" {
import {$PermissionProvider, $PermissionProvider$Type} from "packages/dev/ftb/mods/ftblibrary/integration/permissions/$PermissionProvider"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"

export class $FTBRanksProvider implements $PermissionProvider {

constructor()

public "getName"(): string
public "getStringPermission"(player: $ServerPlayer$Type, nodeName: string, def: string): string
public "getIntegerPermission"(player: $ServerPlayer$Type, nodeName: string, def: integer): integer
public "getBooleanPermission"(player: $ServerPlayer$Type, nodeName: string, def: boolean): boolean
get "name"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FTBRanksProvider$Type = ($FTBRanksProvider);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FTBRanksProvider_ = $FTBRanksProvider$Type;
}}
declare module "packages/dev/ftb/mods/ftbxmodcompat/ftbquests/kubejs/$QuestObjectStartedEventJS" {
import {$QuestObject, $QuestObject$Type} from "packages/dev/ftb/mods/ftbquests/quest/$QuestObject"
import {$FTBQuestsKubeJSTeamDataWrapper, $FTBQuestsKubeJSTeamDataWrapper$Type} from "packages/dev/ftb/mods/ftbxmodcompat/ftbquests/kubejs/$FTBQuestsKubeJSTeamDataWrapper"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$ServerEventJS, $ServerEventJS$Type} from "packages/dev/latvian/mods/kubejs/server/$ServerEventJS"
import {$ObjectStartedEvent, $ObjectStartedEvent$Type} from "packages/dev/ftb/mods/ftbquests/events/$ObjectStartedEvent"
import {$MinecraftServer, $MinecraftServer$Type} from "packages/net/minecraft/server/$MinecraftServer"
import {$EntityArrayList, $EntityArrayList$Type} from "packages/dev/latvian/mods/kubejs/player/$EntityArrayList"

export class $QuestObjectStartedEventJS extends $ServerEventJS {
readonly "event": $ObjectStartedEvent<(any)>
readonly "server": $MinecraftServer

constructor(e: $ObjectStartedEvent$Type<(any)>)

public "getObject"(): $QuestObject
public "getData"(): $FTBQuestsKubeJSTeamDataWrapper
public "getPlayer"(): $ServerPlayer
public "getNotifiedPlayers"(): $EntityArrayList
public "getOnlineMembers"(): $EntityArrayList
get "object"(): $QuestObject
get "data"(): $FTBQuestsKubeJSTeamDataWrapper
get "player"(): $ServerPlayer
get "notifiedPlayers"(): $EntityArrayList
get "onlineMembers"(): $EntityArrayList
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $QuestObjectStartedEventJS$Type = ($QuestObjectStartedEventJS);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $QuestObjectStartedEventJS_ = $QuestObjectStartedEventJS$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/quest/$Quest" {
import {$BaseQuestFile, $BaseQuestFile$Type} from "packages/dev/ftb/mods/ftbquests/quest/$BaseQuestFile"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Task, $Task$Type} from "packages/dev/ftb/mods/ftbquests/quest/task/$Task"
import {$ConfigGroup, $ConfigGroup$Type} from "packages/dev/ftb/mods/ftblibrary/config/$ConfigGroup"
import {$QuestObjectType, $QuestObjectType$Type} from "packages/dev/ftb/mods/ftbquests/quest/$QuestObjectType"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Icon, $Icon$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Icon"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$Tristate, $Tristate$Type} from "packages/dev/ftb/mods/ftblibrary/config/$Tristate"
import {$QuestObject, $QuestObject$Type} from "packages/dev/ftb/mods/ftbquests/quest/$QuestObject"
import {$QuestProgressEventData, $QuestProgressEventData$Type} from "packages/dev/ftb/mods/ftbquests/events/$QuestProgressEventData"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Stream, $Stream$Type} from "packages/java/util/stream/$Stream"
import {$Reward, $Reward$Type} from "packages/dev/ftb/mods/ftbquests/quest/reward/$Reward"
import {$Chapter, $Chapter$Type} from "packages/dev/ftb/mods/ftbquests/quest/$Chapter"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$RecipeModHelper$Components, $RecipeModHelper$Components$Type} from "packages/dev/ftb/mods/ftbquests/integration/$RecipeModHelper$Components"
import {$ProgressChange, $ProgressChange$Type} from "packages/dev/ftb/mods/ftbquests/util/$ProgressChange"
import {$Movable, $Movable$Type} from "packages/dev/ftb/mods/ftbquests/quest/$Movable"
import {$TeamData, $TeamData$Type} from "packages/dev/ftb/mods/ftbquests/quest/$TeamData"
import {$ProgressionMode, $ProgressionMode$Type} from "packages/dev/ftb/mods/ftbquests/quest/$ProgressionMode"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$Pair, $Pair$Type} from "packages/com/mojang/datafixers/util/$Pair"

export class $Quest extends $QuestObject implements $Movable {
static readonly "PAGEBREAK_CODE": string
readonly "id": long

constructor(id: long, chapter: $Chapter$Type)

public "getSize"(): double
public "move"(to: $Chapter$Type, x: double, y: double): void
public "setSize"(size: double): void
public "getChildren"(): $Collection<(any)>
public "getObjectType"(): $QuestObjectType
public "getShape"(): string
public "getDescription"(): $List<($Component)>
public "deleteSelf"(): void
public "getQuestFile"(): $BaseQuestFile
public "getY"(): double
public "deleteChildren"(): void
public "isOptional"(): boolean
public "editedFromGUI"(): void
public "setX"(x: double): void
public "setY"(y: double): void
public "getX"(): double
public "isVisible"(data: $TeamData$Type): boolean
public "getWidth"(): double
public "getHeight"(): double
public "readData"(nbt: $CompoundTag$Type): void
public "getAltTitle"(): $Component
public "getAltIcon"(): $Icon
public "addTask"(task: $Task$Type): void
public "forceProgress"(teamData: $TeamData$Type, progressChange: $ProgressChange$Type): void
public "getMinWidth"(): integer
public "onMoved"(newX: double, newY: double, newChapterId: long): void
public "getQuestChapter"(): $Chapter
public "getParentID"(): long
public "componentsToRefresh"(): $Set<($RecipeModHelper$Components)>
public "removeInvalidDependencies"(): void
public "isOptionalForProgression"(): boolean
public "getRelativeProgressFromChildren"(data: $TeamData$Type): integer
public "hasUnclaimedRewardsRaw"(teamData: $TeamData$Type, player: $UUID$Type): boolean
public "shouldHideDependentLines"(): boolean
public "ignoreRewardBlocking"(): boolean
public "areDependenciesComplete"(teamData: $TeamData$Type): boolean
public "getMinRequiredDependencies"(): integer
public "isProgressionIgnored"(): boolean
public "getRequireSequentialTasks"(): boolean
public "shouldHideDependencyLines"(): boolean
public "getHideTextUntilComplete"(): $Tristate
public "hideDetailsUntilStartable"(): boolean
public "buildDescriptionIndex"(): $List<($Pair<(integer), (integer)>)>
public "addDependency"(object: $QuestObject$Type): void
public "onCompleted"(data: $QuestProgressEventData$Type<(any)>): void
public "onCreated"(): void
public "onStarted"(data: $QuestProgressEventData$Type<(any)>): void
public "clearCachedData"(): void
public "isCompletedRaw"(data: $TeamData$Type): boolean
public "getChapter"(): $Chapter
public "getTasks"(): $Collection<($Task)>
public "writeRewards"(tag: $CompoundTag$Type): void
public "writeTasks"(tag: $CompoundTag$Type): void
public "addReward"(reward: $Reward$Type): void
public "getProgressionMode"(): $ProgressionMode
public "removeDependency"(object: $QuestObject$Type): void
public "getTasksAsList"(): $List<($Task)>
public "getRawDescription"(): $List<(string)>
public "getRawSubtitle"(): string
public "hasDependencies"(): boolean
public "canBeRepeated"(): boolean
public "clearDependencies"(): void
public "setRawSubtitle"(rawSubtitle: string): void
public "getGuidePage"(): string
public "getIconScale"(): double
public "showInRecipeMod"(): boolean
public "getDependants"(): $Collection<($QuestObject)>
public "streamDependencies"(): $Stream<($QuestObject)>
public "getMovableID"(): long
public "getSubtitle"(): $Component
public "hasDependency"(object: $QuestObject$Type): boolean
public "verifyDependencies"(autofix: boolean): boolean
public "copyToClipboard"(): void
public "allTasksCompleted"(teamData: $TeamData$Type): boolean
public "checkRepeatable"(data: $TeamData$Type, player: $UUID$Type): void
public "removeTask"(task: $Task$Type): void
public "removeReward"(reward: $Reward$Type): void
public "writeNetData"(buffer: $FriendlyByteBuf$Type): void
public "writeData"(nbt: $CompoundTag$Type): void
public "getRewards"(): $Collection<($Reward)>
public "fillConfigGroup"(config: $ConfigGroup$Type): void
public "readNetData"(buffer: $FriendlyByteBuf$Type): void
public "getTitle"(): $Component
public "drawMoved"(graphics: $GuiGraphics$Type): void
get "size"(): double
set "size"(value: double)
get "children"(): $Collection<(any)>
get "objectType"(): $QuestObjectType
get "shape"(): string
get "description"(): $List<($Component)>
get "questFile"(): $BaseQuestFile
get "y"(): double
get "optional"(): boolean
set "x"(value: double)
set "y"(value: double)
get "x"(): double
get "width"(): double
get "height"(): double
get "altTitle"(): $Component
get "altIcon"(): $Icon
get "minWidth"(): integer
get "questChapter"(): $Chapter
get "parentID"(): long
get "optionalForProgression"(): boolean
get "minRequiredDependencies"(): integer
get "progressionIgnored"(): boolean
get "requireSequentialTasks"(): boolean
get "hideTextUntilComplete"(): $Tristate
get "chapter"(): $Chapter
get "tasks"(): $Collection<($Task)>
get "progressionMode"(): $ProgressionMode
get "tasksAsList"(): $List<($Task)>
get "rawDescription"(): $List<(string)>
get "rawSubtitle"(): string
set "rawSubtitle"(value: string)
get "guidePage"(): string
get "iconScale"(): double
get "dependants"(): $Collection<($QuestObject)>
get "movableID"(): long
get "subtitle"(): $Component
get "rewards"(): $Collection<($Reward)>
get "title"(): $Component
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Quest$Type = ($Quest);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Quest_ = $Quest$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/net/$TaskScreenConfigRequest" {
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$NetworkManager$PacketContext, $NetworkManager$PacketContext$Type} from "packages/dev/architectury/networking/$NetworkManager$PacketContext"
import {$BaseS2CMessage, $BaseS2CMessage$Type} from "packages/dev/architectury/networking/simple/$BaseS2CMessage"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$MessageType, $MessageType$Type} from "packages/dev/architectury/networking/simple/$MessageType"

export class $TaskScreenConfigRequest extends $BaseS2CMessage {

constructor(pos: $BlockPos$Type)
constructor(buf: $FriendlyByteBuf$Type)

public "write"(buf: $FriendlyByteBuf$Type): void
public "getType"(): $MessageType
public "handle"(context: $NetworkManager$PacketContext$Type): void
get "type"(): $MessageType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TaskScreenConfigRequest$Type = ($TaskScreenConfigRequest);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TaskScreenConfigRequest_ = $TaskScreenConfigRequest$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/client/$GuiProviders" {
import {$RewardType$GuiProvider, $RewardType$GuiProvider$Type} from "packages/dev/ftb/mods/ftbquests/quest/reward/$RewardType$GuiProvider"
import {$RewardType$Provider, $RewardType$Provider$Type} from "packages/dev/ftb/mods/ftbquests/quest/reward/$RewardType$Provider"
import {$TaskType$GuiProvider, $TaskType$GuiProvider$Type} from "packages/dev/ftb/mods/ftbquests/quest/task/$TaskType$GuiProvider"
import {$TaskType$Provider, $TaskType$Provider$Type} from "packages/dev/ftb/mods/ftbquests/quest/task/$TaskType$Provider"

export class $GuiProviders {

constructor()

public static "setRewardGuiProviders"(): void
public static "defaultTaskGuiProvider"(provider: $TaskType$Provider$Type): $TaskType$GuiProvider
public static "defaultRewardGuiProvider"(provider: $RewardType$Provider$Type): $RewardType$GuiProvider
public static "setTaskGuiProviders"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GuiProviders$Type = ($GuiProviders);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GuiProviders_ = $GuiProviders$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/sidebar/$SidebarButtonGroup" {
import {$Comparable, $Comparable$Type} from "packages/java/lang/$Comparable"
import {$List, $List$Type} from "packages/java/util/$List"
import {$SidebarButton, $SidebarButton$Type} from "packages/dev/ftb/mods/ftblibrary/sidebar/$SidebarButton"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $SidebarButtonGroup implements $Comparable<($SidebarButtonGroup)> {

/**
 * 
 * @deprecated
 */
constructor(id: $ResourceLocation$Type, y: integer)
constructor(id: $ResourceLocation$Type, y: integer, isPinned: boolean)

public "compareTo"(group: $SidebarButtonGroup$Type): integer
public "getId"(): $ResourceLocation
public "getY"(): integer
public "isPinned"(): boolean
public "getButtons"(): $List<($SidebarButton)>
public "getLangKey"(): string
get "id"(): $ResourceLocation
get "y"(): integer
get "pinned"(): boolean
get "buttons"(): $List<($SidebarButton)>
get "langKey"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SidebarButtonGroup$Type = ($SidebarButtonGroup);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SidebarButtonGroup_ = $SidebarButtonGroup$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/quest/$ServerQuestFile" {
import {$BaseQuestFile, $BaseQuestFile$Type} from "packages/dev/ftb/mods/ftbquests/quest/$BaseQuestFile"
import {$Path, $Path$Type} from "packages/java/nio/file/$Path"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$PlayerChangedTeamEvent, $PlayerChangedTeamEvent$Type} from "packages/dev/ftb/mods/ftbteams/api/event/$PlayerChangedTeamEvent"
import {$LevelResource, $LevelResource$Type} from "packages/net/minecraft/world/level/storage/$LevelResource"
import {$Runnable, $Runnable$Type} from "packages/java/lang/$Runnable"
import {$TeamData, $TeamData$Type} from "packages/dev/ftb/mods/ftbquests/quest/$TeamData"
import {$Env, $Env$Type} from "packages/dev/architectury/utils/$Env"
import {$TeamCreatedEvent, $TeamCreatedEvent$Type} from "packages/dev/ftb/mods/ftbteams/api/event/$TeamCreatedEvent"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$MinecraftServer, $MinecraftServer$Type} from "packages/net/minecraft/server/$MinecraftServer"
import {$PlayerLoggedInAfterTeamEvent, $PlayerLoggedInAfterTeamEvent$Type} from "packages/dev/ftb/mods/ftbteams/api/event/$PlayerLoggedInAfterTeamEvent"

export class $ServerQuestFile extends $BaseQuestFile {
static readonly "FTBQUESTS_DATA": $LevelResource
static "INSTANCE": $ServerQuestFile
readonly "server": $MinecraftServer
static "VERSION": integer
readonly "id": long

constructor(s: $MinecraftServer$Type)

public "load"(): void
public "unload"(): void
public "isLoading"(): boolean
public "getFolder"(): $Path
public "getSide"(): $Env
public "playerLoggedIn"(event: $PlayerLoggedInAfterTeamEvent$Type): void
public "markDirty"(): void
public "saveNow"(): void
public "isPlayerOnTeam"(player: $Player$Type, teamData: $TeamData$Type): boolean
public "moveChapterGroup"(id: long, movingUp: boolean): boolean
public "getCurrentPlayer"(): $ServerPlayer
public "withPlayerContext"(player: $ServerPlayer$Type, toDo: $Runnable$Type): void
public "playerChangedTeam"(event: $PlayerChangedTeamEvent$Type): void
public "teamCreated"(event: $TeamCreatedEvent$Type): void
public "deleteObject"(id: long): void
get "loading"(): boolean
get "folder"(): $Path
get "side"(): $Env
get "currentPlayer"(): $ServerPlayer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ServerQuestFile$Type = ($ServerQuestFile);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ServerQuestFile_ = $ServerQuestFile$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/integration/stages/$StageHelper" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$StageProvider, $StageProvider$Type} from "packages/dev/ftb/mods/ftblibrary/integration/stages/$StageProvider"

export class $StageHelper extends $Enum<($StageHelper)> {
static readonly "INSTANCE": $StageHelper


public static "values"(): ($StageHelper)[]
public static "valueOf"(name: string): $StageHelper
public static "getInstance"(): $StageHelper
public "getProvider"(): $StageProvider
public "setProviderImpl"(newProvider: $StageProvider$Type): void
get "instance"(): $StageHelper
get "provider"(): $StageProvider
set "providerImpl"(value: $StageProvider$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $StageHelper$Type = (("instance")) | ($StageHelper);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $StageHelper_ = $StageHelper$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/quest/task/$TaskType" {
import {$Quest, $Quest$Type} from "packages/dev/ftb/mods/ftbquests/quest/$Quest"
import {$Task, $Task$Type} from "packages/dev/ftb/mods/ftbquests/quest/task/$Task"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Icon, $Icon$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Icon"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$TaskType$GuiProvider, $TaskType$GuiProvider$Type} from "packages/dev/ftb/mods/ftbquests/quest/task/$TaskType$GuiProvider"

export class $TaskType {
 "internalId": integer


public "getDisplayName"(): $Component
public "setDisplayName"(name: $Component$Type): $TaskType
public "getTypeId"(): $ResourceLocation
public "createTask"(id: long, quest: $Quest$Type): $Task
public static "createTask"(id: long, quest: $Quest$Type, typeId: string): $Task
public "getTypeForNBT"(): string
public "getIconSupplier"(): $Icon
public "getGuiProvider"(): $TaskType$GuiProvider
public "setGuiProvider"(p: $TaskType$GuiProvider$Type): $TaskType
get "displayName"(): $Component
set "displayName"(value: $Component$Type)
get "typeId"(): $ResourceLocation
get "typeForNBT"(): string
get "iconSupplier"(): $Icon
get "guiProvider"(): $TaskType$GuiProvider
set "guiProvider"(value: $TaskType$GuiProvider$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TaskType$Type = ($TaskType);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TaskType_ = $TaskType$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/config/ui/$EditConfigScreen" {
import {$ConfigGroup, $ConfigGroup$Type} from "packages/dev/ftb/mods/ftblibrary/config/$ConfigGroup"
import {$AbstractThreePanelScreen, $AbstractThreePanelScreen$Type} from "packages/dev/ftb/mods/ftblibrary/ui/misc/$AbstractThreePanelScreen"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$EditConfigScreen$ConfigPanel, $EditConfigScreen$ConfigPanel$Type} from "packages/dev/ftb/mods/ftblibrary/config/ui/$EditConfigScreen$ConfigPanel"
import {$Key, $Key$Type} from "packages/dev/ftb/mods/ftblibrary/ui/input/$Key"
import {$Pair, $Pair$Type} from "packages/com/mojang/datafixers/util/$Pair"

export class $EditConfigScreen extends $AbstractThreePanelScreen<($EditConfigScreen$ConfigPanel)> {
static readonly "NO_INSET": $Pair<(integer), (integer)>
 "posX": integer
 "posY": integer
 "width": integer
 "height": integer

constructor(configGroup: $ConfigGroup$Type)

public "onClosedByKey"(key: $Key$Type): boolean
public "shouldCloseOnEsc"(): boolean
public "keyPressed"(key: $Key$Type): boolean
public "onInit"(): boolean
public "getTitle"(): $Component
public "setAutoclose"(autoclose: boolean): $EditConfigScreen
get "title"(): $Component
set "autoclose"(value: boolean)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EditConfigScreen$Type = ($EditConfigScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EditConfigScreen_ = $EditConfigScreen$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/snbt/$SNBTEOFException" {
import {$SNBTSyntaxException, $SNBTSyntaxException$Type} from "packages/dev/ftb/mods/ftblibrary/snbt/$SNBTSyntaxException"

export class $SNBTEOFException extends $SNBTSyntaxException {

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SNBTEOFException$Type = ($SNBTEOFException);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SNBTEOFException_ = $SNBTEOFException$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/net/$CopyQuestMessage" {
import {$Quest, $Quest$Type} from "packages/dev/ftb/mods/ftbquests/quest/$Quest"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$NetworkManager$PacketContext, $NetworkManager$PacketContext$Type} from "packages/dev/architectury/networking/$NetworkManager$PacketContext"
import {$BaseC2SMessage, $BaseC2SMessage$Type} from "packages/dev/architectury/networking/simple/$BaseC2SMessage"
import {$Chapter, $Chapter$Type} from "packages/dev/ftb/mods/ftbquests/quest/$Chapter"
import {$MessageType, $MessageType$Type} from "packages/dev/architectury/networking/simple/$MessageType"

export class $CopyQuestMessage extends $BaseC2SMessage {

constructor(toCopy: $Quest$Type, chapter: $Chapter$Type, qx: double, qy: double, copyDeps: boolean)
constructor(buf: $FriendlyByteBuf$Type)

public "write"(buf: $FriendlyByteBuf$Type): void
public "getType"(): $MessageType
public "handle"(context: $NetworkManager$PacketContext$Type): void
get "type"(): $MessageType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CopyQuestMessage$Type = ($CopyQuestMessage);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CopyQuestMessage_ = $CopyQuestMessage$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/client/gui/quests/$QuestKeyReferenceScreen" {
import {$KeyReferenceScreen, $KeyReferenceScreen$Type} from "packages/dev/ftb/mods/ftblibrary/ui/misc/$KeyReferenceScreen"

export class $QuestKeyReferenceScreen extends $KeyReferenceScreen {
 "posX": integer
 "posY": integer
 "width": integer
 "height": integer

constructor(...translationKeys: (string)[])

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $QuestKeyReferenceScreen$Type = ($QuestKeyReferenceScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $QuestKeyReferenceScreen_ = $QuestKeyReferenceScreen$Type;
}}
declare module "packages/dev/ftb/mods/ftbteams/data/$TeamArgument$Info$Template" {
import {$TeamArgument, $TeamArgument$Type} from "packages/dev/ftb/mods/ftbteams/data/$TeamArgument"
import {$ArgumentTypeInfo, $ArgumentTypeInfo$Type} from "packages/net/minecraft/commands/synchronization/$ArgumentTypeInfo"
import {$CommandBuildContext, $CommandBuildContext$Type} from "packages/net/minecraft/commands/$CommandBuildContext"
import {$TeamArgument$Info, $TeamArgument$Info$Type} from "packages/dev/ftb/mods/ftbteams/data/$TeamArgument$Info"
import {$ArgumentTypeInfo$Template, $ArgumentTypeInfo$Template$Type} from "packages/net/minecraft/commands/synchronization/$ArgumentTypeInfo$Template"

export class $TeamArgument$Info$Template implements $ArgumentTypeInfo$Template<($TeamArgument)> {

constructor(this$0: $TeamArgument$Info$Type)

public "instantiate"(commandBuildContext: $CommandBuildContext$Type): $TeamArgument
public "type"(): $ArgumentTypeInfo<($TeamArgument), (any)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TeamArgument$Info$Template$Type = ($TeamArgument$Info$Template);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TeamArgument$Info$Template_ = $TeamArgument$Info$Template$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/snbt/$SNBT" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Path, $Path$Type} from "packages/java/nio/file/$Path"
import {$SNBTCompoundTag, $SNBTCompoundTag$Type} from "packages/dev/ftb/mods/ftblibrary/snbt/$SNBTCompoundTag"
import {$List, $List$Type} from "packages/java/util/$List"

export class $SNBT {

constructor()

public static "write"(path: $Path$Type, nbt: $CompoundTag$Type): boolean
public static "read"(path: $Path$Type): $SNBTCompoundTag
public static "tryRead"(path: $Path$Type): $SNBTCompoundTag
public static "tryWrite"(path: $Path$Type, tag: $CompoundTag$Type): void
public static "shouldSortKeysOnWrite"(): boolean
public static "setShouldSortKeysOnWrite"(shouldSortKeysOnWrite: boolean): boolean
public static "readLines"(lines: $List$Type<(string)>): $SNBTCompoundTag
public static "writeLines"(nbt: $CompoundTag$Type): $List<(string)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SNBT$Type = ($SNBT);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SNBT_ = $SNBT$Type;
}}
declare module "packages/dev/ftb/mods/ftbteams/api/event/$TeamPropertiesChangedEvent" {
import {$TeamEvent, $TeamEvent$Type} from "packages/dev/ftb/mods/ftbteams/api/event/$TeamEvent"
import {$PlayerChangedTeamEvent, $PlayerChangedTeamEvent$Type} from "packages/dev/ftb/mods/ftbteams/api/event/$PlayerChangedTeamEvent"
import {$Event, $Event$Type} from "packages/dev/architectury/event/$Event"
import {$PlayerJoinedPartyTeamEvent, $PlayerJoinedPartyTeamEvent$Type} from "packages/dev/ftb/mods/ftbteams/api/event/$PlayerJoinedPartyTeamEvent"
import {$TeamAllyEvent, $TeamAllyEvent$Type} from "packages/dev/ftb/mods/ftbteams/api/event/$TeamAllyEvent"
import {$PlayerLeftPartyTeamEvent, $PlayerLeftPartyTeamEvent$Type} from "packages/dev/ftb/mods/ftbteams/api/event/$PlayerLeftPartyTeamEvent"
import {$TeamCreatedEvent, $TeamCreatedEvent$Type} from "packages/dev/ftb/mods/ftbteams/api/event/$TeamCreatedEvent"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$TeamInfoEvent, $TeamInfoEvent$Type} from "packages/dev/ftb/mods/ftbteams/api/event/$TeamInfoEvent"
import {$PlayerTransferredTeamOwnershipEvent, $PlayerTransferredTeamOwnershipEvent$Type} from "packages/dev/ftb/mods/ftbteams/api/event/$PlayerTransferredTeamOwnershipEvent"
import {$TeamCollectPropertiesEvent, $TeamCollectPropertiesEvent$Type} from "packages/dev/ftb/mods/ftbteams/api/event/$TeamCollectPropertiesEvent"
import {$TeamPropertyCollection, $TeamPropertyCollection$Type} from "packages/dev/ftb/mods/ftbteams/api/property/$TeamPropertyCollection"
import {$PlayerLoggedInAfterTeamEvent, $PlayerLoggedInAfterTeamEvent$Type} from "packages/dev/ftb/mods/ftbteams/api/event/$PlayerLoggedInAfterTeamEvent"
import {$ClientTeamPropertiesChangedEvent, $ClientTeamPropertiesChangedEvent$Type} from "packages/dev/ftb/mods/ftbteams/api/event/$ClientTeamPropertiesChangedEvent"
import {$Team, $Team$Type} from "packages/dev/ftb/mods/ftbteams/api/$Team"

export class $TeamPropertiesChangedEvent extends $TeamEvent {
static readonly "CREATED": $Event<($Consumer<($TeamCreatedEvent)>)>
static readonly "LOADED": $Event<($Consumer<($TeamEvent)>)>
static readonly "SAVED": $Event<($Consumer<($TeamEvent)>)>
static readonly "DELETED": $Event<($Consumer<($TeamEvent)>)>
static readonly "PLAYER_LOGGED_IN": $Event<($Consumer<($PlayerLoggedInAfterTeamEvent)>)>
static readonly "OWNERSHIP_TRANSFERRED": $Event<($Consumer<($PlayerTransferredTeamOwnershipEvent)>)>
static readonly "COLLECT_PROPERTIES": $Event<($Consumer<($TeamCollectPropertiesEvent)>)>
static readonly "PROPERTIES_CHANGED": $Event<($Consumer<($TeamPropertiesChangedEvent)>)>
static readonly "PLAYER_CHANGED": $Event<($Consumer<($PlayerChangedTeamEvent)>)>
static readonly "PLAYER_JOINED_PARTY": $Event<($Consumer<($PlayerJoinedPartyTeamEvent)>)>
static readonly "PLAYER_LEFT_PARTY": $Event<($Consumer<($PlayerLeftPartyTeamEvent)>)>
static readonly "INFO": $Event<($Consumer<($TeamInfoEvent)>)>
static readonly "ADD_ALLY": $Event<($Consumer<($TeamAllyEvent)>)>
static readonly "REMOVE_ALLY": $Event<($Consumer<($TeamAllyEvent)>)>
static readonly "CLIENT_PROPERTIES_CHANGED": $Event<($Consumer<($ClientTeamPropertiesChangedEvent)>)>

constructor(team: $Team$Type, prevProps: $TeamPropertyCollection$Type)

public "getPreviousProperties"(): $TeamPropertyCollection
get "previousProperties"(): $TeamPropertyCollection
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TeamPropertiesChangedEvent$Type = ($TeamPropertiesChangedEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TeamPropertiesChangedEvent_ = $TeamPropertiesChangedEvent$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/config/ui/$SelectableResource" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Icon, $Icon$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Icon"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$FluidStack, $FluidStack$Type} from "packages/dev/architectury/fluid/$FluidStack"

export interface $SelectableResource<T> {

 "getName"(): $Component
 "isEmpty"(): boolean
 "stack"(): T
 "getCount"(): long
 "getTag"(): $CompoundTag
 "getIcon"(): $Icon
 "copyWithCount"(arg0: long): $SelectableResource<(T)>
 "setTag"(arg0: $CompoundTag$Type): void
 "setCount"(arg0: integer): void
}

export namespace $SelectableResource {
function item(stack: $ItemStack$Type): $SelectableResource<($ItemStack)>
function fluid(stack: $FluidStack$Type): $SelectableResource<($FluidStack)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SelectableResource$Type<T> = ($SelectableResource<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SelectableResource_<T> = $SelectableResource$Type<(T)>;
}}
declare module "packages/dev/ftb/mods/ftbquests/quest/theme/selector/$AndSelector" {
import {$QuestObjectBase, $QuestObjectBase$Type} from "packages/dev/ftb/mods/ftbquests/quest/$QuestObjectBase"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ThemeSelector, $ThemeSelector$Type} from "packages/dev/ftb/mods/ftbquests/quest/theme/selector/$ThemeSelector"
import {$ThemeSelectorType, $ThemeSelectorType$Type} from "packages/dev/ftb/mods/ftbquests/quest/theme/selector/$ThemeSelectorType"

export class $AndSelector extends $ThemeSelector {
readonly "selectors": $List<($ThemeSelector)>

constructor()

public "equals"(o: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "compareTo"(o: $ThemeSelector$Type): integer
public "matches"(object: $QuestObjectBase$Type): boolean
public "getType"(): $ThemeSelectorType
get "type"(): $ThemeSelectorType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AndSelector$Type = ($AndSelector);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AndSelector_ = $AndSelector$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/ui/$WidgetLayout" {
import {$Panel, $Panel$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Panel"
import {$WidgetLayout$Padding, $WidgetLayout$Padding$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$WidgetLayout$Padding"

export interface $WidgetLayout {

 "getLayoutPadding"(): $WidgetLayout$Padding
 "align"(arg0: $Panel$Type): integer

(): $WidgetLayout$Padding
}

export namespace $WidgetLayout {
const NO_PADDING: $WidgetLayout$Padding
const NONE: $WidgetLayout
const VERTICAL: $WidgetLayout
const HORIZONTAL: $WidgetLayout
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WidgetLayout$Type = ($WidgetLayout);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WidgetLayout_ = $WidgetLayout$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/config/ui/$SearchModeIndex" {
import {$ResourceSearchMode, $ResourceSearchMode$Type} from "packages/dev/ftb/mods/ftblibrary/config/ui/$ResourceSearchMode"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"

export class $SearchModeIndex<T extends $ResourceSearchMode<(any)>> {

constructor()

public "nextMode"(): void
public "getCurrentSearchMode"(): $Optional<(T)>
public "appendMode"(mode: T): void
public "prependMode"(mode: T): void
get "currentSearchMode"(): $Optional<(T)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SearchModeIndex$Type<T> = ($SearchModeIndex<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SearchModeIndex_<T> = $SearchModeIndex$Type<(T)>;
}}
declare module "packages/dev/ftb/mods/ftblibrary/snbt/$SNBTBuilder" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$StringBuilder, $StringBuilder$Type} from "packages/java/lang/$StringBuilder"

export class $SNBTBuilder {
 "indent": string
readonly "lines": $List<(string)>
readonly "line": $StringBuilder
 "singleLine": integer


public "println"(): void
public "print"(string: any): void
public "push"(): void
public "pop"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SNBTBuilder$Type = ($SNBTBuilder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SNBTBuilder_ = $SNBTBuilder$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/net/$TogglePinnedMessage" {
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$NetworkManager$PacketContext, $NetworkManager$PacketContext$Type} from "packages/dev/architectury/networking/$NetworkManager$PacketContext"
import {$BaseC2SMessage, $BaseC2SMessage$Type} from "packages/dev/architectury/networking/simple/$BaseC2SMessage"
import {$MessageType, $MessageType$Type} from "packages/dev/architectury/networking/simple/$MessageType"

export class $TogglePinnedMessage extends $BaseC2SMessage {

constructor(i: long)

public "write"(buffer: $FriendlyByteBuf$Type): void
public "getType"(): $MessageType
public "handle"(context: $NetworkManager$PacketContext$Type): void
get "type"(): $MessageType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TogglePinnedMessage$Type = ($TogglePinnedMessage);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TogglePinnedMessage_ = $TogglePinnedMessage$Type;
}}
declare module "packages/dev/ftb/mods/ftbxmodcompat/ftbteams/kubejs/$PlayerTeamEventJS" {
import {$KJSTeamWrapper, $KJSTeamWrapper$Type} from "packages/dev/ftb/mods/ftbxmodcompat/ftbteams/kubejs/$KJSTeamWrapper"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$PlayerEventJS, $PlayerEventJS$Type} from "packages/dev/latvian/mods/kubejs/player/$PlayerEventJS"
import {$Team, $Team$Type} from "packages/dev/ftb/mods/ftbteams/api/$Team"

export class $PlayerTeamEventJS extends $PlayerEventJS {

constructor(player: $ServerPlayer$Type, currentTeam: $Team$Type, prevTeam: $Team$Type)

public "getCurrentTeam"(): $KJSTeamWrapper
public "getPrevTeam"(): $KJSTeamWrapper
get "currentTeam"(): $KJSTeamWrapper
get "prevTeam"(): $KJSTeamWrapper
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PlayerTeamEventJS$Type = ($PlayerTeamEventJS);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PlayerTeamEventJS_ = $PlayerTeamEventJS$Type;
}}
declare module "packages/dev/ftb/mods/ftbteams/client/gui/$MyTeamScreen" {
import {$Theme, $Theme$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Theme"
import {$Key, $Key$Type} from "packages/dev/ftb/mods/ftblibrary/ui/input/$Key"
import {$TeamPropertyCollection, $TeamPropertyCollection$Type} from "packages/dev/ftb/mods/ftbteams/api/property/$TeamPropertyCollection"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$PlayerPermissions, $PlayerPermissions$Type} from "packages/dev/ftb/mods/ftbteams/data/$PlayerPermissions"
import {$BaseScreen, $BaseScreen$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$BaseScreen"
import {$NordColors, $NordColors$Type} from "packages/dev/ftb/mods/ftblibrary/ui/misc/$NordColors"

export class $MyTeamScreen extends $BaseScreen implements $NordColors {
 "posX": integer
 "posY": integer
 "width": integer
 "height": integer

constructor(properties: $TeamPropertyCollection$Type, permissions: $PlayerPermissions$Type)

public static "refreshIfOpen"(): void
public "drawForeground"(graphics: $GuiGraphics$Type, theme: $Theme$Type, x: integer, y: integer, w: integer, h: integer): void
public "alignWidgets"(): void
public "addWidgets"(): void
public "getTheme"(): $Theme
public "keyPressed"(key: $Key$Type): boolean
public "onInit"(): boolean
public "drawBackground"(graphics: $GuiGraphics$Type, theme: $Theme$Type, x: integer, y: integer, w: integer, h: integer): void
public "refreshChat"(): void
get "theme"(): $Theme
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MyTeamScreen$Type = ($MyTeamScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MyTeamScreen_ = $MyTeamScreen$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/ui/$ScreenWrapper" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$IScreenWrapper, $IScreenWrapper$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$IScreenWrapper"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$Runnable, $Runnable$Type} from "packages/java/lang/$Runnable"
import {$BaseScreen, $BaseScreen$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$BaseScreen"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$List, $List$Type} from "packages/java/util/$List"

export class $ScreenWrapper extends $Screen implements $IScreenWrapper {
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering

constructor(g: $BaseScreen$Type)

public "keyPressed"(keyCode: integer, scanCode: integer, modifiers: integer): boolean
public "shouldCloseOnEsc"(): boolean
public "renderBackground"(matrixStack: $GuiGraphics$Type): void
public "m_7856_"(): void
public "removed"(): void
public "render"(graphics: $GuiGraphics$Type, mouseX: integer, mouseY: integer, partialTicks: float): void
public "isPauseScreen"(): boolean
public "tick"(): void
public "mouseReleased"(x: double, y: double, button: integer): boolean
public "mouseClicked"(x: double, y: double, button: integer): boolean
public "charTyped"(keyChar: character, modifiers: integer): boolean
public "mouseScrolled"(x: double, y: double, scroll: double): boolean
public "mouseDragged"(x: double, y: double, button: integer, dragX: double, dragY: double): boolean
public "keyReleased"(keyCode: integer, scanCode: integer, modifiers: integer): boolean
public "getGui"(): $BaseScreen
public "openGui"(): void
public "closeGui"(openPrevScreen: boolean): void
public "run"(): void
public "closeGui"(): void
public "openAfter"(runnable: $Runnable$Type): $Runnable
public "openGuiLater"(): void
public "closeContextMenu"(): void
get "pauseScreen"(): boolean
get "gui"(): $BaseScreen
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ScreenWrapper$Type = ($ScreenWrapper);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ScreenWrapper_ = $ScreenWrapper$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/snbt/$SNBTTagProperties" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $SNBTTagProperties {
static readonly "DEFAULT": $SNBTTagProperties
static readonly "TYPE_FALSE": integer
static readonly "TYPE_TRUE": integer


}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SNBTTagProperties$Type = ($SNBTTagProperties);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SNBTTagProperties_ = $SNBTTagProperties$Type;
}}
declare module "packages/dev/ftb/mods/ftbteams/client/gui/$MemberButton" {
import {$Theme, $Theme$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Theme"
import {$NordButton, $NordButton$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$NordButton"
import {$MouseButton, $MouseButton$Type} from "packages/dev/ftb/mods/ftblibrary/ui/input/$MouseButton"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $MemberButton extends $NordButton {
 "posX": integer
 "posY": integer
 "width": integer
 "height": integer


public "drawIcon"(graphics: $GuiGraphics$Type, theme: $Theme$Type, x: integer, y: integer, w: integer, h: integer): void
public "onClicked"(button: $MouseButton$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MemberButton$Type = ($MemberButton);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MemberButton_ = $MemberButton$Type;
}}
declare module "packages/dev/ftb/mods/ftbteams/data/$TeamArgumentProvider" {
import {$CommandSourceStack, $CommandSourceStack$Type} from "packages/net/minecraft/commands/$CommandSourceStack"
import {$Team, $Team$Type} from "packages/dev/ftb/mods/ftbteams/api/$Team"

export interface $TeamArgumentProvider {

 "getTeam"(arg0: $CommandSourceStack$Type): $Team

(arg0: $CommandSourceStack$Type): $Team
}

export namespace $TeamArgumentProvider {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TeamArgumentProvider$Type = ($TeamArgumentProvider);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TeamArgumentProvider_ = $TeamArgumentProvider$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/config/$ListConfig" {
import {$Color4I, $Color4I$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Color4I"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Widget, $Widget$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Widget"
import {$ConfigValue, $ConfigValue$Type} from "packages/dev/ftb/mods/ftblibrary/config/$ConfigValue"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ConfigCallback, $ConfigCallback$Type} from "packages/dev/ftb/mods/ftblibrary/config/$ConfigCallback"
import {$MouseButton, $MouseButton$Type} from "packages/dev/ftb/mods/ftblibrary/ui/input/$MouseButton"
import {$TooltipList, $TooltipList$Type} from "packages/dev/ftb/mods/ftblibrary/util/$TooltipList"

export class $ListConfig<E, CV extends $ConfigValue<(E)>> extends $ConfigValue<($List<(E)>)> {
static readonly "EMPTY_LIST": $Component
static readonly "NON_EMPTY_LIST": $Component
static readonly "COLOR": $Color4I
static readonly "NULL_TEXT": $Component
 "id": string

constructor(t: CV)

public "getType"(): CV
public "copy"(v: $List$Type<(E)>): $List<(E)>
public "getColor"(v: $List$Type<(E)>): $Color4I
public "getStringForGUI"(v: $List$Type<(E)>): $Component
public "addInfo"(l: $TooltipList$Type): void
public "onClicked"(clickedWidget: $Widget$Type, button: $MouseButton$Type, callback: $ConfigCallback$Type): void
get "type"(): CV
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ListConfig$Type<E, CV> = ($ListConfig<(E), (CV)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ListConfig_<E, CV> = $ListConfig$Type<(E), (CV)>;
}}
declare module "packages/dev/ftb/mods/ftbteams/api/event/$TeamCollectPropertiesEvent" {
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$TeamProperty, $TeamProperty$Type} from "packages/dev/ftb/mods/ftbteams/api/property/$TeamProperty"

export class $TeamCollectPropertiesEvent {

constructor(c: $Consumer$Type<($TeamProperty$Type<(any)>)>)

public "add"(property: $TeamProperty$Type<(any)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TeamCollectPropertiesEvent$Type = ($TeamCollectPropertiesEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TeamCollectPropertiesEvent_ = $TeamCollectPropertiesEvent$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/events/$ObjectStartedEvent$FileEvent" {
import {$BaseQuestFile, $BaseQuestFile$Type} from "packages/dev/ftb/mods/ftbquests/quest/$BaseQuestFile"
import {$Event, $Event$Type} from "packages/dev/architectury/event/$Event"
import {$QuestProgressEventData, $QuestProgressEventData$Type} from "packages/dev/ftb/mods/ftbquests/events/$QuestProgressEventData"
import {$EventActor, $EventActor$Type} from "packages/dev/architectury/event/$EventActor"
import {$ObjectStartedEvent, $ObjectStartedEvent$Type} from "packages/dev/ftb/mods/ftbquests/events/$ObjectStartedEvent"
import {$ObjectStartedEvent$QuestEvent, $ObjectStartedEvent$QuestEvent$Type} from "packages/dev/ftb/mods/ftbquests/events/$ObjectStartedEvent$QuestEvent"
import {$ObjectStartedEvent$ChapterEvent, $ObjectStartedEvent$ChapterEvent$Type} from "packages/dev/ftb/mods/ftbquests/events/$ObjectStartedEvent$ChapterEvent"
import {$ObjectStartedEvent$TaskEvent, $ObjectStartedEvent$TaskEvent$Type} from "packages/dev/ftb/mods/ftbquests/events/$ObjectStartedEvent$TaskEvent"

export class $ObjectStartedEvent$FileEvent extends $ObjectStartedEvent<($BaseQuestFile)> {
static readonly "GENERIC": $Event<($EventActor<($ObjectStartedEvent<(any)>)>)>
static readonly "FILE": $Event<($EventActor<($ObjectStartedEvent$FileEvent)>)>
static readonly "CHAPTER": $Event<($EventActor<($ObjectStartedEvent$ChapterEvent)>)>
static readonly "QUEST": $Event<($EventActor<($ObjectStartedEvent$QuestEvent)>)>
static readonly "TASK": $Event<($EventActor<($ObjectStartedEvent$TaskEvent)>)>

constructor(d: $QuestProgressEventData$Type<($BaseQuestFile$Type)>)

public "getFile"(): $BaseQuestFile
get "file"(): $BaseQuestFile
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ObjectStartedEvent$FileEvent$Type = ($ObjectStartedEvent$FileEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ObjectStartedEvent$FileEvent_ = $ObjectStartedEvent$FileEvent$Type;
}}
declare module "packages/dev/ftb/mods/ftbteams/api/property/$BooleanProperty" {
import {$ConfigGroup, $ConfigGroup$Type} from "packages/dev/ftb/mods/ftblibrary/config/$ConfigGroup"
import {$TeamPropertyType, $TeamPropertyType$Type} from "packages/dev/ftb/mods/ftbteams/api/property/$TeamPropertyType"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$Tag, $Tag$Type} from "packages/net/minecraft/nbt/$Tag"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$TeamProperty, $TeamProperty$Type} from "packages/dev/ftb/mods/ftbteams/api/property/$TeamProperty"
import {$TeamPropertyValue, $TeamPropertyValue$Type} from "packages/dev/ftb/mods/ftbteams/api/property/$TeamPropertyValue"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $BooleanProperty extends $TeamProperty<(boolean)> {

constructor(id: $ResourceLocation$Type, def: $Supplier$Type<(boolean)>)
constructor(id: $ResourceLocation$Type, def: boolean)

public "write"(buf: $FriendlyByteBuf$Type): void
public "getType"(): $TeamPropertyType<(boolean)>
public "config"(config: $ConfigGroup$Type, value: $TeamPropertyValue$Type<(boolean)>): void
public "fromString"(string: string): $Optional<(boolean)>
public "fromNBT"(tag: $Tag$Type): $Optional<(boolean)>
public "toNBT"(value: boolean): $Tag
get "type"(): $TeamPropertyType<(boolean)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BooleanProperty$Type = ($BooleanProperty);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BooleanProperty_ = $BooleanProperty$Type;
}}
declare module "packages/dev/ftb/mods/ftbxmodcompat/ftbquests/kubejs/$CustomRewardEventJS" {
import {$PlayerEventJS, $PlayerEventJS$Type} from "packages/dev/latvian/mods/kubejs/player/$PlayerEventJS"
import {$CustomRewardEvent, $CustomRewardEvent$Type} from "packages/dev/ftb/mods/ftbquests/events/$CustomRewardEvent"
import {$CustomReward, $CustomReward$Type} from "packages/dev/ftb/mods/ftbquests/quest/reward/$CustomReward"

export class $CustomRewardEventJS extends $PlayerEventJS {

constructor(e: $CustomRewardEvent$Type)

public "getReward"(): $CustomReward
public "getNotify"(): boolean
get "reward"(): $CustomReward
get "notify"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CustomRewardEventJS$Type = ($CustomRewardEventJS);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CustomRewardEventJS_ = $CustomRewardEventJS$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/util/$StringUtils" {
import {$Comparator, $Comparator$Type} from "packages/java/util/$Comparator"
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$List, $List$Type} from "packages/java/util/$List"
import {$DecimalFormat, $DecimalFormat$Type} from "packages/java/text/$DecimalFormat"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $StringUtils {
static readonly "ALLOWED_TEXT_CHARS": string
static readonly "FORMATTING_CHAR": character
static readonly "EMPTY_ARRAY": (string)[]
static readonly "HEX": (character)[]
static readonly "ALWAYS_TRUE": $Predicate<(string)>
static readonly "FLAG_ID_ALLOW_EMPTY": integer
static readonly "FLAG_ID_FIX": integer
static readonly "FLAG_ID_ONLY_LOWERCASE": integer
static readonly "FLAG_ID_ONLY_UNDERLINE": integer
static readonly "FLAG_ID_ONLY_UNDERLINE_OR_PERIOD": integer
static readonly "FLAG_ID_DEFAULTS": integer
static readonly "IGNORE_CASE_COMPARATOR": $Comparator<(any)>
static readonly "ID_COMPARATOR": $Comparator<(any)>
static readonly "TEMP_MAP": $Map<(string), (string)>
static readonly "DOUBLE_FORMATTER_00": $DecimalFormat
static readonly "DOUBLE_FORMATTER_0": $DecimalFormat
static readonly "INT_SIZE_TABLE": (integer)[]
static "ignoreResourceLocationErrors": boolean

constructor()

public static "replace"(txt: $List$Type<(string)>, s: string, s1: string): void
public static "replace"(s: string, c: character, arg2: character): string
public static "stringSize"(x: integer): integer
public static "parse"(map: $Map$Type<(string), (string)>, s: string): $Map<(string), (string)>
public static "getID"(o: any, flags: integer): string
public static "unformatted"(string: string): string
public static "getRawID"(o: any): string
public static "isTextChar"(c: character, onlyAZ09: boolean): boolean
public static "shiftArray"(s: (string)[]): (string)[]
public static "toSnakeCase"(string: string): string
public static "emptyIfNull"(o: any): string
public static "isASCIIChar"(c: character): boolean
public static "addFormatting"(string: string): string
public static "formatDouble"(value: double): string
public static "formatDouble"(value: double, fancy: boolean): string
public static "formatDouble00"(value: double): string
public static "joinSpaceUntilEnd"(startIndex: integer, o: (charseq)[]): string
public static "fixTabs"(string: string, tabSize: integer): string
public static "camelCaseToWords"(key: string): string
public static "firstUppercase"(s: string): string
public static "formatDouble0"(value: double): string
public static "add0s"(number: integer, max: integer): string
public static "fillString"(s: charseq, fill: character, length: integer): string
public static "splitProperties"(s: string): $Map<(string), (string)>
public static "removeAllWhitespace"(s: string): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $StringUtils$Type = ($StringUtils);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $StringUtils_ = $StringUtils$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/api/$ItemFilterAdapter" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$ItemFilterAdapter$Matcher, $ItemFilterAdapter$Matcher$Type} from "packages/dev/ftb/mods/ftbquests/api/$ItemFilterAdapter$Matcher"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"

export interface $ItemFilterAdapter {

 "getName"(): string
 "makeTagFilterStack"(arg0: $TagKey$Type<($Item$Type)>): $ItemStack
 "getMatcher"(arg0: $ItemStack$Type): $ItemFilterAdapter$Matcher
 "hasItemTagFilter"(): boolean
 "doesItemMatch"(arg0: $ItemStack$Type, arg1: $ItemStack$Type): boolean
 "isFilterStack"(arg0: $ItemStack$Type): boolean
}

export namespace $ItemFilterAdapter {
const NO_MATCH: $ItemFilterAdapter$Matcher
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ItemFilterAdapter$Type = ($ItemFilterAdapter);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ItemFilterAdapter_ = $ItemFilterAdapter$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/net/$DeleteObjectMessage" {
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$NetworkManager$PacketContext, $NetworkManager$PacketContext$Type} from "packages/dev/architectury/networking/$NetworkManager$PacketContext"
import {$BaseC2SMessage, $BaseC2SMessage$Type} from "packages/dev/architectury/networking/simple/$BaseC2SMessage"
import {$MessageType, $MessageType$Type} from "packages/dev/architectury/networking/simple/$MessageType"

export class $DeleteObjectMessage extends $BaseC2SMessage {

constructor(i: long)

public "write"(buffer: $FriendlyByteBuf$Type): void
public "getType"(): $MessageType
public "handle"(context: $NetworkManager$PacketContext$Type): void
get "type"(): $MessageType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DeleteObjectMessage$Type = ($DeleteObjectMessage);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DeleteObjectMessage_ = $DeleteObjectMessage$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/net/$ClaimRewardMessage" {
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$NetworkManager$PacketContext, $NetworkManager$PacketContext$Type} from "packages/dev/architectury/networking/$NetworkManager$PacketContext"
import {$BaseC2SMessage, $BaseC2SMessage$Type} from "packages/dev/architectury/networking/simple/$BaseC2SMessage"
import {$MessageType, $MessageType$Type} from "packages/dev/architectury/networking/simple/$MessageType"

export class $ClaimRewardMessage extends $BaseC2SMessage {

constructor(i: long, n: boolean)

public "write"(buffer: $FriendlyByteBuf$Type): void
public "getType"(): $MessageType
public "handle"(context: $NetworkManager$PacketContext$Type): void
get "type"(): $MessageType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClaimRewardMessage$Type = ($ClaimRewardMessage);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClaimRewardMessage_ = $ClaimRewardMessage$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/quest/reward/$RewardType$Provider" {
import {$Quest, $Quest$Type} from "packages/dev/ftb/mods/ftbquests/quest/$Quest"
import {$Reward, $Reward$Type} from "packages/dev/ftb/mods/ftbquests/quest/reward/$Reward"

export interface $RewardType$Provider {

 "create"(arg0: long, arg1: $Quest$Type): $Reward

(arg0: long, arg1: $Quest$Type): $Reward
}

export namespace $RewardType$Provider {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RewardType$Provider$Type = ($RewardType$Provider);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RewardType$Provider_ = $RewardType$Provider$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/quest/reward/$RewardAutoClaim" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$NameMap, $NameMap$Type} from "packages/dev/ftb/mods/ftblibrary/config/$NameMap"

export class $RewardAutoClaim extends $Enum<($RewardAutoClaim)> {
static readonly "DEFAULT": $RewardAutoClaim
static readonly "DISABLED": $RewardAutoClaim
static readonly "ENABLED": $RewardAutoClaim
static readonly "NO_TOAST": $RewardAutoClaim
static readonly "INVISIBLE": $RewardAutoClaim
static readonly "NAME_MAP": $NameMap<($RewardAutoClaim)>
static readonly "NAME_MAP_NO_DEFAULT": $NameMap<($RewardAutoClaim)>
 "id": string


public static "values"(): ($RewardAutoClaim)[]
public static "valueOf"(name: string): $RewardAutoClaim
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RewardAutoClaim$Type = (("default") | ("invisible") | ("disabled") | ("enabled") | ("no_toast")) | ($RewardAutoClaim);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RewardAutoClaim_ = $RewardAutoClaim$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/net/$EditObjectResponseMessage" {
import {$QuestObjectBase, $QuestObjectBase$Type} from "packages/dev/ftb/mods/ftbquests/quest/$QuestObjectBase"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$NetworkManager$PacketContext, $NetworkManager$PacketContext$Type} from "packages/dev/architectury/networking/$NetworkManager$PacketContext"
import {$BaseS2CMessage, $BaseS2CMessage$Type} from "packages/dev/architectury/networking/simple/$BaseS2CMessage"
import {$MessageType, $MessageType$Type} from "packages/dev/architectury/networking/simple/$MessageType"

export class $EditObjectResponseMessage extends $BaseS2CMessage {

constructor(o: $QuestObjectBase$Type)

public "write"(buffer: $FriendlyByteBuf$Type): void
public "getType"(): $MessageType
public "handle"(context: $NetworkManager$PacketContext$Type): void
get "type"(): $MessageType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EditObjectResponseMessage$Type = ($EditObjectResponseMessage);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EditObjectResponseMessage_ = $EditObjectResponseMessage$Type;
}}
declare module "packages/dev/ftb/mods/ftbxmodcompat/ftbquests/filtering/$FFSSetup" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $FFSSetup {


public static "init"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FFSSetup$Type = ($FFSSetup);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FFSSetup_ = $FFSSetup$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/net/$ClaimRewardResponseMessage" {
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$NetworkManager$PacketContext, $NetworkManager$PacketContext$Type} from "packages/dev/architectury/networking/$NetworkManager$PacketContext"
import {$BaseS2CMessage, $BaseS2CMessage$Type} from "packages/dev/architectury/networking/simple/$BaseS2CMessage"
import {$MessageType, $MessageType$Type} from "packages/dev/architectury/networking/simple/$MessageType"

export class $ClaimRewardResponseMessage extends $BaseS2CMessage {

constructor(t: $UUID$Type, p: $UUID$Type, r: long)

public "write"(buffer: $FriendlyByteBuf$Type): void
public "getType"(): $MessageType
public "handle"(context: $NetworkManager$PacketContext$Type): void
get "type"(): $MessageType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClaimRewardResponseMessage$Type = ($ClaimRewardResponseMessage);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClaimRewardResponseMessage_ = $ClaimRewardResponseMessage$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/client/$EnergyTaskClientData" {
import {$TextureAtlasSprite, $TextureAtlasSprite$Type} from "packages/net/minecraft/client/renderer/texture/$TextureAtlasSprite"

export interface $EnergyTaskClientData {

 "getFullTexture"(): $TextureAtlasSprite
 "getEmptyTexture"(): $TextureAtlasSprite
}

export namespace $EnergyTaskClientData {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EnergyTaskClientData$Type = ($EnergyTaskClientData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EnergyTaskClientData_ = $EnergyTaskClientData$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/ui/input/$MouseButton" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $MouseButton {
static readonly "LEFT": $MouseButton
static readonly "RIGHT": $MouseButton
static readonly "MIDDLE": $MouseButton
static readonly "BACK": $MouseButton
static readonly "NEXT": $MouseButton
readonly "id": integer


public "isMiddle"(): boolean
public static "get"(i: integer): $MouseButton
public "hashCode"(): integer
public "getId"(): integer
public "isRight"(): boolean
public "isLeft"(): boolean
get "middle"(): boolean
get "id"(): integer
get "right"(): boolean
get "left"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MouseButton$Type = ($MouseButton);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MouseButton_ = $MouseButton$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/net/$SyncEditorPermissionMessage" {
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$NetworkManager$PacketContext, $NetworkManager$PacketContext$Type} from "packages/dev/architectury/networking/$NetworkManager$PacketContext"
import {$BaseS2CMessage, $BaseS2CMessage$Type} from "packages/dev/architectury/networking/simple/$BaseS2CMessage"
import {$MessageType, $MessageType$Type} from "packages/dev/architectury/networking/simple/$MessageType"

export class $SyncEditorPermissionMessage extends $BaseS2CMessage {

constructor(hasPermission: boolean)
constructor(buf: $FriendlyByteBuf$Type)

public "write"(buf: $FriendlyByteBuf$Type): void
public "getType"(): $MessageType
public "handle"(context: $NetworkManager$PacketContext$Type): void
get "type"(): $MessageType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SyncEditorPermissionMessage$Type = ($SyncEditorPermissionMessage);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SyncEditorPermissionMessage_ = $SyncEditorPermissionMessage$Type;
}}
declare module "packages/dev/ftb/mods/ftbxmodcompat/ftbquests/jei/helper/$JEIRecipeHelper" {
import {$BaseRecipeHelper, $BaseRecipeHelper$Type} from "packages/dev/ftb/mods/ftbxmodcompat/ftbquests/recipemod_common/$BaseRecipeHelper"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export class $JEIRecipeHelper extends $BaseRecipeHelper {

constructor()

public "showRecipes"(itemStack: $ItemStack$Type): void
public "updateItemsDynamic"(toRemove: $Collection$Type<($ItemStack$Type)>, toAdd: $Collection$Type<($ItemStack$Type)>): void
public "getHelperName"(): string
get "helperName"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $JEIRecipeHelper$Type = ($JEIRecipeHelper);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $JEIRecipeHelper_ = $JEIRecipeHelper$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/core/$ItemFTBL" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"

export interface $ItemFTBL {

 "setCraftingRemainingItemFTBL"(arg0: $Item$Type): void

(arg0: $Item$Type): void
}

export namespace $ItemFTBL {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ItemFTBL$Type = ($ItemFTBL);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ItemFTBL_ = $ItemFTBL$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/quest/theme/$SelectorProperties" {
import {$Comparable, $Comparable$Type} from "packages/java/lang/$Comparable"
import {$ThemeSelector, $ThemeSelector$Type} from "packages/dev/ftb/mods/ftbquests/quest/theme/selector/$ThemeSelector"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $SelectorProperties implements $Comparable<($SelectorProperties)> {
readonly "selector": $ThemeSelector
readonly "properties": $Map<(string), (string)>

constructor(s: $ThemeSelector$Type)

public "compareTo"(o: $SelectorProperties$Type): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SelectorProperties$Type = ($SelectorProperties);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SelectorProperties_ = $SelectorProperties$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/util/$OptionalBoolean$Consumer" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $OptionalBoolean$Consumer {

 "accept"(arg0: boolean): void

(arg0: boolean): void
}

export namespace $OptionalBoolean$Consumer {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $OptionalBoolean$Consumer$Type = ($OptionalBoolean$Consumer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $OptionalBoolean$Consumer_ = $OptionalBoolean$Consumer$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/quest/task/$TaskTypes" {
import {$TaskType, $TaskType$Type} from "packages/dev/ftb/mods/ftbquests/quest/task/$TaskType"
import {$Icon, $Icon$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Icon"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$TaskType$Provider, $TaskType$Provider$Type} from "packages/dev/ftb/mods/ftbquests/quest/task/$TaskType$Provider"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export interface $TaskTypes {

}

export namespace $TaskTypes {
const TYPES: $Map<($ResourceLocation), ($TaskType)>
const ITEM: $TaskType
const CUSTOM: $TaskType
const XP: $TaskType
const DIMENSION: $TaskType
const STAT: $TaskType
const KILL: $TaskType
const LOCATION: $TaskType
const CHECKMARK: $TaskType
const ADVANCEMENT: $TaskType
const OBSERVATION: $TaskType
const BIOME: $TaskType
const STRUCTURE: $TaskType
const STAGE: $TaskType
const FLUID: $TaskType
function register(name: $ResourceLocation$Type, provider: $TaskType$Provider$Type, iconSupplier: $Supplier$Type<($Icon$Type)>): $TaskType
function init(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TaskTypes$Type = ($TaskTypes);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TaskTypes_ = $TaskTypes$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/client/gui/$SelectChoiceRewardScreen" {
import {$Panel, $Panel$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Panel"
import {$ChoiceReward, $ChoiceReward$Type} from "packages/dev/ftb/mods/ftbquests/quest/reward/$ChoiceReward"
import {$Theme, $Theme$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Theme"
import {$Pair, $Pair$Type} from "packages/com/mojang/datafixers/util/$Pair"
import {$AbstractButtonListScreen, $AbstractButtonListScreen$Type} from "packages/dev/ftb/mods/ftblibrary/ui/misc/$AbstractButtonListScreen"

export class $SelectChoiceRewardScreen extends $AbstractButtonListScreen {
static readonly "NO_INSET": $Pair<(integer), (integer)>
 "posX": integer
 "posY": integer
 "width": integer
 "height": integer

constructor(choiceReward: $ChoiceReward$Type)

public "getTheme"(): $Theme
public "addButtons"(panel: $Panel$Type): void
get "theme"(): $Theme
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SelectChoiceRewardScreen$Type = ($SelectChoiceRewardScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SelectChoiceRewardScreen_ = $SelectChoiceRewardScreen$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/integration/stages/$StageProvider" {
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"

export interface $StageProvider {

 "getName"(): string
 "add"(arg0: $ServerPlayer$Type, arg1: string): void
 "remove"(arg0: $ServerPlayer$Type, arg1: string): void
 "sync"(player: $ServerPlayer$Type): void
 "has"(arg0: $Player$Type, arg1: string): boolean
}

export namespace $StageProvider {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $StageProvider$Type = ($StageProvider);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $StageProvider_ = $StageProvider$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/quest/theme/$QuestTheme" {
import {$QuestObjectBase, $QuestObjectBase$Type} from "packages/dev/ftb/mods/ftbquests/quest/$QuestObjectBase"
import {$SelectorProperties, $SelectorProperties$Type} from "packages/dev/ftb/mods/ftbquests/quest/theme/$SelectorProperties"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ThemeProperty, $ThemeProperty$Type} from "packages/dev/ftb/mods/ftbquests/quest/theme/property/$ThemeProperty"

export class $QuestTheme {
static "instance": $QuestTheme
static "currentObject": $QuestObjectBase
readonly "selectors": $List<($SelectorProperties)>
 "defaults": $SelectorProperties

constructor()

public "get"<T>(property: $ThemeProperty$Type<(T)>, object: $QuestObjectBase$Type): T
public "get"<T>(property: $ThemeProperty$Type<(T)>): T
public "clearCache"(): void
public "replaceVariables"(value: string, iteration: integer): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $QuestTheme$Type = ($QuestTheme);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $QuestTheme_ = $QuestTheme$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/integration/$PermissionsHelper" {
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"

export class $PermissionsHelper {
static readonly "EDITOR_PERM": string

constructor()

public static "hasEditorPermission"(player: $ServerPlayer$Type, def: boolean): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PermissionsHelper$Type = ($PermissionsHelper);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PermissionsHelper_ = $PermissionsHelper$Type;
}}
declare module "packages/dev/ftb/mods/ftbteams/api/property/$TeamProperties" {
import {$BooleanProperty, $BooleanProperty$Type} from "packages/dev/ftb/mods/ftbteams/api/property/$BooleanProperty"
import {$StringProperty, $StringProperty$Type} from "packages/dev/ftb/mods/ftbteams/api/property/$StringProperty"
import {$ColorProperty, $ColorProperty$Type} from "packages/dev/ftb/mods/ftbteams/api/property/$ColorProperty"
import {$IntProperty, $IntProperty$Type} from "packages/dev/ftb/mods/ftbteams/api/property/$IntProperty"

export class $TeamProperties {
static readonly "DISPLAY_NAME": $StringProperty
static readonly "DESCRIPTION": $StringProperty
static readonly "COLOR": $ColorProperty
static readonly "FREE_TO_JOIN": $BooleanProperty
static readonly "MAX_MSG_HISTORY_SIZE": $IntProperty

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TeamProperties$Type = ($TeamProperties);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TeamProperties_ = $TeamProperties$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/quest/task/$KillTask" {
import {$Quest, $Quest$Type} from "packages/dev/ftb/mods/ftbquests/quest/$Quest"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$ConfigGroup, $ConfigGroup$Type} from "packages/dev/ftb/mods/ftblibrary/config/$ConfigGroup"
import {$Task, $Task$Type} from "packages/dev/ftb/mods/ftbquests/quest/task/$Task"
import {$TaskType, $TaskType$Type} from "packages/dev/ftb/mods/ftbquests/quest/task/$TaskType"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$Icon, $Icon$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Icon"
import {$TeamData, $TeamData$Type} from "packages/dev/ftb/mods/ftbquests/quest/$TeamData"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Button, $Button$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Button"

export class $KillTask extends $Task {
readonly "id": long

constructor(id: long, quest: $Quest$Type)

public "getType"(): $TaskType
public "readData"(nbt: $CompoundTag$Type): void
public "getAltIcon"(): $Icon
public "kill"(teamData: $TeamData$Type, e: $LivingEntity$Type): void
public "getMaxProgress"(): long
public "onButtonClicked"(button: $Button$Type, canClick: boolean): void
public "writeNetData"(buffer: $FriendlyByteBuf$Type): void
public "writeData"(nbt: $CompoundTag$Type): void
public "fillConfigGroup"(config: $ConfigGroup$Type): void
public "readNetData"(buffer: $FriendlyByteBuf$Type): void
get "type"(): $TaskType
get "altIcon"(): $Icon
get "maxProgress"(): long
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $KillTask$Type = ($KillTask);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $KillTask_ = $KillTask$Type;
}}
declare module "packages/dev/ftb/mods/ftbxmodcompat/forge/ftbquests/gamestages/$GameStagesEventHandlerQuests" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $GameStagesEventHandlerQuests {

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GameStagesEventHandlerQuests$Type = ($GameStagesEventHandlerQuests);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GameStagesEventHandlerQuests_ = $GameStagesEventHandlerQuests$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/sidebar/$SidebarGuiButton" {
import {$SidebarButton, $SidebarButton$Type} from "packages/dev/ftb/mods/ftblibrary/sidebar/$SidebarButton"

export class $SidebarGuiButton {
readonly "buttonX": integer
readonly "buttonY": integer
readonly "button": $SidebarButton
 "x": integer
 "y": integer

constructor(x: integer, y: integer, b: $SidebarButton$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SidebarGuiButton$Type = ($SidebarGuiButton);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SidebarGuiButton_ = $SidebarGuiButton$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/integration/forge/$JEIIntegration" {
import {$IGuiHandlerRegistration, $IGuiHandlerRegistration$Type} from "packages/mezz/jei/api/registration/$IGuiHandlerRegistration"
import {$IJeiConfigManager, $IJeiConfigManager$Type} from "packages/mezz/jei/api/runtime/config/$IJeiConfigManager"
import {$IAdvancedRegistration, $IAdvancedRegistration$Type} from "packages/mezz/jei/api/registration/$IAdvancedRegistration"
import {$IClickableIngredient, $IClickableIngredient$Type} from "packages/mezz/jei/api/runtime/$IClickableIngredient"
import {$IVanillaCategoryExtensionRegistration, $IVanillaCategoryExtensionRegistration$Type} from "packages/mezz/jei/api/registration/$IVanillaCategoryExtensionRegistration"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$IGlobalGuiHandler, $IGlobalGuiHandler$Type} from "packages/mezz/jei/api/gui/handlers/$IGlobalGuiHandler"
import {$IRecipeTransferRegistration, $IRecipeTransferRegistration$Type} from "packages/mezz/jei/api/registration/$IRecipeTransferRegistration"
import {$IRecipeRegistration, $IRecipeRegistration$Type} from "packages/mezz/jei/api/registration/$IRecipeRegistration"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$IJeiRuntime, $IJeiRuntime$Type} from "packages/mezz/jei/api/runtime/$IJeiRuntime"
import {$IRecipeCatalystRegistration, $IRecipeCatalystRegistration$Type} from "packages/mezz/jei/api/registration/$IRecipeCatalystRegistration"
import {$IModPlugin, $IModPlugin$Type} from "packages/mezz/jei/api/$IModPlugin"
import {$IRuntimeRegistration, $IRuntimeRegistration$Type} from "packages/mezz/jei/api/registration/$IRuntimeRegistration"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$IRecipeCategoryRegistration, $IRecipeCategoryRegistration$Type} from "packages/mezz/jei/api/registration/$IRecipeCategoryRegistration"
import {$IModIngredientRegistration, $IModIngredientRegistration$Type} from "packages/mezz/jei/api/registration/$IModIngredientRegistration"
import {$Rect2i, $Rect2i$Type} from "packages/net/minecraft/client/renderer/$Rect2i"
import {$ISubtypeRegistration, $ISubtypeRegistration$Type} from "packages/mezz/jei/api/registration/$ISubtypeRegistration"
import {$IPlatformFluidHelper, $IPlatformFluidHelper$Type} from "packages/mezz/jei/api/helpers/$IPlatformFluidHelper"

export class $JEIIntegration implements $IModPlugin, $IGlobalGuiHandler {
static "runtime": $IJeiRuntime

constructor()

public "getGuiExtraAreas"(): $Collection<($Rect2i)>
public "registerGuiHandlers"(registration: $IGuiHandlerRegistration$Type): void
public "getClickableIngredientUnderMouse"(mouseX: double, mouseY: double): $Optional<($IClickableIngredient<(any)>)>
public "getPluginUid"(): $ResourceLocation
public "onRuntimeAvailable"(r: $IJeiRuntime$Type): void
public "registerItemSubtypes"(arg0: $ISubtypeRegistration$Type): void
public "registerVanillaCategoryExtensions"(arg0: $IVanillaCategoryExtensionRegistration$Type): void
public "registerFluidSubtypes"<T>(arg0: $ISubtypeRegistration$Type, arg1: $IPlatformFluidHelper$Type<(T)>): void
public "onConfigManagerAvailable"(arg0: $IJeiConfigManager$Type): void
public "onRuntimeUnavailable"(): void
public "registerIngredients"(arg0: $IModIngredientRegistration$Type): void
public "registerRecipeTransferHandlers"(arg0: $IRecipeTransferRegistration$Type): void
public "registerRecipeCatalysts"(arg0: $IRecipeCatalystRegistration$Type): void
public "registerRecipes"(arg0: $IRecipeRegistration$Type): void
public "registerAdvanced"(arg0: $IAdvancedRegistration$Type): void
public "registerCategories"(arg0: $IRecipeCategoryRegistration$Type): void
public "registerRuntime"(arg0: $IRuntimeRegistration$Type): void
get "guiExtraAreas"(): $Collection<($Rect2i)>
get "pluginUid"(): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $JEIIntegration$Type = ($JEIIntegration);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $JEIIntegration_ = $JEIIntegration$Type;
}}
declare module "packages/dev/ftb/mods/ftbteams/api/event/$PlayerTransferredTeamOwnershipEvent" {
import {$TeamEvent, $TeamEvent$Type} from "packages/dev/ftb/mods/ftbteams/api/event/$TeamEvent"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$PlayerChangedTeamEvent, $PlayerChangedTeamEvent$Type} from "packages/dev/ftb/mods/ftbteams/api/event/$PlayerChangedTeamEvent"
import {$Event, $Event$Type} from "packages/dev/architectury/event/$Event"
import {$PlayerJoinedPartyTeamEvent, $PlayerJoinedPartyTeamEvent$Type} from "packages/dev/ftb/mods/ftbteams/api/event/$PlayerJoinedPartyTeamEvent"
import {$TeamPropertiesChangedEvent, $TeamPropertiesChangedEvent$Type} from "packages/dev/ftb/mods/ftbteams/api/event/$TeamPropertiesChangedEvent"
import {$TeamAllyEvent, $TeamAllyEvent$Type} from "packages/dev/ftb/mods/ftbteams/api/event/$TeamAllyEvent"
import {$PlayerLeftPartyTeamEvent, $PlayerLeftPartyTeamEvent$Type} from "packages/dev/ftb/mods/ftbteams/api/event/$PlayerLeftPartyTeamEvent"
import {$PartyTeam, $PartyTeam$Type} from "packages/dev/ftb/mods/ftbteams/data/$PartyTeam"
import {$TeamCreatedEvent, $TeamCreatedEvent$Type} from "packages/dev/ftb/mods/ftbteams/api/event/$TeamCreatedEvent"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$TeamInfoEvent, $TeamInfoEvent$Type} from "packages/dev/ftb/mods/ftbteams/api/event/$TeamInfoEvent"
import {$TeamCollectPropertiesEvent, $TeamCollectPropertiesEvent$Type} from "packages/dev/ftb/mods/ftbteams/api/event/$TeamCollectPropertiesEvent"
import {$GameProfile, $GameProfile$Type} from "packages/com/mojang/authlib/$GameProfile"
import {$PlayerLoggedInAfterTeamEvent, $PlayerLoggedInAfterTeamEvent$Type} from "packages/dev/ftb/mods/ftbteams/api/event/$PlayerLoggedInAfterTeamEvent"
import {$ClientTeamPropertiesChangedEvent, $ClientTeamPropertiesChangedEvent$Type} from "packages/dev/ftb/mods/ftbteams/api/event/$ClientTeamPropertiesChangedEvent"
import {$Team, $Team$Type} from "packages/dev/ftb/mods/ftbteams/api/$Team"

export class $PlayerTransferredTeamOwnershipEvent extends $TeamEvent {
static readonly "CREATED": $Event<($Consumer<($TeamCreatedEvent)>)>
static readonly "LOADED": $Event<($Consumer<($TeamEvent)>)>
static readonly "SAVED": $Event<($Consumer<($TeamEvent)>)>
static readonly "DELETED": $Event<($Consumer<($TeamEvent)>)>
static readonly "PLAYER_LOGGED_IN": $Event<($Consumer<($PlayerLoggedInAfterTeamEvent)>)>
static readonly "OWNERSHIP_TRANSFERRED": $Event<($Consumer<($PlayerTransferredTeamOwnershipEvent)>)>
static readonly "COLLECT_PROPERTIES": $Event<($Consumer<($TeamCollectPropertiesEvent)>)>
static readonly "PROPERTIES_CHANGED": $Event<($Consumer<($TeamPropertiesChangedEvent)>)>
static readonly "PLAYER_CHANGED": $Event<($Consumer<($PlayerChangedTeamEvent)>)>
static readonly "PLAYER_JOINED_PARTY": $Event<($Consumer<($PlayerJoinedPartyTeamEvent)>)>
static readonly "PLAYER_LEFT_PARTY": $Event<($Consumer<($PlayerLeftPartyTeamEvent)>)>
static readonly "INFO": $Event<($Consumer<($TeamInfoEvent)>)>
static readonly "ADD_ALLY": $Event<($Consumer<($TeamAllyEvent)>)>
static readonly "REMOVE_ALLY": $Event<($Consumer<($TeamAllyEvent)>)>
static readonly "CLIENT_PROPERTIES_CHANGED": $Event<($Consumer<($ClientTeamPropertiesChangedEvent)>)>

constructor(team: $Team$Type, prevOwner: $ServerPlayer$Type, newOwner: $ServerPlayer$Type)
constructor(t: $PartyTeam$Type, from: $ServerPlayer$Type, toProfile: $GameProfile$Type)

public "getFrom"(): $ServerPlayer
public "getToProfile"(): $GameProfile
public "getTo"(): $ServerPlayer
get "from"(): $ServerPlayer
get "toProfile"(): $GameProfile
get "to"(): $ServerPlayer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PlayerTransferredTeamOwnershipEvent$Type = ($PlayerTransferredTeamOwnershipEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PlayerTransferredTeamOwnershipEvent_ = $PlayerTransferredTeamOwnershipEvent$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/ui/$PanelScrollBar" {
import {$Panel, $Panel$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Panel"
import {$ScrollBar, $ScrollBar$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$ScrollBar"
import {$ScrollBar$Plane, $ScrollBar$Plane$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$ScrollBar$Plane"

export class $PanelScrollBar extends $ScrollBar {
 "posX": integer
 "posY": integer
 "width": integer
 "height": integer

constructor(parent: $Panel$Type, plane: $ScrollBar$Plane$Type, p: $Panel$Type)
constructor(parent: $Panel$Type, panel: $Panel$Type)

public "isEnabled"(): boolean
public "getScrollStep"(): double
public "setScrollStep"(s: double): void
public "shouldDraw"(): boolean
public "onMoved"(): void
public "setMinValue"(min: double): void
public "setMaxValue"(max: double): void
public "getMinValue"(): double
public "getMaxValue"(): double
public "getScrollBarSize"(): integer
public "canMouseScroll"(): boolean
public "getPanel"(): $Panel
get "enabled"(): boolean
get "scrollStep"(): double
set "scrollStep"(value: double)
set "minValue"(value: double)
set "maxValue"(value: double)
get "minValue"(): double
get "maxValue"(): double
get "scrollBarSize"(): integer
get "panel"(): $Panel
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PanelScrollBar$Type = ($PanelScrollBar);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PanelScrollBar_ = $PanelScrollBar$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/quest/$DependencyLoopException" {
import {$QuestObject, $QuestObject$Type} from "packages/dev/ftb/mods/ftbquests/quest/$QuestObject"
import {$RuntimeException, $RuntimeException$Type} from "packages/java/lang/$RuntimeException"

export class $DependencyLoopException extends $RuntimeException {
readonly "object": $QuestObject

constructor(o: $QuestObject$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DependencyLoopException$Type = ($DependencyLoopException);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DependencyLoopException_ = $DependencyLoopException$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/icon/$Color4I" {
import {$JsonElement, $JsonElement$Type} from "packages/com/google/gson/$JsonElement"
import {$MutableColor4I, $MutableColor4I$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$MutableColor4I"
import {$Icon, $Icon$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Icon"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$PixelBuffer, $PixelBuffer$Type} from "packages/dev/ftb/mods/ftblibrary/math/$PixelBuffer"
import {$Style, $Style$Type} from "packages/net/minecraft/network/chat/$Style"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$ChatFormatting, $ChatFormatting$Type} from "packages/net/minecraft/$ChatFormatting"

export class $Color4I extends $Icon {
static readonly "BLACK": $Color4I
static readonly "DARK_GRAY": $Color4I
static readonly "GRAY": $Color4I
static readonly "WHITE": $Color4I
static readonly "RED": $Color4I
static readonly "GREEN": $Color4I
static readonly "BLUE": $Color4I
static readonly "LIGHT_RED": $Color4I
static readonly "LIGHT_GREEN": $Color4I
static readonly "LIGHT_BLUE": $Color4I


public "equals"(o: any): boolean
public "toString"(): string
public "hashCode"(): integer
public static "fromString"(s: string): $Color4I
public static "fromJson"(element: $JsonElement$Type): $Color4I
public "greenf"(): float
public "draw"(graphics: $GuiGraphics$Type, x: integer, y: integer, w: integer, h: integer): void
public "redf"(): float
public "bluef"(): float
public "redi"(): integer
public "greeni"(): integer
public "bluei"(): integer
public "hasPixelBuffer"(): boolean
public static "hsb"(h: float, s: float, b: float): $Color4I
public "createPixelBuffer"(): $PixelBuffer
public static "get256"(id: integer): $Color4I
public "toStyle"(): $Style
public "alphaf"(): float
public "alphai"(): integer
public "whiteIfEmpty"(): $Color4I
public "withAlphaf"(alpha: float): $Color4I
public "withColor"(color: $Color4I$Type): $Icon
public static "getChatFormattingColor"(id: integer): $Color4I
public static "getChatFormattingColor"(formatting: $ChatFormatting$Type): $Color4I
public static "HSBtoRGB"(hue: float, saturation: float, brightness: float): integer
public static "rgb"(color: $Vec3$Type): $Color4I
public static "rgb"(col: integer): $Color4I
public "rgb"(): integer
public static "rgb"(r: integer, g: integer, b: integer): $Color4I
public static "rgba"(col: integer): $Color4I
public static "rgba"(r: integer, g: integer, b: integer, a: integer): $Color4I
public "rgba"(): integer
public static "RGBtoHSB"(r: integer, g: integer, b: integer, hsbvals: (float)[]): (float)[]
public "addBrightness"(percent: float): $Color4I
public "getJson"(): $JsonElement
public "withAlpha"(a: integer): $Color4I
public "lerp"(col: $Color4I$Type, m: float): $Color4I
public "isMutable"(): boolean
public "mutable"(): $MutableColor4I
get "json"(): $JsonElement
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Color4I$Type = ($Color4I);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Color4I_ = $Color4I$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/net/$EditNBTResponsePacket" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$NetworkManager$PacketContext, $NetworkManager$PacketContext$Type} from "packages/dev/architectury/networking/$NetworkManager$PacketContext"
import {$BaseC2SMessage, $BaseC2SMessage$Type} from "packages/dev/architectury/networking/simple/$BaseC2SMessage"
import {$MessageType, $MessageType$Type} from "packages/dev/architectury/networking/simple/$MessageType"

export class $EditNBTResponsePacket extends $BaseC2SMessage {

constructor(buf: $FriendlyByteBuf$Type)
constructor(i: $CompoundTag$Type, t: $CompoundTag$Type)

public "write"(buf: $FriendlyByteBuf$Type): void
public "getType"(): $MessageType
public "handle"(context: $NetworkManager$PacketContext$Type): void
get "type"(): $MessageType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EditNBTResponsePacket$Type = ($EditNBTResponsePacket);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EditNBTResponsePacket_ = $EditNBTResponsePacket$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/quest/loot/$WeightedReward" {
import {$Comparable, $Comparable$Type} from "packages/java/lang/$Comparable"
import {$Reward, $Reward$Type} from "packages/dev/ftb/mods/ftbquests/quest/reward/$Reward"

export class $WeightedReward implements $Comparable<($WeightedReward)> {

constructor(reward: $Reward$Type, weight: float)

public "compareTo"(o: $WeightedReward$Type): integer
public "getReward"(): $Reward
public "getWeight"(): float
public "setWeight"(weight: float): void
public static "chanceString"(weight: float, totalWeight: float, empty: boolean): string
public static "chanceString"(weight: float, totalWeight: float): string
get "reward"(): $Reward
get "weight"(): float
set "weight"(value: float)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WeightedReward$Type = ($WeightedReward);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WeightedReward_ = $WeightedReward$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/config/$ConfigFromString" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Widget, $Widget$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Widget"
import {$ConfigCallback, $ConfigCallback$Type} from "packages/dev/ftb/mods/ftblibrary/config/$ConfigCallback"
import {$ConfigValue, $ConfigValue$Type} from "packages/dev/ftb/mods/ftblibrary/config/$ConfigValue"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$MouseButton, $MouseButton$Type} from "packages/dev/ftb/mods/ftblibrary/ui/input/$MouseButton"

export class $ConfigFromString<T> extends $ConfigValue<(T)> {
static readonly "NULL_TEXT": $Component
 "id": string

constructor()

public "parse"(arg0: $Consumer$Type<(T)>, arg1: string): boolean
public "canScroll"(): boolean
public "getStringForGUI"(v: T): $Component
public "scrollValue"(currentValue: T, forward: boolean): $Optional<(T)>
public "getStringFromValue"(v: T): string
public "onClicked"(clicked: $Widget$Type, button: $MouseButton$Type, callback: $ConfigCallback$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ConfigFromString$Type<T> = ($ConfigFromString<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ConfigFromString_<T> = $ConfigFromString$Type<(T)>;
}}
declare module "packages/dev/ftb/mods/ftbquests/client/gui/quests/$TabButton" {
import {$Panel, $Panel$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Panel"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Icon, $Icon$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Icon"
import {$Theme, $Theme$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Theme"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$Button, $Button$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Button"

export class $TabButton extends $Button {
 "posX": integer
 "posY": integer
 "width": integer
 "height": integer

constructor(panel: $Panel$Type, title: $Component$Type, icon: $Icon$Type)

public "draw"(graphics: $GuiGraphics$Type, theme: $Theme$Type, x: integer, y: integer, w: integer, h: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TabButton$Type = ($TabButton);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TabButton_ = $TabButton$Type;
}}
declare module "packages/dev/ftb/mods/ftbteams/api/property/$ColorProperty" {
import {$Color4I, $Color4I$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Color4I"
import {$ConfigGroup, $ConfigGroup$Type} from "packages/dev/ftb/mods/ftblibrary/config/$ConfigGroup"
import {$TeamPropertyType, $TeamPropertyType$Type} from "packages/dev/ftb/mods/ftbteams/api/property/$TeamPropertyType"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$TeamProperty, $TeamProperty$Type} from "packages/dev/ftb/mods/ftbteams/api/property/$TeamProperty"
import {$TeamPropertyValue, $TeamPropertyValue$Type} from "packages/dev/ftb/mods/ftbteams/api/property/$TeamPropertyValue"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $ColorProperty extends $TeamProperty<($Color4I)> {

constructor(id: $ResourceLocation$Type, def: $Supplier$Type<($Color4I$Type)>)
constructor(id: $ResourceLocation$Type, def: $Color4I$Type)

public "toString"(value: $Color4I$Type): string
public "write"(buf: $FriendlyByteBuf$Type): void
public "getType"(): $TeamPropertyType<($Color4I)>
public "config"(config: $ConfigGroup$Type, value: $TeamPropertyValue$Type<($Color4I$Type)>): void
public "fromString"(string: string): $Optional<($Color4I)>
get "type"(): $TeamPropertyType<($Color4I)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ColorProperty$Type = ($ColorProperty);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ColorProperty_ = $ColorProperty$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/command/$QuestObjectArgument" {
import {$QuestObjectBase, $QuestObjectBase$Type} from "packages/dev/ftb/mods/ftbquests/quest/$QuestObjectBase"
import {$Suggestions, $Suggestions$Type} from "packages/com/mojang/brigadier/suggestion/$Suggestions"
import {$StringReader, $StringReader$Type} from "packages/com/mojang/brigadier/$StringReader"
import {$CompletableFuture, $CompletableFuture$Type} from "packages/java/util/concurrent/$CompletableFuture"
import {$SimpleCommandExceptionType, $SimpleCommandExceptionType$Type} from "packages/com/mojang/brigadier/exceptions/$SimpleCommandExceptionType"
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$SuggestionsBuilder, $SuggestionsBuilder$Type} from "packages/com/mojang/brigadier/suggestion/$SuggestionsBuilder"
import {$ArgumentType, $ArgumentType$Type} from "packages/com/mojang/brigadier/arguments/$ArgumentType"
import {$DynamicCommandExceptionType, $DynamicCommandExceptionType$Type} from "packages/com/mojang/brigadier/exceptions/$DynamicCommandExceptionType"
import {$CommandContext, $CommandContext$Type} from "packages/com/mojang/brigadier/context/$CommandContext"

export class $QuestObjectArgument implements $ArgumentType<($QuestObjectBase)> {
static readonly "NO_FILE": $SimpleCommandExceptionType
static readonly "NO_OBJECT": $DynamicCommandExceptionType
static readonly "INVALID_ID": $DynamicCommandExceptionType

constructor()
constructor(filter: $Predicate$Type<($QuestObjectBase$Type)>)

public "parse"(reader: $StringReader$Type): $QuestObjectBase
public "getExamples"(): $Collection<(string)>
public "listSuggestions"<S>(context: $CommandContext$Type<(S)>, builder: $SuggestionsBuilder$Type): $CompletableFuture<($Suggestions)>
public static "questObject"(filter: $Predicate$Type<($QuestObjectBase$Type)>): $QuestObjectArgument
public static "questObject"(): $QuestObjectArgument
get "examples"(): $Collection<(string)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $QuestObjectArgument$Type = ($QuestObjectArgument);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $QuestObjectArgument_ = $QuestObjectArgument$Type;
}}
declare module "packages/dev/ftb/mods/ftbxmodcompat/forge/ftbchunks/waystones/$WaystonesCompat" {
import {$KnownWaystonesEvent, $KnownWaystonesEvent$Type} from "packages/net/blay09/mods/waystones/api/$KnownWaystonesEvent"

export class $WaystonesCompat {

constructor()

public static "init"(): void
public static "onKnownWaystones"(event: $KnownWaystonesEvent$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WaystonesCompat$Type = ($WaystonesCompat);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WaystonesCompat_ = $WaystonesCompat$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/util/client/$ClientTextComponentUtils" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$CustomComponentParser, $CustomComponentParser$Type} from "packages/dev/ftb/mods/ftblibrary/util/$CustomComponentParser"

export class $ClientTextComponentUtils {

constructor()

public static "addCustomParser"(arg0: $CustomComponentParser$Type): void
public static "parse"(s: string): $Component
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientTextComponentUtils$Type = ($ClientTextComponentUtils);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientTextComponentUtils_ = $ClientTextComponentUtils$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/$FTBLibraryCommands" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$CommandSourceStack, $CommandSourceStack$Type} from "packages/net/minecraft/commands/$CommandSourceStack"
import {$CommandBuildContext, $CommandBuildContext$Type} from "packages/net/minecraft/commands/$CommandBuildContext"
import {$Commands$CommandSelection, $Commands$CommandSelection$Type} from "packages/net/minecraft/commands/$Commands$CommandSelection"
import {$CommandDispatcher, $CommandDispatcher$Type} from "packages/com/mojang/brigadier/$CommandDispatcher"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $FTBLibraryCommands {
static readonly "EDITING_NBT": $Map<($UUID), ($CompoundTag)>

constructor()

public static "registerCommands"(dispatcher: $CommandDispatcher$Type<($CommandSourceStack$Type)>, commandBuildContext: $CommandBuildContext$Type, type: $Commands$CommandSelection$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FTBLibraryCommands$Type = ($FTBLibraryCommands);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FTBLibraryCommands_ = $FTBLibraryCommands$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/util/$KnownServerRegistries$AdvancementInfo" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $KnownServerRegistries$AdvancementInfo {
 "id": $ResourceLocation
 "name": $Component
 "icon": $ItemStack

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $KnownServerRegistries$AdvancementInfo$Type = ($KnownServerRegistries$AdvancementInfo);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $KnownServerRegistries$AdvancementInfo_ = $KnownServerRegistries$AdvancementInfo$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/icon/$Icons" {
import {$Icon, $Icon$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Icon"

export interface $Icons {

}

export namespace $Icons {
const BLUE_BUTTON: $Icon
const UP: $Icon
const DOWN: $Icon
const LEFT: $Icon
const RIGHT: $Icon
const ACCEPT: $Icon
const ADD: $Icon
const REMOVE: $Icon
const INFO: $Icon
const ACCEPT_GRAY: $Icon
const ADD_GRAY: $Icon
const REMOVE_GRAY: $Icon
const INFO_GRAY: $Icon
const SETTINGS: $Icon
const SETTINGS_RED: $Icon
const CANCEL: $Icon
const BACK: $Icon
const CLOSE: $Icon
const REFRESH: $Icon
const PLAYER: $Icon
const PLAYER_GRAY: $Icon
const ONLINE: $Icon
const SORT_AZ: $Icon
const FRIENDS: $Icon
const BUG: $Icon
const JACKET: $Icon
const BED: $Icon
const BELL: $Icon
const COMPASS: $Icon
const MAP: $Icon
const SHIELD: $Icon
const ART: $Icon
const MONEY_BAG: $Icon
const CONTROLLER: $Icon
const FEATHER: $Icon
const CAMERA: $Icon
const INV_IO: $Icon
const INV_IN: $Icon
const INV_OUT: $Icon
const INV_NONE: $Icon
const RS_NONE: $Icon
const RS_HIGH: $Icon
const RS_LOW: $Icon
const RS_PULSE: $Icon
const SECURITY_PUBLIC: $Icon
const SECURITY_PRIVATE: $Icon
const SECURITY_TEAM: $Icon
const COLOR_BLANK: $Icon
const COLOR_HSB: $Icon
const COLOR_RGB: $Icon
const ONLINE_RED: $Icon
const NOTES: $Icon
const CHAT: $Icon
const BIN: $Icon
const MARKER: $Icon
const BEACON: $Icon
const DICE: $Icon
const DIAMOND: $Icon
const TIME: $Icon
const GLOBE: $Icon
const MONEY: $Icon
const CHECK: $Icon
const STAR: $Icon
const HEART: $Icon
const BOOK: $Icon
const BOOK_RED: $Icon
const BARRIER: $Icon
const TOGGLE_GAMEMODE: $Icon
const TOGGLE_RAIN: $Icon
const TOGGLE_DAY: $Icon
const TOGGLE_NIGHT: $Icon
const LOCK: $Icon
const LOCK_OPEN: $Icon
const SUPPORT: $Icon
function get(id: string): $Icon
function getImage(id: string): $Icon
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Icons$Type = ($Icons);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Icons_ = $Icons$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/icon/$ImageIcon" {
import {$Color4I, $Color4I$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Color4I"
import {$IResourceIcon, $IResourceIcon$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$IResourceIcon"
import {$Icon, $Icon$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Icon"
import {$PixelBuffer, $PixelBuffer$Type} from "packages/dev/ftb/mods/ftblibrary/math/$PixelBuffer"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $ImageIcon extends $Icon implements $IResourceIcon {
static readonly "MISSING_IMAGE": $ResourceLocation
readonly "texture": $ResourceLocation
 "minU": float
 "minV": float
 "maxU": float
 "maxV": float
 "tileSize": double
 "color": $Color4I

constructor(tex: $ResourceLocation$Type)

public "equals"(o: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "copy"(): $ImageIcon
public "draw"(graphics: $GuiGraphics$Type, x: integer, y: integer, w: integer, h: integer): void
public "withUV"(u0: float, v0: float, u1: float, v1: float): $ImageIcon
public "hasPixelBuffer"(): boolean
public "createPixelBuffer"(): $PixelBuffer
public "withColor"(color: $Color4I$Type): $ImageIcon
public "getResourceLocation"(): $ResourceLocation
public "bindTexture"(): void
public "withTint"(c: $Color4I$Type): $ImageIcon
get "resourceLocation"(): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ImageIcon$Type = ($ImageIcon);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ImageIcon_ = $ImageIcon$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/quest/$TeamData" {
import {$Quest, $Quest$Type} from "packages/dev/ftb/mods/ftbquests/quest/$Quest"
import {$BaseQuestFile, $BaseQuestFile$Type} from "packages/dev/ftb/mods/ftbquests/quest/$BaseQuestFile"
import {$Task, $Task$Type} from "packages/dev/ftb/mods/ftbquests/quest/task/$Task"
import {$Date, $Date$Type} from "packages/java/util/$Date"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$SNBTCompoundTag, $SNBTCompoundTag$Type} from "packages/dev/ftb/mods/ftblibrary/snbt/$SNBTCompoundTag"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$LongSet, $LongSet$Type} from "packages/it/unimi/dsi/fastutil/longs/$LongSet"
import {$QuestObject, $QuestObject$Type} from "packages/dev/ftb/mods/ftbquests/quest/$QuestObject"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$Reward, $Reward$Type} from "packages/dev/ftb/mods/ftbquests/quest/reward/$Reward"
import {$RewardClaimType, $RewardClaimType$Type} from "packages/dev/ftb/mods/ftbquests/quest/reward/$RewardClaimType"

export class $TeamData {
static readonly "VERSION": integer
static readonly "AUTO_PIN_ID": integer

constructor(teamId: $UUID$Type, file: $BaseQuestFile$Type)
constructor(teamId: $UUID$Type, file: $BaseQuestFile$Type, name: string)

public "getName"(): string
public static "get"(player: $Player$Type): $TeamData
public "toString"(): string
public "write"(buffer: $FriendlyByteBuf$Type, self: boolean): void
public "read"(buffer: $FriendlyByteBuf$Type, self: boolean): void
public "setName"(name: string): void
public "getFile"(): $BaseQuestFile
public "isLocked"(): boolean
public "setCompleted"(id: long, time: $Date$Type): boolean
public "isCompleted"(object: $QuestObject$Type): boolean
public "copyData"(from: $TeamData$Type): void
public "getStartedTime"(questId: long): $Optional<($Date)>
public "areRewardsBlocked"(): boolean
public "getCompletedTime"(questId: long): $Optional<($Date)>
public "setRewardsBlocked"(rewardsBlocked: boolean): boolean
public "getRewardClaimTime"(player: $UUID$Type, reward: $Reward$Type): $Optional<($Date)>
public "getProgress"(task: $Task$Type): long
public "getProgress"(taskId: long): long
public "setCanEdit"(player: $Player$Type, newCanEdit: boolean): boolean
public "setLocked"(newLocked: boolean): boolean
public "isQuestPinned"(player: $Player$Type, id: long): boolean
public "markDirty"(): void
public "getPinnedQuestIds"(player: $Player$Type): $LongSet
public "clearCachedProgress"(): void
public "mergeClaimedRewards"(from: $TeamData$Type): void
public "getRelativeProgress"(object: $QuestObject$Type): integer
public "hasUnclaimedRewards"(player: $UUID$Type, object: $QuestObject$Type): boolean
public "checkAutoCompletion"(quest: $Quest$Type): void
public "areDependenciesComplete"(quest: $Quest$Type): boolean
public "isChapterPinned"(player: $Player$Type): boolean
public "setChapterPinned"(player: $Player$Type, pinned: boolean): void
public "setQuestPinned"(player: $Player$Type, id: long, pinned: boolean): void
public "claimReward"(player: $UUID$Type, reward: $Reward$Type, date: long): boolean
public "claimReward"(player: $ServerPlayer$Type, reward: $Reward$Type, notify: boolean): void
public "resetReward"(player: $UUID$Type, reward: $Reward$Type): boolean
public "deleteReward"(reward: $Reward$Type): void
public "isStarted"(object: $QuestObject$Type): boolean
public "setStarted"(questId: long, time: $Date$Type): boolean
public "getTeamId"(): $UUID
public "saveIfChanged"(): void
public "canStartTasks"(quest: $Quest$Type): boolean
public "getOnlineMembers"(): $Collection<($ServerPlayer)>
public "mergeData"(from: $TeamData$Type): void
public "getClaimType"(player: $UUID$Type, reward: $Reward$Type): $RewardClaimType
public "isRewardBlocked"(reward: $Reward$Type): boolean
public "resetProgress"(task: $Task$Type): void
public "markTaskCompleted"(task: $Task$Type): void
public "isRewardClaimed"(player: $UUID$Type, reward: $Reward$Type): boolean
public "addProgress"(task: $Task$Type, progress: long): void
public "getCanEdit"(player: $Player$Type): boolean
public "setProgress"(task: $Task$Type, progress: long): void
public "deserializeNBT"(nbt: $SNBTCompoundTag$Type): void
public "serializeNBT"(): $SNBTCompoundTag
get "name"(): string
set "name"(value: string)
get "file"(): $BaseQuestFile
get "locked"(): boolean
set "rewardsBlocked"(value: boolean)
set "locked"(value: boolean)
get "teamId"(): $UUID
get "onlineMembers"(): $Collection<($ServerPlayer)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TeamData$Type = ($TeamData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TeamData_ = $TeamData$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/snbt/config/$StringValue" {
import {$ConfigGroup, $ConfigGroup$Type} from "packages/dev/ftb/mods/ftblibrary/config/$ConfigGroup"
import {$SNBTConfig, $SNBTConfig$Type} from "packages/dev/ftb/mods/ftblibrary/snbt/config/$SNBTConfig"
import {$SNBTCompoundTag, $SNBTCompoundTag$Type} from "packages/dev/ftb/mods/ftblibrary/snbt/$SNBTCompoundTag"
import {$Pattern, $Pattern$Type} from "packages/java/util/regex/$Pattern"
import {$BaseValue, $BaseValue$Type} from "packages/dev/ftb/mods/ftblibrary/snbt/config/$BaseValue"

export class $StringValue extends $BaseValue<(string)> {
readonly "parent": $SNBTConfig
readonly "key": string
readonly "defaultValue": T


public "set"(v: string): void
public "write"(tag: $SNBTCompoundTag$Type): void
public "read"(tag: $SNBTCompoundTag$Type): void
public "pattern"(p: $Pattern$Type): $StringValue
public "createClientConfig"(group: $ConfigGroup$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $StringValue$Type = ($StringValue);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $StringValue_ = $StringValue$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/client/gui/$QuestObjectUpdateListener" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $QuestObjectUpdateListener {

 "onQuestObjectUpdate"(arg0: any): void

(arg0: any): void
}

export namespace $QuestObjectUpdateListener {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $QuestObjectUpdateListener$Type = ($QuestObjectUpdateListener);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $QuestObjectUpdateListener_ = $QuestObjectUpdateListener$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/config/ui/$ResourceSelectorScreen" {
import {$AbstractThreePanelScreen, $AbstractThreePanelScreen$Type} from "packages/dev/ftb/mods/ftblibrary/ui/misc/$AbstractThreePanelScreen"
import {$Widget, $Widget$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Widget"
import {$ConfigCallback, $ConfigCallback$Type} from "packages/dev/ftb/mods/ftblibrary/config/$ConfigCallback"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Theme, $Theme$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Theme"
import {$Key, $Key$Type} from "packages/dev/ftb/mods/ftblibrary/ui/input/$Key"
import {$Pair, $Pair$Type} from "packages/com/mojang/datafixers/util/$Pair"
import {$ResourceConfigValue, $ResourceConfigValue$Type} from "packages/dev/ftb/mods/ftblibrary/config/$ResourceConfigValue"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$ResourceSelectorScreen$StacksPanel, $ResourceSelectorScreen$StacksPanel$Type} from "packages/dev/ftb/mods/ftblibrary/config/ui/$ResourceSelectorScreen$StacksPanel"

export class $ResourceSelectorScreen<T> extends $AbstractThreePanelScreen<($ResourceSelectorScreen$StacksPanel<>)> {
 "update": long
static readonly "NO_INSET": $Pair<(integer), (integer)>
 "posX": integer
 "posY": integer
 "width": integer
 "height": integer

constructor(config: $ResourceConfigValue$Type<(T)>, callback: $ConfigCallback$Type)

public "tick"(): void
public "drawForeground"(graphics: $GuiGraphics$Type, theme: $Theme$Type, x: integer, y: integer, w: integer, h: integer): void
public "keyPressed"(key: $Key$Type): boolean
public "onInit"(): boolean
public "makeResourceWidgets"(search: string): $List<($Widget)>
public "drawBackground"(graphics: $GuiGraphics$Type, theme: $Theme$Type, x: integer, y: integer, w: integer, h: integer): void
public "withGridSize"(rows: integer, cols: integer): $ResourceSelectorScreen<(T)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ResourceSelectorScreen$Type<T> = ($ResourceSelectorScreen<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ResourceSelectorScreen_<T> = $ResourceSelectorScreen$Type<(T)>;
}}
declare module "packages/dev/ftb/mods/ftbteams/api/property/$TeamPropertyArgument$Info$Template" {
import {$ArgumentTypeInfo, $ArgumentTypeInfo$Type} from "packages/net/minecraft/commands/synchronization/$ArgumentTypeInfo"
import {$CommandBuildContext, $CommandBuildContext$Type} from "packages/net/minecraft/commands/$CommandBuildContext"
import {$TeamPropertyArgument, $TeamPropertyArgument$Type} from "packages/dev/ftb/mods/ftbteams/api/property/$TeamPropertyArgument"
import {$TeamPropertyArgument$Info, $TeamPropertyArgument$Info$Type} from "packages/dev/ftb/mods/ftbteams/api/property/$TeamPropertyArgument$Info"
import {$ArgumentTypeInfo$Template, $ArgumentTypeInfo$Template$Type} from "packages/net/minecraft/commands/synchronization/$ArgumentTypeInfo$Template"

export class $TeamPropertyArgument$Info$Template implements $ArgumentTypeInfo$Template<($TeamPropertyArgument)> {

constructor(this$0: $TeamPropertyArgument$Info$Type)

public "instantiate"(commandBuildContext: $CommandBuildContext$Type): $TeamPropertyArgument
public "type"(): $ArgumentTypeInfo<($TeamPropertyArgument), (any)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TeamPropertyArgument$Info$Template$Type = ($TeamPropertyArgument$Info$Template);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TeamPropertyArgument$Info$Template_ = $TeamPropertyArgument$Info$Template$Type;
}}
declare module "packages/dev/ftb/mods/ftbxmodcompat/ftbquests/recipemod_common/$BaseRecipeHelper" {
import {$QuestObjectBase, $QuestObjectBase$Type} from "packages/dev/ftb/mods/ftbquests/quest/$QuestObjectBase"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$RecipeModHelper$Components, $RecipeModHelper$Components$Type} from "packages/dev/ftb/mods/ftbquests/integration/$RecipeModHelper$Components"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$RecipeModHelper, $RecipeModHelper$Type} from "packages/dev/ftb/mods/ftbquests/integration/$RecipeModHelper"

export class $BaseRecipeHelper implements $RecipeModHelper {

constructor()

public "refreshAll"(component: $RecipeModHelper$Components$Type): void
public "refreshRecipes"(object: $QuestObjectBase$Type): void
public "isRecipeModAvailable"(): boolean
public "showRecipes"(arg0: $ItemStack$Type): void
public "updateItemsDynamic"(toRemove: $Collection$Type<($ItemStack$Type)>, toAdd: $Collection$Type<($ItemStack$Type)>): void
public "getHelperName"(): string
get "recipeModAvailable"(): boolean
get "helperName"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BaseRecipeHelper$Type = ($BaseRecipeHelper);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BaseRecipeHelper_ = $BaseRecipeHelper$Type;
}}
declare module "packages/dev/ftb/mods/ftbxmodcompat/generic/permissions/$PermissionsSetup" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $PermissionsSetup {

constructor()

public static "init"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PermissionsSetup$Type = ($PermissionsSetup);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PermissionsSetup_ = $PermissionsSetup$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/quest/theme/property/$StringProperty" {
import {$ThemeProperty, $ThemeProperty$Type} from "packages/dev/ftb/mods/ftbquests/quest/theme/property/$ThemeProperty"

export class $StringProperty extends $ThemeProperty<(string)> {

constructor(n: string)

public "parse"(string: string): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $StringProperty$Type = ($StringProperty);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $StringProperty_ = $StringProperty$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/config/$FluidConfig" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Widget, $Widget$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Widget"
import {$OptionalLong, $OptionalLong$Type} from "packages/java/util/$OptionalLong"
import {$ConfigCallback, $ConfigCallback$Type} from "packages/dev/ftb/mods/ftblibrary/config/$ConfigCallback"
import {$MouseButton, $MouseButton$Type} from "packages/dev/ftb/mods/ftblibrary/ui/input/$MouseButton"
import {$ResourceConfigValue, $ResourceConfigValue$Type} from "packages/dev/ftb/mods/ftblibrary/config/$ResourceConfigValue"
import {$FluidStack, $FluidStack$Type} from "packages/dev/architectury/fluid/$FluidStack"
import {$SelectableResource, $SelectableResource$Type} from "packages/dev/ftb/mods/ftblibrary/config/ui/$SelectableResource"

export class $FluidConfig extends $ResourceConfigValue<($FluidStack)> {
static readonly "NULL_TEXT": $Component
 "id": string

constructor(allowEmpty: boolean)
constructor(fixedSize: long)

public "isEmpty"(): boolean
public "getResource"(): $SelectableResource<($FluidStack)>
public "showAmount"(show: boolean): $FluidConfig
public "getStringForGUI"(v: $FluidStack$Type): $Component
public "onClicked"(clickedWidget: $Widget$Type, button: $MouseButton$Type, callback: $ConfigCallback$Type): void
public "allowEmptyResource"(): boolean
public "setResource"(selectedStack: $SelectableResource$Type<($FluidStack$Type)>): boolean
public "fixedResourceSize"(): $OptionalLong
get "empty"(): boolean
get "resource"(): $SelectableResource<($FluidStack)>
set "resource"(value: $SelectableResource$Type<($FluidStack$Type)>)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FluidConfig$Type = ($FluidConfig);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FluidConfig_ = $FluidConfig$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/config/$LongConfig" {
import {$Color4I, $Color4I$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Color4I"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$NumberConfig, $NumberConfig$Type} from "packages/dev/ftb/mods/ftblibrary/config/$NumberConfig"
import {$TooltipList, $TooltipList$Type} from "packages/dev/ftb/mods/ftblibrary/util/$TooltipList"

export class $LongConfig extends $NumberConfig<(long)> {
static readonly "COLOR": $Color4I
readonly "min": T
readonly "max": T
 "fader": boolean
static readonly "NULL_TEXT": $Component
 "id": string

constructor(mn: long, mx: long)

public "parse"(callback: $Consumer$Type<(long)>, string: string): boolean
public "scrollValue"(currentValue: long, forward: boolean): $Optional<(long)>
public "addInfo"(list: $TooltipList$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LongConfig$Type = ($LongConfig);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LongConfig_ = $LongConfig$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/block/entity/$TaskScreenAuxBlockEntity" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$TaskScreenBlockEntity, $TaskScreenBlockEntity$Type} from "packages/dev/ftb/mods/ftbquests/block/entity/$TaskScreenBlockEntity"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$ITaskScreen, $ITaskScreen$Type} from "packages/dev/ftb/mods/ftbquests/block/entity/$ITaskScreen"
import {$Nameable, $Nameable$Type} from "packages/net/minecraft/world/$Nameable"

export class $TaskScreenAuxBlockEntity extends $BlockEntity implements $ITaskScreen, $Nameable {
 "blockState": $BlockState

constructor(blockPos: $BlockPos$Type, blockState: $BlockState$Type)

public "setCoreScreen"(coreScreen: $TaskScreenBlockEntity$Type): void
public "getName"(): $Component
public "getSkin"(): $ItemStack
public "getCoreScreen"(): $Optional<($TaskScreenBlockEntity)>
public "isInputOnly"(): boolean
public "isIndestructible"(): boolean
public "load"(compoundTag: $CompoundTag$Type): void
public "getTeamId"(): $UUID
public "getDisplayName"(): $Component
public "hasCustomName"(): boolean
public "getCustomName"(): $Component
set "coreScreen"(value: $TaskScreenBlockEntity$Type)
get "name"(): $Component
get "skin"(): $ItemStack
get "coreScreen"(): $Optional<($TaskScreenBlockEntity)>
get "inputOnly"(): boolean
get "indestructible"(): boolean
get "teamId"(): $UUID
get "displayName"(): $Component
get "customName"(): $Component
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TaskScreenAuxBlockEntity$Type = ($TaskScreenAuxBlockEntity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TaskScreenAuxBlockEntity_ = $TaskScreenAuxBlockEntity$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/net/$ToggleChapterPinnedMessage" {
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$NetworkManager$PacketContext, $NetworkManager$PacketContext$Type} from "packages/dev/architectury/networking/$NetworkManager$PacketContext"
import {$BaseC2SMessage, $BaseC2SMessage$Type} from "packages/dev/architectury/networking/simple/$BaseC2SMessage"
import {$MessageType, $MessageType$Type} from "packages/dev/architectury/networking/simple/$MessageType"

export class $ToggleChapterPinnedMessage extends $BaseC2SMessage {

constructor()
constructor(buf: $FriendlyByteBuf$Type)

public "write"(buf: $FriendlyByteBuf$Type): void
public "getType"(): $MessageType
public "handle"(context: $NetworkManager$PacketContext$Type): void
get "type"(): $MessageType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ToggleChapterPinnedMessage$Type = ($ToggleChapterPinnedMessage);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ToggleChapterPinnedMessage_ = $ToggleChapterPinnedMessage$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/icon/$HollowRectangleIcon" {
import {$Color4I, $Color4I$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Color4I"
import {$JsonElement, $JsonElement$Type} from "packages/com/google/gson/$JsonElement"
import {$Icon, $Icon$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Icon"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $HollowRectangleIcon extends $Icon {
 "color": $Color4I
 "roundEdges": boolean

constructor(c: $Color4I$Type, r: boolean)

public "draw"(graphics: $GuiGraphics$Type, x: integer, y: integer, w: integer, h: integer): void
public "withColor"(color: $Color4I$Type): $HollowRectangleIcon
public "getJson"(): $JsonElement
get "json"(): $JsonElement
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $HollowRectangleIcon$Type = ($HollowRectangleIcon);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $HollowRectangleIcon_ = $HollowRectangleIcon$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/util/$PanelPositioning" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$NameMap, $NameMap$Type} from "packages/dev/ftb/mods/ftblibrary/config/$NameMap"
import {$PanelPositioning$PanelPos, $PanelPositioning$PanelPos$Type} from "packages/dev/ftb/mods/ftblibrary/util/$PanelPositioning$PanelPos"

export class $PanelPositioning extends $Enum<($PanelPositioning)> {
static readonly "TOP_LEFT": $PanelPositioning
static readonly "TOP": $PanelPositioning
static readonly "TOP_RIGHT": $PanelPositioning
static readonly "RIGHT": $PanelPositioning
static readonly "BOTTOM_RIGHT": $PanelPositioning
static readonly "BOTTOM": $PanelPositioning
static readonly "BOTTOM_LEFT": $PanelPositioning
static readonly "LEFT": $PanelPositioning
static readonly "NAME_MAP": $NameMap<($PanelPositioning)>


public static "values"(): ($PanelPositioning)[]
public static "valueOf"(name: string): $PanelPositioning
public "getPanelPos"(screenW: integer, screenH: integer, panelW: integer, panelH: integer, insetX: float, insetY: float): $PanelPositioning$PanelPos
public "getPanelPos"(screenW: integer, screenH: integer, panelW: integer, panelH: integer, insetX: integer, insetY: integer): $PanelPositioning$PanelPos
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PanelPositioning$Type = (("top_right") | ("top") | ("left") | ("bottom") | ("top_left") | ("bottom_right") | ("right") | ("bottom_left")) | ($PanelPositioning);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PanelPositioning_ = $PanelPositioning$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/config/ui/$EditConfigListScreen" {
import {$AbstractThreePanelScreen, $AbstractThreePanelScreen$Type} from "packages/dev/ftb/mods/ftblibrary/ui/misc/$AbstractThreePanelScreen"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$ConfigCallback, $ConfigCallback$Type} from "packages/dev/ftb/mods/ftblibrary/config/$ConfigCallback"
import {$ConfigValue, $ConfigValue$Type} from "packages/dev/ftb/mods/ftblibrary/config/$ConfigValue"
import {$Key, $Key$Type} from "packages/dev/ftb/mods/ftblibrary/ui/input/$Key"
import {$EditConfigListScreen$ConfigPanel, $EditConfigListScreen$ConfigPanel$Type} from "packages/dev/ftb/mods/ftblibrary/config/ui/$EditConfigListScreen$ConfigPanel"
import {$Pair, $Pair$Type} from "packages/com/mojang/datafixers/util/$Pair"
import {$ListConfig, $ListConfig$Type} from "packages/dev/ftb/mods/ftblibrary/config/$ListConfig"

export class $EditConfigListScreen<E, CV extends $ConfigValue<(E)>> extends $AbstractThreePanelScreen<($EditConfigListScreen$ConfigPanel<>)> {
static readonly "NO_INSET": $Pair<(integer), (integer)>
 "posX": integer
 "posY": integer
 "width": integer
 "height": integer

constructor(listConfig: $ListConfig$Type<(E), (CV)>, callback: $ConfigCallback$Type)

public "onClosedByKey"(key: $Key$Type): boolean
public "shouldCloseOnEsc"(): boolean
public "keyPressed"(key: $Key$Type): boolean
public "onInit"(): boolean
public "getTitle"(): $Component
get "title"(): $Component
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EditConfigListScreen$Type<E, CV> = ($EditConfigListScreen<(E), (CV)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EditConfigListScreen_<E, CV> = $EditConfigListScreen$Type<(E), (CV)>;
}}
declare module "packages/dev/ftb/mods/ftbquests/item/$StageBarrierBlockItem" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$BlockItem, $BlockItem$Type} from "packages/net/minecraft/world/item/$BlockItem"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$List, $List$Type} from "packages/java/util/$List"
import {$AdditionalItemPlacement, $AdditionalItemPlacement$Type} from "packages/net/mehvahdjukaar/moonlight/api/item/additional_placements/$AdditionalItemPlacement"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $StageBarrierBlockItem extends $BlockItem {
static readonly "BLOCK_ENTITY_TAG": string
static readonly "BLOCK_STATE_TAG": string
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor()

public "appendHoverText"(stack: $ItemStack$Type, level: $Level$Type, tooltip: $List$Type<($Component$Type)>, flag: $TooltipFlag$Type): void
public "moonlight$addAdditionalBehavior"(arg0: $AdditionalItemPlacement$Type): void
public "moonlight$getAdditionalBehavior"(): $AdditionalItemPlacement
public "moonlight$getClientAnimationExtension"(): any
public "moonlight$setClientAnimationExtension"(arg0: any): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $StageBarrierBlockItem$Type = ($StageBarrierBlockItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $StageBarrierBlockItem_ = $StageBarrierBlockItem$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/core/$CompoundContainerFTBL" {
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"

export interface $CompoundContainerFTBL {

 "getContainer2FTBL"(): $Container
 "getContainer1FTBL"(): $Container
}

export namespace $CompoundContainerFTBL {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CompoundContainerFTBL$Type = ($CompoundContainerFTBL);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CompoundContainerFTBL_ = $CompoundContainerFTBL$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/quest/reward/$Reward" {
import {$Quest, $Quest$Type} from "packages/dev/ftb/mods/ftbquests/quest/$Quest"
import {$BaseQuestFile, $BaseQuestFile$Type} from "packages/dev/ftb/mods/ftbquests/quest/$BaseQuestFile"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$ConfigGroup, $ConfigGroup$Type} from "packages/dev/ftb/mods/ftblibrary/config/$ConfigGroup"
import {$QuestObjectType, $QuestObjectType$Type} from "packages/dev/ftb/mods/ftbquests/quest/$QuestObjectType"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Icon, $Icon$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Icon"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$TooltipList, $TooltipList$Type} from "packages/dev/ftb/mods/ftblibrary/util/$TooltipList"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$RewardAutoClaim, $RewardAutoClaim$Type} from "packages/dev/ftb/mods/ftbquests/quest/reward/$RewardAutoClaim"
import {$List, $List$Type} from "packages/java/util/$List"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$Chapter, $Chapter$Type} from "packages/dev/ftb/mods/ftbquests/quest/$Chapter"
import {$PositionedIngredient, $PositionedIngredient$Type} from "packages/dev/ftb/mods/ftblibrary/util/client/$PositionedIngredient"
import {$QuestObjectBase, $QuestObjectBase$Type} from "packages/dev/ftb/mods/ftbquests/quest/$QuestObjectBase"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Widget, $Widget$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Widget"
import {$RecipeModHelper$Components, $RecipeModHelper$Components$Type} from "packages/dev/ftb/mods/ftbquests/integration/$RecipeModHelper$Components"
import {$ProgressChange, $ProgressChange$Type} from "packages/dev/ftb/mods/ftbquests/util/$ProgressChange"
import {$TeamData, $TeamData$Type} from "packages/dev/ftb/mods/ftbquests/quest/$TeamData"
import {$RewardType, $RewardType$Type} from "packages/dev/ftb/mods/ftbquests/quest/reward/$RewardType"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$Button, $Button$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Button"

export class $Reward extends $QuestObjectBase {
readonly "id": long

constructor(id: long, q: $Quest$Type)

public "getType"(): $RewardType
public "getObjectType"(): $QuestObjectType
public "getQuest"(): $Quest
public "deleteSelf"(): void
public "getQuestFile"(): $BaseQuestFile
public "getIngredient"(widget: $Widget$Type): $Optional<($PositionedIngredient)>
public "getButtonText"(): string
public "deleteChildren"(): void
public "editedFromGUI"(): void
public "claim"(arg0: $ServerPlayer$Type, arg1: boolean): void
public "getExcludeFromClaimAll"(): boolean
public "isClaimAllHardcoded"(): boolean
public "readData"(nbt: $CompoundTag$Type): void
public "getAltTitle"(): $Component
public "getAltIcon"(): $Icon
public "forceProgress"(teamData: $TeamData$Type, progressChange: $ProgressChange$Type): void
public "addMouseOverText"(list: $TooltipList$Type): void
public "getQuestChapter"(): $Chapter
public "getParentID"(): long
public "componentsToRefresh"(): $Set<($RecipeModHelper$Components)>
public "ignoreRewardBlocking"(): boolean
public "addTitleInMouseOverText"(): boolean
public "getAutoClaimType"(): $RewardAutoClaim
public "isTeamReward"(): boolean
public "automatedClaimPost"(blockEntity: $BlockEntity$Type, playerId: $UUID$Type, player: $ServerPlayer$Type): void
public "automatedClaimPre"(blockEntity: $BlockEntity$Type, items: $List$Type<($ItemStack$Type)>, random: $RandomSource$Type, playerId: $UUID$Type, player: $ServerPlayer$Type): boolean
public "onCreated"(): void
public "createSubGroup"(group: $ConfigGroup$Type): $ConfigGroup
public "onButtonClicked"(button: $Button$Type, canClick: boolean): void
public "writeNetData"(buffer: $FriendlyByteBuf$Type): void
public "writeData"(nbt: $CompoundTag$Type): void
public "fillConfigGroup"(config: $ConfigGroup$Type): void
public "readNetData"(buffer: $FriendlyByteBuf$Type): void
get "type"(): $RewardType
get "objectType"(): $QuestObjectType
get "quest"(): $Quest
get "questFile"(): $BaseQuestFile
get "buttonText"(): string
get "excludeFromClaimAll"(): boolean
get "claimAllHardcoded"(): boolean
get "altTitle"(): $Component
get "altIcon"(): $Icon
get "questChapter"(): $Chapter
get "parentID"(): long
get "autoClaimType"(): $RewardAutoClaim
get "teamReward"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Reward$Type = ($Reward);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Reward_ = $Reward$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/$FTBQuestsEventHandler" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $FTBQuestsEventHandler extends $Enum<($FTBQuestsEventHandler)> {
static readonly "INSTANCE": $FTBQuestsEventHandler


public static "values"(): ($FTBQuestsEventHandler)[]
public static "valueOf"(name: string): $FTBQuestsEventHandler
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FTBQuestsEventHandler$Type = (("instance")) | ($FTBQuestsEventHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FTBQuestsEventHandler_ = $FTBQuestsEventHandler$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/nbtedit/$NBTEditorScreen$NBTCallback" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"

export interface $NBTEditorScreen$NBTCallback {

 "handle"(arg0: boolean, arg1: $CompoundTag$Type): void

(arg0: boolean, arg1: $CompoundTag$Type): void
}

export namespace $NBTEditorScreen$NBTCallback {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $NBTEditorScreen$NBTCallback$Type = ($NBTEditorScreen$NBTCallback);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $NBTEditorScreen$NBTCallback_ = $NBTEditorScreen$NBTCallback$Type;
}}
declare module "packages/dev/ftb/mods/ftbteams/api/property/$TeamProperty" {
import {$ConfigGroup, $ConfigGroup$Type} from "packages/dev/ftb/mods/ftblibrary/config/$ConfigGroup"
import {$TeamPropertyType, $TeamPropertyType$Type} from "packages/dev/ftb/mods/ftbteams/api/property/$TeamPropertyType"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$Tag, $Tag$Type} from "packages/net/minecraft/nbt/$Tag"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$TeamPropertyValue, $TeamPropertyValue$Type} from "packages/dev/ftb/mods/ftbteams/api/property/$TeamPropertyValue"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $TeamProperty<T> {


public "equals"(o: any): boolean
public "toString"(value: T): string
public "toString"(): string
public "hashCode"(): integer
public "write"(arg0: $FriendlyByteBuf$Type): void
public "getId"(): $ResourceLocation
public "getType"(): $TeamPropertyType<(T)>
public "getDefaultValue"(): T
public "config"(config: $ConfigGroup$Type, value: $TeamPropertyValue$Type<(T)>): void
public "readValue"(buf: $FriendlyByteBuf$Type): T
public "fromString"(arg0: string): $Optional<(T)>
public "createValueFromNetwork"(buf: $FriendlyByteBuf$Type): $TeamPropertyValue<(T)>
public "createValueFromNBT"(tag: $Tag$Type): $TeamPropertyValue<(T)>
public "fromNBT"(tag: $Tag$Type): $Optional<(T)>
public "writeValue"(buf: $FriendlyByteBuf$Type, value: T): void
public "createDefaultValue"(): $TeamPropertyValue<(T)>
public "toNBT"(value: T): $Tag
public "getTranslationKey"(prefix: string): string
get "id"(): $ResourceLocation
get "type"(): $TeamPropertyType<(T)>
get "defaultValue"(): T
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TeamProperty$Type<T> = ($TeamProperty<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TeamProperty_<T> = $TeamProperty$Type<(T)>;
}}
declare module "packages/dev/ftb/mods/ftblibrary/config/$ConfigValue" {
import {$Comparable, $Comparable$Type} from "packages/java/lang/$Comparable"
import {$ConfigGroup, $ConfigGroup$Type} from "packages/dev/ftb/mods/ftblibrary/config/$ConfigGroup"
import {$Color4I, $Color4I$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Color4I"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Widget, $Widget$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Widget"
import {$ConfigCallback, $ConfigCallback$Type} from "packages/dev/ftb/mods/ftblibrary/config/$ConfigCallback"
import {$Icon, $Icon$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Icon"
import {$MouseButton, $MouseButton$Type} from "packages/dev/ftb/mods/ftblibrary/ui/input/$MouseButton"
import {$TooltipList, $TooltipList$Type} from "packages/dev/ftb/mods/ftblibrary/util/$TooltipList"

export class $ConfigValue<T> implements $Comparable<($ConfigValue<(T)>)> {
static readonly "NULL_TEXT": $Component
 "id": string

constructor()

public "getName"(): string
public "compareTo"(o: $ConfigValue$Type<(T)>): integer
public "getValue"(): T
public static "info"(key: string, value: any): $Component
public "init"(group: $ConfigGroup$Type, id: string, value: T, setter: $Consumer$Type<(T)>, defaultValue: T): $ConfigValue<(T)>
public "setValue"(value: T): void
public "copy"(value: T): T
public "getDefaultValue"(): T
public "getPath"(): string
public "isEqual"(v1: T, v2: T): boolean
public "setNameKey"(key: string): $ConfigValue<(T)>
public "setOrder"(o: integer): $ConfigValue<(T)>
public "getNameKey"(): string
public "getIcon"(v: T): $Icon
public "getIcon"(): $Icon
public "setCanEdit"(e: boolean): $ConfigValue<(T)>
public "getTooltip"(): string
public "setDefaultValue"(defaultValue: T): void
public "getColor"(): $Color4I
public "getColor"(v: T): $Color4I
public "setIcon"(i: $Icon$Type): $ConfigValue<(T)>
public "getGroup"(): $ConfigGroup
public "applyValue"(): void
public "setCurrentValue"(v: T): boolean
public "getStringForGUI"(): $Component
public "getStringForGUI"(v: T): $Component
public "getCanEdit"(): boolean
public "addInfo"(list: $TooltipList$Type): void
public "onClicked"(arg0: $Widget$Type, arg1: $MouseButton$Type, arg2: $ConfigCallback$Type): void
get "name"(): string
get "value"(): T
set "value"(value: T)
get "defaultValue"(): T
get "path"(): string
set "nameKey"(value: string)
set "order"(value: integer)
get "nameKey"(): string
get "icon"(): $Icon
set "canEdit"(value: boolean)
get "tooltip"(): string
set "defaultValue"(value: T)
get "color"(): $Color4I
set "icon"(value: $Icon$Type)
get "group"(): $ConfigGroup
set "currentValue"(value: T)
get "stringForGUI"(): $Component
get "canEdit"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ConfigValue$Type<T> = ($ConfigValue<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ConfigValue_<T> = $ConfigValue$Type<(T)>;
}}
declare module "packages/dev/ftb/mods/ftbteams/api/property/$IntProperty" {
import {$ConfigGroup, $ConfigGroup$Type} from "packages/dev/ftb/mods/ftblibrary/config/$ConfigGroup"
import {$TeamPropertyType, $TeamPropertyType$Type} from "packages/dev/ftb/mods/ftbteams/api/property/$TeamPropertyType"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$Tag, $Tag$Type} from "packages/net/minecraft/nbt/$Tag"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$TeamProperty, $TeamProperty$Type} from "packages/dev/ftb/mods/ftbteams/api/property/$TeamProperty"
import {$TeamPropertyValue, $TeamPropertyValue$Type} from "packages/dev/ftb/mods/ftbteams/api/property/$TeamPropertyValue"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $IntProperty extends $TeamProperty<(integer)> {
readonly "minValue": integer
readonly "maxValue": integer

constructor(id: $ResourceLocation$Type, def: integer)
constructor(id: $ResourceLocation$Type, def: integer, min: integer, max: integer)
constructor(id: $ResourceLocation$Type, def: $Supplier$Type<(integer)>)
constructor(id: $ResourceLocation$Type, def: $Supplier$Type<(integer)>, min: integer, max: integer)

public "write"(buf: $FriendlyByteBuf$Type): void
public "getType"(): $TeamPropertyType<(integer)>
public "config"(config: $ConfigGroup$Type, value: $TeamPropertyValue$Type<(integer)>): void
public "fromString"(string: string): $Optional<(integer)>
public "fromNBT"(tag: $Tag$Type): $Optional<(integer)>
public "toNBT"(value: integer): $Tag
get "type"(): $TeamPropertyType<(integer)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IntProperty$Type = ($IntProperty);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IntProperty_ = $IntProperty$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/client/gui/$IRewardListenerScreen" {
import {$RewardKey, $RewardKey$Type} from "packages/dev/ftb/mods/ftbquests/client/gui/$RewardKey"

export interface $IRewardListenerScreen {

 "rewardReceived"(arg0: $RewardKey$Type, arg1: integer): void

(key: $RewardKey$Type, count: integer): boolean
}

export namespace $IRewardListenerScreen {
function add(key: $RewardKey$Type, count: integer): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IRewardListenerScreen$Type = ($IRewardListenerScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IRewardListenerScreen_ = $IRewardListenerScreen$Type;
}}
declare module "packages/dev/ftb/mods/ftbteams/net/$PlayerGUIOperationMessage" {
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$NetworkManager$PacketContext, $NetworkManager$PacketContext$Type} from "packages/dev/architectury/networking/$NetworkManager$PacketContext"
import {$PlayerGUIOperationMessage$Operation, $PlayerGUIOperationMessage$Operation$Type} from "packages/dev/ftb/mods/ftbteams/net/$PlayerGUIOperationMessage$Operation"
import {$GameProfile, $GameProfile$Type} from "packages/com/mojang/authlib/$GameProfile"
import {$BaseC2SMessage, $BaseC2SMessage$Type} from "packages/dev/architectury/networking/simple/$BaseC2SMessage"
import {$MessageType, $MessageType$Type} from "packages/dev/architectury/networking/simple/$MessageType"

export class $PlayerGUIOperationMessage extends $BaseC2SMessage {

constructor(buf: $FriendlyByteBuf$Type)
constructor(op: $PlayerGUIOperationMessage$Operation$Type, targets: $Collection$Type<($GameProfile$Type)>)
constructor(op: $PlayerGUIOperationMessage$Operation$Type, target: $UUID$Type)

public "write"(buf: $FriendlyByteBuf$Type): void
public "getType"(): $MessageType
public "handle"(context: $NetworkManager$PacketContext$Type): void
get "type"(): $MessageType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PlayerGUIOperationMessage$Type = ($PlayerGUIOperationMessage);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PlayerGUIOperationMessage_ = $PlayerGUIOperationMessage$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/snbt/config/$BooleanValue" {
import {$ConfigGroup, $ConfigGroup$Type} from "packages/dev/ftb/mods/ftblibrary/config/$ConfigGroup"
import {$SNBTConfig, $SNBTConfig$Type} from "packages/dev/ftb/mods/ftblibrary/snbt/config/$SNBTConfig"
import {$SNBTCompoundTag, $SNBTCompoundTag$Type} from "packages/dev/ftb/mods/ftblibrary/snbt/$SNBTCompoundTag"
import {$BaseValue, $BaseValue$Type} from "packages/dev/ftb/mods/ftblibrary/snbt/config/$BaseValue"

export class $BooleanValue extends $BaseValue<(boolean)> {
readonly "parent": $SNBTConfig
readonly "key": string
readonly "defaultValue": T


public "write"(tag: $SNBTCompoundTag$Type): void
public "read"(tag: $SNBTCompoundTag$Type): void
public "toggle"(): void
public "createClientConfig"(group: $ConfigGroup$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BooleanValue$Type = ($BooleanValue);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BooleanValue_ = $BooleanValue$Type;
}}
declare module "packages/dev/ftb/mods/ftbteams/api/$TeamMessage" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"

export interface $TeamMessage {

 "text"(): $Component
 "date"(): long
 "sender"(): $UUID
}

export namespace $TeamMessage {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TeamMessage$Type = ($TeamMessage);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TeamMessage_ = $TeamMessage$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/quest/task/$StructureTask" {
import {$Quest, $Quest$Type} from "packages/dev/ftb/mods/ftbquests/quest/$Quest"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$ConfigGroup, $ConfigGroup$Type} from "packages/dev/ftb/mods/ftblibrary/config/$ConfigGroup"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$TaskType, $TaskType$Type} from "packages/dev/ftb/mods/ftbquests/quest/task/$TaskType"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$List, $List$Type} from "packages/java/util/$List"
import {$AbstractBooleanTask, $AbstractBooleanTask$Type} from "packages/dev/ftb/mods/ftbquests/quest/task/$AbstractBooleanTask"
import {$TeamData, $TeamData$Type} from "packages/dev/ftb/mods/ftbquests/quest/$TeamData"

export class $StructureTask extends $AbstractBooleanTask {
readonly "id": long

constructor(id: long, quest: $Quest$Type)

public "getType"(): $TaskType
public "readData"(nbt: $CompoundTag$Type): void
public static "maybeRequestStructureSync"(): void
public static "syncKnownStructureList"(data: $List$Type<(string)>): void
public "autoSubmitOnPlayerTick"(): integer
public "checkOnLogin"(): boolean
public "canSubmit"(teamData: $TeamData$Type, player: $ServerPlayer$Type): boolean
public "writeNetData"(buffer: $FriendlyByteBuf$Type): void
public "writeData"(nbt: $CompoundTag$Type): void
public "fillConfigGroup"(config: $ConfigGroup$Type): void
public "readNetData"(buffer: $FriendlyByteBuf$Type): void
get "type"(): $TaskType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $StructureTask$Type = ($StructureTask);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $StructureTask_ = $StructureTask$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/client/$TaskScreenRenderer" {
import {$BlockEntityRendererProvider$Context, $BlockEntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/blockentity/$BlockEntityRendererProvider$Context"
import {$TaskScreenBlockEntity, $TaskScreenBlockEntity$Type} from "packages/dev/ftb/mods/ftbquests/block/entity/$TaskScreenBlockEntity"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$BlockEntityRenderer, $BlockEntityRenderer$Type} from "packages/net/minecraft/client/renderer/blockentity/$BlockEntityRenderer"

export class $TaskScreenRenderer implements $BlockEntityRenderer<($TaskScreenBlockEntity)> {
static readonly "INPUT_ONLY_TEXTURE": $ResourceLocation
static readonly "TANK_TEXTURE": $ResourceLocation
static readonly "FE_ENERGY_EMPTY_TEXTURE": $ResourceLocation
static readonly "FE_ENERGY_FULL_TEXTURE": $ResourceLocation
static readonly "TR_ENERGY_EMPTY_TEXTURE": $ResourceLocation
static readonly "TR_ENERGY_FULL_TEXTURE": $ResourceLocation

constructor(context: $BlockEntityRendererProvider$Context$Type)

public "getViewDistance"(): integer
public "render"(taskScreen: $TaskScreenBlockEntity$Type, partialTicks: float, poseStack: $PoseStack$Type, multiBufferSource: $MultiBufferSource$Type, combinedLight: integer, combinedOverlay: integer): void
public "shouldRender"(blockEntity: $TaskScreenBlockEntity$Type, vec3: $Vec3$Type): boolean
public "shouldRenderOffScreen"(arg0: $TaskScreenBlockEntity$Type): boolean
get "viewDistance"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TaskScreenRenderer$Type = ($TaskScreenRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TaskScreenRenderer_ = $TaskScreenRenderer$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/snbt/$SpecialTag" {
import {$TagType, $TagType$Type} from "packages/net/minecraft/nbt/$TagType"
import {$StreamTagVisitor, $StreamTagVisitor$Type} from "packages/net/minecraft/nbt/$StreamTagVisitor"
import {$Tag, $Tag$Type} from "packages/net/minecraft/nbt/$Tag"
import {$StreamTagVisitor$ValueResult, $StreamTagVisitor$ValueResult$Type} from "packages/net/minecraft/nbt/$StreamTagVisitor$ValueResult"
import {$TagVisitor, $TagVisitor$Type} from "packages/net/minecraft/nbt/$TagVisitor"
import {$DataOutput, $DataOutput$Type} from "packages/java/io/$DataOutput"

export class $SpecialTag implements $Tag {
static readonly "TRUE": $SpecialTag
static readonly "FALSE": $SpecialTag
static readonly "NAN_D": $SpecialTag
static readonly "POS_INFINITY_D": $SpecialTag
static readonly "NEG_INFINITY_D": $SpecialTag
static readonly "NAN_F": $SpecialTag
static readonly "POS_INFINITY_F": $SpecialTag
static readonly "NEG_INFINITY_F": $SpecialTag
readonly "wrappedTag": $Tag

constructor(t: $Tag$Type)

public "toString"(): string
public static "unwrap"(t: $Tag$Type): $Tag
public "sizeInBytes"(): integer
public "accept"(tagVisitor: $TagVisitor$Type): void
public "accept"(streamTagVisitor: $StreamTagVisitor$Type): $StreamTagVisitor$ValueResult
public "getType"(): $TagType<(any)>
public "getId"(): byte
public "write"(dataOutput: $DataOutput$Type): void
public "getAsString"(): string
public "copy"(): $Tag
public "acceptAsRoot"(arg0: $StreamTagVisitor$Type): void
get "type"(): $TagType<(any)>
get "id"(): byte
get "asString"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SpecialTag$Type = ($SpecialTag);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SpecialTag_ = $SpecialTag$Type;
}}
declare module "packages/dev/ftb/mods/ftbteams/net/$UpdatePropertiesRequestMessage" {
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$NetworkManager$PacketContext, $NetworkManager$PacketContext$Type} from "packages/dev/architectury/networking/$NetworkManager$PacketContext"
import {$TeamPropertyCollection, $TeamPropertyCollection$Type} from "packages/dev/ftb/mods/ftbteams/api/property/$TeamPropertyCollection"
import {$BaseC2SMessage, $BaseC2SMessage$Type} from "packages/dev/architectury/networking/simple/$BaseC2SMessage"
import {$MessageType, $MessageType$Type} from "packages/dev/architectury/networking/simple/$MessageType"

export class $UpdatePropertiesRequestMessage extends $BaseC2SMessage {

constructor(properties: $TeamPropertyCollection$Type)

public "write"(buffer: $FriendlyByteBuf$Type): void
public "getType"(): $MessageType
public "handle"(context: $NetworkManager$PacketContext$Type): void
get "type"(): $MessageType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $UpdatePropertiesRequestMessage$Type = ($UpdatePropertiesRequestMessage);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $UpdatePropertiesRequestMessage_ = $UpdatePropertiesRequestMessage$Type;
}}
declare module "packages/dev/ftb/mods/ftbteams/api/property/$StringProperty" {
import {$ConfigGroup, $ConfigGroup$Type} from "packages/dev/ftb/mods/ftblibrary/config/$ConfigGroup"
import {$TeamPropertyType, $TeamPropertyType$Type} from "packages/dev/ftb/mods/ftbteams/api/property/$TeamPropertyType"
import {$Pattern, $Pattern$Type} from "packages/java/util/regex/$Pattern"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$TeamProperty, $TeamProperty$Type} from "packages/dev/ftb/mods/ftbteams/api/property/$TeamProperty"
import {$TeamPropertyValue, $TeamPropertyValue$Type} from "packages/dev/ftb/mods/ftbteams/api/property/$TeamPropertyValue"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $StringProperty extends $TeamProperty<(string)> {

constructor(id: $ResourceLocation$Type, def: string)
constructor(id: $ResourceLocation$Type, def: string, pattern: $Pattern$Type)
constructor(id: $ResourceLocation$Type, def: $Supplier$Type<(string)>)
constructor(id: $ResourceLocation$Type, def: $Supplier$Type<(string)>, pattern: $Pattern$Type)

public "write"(buf: $FriendlyByteBuf$Type): void
public "getType"(): $TeamPropertyType<(string)>
public "config"(config: $ConfigGroup$Type, value: $TeamPropertyValue$Type<(string)>): void
public "fromString"(string: string): $Optional<(string)>
get "type"(): $TeamPropertyType<(string)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $StringProperty$Type = ($StringProperty);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $StringProperty_ = $StringProperty$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/snbt/$SNBTParser" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $SNBTParser {


}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SNBTParser$Type = ($SNBTParser);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SNBTParser_ = $SNBTParser$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/icon/$CombinedIcon" {
import {$JsonElement, $JsonElement$Type} from "packages/com/google/gson/$JsonElement"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Icon, $Icon$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Icon"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $CombinedIcon extends $Icon {
readonly "list": $List<($Icon)>


public "equals"(o: any): boolean
public "hashCode"(): integer
public "draw"(graphics: $GuiGraphics$Type, x: integer, y: integer, w: integer, h: integer): void
public static "getCombined"(icons: $Collection$Type<($Icon$Type)>): $Icon
public "drawStatic"(graphics: $GuiGraphics$Type, x: integer, y: integer, w: integer, h: integer): void
public "draw3D"(graphics: $GuiGraphics$Type): void
public "getJson"(): $JsonElement
get "json"(): $JsonElement
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CombinedIcon$Type = ($CombinedIcon);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CombinedIcon_ = $CombinedIcon$Type;
}}
declare module "packages/dev/ftb/mods/ftbteams/net/$UpdatePresenceMessage" {
import {$KnownClientPlayer, $KnownClientPlayer$Type} from "packages/dev/ftb/mods/ftbteams/api/client/$KnownClientPlayer"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$NetworkManager$PacketContext, $NetworkManager$PacketContext$Type} from "packages/dev/architectury/networking/$NetworkManager$PacketContext"
import {$BaseS2CMessage, $BaseS2CMessage$Type} from "packages/dev/architectury/networking/simple/$BaseS2CMessage"
import {$MessageType, $MessageType$Type} from "packages/dev/architectury/networking/simple/$MessageType"

export class $UpdatePresenceMessage extends $BaseS2CMessage {

constructor(p: $KnownClientPlayer$Type)

public "write"(buffer: $FriendlyByteBuf$Type): void
public "getType"(): $MessageType
public "handle"(context: $NetworkManager$PacketContext$Type): void
get "type"(): $MessageType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $UpdatePresenceMessage$Type = ($UpdatePresenceMessage);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $UpdatePresenceMessage_ = $UpdatePresenceMessage$Type;
}}
declare module "packages/dev/ftb/mods/ftbxmodcompat/ftbquests/jei/$QuestCategory" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$IRecipeLayoutBuilder, $IRecipeLayoutBuilder$Type} from "packages/mezz/jei/api/gui/builder/$IRecipeLayoutBuilder"
import {$RecipeType, $RecipeType$Type} from "packages/mezz/jei/api/recipe/$RecipeType"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$WrappedQuest, $WrappedQuest$Type} from "packages/dev/ftb/mods/ftbxmodcompat/ftbquests/recipemod_common/$WrappedQuest"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$IRecipeSlotsView, $IRecipeSlotsView$Type} from "packages/mezz/jei/api/gui/ingredient/$IRecipeSlotsView"
import {$IRecipeCategory, $IRecipeCategory$Type} from "packages/mezz/jei/api/recipe/category/$IRecipeCategory"
import {$List, $List$Type} from "packages/java/util/$List"
import {$IDrawable, $IDrawable$Type} from "packages/mezz/jei/api/gui/drawable/$IDrawable"
import {$IFocusGroup, $IFocusGroup$Type} from "packages/mezz/jei/api/recipe/$IFocusGroup"
import {$InputConstants$Key, $InputConstants$Key$Type} from "packages/com/mojang/blaze3d/platform/$InputConstants$Key"
import {$IGuiHelper, $IGuiHelper$Type} from "packages/mezz/jei/api/helpers/$IGuiHelper"

export class $QuestCategory implements $IRecipeCategory<($WrappedQuest)> {
static readonly "TEXTURE": $ResourceLocation

constructor(guiHelper: $IGuiHelper$Type)

public "getRecipeType"(): $RecipeType<($WrappedQuest)>
public "draw"(recipe: $WrappedQuest$Type, recipeSlotsView: $IRecipeSlotsView$Type, graphics: $GuiGraphics$Type, mouseX: double, mouseY: double): void
public "getIcon"(): $IDrawable
public "getTitle"(): $Component
public "handleInput"(recipe: $WrappedQuest$Type, mouseX: double, mouseY: double, input: $InputConstants$Key$Type): boolean
public "setRecipe"(builder: $IRecipeLayoutBuilder$Type, recipe: $WrappedQuest$Type, focuses: $IFocusGroup$Type): void
public "getBackground"(): $IDrawable
public "getWidth"(): integer
public "getHeight"(): integer
public "isHandled"(arg0: $WrappedQuest$Type): boolean
public "getTooltipStrings"(arg0: $WrappedQuest$Type, arg1: $IRecipeSlotsView$Type, arg2: double, arg3: double): $List<($Component)>
public "getRegistryName"(arg0: $WrappedQuest$Type): $ResourceLocation
get "recipeType"(): $RecipeType<($WrappedQuest)>
get "icon"(): $IDrawable
get "title"(): $Component
get "background"(): $IDrawable
get "width"(): integer
get "height"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $QuestCategory$Type = ($QuestCategory);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $QuestCategory_ = $QuestCategory$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/util/$PanelPositioning$PanelPos" {
import {$Record, $Record$Type} from "packages/java/lang/$Record"

export class $PanelPositioning$PanelPos extends $Record {

constructor(x: integer, y: integer)

public "equals"(o: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "x"(): integer
public "y"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PanelPositioning$PanelPos$Type = ($PanelPositioning$PanelPos);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PanelPositioning$PanelPos_ = $PanelPositioning$PanelPos$Type;
}}
declare module "packages/dev/ftb/mods/ftbteams/net/$CreatePartyMessage" {
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$NetworkManager$PacketContext, $NetworkManager$PacketContext$Type} from "packages/dev/architectury/networking/$NetworkManager$PacketContext"
import {$GameProfile, $GameProfile$Type} from "packages/com/mojang/authlib/$GameProfile"
import {$BaseC2SMessage, $BaseC2SMessage$Type} from "packages/dev/architectury/networking/simple/$BaseC2SMessage"
import {$MessageType, $MessageType$Type} from "packages/dev/architectury/networking/simple/$MessageType"

export class $CreatePartyMessage extends $BaseC2SMessage {

constructor(n: string, d: string, c: integer, i: $Set$Type<($GameProfile$Type)>)

public "write"(buffer: $FriendlyByteBuf$Type): void
public "getType"(): $MessageType
public "handle"(context: $NetworkManager$PacketContext$Type): void
get "type"(): $MessageType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CreatePartyMessage$Type = ($CreatePartyMessage);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CreatePartyMessage_ = $CreatePartyMessage$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/client/gui/$EditRewardTableScreen" {
import {$Panel, $Panel$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Panel"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$RewardTable, $RewardTable$Type} from "packages/dev/ftb/mods/ftbquests/quest/loot/$RewardTable"
import {$Key, $Key$Type} from "packages/dev/ftb/mods/ftblibrary/ui/input/$Key"
import {$Theme, $Theme$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Theme"
import {$Pair, $Pair$Type} from "packages/com/mojang/datafixers/util/$Pair"
import {$Runnable, $Runnable$Type} from "packages/java/lang/$Runnable"
import {$AbstractButtonListScreen, $AbstractButtonListScreen$Type} from "packages/dev/ftb/mods/ftblibrary/ui/misc/$AbstractButtonListScreen"

export class $EditRewardTableScreen extends $AbstractButtonListScreen {
static readonly "NO_INSET": $Pair<(integer), (integer)>
 "posX": integer
 "posY": integer
 "width": integer
 "height": integer

constructor(parentScreen: $Runnable$Type, originalTable: $RewardTable$Type, callback: $Consumer$Type<($RewardTable$Type)>)

public "onClosedByKey"(key: $Key$Type): boolean
public "getTheme"(): $Theme
public "onInit"(): boolean
public "addButtons"(panel: $Panel$Type): void
get "theme"(): $Theme
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EditRewardTableScreen$Type = ($EditRewardTableScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EditRewardTableScreen_ = $EditRewardTableScreen$Type;
}}
declare module "packages/dev/ftb/mods/ftbxmodcompat/ftbquests/filtering/$ItemFilteringSetup" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $ItemFilteringSetup {

constructor()

public static "init"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ItemFilteringSetup$Type = ($ItemFilteringSetup);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ItemFilteringSetup_ = $ItemFilteringSetup$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/ui/$BaseContainer" {
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$AbstractContainerMenu, $AbstractContainerMenu$Type} from "packages/net/minecraft/world/inventory/$AbstractContainerMenu"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MenuType, $MenuType$Type} from "packages/net/minecraft/world/inventory/$MenuType"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"

export class $BaseContainer extends $AbstractContainerMenu {
static readonly "SLOT_CLICKED_OUTSIDE": integer
static readonly "QUICKCRAFT_TYPE_CHARITABLE": integer
static readonly "QUICKCRAFT_TYPE_GREEDY": integer
static readonly "QUICKCRAFT_TYPE_CLONE": integer
static readonly "QUICKCRAFT_HEADER_START": integer
static readonly "QUICKCRAFT_HEADER_CONTINUE": integer
static readonly "QUICKCRAFT_HEADER_END": integer
static readonly "CARRIED_SLOT_SIZE": integer
readonly "lastSlots": $NonNullList<($ItemStack)>
readonly "slots": $NonNullList<($Slot)>
 "remoteSlots": $NonNullList<($ItemStack)>
 "containerId": integer

constructor(type: $MenuType$Type<(any)>, id: integer, playerInventory: $Inventory$Type)

public "getNonPlayerSlots"(): integer
public "stillValid"(player: $Player$Type): boolean
public "addPlayerSlots"(playerInventory: $Inventory$Type, posX: integer, posY: integer): void
public "addPlayerSlots"(playerInventory: $Inventory$Type, posX: integer, posY: integer, ignoreCurrent: boolean): void
public "quickMoveStack"(player: $Player$Type, index: integer): $ItemStack
get "nonPlayerSlots"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BaseContainer$Type = ($BaseContainer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BaseContainer_ = $BaseContainer$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/$FTBQuestsAPIImpl" {
import {$ItemFilterAdapter, $ItemFilterAdapter$Type} from "packages/dev/ftb/mods/ftbquests/api/$ItemFilterAdapter"
import {$BaseQuestFile, $BaseQuestFile$Type} from "packages/dev/ftb/mods/ftbquests/quest/$BaseQuestFile"
import {$FTBQuestsAPI$API, $FTBQuestsAPI$API$Type} from "packages/dev/ftb/mods/ftbquests/api/$FTBQuestsAPI$API"
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $FTBQuestsAPIImpl extends $Enum<($FTBQuestsAPIImpl)> implements $FTBQuestsAPI$API {
static readonly "INSTANCE": $FTBQuestsAPIImpl


public static "values"(): ($FTBQuestsAPIImpl)[]
public static "valueOf"(name: string): $FTBQuestsAPIImpl
public "getQuestFile"(isClient: boolean): $BaseQuestFile
public "registerFilterAdapter"(adapter: $ItemFilterAdapter$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FTBQuestsAPIImpl$Type = (("instance")) | ($FTBQuestsAPIImpl);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FTBQuestsAPIImpl_ = $FTBQuestsAPIImpl$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/client/gui/quests/$QuestButton" {
import {$Quest, $Quest$Type} from "packages/dev/ftb/mods/ftbquests/quest/$Quest"
import {$Panel, $Panel$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Panel"
import {$PositionedIngredient, $PositionedIngredient$Type} from "packages/dev/ftb/mods/ftblibrary/util/client/$PositionedIngredient"
import {$QuestPositionableButton$Position, $QuestPositionableButton$Position$Type} from "packages/dev/ftb/mods/ftbquests/client/gui/quests/$QuestPositionableButton$Position"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$QuestPositionableButton, $QuestPositionableButton$Type} from "packages/dev/ftb/mods/ftbquests/client/gui/quests/$QuestPositionableButton"
import {$Movable, $Movable$Type} from "packages/dev/ftb/mods/ftbquests/quest/$Movable"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$TooltipList, $TooltipList$Type} from "packages/dev/ftb/mods/ftblibrary/util/$TooltipList"
import {$Theme, $Theme$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Theme"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$MouseButton, $MouseButton$Type} from "packages/dev/ftb/mods/ftblibrary/ui/input/$MouseButton"
import {$Button, $Button$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Button"

export class $QuestButton extends $Button implements $QuestPositionableButton {
 "posX": integer
 "posY": integer
 "width": integer
 "height": integer

constructor(panel: $Panel$Type, quest: $Quest$Type)

public "moveAndDeleteFocus"(): $Movable
public "isEnabled"(): boolean
public "getPosition"(): $QuestPositionableButton$Position
public "draw"(graphics: $GuiGraphics$Type, theme: $Theme$Type, x: integer, y: integer, w: integer, h: integer): void
public "checkMouseOver"(mouseX: integer, mouseY: integer): boolean
public "updateMouseOver"(mouseX: integer, mouseY: integer): void
public "shouldDraw"(): boolean
public "addMouseOverText"(list: $TooltipList$Type): void
public "getIngredientUnderMouse"(): $Optional<($PositionedIngredient)>
public "onClicked"(button: $MouseButton$Type): void
public "getDependencies"(): $Collection<($QuestButton)>
get "enabled"(): boolean
get "position"(): $QuestPositionableButton$Position
get "ingredientUnderMouse"(): $Optional<($PositionedIngredient)>
get "dependencies"(): $Collection<($QuestButton)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $QuestButton$Type = ($QuestButton);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $QuestButton_ = $QuestButton$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/quest/task/$AbstractBooleanTask" {
import {$Quest, $Quest$Type} from "packages/dev/ftb/mods/ftbquests/quest/$Quest"
import {$Task, $Task$Type} from "packages/dev/ftb/mods/ftbquests/quest/task/$Task"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$TeamData, $TeamData$Type} from "packages/dev/ftb/mods/ftbquests/quest/$TeamData"

export class $AbstractBooleanTask extends $Task {
readonly "id": long

constructor(id: long, quest: $Quest$Type)

public "submitTask"(teamData: $TeamData$Type, player: $ServerPlayer$Type, craftedItem: $ItemStack$Type): void
public "formatMaxProgress"(): string
public "formatProgress"(teamData: $TeamData$Type, progress: long): string
public "canSubmit"(arg0: $TeamData$Type, arg1: $ServerPlayer$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AbstractBooleanTask$Type = ($AbstractBooleanTask);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AbstractBooleanTask_ = $AbstractBooleanTask$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/config/ui/$ResourceSearchMode" {
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$Icon, $Icon$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Icon"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$FluidStack, $FluidStack$Type} from "packages/dev/architectury/fluid/$FluidStack"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"

export interface $ResourceSearchMode<T> {

 "getDisplayName"(): $MutableComponent
 "getIcon"(): $Icon
 "getAllResources"(): $Collection<(any)>
}

export namespace $ResourceSearchMode {
const ALL_ITEMS: $ResourceSearchMode<($ItemStack)>
const INVENTORY: $ResourceSearchMode<($ItemStack)>
const ALL_FLUIDS: $ResourceSearchMode<($FluidStack)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ResourceSearchMode$Type<T> = ($ResourceSearchMode<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ResourceSearchMode_<T> = $ResourceSearchMode$Type<(T)>;
}}
declare module "packages/dev/ftb/mods/ftbxmodcompat/ftbquests/kubejs/$QuestObjectCompletedEventJS" {
import {$QuestObject, $QuestObject$Type} from "packages/dev/ftb/mods/ftbquests/quest/$QuestObject"
import {$FTBQuestsKubeJSTeamDataWrapper, $FTBQuestsKubeJSTeamDataWrapper$Type} from "packages/dev/ftb/mods/ftbxmodcompat/ftbquests/kubejs/$FTBQuestsKubeJSTeamDataWrapper"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$ServerEventJS, $ServerEventJS$Type} from "packages/dev/latvian/mods/kubejs/server/$ServerEventJS"
import {$MinecraftServer, $MinecraftServer$Type} from "packages/net/minecraft/server/$MinecraftServer"
import {$ObjectCompletedEvent, $ObjectCompletedEvent$Type} from "packages/dev/ftb/mods/ftbquests/events/$ObjectCompletedEvent"
import {$EntityArrayList, $EntityArrayList$Type} from "packages/dev/latvian/mods/kubejs/player/$EntityArrayList"

export class $QuestObjectCompletedEventJS extends $ServerEventJS {
readonly "event": $ObjectCompletedEvent<(any)>
readonly "server": $MinecraftServer

constructor(e: $ObjectCompletedEvent$Type<(any)>)

public "getObject"(): $QuestObject
public "getData"(): $FTBQuestsKubeJSTeamDataWrapper
public "getPlayer"(): $ServerPlayer
public "getNotifiedPlayers"(): $EntityArrayList
public "getOnlineMembers"(): $EntityArrayList
get "object"(): $QuestObject
get "data"(): $FTBQuestsKubeJSTeamDataWrapper
get "player"(): $ServerPlayer
get "notifiedPlayers"(): $EntityArrayList
get "onlineMembers"(): $EntityArrayList
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $QuestObjectCompletedEventJS$Type = ($QuestObjectCompletedEventJS);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $QuestObjectCompletedEventJS_ = $QuestObjectCompletedEventJS$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/integration/item_filtering/$ItemMatchingSystem" {
import {$ItemFilterAdapter, $ItemFilterAdapter$Type} from "packages/dev/ftb/mods/ftbquests/api/$ItemFilterAdapter"
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export class $ItemMatchingSystem extends $Enum<($ItemMatchingSystem)> {
static readonly "INSTANCE": $ItemMatchingSystem


public static "values"(): ($ItemMatchingSystem)[]
public static "valueOf"(name: string): $ItemMatchingSystem
public "getFilterAdapter"(stack: $ItemStack$Type): $Optional<($ItemFilterAdapter)>
public "isItemFilter"(stack: $ItemStack$Type): boolean
public "registerFilterAdapter"(adapter: $ItemFilterAdapter$Type): void
public "adapters"(): $Collection<($ItemFilterAdapter)>
public "getAllMatchingStacks"(filterStack: $ItemStack$Type): $List<($ItemStack)>
public "doesItemMatch"(filterStack: $ItemStack$Type, toCheck: $ItemStack$Type, matchNBT: boolean, fuzzyNBT: boolean): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ItemMatchingSystem$Type = (("instance")) | ($ItemMatchingSystem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ItemMatchingSystem_ = $ItemMatchingSystem$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/block/$LootCrateOpenerBlock" {
import {$EntityBlock, $EntityBlock$Type} from "packages/net/minecraft/world/level/block/$EntityBlock"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockEntityType$BlockEntitySupplier, $BlockEntityType$BlockEntitySupplier$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType$BlockEntitySupplier"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$LootCrateOpenerBlockEntity, $LootCrateOpenerBlockEntity$Type} from "packages/dev/ftb/mods/ftbquests/block/entity/$LootCrateOpenerBlockEntity"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$BlockEntityTicker, $BlockEntityTicker$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityTicker"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$GameEventListener, $GameEventListener$Type} from "packages/net/minecraft/world/level/gameevent/$GameEventListener"
import {$RenderShape, $RenderShape$Type} from "packages/net/minecraft/world/level/block/$RenderShape"

export class $LootCrateOpenerBlock extends $Block implements $EntityBlock {
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor()

public "setPlacedBy"(level: $Level$Type, blockPos: $BlockPos$Type, blockState: $BlockState$Type, livingEntity: $LivingEntity$Type, itemStack: $ItemStack$Type): void
public static "blockEntityProvider"(): $BlockEntityType$BlockEntitySupplier<($LootCrateOpenerBlockEntity)>
public "use"(blockState: $BlockState$Type, level: $Level$Type, blockPos: $BlockPos$Type, player: $Player$Type, interactionHand: $InteractionHand$Type, blockHitResult: $BlockHitResult$Type): $InteractionResult
public "getRenderShape"(state: $BlockState$Type): $RenderShape
public "newBlockEntity"(blockPos: $BlockPos$Type, blockState: $BlockState$Type): $BlockEntity
public "getTicker"<T extends $BlockEntity>(arg0: $Level$Type, arg1: $BlockState$Type, arg2: $BlockEntityType$Type<(T)>): $BlockEntityTicker<(T)>
public "getListener"<T extends $BlockEntity>(arg0: $ServerLevel$Type, arg1: T): $GameEventListener
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LootCrateOpenerBlock$Type = ($LootCrateOpenerBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LootCrateOpenerBlock_ = $LootCrateOpenerBlock$Type;
}}
declare module "packages/dev/ftb/mods/ftbxmodcompat/ftbquests/rei/helper/$REIRecipeHelper" {
import {$BaseRecipeHelper, $BaseRecipeHelper$Type} from "packages/dev/ftb/mods/ftbxmodcompat/ftbquests/recipemod_common/$BaseRecipeHelper"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export class $REIRecipeHelper extends $BaseRecipeHelper {

constructor()

public "showRecipes"(stack: $ItemStack$Type): void
public "getHelperName"(): string
get "helperName"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $REIRecipeHelper$Type = ($REIRecipeHelper);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $REIRecipeHelper_ = $REIRecipeHelper$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/icon/$IResourceIcon" {
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export interface $IResourceIcon {

 "getResourceLocation"(): $ResourceLocation

(): $ResourceLocation
}

export namespace $IResourceIcon {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IResourceIcon$Type = ($IResourceIcon);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IResourceIcon_ = $IResourceIcon$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/ui/$ContextMenuItem" {
import {$Comparable, $Comparable$Type} from "packages/java/lang/$Comparable"
import {$Panel, $Panel$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Panel"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Widget, $Widget$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Widget"
import {$Icon, $Icon$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Icon"
import {$ContextMenu, $ContextMenu$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$ContextMenu"
import {$TooltipList, $TooltipList$Type} from "packages/dev/ftb/mods/ftblibrary/util/$TooltipList"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Theme, $Theme$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Theme"
import {$MouseButton, $MouseButton$Type} from "packages/dev/ftb/mods/ftblibrary/ui/input/$MouseButton"
import {$Button, $Button$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Button"

export class $ContextMenuItem implements $Comparable<($ContextMenuItem)> {
static readonly "SEPARATOR": $ContextMenuItem

constructor(title: $Component$Type, icon: $Icon$Type, callback: $Consumer$Type<($Button$Type)>)

public "setYesNoText"(s: $Component$Type): $ContextMenuItem
public "setCloseMenu"(v: boolean): $ContextMenuItem
public "compareTo"(o: $ContextMenuItem$Type): integer
public static "separator"(): $ContextMenuItem
public "isEnabled"(): boolean
public "setEnabled"(enabled: boolean): $ContextMenuItem
public "getIcon"(): $Icon
public "addMouseOverText"(list: $TooltipList$Type): void
public "createWidget"(panel: $ContextMenu$Type): $Widget
public "getTitle"(): $Component
public static "title"(title: $Component$Type): $ContextMenuItem
public static "subMenu"(title: $Component$Type, icon: $Icon$Type, subItems: $List$Type<($ContextMenuItem$Type)>): $ContextMenuItem
public "isClickable"(): boolean
public "drawIcon"(graphics: $GuiGraphics$Type, theme: $Theme$Type, x: integer, y: integer, w: integer, h: integer): void
public "getYesNoText"(): $Component
public "onClicked"(button: $Button$Type, panel: $Panel$Type, mouseButton: $MouseButton$Type): void
set "yesNoText"(value: $Component$Type)
set "closeMenu"(value: boolean)
get "enabled"(): boolean
set "enabled"(value: boolean)
get "icon"(): $Icon
get "clickable"(): boolean
get "yesNoText"(): $Component
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ContextMenuItem$Type = ($ContextMenuItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ContextMenuItem_ = $ContextMenuItem$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/icon/$IconAnimation" {
import {$JsonElement, $JsonElement$Type} from "packages/com/google/gson/$JsonElement"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Icon, $Icon$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Icon"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $IconAnimation extends $Icon {
readonly "list": $List<($Icon)>


public "equals"(o: any): boolean
public "hashCode"(): integer
public "isEmpty"(): boolean
public static "fromList"(icons: $List$Type<($Icon$Type)>, includeEmpty: boolean): $Icon
public "getIngredient"(): any
public "draw"(graphics: $GuiGraphics$Type, x: integer, y: integer, w: integer, h: integer): void
public "drawStatic"(graphics: $GuiGraphics$Type, x: integer, y: integer, w: integer, h: integer): void
public "draw3D"(graphics: $GuiGraphics$Type): void
public "getJson"(): $JsonElement
get "empty"(): boolean
get "ingredient"(): any
get "json"(): $JsonElement
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IconAnimation$Type = ($IconAnimation);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IconAnimation_ = $IconAnimation$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/quest/task/$DimensionTask" {
import {$Quest, $Quest$Type} from "packages/dev/ftb/mods/ftbquests/quest/$Quest"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$ConfigGroup, $ConfigGroup$Type} from "packages/dev/ftb/mods/ftblibrary/config/$ConfigGroup"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$TaskType, $TaskType$Type} from "packages/dev/ftb/mods/ftbquests/quest/task/$TaskType"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$AbstractBooleanTask, $AbstractBooleanTask$Type} from "packages/dev/ftb/mods/ftbquests/quest/task/$AbstractBooleanTask"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ResourceKey, $ResourceKey$Type} from "packages/net/minecraft/resources/$ResourceKey"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$TeamData, $TeamData$Type} from "packages/dev/ftb/mods/ftbquests/quest/$TeamData"

export class $DimensionTask extends $AbstractBooleanTask {
readonly "id": long

constructor(id: long, quest: $Quest$Type)

public "getType"(): $TaskType
public "readData"(nbt: $CompoundTag$Type): void
public "getAltTitle"(): $MutableComponent
public "autoSubmitOnPlayerTick"(): integer
public "withDimension"(dimension: $ResourceKey$Type<($Level$Type)>): $DimensionTask
public "canSubmit"(teamData: $TeamData$Type, player: $ServerPlayer$Type): boolean
public "writeNetData"(buffer: $FriendlyByteBuf$Type): void
public "writeData"(nbt: $CompoundTag$Type): void
public "fillConfigGroup"(config: $ConfigGroup$Type): void
public "readNetData"(buffer: $FriendlyByteBuf$Type): void
get "type"(): $TaskType
get "altTitle"(): $MutableComponent
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DimensionTask$Type = ($DimensionTask);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DimensionTask_ = $DimensionTask$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/util/$ModUtils" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Fluid, $Fluid$Type} from "packages/net/minecraft/world/level/material/$Fluid"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"

export class $ModUtils {

constructor()

public static "getModName"(fluid: $Fluid$Type): $Optional<(string)>
public static "getModName"(modId: string): $Optional<(string)>
public static "getModName"(item: $Item$Type): $Optional<(string)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModUtils$Type = ($ModUtils);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModUtils_ = $ModUtils$Type;
}}
declare module "packages/dev/ftb/mods/ftbteams/data/$AbstractTeam" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$AbstractTeamBase, $AbstractTeamBase$Type} from "packages/dev/ftb/mods/ftbteams/data/$AbstractTeamBase"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$TeamRank, $TeamRank$Type} from "packages/dev/ftb/mods/ftbteams/api/$TeamRank"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$CommandSourceStack, $CommandSourceStack$Type} from "packages/net/minecraft/commands/$CommandSourceStack"
import {$SNBTCompoundTag, $SNBTCompoundTag$Type} from "packages/dev/ftb/mods/ftblibrary/snbt/$SNBTCompoundTag"
import {$TeamProperty, $TeamProperty$Type} from "packages/dev/ftb/mods/ftbteams/api/property/$TeamProperty"
import {$List, $List$Type} from "packages/java/util/$List"
import {$TeamManagerImpl, $TeamManagerImpl$Type} from "packages/dev/ftb/mods/ftbteams/data/$TeamManagerImpl"
import {$TeamPropertyCollection, $TeamPropertyCollection$Type} from "packages/dev/ftb/mods/ftbteams/api/property/$TeamPropertyCollection"

export class $AbstractTeam extends $AbstractTeamBase {

constructor(manager: $TeamManagerImpl$Type, id: $UUID$Type)

public "info"(source: $CommandSourceStack$Type): integer
public "getOwner"(): $UUID
public "sendMessage"(senderId: $UUID$Type, message: string): void
public "markDirty"(): void
public "getOnlineRanked"(rank: $TeamRank$Type): $List<($ServerPlayer)>
public "updatePropertiesFrom"(newProperties: $TeamPropertyCollection$Type): void
public "declineInvitation"(source: $CommandSourceStack$Type): integer
public "settings"<T>(source: $CommandSourceStack$Type, key: $TeamProperty$Type<(T)>, value: string): integer
public "getTeamInfo"(): $List<($Component)>
public "deserializeNBT"(tag: $CompoundTag$Type): void
public "serializeNBT"(): $SNBTCompoundTag
get "owner"(): $UUID
get "teamInfo"(): $List<($Component)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AbstractTeam$Type = ($AbstractTeam);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AbstractTeam_ = $AbstractTeam$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/util/forge/$TextComponentUtilsImpl" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"

export class $TextComponentUtilsImpl {

constructor()

public static "withLinks"(message: string): $Component
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TextComponentUtilsImpl$Type = ($TextComponentUtilsImpl);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TextComponentUtilsImpl_ = $TextComponentUtilsImpl$Type;
}}
declare module "packages/dev/ftb/mods/ftbteams/data/$PartyTeam" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$TeamRank, $TeamRank$Type} from "packages/dev/ftb/mods/ftbteams/api/$TeamRank"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$CommandSourceStack, $CommandSourceStack$Type} from "packages/net/minecraft/commands/$CommandSourceStack"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$TeamManagerImpl, $TeamManagerImpl$Type} from "packages/dev/ftb/mods/ftbteams/data/$TeamManagerImpl"
import {$TeamType, $TeamType$Type} from "packages/dev/ftb/mods/ftbteams/data/$TeamType"
import {$GameProfile, $GameProfile$Type} from "packages/com/mojang/authlib/$GameProfile"
import {$AbstractTeam, $AbstractTeam$Type} from "packages/dev/ftb/mods/ftbteams/data/$AbstractTeam"

export class $PartyTeam extends $AbstractTeam {

constructor(manager: $TeamManagerImpl$Type, id: $UUID$Type)

public "join"(player: $ServerPlayer$Type): integer
public "getType"(): $TeamType
public "getOwner"(): $UUID
public "getRankForPlayer"(playerId: $UUID$Type): $TeamRank
public "addAlly"(source: $CommandSourceStack$Type, players: $Collection$Type<($GameProfile$Type)>): integer
public "transferOwnership"(from: $CommandSourceStack$Type, toProfiles: $Collection$Type<($GameProfile$Type)>): integer
public "transferOwnership"(from: $CommandSourceStack$Type, toProfile: $GameProfile$Type): integer
public "removeAlly"(source: $CommandSourceStack$Type, players: $Collection$Type<($GameProfile$Type)>): integer
public "invite"(inviter: $ServerPlayer$Type, profiles: $Collection$Type<($GameProfile$Type)>): integer
public "demote"(from: $ServerPlayer$Type, players: $Collection$Type<($GameProfile$Type)>): integer
public "kick"(from: $CommandSourceStack$Type, players: $Collection$Type<($GameProfile$Type)>): integer
public "promote"(from: $ServerPlayer$Type, players: $Collection$Type<($GameProfile$Type)>): integer
public "leave"(id: $UUID$Type): integer
public "listAllies"(source: $CommandSourceStack$Type): integer
public "forceDisband"(from: $CommandSourceStack$Type): integer
public "isPartyTeam"(): boolean
public "isOwner"(profile: $UUID$Type): boolean
public "deserializeNBT"(tag: $CompoundTag$Type): void
get "type"(): $TeamType
get "owner"(): $UUID
get "partyTeam"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PartyTeam$Type = ($PartyTeam);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PartyTeam_ = $PartyTeam$Type;
}}
declare module "packages/dev/ftb/mods/ftbteams/net/$UpdatePropertiesResponseMessage" {
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$NetworkManager$PacketContext, $NetworkManager$PacketContext$Type} from "packages/dev/architectury/networking/$NetworkManager$PacketContext"
import {$BaseS2CMessage, $BaseS2CMessage$Type} from "packages/dev/architectury/networking/simple/$BaseS2CMessage"
import {$TeamPropertyCollection, $TeamPropertyCollection$Type} from "packages/dev/ftb/mods/ftbteams/api/property/$TeamPropertyCollection"
import {$MessageType, $MessageType$Type} from "packages/dev/architectury/networking/simple/$MessageType"

export class $UpdatePropertiesResponseMessage extends $BaseS2CMessage {

constructor(id: $UUID$Type, p: $TeamPropertyCollection$Type)

public "write"(buffer: $FriendlyByteBuf$Type): void
public "getType"(): $MessageType
public "handle"(context: $NetworkManager$PacketContext$Type): void
get "type"(): $MessageType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $UpdatePropertiesResponseMessage$Type = ($UpdatePropertiesResponseMessage);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $UpdatePropertiesResponseMessage_ = $UpdatePropertiesResponseMessage$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/config/ui/$ResourceSelectorScreen$StacksPanel" {
import {$Panel, $Panel$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Panel"
import {$ResourceSelectorScreen, $ResourceSelectorScreen$Type} from "packages/dev/ftb/mods/ftblibrary/config/ui/$ResourceSelectorScreen"
import {$Theme, $Theme$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Theme"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $ResourceSelectorScreen$StacksPanel extends $Panel {
 "posX": integer
 "posY": integer
 "width": integer
 "height": integer

constructor(this$0: $ResourceSelectorScreen$Type<(any)>)

public "alignWidgets"(): void
public "addWidgets"(): void
public "draw"(graphics: $GuiGraphics$Type, theme: $Theme$Type, x: integer, y: integer, w: integer, h: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ResourceSelectorScreen$StacksPanel$Type = ($ResourceSelectorScreen$StacksPanel);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ResourceSelectorScreen$StacksPanel_ = $ResourceSelectorScreen$StacksPanel$Type;
}}
declare module "packages/dev/ftb/mods/ftbxmodcompat/ftbchunks/kubejs/$FTBChunksKubeJSEvents" {
import {$EventHandler, $EventHandler$Type} from "packages/dev/latvian/mods/kubejs/event/$EventHandler"
import {$EventGroup, $EventGroup$Type} from "packages/dev/latvian/mods/kubejs/event/$EventGroup"

export interface $FTBChunksKubeJSEvents {

}

export namespace $FTBChunksKubeJSEvents {
const EVENT_GROUP: $EventGroup
const BEFORE: $EventHandler
const AFTER: $EventHandler
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FTBChunksKubeJSEvents$Type = ($FTBChunksKubeJSEvents);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FTBChunksKubeJSEvents_ = $FTBChunksKubeJSEvents$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/net/$ChangeChapterGroupResponseMessage" {
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$NetworkManager$PacketContext, $NetworkManager$PacketContext$Type} from "packages/dev/architectury/networking/$NetworkManager$PacketContext"
import {$BaseS2CMessage, $BaseS2CMessage$Type} from "packages/dev/architectury/networking/simple/$BaseS2CMessage"
import {$MessageType, $MessageType$Type} from "packages/dev/architectury/networking/simple/$MessageType"

export class $ChangeChapterGroupResponseMessage extends $BaseS2CMessage {

constructor(buffer: $FriendlyByteBuf$Type)
constructor(i: long, g: long)

public "write"(buffer: $FriendlyByteBuf$Type): void
public "getType"(): $MessageType
public "handle"(context: $NetworkManager$PacketContext$Type): void
get "type"(): $MessageType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ChangeChapterGroupResponseMessage$Type = ($ChangeChapterGroupResponseMessage);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ChangeChapterGroupResponseMessage_ = $ChangeChapterGroupResponseMessage$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/sidebar/$SidebarButtonCreatedEvent" {
import {$ListenerList, $ListenerList$Type} from "packages/net/minecraftforge/eventbus/$ListenerList"
import {$Event, $Event$Type} from "packages/net/minecraftforge/eventbus/api/$Event"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Event as $Event$0, $Event$Type as $Event$0$Type} from "packages/dev/architectury/event/$Event"
import {$SidebarButton, $SidebarButton$Type} from "packages/dev/ftb/mods/ftblibrary/sidebar/$SidebarButton"

export class $SidebarButtonCreatedEvent extends $Event {
static readonly "EVENT": $Event$0<($Consumer<($SidebarButtonCreatedEvent)>)>

constructor(b: $SidebarButton$Type)
constructor()

public "isCancelable"(): boolean
public "getButton"(): $SidebarButton
public "getListenerList"(): $ListenerList
public "hasResult"(): boolean
get "cancelable"(): boolean
get "button"(): $SidebarButton
get "listenerList"(): $ListenerList
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SidebarButtonCreatedEvent$Type = ($SidebarButtonCreatedEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SidebarButtonCreatedEvent_ = $SidebarButtonCreatedEvent$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/net/$TeamDataUpdate" {
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$TeamData, $TeamData$Type} from "packages/dev/ftb/mods/ftbquests/quest/$TeamData"

export class $TeamDataUpdate {
readonly "uuid": $UUID
readonly "name": string

constructor(buffer: $FriendlyByteBuf$Type)
constructor(data: $TeamData$Type)

public "write"(buffer: $FriendlyByteBuf$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TeamDataUpdate$Type = ($TeamDataUpdate);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TeamDataUpdate_ = $TeamDataUpdate$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/net/$ObjectCompletedMessage" {
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$NetworkManager$PacketContext, $NetworkManager$PacketContext$Type} from "packages/dev/architectury/networking/$NetworkManager$PacketContext"
import {$BaseS2CMessage, $BaseS2CMessage$Type} from "packages/dev/architectury/networking/simple/$BaseS2CMessage"
import {$MessageType, $MessageType$Type} from "packages/dev/architectury/networking/simple/$MessageType"

export class $ObjectCompletedMessage extends $BaseS2CMessage {

constructor(buffer: $FriendlyByteBuf$Type)
constructor(t: $UUID$Type, i: long)

public "write"(buffer: $FriendlyByteBuf$Type): void
public "getType"(): $MessageType
public "handle"(context: $NetworkManager$PacketContext$Type): void
get "type"(): $MessageType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ObjectCompletedMessage$Type = ($ObjectCompletedMessage);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ObjectCompletedMessage_ = $ObjectCompletedMessage$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/client/gui/quests/$OpenGuidesButton" {
import {$Panel, $Panel$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Panel"
import {$TabButton, $TabButton$Type} from "packages/dev/ftb/mods/ftbquests/client/gui/quests/$TabButton"
import {$MouseButton, $MouseButton$Type} from "packages/dev/ftb/mods/ftblibrary/ui/input/$MouseButton"

export class $OpenGuidesButton extends $TabButton {
 "posX": integer
 "posY": integer
 "width": integer
 "height": integer

constructor(panel: $Panel$Type)

public "onClicked"(button: $MouseButton$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $OpenGuidesButton$Type = ($OpenGuidesButton);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $OpenGuidesButton_ = $OpenGuidesButton$Type;
}}
declare module "packages/dev/ftb/mods/ftbteams/api/$Team" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Color4I, $Color4I$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Color4I"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$TeamRank, $TeamRank$Type} from "packages/dev/ftb/mods/ftbteams/api/$TeamRank"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$TeamMessage, $TeamMessage$Type} from "packages/dev/ftb/mods/ftbteams/api/$TeamMessage"
import {$TeamProperty, $TeamProperty$Type} from "packages/dev/ftb/mods/ftbteams/api/property/$TeamProperty"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$List, $List$Type} from "packages/java/util/$List"
import {$TeamPropertyCollection, $TeamPropertyCollection$Type} from "packages/dev/ftb/mods/ftbteams/api/property/$TeamPropertyCollection"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export interface $Team {

 "getName"(): $Component
 "getProperty"<T>(arg0: $TeamProperty$Type<(T)>): T
 "setProperty"<T>(arg0: $TeamProperty$Type<(T)>, arg1: T): void
 "getProperties"(): $TeamPropertyCollection
 "getId"(): $UUID
 "getMembers"(): $Set<($UUID)>
 "getOwner"(): $UUID
 "isValid"(): boolean
 "sendMessage"(arg0: $UUID$Type, arg1: string): void
 "getRankForPlayer"(arg0: $UUID$Type): $TeamRank
 "getExtraData"(): $CompoundTag
 "getTypeTranslationKey"(): string
 "markDirty"(): void
 "createParty"(arg0: string, arg1: $Color4I$Type): $Team
 "getMessageHistory"(): $List<($TeamMessage)>
 "getTeamId"(): $UUID
 "isPartyTeam"(): boolean
 "getOnlineMembers"(): $Collection<($ServerPlayer)>
 "isPlayerTeam"(): boolean
 "getPlayersByRank"(arg0: $TeamRank$Type): $Map<($UUID), ($TeamRank)>
 "getTeamInfo"(): $List<($Component)>
 "getColoredName"(): $Component
 "isServerTeam"(): boolean
 "isClientTeam"(): boolean
 "getShortName"(): string
}

export namespace $Team {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Team$Type = ($Team);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Team_ = $Team$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/icon/$PartIcon" {
import {$JsonElement, $JsonElement$Type} from "packages/com/google/gson/$JsonElement"
import {$IconWithParent, $IconWithParent$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$IconWithParent"
import {$Icon, $Icon$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Icon"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $PartIcon extends $IconWithParent {
readonly "parent": $Icon
 "textureWidth": integer
 "textureHeight": integer
 "posX": integer
 "posY": integer
 "corner": integer
 "width": integer
 "height": integer

constructor(icon: $Icon$Type)
constructor(icon: $Icon$Type, x: integer, y: integer, w: integer, h: integer, c: integer)
constructor(icon: $Icon$Type, textureU: integer, textureV: integer, subWidth: integer, subHeight: integer, corner: integer, textureWidth: integer, textureHeight: integer)
constructor(iconId: $ResourceLocation$Type, textureU: integer, textureV: integer, subWidth: integer, subHeight: integer, corner: integer, textureWidth: integer, textureHeight: integer)

public "copy"(): $PartIcon
public "draw"(graphics: $GuiGraphics$Type, x: integer, y: integer, w: integer, h: integer): void
public static "wholeTexture"(textureId: $ResourceLocation$Type, textureWidth: integer, textureHeight: integer, corner: integer): $PartIcon
public "setTextureSize"(w: integer, h: integer): $PartIcon
public "getJson"(): $JsonElement
public "updateParts"(): void
get "json"(): $JsonElement
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PartIcon$Type = ($PartIcon);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PartIcon_ = $PartIcon$Type;
}}
declare module "packages/dev/ftb/mods/ftbxmodcompat/ftbquests/recipemod_common/$WrappedQuest" {
import {$Quest, $Quest$Type} from "packages/dev/ftb/mods/ftbquests/quest/$Quest"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Ingredient, $Ingredient$Type} from "packages/net/minecraft/world/item/crafting/$Ingredient"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Reward, $Reward$Type} from "packages/dev/ftb/mods/ftbquests/quest/reward/$Reward"

export class $WrappedQuest {
readonly "quest": $Quest
readonly "input": $List<($List<($ItemStack)>)>
readonly "output": $List<($List<($ItemStack)>)>

constructor(q: $Quest$Type, rewards: $List$Type<($Reward$Type)>)

public "openQuestGui"(): void
public "hasInput"(stack: $ItemStack$Type): boolean
public "hasOutput"(stack: $ItemStack$Type): boolean
public "outputIngredients"(): $List<($Ingredient)>
public "inputIngredients"(): $List<($Ingredient)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WrappedQuest$Type = ($WrappedQuest);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WrappedQuest_ = $WrappedQuest$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/quest/task/$EnergyTask" {
import {$Quest, $Quest$Type} from "packages/dev/ftb/mods/ftbquests/quest/$Quest"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$ConfigGroup, $ConfigGroup$Type} from "packages/dev/ftb/mods/ftblibrary/config/$ConfigGroup"
import {$ISingleLongValueTask, $ISingleLongValueTask$Type} from "packages/dev/ftb/mods/ftbquests/quest/task/$ISingleLongValueTask"
import {$Task, $Task$Type} from "packages/dev/ftb/mods/ftbquests/quest/task/$Task"
import {$EnergyTaskClientData, $EnergyTaskClientData$Type} from "packages/dev/ftb/mods/ftbquests/client/$EnergyTaskClientData"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"

export class $EnergyTask extends $Task implements $ISingleLongValueTask {
readonly "id": long

constructor(id: long, quest: $Quest$Type)

public "getValue"(): long
public "setValue"(v: long): void
public "readData"(nbt: $CompoundTag$Type): void
public "getMaxInput"(): long
public "getClientData"(): $EnergyTaskClientData
public "getMaxProgress"(): long
public "consumesResources"(): boolean
public "writeNetData"(buffer: $FriendlyByteBuf$Type): void
public "writeData"(nbt: $CompoundTag$Type): void
public "fillConfigGroup"(config: $ConfigGroup$Type): void
public "readNetData"(buffer: $FriendlyByteBuf$Type): void
public "getDefaultConfigValue"(): long
public "getMaxConfigValue"(): long
public "getMinConfigValue"(): long
get "value"(): long
set "value"(value: long)
get "maxInput"(): long
get "clientData"(): $EnergyTaskClientData
get "maxProgress"(): long
get "defaultConfigValue"(): long
get "maxConfigValue"(): long
get "minConfigValue"(): long
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EnergyTask$Type = ($EnergyTask);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EnergyTask_ = $EnergyTask$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/util/$NBTUtils" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Tag, $Tag$Type} from "packages/net/minecraft/nbt/$Tag"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export class $NBTUtils {

constructor()

public static "write"(nbt: $CompoundTag$Type, key: string, stack: $ItemStack$Type): void
public static "read"(nbt: $CompoundTag$Type, key: string): $ItemStack
public static "compareNbt"(tagA: $Tag$Type, tagB: $Tag$Type, fuzzy: boolean, compareLists: boolean): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $NBTUtils$Type = ($NBTUtils);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $NBTUtils_ = $NBTUtils$Type;
}}
declare module "packages/dev/ftb/mods/ftbteams/client/$KnownClientPlayerNet" {
import {$KnownClientPlayer, $KnownClientPlayer$Type} from "packages/dev/ftb/mods/ftbteams/api/client/$KnownClientPlayer"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"

export class $KnownClientPlayerNet {

constructor()

public static "write"(kcp: $KnownClientPlayer$Type, buf: $FriendlyByteBuf$Type): void
public static "fromNetwork"(buf: $FriendlyByteBuf$Type): $KnownClientPlayer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $KnownClientPlayerNet$Type = ($KnownClientPlayerNet);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $KnownClientPlayerNet_ = $KnownClientPlayerNet$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/quest/reward/$CommandReward" {
import {$Quest, $Quest$Type} from "packages/dev/ftb/mods/ftbquests/quest/$Quest"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$ConfigGroup, $ConfigGroup$Type} from "packages/dev/ftb/mods/ftblibrary/config/$ConfigGroup"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$Reward, $Reward$Type} from "packages/dev/ftb/mods/ftbquests/quest/reward/$Reward"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$RewardType, $RewardType$Type} from "packages/dev/ftb/mods/ftbquests/quest/reward/$RewardType"

export class $CommandReward extends $Reward {
readonly "id": long

constructor(id: long, quest: $Quest$Type)

public "getType"(): $RewardType
public "claim"(player: $ServerPlayer$Type, notify: boolean): void
public "readData"(nbt: $CompoundTag$Type): void
public "getAltTitle"(): $MutableComponent
public "writeNetData"(buffer: $FriendlyByteBuf$Type): void
public "writeData"(nbt: $CompoundTag$Type): void
public "fillConfigGroup"(config: $ConfigGroup$Type): void
public "readNetData"(buffer: $FriendlyByteBuf$Type): void
get "type"(): $RewardType
get "altTitle"(): $MutableComponent
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CommandReward$Type = ($CommandReward);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CommandReward_ = $CommandReward$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/client/gui/quests/$OtherButtonsPanelBottom" {
import {$Panel, $Panel$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Panel"
import {$OtherButtonsPanel, $OtherButtonsPanel$Type} from "packages/dev/ftb/mods/ftbquests/client/gui/quests/$OtherButtonsPanel"

export class $OtherButtonsPanelBottom extends $OtherButtonsPanel {
 "posX": integer
 "posY": integer
 "width": integer
 "height": integer

constructor(panel: $Panel$Type)

public "alignWidgets"(): void
public "addWidgets"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $OtherButtonsPanelBottom$Type = ($OtherButtonsPanelBottom);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $OtherButtonsPanelBottom_ = $OtherButtonsPanelBottom$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/quest/reward/$XPLevelsReward" {
import {$Quest, $Quest$Type} from "packages/dev/ftb/mods/ftbquests/quest/$Quest"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$ConfigGroup, $ConfigGroup$Type} from "packages/dev/ftb/mods/ftblibrary/config/$ConfigGroup"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$Reward, $Reward$Type} from "packages/dev/ftb/mods/ftbquests/quest/reward/$Reward"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$RewardType, $RewardType$Type} from "packages/dev/ftb/mods/ftbquests/quest/reward/$RewardType"

export class $XPLevelsReward extends $Reward {
readonly "id": long

constructor(id: long, quest: $Quest$Type, x: integer)
constructor(id: long, quest: $Quest$Type)

public "getType"(): $RewardType
public "getButtonText"(): string
public "claim"(player: $ServerPlayer$Type, notify: boolean): void
public "readData"(nbt: $CompoundTag$Type): void
public "getAltTitle"(): $MutableComponent
public "writeNetData"(buffer: $FriendlyByteBuf$Type): void
public "writeData"(nbt: $CompoundTag$Type): void
public "fillConfigGroup"(config: $ConfigGroup$Type): void
public "readNetData"(buffer: $FriendlyByteBuf$Type): void
get "type"(): $RewardType
get "buttonText"(): string
get "altTitle"(): $MutableComponent
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $XPLevelsReward$Type = ($XPLevelsReward);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $XPLevelsReward_ = $XPLevelsReward$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/block/entity/$StageBarrierBlockEntity" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$ClientGamePacketListener, $ClientGamePacketListener$Type} from "packages/net/minecraft/network/protocol/game/$ClientGamePacketListener"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$Packet, $Packet$Type} from "packages/net/minecraft/network/protocol/$Packet"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BarrierBlockEntity, $BarrierBlockEntity$Type} from "packages/dev/ftb/mods/ftbquests/block/entity/$BarrierBlockEntity"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $StageBarrierBlockEntity extends $BlockEntity implements $BarrierBlockEntity {
 "blockState": $BlockState

constructor(blockPos: $BlockPos$Type, blockState: $BlockState$Type)

public "update"(stage: string): void
public "isOpen"(player: $Player$Type): boolean
public "setChanged"(): void
public "load"(tag: $CompoundTag$Type): void
public "m_183515_"(tag: $CompoundTag$Type): void
public "getUpdateTag"(): $CompoundTag
public "getUpdatePacket"(): $Packet<($ClientGamePacketListener)>
public static "tick"(level: $Level$Type, blockPos: $BlockPos$Type, blockState: $BlockState$Type, blockEntity: $BlockEntity$Type): void
get "updateTag"(): $CompoundTag
get "updatePacket"(): $Packet<($ClientGamePacketListener)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $StageBarrierBlockEntity$Type = ($StageBarrierBlockEntity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $StageBarrierBlockEntity_ = $StageBarrierBlockEntity$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/block/forge/$ForgeTaskScreenAuxBlockEntity" {
import {$LazyOptional, $LazyOptional$Type} from "packages/net/minecraftforge/common/util/$LazyOptional"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Capability, $Capability$Type} from "packages/net/minecraftforge/common/capabilities/$Capability"
import {$TaskScreenAuxBlockEntity, $TaskScreenAuxBlockEntity$Type} from "packages/dev/ftb/mods/ftbquests/block/entity/$TaskScreenAuxBlockEntity"

export class $ForgeTaskScreenAuxBlockEntity extends $TaskScreenAuxBlockEntity {
 "blockState": $BlockState

constructor(blockPos: $BlockPos$Type, blockState: $BlockState$Type)

public "getCapability"<T>(cap: $Capability$Type<(T)>, side: $Direction$Type): $LazyOptional<(T)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ForgeTaskScreenAuxBlockEntity$Type = ($ForgeTaskScreenAuxBlockEntity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ForgeTaskScreenAuxBlockEntity_ = $ForgeTaskScreenAuxBlockEntity$Type;
}}
declare module "packages/dev/ftb/mods/ftbxmodcompat/ftbquests/jei/$FTBQuestsJEIIntegration" {
import {$IGuiHandlerRegistration, $IGuiHandlerRegistration$Type} from "packages/mezz/jei/api/registration/$IGuiHandlerRegistration"
import {$IAdvancedRegistration, $IAdvancedRegistration$Type} from "packages/mezz/jei/api/registration/$IAdvancedRegistration"
import {$IJeiConfigManager, $IJeiConfigManager$Type} from "packages/mezz/jei/api/runtime/config/$IJeiConfigManager"
import {$IVanillaCategoryExtensionRegistration, $IVanillaCategoryExtensionRegistration$Type} from "packages/mezz/jei/api/registration/$IVanillaCategoryExtensionRegistration"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$IRecipeTransferRegistration, $IRecipeTransferRegistration$Type} from "packages/mezz/jei/api/registration/$IRecipeTransferRegistration"
import {$IRecipeRegistration, $IRecipeRegistration$Type} from "packages/mezz/jei/api/registration/$IRecipeRegistration"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$IJeiRuntime, $IJeiRuntime$Type} from "packages/mezz/jei/api/runtime/$IJeiRuntime"
import {$IRecipeCatalystRegistration, $IRecipeCatalystRegistration$Type} from "packages/mezz/jei/api/registration/$IRecipeCatalystRegistration"
import {$IModPlugin, $IModPlugin$Type} from "packages/mezz/jei/api/$IModPlugin"
import {$IRuntimeRegistration, $IRuntimeRegistration$Type} from "packages/mezz/jei/api/registration/$IRuntimeRegistration"
import {$IRecipeCategoryRegistration, $IRecipeCategoryRegistration$Type} from "packages/mezz/jei/api/registration/$IRecipeCategoryRegistration"
import {$IModIngredientRegistration, $IModIngredientRegistration$Type} from "packages/mezz/jei/api/registration/$IModIngredientRegistration"
import {$ISubtypeRegistration, $ISubtypeRegistration$Type} from "packages/mezz/jei/api/registration/$ISubtypeRegistration"
import {$IPlatformFluidHelper, $IPlatformFluidHelper$Type} from "packages/mezz/jei/api/helpers/$IPlatformFluidHelper"

export class $FTBQuestsJEIIntegration implements $IModPlugin {
static "runtime": $IJeiRuntime

constructor()

public static "showRecipes"(stack: $ItemStack$Type): void
public "registerItemSubtypes"(r: $ISubtypeRegistration$Type): void
public "registerRecipeCatalysts"(registration: $IRecipeCatalystRegistration$Type): void
public "getPluginUid"(): $ResourceLocation
public "registerAdvanced"(registration: $IAdvancedRegistration$Type): void
public "onRuntimeAvailable"(r: $IJeiRuntime$Type): void
public "registerCategories"(r: $IRecipeCategoryRegistration$Type): void
public "registerVanillaCategoryExtensions"(arg0: $IVanillaCategoryExtensionRegistration$Type): void
public "registerFluidSubtypes"<T>(arg0: $ISubtypeRegistration$Type, arg1: $IPlatformFluidHelper$Type<(T)>): void
public "onConfigManagerAvailable"(arg0: $IJeiConfigManager$Type): void
public "registerGuiHandlers"(arg0: $IGuiHandlerRegistration$Type): void
public "onRuntimeUnavailable"(): void
public "registerIngredients"(arg0: $IModIngredientRegistration$Type): void
public "registerRecipeTransferHandlers"(arg0: $IRecipeTransferRegistration$Type): void
public "registerRecipes"(arg0: $IRecipeRegistration$Type): void
public "registerRuntime"(arg0: $IRuntimeRegistration$Type): void
get "pluginUid"(): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FTBQuestsJEIIntegration$Type = ($FTBQuestsJEIIntegration);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FTBQuestsJEIIntegration_ = $FTBQuestsJEIIntegration$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/ui/misc/$AbstractButtonListScreen$ButtonPanel" {
import {$Panel, $Panel$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Panel"
import {$Widget, $Widget$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Widget"
import {$AbstractButtonListScreen, $AbstractButtonListScreen$Type} from "packages/dev/ftb/mods/ftblibrary/ui/misc/$AbstractButtonListScreen"

export class $AbstractButtonListScreen$ButtonPanel extends $Panel {
 "posX": integer
 "posY": integer
 "width": integer
 "height": integer

constructor(this$0: $AbstractButtonListScreen$Type)

public "add"(widget: $Widget$Type): void
public "alignWidgets"(): void
public "addWidgets"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AbstractButtonListScreen$ButtonPanel$Type = ($AbstractButtonListScreen$ButtonPanel);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AbstractButtonListScreen$ButtonPanel_ = $AbstractButtonListScreen$ButtonPanel$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/config/ui/$EditConfigListScreen$Deletable" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $EditConfigListScreen$Deletable {

 "deleteItem"(): void

(): void
}

export namespace $EditConfigListScreen$Deletable {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EditConfigListScreen$Deletable$Type = ($EditConfigListScreen$Deletable);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EditConfigListScreen$Deletable_ = $EditConfigListScreen$Deletable$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/block/entity/$DetectorBlockEntity" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $DetectorBlockEntity extends $BlockEntity {
 "blockState": $BlockState

constructor(blockPos: $BlockPos$Type, blockState: $BlockState$Type)

public "update"(idStr: string): void
public "onPowered"(level: $Level$Type, pos: $BlockPos$Type): void
public "load"(tag: $CompoundTag$Type): void
public "m_183515_"(tag: $CompoundTag$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DetectorBlockEntity$Type = ($DetectorBlockEntity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DetectorBlockEntity_ = $DetectorBlockEntity$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/net/$GetEmergencyItemsMessage" {
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$NetworkManager$PacketContext, $NetworkManager$PacketContext$Type} from "packages/dev/architectury/networking/$NetworkManager$PacketContext"
import {$BaseC2SMessage, $BaseC2SMessage$Type} from "packages/dev/architectury/networking/simple/$BaseC2SMessage"
import {$MessageType, $MessageType$Type} from "packages/dev/architectury/networking/simple/$MessageType"

export class $GetEmergencyItemsMessage extends $BaseC2SMessage {

constructor()

public "write"(buffer: $FriendlyByteBuf$Type): void
public "getType"(): $MessageType
public "handle"(context: $NetworkManager$PacketContext$Type): void
get "type"(): $MessageType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GetEmergencyItemsMessage$Type = ($GetEmergencyItemsMessage);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GetEmergencyItemsMessage_ = $GetEmergencyItemsMessage$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/client/gui/quests/$OtherButtonsPanelTop" {
import {$Panel, $Panel$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Panel"
import {$OtherButtonsPanel, $OtherButtonsPanel$Type} from "packages/dev/ftb/mods/ftbquests/client/gui/quests/$OtherButtonsPanel"

export class $OtherButtonsPanelTop extends $OtherButtonsPanel {
 "posX": integer
 "posY": integer
 "width": integer
 "height": integer

constructor(panel: $Panel$Type)

public "alignWidgets"(): void
public "addWidgets"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $OtherButtonsPanelTop$Type = ($OtherButtonsPanelTop);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $OtherButtonsPanelTop_ = $OtherButtonsPanelTop$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/net/$SyncStructuresResponseMessage" {
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$NetworkManager$PacketContext, $NetworkManager$PacketContext$Type} from "packages/dev/architectury/networking/$NetworkManager$PacketContext"
import {$MinecraftServer, $MinecraftServer$Type} from "packages/net/minecraft/server/$MinecraftServer"
import {$BaseS2CMessage, $BaseS2CMessage$Type} from "packages/dev/architectury/networking/simple/$BaseS2CMessage"
import {$MessageType, $MessageType$Type} from "packages/dev/architectury/networking/simple/$MessageType"

export class $SyncStructuresResponseMessage extends $BaseS2CMessage {

constructor(server: $MinecraftServer$Type)
constructor(buf: $FriendlyByteBuf$Type)

public "write"(buf: $FriendlyByteBuf$Type): void
public "getType"(): $MessageType
public "handle"(context: $NetworkManager$PacketContext$Type): void
get "type"(): $MessageType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SyncStructuresResponseMessage$Type = ($SyncStructuresResponseMessage);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SyncStructuresResponseMessage_ = $SyncStructuresResponseMessage$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/config/$NameMap" {
import {$Color4I, $Color4I$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Color4I"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Icon, $Icon$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Icon"
import {$Random, $Random$Type} from "packages/java/util/$Random"
import {$Spliterator, $Spliterator$Type} from "packages/java/util/$Spliterator"
import {$Iterable, $Iterable$Type} from "packages/java/lang/$Iterable"
import {$NameMap$Builder, $NameMap$Builder$Type} from "packages/dev/ftb/mods/ftblibrary/config/$NameMap$Builder"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Iterator, $Iterator$Type} from "packages/java/util/$Iterator"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $NameMap<E> implements $Iterable<(E)> {
readonly "defaultValue": E
readonly "map": $Map<(string), (E)>
readonly "keys": $List<(string)>
readonly "values": $List<(E)>


public "getName"(value: E): string
public "get"(s: string): E
public "get"(index: integer): E
public "size"(): integer
public "iterator"(): $Iterator<(E)>
public static "of"<T>(defaultValue: T, values: $List$Type<(T)>): $NameMap$Builder<(T)>
public static "of"<T>(defaultValue: T, values: (T)[]): $NameMap$Builder<(T)>
public "offset"(value: E, index: integer): E
public "write"(data: $FriendlyByteBuf$Type, object: E): void
public "read"(data: $FriendlyByteBuf$Type): E
public "getIndex"(e: E): integer
public "getDisplayName"(value: E): $Component
public "getNext"(value: E): E
public "getPrevious"(value: E): E
public "getIcon"(v: E): $Icon
public "getStringIndex"(s: string): integer
public "withDefault"(def: E): $NameMap<(E)>
public "getColor"(value: E): $Color4I
public "getNullable"(s: string): E
public "getRandom"(rand: $Random$Type): E
public "spliterator"(): $Spliterator<(E)>
public "forEach"(arg0: $Consumer$Type<(any)>): void
[Symbol.iterator](): IterableIterator<E>;
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $NameMap$Type<E> = ($NameMap<(E)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $NameMap_<E> = $NameMap$Type<(E)>;
}}
declare module "packages/dev/ftb/mods/ftbquests/quest/task/$FluidTask" {
import {$Quest, $Quest$Type} from "packages/dev/ftb/mods/ftbquests/quest/$Quest"
import {$PositionedIngredient, $PositionedIngredient$Type} from "packages/dev/ftb/mods/ftblibrary/util/client/$PositionedIngredient"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Fluid, $Fluid$Type} from "packages/net/minecraft/world/level/material/$Fluid"
import {$ConfigGroup, $ConfigGroup$Type} from "packages/dev/ftb/mods/ftblibrary/config/$ConfigGroup"
import {$Task, $Task$Type} from "packages/dev/ftb/mods/ftbquests/quest/task/$Task"
import {$Widget, $Widget$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Widget"
import {$Icon, $Icon$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Icon"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$FluidStack, $FluidStack$Type} from "packages/dev/architectury/fluid/$FluidStack"
import {$TeamData, $TeamData$Type} from "packages/dev/ftb/mods/ftbquests/quest/$TeamData"
import {$TaskType, $TaskType$Type} from "packages/dev/ftb/mods/ftbquests/quest/task/$TaskType"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"

export class $FluidTask extends $Task {
static readonly "TANK_TEXTURE": $ResourceLocation
readonly "id": long

constructor(id: long, quest: $Quest$Type)

public "getType"(): $TaskType
public "getIngredient"(widget: $Widget$Type): $Optional<($PositionedIngredient)>
public "readData"(nbt: $CompoundTag$Type): void
public "getAltIcon"(): $Icon
public "setFluid"(fluid: $Fluid$Type): $FluidTask
public "getFluidNBT"(): $CompoundTag
public static "getVolumeString"(a: long): string
public "createFluidStack"(): $FluidStack
public "clearCachedData"(): void
public "formatMaxProgress"(): string
public "getMaxProgress"(): long
public "formatProgress"(teamData: $TeamData$Type, progress: long): string
public "consumesResources"(): boolean
public "canInsertItem"(): boolean
public "writeNetData"(buffer: $FriendlyByteBuf$Type): void
public "writeData"(nbt: $CompoundTag$Type): void
public "getFluid"(): $Fluid
public "fillConfigGroup"(config: $ConfigGroup$Type): void
public "readNetData"(buffer: $FriendlyByteBuf$Type): void
get "type"(): $TaskType
get "altIcon"(): $Icon
set "fluid"(value: $Fluid$Type)
get "fluidNBT"(): $CompoundTag
get "maxProgress"(): long
get "fluid"(): $Fluid
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FluidTask$Type = ($FluidTask);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FluidTask_ = $FluidTask$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/quest/loot/$EntityWeight" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $EntityWeight {
 "passive": integer
 "monster": integer
 "boss": integer

constructor()

public "readData"(nbt: $CompoundTag$Type): void
public "getWeight"(entity: $Entity$Type): integer
public "writeNetData"(data: $FriendlyByteBuf$Type): void
public "writeData"(nbt: $CompoundTag$Type): void
public "readNetData"(data: $FriendlyByteBuf$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EntityWeight$Type = ($EntityWeight);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EntityWeight_ = $EntityWeight$Type;
}}
declare module "packages/dev/ftb/mods/ftbxmodcompat/ftbchunks/ftbranks/$FTBRanksEventHandler" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $FTBRanksEventHandler {

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FTBRanksEventHandler$Type = ($FTBRanksEventHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FTBRanksEventHandler_ = $FTBRanksEventHandler$Type;
}}
declare module "packages/dev/ftb/mods/ftbxmodcompat/ftbquests/kubejs/$FTBQuestsKubeJSTeamDataWrapper" {
import {$BaseQuestFile, $BaseQuestFile$Type} from "packages/dev/ftb/mods/ftbquests/quest/$BaseQuestFile"
import {$FTBQuestsKubeJSTeamData, $FTBQuestsKubeJSTeamData$Type} from "packages/dev/ftb/mods/ftbxmodcompat/ftbquests/kubejs/$FTBQuestsKubeJSTeamData"
import {$TeamData, $TeamData$Type} from "packages/dev/ftb/mods/ftbquests/quest/$TeamData"

export class $FTBQuestsKubeJSTeamDataWrapper extends $FTBQuestsKubeJSTeamData {

constructor(d: $TeamData$Type)

public "getFile"(): $BaseQuestFile
public "getData"(): $TeamData
get "file"(): $BaseQuestFile
get "data"(): $TeamData
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FTBQuestsKubeJSTeamDataWrapper$Type = ($FTBQuestsKubeJSTeamDataWrapper);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FTBQuestsKubeJSTeamDataWrapper_ = $FTBQuestsKubeJSTeamDataWrapper$Type;
}}
declare module "packages/dev/ftb/mods/ftbxmodcompat/ftbteams/kubejs/$KJSTeamWrapper" {
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Team, $Team$Type} from "packages/dev/ftb/mods/ftbteams/api/$Team"

export class $KJSTeamWrapper {

constructor(team: $Team$Type)

public "getName"(): string
public "getId"(): $UUID
public "isPartyTeam"(): boolean
get "name"(): string
get "id"(): $UUID
get "partyTeam"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $KJSTeamWrapper$Type = ($KJSTeamWrapper);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $KJSTeamWrapper_ = $KJSTeamWrapper$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/util/forge/$FluidKey" {
import {$FluidStack, $FluidStack$Type} from "packages/net/minecraftforge/fluids/$FluidStack"

export class $FluidKey {
readonly "stack": $FluidStack

constructor(s: $FluidStack$Type)

public "equals"(o: any): boolean
public "hashCode"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FluidKey$Type = ($FluidKey);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FluidKey_ = $FluidKey$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/net/$FTBQuestsNetHandler" {
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$SimpleNetworkManager, $SimpleNetworkManager$Type} from "packages/dev/architectury/networking/simple/$SimpleNetworkManager"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MessageType, $MessageType$Type} from "packages/dev/architectury/networking/simple/$MessageType"

export interface $FTBQuestsNetHandler {

}

export namespace $FTBQuestsNetHandler {
const NET: $SimpleNetworkManager
const SYNC_QUESTS: $MessageType
const SYNC_TEAM_DATA: $MessageType
const UPDATE_TASK_PROGRESS: $MessageType
const SUBMIT_TASK: $MessageType
const CLAIM_REWARD: $MessageType
const CLAIM_REWARD_RESPONSE: $MessageType
const SYNC_EDITING_MODE: $MessageType
const GET_EMERGENCY_ITEMS: $MessageType
const CREATE_OTHER_TEAM_DATA: $MessageType
const CLAIM_ALL_REWARDS: $MessageType
const CLAIM_CHOICE_REWARD: $MessageType
const DISPLAY_COMPLETION_TOAST: $MessageType
const DISPLAY_REWARD_TOAST: $MessageType
const DISPLAY_ITEM_REWARD_TOAST: $MessageType
const TOGGLE_PINNED: $MessageType
const TOGGLE_PINNED_RESPONSE: $MessageType
const TOGGLE_CHAPTER_PINNED: $MessageType
const TOGGLE_CHAPTER_PINNED_RESPONSE: $MessageType
const TOGGLE_EDITING_MODE: $MessageType
const FORCE_SAVE: $MessageType
const UPDATE_TEAM_DATA: $MessageType
const SET_CUSTOM_IMAGE: $MessageType
const OBJECT_STARTED: $MessageType
const OBJECT_COMPLETED: $MessageType
const OBJECT_STARTED_RESET: $MessageType
const OBJECT_COMPLETED_RESET: $MessageType
const SYNC_LOCK: $MessageType
const RESET_REWARD: $MessageType
const TEAM_DATA_CHANGED: $MessageType
const TASK_SCREEN_CONFIG_REQ: $MessageType
const TASK_SCREEN_CONFIG_RESP: $MessageType
const CHANGE_PROGRESS: $MessageType
const CREATE_OBJECT: $MessageType
const CREATE_OBJECT_RESPONSE: $MessageType
const CREATE_TASK_AT: $MessageType
const DELETE_OBJECT: $MessageType
const DELETE_OBJECT_RESPONSE: $MessageType
const EDIT_OBJECT: $MessageType
const EDIT_OBJECT_RESPONSE: $MessageType
const MOVE_CHAPTER: $MessageType
const MOVE_CHAPTER_RESPONSE: $MessageType
const MOVE_QUEST: $MessageType
const MOVE_QUEST_RESPONSE: $MessageType
const CHANGE_CHAPTER_GROUP: $MessageType
const CHANGE_CHAPTER_GROUP_RESPONSE: $MessageType
const MOVE_CHAPTER_GROUP: $MessageType
const MOVE_CHAPTER_GROUP_RESPONSE: $MessageType
const SYNC_REWARD_BLOCKING: $MessageType
const COPY_QUEST: $MessageType
const COPY_CHAPTER_IMAGE: $MessageType
const SYNC_STRUCTURES_REQUEST: $MessageType
const SYNC_STRUCTURES_RESPONSE: $MessageType
const REQUEST_TEAM_DATA: $MessageType
const SYNC_EDITOR_PERMISSION: $MessageType
const OPEN_QUEST_BOOK: $MessageType
const CLEAR_DISPLAY_CACHE: $MessageType
function init(): void
function writeItemType(buffer: $FriendlyByteBuf$Type, stack: $ItemStack$Type): void
function readItemType(buffer: $FriendlyByteBuf$Type): $ItemStack
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FTBQuestsNetHandler$Type = ($FTBQuestsNetHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FTBQuestsNetHandler_ = $FTBQuestsNetHandler$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/snbt/$SNBTUtils" {
import {$BooleanSupplier, $BooleanSupplier$Type} from "packages/java/util/function/$BooleanSupplier"

export class $SNBTUtils {
static readonly "ALWAYS_TRUE": $BooleanSupplier
static readonly "ESCAPE_CHARS": (character)[]
static readonly "REVERSE_ESCAPE_CHARS": (character)[]

constructor()

public static "quoteAndEscape"(string: string): string
public static "handleEscape"(string: string): string
public static "isSimpleCharacter"(c: character): boolean
public static "getNumberType"(s: string): integer
public static "isSimpleString"(string: string): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SNBTUtils$Type = ($SNBTUtils);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SNBTUtils_ = $SNBTUtils$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/net/$CreateObjectResponseMessage" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$QuestObjectBase, $QuestObjectBase$Type} from "packages/dev/ftb/mods/ftbquests/quest/$QuestObjectBase"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$NetworkManager$PacketContext, $NetworkManager$PacketContext$Type} from "packages/dev/architectury/networking/$NetworkManager$PacketContext"
import {$BaseS2CMessage, $BaseS2CMessage$Type} from "packages/dev/architectury/networking/simple/$BaseS2CMessage"
import {$MessageType, $MessageType$Type} from "packages/dev/architectury/networking/simple/$MessageType"

export class $CreateObjectResponseMessage extends $BaseS2CMessage {

constructor(o: $QuestObjectBase$Type, e: $CompoundTag$Type, creator: $UUID$Type)
constructor(o: $QuestObjectBase$Type, e: $CompoundTag$Type)
constructor(buffer: $FriendlyByteBuf$Type)

public "write"(buffer: $FriendlyByteBuf$Type): void
public "getType"(): $MessageType
public "handle"(context: $NetworkManager$PacketContext$Type): void
get "type"(): $MessageType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CreateObjectResponseMessage$Type = ($CreateObjectResponseMessage);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CreateObjectResponseMessage_ = $CreateObjectResponseMessage$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/util/$FTBQuestsInventoryListener" {
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$AbstractContainerMenu, $AbstractContainerMenu$Type} from "packages/net/minecraft/world/inventory/$AbstractContainerMenu"
import {$ContainerListener, $ContainerListener$Type} from "packages/net/minecraft/world/inventory/$ContainerListener"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export class $FTBQuestsInventoryListener implements $ContainerListener {
readonly "player": $ServerPlayer

constructor(p: $ServerPlayer$Type)

public static "detect"(player: $ServerPlayer$Type, craftedItem: $ItemStack$Type, sourceTask: long): void
public "slotChanged"(menu: $AbstractContainerMenu$Type, index: integer, stack: $ItemStack$Type): void
public "dataChanged"(abstractContainerMenu: $AbstractContainerMenu$Type, i: integer, j: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FTBQuestsInventoryListener$Type = ($FTBQuestsInventoryListener);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FTBQuestsInventoryListener_ = $FTBQuestsInventoryListener$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/config/$BooleanConfig" {
import {$Color4I, $Color4I$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Color4I"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Icon, $Icon$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Icon"
import {$ConfigWithVariants, $ConfigWithVariants$Type} from "packages/dev/ftb/mods/ftblibrary/config/$ConfigWithVariants"

export class $BooleanConfig extends $ConfigWithVariants<(boolean)> {
static readonly "TRUE_TEXT": $Component
static readonly "FALSE_TEXT": $Component
static readonly "NULL_TEXT": $Component
 "id": string

constructor()

public "getIcon"(v: boolean): $Icon
public "getIteration"(currentValue: boolean, next: boolean): boolean
public "getColor"(v: boolean): $Color4I
public "getStringForGUI"(v: boolean): $Component
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BooleanConfig$Type = ($BooleanConfig);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BooleanConfig_ = $BooleanConfig$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/icon/$URLImageIcon" {
import {$ImageIcon, $ImageIcon$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$ImageIcon"
import {$Color4I, $Color4I$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Color4I"
import {$URI, $URI$Type} from "packages/java/net/$URI"
import {$PixelBuffer, $PixelBuffer$Type} from "packages/dev/ftb/mods/ftblibrary/math/$PixelBuffer"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $URLImageIcon extends $ImageIcon {
readonly "uri": $URI
static readonly "MISSING_IMAGE": $ResourceLocation
readonly "texture": $ResourceLocation
 "minU": float
 "minV": float
 "maxU": float
 "maxV": float
 "tileSize": double
 "color": $Color4I

constructor(tex: $ResourceLocation$Type, _uri: $URI$Type)
constructor(uri: $URI$Type)

public "toString"(): string
public "createPixelBuffer"(): $PixelBuffer
public "bindTexture"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $URLImageIcon$Type = ($URLImageIcon);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $URLImageIcon_ = $URLImageIcon$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/ui/$TextBox" {
import {$Color4I, $Color4I$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Color4I"
import {$Panel, $Panel$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Panel"
import {$KeyModifiers, $KeyModifiers$Type} from "packages/dev/ftb/mods/ftblibrary/ui/input/$KeyModifiers"
import {$CursorType, $CursorType$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$CursorType"
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$Widget, $Widget$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Widget"
import {$IFocusableWidget, $IFocusableWidget$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$IFocusableWidget"
import {$Key, $Key$Type} from "packages/dev/ftb/mods/ftblibrary/ui/input/$Key"
import {$Theme, $Theme$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Theme"
import {$MouseButton, $MouseButton$Type} from "packages/dev/ftb/mods/ftblibrary/ui/input/$MouseButton"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $TextBox extends $Widget implements $IFocusableWidget {
 "charLimit": integer
 "textColor": $Color4I
 "ghostText": string
 "posX": integer
 "posY": integer
 "width": integer
 "height": integer

constructor(panel: $Panel$Type)

public "getText"(): string
public "isValid"(txt: string): boolean
public "setFilter"(filter: $Predicate$Type<(string)>): void
public "setText"(s: string): void
public "setText"(string: string, triggerChange: boolean): void
public "setWidth"(v: integer): void
public "keyPressed"(key: $Key$Type): boolean
public "draw"(graphics: $GuiGraphics$Type, theme: $Theme$Type, x: integer, y: integer, w: integer, h: integer): void
public "getCursor"(): $CursorType
public "setFocused"(focused: boolean): void
public "mousePressed"(button: $MouseButton$Type): boolean
public "getFormattedText"(): string
public "isFocused"(): boolean
public "setMaxLength"(maxLength: integer): void
public "getCursorPos"(): integer
public "getSelectedText"(): string
public "moveCursorToEnd"(extendSelection: boolean): void
public "setSelectionPos"(i: integer): void
public "allowInput"(): boolean
public "insertText"(string: string): void
public "setCursorPosition"(pos: integer): void
public "onTextChanged"(): void
public "drawTextBox"(graphics: $GuiGraphics$Type, theme: $Theme$Type, x: integer, y: integer, w: integer, h: integer): void
public "deleteWords"(count: integer): void
public "onTabPressed"(): void
public "moveCursor"(pos: integer, extendSelection: boolean): void
public "getWordPosition"(count: integer): integer
public "moveCursorTo"(pos: integer, extendSelection: boolean): void
public "moveCursorToStart"(extendSelection: boolean): void
public "setCursorPos"(pos: integer): void
public "deleteChars"(count: integer): void
public "deleteCharsToPos"(pos: integer): void
public "onEnterPressed"(): void
public "isTextValid"(): boolean
public "charTyped"(c: character, modifiers: $KeyModifiers$Type): boolean
get "text"(): string
set "filter"(value: $Predicate$Type<(string)>)
set "text"(value: string)
set "width"(value: integer)
get "cursor"(): $CursorType
set "focused"(value: boolean)
get "formattedText"(): string
get "focused"(): boolean
set "maxLength"(value: integer)
get "cursorPos"(): integer
get "selectedText"(): string
set "selectionPos"(value: integer)
set "cursorPosition"(value: integer)
set "cursorPos"(value: integer)
get "textValid"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TextBox$Type = ($TextBox);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TextBox_ = $TextBox$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/integration/permissions/$PermissionProvider" {
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"

export interface $PermissionProvider {

 "getName"(): string
 "getStringPermission"(arg0: $ServerPlayer$Type, arg1: string, arg2: string): string
 "getIntegerPermission"(arg0: $ServerPlayer$Type, arg1: string, arg2: integer): integer
 "getBooleanPermission"(arg0: $ServerPlayer$Type, arg1: string, arg2: boolean): boolean
}

export namespace $PermissionProvider {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PermissionProvider$Type = ($PermissionProvider);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PermissionProvider_ = $PermissionProvider$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/client/gui/$RewardToast" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Icon, $Icon$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Icon"
import {$SimpleToast, $SimpleToast$Type} from "packages/dev/ftb/mods/ftblibrary/ui/misc/$SimpleToast"

export class $RewardToast extends $SimpleToast {

constructor(t: $Component$Type, i: $Icon$Type)

public "getIcon"(): $Icon
public "getTitle"(): $Component
public "getSubtitle"(): $Component
get "icon"(): $Icon
get "title"(): $Component
get "subtitle"(): $Component
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RewardToast$Type = ($RewardToast);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RewardToast_ = $RewardToast$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/config/$IntConfig" {
import {$Color4I, $Color4I$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Color4I"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$NumberConfig, $NumberConfig$Type} from "packages/dev/ftb/mods/ftblibrary/config/$NumberConfig"
import {$TooltipList, $TooltipList$Type} from "packages/dev/ftb/mods/ftblibrary/util/$TooltipList"

export class $IntConfig extends $NumberConfig<(integer)> {
static readonly "COLOR": $Color4I
readonly "min": T
readonly "max": T
 "fader": boolean
static readonly "NULL_TEXT": $Component
 "id": string

constructor(mn: integer, mx: integer)

public "parse"(callback: $Consumer$Type<(integer)>, string: string): boolean
public "scrollValue"(currentValue: integer, forward: boolean): $Optional<(integer)>
public "addInfo"(list: $TooltipList$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IntConfig$Type = ($IntConfig);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IntConfig_ = $IntConfig$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/core/$DisplayInfoFTBL" {
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export interface $DisplayInfoFTBL {

 "getIconStackFTBL"(): $ItemStack

(): $ItemStack
}

export namespace $DisplayInfoFTBL {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DisplayInfoFTBL$Type = ($DisplayInfoFTBL);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DisplayInfoFTBL_ = $DisplayInfoFTBL$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/block/$StageBarrierBlock" {
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$QuestBarrierBlock, $QuestBarrierBlock$Type} from "packages/dev/ftb/mods/ftbquests/block/$QuestBarrierBlock"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $StageBarrierBlock extends $QuestBarrierBlock {
static readonly "OPEN": $BooleanProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor()

public "newBlockEntity"(blockPos: $BlockPos$Type, blockState: $BlockState$Type): $BlockEntity
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $StageBarrierBlock$Type = ($StageBarrierBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $StageBarrierBlock_ = $StageBarrierBlock$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/quest/task/forge/$ForgeEnergyTaskClientData" {
import {$EnergyTaskClientData, $EnergyTaskClientData$Type} from "packages/dev/ftb/mods/ftbquests/client/$EnergyTaskClientData"
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$TextureAtlasSprite, $TextureAtlasSprite$Type} from "packages/net/minecraft/client/renderer/texture/$TextureAtlasSprite"

export class $ForgeEnergyTaskClientData extends $Enum<($ForgeEnergyTaskClientData)> implements $EnergyTaskClientData {
static readonly "INSTANCE": $ForgeEnergyTaskClientData


public static "values"(): ($ForgeEnergyTaskClientData)[]
public static "valueOf"(name: string): $ForgeEnergyTaskClientData
public "getFullTexture"(): $TextureAtlasSprite
public "getEmptyTexture"(): $TextureAtlasSprite
get "fullTexture"(): $TextureAtlasSprite
get "emptyTexture"(): $TextureAtlasSprite
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ForgeEnergyTaskClientData$Type = (("instance")) | ($ForgeEnergyTaskClientData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ForgeEnergyTaskClientData_ = $ForgeEnergyTaskClientData$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/config/$NBTConfig" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$ConfigFromString, $ConfigFromString$Type} from "packages/dev/ftb/mods/ftblibrary/config/$ConfigFromString"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$TooltipList, $TooltipList$Type} from "packages/dev/ftb/mods/ftblibrary/util/$TooltipList"

export class $NBTConfig extends $ConfigFromString<($CompoundTag)> {
static readonly "EMPTY_NBT": $Component
static readonly "NON_EMPTY_NBT": $Component
static readonly "NULL_TEXT": $Component
 "id": string

constructor()

public "copy"(v: $CompoundTag$Type): $CompoundTag
public "parse"(callback: $Consumer$Type<($CompoundTag$Type)>, string: string): boolean
public "getStringForGUI"(v: $CompoundTag$Type): $Component
public "getStringFromValue"(v: $CompoundTag$Type): string
public "addInfo"(list: $TooltipList$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $NBTConfig$Type = ($NBTConfig);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $NBTConfig_ = $NBTConfig$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/ui/$ColorWidget" {
import {$Color4I, $Color4I$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Color4I"
import {$Panel, $Panel$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Panel"
import {$Widget, $Widget$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Widget"
import {$Theme, $Theme$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Theme"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $ColorWidget extends $Widget {
readonly "color": $Color4I
 "mouseOverColor": $Color4I
 "posX": integer
 "posY": integer
 "width": integer
 "height": integer

constructor(panel: $Panel$Type, c: $Color4I$Type, m: $Color4I$Type)

public "draw"(graphics: $GuiGraphics$Type, theme: $Theme$Type, x: integer, y: integer, w: integer, h: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ColorWidget$Type = ($ColorWidget);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ColorWidget_ = $ColorWidget$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/ui/$TextField" {
import {$Color4I, $Color4I$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Color4I"
import {$Panel, $Panel$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Panel"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Widget, $Widget$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Widget"
import {$Theme, $Theme$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Theme"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$Style, $Style$Type} from "packages/net/minecraft/network/chat/$Style"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$TooltipList, $TooltipList$Type} from "packages/dev/ftb/mods/ftblibrary/util/$TooltipList"

export class $TextField extends $Widget {
 "component": $Component
 "textFlags": integer
 "minWidth": integer
 "maxWidth": integer
 "textSpacing": integer
 "scale": float
 "textColor": $Color4I
 "trim": boolean
 "posX": integer
 "posY": integer
 "width": integer
 "height": integer

constructor(panel: $Panel$Type)

public "resize"(theme: $Theme$Type): $TextField
public "setScale"(s: float): $TextField
public "setColor"(color: $Color4I$Type): $TextField
public "setText"(txt: string): $TextField
public "setText"(txt: $Component$Type): $TextField
public "setMinWidth"(width: integer): $TextField
public "setMaxWidth"(width: integer): $TextField
public "draw"(graphics: $GuiGraphics$Type, theme: $Theme$Type, x: integer, y: integer, w: integer, h: integer): void
public "addFlags"(flags: integer): $TextField
public "addMouseOverText"(list: $TooltipList$Type): void
public "showTooltipForLongText"(): $TextField
public "setSpacing"(s: integer): $TextField
public "drawBackground"(graphics: $GuiGraphics$Type, theme: $Theme$Type, x: integer, y: integer, w: integer, h: integer): void
public "setTrim"(): $TextField
public "getComponentStyleAt"(theme: $Theme$Type, mouseX: integer, mouseY: integer): $Optional<($Style)>
set "scale"(value: float)
set "color"(value: $Color4I$Type)
set "text"(value: string)
set "text"(value: $Component$Type)
set "minWidth"(value: integer)
set "maxWidth"(value: integer)
set "spacing"(value: integer)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TextField$Type = ($TextField);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TextField_ = $TextField$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/events/$ObjectCompletedEvent" {
import {$ObjectCompletedEvent$TaskEvent, $ObjectCompletedEvent$TaskEvent$Type} from "packages/dev/ftb/mods/ftbquests/events/$ObjectCompletedEvent$TaskEvent"
import {$QuestObject, $QuestObject$Type} from "packages/dev/ftb/mods/ftbquests/quest/$QuestObject"
import {$ObjectProgressEvent, $ObjectProgressEvent$Type} from "packages/dev/ftb/mods/ftbquests/events/$ObjectProgressEvent"
import {$Event, $Event$Type} from "packages/dev/architectury/event/$Event"
import {$ObjectCompletedEvent$QuestEvent, $ObjectCompletedEvent$QuestEvent$Type} from "packages/dev/ftb/mods/ftbquests/events/$ObjectCompletedEvent$QuestEvent"
import {$EventActor, $EventActor$Type} from "packages/dev/architectury/event/$EventActor"
import {$ObjectCompletedEvent$FileEvent, $ObjectCompletedEvent$FileEvent$Type} from "packages/dev/ftb/mods/ftbquests/events/$ObjectCompletedEvent$FileEvent"
import {$ObjectCompletedEvent$ChapterEvent, $ObjectCompletedEvent$ChapterEvent$Type} from "packages/dev/ftb/mods/ftbquests/events/$ObjectCompletedEvent$ChapterEvent"

export class $ObjectCompletedEvent<T extends $QuestObject> extends $ObjectProgressEvent<(T)> {
static readonly "GENERIC": $Event<($EventActor<($ObjectCompletedEvent<(any)>)>)>
static readonly "FILE": $Event<($EventActor<($ObjectCompletedEvent$FileEvent)>)>
static readonly "CHAPTER": $Event<($EventActor<($ObjectCompletedEvent$ChapterEvent)>)>
static readonly "QUEST": $Event<($EventActor<($ObjectCompletedEvent$QuestEvent)>)>
static readonly "TASK": $Event<($EventActor<($ObjectCompletedEvent$TaskEvent)>)>


}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ObjectCompletedEvent$Type<T> = ($ObjectCompletedEvent<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ObjectCompletedEvent_<T> = $ObjectCompletedEvent$Type<(T)>;
}}
declare module "packages/dev/ftb/mods/ftbxmodcompat/forge/$FTBXModCompatForge" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $FTBXModCompatForge {

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FTBXModCompatForge$Type = ($FTBXModCompatForge);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FTBXModCompatForge_ = $FTBXModCompatForge$Type;
}}
declare module "packages/dev/ftb/mods/ftbteams/api/$TeamRank" {
import {$StringRepresentable$EnumCodec, $StringRepresentable$EnumCodec$Type} from "packages/net/minecraft/util/$StringRepresentable$EnumCodec"
import {$StringRepresentable, $StringRepresentable$Type} from "packages/net/minecraft/util/$StringRepresentable"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$Keyable, $Keyable$Type} from "packages/com/mojang/serialization/$Keyable"
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$NameMap, $NameMap$Type} from "packages/dev/ftb/mods/ftblibrary/config/$NameMap"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$Icon, $Icon$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Icon"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"

export class $TeamRank extends $Enum<($TeamRank)> implements $StringRepresentable {
static readonly "ENEMY": $TeamRank
static readonly "NONE": $TeamRank
static readonly "ALLY": $TeamRank
static readonly "INVITED": $TeamRank
static readonly "MEMBER": $TeamRank
static readonly "OFFICER": $TeamRank
static readonly "OWNER": $TeamRank
static readonly "NAME_MAP": $NameMap<($TeamRank)>


public static "values"(): ($TeamRank)[]
public static "valueOf"(name: string): $TeamRank
public "getDisplayName"(): $Component
public "isMemberOrBetter"(): boolean
public "getSerializedName"(): string
public "isOfficerOrBetter"(): boolean
public "isAtLeast"(rank: $TeamRank$Type): boolean
public "getIcon"(): $Optional<($Icon)>
public "isAllyOrBetter"(): boolean
public "isInvitedOrBetter"(): boolean
public "isNoneOrBetter"(): boolean
public "isEnemyOrWorse"(): boolean
public "getPower"(): integer
public "isOwner"(): boolean
public static "fromEnumWithMapping"<E extends ($Enum<(E)>) & ($StringRepresentable)>(arg0: $Supplier$Type<((E)[])>, arg1: $Function$Type<(string), (string)>): $StringRepresentable$EnumCodec<(E)>
public static "keys"(arg0: ($StringRepresentable$Type)[]): $Keyable
public static "fromEnum"<E extends ($Enum<(E)>) & ($StringRepresentable)>(arg0: $Supplier$Type<((E)[])>): $StringRepresentable$EnumCodec<(E)>
get "displayName"(): $Component
get "memberOrBetter"(): boolean
get "serializedName"(): string
get "officerOrBetter"(): boolean
get "icon"(): $Optional<($Icon)>
get "allyOrBetter"(): boolean
get "invitedOrBetter"(): boolean
get "noneOrBetter"(): boolean
get "enemyOrWorse"(): boolean
get "power"(): integer
get "owner"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TeamRank$Type = (("owner") | ("ally") | ("officer") | ("invited") | ("member") | ("enemy") | ("none")) | ($TeamRank);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TeamRank_ = $TeamRank$Type;
}}
declare module "packages/dev/ftb/mods/ftbxmodcompat/ftbquests/kubejs/$CustomFilterItemEventJS" {
import {$EventJS, $EventJS$Type} from "packages/dev/latvian/mods/kubejs/event/$EventJS"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$CustomFilterDisplayItemsEvent, $CustomFilterDisplayItemsEvent$Type} from "packages/dev/ftb/mods/ftbquests/api/event/$CustomFilterDisplayItemsEvent"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export class $CustomFilterItemEventJS extends $EventJS {

constructor(event: $CustomFilterDisplayItemsEvent$Type)

public "addStacks"(stacks: $Collection$Type<($ItemStack$Type)>): void
public "addStack"(stack: $ItemStack$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CustomFilterItemEventJS$Type = ($CustomFilterItemEventJS);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CustomFilterItemEventJS_ = $CustomFilterItemEventJS$Type;
}}
declare module "packages/dev/ftb/mods/ftbteams/net/$PlayerGUIOperationMessage$Operation" {
import {$KnownClientPlayer, $KnownClientPlayer$Type} from "packages/dev/ftb/mods/ftbteams/api/client/$KnownClientPlayer"
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $PlayerGUIOperationMessage$Operation extends $Enum<($PlayerGUIOperationMessage$Operation)> {
static readonly "PROMOTE": $PlayerGUIOperationMessage$Operation
static readonly "DEMOTE": $PlayerGUIOperationMessage$Operation
static readonly "LEAVE": $PlayerGUIOperationMessage$Operation
static readonly "KICK": $PlayerGUIOperationMessage$Operation
static readonly "TRANSFER_OWNER": $PlayerGUIOperationMessage$Operation
static readonly "INVITE": $PlayerGUIOperationMessage$Operation
static readonly "ADD_ALLY": $PlayerGUIOperationMessage$Operation
static readonly "REMOVE_ALLY": $PlayerGUIOperationMessage$Operation


public static "values"(): ($PlayerGUIOperationMessage$Operation)[]
public static "valueOf"(name: string): $PlayerGUIOperationMessage$Operation
public "sendMessage"(target: $KnownClientPlayer$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PlayerGUIOperationMessage$Operation$Type = (("promote") | ("demote") | ("transfer_owner") | ("kick") | ("leave") | ("add_ally") | ("invite") | ("remove_ally")) | ($PlayerGUIOperationMessage$Operation);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PlayerGUIOperationMessage$Operation_ = $PlayerGUIOperationMessage$Operation$Type;
}}
declare module "packages/dev/ftb/mods/ftbteams/api/event/$PlayerJoinedPartyTeamEvent" {
import {$TeamEvent, $TeamEvent$Type} from "packages/dev/ftb/mods/ftbteams/api/event/$TeamEvent"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$PlayerChangedTeamEvent, $PlayerChangedTeamEvent$Type} from "packages/dev/ftb/mods/ftbteams/api/event/$PlayerChangedTeamEvent"
import {$Event, $Event$Type} from "packages/dev/architectury/event/$Event"
import {$TeamPropertiesChangedEvent, $TeamPropertiesChangedEvent$Type} from "packages/dev/ftb/mods/ftbteams/api/event/$TeamPropertiesChangedEvent"
import {$TeamAllyEvent, $TeamAllyEvent$Type} from "packages/dev/ftb/mods/ftbteams/api/event/$TeamAllyEvent"
import {$PlayerLeftPartyTeamEvent, $PlayerLeftPartyTeamEvent$Type} from "packages/dev/ftb/mods/ftbteams/api/event/$PlayerLeftPartyTeamEvent"
import {$TeamCreatedEvent, $TeamCreatedEvent$Type} from "packages/dev/ftb/mods/ftbteams/api/event/$TeamCreatedEvent"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$TeamInfoEvent, $TeamInfoEvent$Type} from "packages/dev/ftb/mods/ftbteams/api/event/$TeamInfoEvent"
import {$PlayerTransferredTeamOwnershipEvent, $PlayerTransferredTeamOwnershipEvent$Type} from "packages/dev/ftb/mods/ftbteams/api/event/$PlayerTransferredTeamOwnershipEvent"
import {$TeamCollectPropertiesEvent, $TeamCollectPropertiesEvent$Type} from "packages/dev/ftb/mods/ftbteams/api/event/$TeamCollectPropertiesEvent"
import {$PlayerLoggedInAfterTeamEvent, $PlayerLoggedInAfterTeamEvent$Type} from "packages/dev/ftb/mods/ftbteams/api/event/$PlayerLoggedInAfterTeamEvent"
import {$ClientTeamPropertiesChangedEvent, $ClientTeamPropertiesChangedEvent$Type} from "packages/dev/ftb/mods/ftbteams/api/event/$ClientTeamPropertiesChangedEvent"
import {$Team, $Team$Type} from "packages/dev/ftb/mods/ftbteams/api/$Team"

export class $PlayerJoinedPartyTeamEvent extends $TeamEvent {
static readonly "CREATED": $Event<($Consumer<($TeamCreatedEvent)>)>
static readonly "LOADED": $Event<($Consumer<($TeamEvent)>)>
static readonly "SAVED": $Event<($Consumer<($TeamEvent)>)>
static readonly "DELETED": $Event<($Consumer<($TeamEvent)>)>
static readonly "PLAYER_LOGGED_IN": $Event<($Consumer<($PlayerLoggedInAfterTeamEvent)>)>
static readonly "OWNERSHIP_TRANSFERRED": $Event<($Consumer<($PlayerTransferredTeamOwnershipEvent)>)>
static readonly "COLLECT_PROPERTIES": $Event<($Consumer<($TeamCollectPropertiesEvent)>)>
static readonly "PROPERTIES_CHANGED": $Event<($Consumer<($TeamPropertiesChangedEvent)>)>
static readonly "PLAYER_CHANGED": $Event<($Consumer<($PlayerChangedTeamEvent)>)>
static readonly "PLAYER_JOINED_PARTY": $Event<($Consumer<($PlayerJoinedPartyTeamEvent)>)>
static readonly "PLAYER_LEFT_PARTY": $Event<($Consumer<($PlayerLeftPartyTeamEvent)>)>
static readonly "INFO": $Event<($Consumer<($TeamInfoEvent)>)>
static readonly "ADD_ALLY": $Event<($Consumer<($TeamAllyEvent)>)>
static readonly "REMOVE_ALLY": $Event<($Consumer<($TeamAllyEvent)>)>
static readonly "CLIENT_PROPERTIES_CHANGED": $Event<($Consumer<($ClientTeamPropertiesChangedEvent)>)>

constructor(team: $Team$Type, previousTeam: $Team$Type, player: $ServerPlayer$Type)

public "getPreviousTeam"(): $Team
public "getPlayer"(): $ServerPlayer
get "previousTeam"(): $Team
get "player"(): $ServerPlayer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PlayerJoinedPartyTeamEvent$Type = ($PlayerJoinedPartyTeamEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PlayerJoinedPartyTeamEvent_ = $PlayerJoinedPartyTeamEvent$Type;
}}
declare module "packages/dev/ftb/mods/ftbxmodcompat/config/$FTBXModConfig$StageSelector" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $FTBXModConfig$StageSelector extends $Enum<($FTBXModConfig$StageSelector)> {
static readonly "DEFAULT": $FTBXModConfig$StageSelector
static readonly "VANILLA": $FTBXModConfig$StageSelector
static readonly "KUBEJS": $FTBXModConfig$StageSelector
static readonly "GAMESTAGES": $FTBXModConfig$StageSelector


public static "values"(): ($FTBXModConfig$StageSelector)[]
public static "valueOf"(name: string): $FTBXModConfig$StageSelector
public "isUsable"(): boolean
get "usable"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FTBXModConfig$StageSelector$Type = (("default") | ("kubejs") | ("gamestages") | ("vanilla")) | ($FTBXModConfig$StageSelector);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FTBXModConfig$StageSelector_ = $FTBXModConfig$StageSelector$Type;
}}
declare module "packages/dev/ftb/mods/ftbxmodcompat/ftbquests/$QuestItems" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"

export class $QuestItems {

constructor()

public static "questBook"(): $Item
public static "lootCrate"(): $Item
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $QuestItems$Type = ($QuestItems);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $QuestItems_ = $QuestItems$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/net/forge/$FTBQuestsNetHandlerImpl" {
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export class $FTBQuestsNetHandlerImpl {

constructor()

public static "writeItemType"(buffer: $FriendlyByteBuf$Type, stack: $ItemStack$Type): void
public static "readItemType"(buffer: $FriendlyByteBuf$Type): $ItemStack
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FTBQuestsNetHandlerImpl$Type = ($FTBQuestsNetHandlerImpl);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FTBQuestsNetHandlerImpl_ = $FTBQuestsNetHandlerImpl$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/icon/$IconWithBorder" {
import {$Color4I, $Color4I$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Color4I"
import {$JsonElement, $JsonElement$Type} from "packages/com/google/gson/$JsonElement"
import {$IconWithParent, $IconWithParent$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$IconWithParent"
import {$Icon, $Icon$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Icon"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $IconWithBorder extends $IconWithParent {
static readonly "BUTTON_GRAY": $Icon
static readonly "BUTTON_RED": $Icon
static readonly "BUTTON_GREEN": $Icon
static readonly "BUTTON_BLUE": $Icon
static readonly "BUTTON_ROUND_GRAY": $Icon
static readonly "BUTTON_ROUND_RED": $Icon
static readonly "BUTTON_ROUND_GREEN": $Icon
static readonly "BUTTON_ROUND_BLUE": $Icon
 "color": $Color4I
 "roundEdges": boolean
readonly "parent": $Icon


public "draw"(graphics: $GuiGraphics$Type, x: integer, y: integer, w: integer, h: integer): void
public "getJson"(): $JsonElement
get "json"(): $JsonElement
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IconWithBorder$Type = ($IconWithBorder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IconWithBorder_ = $IconWithBorder$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/quest/$QuestObjectType" {
import {$QuestObjectBase, $QuestObjectBase$Type} from "packages/dev/ftb/mods/ftbquests/quest/$QuestObjectBase"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$NameMap, $NameMap$Type} from "packages/dev/ftb/mods/ftblibrary/config/$NameMap"
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$ChatFormatting, $ChatFormatting$Type} from "packages/net/minecraft/$ChatFormatting"

export class $QuestObjectType extends $Enum<($QuestObjectType)> implements $Predicate<($QuestObjectBase)> {
static readonly "NULL": $QuestObjectType
static readonly "FILE": $QuestObjectType
static readonly "CHAPTER": $QuestObjectType
static readonly "QUEST": $QuestObjectType
static readonly "TASK": $QuestObjectType
static readonly "REWARD": $QuestObjectType
static readonly "REWARD_TABLE": $QuestObjectType
static readonly "CHAPTER_GROUP": $QuestObjectType
static readonly "QUEST_LINK": $QuestObjectType
static readonly "NAME_MAP": $NameMap<($QuestObjectType)>
static readonly "ALL_PROGRESSING": $Predicate<($QuestObjectBase)>
static readonly "ALL_PROGRESSING_OR_NULL": $Predicate<($QuestObjectBase)>


public static "values"(): ($QuestObjectType)[]
public "test"(object: $QuestObjectBase$Type): boolean
public static "valueOf"(name: string): $QuestObjectType
public "getId"(): string
public "getDescription"(): $Component
public "getColor"(): $ChatFormatting
public "getCompletedMessage"(): $Component
public "or"(arg0: $Predicate$Type<(any)>): $Predicate<($QuestObjectBase)>
public "negate"(): $Predicate<($QuestObjectBase)>
public "and"(arg0: $Predicate$Type<(any)>): $Predicate<($QuestObjectBase)>
public static "not"<T>(arg0: $Predicate$Type<(any)>): $Predicate<($QuestObjectBase)>
public static "isEqual"<T>(arg0: any): $Predicate<($QuestObjectBase)>
get "id"(): string
get "description"(): $Component
get "color"(): $ChatFormatting
get "completedMessage"(): $Component
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $QuestObjectType$Type = (("reward") | ("chapter") | ("chapter_group") | ("file") | ("task") | ("quest_link") | ("null") | ("reward_table") | ("quest")) | ($QuestObjectType);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $QuestObjectType_ = $QuestObjectType$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/config/ui/$EditConfigFromStringScreen" {
import {$ConfigFromString, $ConfigFromString$Type} from "packages/dev/ftb/mods/ftblibrary/config/$ConfigFromString"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$ConfigCallback, $ConfigCallback$Type} from "packages/dev/ftb/mods/ftblibrary/config/$ConfigCallback"
import {$Theme, $Theme$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Theme"
import {$Key, $Key$Type} from "packages/dev/ftb/mods/ftblibrary/ui/input/$Key"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$BaseScreen, $BaseScreen$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$BaseScreen"

/**
 * 
 * @deprecated
 */
export class $EditConfigFromStringScreen<T> extends $BaseScreen {
 "posX": integer
 "posY": integer
 "width": integer
 "height": integer

constructor(c: $ConfigFromString$Type<(T)>, cb: $ConfigCallback$Type)

public static "open"<E>(type: $ConfigFromString$Type<(E)>, value: E, defaultValue: E, title: $Component$Type, callback: $ConfigCallback$Type): void
public static "open"<E>(type: $ConfigFromString$Type<(E)>, value: E, defaultValue: E, callback: $ConfigCallback$Type): void
public "doesGuiPauseGame"(): boolean
public "drawForeground"(graphics: $GuiGraphics$Type, theme: $Theme$Type, x: integer, y: integer, w: integer, h: integer): void
public "onClosedByKey"(key: $Key$Type): boolean
public "addWidgets"(): void
public "setTitle"(title: $Component$Type): $EditConfigFromStringScreen<(T)>
set "title"(value: $Component$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EditConfigFromStringScreen$Type<T> = ($EditConfigFromStringScreen<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EditConfigFromStringScreen_<T> = $EditConfigFromStringScreen$Type<(T)>;
}}
declare module "packages/dev/ftb/mods/ftbquests/client/gui/$CustomToast" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Icon, $Icon$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Icon"
import {$SimpleToast, $SimpleToast$Type} from "packages/dev/ftb/mods/ftblibrary/ui/misc/$SimpleToast"

export class $CustomToast extends $SimpleToast {

constructor(title: $Component$Type, icon: $Icon$Type, description: $Component$Type)

public "getIcon"(): $Icon
public "getTitle"(): $Component
public "getSubtitle"(): $Component
get "icon"(): $Icon
get "title"(): $Component
get "subtitle"(): $Component
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CustomToast$Type = ($CustomToast);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CustomToast_ = $CustomToast$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/config/ui/$SelectItemStackScreen" {
import {$ResourceSearchMode, $ResourceSearchMode$Type} from "packages/dev/ftb/mods/ftblibrary/config/ui/$ResourceSearchMode"
import {$ItemStackConfig, $ItemStackConfig$Type} from "packages/dev/ftb/mods/ftblibrary/config/$ItemStackConfig"
import {$ResourceSelectorScreen, $ResourceSelectorScreen$Type} from "packages/dev/ftb/mods/ftblibrary/config/ui/$ResourceSelectorScreen"
import {$ConfigCallback, $ConfigCallback$Type} from "packages/dev/ftb/mods/ftblibrary/config/$ConfigCallback"
import {$Pair, $Pair$Type} from "packages/com/mojang/datafixers/util/$Pair"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$SearchModeIndex, $SearchModeIndex$Type} from "packages/dev/ftb/mods/ftblibrary/config/ui/$SearchModeIndex"

export class $SelectItemStackScreen extends $ResourceSelectorScreen<($ItemStack)> {
static readonly "KNOWN_MODES": $SearchModeIndex<($ResourceSearchMode<($ItemStack)>)>
 "update": long
static readonly "NO_INSET": $Pair<(integer), (integer)>
 "posX": integer
 "posY": integer
 "width": integer
 "height": integer

constructor(config: $ItemStackConfig$Type, callback: $ConfigCallback$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SelectItemStackScreen$Type = ($SelectItemStackScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SelectItemStackScreen_ = $SelectItemStackScreen$Type;
}}
declare module "packages/dev/ftb/mods/ftbteams/api/property/$PrivacyMode" {
import {$StringRepresentable$EnumCodec, $StringRepresentable$EnumCodec$Type} from "packages/net/minecraft/util/$StringRepresentable$EnumCodec"
import {$StringRepresentable, $StringRepresentable$Type} from "packages/net/minecraft/util/$StringRepresentable"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$Keyable, $Keyable$Type} from "packages/com/mojang/serialization/$Keyable"
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$NameMap, $NameMap$Type} from "packages/dev/ftb/mods/ftblibrary/config/$NameMap"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"

export class $PrivacyMode extends $Enum<($PrivacyMode)> implements $StringRepresentable {
static readonly "ALLIES": $PrivacyMode
static readonly "PRIVATE": $PrivacyMode
static readonly "PUBLIC": $PrivacyMode
static readonly "VALUES": ($PrivacyMode)[]
static readonly "NAME_MAP": $NameMap<($PrivacyMode)>
readonly "name": string


public static "values"(): ($PrivacyMode)[]
public static "valueOf"(name: string): $PrivacyMode
public "getSerializedName"(): string
public static "fromEnumWithMapping"<E extends ($Enum<(E)>) & ($StringRepresentable)>(arg0: $Supplier$Type<((E)[])>, arg1: $Function$Type<(string), (string)>): $StringRepresentable$EnumCodec<(E)>
public static "keys"(arg0: ($StringRepresentable$Type)[]): $Keyable
public static "fromEnum"<E extends ($Enum<(E)>) & ($StringRepresentable)>(arg0: $Supplier$Type<((E)[])>): $StringRepresentable$EnumCodec<(E)>
get "serializedName"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PrivacyMode$Type = (("private") | ("public") | ("allies")) | ($PrivacyMode);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PrivacyMode_ = $PrivacyMode$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/quest/task/$StageTask" {
import {$Quest, $Quest$Type} from "packages/dev/ftb/mods/ftbquests/quest/$Quest"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$ConfigGroup, $ConfigGroup$Type} from "packages/dev/ftb/mods/ftblibrary/config/$ConfigGroup"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$TaskType, $TaskType$Type} from "packages/dev/ftb/mods/ftbquests/quest/task/$TaskType"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$AbstractBooleanTask, $AbstractBooleanTask$Type} from "packages/dev/ftb/mods/ftbquests/quest/task/$AbstractBooleanTask"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$TeamData, $TeamData$Type} from "packages/dev/ftb/mods/ftbquests/quest/$TeamData"

export class $StageTask extends $AbstractBooleanTask {
readonly "id": long

constructor(id: long, quest: $Quest$Type)

public "getType"(): $TaskType
public "readData"(nbt: $CompoundTag$Type): void
public "getAltTitle"(): $MutableComponent
public static "checkStages"(player: $ServerPlayer$Type): void
public "autoSubmitOnPlayerTick"(): integer
public "canSubmit"(teamData: $TeamData$Type, player: $ServerPlayer$Type): boolean
public "writeNetData"(buffer: $FriendlyByteBuf$Type): void
public "writeData"(nbt: $CompoundTag$Type): void
public "fillConfigGroup"(config: $ConfigGroup$Type): void
public "readNetData"(buffer: $FriendlyByteBuf$Type): void
get "type"(): $TaskType
get "altTitle"(): $MutableComponent
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $StageTask$Type = ($StageTask);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $StageTask_ = $StageTask$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/quest/theme/selector/$DirectParentSelector" {
import {$QuestObjectBase, $QuestObjectBase$Type} from "packages/dev/ftb/mods/ftbquests/quest/$QuestObjectBase"
import {$ThemeSelector, $ThemeSelector$Type} from "packages/dev/ftb/mods/ftbquests/quest/theme/selector/$ThemeSelector"
import {$ThemeSelectorType, $ThemeSelectorType$Type} from "packages/dev/ftb/mods/ftbquests/quest/theme/selector/$ThemeSelectorType"

export class $DirectParentSelector extends $ThemeSelector {
readonly "parent": $ThemeSelector
readonly "child": $ThemeSelector

constructor(s: $ThemeSelector$Type, c: $ThemeSelector$Type)

public "equals"(o: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "matches"(object: $QuestObjectBase$Type): boolean
public "getType"(): $ThemeSelectorType
get "type"(): $ThemeSelectorType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DirectParentSelector$Type = ($DirectParentSelector);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DirectParentSelector_ = $DirectParentSelector$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/command/$ChangeProgressArgument" {
import {$Suggestions, $Suggestions$Type} from "packages/com/mojang/brigadier/suggestion/$Suggestions"
import {$StringReader, $StringReader$Type} from "packages/com/mojang/brigadier/$StringReader"
import {$CompletableFuture, $CompletableFuture$Type} from "packages/java/util/concurrent/$CompletableFuture"
import {$ChangeProgress, $ChangeProgress$Type} from "packages/dev/ftb/mods/ftbquests/quest/$ChangeProgress"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$SuggestionsBuilder, $SuggestionsBuilder$Type} from "packages/com/mojang/brigadier/suggestion/$SuggestionsBuilder"
import {$ArgumentType, $ArgumentType$Type} from "packages/com/mojang/brigadier/arguments/$ArgumentType"
import {$CommandContext, $CommandContext$Type} from "packages/com/mojang/brigadier/context/$CommandContext"

export class $ChangeProgressArgument implements $ArgumentType<($ChangeProgress)> {

constructor()

public "parse"(reader: $StringReader$Type): $ChangeProgress
public static "changeProgress"(): $ChangeProgressArgument
public "getExamples"(): $Collection<(string)>
public "listSuggestions"<S>(context: $CommandContext$Type<(S)>, builder: $SuggestionsBuilder$Type): $CompletableFuture<($Suggestions)>
get "examples"(): $Collection<(string)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ChangeProgressArgument$Type = ($ChangeProgressArgument);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ChangeProgressArgument_ = $ChangeProgressArgument$Type;
}}
declare module "packages/dev/ftb/mods/ftbteams/data/$TeamMessageImpl" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$TeamMessage, $TeamMessage$Type} from "packages/dev/ftb/mods/ftbteams/api/$TeamMessage"

export class $TeamMessageImpl extends $Record implements $TeamMessage {

constructor(sender: $UUID$Type, date: long, text: $Component$Type)

public "equals"(o: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "text"(): $Component
public "date"(): long
public static "fromNetwork"(now: long, buffer: $FriendlyByteBuf$Type): $TeamMessage
public static "toNetwork"(msg: $TeamMessage$Type, now: long, buffer: $FriendlyByteBuf$Type): void
public static "fromNBT"(tag: $CompoundTag$Type): $TeamMessage
public static "toNBT"(msg: $TeamMessage$Type): $CompoundTag
public "sender"(): $UUID
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TeamMessageImpl$Type = ($TeamMessageImpl);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TeamMessageImpl_ = $TeamMessageImpl$Type;
}}
declare module "packages/dev/ftb/mods/ftbteams/client/gui/$InvitationSetup" {
import {$GameProfile, $GameProfile$Type} from "packages/com/mojang/authlib/$GameProfile"

export interface $InvitationSetup {

 "isInvited"(arg0: $GameProfile$Type): boolean
 "setInvited"(arg0: $GameProfile$Type, arg1: boolean): void
}

export namespace $InvitationSetup {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $InvitationSetup$Type = ($InvitationSetup);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $InvitationSetup_ = $InvitationSetup$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/util/$ChainedBooleanSupplier" {
import {$BooleanSupplier, $BooleanSupplier$Type} from "packages/java/util/function/$BooleanSupplier"

export interface $ChainedBooleanSupplier extends $BooleanSupplier {

 "or"(supplier: $BooleanSupplier$Type): $ChainedBooleanSupplier
 "and"(supplier: $BooleanSupplier$Type): $ChainedBooleanSupplier
 "xor"(supplier: $BooleanSupplier$Type): $ChainedBooleanSupplier
 "not"(): $ChainedBooleanSupplier
 "getAsBoolean"(): boolean

(supplier: $BooleanSupplier$Type): $ChainedBooleanSupplier
}

export namespace $ChainedBooleanSupplier {
const TRUE: $ChainedBooleanSupplier
const FALSE: $ChainedBooleanSupplier
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ChainedBooleanSupplier$Type = ($ChainedBooleanSupplier);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ChainedBooleanSupplier_ = $ChainedBooleanSupplier$Type;
}}
declare module "packages/dev/ftb/mods/ftbxmodcompat/ftbquests/kubejs/$FTBQuestsKubeJSWrapper" {
import {$BaseQuestFile, $BaseQuestFile$Type} from "packages/dev/ftb/mods/ftbquests/quest/$BaseQuestFile"
import {$QuestObjectBase, $QuestObjectBase$Type} from "packages/dev/ftb/mods/ftbquests/quest/$QuestObjectBase"
import {$QuestObjectType, $QuestObjectType$Type} from "packages/dev/ftb/mods/ftbquests/quest/$QuestObjectType"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$CommandSourceStack, $CommandSourceStack$Type} from "packages/net/minecraft/commands/$CommandSourceStack"
import {$FTBQuestsKubeJSPlayerData, $FTBQuestsKubeJSPlayerData$Type} from "packages/dev/ftb/mods/ftbxmodcompat/ftbquests/kubejs/$FTBQuestsKubeJSPlayerData"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$TeamData, $TeamData$Type} from "packages/dev/ftb/mods/ftbquests/quest/$TeamData"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$QuestShape, $QuestShape$Type} from "packages/dev/ftb/mods/ftbquests/quest/$QuestShape"

export class $FTBQuestsKubeJSWrapper {
static readonly "INSTANCE": $FTBQuestsKubeJSWrapper

constructor()

public "getObject"(level: $Level$Type, id: any): $QuestObjectBase
public "getFile"(level: $Level$Type): $BaseQuestFile
public "getData"(player: $Player$Type): $TeamData
public "getData"(level: $Level$Type, uuid: $UUID$Type): $TeamData
public "getQuestShapes"(): $Map<(string), ($QuestShape)>
public "getServerDataFromSource"(source: $CommandSourceStack$Type): $FTBQuestsKubeJSPlayerData
public "getServerDataFromPlayer"(player: $Player$Type): $FTBQuestsKubeJSPlayerData
public "getQuestObjectTypes"(): $Map<(string), ($QuestObjectType)>
get "questShapes"(): $Map<(string), ($QuestShape)>
get "questObjectTypes"(): $Map<(string), ($QuestObjectType)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FTBQuestsKubeJSWrapper$Type = ($FTBQuestsKubeJSWrapper);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FTBQuestsKubeJSWrapper_ = $FTBQuestsKubeJSWrapper$Type;
}}
declare module "packages/dev/ftb/mods/ftbxmodcompat/ftbquests/jei/$LootCrateCategory" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$IRecipeLayoutBuilder, $IRecipeLayoutBuilder$Type} from "packages/mezz/jei/api/gui/builder/$IRecipeLayoutBuilder"
import {$RecipeType, $RecipeType$Type} from "packages/mezz/jei/api/recipe/$RecipeType"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$IRecipeSlotsView, $IRecipeSlotsView$Type} from "packages/mezz/jei/api/gui/ingredient/$IRecipeSlotsView"
import {$IRecipeCategory, $IRecipeCategory$Type} from "packages/mezz/jei/api/recipe/category/$IRecipeCategory"
import {$List, $List$Type} from "packages/java/util/$List"
import {$WrappedLootCrate, $WrappedLootCrate$Type} from "packages/dev/ftb/mods/ftbxmodcompat/ftbquests/recipemod_common/$WrappedLootCrate"
import {$IDrawable, $IDrawable$Type} from "packages/mezz/jei/api/gui/drawable/$IDrawable"
import {$IFocusGroup, $IFocusGroup$Type} from "packages/mezz/jei/api/recipe/$IFocusGroup"
import {$InputConstants$Key, $InputConstants$Key$Type} from "packages/com/mojang/blaze3d/platform/$InputConstants$Key"
import {$IGuiHelper, $IGuiHelper$Type} from "packages/mezz/jei/api/helpers/$IGuiHelper"

export class $LootCrateCategory implements $IRecipeCategory<($WrappedLootCrate)> {

constructor(guiHelper: $IGuiHelper$Type)

public "getRecipeType"(): $RecipeType<($WrappedLootCrate)>
public "draw"(recipe: $WrappedLootCrate$Type, recipeSlotsView: $IRecipeSlotsView$Type, graphics: $GuiGraphics$Type, mouseX: double, mouseY: double): void
public "getIcon"(): $IDrawable
public "getTitle"(): $Component
public "setRecipe"(builder: $IRecipeLayoutBuilder$Type, recipe: $WrappedLootCrate$Type, focuses: $IFocusGroup$Type): void
public "getBackground"(): $IDrawable
public "getWidth"(): integer
public "getHeight"(): integer
public "isHandled"(arg0: $WrappedLootCrate$Type): boolean
public "handleInput"(arg0: $WrappedLootCrate$Type, arg1: double, arg2: double, arg3: $InputConstants$Key$Type): boolean
public "getTooltipStrings"(arg0: $WrappedLootCrate$Type, arg1: $IRecipeSlotsView$Type, arg2: double, arg3: double): $List<($Component)>
public "getRegistryName"(arg0: $WrappedLootCrate$Type): $ResourceLocation
get "recipeType"(): $RecipeType<($WrappedLootCrate)>
get "icon"(): $IDrawable
get "title"(): $Component
get "background"(): $IDrawable
get "width"(): integer
get "height"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LootCrateCategory$Type = ($LootCrateCategory);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LootCrateCategory_ = $LootCrateCategory$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/ui/$SimpleTextButton" {
import {$Panel, $Panel$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Panel"
import {$PositionedIngredient, $PositionedIngredient$Type} from "packages/dev/ftb/mods/ftblibrary/util/client/$PositionedIngredient"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Icon, $Icon$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Icon"
import {$Theme, $Theme$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Theme"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$MouseButton, $MouseButton$Type} from "packages/dev/ftb/mods/ftblibrary/ui/input/$MouseButton"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$TooltipList, $TooltipList$Type} from "packages/dev/ftb/mods/ftblibrary/util/$TooltipList"
import {$Button, $Button$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Button"

export class $SimpleTextButton extends $Button {
 "posX": integer
 "posY": integer
 "width": integer
 "height": integer

constructor(panel: $Panel$Type, txt: $Component$Type, icon: $Icon$Type)

public static "accept"(panel: $Panel$Type, callback: $Consumer$Type<($MouseButton$Type)>, ...tooltip: ($Component$Type)[]): $SimpleTextButton
public static "create"(panel: $Panel$Type, txt: $Component$Type, icon: $Icon$Type, callback: $Consumer$Type<($MouseButton$Type)>, ...tooltip: ($Component$Type)[]): $SimpleTextButton
public static "cancel"(panel: $Panel$Type, callback: $Consumer$Type<($MouseButton$Type)>, ...tooltip: ($Component$Type)[]): $SimpleTextButton
public "draw"(graphics: $GuiGraphics$Type, theme: $Theme$Type, x: integer, y: integer, w: integer, h: integer): void
public "addMouseOverText"(list: $TooltipList$Type): void
public "renderTitleInCenter"(): boolean
public "getIngredientUnderMouse"(): $Optional<($PositionedIngredient)>
public "hasIcon"(): boolean
get "ingredientUnderMouse"(): $Optional<($PositionedIngredient)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SimpleTextButton$Type = ($SimpleTextButton);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SimpleTextButton_ = $SimpleTextButton$Type;
}}
declare module "packages/dev/ftb/mods/ftbteams/$FTBTeamsAPIImpl" {
import {$ClientTeamManager, $ClientTeamManager$Type} from "packages/dev/ftb/mods/ftbteams/api/client/$ClientTeamManager"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$FTBTeamsAPI$API, $FTBTeamsAPI$API$Type} from "packages/dev/ftb/mods/ftbteams/api/$FTBTeamsAPI$API"
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$TeamMessage, $TeamMessage$Type} from "packages/dev/ftb/mods/ftbteams/api/$TeamMessage"
import {$CustomPartyCreationHandler, $CustomPartyCreationHandler$Type} from "packages/dev/ftb/mods/ftbteams/api/$CustomPartyCreationHandler"

export class $FTBTeamsAPIImpl extends $Enum<($FTBTeamsAPIImpl)> implements $FTBTeamsAPI$API {
static readonly "INSTANCE": $FTBTeamsAPIImpl


public static "values"(): ($FTBTeamsAPIImpl)[]
public static "valueOf"(name: string): $FTBTeamsAPIImpl
public "isPartyCreationFromAPIOnly"(): boolean
public "getClientManager"(): $ClientTeamManager
public "isManagerLoaded"(): boolean
public "createMessage"(sender: $UUID$Type, text: $Component$Type): $TeamMessage
public "getCustomPartyCreationHandler"(): $CustomPartyCreationHandler
public "setPartyCreationFromAPIOnly"(apiOnly: boolean): void
public "setCustomPartyCreationHandler"(partyCreationOverride: $CustomPartyCreationHandler$Type): $CustomPartyCreationHandler
public "isClientManagerLoaded"(): boolean
get "partyCreationFromAPIOnly"(): boolean
get "clientManager"(): $ClientTeamManager
get "managerLoaded"(): boolean
get "customPartyCreationHandler"(): $CustomPartyCreationHandler
set "partyCreationFromAPIOnly"(value: boolean)
set "customPartyCreationHandler"(value: $CustomPartyCreationHandler$Type)
get "clientManagerLoaded"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FTBTeamsAPIImpl$Type = (("instance")) | ($FTBTeamsAPIImpl);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FTBTeamsAPIImpl_ = $FTBTeamsAPIImpl$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/util/$TimeUtils" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $TimeUtils {

constructor()

public static "getTimeString"(millis: long): string
public static "prettyTimeString"(seconds: long): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TimeUtils$Type = ($TimeUtils);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TimeUtils_ = $TimeUtils$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/quest/reward/$StageReward" {
import {$Quest, $Quest$Type} from "packages/dev/ftb/mods/ftbquests/quest/$Quest"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$ConfigGroup, $ConfigGroup$Type} from "packages/dev/ftb/mods/ftblibrary/config/$ConfigGroup"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$Reward, $Reward$Type} from "packages/dev/ftb/mods/ftbquests/quest/reward/$Reward"
import {$RewardType, $RewardType$Type} from "packages/dev/ftb/mods/ftbquests/quest/reward/$RewardType"

export class $StageReward extends $Reward {
readonly "id": long

constructor(id: long, quest: $Quest$Type)

public "getType"(): $RewardType
public "claim"(player: $ServerPlayer$Type, notify: boolean): void
public "readData"(nbt: $CompoundTag$Type): void
public "ignoreRewardBlocking"(): boolean
public "writeNetData"(buffer: $FriendlyByteBuf$Type): void
public "writeData"(nbt: $CompoundTag$Type): void
public "fillConfigGroup"(config: $ConfigGroup$Type): void
public "readNetData"(buffer: $FriendlyByteBuf$Type): void
get "type"(): $RewardType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $StageReward$Type = ($StageReward);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $StageReward_ = $StageReward$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/api/$FTBQuestsTags" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $FTBQuestsTags {

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FTBQuestsTags$Type = ($FTBQuestsTags);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FTBQuestsTags_ = $FTBQuestsTags$Type;
}}
declare module "packages/dev/ftb/mods/ftbxmodcompat/ftbquests/kubejs/$FTBQuestsKubeJSTeamData" {
import {$BaseQuestFile, $BaseQuestFile$Type} from "packages/dev/ftb/mods/ftbquests/quest/$BaseQuestFile"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$ProgressChange, $ProgressChange$Type} from "packages/dev/ftb/mods/ftbquests/util/$ProgressChange"
import {$TeamData, $TeamData$Type} from "packages/dev/ftb/mods/ftbquests/quest/$TeamData"
import {$EntityArrayList, $EntityArrayList$Type} from "packages/dev/latvian/mods/kubejs/player/$EntityArrayList"

export class $FTBQuestsKubeJSTeamData {

constructor()

public "reset"(id: any): void
public "getFile"(): $BaseQuestFile
public "complete"(id: any): void
public "isCompleted"(id: any): boolean
public "getData"(): $TeamData
public "getLocked"(): boolean
public "canStartQuest"(id: any): boolean
public "getTaskProgress"(id: any): long
public "changeProgress"(id: any, consumer: $Consumer$Type<($ProgressChange$Type)>): void
public "setLocked"(v: boolean): void
public "getRelativeProgress"(id: any): integer
public "isStarted"(id: any): boolean
public "getOnlineMembers"(): $EntityArrayList
public "addProgress"(id: any, progress: long): boolean
get "file"(): $BaseQuestFile
get "data"(): $TeamData
get "locked"(): boolean
set "locked"(value: boolean)
get "onlineMembers"(): $EntityArrayList
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FTBQuestsKubeJSTeamData$Type = ($FTBQuestsKubeJSTeamData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FTBQuestsKubeJSTeamData_ = $FTBQuestsKubeJSTeamData$Type;
}}
declare module "packages/dev/ftb/mods/ftbteams/forge/$FTBTeamsForge" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $FTBTeamsForge {

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FTBTeamsForge$Type = ($FTBTeamsForge);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FTBTeamsForge_ = $FTBTeamsForge$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/sidebar/$SidebarGroupGuiButton" {
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$AbstractButton, $AbstractButton$Type} from "packages/net/minecraft/client/gui/components/$AbstractButton"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$Rect2i, $Rect2i$Type} from "packages/net/minecraft/client/renderer/$Rect2i"
import {$NarrationElementOutput, $NarrationElementOutput$Type} from "packages/net/minecraft/client/gui/narration/$NarrationElementOutput"

export class $SidebarGroupGuiButton extends $AbstractButton {
static "lastDrawnArea": $Rect2i
static readonly "WIDGETS_LOCATION": $ResourceLocation
static readonly "ACCESSIBILITY_TEXTURE": $ResourceLocation
 "height": integer
 "x": integer
 "y": integer
 "active": boolean
 "visible": boolean
static readonly "UNSET_FG_COLOR": integer

constructor()

public "render"(graphics: $GuiGraphics$Type, mx: integer, my: integer, partialTicks: float): void
public "m_168797_"(narrationElementOutput: $NarrationElementOutput$Type): void
public "onPress"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SidebarGroupGuiButton$Type = ($SidebarGroupGuiButton);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SidebarGroupGuiButton_ = $SidebarGroupGuiButton$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/net/$ChangeChapterGroupMessage" {
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$NetworkManager$PacketContext, $NetworkManager$PacketContext$Type} from "packages/dev/architectury/networking/$NetworkManager$PacketContext"
import {$BaseC2SMessage, $BaseC2SMessage$Type} from "packages/dev/architectury/networking/simple/$BaseC2SMessage"
import {$MessageType, $MessageType$Type} from "packages/dev/architectury/networking/simple/$MessageType"

export class $ChangeChapterGroupMessage extends $BaseC2SMessage {

constructor(buffer: $FriendlyByteBuf$Type)
constructor(chapterId: long, groupId: long)

public "write"(buffer: $FriendlyByteBuf$Type): void
public "getType"(): $MessageType
public "handle"(context: $NetworkManager$PacketContext$Type): void
get "type"(): $MessageType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ChangeChapterGroupMessage$Type = ($ChangeChapterGroupMessage);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ChangeChapterGroupMessage_ = $ChangeChapterGroupMessage$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/client/gui/$SelectQuestObjectScreen" {
import {$Panel, $Panel$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Panel"
import {$QuestObjectBase, $QuestObjectBase$Type} from "packages/dev/ftb/mods/ftbquests/quest/$QuestObjectBase"
import {$ConfigQuestObject, $ConfigQuestObject$Type} from "packages/dev/ftb/mods/ftbquests/util/$ConfigQuestObject"
import {$ConfigCallback, $ConfigCallback$Type} from "packages/dev/ftb/mods/ftblibrary/config/$ConfigCallback"
import {$Key, $Key$Type} from "packages/dev/ftb/mods/ftblibrary/ui/input/$Key"
import {$Theme, $Theme$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Theme"
import {$Pair, $Pair$Type} from "packages/com/mojang/datafixers/util/$Pair"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$AbstractButtonListScreen, $AbstractButtonListScreen$Type} from "packages/dev/ftb/mods/ftblibrary/ui/misc/$AbstractButtonListScreen"

export class $SelectQuestObjectScreen<T extends $QuestObjectBase> extends $AbstractButtonListScreen {
static readonly "NO_INSET": $Pair<(integer), (integer)>
 "posX": integer
 "posY": integer
 "width": integer
 "height": integer

constructor(config: $ConfigQuestObject$Type<(T)>, callback: $ConfigCallback$Type)

public "onClosedByKey"(key: $Key$Type): boolean
public "addButtons"(panel: $Panel$Type): void
public "drawBackground"(graphics: $GuiGraphics$Type, theme: $Theme$Type, x: integer, y: integer, w: integer, h: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SelectQuestObjectScreen$Type<T> = ($SelectQuestObjectScreen<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SelectQuestObjectScreen_<T> = $SelectQuestObjectScreen$Type<(T)>;
}}
declare module "packages/dev/ftb/mods/ftblibrary/snbt/config/$SNBTConfig" {
import {$StringValue, $StringValue$Type} from "packages/dev/ftb/mods/ftblibrary/snbt/config/$StringValue"
import {$ConfigGroup, $ConfigGroup$Type} from "packages/dev/ftb/mods/ftblibrary/config/$ConfigGroup"
import {$Path, $Path$Type} from "packages/java/nio/file/$Path"
import {$IntValue, $IntValue$Type} from "packages/dev/ftb/mods/ftblibrary/snbt/config/$IntValue"
import {$SNBTCompoundTag, $SNBTCompoundTag$Type} from "packages/dev/ftb/mods/ftblibrary/snbt/$SNBTCompoundTag"
import {$BaseValue, $BaseValue$Type} from "packages/dev/ftb/mods/ftblibrary/snbt/config/$BaseValue"
import {$EnumValue, $EnumValue$Type} from "packages/dev/ftb/mods/ftblibrary/snbt/config/$EnumValue"
import {$BooleanValue, $BooleanValue$Type} from "packages/dev/ftb/mods/ftblibrary/snbt/config/$BooleanValue"
import {$StringListValue, $StringListValue$Type} from "packages/dev/ftb/mods/ftblibrary/snbt/config/$StringListValue"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$NameMap, $NameMap$Type} from "packages/dev/ftb/mods/ftblibrary/config/$NameMap"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$IntArrayValue, $IntArrayValue$Type} from "packages/dev/ftb/mods/ftblibrary/snbt/config/$IntArrayValue"
import {$DoubleValue, $DoubleValue$Type} from "packages/dev/ftb/mods/ftblibrary/snbt/config/$DoubleValue"
import {$LongValue, $LongValue$Type} from "packages/dev/ftb/mods/ftblibrary/snbt/config/$LongValue"

export class $SNBTConfig extends $BaseValue<($List<($BaseValue<(any)>)>)> {
readonly "parent": $SNBTConfig
readonly "key": string
readonly "defaultValue": T


public "add"<T extends $BaseValue<(any)>>(value: T): T
public "load"(path: $Path$Type, defaultPath: $Path$Type, comment: $Supplier$Type<((string)[])>): void
public "load"(path: $Path$Type): void
public "write"(buf: $FriendlyByteBuf$Type): void
public "write"(tag: $SNBTCompoundTag$Type): void
public "read"(tag: $SNBTCompoundTag$Type): void
public "read"(buf: $FriendlyByteBuf$Type): void
public "save"(path: $Path$Type): void
public static "create"(name: string): $SNBTConfig
public "addLong"(key: string, def: long): $LongValue
public "addLong"(key: string, def: long, min: long, max: long): $LongValue
public "addDouble"(key: string, def: double): $DoubleValue
public "addDouble"(key: string, def: double, min: double, max: double): $DoubleValue
public "addStringList"(key: string, def: $List$Type<(string)>): $StringListValue
public "addEnum"<T>(key: string, nameMap: $NameMap$Type<(T)>, def: T): $EnumValue<(T)>
public "addEnum"<T>(key: string, nameMap: $NameMap$Type<(T)>): $EnumValue<(T)>
public "addGroup"(key: string, displayOrder: integer): $SNBTConfig
public "addGroup"(key: string): $SNBTConfig
public "addString"(key: string, def: string): $StringValue
public "saveNow"(path: $Path$Type): void
public "addInt"(key: string, def: integer): $IntValue
public "addInt"(key: string, def: integer, min: integer, max: integer): $IntValue
public "addIntArray"(key: string, def: (integer)[]): $IntArrayValue
public "addBoolean"(key: string, def: boolean): $BooleanValue
public "createClientConfig"(group: $ConfigGroup$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SNBTConfig$Type = ($SNBTConfig);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SNBTConfig_ = $SNBTConfig$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/client/gui/$RewardNotificationsScreen" {
import {$Theme, $Theme$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Theme"
import {$RewardKey, $RewardKey$Type} from "packages/dev/ftb/mods/ftbquests/client/gui/$RewardKey"
import {$IRewardListenerScreen, $IRewardListenerScreen$Type} from "packages/dev/ftb/mods/ftbquests/client/gui/$IRewardListenerScreen"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$BaseScreen, $BaseScreen$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$BaseScreen"

export class $RewardNotificationsScreen extends $BaseScreen implements $IRewardListenerScreen {
 "posX": integer
 "posY": integer
 "width": integer
 "height": integer

constructor()

public "addWidgets"(): void
public "getTheme"(): $Theme
public "onInit"(): boolean
public "drawBackground"(graphics: $GuiGraphics$Type, theme: $Theme$Type, x: integer, y: integer, w: integer, h: integer): void
public "rewardReceived"(key: $RewardKey$Type, count: integer): void
public static "add"(key: $RewardKey$Type, count: integer): boolean
get "theme"(): $Theme
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RewardNotificationsScreen$Type = ($RewardNotificationsScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RewardNotificationsScreen_ = $RewardNotificationsScreen$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/quest/theme/property/$DoubleProperty" {
import {$ThemeProperty, $ThemeProperty$Type} from "packages/dev/ftb/mods/ftbquests/quest/theme/property/$ThemeProperty"

export class $DoubleProperty extends $ThemeProperty<(double)> {
readonly "min": double
readonly "max": double

constructor(n: string, mn: double, mx: double)
constructor(n: string)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DoubleProperty$Type = ($DoubleProperty);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DoubleProperty_ = $DoubleProperty$Type;
}}
declare module "packages/dev/ftb/mods/ftbteams/api/event/$TeamEvent" {
import {$PlayerChangedTeamEvent, $PlayerChangedTeamEvent$Type} from "packages/dev/ftb/mods/ftbteams/api/event/$PlayerChangedTeamEvent"
import {$Event, $Event$Type} from "packages/dev/architectury/event/$Event"
import {$PlayerJoinedPartyTeamEvent, $PlayerJoinedPartyTeamEvent$Type} from "packages/dev/ftb/mods/ftbteams/api/event/$PlayerJoinedPartyTeamEvent"
import {$TeamPropertiesChangedEvent, $TeamPropertiesChangedEvent$Type} from "packages/dev/ftb/mods/ftbteams/api/event/$TeamPropertiesChangedEvent"
import {$TeamAllyEvent, $TeamAllyEvent$Type} from "packages/dev/ftb/mods/ftbteams/api/event/$TeamAllyEvent"
import {$PlayerLeftPartyTeamEvent, $PlayerLeftPartyTeamEvent$Type} from "packages/dev/ftb/mods/ftbteams/api/event/$PlayerLeftPartyTeamEvent"
import {$TeamCreatedEvent, $TeamCreatedEvent$Type} from "packages/dev/ftb/mods/ftbteams/api/event/$TeamCreatedEvent"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$TeamInfoEvent, $TeamInfoEvent$Type} from "packages/dev/ftb/mods/ftbteams/api/event/$TeamInfoEvent"
import {$PlayerTransferredTeamOwnershipEvent, $PlayerTransferredTeamOwnershipEvent$Type} from "packages/dev/ftb/mods/ftbteams/api/event/$PlayerTransferredTeamOwnershipEvent"
import {$TeamCollectPropertiesEvent, $TeamCollectPropertiesEvent$Type} from "packages/dev/ftb/mods/ftbteams/api/event/$TeamCollectPropertiesEvent"
import {$PlayerLoggedInAfterTeamEvent, $PlayerLoggedInAfterTeamEvent$Type} from "packages/dev/ftb/mods/ftbteams/api/event/$PlayerLoggedInAfterTeamEvent"
import {$ClientTeamPropertiesChangedEvent, $ClientTeamPropertiesChangedEvent$Type} from "packages/dev/ftb/mods/ftbteams/api/event/$ClientTeamPropertiesChangedEvent"
import {$Team, $Team$Type} from "packages/dev/ftb/mods/ftbteams/api/$Team"

export class $TeamEvent {
static readonly "CREATED": $Event<($Consumer<($TeamCreatedEvent)>)>
static readonly "LOADED": $Event<($Consumer<($TeamEvent)>)>
static readonly "SAVED": $Event<($Consumer<($TeamEvent)>)>
static readonly "DELETED": $Event<($Consumer<($TeamEvent)>)>
static readonly "PLAYER_LOGGED_IN": $Event<($Consumer<($PlayerLoggedInAfterTeamEvent)>)>
static readonly "OWNERSHIP_TRANSFERRED": $Event<($Consumer<($PlayerTransferredTeamOwnershipEvent)>)>
static readonly "COLLECT_PROPERTIES": $Event<($Consumer<($TeamCollectPropertiesEvent)>)>
static readonly "PROPERTIES_CHANGED": $Event<($Consumer<($TeamPropertiesChangedEvent)>)>
static readonly "PLAYER_CHANGED": $Event<($Consumer<($PlayerChangedTeamEvent)>)>
static readonly "PLAYER_JOINED_PARTY": $Event<($Consumer<($PlayerJoinedPartyTeamEvent)>)>
static readonly "PLAYER_LEFT_PARTY": $Event<($Consumer<($PlayerLeftPartyTeamEvent)>)>
static readonly "INFO": $Event<($Consumer<($TeamInfoEvent)>)>
static readonly "ADD_ALLY": $Event<($Consumer<($TeamAllyEvent)>)>
static readonly "REMOVE_ALLY": $Event<($Consumer<($TeamAllyEvent)>)>
static readonly "CLIENT_PROPERTIES_CHANGED": $Event<($Consumer<($ClientTeamPropertiesChangedEvent)>)>

constructor(team: $Team$Type)

public "getTeam"(): $Team
get "team"(): $Team
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TeamEvent$Type = ($TeamEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TeamEvent_ = $TeamEvent$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/ui/misc/$ButtonListBaseScreen" {
import {$Panel, $Panel$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Panel"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Widget, $Widget$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Widget"
import {$Theme, $Theme$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Theme"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$BaseScreen, $BaseScreen$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$BaseScreen"

/**
 * 
 * @deprecated
 */
export class $ButtonListBaseScreen extends $BaseScreen {
 "posX": integer
 "posY": integer
 "width": integer
 "height": integer

/**
 * 
 * @deprecated
 */
constructor()

public "alignWidgets"(): void
public "addWidgets"(): void
public "getTheme"(): $Theme
public "setTitle"(txt: $Component$Type): void
public "getFilterText"(widget: $Widget$Type): string
public "addButtons"(arg0: $Panel$Type): void
public "getTitle"(): $Component
public "setBorder"(h: integer, v: integer, w: integer): void
public "drawBackground"(graphics: $GuiGraphics$Type, theme: $Theme$Type, x: integer, y: integer, w: integer, h: integer): void
public "setHasSearchBox"(newVal: boolean): void
public "focus"(): void
get "theme"(): $Theme
set "title"(value: $Component$Type)
get "title"(): $Component
set "hasSearchBox"(value: boolean)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ButtonListBaseScreen$Type = ($ButtonListBaseScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ButtonListBaseScreen_ = $ButtonListBaseScreen$Type;
}}
declare module "packages/dev/ftb/mods/ftbxmodcompat/ftbquests/kubejs/$CustomTaskEventJS" {
import {$EventJS, $EventJS$Type} from "packages/dev/latvian/mods/kubejs/event/$EventJS"
import {$CustomTaskEvent, $CustomTaskEvent$Type} from "packages/dev/ftb/mods/ftbquests/events/$CustomTaskEvent"
import {$CustomTask, $CustomTask$Type} from "packages/dev/ftb/mods/ftbquests/quest/task/$CustomTask"
import {$CustomTask$Check, $CustomTask$Check$Type} from "packages/dev/ftb/mods/ftbquests/quest/task/$CustomTask$Check"

export class $CustomTaskEventJS extends $EventJS {
readonly "event": $CustomTaskEvent


public "getTask"(): $CustomTask
public "setCheck"(c: $CustomTask$Check$Type): void
public "setCheckTimer"(t: integer): void
public "setMaxProgress"(max: long): void
public "setEnableButton"(b: boolean): void
get "task"(): $CustomTask
set "check"(value: $CustomTask$Check$Type)
set "checkTimer"(value: integer)
set "maxProgress"(value: long)
set "enableButton"(value: boolean)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CustomTaskEventJS$Type = ($CustomTaskEventJS);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CustomTaskEventJS_ = $CustomTaskEventJS$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/ui/$NordButton" {
import {$Panel, $Panel$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Panel"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Icon, $Icon$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Icon"
import {$Theme, $Theme$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Theme"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$TooltipList, $TooltipList$Type} from "packages/dev/ftb/mods/ftblibrary/util/$TooltipList"
import {$SimpleTextButton, $SimpleTextButton$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$SimpleTextButton"

export class $NordButton extends $SimpleTextButton {
 "posX": integer
 "posY": integer
 "width": integer
 "height": integer

constructor(panel: $Panel$Type, txt: $Component$Type, icon: $Icon$Type)

public "draw"(graphics: $GuiGraphics$Type, theme: $Theme$Type, x: integer, y: integer, w: integer, h: integer): void
public "addMouseOverText"(list: $TooltipList$Type): void
public "drawBackground"(graphics: $GuiGraphics$Type, theme: $Theme$Type, x: integer, y: integer, w: integer, h: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $NordButton$Type = ($NordButton);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $NordButton_ = $NordButton$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/quest/task/$ObservationTask" {
import {$Quest, $Quest$Type} from "packages/dev/ftb/mods/ftbquests/quest/$Quest"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$ConfigGroup, $ConfigGroup$Type} from "packages/dev/ftb/mods/ftblibrary/config/$ConfigGroup"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$TeamData, $TeamData$Type} from "packages/dev/ftb/mods/ftbquests/quest/$TeamData"
import {$HitResult, $HitResult$Type} from "packages/net/minecraft/world/phys/$HitResult"
import {$TaskType, $TaskType$Type} from "packages/dev/ftb/mods/ftbquests/quest/task/$TaskType"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$AbstractBooleanTask, $AbstractBooleanTask$Type} from "packages/dev/ftb/mods/ftbquests/quest/task/$AbstractBooleanTask"
import {$Button, $Button$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Button"

export class $ObservationTask extends $AbstractBooleanTask {
readonly "id": long

constructor(id: long, quest: $Quest$Type)

public "getType"(): $TaskType
public "readData"(nbt: $CompoundTag$Type): void
public "getAltTitle"(): $Component
public "checkOnLogin"(): boolean
public "onButtonClicked"(button: $Button$Type, canClick: boolean): void
public "setToObserve"(toObserve: string): void
public "canSubmit"(teamData: $TeamData$Type, player: $ServerPlayer$Type): boolean
public "getTimer"(): long
public "observe"(player: $Player$Type, result: $HitResult$Type): boolean
public "writeNetData"(buffer: $FriendlyByteBuf$Type): void
public "writeData"(nbt: $CompoundTag$Type): void
public "fillConfigGroup"(config: $ConfigGroup$Type): void
public "readNetData"(buffer: $FriendlyByteBuf$Type): void
get "type"(): $TaskType
get "altTitle"(): $Component
set "toObserve"(value: string)
get "timer"(): long
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ObservationTask$Type = ($ObservationTask);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ObservationTask_ = $ObservationTask$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/client/gui/$RewardTablesScreen" {
import {$Panel, $Panel$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Panel"
import {$QuestScreen, $QuestScreen$Type} from "packages/dev/ftb/mods/ftbquests/client/gui/quests/$QuestScreen"
import {$Key, $Key$Type} from "packages/dev/ftb/mods/ftblibrary/ui/input/$Key"
import {$Pair, $Pair$Type} from "packages/com/mojang/datafixers/util/$Pair"
import {$AbstractButtonListScreen, $AbstractButtonListScreen$Type} from "packages/dev/ftb/mods/ftblibrary/ui/misc/$AbstractButtonListScreen"

export class $RewardTablesScreen extends $AbstractButtonListScreen {
static readonly "NO_INSET": $Pair<(integer), (integer)>
 "posX": integer
 "posY": integer
 "width": integer
 "height": integer

constructor(questScreen: $QuestScreen$Type)

public "onClosedByKey"(key: $Key$Type): boolean
public "onInit"(): boolean
public "addButtons"(panel: $Panel$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RewardTablesScreen$Type = ($RewardTablesScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RewardTablesScreen_ = $RewardTablesScreen$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/config/ui/$EditStringConfigOverlay" {
import {$Panel, $Panel$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Panel"
import {$ConfigFromString, $ConfigFromString$Type} from "packages/dev/ftb/mods/ftblibrary/config/$ConfigFromString"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$ModalPanel, $ModalPanel$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$ModalPanel"
import {$ConfigCallback, $ConfigCallback$Type} from "packages/dev/ftb/mods/ftblibrary/config/$ConfigCallback"
import {$Key, $Key$Type} from "packages/dev/ftb/mods/ftblibrary/ui/input/$Key"
import {$Theme, $Theme$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Theme"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $EditStringConfigOverlay<T> extends $ModalPanel {
 "posX": integer
 "posY": integer
 "width": integer
 "height": integer

constructor(panel: $Panel$Type, config: $ConfigFromString$Type<(T)>, callback: $ConfigCallback$Type)
constructor(panel: $Panel$Type, config: $ConfigFromString$Type<(T)>, callback: $ConfigCallback$Type, title: $Component$Type)

public "alignWidgets"(): void
public "addWidgets"(): void
public "keyPressed"(key: $Key$Type): boolean
public "atPosition"(x: integer, y: integer): $EditStringConfigOverlay<(T)>
public "drawBackground"(graphics: $GuiGraphics$Type, theme: $Theme$Type, x: integer, y: integer, w: integer, h: integer): void
public "atMousePosition"(): $EditStringConfigOverlay<(T)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EditStringConfigOverlay$Type<T> = ($EditStringConfigOverlay<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EditStringConfigOverlay_<T> = $EditStringConfigOverlay$Type<(T)>;
}}
declare module "packages/dev/ftb/mods/ftblibrary/config/$FTBLibraryClientConfig" {
import {$ConfigGroup, $ConfigGroup$Type} from "packages/dev/ftb/mods/ftblibrary/config/$ConfigGroup"
import {$SNBTConfig, $SNBTConfig$Type} from "packages/dev/ftb/mods/ftblibrary/snbt/config/$SNBTConfig"
import {$BooleanValue, $BooleanValue$Type} from "packages/dev/ftb/mods/ftblibrary/snbt/config/$BooleanValue"
import {$IntArrayValue, $IntArrayValue$Type} from "packages/dev/ftb/mods/ftblibrary/snbt/config/$IntArrayValue"

export interface $FTBLibraryClientConfig {

}

export namespace $FTBLibraryClientConfig {
const CONFIG: $SNBTConfig
const TOOLTIPS: $SNBTConfig
const ITEM_MODNAME: $BooleanValue
const FLUID_MODNAME: $BooleanValue
const IMAGE_MODNAME: $BooleanValue
const COLOR: $SNBTConfig
const RECENT: $IntArrayValue
function load(): void
function save(): void
function getConfigGroup(): $ConfigGroup
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FTBLibraryClientConfig$Type = ($FTBLibraryClientConfig);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FTBLibraryClientConfig_ = $FTBLibraryClientConfig$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/net/$ClaimChoiceRewardMessage" {
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$NetworkManager$PacketContext, $NetworkManager$PacketContext$Type} from "packages/dev/architectury/networking/$NetworkManager$PacketContext"
import {$BaseC2SMessage, $BaseC2SMessage$Type} from "packages/dev/architectury/networking/simple/$BaseC2SMessage"
import {$MessageType, $MessageType$Type} from "packages/dev/architectury/networking/simple/$MessageType"

export class $ClaimChoiceRewardMessage extends $BaseC2SMessage {

constructor(i: long, idx: integer)

public "write"(buffer: $FriendlyByteBuf$Type): void
public "getType"(): $MessageType
public "handle"(context: $NetworkManager$PacketContext$Type): void
get "type"(): $MessageType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClaimChoiceRewardMessage$Type = ($ClaimChoiceRewardMessage);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClaimChoiceRewardMessage_ = $ClaimChoiceRewardMessage$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/net/$MoveMovableMessage" {
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$NetworkManager$PacketContext, $NetworkManager$PacketContext$Type} from "packages/dev/architectury/networking/$NetworkManager$PacketContext"
import {$Movable, $Movable$Type} from "packages/dev/ftb/mods/ftbquests/quest/$Movable"
import {$BaseC2SMessage, $BaseC2SMessage$Type} from "packages/dev/architectury/networking/simple/$BaseC2SMessage"
import {$MessageType, $MessageType$Type} from "packages/dev/architectury/networking/simple/$MessageType"

export class $MoveMovableMessage extends $BaseC2SMessage {

constructor(obj: $Movable$Type, c: long, _x: double, _y: double)

public "write"(buffer: $FriendlyByteBuf$Type): void
public "getType"(): $MessageType
public "handle"(context: $NetworkManager$PacketContext$Type): void
get "type"(): $MessageType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MoveMovableMessage$Type = ($MoveMovableMessage);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MoveMovableMessage_ = $MoveMovableMessage$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/ui/$WidgetLayout$Padding" {
import {$Record, $Record$Type} from "packages/java/lang/$Record"

export class $WidgetLayout$Padding extends $Record {

constructor(vertical: integer, horizontal: integer)

public "equals"(o: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "vertical"(): integer
public "horizontal"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WidgetLayout$Padding$Type = ($WidgetLayout$Padding);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WidgetLayout$Padding_ = $WidgetLayout$Padding$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/block/entity/$LootCrateOpenerBlockEntity" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $LootCrateOpenerBlockEntity extends $BlockEntity {
 "blockState": $BlockState

constructor(blockPos: $BlockPos$Type, blockState: $BlockState$Type)

public "getOwner"(): $UUID
public "setOwner"(owner: $UUID$Type): void
public "load"(compoundTag: $CompoundTag$Type): void
public "getOutputCount"(): integer
get "owner"(): $UUID
set "owner"(value: $UUID$Type)
get "outputCount"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LootCrateOpenerBlockEntity$Type = ($LootCrateOpenerBlockEntity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LootCrateOpenerBlockEntity_ = $LootCrateOpenerBlockEntity$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/api/$ItemFilterAdapter$Matcher" {
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export interface $ItemFilterAdapter$Matcher extends $Predicate<($ItemStack)> {

 "test"(arg0: $ItemStack$Type): boolean
 "or"(arg0: $Predicate$Type<(any)>): $Predicate<($ItemStack)>
 "negate"(): $Predicate<($ItemStack)>
 "and"(arg0: $Predicate$Type<(any)>): $Predicate<($ItemStack)>

(arg0: $ItemStack$Type): boolean
}

export namespace $ItemFilterAdapter$Matcher {
function not<T>(arg0: $Predicate$Type<(any)>): $Predicate<($ItemStack)>
function isEqual<T>(arg0: any): $Predicate<($ItemStack)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ItemFilterAdapter$Matcher$Type = ($ItemFilterAdapter$Matcher);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ItemFilterAdapter$Matcher_ = $ItemFilterAdapter$Matcher$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/nbtedit/$NBTEditorScreen" {
import {$NBTEditorScreen$NBTPanel, $NBTEditorScreen$NBTPanel$Type} from "packages/dev/ftb/mods/ftblibrary/nbtedit/$NBTEditorScreen$NBTPanel"
import {$Panel, $Panel$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Panel"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$AbstractThreePanelScreen, $AbstractThreePanelScreen$Type} from "packages/dev/ftb/mods/ftblibrary/ui/misc/$AbstractThreePanelScreen"
import {$Tag, $Tag$Type} from "packages/net/minecraft/nbt/$Tag"
import {$Icon, $Icon$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Icon"
import {$Key, $Key$Type} from "packages/dev/ftb/mods/ftblibrary/ui/input/$Key"
import {$Pair, $Pair$Type} from "packages/com/mojang/datafixers/util/$Pair"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$NBTEditorScreen$NBTCallback, $NBTEditorScreen$NBTCallback$Type} from "packages/dev/ftb/mods/ftblibrary/nbtedit/$NBTEditorScreen$NBTCallback"
import {$SimpleButton, $SimpleButton$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$SimpleButton"

export class $NBTEditorScreen extends $AbstractThreePanelScreen<($NBTEditorScreen$NBTPanel)> {
static readonly "NBT_BYTE": $Icon
static readonly "NBT_SHORT": $Icon
static readonly "NBT_INT": $Icon
static readonly "NBT_LONG": $Icon
static readonly "NBT_FLOAT": $Icon
static readonly "NBT_DOUBLE": $Icon
static readonly "NBT_STRING": $Icon
static readonly "NBT_LIST": $Icon
static readonly "NBT_LIST_CLOSED": $Icon
static readonly "NBT_LIST_OPEN": $Icon
static readonly "NBT_MAP": $Icon
static readonly "NBT_MAP_CLOSED": $Icon
static readonly "NBT_MAP_OPEN": $Icon
static readonly "NBT_BYTE_ARRAY": $Icon
static readonly "NBT_BYTE_ARRAY_CLOSED": $Icon
static readonly "NBT_BYTE_ARRAY_OPEN": $Icon
static readonly "NBT_INT_ARRAY": $Icon
static readonly "NBT_INT_ARRAY_CLOSED": $Icon
static readonly "NBT_INT_ARRAY_OPEN": $Icon
readonly "panelTopLeft": $Panel
readonly "panelTopRight": $Panel
static readonly "NO_INSET": $Pair<(integer), (integer)>
 "posX": integer
 "posY": integer
 "width": integer
 "height": integer

constructor(info: $CompoundTag$Type, nbt: $CompoundTag$Type, callback: $NBTEditorScreen$NBTCallback$Type)

public "newTag"(panel: $Panel$Type, title: string, icon: $Icon$Type, supplier: $Supplier$Type<($Tag$Type)>): $SimpleButton
public "doesGuiPauseGame"(): boolean
public "keyPressed"(key: $Key$Type): boolean
public "onInit"(): boolean
public "onClosed"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $NBTEditorScreen$Type = ($NBTEditorScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $NBTEditorScreen_ = $NBTEditorScreen$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/quest/reward/$RewardType$GuiProvider" {
import {$Quest, $Quest$Type} from "packages/dev/ftb/mods/ftbquests/quest/$Quest"
import {$Panel, $Panel$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Panel"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Reward, $Reward$Type} from "packages/dev/ftb/mods/ftbquests/quest/reward/$Reward"

export interface $RewardType$GuiProvider {

 "openCreationGui"(arg0: $Panel$Type, arg1: $Quest$Type, arg2: $Consumer$Type<($Reward$Type)>): void

(arg0: $Panel$Type, arg1: $Quest$Type, arg2: $Consumer$Type<($Reward$Type)>): void
}

export namespace $RewardType$GuiProvider {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RewardType$GuiProvider$Type = ($RewardType$GuiProvider);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RewardType$GuiProvider_ = $RewardType$GuiProvider$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/icon/$Drawable" {
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export interface $Drawable {

 "draw"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: integer, arg4: integer): void
 "drawStatic"(graphics: $GuiGraphics$Type, x: integer, y: integer, w: integer, h: integer): void
 "draw3D"(graphics: $GuiGraphics$Type): void

(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: integer, arg4: integer): void
}

export namespace $Drawable {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Drawable$Type = ($Drawable);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Drawable_ = $Drawable$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/net/$EditNBTPacket" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$NetworkManager$PacketContext, $NetworkManager$PacketContext$Type} from "packages/dev/architectury/networking/$NetworkManager$PacketContext"
import {$BaseS2CMessage, $BaseS2CMessage$Type} from "packages/dev/architectury/networking/simple/$BaseS2CMessage"
import {$MessageType, $MessageType$Type} from "packages/dev/architectury/networking/simple/$MessageType"

export class $EditNBTPacket extends $BaseS2CMessage {

constructor(buf: $FriendlyByteBuf$Type)
constructor(i: $CompoundTag$Type, t: $CompoundTag$Type)

public "write"(buf: $FriendlyByteBuf$Type): void
public "getType"(): $MessageType
public "handle"(context: $NetworkManager$PacketContext$Type): void
get "type"(): $MessageType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EditNBTPacket$Type = ($EditNBTPacket);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EditNBTPacket_ = $EditNBTPacket$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/config/ui/$EditMultilineStringConfigOverlay" {
import {$Panel, $Panel$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Panel"
import {$ModalPanel, $ModalPanel$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$ModalPanel"
import {$ConfigCallback, $ConfigCallback$Type} from "packages/dev/ftb/mods/ftblibrary/config/$ConfigCallback"
import {$StringConfig, $StringConfig$Type} from "packages/dev/ftb/mods/ftblibrary/config/$StringConfig"
import {$Key, $Key$Type} from "packages/dev/ftb/mods/ftblibrary/ui/input/$Key"
import {$Theme, $Theme$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Theme"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $EditMultilineStringConfigOverlay extends $ModalPanel {
 "posX": integer
 "posY": integer
 "width": integer
 "height": integer

constructor(panel: $Panel$Type, config: $StringConfig$Type, callback: $ConfigCallback$Type)

public "alignWidgets"(): void
public "addWidgets"(): void
public "keyPressed"(key: $Key$Type): boolean
public "drawBackground"(graphics: $GuiGraphics$Type, theme: $Theme$Type, x: integer, y: integer, w: integer, h: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EditMultilineStringConfigOverlay$Type = ($EditMultilineStringConfigOverlay);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EditMultilineStringConfigOverlay_ = $EditMultilineStringConfigOverlay$Type;
}}
declare module "packages/dev/ftb/mods/ftbxmodcompat/ftbteams/kubejs/$FTBTeamsKubeJSEvents" {
import {$EventHandler, $EventHandler$Type} from "packages/dev/latvian/mods/kubejs/event/$EventHandler"
import {$EventGroup, $EventGroup$Type} from "packages/dev/latvian/mods/kubejs/event/$EventGroup"

export interface $FTBTeamsKubeJSEvents {

}

export namespace $FTBTeamsKubeJSEvents {
const EVENT_GROUP: $EventGroup
const PLAYER_JOINED_PARTY: $EventHandler
const PLAYER_LEFT_PARTY: $EventHandler
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FTBTeamsKubeJSEvents$Type = ($FTBTeamsKubeJSEvents);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FTBTeamsKubeJSEvents_ = $FTBTeamsKubeJSEvents$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/item/$ScreenBlockItem" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$BlockItem, $BlockItem$Type} from "packages/net/minecraft/world/item/$BlockItem"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$AdditionalItemPlacement, $AdditionalItemPlacement$Type} from "packages/net/mehvahdjukaar/moonlight/api/item/additional_placements/$AdditionalItemPlacement"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$ScreenBlockItem$ScreenSize, $ScreenBlockItem$ScreenSize$Type} from "packages/dev/ftb/mods/ftbquests/item/$ScreenBlockItem$ScreenSize"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $ScreenBlockItem extends $BlockItem {
static readonly "BLOCK_ENTITY_TAG": string
static readonly "BLOCK_STATE_TAG": string
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(block: $Block$Type, size: $ScreenBlockItem$ScreenSize$Type)

public static "getSize"(stack: $ItemStack$Type): integer
public "moonlight$addAdditionalBehavior"(arg0: $AdditionalItemPlacement$Type): void
public "moonlight$getAdditionalBehavior"(): $AdditionalItemPlacement
public "moonlight$getClientAnimationExtension"(): any
public "moonlight$setClientAnimationExtension"(arg0: any): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ScreenBlockItem$Type = ($ScreenBlockItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ScreenBlockItem_ = $ScreenBlockItem$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/block/$FTBQuestsBlocks" {
import {$RegistrySupplier, $RegistrySupplier$Type} from "packages/dev/architectury/registry/registries/$RegistrySupplier"
import {$DeferredRegister, $DeferredRegister$Type} from "packages/dev/architectury/registry/registries/$DeferredRegister"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"

export class $FTBQuestsBlocks {
static readonly "BLOCKS": $DeferredRegister<($Block)>
static readonly "BARRIER": $RegistrySupplier<($Block)>
static readonly "STAGE_BARRIER": $RegistrySupplier<($Block)>
static readonly "DETECTOR": $RegistrySupplier<($Block)>
static readonly "LOOT_CRATE_OPENER": $RegistrySupplier<($Block)>
static readonly "TASK_SCREEN_1": $RegistrySupplier<($Block)>
static readonly "TASK_SCREEN_3": $RegistrySupplier<($Block)>
static readonly "TASK_SCREEN_5": $RegistrySupplier<($Block)>
static readonly "TASK_SCREEN_7": $RegistrySupplier<($Block)>
static readonly "AUX_SCREEN": $RegistrySupplier<($Block)>

constructor()

public static "register"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FTBQuestsBlocks$Type = ($FTBQuestsBlocks);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FTBQuestsBlocks_ = $FTBQuestsBlocks$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/snbt/config/$EnumValue" {
import {$ConfigGroup, $ConfigGroup$Type} from "packages/dev/ftb/mods/ftblibrary/config/$ConfigGroup"
import {$SNBTConfig, $SNBTConfig$Type} from "packages/dev/ftb/mods/ftblibrary/snbt/config/$SNBTConfig"
import {$SNBTCompoundTag, $SNBTCompoundTag$Type} from "packages/dev/ftb/mods/ftblibrary/snbt/$SNBTCompoundTag"
import {$BaseValue, $BaseValue$Type} from "packages/dev/ftb/mods/ftblibrary/snbt/config/$BaseValue"

export class $EnumValue<T> extends $BaseValue<(T)> {
readonly "parent": $SNBTConfig
readonly "key": string
readonly "defaultValue": T


public "set"(v: T): void
public "write"(tag: $SNBTCompoundTag$Type): void
public "read"(tag: $SNBTCompoundTag$Type): void
public "createClientConfig"(group: $ConfigGroup$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EnumValue$Type<T> = ($EnumValue<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EnumValue_<T> = $EnumValue$Type<(T)>;
}}
declare module "packages/dev/ftb/mods/ftbquests/client/gui/quests/$QuestPanel" {
import {$Panel, $Panel$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Panel"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Key, $Key$Type} from "packages/dev/ftb/mods/ftblibrary/ui/input/$Key"
import {$Theme, $Theme$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Theme"
import {$MouseButton, $MouseButton$Type} from "packages/dev/ftb/mods/ftblibrary/ui/input/$MouseButton"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $QuestPanel extends $Panel {
 "posX": integer
 "posY": integer
 "width": integer
 "height": integer

constructor(panel: $Panel$Type)

public "updateMinMax"(): void
public "resetScroll"(): void
public "alignWidgets"(): void
public "addWidgets"(): void
public "scrollPanel"(scroll: double): boolean
public "keyPressed"(key: $Key$Type): boolean
public "draw"(graphics: $GuiGraphics$Type, theme: $Theme$Type, x: integer, y: integer, w: integer, h: integer): void
public "checkMouseOver"(mouseX: integer, mouseY: integer): boolean
public "mousePressed"(button: $MouseButton$Type): boolean
public "updateMouseOver"(mouseX: integer, mouseY: integer): void
public "scrollTo"(x: double, y: double): void
public "drawOffsetBackground"(graphics: $GuiGraphics$Type, theme: $Theme$Type, x: integer, y: integer, w: integer, h: integer): void
public "mouseReleased"(button: $MouseButton$Type): void
public "withPreservedPos"(r: $Consumer$Type<($QuestPanel$Type)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $QuestPanel$Type = ($QuestPanel);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $QuestPanel_ = $QuestPanel$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/item/$FTBQuestsItems" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$RegistrySupplier, $RegistrySupplier$Type} from "packages/dev/architectury/registry/registries/$RegistrySupplier"
import {$CreativeModeTab, $CreativeModeTab$Type} from "packages/net/minecraft/world/item/$CreativeModeTab"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$List, $List$Type} from "packages/java/util/$List"
import {$DeferredRegister, $DeferredRegister$Type} from "packages/dev/architectury/registry/registries/$DeferredRegister"

export class $FTBQuestsItems {
static readonly "ITEMS": $DeferredRegister<($Item)>
static readonly "BOOK": $RegistrySupplier<($Item)>
static readonly "LOOTCRATE": $RegistrySupplier<($Item)>
static readonly "TASK_SCREEN_CONFIGURATOR": $RegistrySupplier<($Item)>
static readonly "MISSING_ITEM": $RegistrySupplier<($Item)>
static readonly "CUSTOM_ICON": $RegistrySupplier<($Item)>
static readonly "BARRIER": $RegistrySupplier<($Item)>
static readonly "STAGE_BARRIER": $RegistrySupplier<($Item)>
static readonly "DETECTOR": $RegistrySupplier<($Item)>
static readonly "LOOT_CRATE_OPENER": $RegistrySupplier<($Item)>
static readonly "TASK_SCREEN_1": $RegistrySupplier<($Item)>
static readonly "TASK_SCREEN_3": $RegistrySupplier<($Item)>
static readonly "TASK_SCREEN_5": $RegistrySupplier<($Item)>
static readonly "TASK_SCREEN_7": $RegistrySupplier<($Item)>
static readonly "BASE_ITEMS": $List<($RegistrySupplier<($Item)>)>
static readonly "CREATIVE_TAB": $RegistrySupplier<($CreativeModeTab)>

constructor()

public static "register"(): void
public static "defaultProps"(): $Item$Properties
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FTBQuestsItems$Type = ($FTBQuestsItems);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FTBQuestsItems_ = $FTBQuestsItems$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/ui/$BaseScreen" {
import {$Panel, $Panel$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Panel"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$ModalPanel, $ModalPanel$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$ModalPanel"
import {$Widget, $Widget$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Widget"
import {$Key, $Key$Type} from "packages/dev/ftb/mods/ftblibrary/ui/input/$Key"
import {$Window, $Window$Type} from "packages/com/mojang/blaze3d/platform/$Window"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$ContextMenu, $ContextMenu$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$ContextMenu"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$Runnable, $Runnable$Type} from "packages/java/lang/$Runnable"
import {$TooltipList, $TooltipList$Type} from "packages/dev/ftb/mods/ftblibrary/util/$TooltipList"
import {$BooleanConsumer, $BooleanConsumer$Type} from "packages/dev/ftb/mods/ftblibrary/util/$BooleanConsumer"
import {$KeyModifiers, $KeyModifiers$Type} from "packages/dev/ftb/mods/ftblibrary/ui/input/$KeyModifiers"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ContextMenuItem, $ContextMenuItem$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$ContextMenuItem"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$Theme, $Theme$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Theme"
import {$MouseButton, $MouseButton$Type} from "packages/dev/ftb/mods/ftblibrary/ui/input/$MouseButton"

export class $BaseScreen extends $Panel {
 "posX": integer
 "posY": integer
 "width": integer
 "height": integer

constructor()

public "handleClick"(scheme: string, path: string): boolean
public "popModalPanel"(): $ModalPanel
public "closeModalPanel"(panel: $ModalPanel$Type): void
public "getPrevScreen"(): $Screen
public "anyModalPanelOpen"(): boolean
public "getContextMenu"(): $Optional<($ModalPanel)>
public "updateGui"(mx: integer, my: integer, pt: float): void
public "openContextMenu"(menuItems: $List$Type<($ContextMenuItem$Type)>): $ContextMenu
public "openContextMenu"(newContextMenu: $ContextMenu$Type): void
public "doesGuiPauseGame"(): boolean
public "drawForeground"(graphics: $GuiGraphics$Type, theme: $Theme$Type, x: integer, y: integer, w: integer, h: integer): void
public "onClosedByKey"(key: $Key$Type): boolean
public "openYesNoFull"(title: $Component$Type, desc: $Component$Type, callback: $BooleanConsumer$Type): void
public "openYesNo"(title: $Component$Type, desc: $Component$Type, callback: $Runnable$Type): void
public "onBack"(): void
public "setFocusedWidget"(widget: $Widget$Type): void
public "getY"(): integer
public "alignWidgets"(): void
public "refreshWidgets"(): void
public "getTheme"(): $Theme
public "initGui"(): void
public "shouldCloseOnEsc"(): boolean
public "pushModalPanel"(modalPanel: $ModalPanel$Type): void
public "getMouseX"(): integer
public "getMouseY"(): integer
public "keyPressed"(key: $Key$Type): boolean
public "draw"(graphics: $GuiGraphics$Type, theme: $Theme$Type, x: integer, y: integer, w: integer, h: integer): void
public "onInit"(): boolean
public "getX"(): integer
public "drawDefaultBackground"(graphics: $GuiGraphics$Type): boolean
public "openGui"(): void
public "getScreen"(): $Window
public "onClosed"(): void
public "mouseDoubleClicked"(button: $MouseButton$Type): boolean
public "mousePressed"(button: $MouseButton$Type): boolean
public "updateMouseOver"(mouseX: integer, mouseY: integer): void
public "addMouseOverText"(list: $TooltipList$Type): void
public "closeGui"(openPrevScreen: boolean): void
public "shouldAddMouseOverText"(): boolean
public "drawBackground"(graphics: $GuiGraphics$Type, theme: $Theme$Type, x: integer, y: integer, w: integer, h: integer): void
public "getScrollX"(): double
public "getScrollY"(): double
public "setScrollX"(scroll: double): void
public "setScrollY"(scroll: double): void
public "onPostInit"(): void
public "closeContextMenu"(): void
public "getGui"(): $BaseScreen
public "charTyped"(c: character, modifiers: $KeyModifiers$Type): boolean
public "mouseReleased"(button: $MouseButton$Type): void
public "mouseDragged"(button: integer, dragX: double, dragY: double): boolean
public "mouseScrolled"(scroll: double): boolean
public "keyReleased"(key: $Key$Type): void
public "isMouseOver"(x: integer, y: integer, w: integer, h: integer): boolean
public "isMouseOver"(widget: $Widget$Type): boolean
public "getPartialTicks"(): float
get "prevScreen"(): $Screen
get "contextMenu"(): $Optional<($ModalPanel)>
set "focusedWidget"(value: $Widget$Type)
get "y"(): integer
get "theme"(): $Theme
get "mouseX"(): integer
get "mouseY"(): integer
get "x"(): integer
get "screen"(): $Window
get "scrollX"(): double
get "scrollY"(): double
set "scrollX"(value: double)
set "scrollY"(value: double)
get "gui"(): $BaseScreen
get "partialTicks"(): float
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BaseScreen$Type = ($BaseScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BaseScreen_ = $BaseScreen$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/config/$NameMap$Builder" {
import {$Color4I, $Color4I$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Color4I"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$NameMap, $NameMap$Type} from "packages/dev/ftb/mods/ftblibrary/config/$NameMap"
import {$Icon, $Icon$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Icon"

export class $NameMap$Builder<T> {


public "name"(p: $Function$Type<(T), ($Component$Type)>): $NameMap$Builder<(T)>
public "id"(p: $Function$Type<(T), (string)>): $NameMap$Builder<(T)>
public "create"(): $NameMap<(T)>
public "color"(p: $Function$Type<(T), ($Color4I$Type)>): $NameMap$Builder<(T)>
public "nameKey"(p: $Function$Type<(T), (string)>): $NameMap$Builder<(T)>
public "baseNameKey"(key: string): $NameMap$Builder<(T)>
public "icon"(p: $Function$Type<(T), ($Icon$Type)>): $NameMap$Builder<(T)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $NameMap$Builder$Type<T> = ($NameMap$Builder<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $NameMap$Builder_<T> = $NameMap$Builder$Type<(T)>;
}}
declare module "packages/dev/ftb/mods/ftbquests/quest/$DefaultChapterGroup" {
import {$BaseQuestFile, $BaseQuestFile$Type} from "packages/dev/ftb/mods/ftbquests/quest/$BaseQuestFile"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Icon, $Icon$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Icon"
import {$ChapterGroup, $ChapterGroup$Type} from "packages/dev/ftb/mods/ftbquests/quest/$ChapterGroup"

export class $DefaultChapterGroup extends $ChapterGroup {
readonly "id": long

constructor(f: $BaseQuestFile$Type)

public "getAltTitle"(): $Component
public "getAltIcon"(): $Icon
get "altTitle"(): $Component
get "altIcon"(): $Icon
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DefaultChapterGroup$Type = ($DefaultChapterGroup);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DefaultChapterGroup_ = $DefaultChapterGroup$Type;
}}
declare module "packages/dev/ftb/mods/ftbxmodcompat/ftbquests/jei/$LootCrateRecipeManagerPlugin" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$IRecipeCategory, $IRecipeCategory$Type} from "packages/mezz/jei/api/recipe/category/$IRecipeCategory"
import {$List, $List$Type} from "packages/java/util/$List"
import {$RecipeType, $RecipeType$Type} from "packages/mezz/jei/api/recipe/$RecipeType"
import {$WrappedLootCrate, $WrappedLootCrate$Type} from "packages/dev/ftb/mods/ftbxmodcompat/ftbquests/recipemod_common/$WrappedLootCrate"
import {$IFocus, $IFocus$Type} from "packages/mezz/jei/api/recipe/$IFocus"
import {$IRecipeManagerPlugin, $IRecipeManagerPlugin$Type} from "packages/mezz/jei/api/recipe/advanced/$IRecipeManagerPlugin"

export class $LootCrateRecipeManagerPlugin extends $Enum<($LootCrateRecipeManagerPlugin)> implements $IRecipeManagerPlugin {
static readonly "INSTANCE": $LootCrateRecipeManagerPlugin


public "getWrappedLootCrates"(): $List<($WrappedLootCrate)>
public static "values"(): ($LootCrateRecipeManagerPlugin)[]
public static "valueOf"(name: string): $LootCrateRecipeManagerPlugin
public "refresh"(): void
public "getRecipeTypes"<V>(focus: $IFocus$Type<(V)>): $List<($RecipeType<(any)>)>
public "getRecipes"<T>(recipeCategory: $IRecipeCategory$Type<(T)>): $List<(T)>
public "getRecipes"<T, V>(recipeCategory: $IRecipeCategory$Type<(T)>, focus: $IFocus$Type<(V)>): $List<(T)>
get "wrappedLootCrates"(): $List<($WrappedLootCrate)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LootCrateRecipeManagerPlugin$Type = (("instance")) | ($LootCrateRecipeManagerPlugin);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LootCrateRecipeManagerPlugin_ = $LootCrateRecipeManagerPlugin$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/net/$FTBLibraryNet" {
import {$SimpleNetworkManager, $SimpleNetworkManager$Type} from "packages/dev/architectury/networking/simple/$SimpleNetworkManager"
import {$MessageType, $MessageType$Type} from "packages/dev/architectury/networking/simple/$MessageType"

export interface $FTBLibraryNet {

}

export namespace $FTBLibraryNet {
const NET: $SimpleNetworkManager
const EDIT_NBT: $MessageType
const EDIT_NBT_RESPONSE: $MessageType
const SYNC_KNOWN_SERVER_REGISTRIES: $MessageType
const EDIT_CONFIG: $MessageType
function init(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FTBLibraryNet$Type = ($FTBLibraryNet);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FTBLibraryNet_ = $FTBLibraryNet$Type;
}}
declare module "packages/dev/ftb/mods/ftbteams/api/client/$ClientTeamManager" {
import {$KnownClientPlayer, $KnownClientPlayer$Type} from "packages/dev/ftb/mods/ftbteams/api/client/$KnownClientPlayer"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$Team, $Team$Type} from "packages/dev/ftb/mods/ftbteams/api/$Team"

export interface $ClientTeamManager {

 "self"(): $KnownClientPlayer
 "isValid"(): boolean
 "knownClientPlayers"(): $Collection<($KnownClientPlayer)>
 "getManagerId"(): $UUID
 "getKnownPlayer"(arg0: $UUID$Type): $Optional<($KnownClientPlayer)>
 "getTeamByID"(arg0: $UUID$Type): $Optional<($Team)>
 "getTeams"(): $Collection<($Team)>
 "formatName"(arg0: $UUID$Type): $Component
 "selfTeam"(): $Team
}

export namespace $ClientTeamManager {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientTeamManager$Type = ($ClientTeamManager);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientTeamManager_ = $ClientTeamManager$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/quest/$DependencyRequirement" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$NameMap, $NameMap$Type} from "packages/dev/ftb/mods/ftblibrary/config/$NameMap"

export class $DependencyRequirement extends $Enum<($DependencyRequirement)> {
static readonly "ALL_COMPLETED": $DependencyRequirement
static readonly "ONE_COMPLETED": $DependencyRequirement
static readonly "ALL_STARTED": $DependencyRequirement
static readonly "ONE_STARTED": $DependencyRequirement
static readonly "NAME_MAP": $NameMap<($DependencyRequirement)>


public static "values"(): ($DependencyRequirement)[]
public static "valueOf"(name: string): $DependencyRequirement
public "getId"(): string
public "needCompletion"(): boolean
public "needOnlyOne"(): boolean
get "id"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DependencyRequirement$Type = (("one_completed") | ("all_completed") | ("one_started") | ("all_started")) | ($DependencyRequirement);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DependencyRequirement_ = $DependencyRequirement$Type;
}}
declare module "packages/dev/ftb/mods/ftbxmodcompat/ftbquests/recipemod_common/$WrappedLootCrateCache" {
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$List, $List$Type} from "packages/java/util/$List"
import {$WrappedLootCrate, $WrappedLootCrate$Type} from "packages/dev/ftb/mods/ftbxmodcompat/ftbquests/recipemod_common/$WrappedLootCrate"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export class $WrappedLootCrateCache {

constructor(preRebuild: $Consumer$Type<($List$Type<($ItemStack$Type)>)>, postRebuild: $Consumer$Type<($List$Type<($ItemStack$Type)>)>)

public "getWrappedLootCrates"(): $List<($WrappedLootCrate)>
public "findCratesWithOutput"(stack: $ItemStack$Type): $List<($WrappedLootCrate)>
public "findCratesWithInput"(stack: $ItemStack$Type): $List<($WrappedLootCrate)>
public "refresh"(): void
public "knownCrateStacks"(): $Collection<($ItemStack)>
get "wrappedLootCrates"(): $List<($WrappedLootCrate)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WrappedLootCrateCache$Type = ($WrappedLootCrateCache);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WrappedLootCrateCache_ = $WrappedLootCrateCache$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/net/$CreateTaskAtMessage" {
import {$Task, $Task$Type} from "packages/dev/ftb/mods/ftbquests/quest/task/$Task"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$NetworkManager$PacketContext, $NetworkManager$PacketContext$Type} from "packages/dev/architectury/networking/$NetworkManager$PacketContext"
import {$BaseC2SMessage, $BaseC2SMessage$Type} from "packages/dev/architectury/networking/simple/$BaseC2SMessage"
import {$Chapter, $Chapter$Type} from "packages/dev/ftb/mods/ftbquests/quest/$Chapter"
import {$MessageType, $MessageType$Type} from "packages/dev/architectury/networking/simple/$MessageType"

export class $CreateTaskAtMessage extends $BaseC2SMessage {

constructor(chapter: $Chapter$Type, x: double, y: double, task: $Task$Type)

public "write"(buffer: $FriendlyByteBuf$Type): void
public "getType"(): $MessageType
public "handle"(context: $NetworkManager$PacketContext$Type): void
get "type"(): $MessageType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CreateTaskAtMessage$Type = ($CreateTaskAtMessage);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CreateTaskAtMessage_ = $CreateTaskAtMessage$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/client/gui/quests/$TaskButton" {
import {$Panel, $Panel$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Panel"
import {$Task, $Task$Type} from "packages/dev/ftb/mods/ftbquests/quest/task/$Task"
import {$PositionedIngredient, $PositionedIngredient$Type} from "packages/dev/ftb/mods/ftblibrary/util/client/$PositionedIngredient"
import {$Theme, $Theme$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Theme"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$MouseButton, $MouseButton$Type} from "packages/dev/ftb/mods/ftblibrary/ui/input/$MouseButton"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$TooltipList, $TooltipList$Type} from "packages/dev/ftb/mods/ftblibrary/util/$TooltipList"
import {$Button, $Button$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Button"

export class $TaskButton extends $Button {
 "posX": integer
 "posY": integer
 "width": integer
 "height": integer

constructor(panel: $Panel$Type, task: $Task$Type)

public "draw"(graphics: $GuiGraphics$Type, theme: $Theme$Type, x: integer, y: integer, w: integer, h: integer): void
public "mousePressed"(button: $MouseButton$Type): boolean
public "addMouseOverText"(list: $TooltipList$Type): void
public "getIngredientUnderMouse"(): $Optional<($PositionedIngredient)>
public "drawBackground"(graphics: $GuiGraphics$Type, theme: $Theme$Type, x: integer, y: integer, w: integer, h: integer): void
public "drawIcon"(graphics: $GuiGraphics$Type, theme: $Theme$Type, x: integer, y: integer, w: integer, h: integer): void
public "onClicked"(button: $MouseButton$Type): void
get "ingredientUnderMouse"(): $Optional<($PositionedIngredient)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TaskButton$Type = ($TaskButton);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TaskButton_ = $TaskButton$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/ui/$SimpleButton" {
import {$Panel, $Panel$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Panel"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$SimpleButton$Callback, $SimpleButton$Callback$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$SimpleButton$Callback"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Icon, $Icon$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Icon"
import {$Theme, $Theme$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Theme"
import {$MouseButton, $MouseButton$Type} from "packages/dev/ftb/mods/ftblibrary/ui/input/$MouseButton"
import {$TooltipList, $TooltipList$Type} from "packages/dev/ftb/mods/ftblibrary/util/$TooltipList"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$Button, $Button$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Button"

export class $SimpleButton extends $Button {
 "posX": integer
 "posY": integer
 "width": integer
 "height": integer

constructor(panel: $Panel$Type, text: $Component$Type, icon: $Icon$Type, c: $SimpleButton$Callback$Type)
constructor(panel: $Panel$Type, text: $List$Type<($Component$Type)>, icon: $Icon$Type, c: $SimpleButton$Callback$Type)

public "addMouseOverText"(list: $TooltipList$Type): void
public "drawBackground"(graphics: $GuiGraphics$Type, theme: $Theme$Type, x: integer, y: integer, w: integer, h: integer): void
public "onClicked"(button: $MouseButton$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SimpleButton$Type = ($SimpleButton);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SimpleButton_ = $SimpleButton$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/net/$MoveChapterResponseMessage" {
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$NetworkManager$PacketContext, $NetworkManager$PacketContext$Type} from "packages/dev/architectury/networking/$NetworkManager$PacketContext"
import {$BaseS2CMessage, $BaseS2CMessage$Type} from "packages/dev/architectury/networking/simple/$BaseS2CMessage"
import {$MessageType, $MessageType$Type} from "packages/dev/architectury/networking/simple/$MessageType"

export class $MoveChapterResponseMessage extends $BaseS2CMessage {

constructor(i: long, u: boolean)

public "write"(buffer: $FriendlyByteBuf$Type): void
public "getType"(): $MessageType
public "handle"(context: $NetworkManager$PacketContext$Type): void
get "type"(): $MessageType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MoveChapterResponseMessage$Type = ($MoveChapterResponseMessage);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MoveChapterResponseMessage_ = $MoveChapterResponseMessage$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/config/$ConfigWithVariants" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Widget, $Widget$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Widget"
import {$ConfigCallback, $ConfigCallback$Type} from "packages/dev/ftb/mods/ftblibrary/config/$ConfigCallback"
import {$ConfigValue, $ConfigValue$Type} from "packages/dev/ftb/mods/ftblibrary/config/$ConfigValue"
import {$MouseButton, $MouseButton$Type} from "packages/dev/ftb/mods/ftblibrary/ui/input/$MouseButton"

export class $ConfigWithVariants<T> extends $ConfigValue<(T)> {
static readonly "NULL_TEXT": $Component
 "id": string

constructor()

public "getIteration"(arg0: T, arg1: boolean): T
public "onClicked"(clickedWidget: $Widget$Type, button: $MouseButton$Type, callback: $ConfigCallback$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ConfigWithVariants$Type<T> = ($ConfigWithVariants<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ConfigWithVariants_<T> = $ConfigWithVariants$Type<(T)>;
}}
declare module "packages/dev/ftb/mods/ftbquests/net/$SyncEditingModeMessage" {
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$NetworkManager$PacketContext, $NetworkManager$PacketContext$Type} from "packages/dev/architectury/networking/$NetworkManager$PacketContext"
import {$BaseS2CMessage, $BaseS2CMessage$Type} from "packages/dev/architectury/networking/simple/$BaseS2CMessage"
import {$MessageType, $MessageType$Type} from "packages/dev/architectury/networking/simple/$MessageType"

export class $SyncEditingModeMessage extends $BaseS2CMessage {

constructor(buffer: $FriendlyByteBuf$Type)
constructor(id: $UUID$Type, e: boolean)

public "write"(buffer: $FriendlyByteBuf$Type): void
public "getType"(): $MessageType
public "handle"(context: $NetworkManager$PacketContext$Type): void
get "type"(): $MessageType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SyncEditingModeMessage$Type = ($SyncEditingModeMessage);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SyncEditingModeMessage_ = $SyncEditingModeMessage$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/icon/$ItemIcon" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$IResourceIcon, $IResourceIcon$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$IResourceIcon"
import {$Icon, $Icon$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Icon"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $ItemIcon extends $Icon implements $IResourceIcon {


public "equals"(o: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "getStack"(): $ItemStack
public static "getItemIcon"(lazyStackString: string): $Icon
public static "getItemIcon"(item: $Item$Type): $Icon
public static "getItemIcon"(stack: $ItemStack$Type): $Icon
public "getIngredient"(): any
public "draw"(graphics: $GuiGraphics$Type, x: integer, y: integer, w: integer, h: integer): void
public "drawStatic"(graphics: $GuiGraphics$Type, x: integer, y: integer, w: integer, h: integer): void
public "draw3D"(graphics: $GuiGraphics$Type): void
public "getResourceLocation"(): $ResourceLocation
public static "drawItem3D"(graphics: $GuiGraphics$Type, stack: $ItemStack$Type): void
get "stack"(): $ItemStack
get "ingredient"(): any
get "resourceLocation"(): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ItemIcon$Type = ($ItemIcon);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ItemIcon_ = $ItemIcon$Type;
}}
declare module "packages/dev/ftb/mods/ftbteams/api/event/$ClientTeamPropertiesChangedEvent" {
import {$TeamPropertyCollection, $TeamPropertyCollection$Type} from "packages/dev/ftb/mods/ftbteams/api/property/$TeamPropertyCollection"
import {$Team, $Team$Type} from "packages/dev/ftb/mods/ftbteams/api/$Team"

export class $ClientTeamPropertiesChangedEvent {

constructor(t: $Team$Type, p: $TeamPropertyCollection$Type)

public "getOldProperties"(): $TeamPropertyCollection
public "getTeam"(): $Team
get "oldProperties"(): $TeamPropertyCollection
get "team"(): $Team
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientTeamPropertiesChangedEvent$Type = ($ClientTeamPropertiesChangedEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientTeamPropertiesChangedEvent_ = $ClientTeamPropertiesChangedEvent$Type;
}}
declare module "packages/dev/ftb/mods/ftbxmodcompat/generic/gamestages/$GameStagesStageProvider" {
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$StageProvider, $StageProvider$Type} from "packages/dev/ftb/mods/ftblibrary/integration/stages/$StageProvider"

export class $GameStagesStageProvider implements $StageProvider {

constructor()

public static "hasStage"(player: $Player$Type, stage: string): boolean
public static "syncStages"(player: $Player$Type): void
public "getName"(): string
public "add"(player: $ServerPlayer$Type, stage: string): void
public "remove"(player: $ServerPlayer$Type, stage: string): void
public "sync"(player: $ServerPlayer$Type): void
public "has"(player: $Player$Type, stage: string): boolean
public static "addStage"(player: $Player$Type, stage: string): void
public static "removeStage"(player: $Player$Type, stage: string): void
get "name"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GameStagesStageProvider$Type = ($GameStagesStageProvider);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GameStagesStageProvider_ = $GameStagesStageProvider$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/ui/misc/$AbstractThreePanelScreen" {
import {$Panel, $Panel$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Panel"
import {$Theme, $Theme$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Theme"
import {$Pair, $Pair$Type} from "packages/com/mojang/datafixers/util/$Pair"
import {$BaseScreen, $BaseScreen$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$BaseScreen"

export class $AbstractThreePanelScreen<T extends $Panel> extends $BaseScreen {
static readonly "NO_INSET": $Pair<(integer), (integer)>
 "posX": integer
 "posY": integer
 "width": integer
 "height": integer


public "tick"(): void
public "alignWidgets"(): void
public "addWidgets"(): void
public "getTheme"(): $Theme
public "showBottomPanel"(show: boolean): void
public "showCloseButton"(show: boolean): void
get "theme"(): $Theme
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AbstractThreePanelScreen$Type<T> = ($AbstractThreePanelScreen<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AbstractThreePanelScreen_<T> = $AbstractThreePanelScreen$Type<(T)>;
}}
declare module "packages/dev/ftb/mods/ftbquests/net/$SubmitTaskMessage" {
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$NetworkManager$PacketContext, $NetworkManager$PacketContext$Type} from "packages/dev/architectury/networking/$NetworkManager$PacketContext"
import {$BaseC2SMessage, $BaseC2SMessage$Type} from "packages/dev/architectury/networking/simple/$BaseC2SMessage"
import {$MessageType, $MessageType$Type} from "packages/dev/architectury/networking/simple/$MessageType"

export class $SubmitTaskMessage extends $BaseC2SMessage {

constructor(taskId: long)

public "write"(buffer: $FriendlyByteBuf$Type): void
public "getType"(): $MessageType
public "handle"(context: $NetworkManager$PacketContext$Type): void
get "type"(): $MessageType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SubmitTaskMessage$Type = ($SubmitTaskMessage);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SubmitTaskMessage_ = $SubmitTaskMessage$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/events/$ObjectStartedEvent$QuestEvent" {
import {$Quest, $Quest$Type} from "packages/dev/ftb/mods/ftbquests/quest/$Quest"
import {$Event, $Event$Type} from "packages/dev/architectury/event/$Event"
import {$QuestProgressEventData, $QuestProgressEventData$Type} from "packages/dev/ftb/mods/ftbquests/events/$QuestProgressEventData"
import {$EventActor, $EventActor$Type} from "packages/dev/architectury/event/$EventActor"
import {$ObjectStartedEvent, $ObjectStartedEvent$Type} from "packages/dev/ftb/mods/ftbquests/events/$ObjectStartedEvent"
import {$ObjectStartedEvent$FileEvent, $ObjectStartedEvent$FileEvent$Type} from "packages/dev/ftb/mods/ftbquests/events/$ObjectStartedEvent$FileEvent"
import {$ObjectStartedEvent$ChapterEvent, $ObjectStartedEvent$ChapterEvent$Type} from "packages/dev/ftb/mods/ftbquests/events/$ObjectStartedEvent$ChapterEvent"
import {$ObjectStartedEvent$TaskEvent, $ObjectStartedEvent$TaskEvent$Type} from "packages/dev/ftb/mods/ftbquests/events/$ObjectStartedEvent$TaskEvent"

export class $ObjectStartedEvent$QuestEvent extends $ObjectStartedEvent<($Quest)> {
static readonly "GENERIC": $Event<($EventActor<($ObjectStartedEvent<(any)>)>)>
static readonly "FILE": $Event<($EventActor<($ObjectStartedEvent$FileEvent)>)>
static readonly "CHAPTER": $Event<($EventActor<($ObjectStartedEvent$ChapterEvent)>)>
static readonly "QUEST": $Event<($EventActor<($ObjectStartedEvent$QuestEvent)>)>
static readonly "TASK": $Event<($EventActor<($ObjectStartedEvent$TaskEvent)>)>

constructor(d: $QuestProgressEventData$Type<($Quest$Type)>)

public "getQuest"(): $Quest
get "quest"(): $Quest
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ObjectStartedEvent$QuestEvent$Type = ($ObjectStartedEvent$QuestEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ObjectStartedEvent$QuestEvent_ = $ObjectStartedEvent$QuestEvent$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/config/$EnumConfig" {
import {$Color4I, $Color4I$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Color4I"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$NameMap, $NameMap$Type} from "packages/dev/ftb/mods/ftblibrary/config/$NameMap"
import {$Widget, $Widget$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Widget"
import {$ConfigCallback, $ConfigCallback$Type} from "packages/dev/ftb/mods/ftblibrary/config/$ConfigCallback"
import {$Icon, $Icon$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Icon"
import {$MouseButton, $MouseButton$Type} from "packages/dev/ftb/mods/ftblibrary/ui/input/$MouseButton"
import {$TooltipList, $TooltipList$Type} from "packages/dev/ftb/mods/ftblibrary/util/$TooltipList"
import {$ConfigWithVariants, $ConfigWithVariants$Type} from "packages/dev/ftb/mods/ftblibrary/config/$ConfigWithVariants"

export class $EnumConfig<E> extends $ConfigWithVariants<(E)> {
readonly "nameMap": $NameMap<(E)>
static readonly "NULL_TEXT": $Component
 "id": string

constructor(nm: $NameMap$Type<(E)>)

public "getIcon"(v: E): $Icon
public "getIteration"(currentValue: E, next: boolean): E
public "getColor"(v: E): $Color4I
public "getStringForGUI"(v: E): $Component
public "addInfo"(list: $TooltipList$Type): void
public "onClicked"(clickedWidget: $Widget$Type, button: $MouseButton$Type, callback: $ConfigCallback$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EnumConfig$Type<E> = ($EnumConfig<(E)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EnumConfig_<E> = $EnumConfig$Type<(E)>;
}}
declare module "packages/dev/ftb/mods/ftblibrary/util/$NBTUtils" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"

export class $NBTUtils {

constructor()

public static "getSizeInBytes"(nbt: $CompoundTag$Type, compressed: boolean): long
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $NBTUtils$Type = ($NBTUtils);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $NBTUtils_ = $NBTUtils$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/client/gui/quests/$EmergencyItemsButton" {
import {$Panel, $Panel$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Panel"
import {$TabButton, $TabButton$Type} from "packages/dev/ftb/mods/ftbquests/client/gui/quests/$TabButton"
import {$MouseButton, $MouseButton$Type} from "packages/dev/ftb/mods/ftblibrary/ui/input/$MouseButton"

export class $EmergencyItemsButton extends $TabButton {
 "posX": integer
 "posY": integer
 "width": integer
 "height": integer

constructor(panel: $Panel$Type)

public "onClicked"(button: $MouseButton$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EmergencyItemsButton$Type = ($EmergencyItemsButton);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EmergencyItemsButton_ = $EmergencyItemsButton$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/net/$SyncRewardBlockingMessage" {
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$NetworkManager$PacketContext, $NetworkManager$PacketContext$Type} from "packages/dev/architectury/networking/$NetworkManager$PacketContext"
import {$BaseS2CMessage, $BaseS2CMessage$Type} from "packages/dev/architectury/networking/simple/$BaseS2CMessage"
import {$MessageType, $MessageType$Type} from "packages/dev/architectury/networking/simple/$MessageType"

export class $SyncRewardBlockingMessage extends $BaseS2CMessage {

constructor(uuid: $UUID$Type, rewardsBlocked: boolean)
constructor(buf: $FriendlyByteBuf$Type)

public "write"(buf: $FriendlyByteBuf$Type): void
public "getType"(): $MessageType
public "handle"(context: $NetworkManager$PacketContext$Type): void
get "type"(): $MessageType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SyncRewardBlockingMessage$Type = ($SyncRewardBlockingMessage);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SyncRewardBlockingMessage_ = $SyncRewardBlockingMessage$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/events/$ThemePropertyEvent" {
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Event, $Event$Type} from "packages/dev/architectury/event/$Event"
import {$ThemeProperty, $ThemeProperty$Type} from "packages/dev/ftb/mods/ftbquests/quest/theme/property/$ThemeProperty"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $ThemePropertyEvent {
static readonly "EVENT": $Event<($Consumer<($ThemePropertyEvent)>)>

constructor(m: $Map$Type<(string), ($ThemeProperty$Type<(any)>)>)

public "register"(property: $ThemeProperty$Type<(any)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ThemePropertyEvent$Type = ($ThemePropertyEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ThemePropertyEvent_ = $ThemePropertyEvent$Type;
}}
declare module "packages/dev/ftb/mods/ftbxmodcompat/generic/gamestages/forge/$GameStagesStageProviderImpl" {
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"

export class $GameStagesStageProviderImpl {

constructor()

public static "hasStage"(player: $Player$Type, stage: string): boolean
public static "syncStages"(player: $Player$Type): void
public static "addStage"(player: $Player$Type, stage: string): void
public static "removeStage"(player: $Player$Type, stage: string): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GameStagesStageProviderImpl$Type = ($GameStagesStageProviderImpl);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GameStagesStageProviderImpl_ = $GameStagesStageProviderImpl$Type;
}}
declare module "packages/dev/ftb/mods/ftbteams/client/gui/$BaseInvitationScreen" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$InvitationSetup, $InvitationSetup$Type} from "packages/dev/ftb/mods/ftbteams/client/gui/$InvitationSetup"
import {$Theme, $Theme$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Theme"
import {$GameProfile, $GameProfile$Type} from "packages/com/mojang/authlib/$GameProfile"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$BaseScreen, $BaseScreen$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$BaseScreen"

export class $BaseInvitationScreen extends $BaseScreen implements $InvitationSetup {
 "posX": integer
 "posY": integer
 "width": integer
 "height": integer

constructor(title: $Component$Type)

public "drawForeground"(graphics: $GuiGraphics$Type, theme: $Theme$Type, x: integer, y: integer, w: integer, h: integer): void
public "alignWidgets"(): void
public "addWidgets"(): void
public "onInit"(): boolean
public "isInvited"(profile: $GameProfile$Type): boolean
public "drawBackground"(graphics: $GuiGraphics$Type, theme: $Theme$Type, x: integer, y: integer, w: integer, h: integer): void
public "setInvited"(profile: $GameProfile$Type, invited: boolean): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BaseInvitationScreen$Type = ($BaseInvitationScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BaseInvitationScreen_ = $BaseInvitationScreen$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/util/client/$ClientUtils" {
import {$BooleanSupplier, $BooleanSupplier$Type} from "packages/java/util/function/$BooleanSupplier"
import {$HolderLookup$Provider, $HolderLookup$Provider$Type} from "packages/net/minecraft/core/$HolderLookup$Provider"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$FluidStack, $FluidStack$Type} from "packages/dev/architectury/fluid/$FluidStack"
import {$Runnable, $Runnable$Type} from "packages/java/lang/$Runnable"

export class $ClientUtils {
static readonly "IS_CLIENT_OP": $BooleanSupplier
static readonly "RUN_LATER": $List<($Runnable)>

constructor()

public static "handleClick"(scheme: string, path: string): boolean
public static "getStillTexture"(stack: $FluidStack$Type): $ResourceLocation
public static "execClientCommand"(command: string, printChat: boolean): void
public static "getGuiAs"<T>(gui: $Screen$Type, clazz: $Class$Type<(T)>): T
public static "runLater"(runnable: $Runnable$Type): void
public static "getFluidColor"(stack: $FluidStack$Type): integer
public static "getCurrentGuiAs"<T>(clazz: $Class$Type<(T)>): T
public static "registryAccess"(): $HolderLookup$Provider
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientUtils$Type = ($ClientUtils);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientUtils_ = $ClientUtils$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/util/$ProgressChange" {
import {$BaseQuestFile, $BaseQuestFile$Type} from "packages/dev/ftb/mods/ftbquests/quest/$BaseQuestFile"
import {$QuestObjectBase, $QuestObjectBase$Type} from "packages/dev/ftb/mods/ftbquests/quest/$QuestObjectBase"
import {$Date, $Date$Type} from "packages/java/util/$Date"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"

export class $ProgressChange {

constructor(file: $BaseQuestFile$Type, origin: $QuestObjectBase$Type, playerId: $UUID$Type)
constructor(f: $BaseQuestFile$Type, buffer: $FriendlyByteBuf$Type)

public "write"(buffer: $FriendlyByteBuf$Type): void
public "getDate"(): $Date
public "maybeForceProgress"(teamId: $UUID$Type): void
public "getPlayerId"(): $UUID
public "shouldReset"(): boolean
public "shouldNotify"(): boolean
public "setReset"(reset: boolean): $ProgressChange
public "withNotifications"(): $ProgressChange
get "date"(): $Date
get "playerId"(): $UUID
set "reset"(value: boolean)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ProgressChange$Type = ($ProgressChange);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ProgressChange_ = $ProgressChange$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/icon/$CustomIconItem" {
import {$Icon, $Icon$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Icon"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export interface $CustomIconItem {

 "getCustomIcon"(arg0: $ItemStack$Type): $Icon

(arg0: $ItemStack$Type): $Icon
}

export namespace $CustomIconItem {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CustomIconItem$Type = ($CustomIconItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CustomIconItem_ = $CustomIconItem$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/snbt/config/$DoubleValue" {
import {$ConfigGroup, $ConfigGroup$Type} from "packages/dev/ftb/mods/ftblibrary/config/$ConfigGroup"
import {$SNBTConfig, $SNBTConfig$Type} from "packages/dev/ftb/mods/ftblibrary/snbt/config/$SNBTConfig"
import {$SNBTCompoundTag, $SNBTCompoundTag$Type} from "packages/dev/ftb/mods/ftblibrary/snbt/$SNBTCompoundTag"
import {$NumberValue, $NumberValue$Type} from "packages/dev/ftb/mods/ftblibrary/snbt/config/$NumberValue"

export class $DoubleValue extends $NumberValue<(double)> {
readonly "parent": $SNBTConfig
readonly "key": string
readonly "defaultValue": T


public "set"(v: double): void
public "write"(tag: $SNBTCompoundTag$Type): void
public "read"(tag: $SNBTCompoundTag$Type): void
public "range"(max: double): $NumberValue<(double)>
public "createClientConfig"(group: $ConfigGroup$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DoubleValue$Type = ($DoubleValue);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DoubleValue_ = $DoubleValue$Type;
}}
declare module "packages/dev/ftb/mods/ftbxmodcompat/generic/permissions/$LuckPermsProvider" {
import {$PermissionProvider, $PermissionProvider$Type} from "packages/dev/ftb/mods/ftblibrary/integration/permissions/$PermissionProvider"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"

export class $LuckPermsProvider implements $PermissionProvider {

constructor()

public "getName"(): string
public "getStringPermission"(player: $ServerPlayer$Type, nodeName: string, def: string): string
public "getIntegerPermission"(player: $ServerPlayer$Type, nodeName: string, def: integer): integer
public "getBooleanPermission"(player: $ServerPlayer$Type, nodeName: string, def: boolean): boolean
get "name"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LuckPermsProvider$Type = ($LuckPermsProvider);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LuckPermsProvider_ = $LuckPermsProvider$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/ui/$CheckBoxList" {
import {$CheckBoxList$CheckBoxEntry, $CheckBoxList$CheckBoxEntry$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$CheckBoxList$CheckBoxEntry"
import {$Theme, $Theme$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Theme"
import {$MouseButton, $MouseButton$Type} from "packages/dev/ftb/mods/ftblibrary/ui/input/$MouseButton"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$TooltipList, $TooltipList$Type} from "packages/dev/ftb/mods/ftblibrary/util/$TooltipList"
import {$BaseScreen, $BaseScreen$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$BaseScreen"
import {$Button, $Button$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Button"

export class $CheckBoxList extends $Button {
 "posX": integer
 "posY": integer
 "width": integer
 "height": integer

constructor(gui: $BaseScreen$Type, radioButtonBehaviour: boolean)

public "addBox"(name: string): $CheckBoxList$CheckBoxEntry
public "addBox"(checkBox: $CheckBoxList$CheckBoxEntry$Type): void
public "draw"(graphics: $GuiGraphics$Type, theme: $Theme$Type, x: integer, y: integer, w: integer, h: integer): void
public "getValueCount"(): integer
public "getCheckboxIcon"(graphics: $GuiGraphics$Type, theme: $Theme$Type, x: integer, y: integer, w: integer, h: integer, index: integer, value: integer): void
public "addMouseOverText"(list: $TooltipList$Type): void
public "drawBackground"(graphics: $GuiGraphics$Type, theme: $Theme$Type, x: integer, y: integer, w: integer, h: integer): void
public "onClicked"(button: $MouseButton$Type): void
public "drawCheckboxBackground"(graphics: $GuiGraphics$Type, theme: $Theme$Type, x: integer, y: integer, w: integer, h: integer): void
get "valueCount"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CheckBoxList$Type = ($CheckBoxList);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CheckBoxList_ = $CheckBoxList$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/ui/$Panel" {
import {$PositionedIngredient, $PositionedIngredient$Type} from "packages/dev/ftb/mods/ftblibrary/util/client/$PositionedIngredient"
import {$CursorType, $CursorType$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$CursorType"
import {$Widget, $Widget$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Widget"
import {$Key, $Key$Type} from "packages/dev/ftb/mods/ftblibrary/ui/input/$Key"
import {$Iterable, $Iterable$Type} from "packages/java/lang/$Iterable"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$TooltipList, $TooltipList$Type} from "packages/dev/ftb/mods/ftblibrary/util/$TooltipList"
import {$WidgetLayout, $WidgetLayout$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$WidgetLayout"
import {$KeyModifiers, $KeyModifiers$Type} from "packages/dev/ftb/mods/ftblibrary/ui/input/$KeyModifiers"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Theme, $Theme$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Theme"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$MouseButton, $MouseButton$Type} from "packages/dev/ftb/mods/ftblibrary/ui/input/$MouseButton"

export class $Panel extends $Widget {
 "posX": integer
 "posY": integer
 "width": integer
 "height": integer

constructor(panel: $Panel$Type)

public "add"(widget: $Widget$Type): void
public "addAll"(list: $Iterable$Type<(any)>): void
public "setOffset"(flag: boolean): void
public "tick"(): void
public "getY"(): integer
public "alignWidgets"(): void
public "clearWidgets"(): void
public "refreshWidgets"(): void
public "addWidgets"(): void
public "scrollPanel"(scroll: double): boolean
public "getContentHeight"(): integer
public "getContentWidth"(): integer
public "drawWidget"(graphics: $GuiGraphics$Type, theme: $Theme$Type, widget: $Widget$Type, x: integer, y: integer, w: integer, h: integer): void
public "isOffset"(): boolean
public "getScrollStep"(): double
public "setScrollStep"(s: double): void
public "movePanelScroll"(dx: double, dy: double): boolean
public "keyPressed"(key: $Key$Type): boolean
public "draw"(graphics: $GuiGraphics$Type, theme: $Theme$Type, x: integer, y: integer, w: integer, h: integer): void
public "align"(layout: $WidgetLayout$Type): integer
public "getCursor"(): $CursorType
public "getX"(): integer
public "getWidgets"(): $List<($Widget)>
public "onClosed"(): void
public "mouseDoubleClicked"(button: $MouseButton$Type): boolean
public "mousePressed"(button: $MouseButton$Type): boolean
public "updateMouseOver"(mouseX: integer, mouseY: integer): void
public "addMouseOverText"(list: $TooltipList$Type): void
public "getOnlyRenderWidgetsInside"(): boolean
public "getIngredientUnderMouse"(): $Optional<($PositionedIngredient)>
public "drawBackground"(graphics: $GuiGraphics$Type, theme: $Theme$Type, x: integer, y: integer, w: integer, h: integer): void
public "getScrollX"(): double
public "getScrollY"(): double
public "setScrollX"(scroll: double): void
public "setScrollY"(scroll: double): void
public "getOnlyInteractWithWidgetsInside"(): boolean
public "isDefaultScrollVertical"(): boolean
public "isMouseOverAnyWidget"(): boolean
public "drawOffsetBackground"(graphics: $GuiGraphics$Type, theme: $Theme$Type, x: integer, y: integer, w: integer, h: integer): void
public "setOnlyRenderWidgetsInside"(value: boolean): void
public "setOnlyInteractWithWidgetsInside"(value: boolean): void
public "getWidget"(index: integer): $Widget
public "charTyped"(c: character, modifiers: $KeyModifiers$Type): boolean
public "mouseReleased"(button: $MouseButton$Type): void
public "mouseDragged"(button: integer, dragX: double, dragY: double): boolean
public "mouseScrolled"(scroll: double): boolean
public "keyReleased"(key: $Key$Type): void
set "offset"(value: boolean)
get "y"(): integer
get "contentHeight"(): integer
get "contentWidth"(): integer
get "offset"(): boolean
get "scrollStep"(): double
set "scrollStep"(value: double)
get "cursor"(): $CursorType
get "x"(): integer
get "widgets"(): $List<($Widget)>
get "onlyRenderWidgetsInside"(): boolean
get "ingredientUnderMouse"(): $Optional<($PositionedIngredient)>
get "scrollX"(): double
get "scrollY"(): double
set "scrollX"(value: double)
set "scrollY"(value: double)
get "onlyInteractWithWidgetsInside"(): boolean
get "defaultScrollVertical"(): boolean
get "mouseOverAnyWidget"(): boolean
set "onlyRenderWidgetsInside"(value: boolean)
set "onlyInteractWithWidgetsInside"(value: boolean)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Panel$Type = ($Panel);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Panel_ = $Panel$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/util/$OptionalBoolean" {
import {$Throwable, $Throwable$Type} from "packages/java/lang/$Throwable"
import {$BooleanSupplier, $BooleanSupplier$Type} from "packages/java/util/function/$BooleanSupplier"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$OptionalBoolean$Consumer, $OptionalBoolean$Consumer$Type} from "packages/dev/ftb/mods/ftblibrary/util/$OptionalBoolean$Consumer"

export class $OptionalBoolean {
static readonly "EMPTY": $OptionalBoolean
static readonly "TRUE": $OptionalBoolean
static readonly "FALSE": $OptionalBoolean


public "get"(): boolean
public static "of"(v: boolean): $OptionalBoolean
public "isPresent"(): boolean
public "orElse"(b: boolean): boolean
public "orElseThrow"<X extends $Throwable>(exceptionSupplier: $Supplier$Type<(any)>): boolean
public static "ofNullable"(v: boolean): $OptionalBoolean
public "ifPresent"(consumer: $OptionalBoolean$Consumer$Type): void
public "orElseGet"(other: $BooleanSupplier$Type): boolean
get "present"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $OptionalBoolean$Type = ($OptionalBoolean);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $OptionalBoolean_ = $OptionalBoolean$Type;
}}
declare module "packages/dev/ftb/mods/ftbteams/api/event/$TeamAllyEvent" {
import {$TeamEvent, $TeamEvent$Type} from "packages/dev/ftb/mods/ftbteams/api/event/$TeamEvent"
import {$PlayerChangedTeamEvent, $PlayerChangedTeamEvent$Type} from "packages/dev/ftb/mods/ftbteams/api/event/$PlayerChangedTeamEvent"
import {$Event, $Event$Type} from "packages/dev/architectury/event/$Event"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$PlayerJoinedPartyTeamEvent, $PlayerJoinedPartyTeamEvent$Type} from "packages/dev/ftb/mods/ftbteams/api/event/$PlayerJoinedPartyTeamEvent"
import {$TeamPropertiesChangedEvent, $TeamPropertiesChangedEvent$Type} from "packages/dev/ftb/mods/ftbteams/api/event/$TeamPropertiesChangedEvent"
import {$PlayerLeftPartyTeamEvent, $PlayerLeftPartyTeamEvent$Type} from "packages/dev/ftb/mods/ftbteams/api/event/$PlayerLeftPartyTeamEvent"
import {$TeamCreatedEvent, $TeamCreatedEvent$Type} from "packages/dev/ftb/mods/ftbteams/api/event/$TeamCreatedEvent"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$TeamInfoEvent, $TeamInfoEvent$Type} from "packages/dev/ftb/mods/ftbteams/api/event/$TeamInfoEvent"
import {$PlayerTransferredTeamOwnershipEvent, $PlayerTransferredTeamOwnershipEvent$Type} from "packages/dev/ftb/mods/ftbteams/api/event/$PlayerTransferredTeamOwnershipEvent"
import {$List, $List$Type} from "packages/java/util/$List"
import {$TeamCollectPropertiesEvent, $TeamCollectPropertiesEvent$Type} from "packages/dev/ftb/mods/ftbteams/api/event/$TeamCollectPropertiesEvent"
import {$GameProfile, $GameProfile$Type} from "packages/com/mojang/authlib/$GameProfile"
import {$PlayerLoggedInAfterTeamEvent, $PlayerLoggedInAfterTeamEvent$Type} from "packages/dev/ftb/mods/ftbteams/api/event/$PlayerLoggedInAfterTeamEvent"
import {$ClientTeamPropertiesChangedEvent, $ClientTeamPropertiesChangedEvent$Type} from "packages/dev/ftb/mods/ftbteams/api/event/$ClientTeamPropertiesChangedEvent"
import {$Team, $Team$Type} from "packages/dev/ftb/mods/ftbteams/api/$Team"

export class $TeamAllyEvent extends $TeamEvent {
static readonly "CREATED": $Event<($Consumer<($TeamCreatedEvent)>)>
static readonly "LOADED": $Event<($Consumer<($TeamEvent)>)>
static readonly "SAVED": $Event<($Consumer<($TeamEvent)>)>
static readonly "DELETED": $Event<($Consumer<($TeamEvent)>)>
static readonly "PLAYER_LOGGED_IN": $Event<($Consumer<($PlayerLoggedInAfterTeamEvent)>)>
static readonly "OWNERSHIP_TRANSFERRED": $Event<($Consumer<($PlayerTransferredTeamOwnershipEvent)>)>
static readonly "COLLECT_PROPERTIES": $Event<($Consumer<($TeamCollectPropertiesEvent)>)>
static readonly "PROPERTIES_CHANGED": $Event<($Consumer<($TeamPropertiesChangedEvent)>)>
static readonly "PLAYER_CHANGED": $Event<($Consumer<($PlayerChangedTeamEvent)>)>
static readonly "PLAYER_JOINED_PARTY": $Event<($Consumer<($PlayerJoinedPartyTeamEvent)>)>
static readonly "PLAYER_LEFT_PARTY": $Event<($Consumer<($PlayerLeftPartyTeamEvent)>)>
static readonly "INFO": $Event<($Consumer<($TeamInfoEvent)>)>
static readonly "ADD_ALLY": $Event<($Consumer<($TeamAllyEvent)>)>
static readonly "REMOVE_ALLY": $Event<($Consumer<($TeamAllyEvent)>)>
static readonly "CLIENT_PROPERTIES_CHANGED": $Event<($Consumer<($ClientTeamPropertiesChangedEvent)>)>

constructor(team: $Team$Type, players: $List$Type<($GameProfile$Type)>, adding: boolean)

public "getPlayers"(): $Collection<($GameProfile)>
public "isAdding"(): boolean
get "players"(): $Collection<($GameProfile)>
get "adding"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TeamAllyEvent$Type = ($TeamAllyEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TeamAllyEvent_ = $TeamAllyEvent$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/config/$StringConfig" {
import {$Color4I, $Color4I$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Color4I"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$ConfigFromString, $ConfigFromString$Type} from "packages/dev/ftb/mods/ftblibrary/config/$ConfigFromString"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Pattern, $Pattern$Type} from "packages/java/util/regex/$Pattern"
import {$TooltipList, $TooltipList$Type} from "packages/dev/ftb/mods/ftblibrary/util/$TooltipList"

export class $StringConfig extends $ConfigFromString<(string)> {
static readonly "COLOR": $Color4I
readonly "pattern": $Pattern
static readonly "NULL_TEXT": $Component
 "id": string

constructor(p: $Pattern$Type)
constructor()

public "parse"(callback: $Consumer$Type<(string)>, string: string): boolean
public "getColor"(v: string): $Color4I
public "getStringForGUI"(v: string): $Component
public "addInfo"(list: $TooltipList$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $StringConfig$Type = ($StringConfig);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $StringConfig_ = $StringConfig$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/quest/$ChapterImage" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Color4I, $Color4I$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Color4I"
import {$ConfigGroup, $ConfigGroup$Type} from "packages/dev/ftb/mods/ftblibrary/config/$ConfigGroup"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Icon, $Icon$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Icon"
import {$Movable, $Movable$Type} from "packages/dev/ftb/mods/ftbquests/quest/$Movable"
import {$TooltipList, $TooltipList$Type} from "packages/dev/ftb/mods/ftblibrary/util/$TooltipList"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$TeamData, $TeamData$Type} from "packages/dev/ftb/mods/ftbquests/quest/$TeamData"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$WeakReference, $WeakReference$Type} from "packages/java/lang/ref/$WeakReference"
import {$Chapter, $Chapter$Type} from "packages/dev/ftb/mods/ftbquests/quest/$Chapter"

export class $ChapterImage implements $Movable {
static readonly "FTBQ_IMAGE": string
static "clipboard": $WeakReference<($ChapterImage)>

constructor(c: $Chapter$Type)

public "copy"(newChapter: $Chapter$Type, newX: double, newY: double): $ChapterImage
public "move"(to: $Chapter$Type, _x: double, _y: double): void
public "getShape"(): string
public "isAspectRatioOff"(): boolean
public "fixupAspectRatio"(adjustWidth: boolean): void
public static "isImageInClipboard"(): boolean
public "isAlignToCorner"(): boolean
public "getClick"(): string
public "shouldShowImage"(teamData: $TeamData$Type): boolean
public "addHoverText"(list: $TooltipList$Type): void
public "getY"(): double
public "getX"(): double
public "getRotation"(): double
public "setImage"(image: $Icon$Type): $ChapterImage
public "getWidth"(): double
public "getHeight"(): double
public "getOrder"(): integer
public "readData"(nbt: $CompoundTag$Type): void
public "getTitle"(): $Component
public "onMoved"(x: double, y: double, chapterId: long): void
public "getAlpha"(): integer
public "getColor"(): $Color4I
public "getImage"(): $Icon
public "setPosition"(x: double, y: double): $ChapterImage
public "getChapter"(): $Chapter
public "getMovableID"(): long
public "copyToClipboard"(): void
public "drawMoved"(graphics: $GuiGraphics$Type): void
public "writeNetData"(buffer: $FriendlyByteBuf$Type): void
public "writeData"(nbt: $CompoundTag$Type): $CompoundTag
public "fillConfigGroup"(config: $ConfigGroup$Type): void
public "readNetData"(buffer: $FriendlyByteBuf$Type): void
get "shape"(): string
get "aspectRatioOff"(): boolean
get "imageInClipboard"(): boolean
get "alignToCorner"(): boolean
get "click"(): string
get "y"(): double
get "x"(): double
get "rotation"(): double
set "image"(value: $Icon$Type)
get "width"(): double
get "height"(): double
get "order"(): integer
get "title"(): $Component
get "alpha"(): integer
get "color"(): $Color4I
get "image"(): $Icon
get "chapter"(): $Chapter
get "movableID"(): long
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ChapterImage$Type = ($ChapterImage);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ChapterImage_ = $ChapterImage$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/quest/task/$CustomTask$Data" {
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$CustomTask, $CustomTask$Type} from "packages/dev/ftb/mods/ftbquests/quest/task/$CustomTask"
import {$TeamData, $TeamData$Type} from "packages/dev/ftb/mods/ftbquests/quest/$TeamData"

export class $CustomTask$Data extends $Record {

constructor(task: $CustomTask$Type, teamData: $TeamData$Type)

public "equals"(o: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "task"(): $CustomTask
public "getProgress"(): long
public "teamData"(): $TeamData
public "addProgress"(l: long): void
public "setProgress"(l: long): void
get "progress"(): long
set "progress"(value: long)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CustomTask$Data$Type = ($CustomTask$Data);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CustomTask$Data_ = $CustomTask$Data$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/events/$ObjectCompletedEvent$ChapterEvent" {
import {$ObjectCompletedEvent$TaskEvent, $ObjectCompletedEvent$TaskEvent$Type} from "packages/dev/ftb/mods/ftbquests/events/$ObjectCompletedEvent$TaskEvent"
import {$Event, $Event$Type} from "packages/dev/architectury/event/$Event"
import {$ObjectCompletedEvent$QuestEvent, $ObjectCompletedEvent$QuestEvent$Type} from "packages/dev/ftb/mods/ftbquests/events/$ObjectCompletedEvent$QuestEvent"
import {$QuestProgressEventData, $QuestProgressEventData$Type} from "packages/dev/ftb/mods/ftbquests/events/$QuestProgressEventData"
import {$EventActor, $EventActor$Type} from "packages/dev/architectury/event/$EventActor"
import {$ObjectCompletedEvent$FileEvent, $ObjectCompletedEvent$FileEvent$Type} from "packages/dev/ftb/mods/ftbquests/events/$ObjectCompletedEvent$FileEvent"
import {$Chapter, $Chapter$Type} from "packages/dev/ftb/mods/ftbquests/quest/$Chapter"
import {$ObjectCompletedEvent, $ObjectCompletedEvent$Type} from "packages/dev/ftb/mods/ftbquests/events/$ObjectCompletedEvent"

export class $ObjectCompletedEvent$ChapterEvent extends $ObjectCompletedEvent<($Chapter)> {
static readonly "GENERIC": $Event<($EventActor<($ObjectCompletedEvent<(any)>)>)>
static readonly "FILE": $Event<($EventActor<($ObjectCompletedEvent$FileEvent)>)>
static readonly "CHAPTER": $Event<($EventActor<($ObjectCompletedEvent$ChapterEvent)>)>
static readonly "QUEST": $Event<($EventActor<($ObjectCompletedEvent$QuestEvent)>)>
static readonly "TASK": $Event<($EventActor<($ObjectCompletedEvent$TaskEvent)>)>

constructor(d: $QuestProgressEventData$Type<($Chapter$Type)>)

public "getChapter"(): $Chapter
get "chapter"(): $Chapter
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ObjectCompletedEvent$ChapterEvent$Type = ($ObjectCompletedEvent$ChapterEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ObjectCompletedEvent$ChapterEvent_ = $ObjectCompletedEvent$ChapterEvent$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/ui/$IScreenWrapper" {
import {$Runnable, $Runnable$Type} from "packages/java/lang/$Runnable"
import {$BaseScreen, $BaseScreen$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$BaseScreen"
import {$IOpenableScreen, $IOpenableScreen$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$IOpenableScreen"

export interface $IScreenWrapper extends $IOpenableScreen {

 "openGui"(): void
 "closeGui"(openPrevScreen: boolean): void
 "getGui"(): $BaseScreen
 "run"(): void
 "closeGui"(): void
 "openAfter"(runnable: $Runnable$Type): $Runnable
 "openGuiLater"(): void
 "closeContextMenu"(): void

(): void
}

export namespace $IScreenWrapper {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IScreenWrapper$Type = ($IScreenWrapper);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IScreenWrapper_ = $IScreenWrapper$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/quest/theme/selector/$AllSelector" {
import {$QuestObjectBase, $QuestObjectBase$Type} from "packages/dev/ftb/mods/ftbquests/quest/$QuestObjectBase"
import {$ThemeSelector, $ThemeSelector$Type} from "packages/dev/ftb/mods/ftbquests/quest/theme/selector/$ThemeSelector"
import {$ThemeSelectorType, $ThemeSelectorType$Type} from "packages/dev/ftb/mods/ftbquests/quest/theme/selector/$ThemeSelectorType"

export class $AllSelector extends $ThemeSelector {
static readonly "INSTANCE": $AllSelector


public "equals"(o: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "matches"(object: $QuestObjectBase$Type): boolean
public "getType"(): $ThemeSelectorType
get "type"(): $ThemeSelectorType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AllSelector$Type = ($AllSelector);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AllSelector_ = $AllSelector$Type;
}}
declare module "packages/dev/ftb/mods/ftbxmodcompat/ftbquests/kubejs/$FTBQuestsKubeJSPlayerData" {
import {$BaseQuestFile, $BaseQuestFile$Type} from "packages/dev/ftb/mods/ftbquests/quest/$BaseQuestFile"
import {$FTBQuestsKubeJSTeamData, $FTBQuestsKubeJSTeamData$Type} from "packages/dev/ftb/mods/ftbxmodcompat/ftbquests/kubejs/$FTBQuestsKubeJSTeamData"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$TeamData, $TeamData$Type} from "packages/dev/ftb/mods/ftbquests/quest/$TeamData"

export class $FTBQuestsKubeJSPlayerData extends $FTBQuestsKubeJSTeamData {

constructor(p: $Player$Type)

public "getFile"(): $BaseQuestFile
public "getData"(): $TeamData
get "file"(): $BaseQuestFile
get "data"(): $TeamData
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FTBQuestsKubeJSPlayerData$Type = ($FTBQuestsKubeJSPlayerData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FTBQuestsKubeJSPlayerData_ = $FTBQuestsKubeJSPlayerData$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/util/$NetUtils" {
import {$BiConsumer, $BiConsumer$Type} from "packages/java/util/function/$BiConsumer"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$NetworkManager$PacketContext, $NetworkManager$PacketContext$Type} from "packages/dev/architectury/networking/$NetworkManager$PacketContext"
import {$Icon, $Icon$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Icon"
import {$BiFunction, $BiFunction$Type} from "packages/java/util/function/$BiFunction"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $NetUtils {

constructor()

public static "write"<K, V>(buffer: $FriendlyByteBuf$Type, map: $Map$Type<(K), (V)>, keyWriter: $BiConsumer$Type<($FriendlyByteBuf$Type), (K)>, valueWriter: $BiConsumer$Type<($FriendlyByteBuf$Type), (V)>): void
public static "write"<T>(buffer: $FriendlyByteBuf$Type, list: $Collection$Type<(T)>, writer: $BiConsumer$Type<($FriendlyByteBuf$Type), (T)>): void
public static "read"<K, V>(buffer: $FriendlyByteBuf$Type, map: $Map$Type<(K), (V)>, keyReader: $Function$Type<($FriendlyByteBuf$Type), (K)>, valueReader: $BiFunction$Type<(K), ($FriendlyByteBuf$Type), (V)>): void
public static "read"<T>(buffer: $FriendlyByteBuf$Type, list: $Collection$Type<(T)>, reader: $Function$Type<($FriendlyByteBuf$Type), (T)>): void
public static "readIcon"(buffer: $FriendlyByteBuf$Type): $Icon
public static "writeIcon"(buffer: $FriendlyByteBuf$Type, icon: $Icon$Type): void
public static "canEdit"(context: $NetworkManager$PacketContext$Type): boolean
public static "writeStrings"(buffer: $FriendlyByteBuf$Type, list: $Collection$Type<(string)>): void
public static "readStrings"(buffer: $FriendlyByteBuf$Type, list: $Collection$Type<(string)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $NetUtils$Type = ($NetUtils);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $NetUtils_ = $NetUtils$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/net/$EditConfigPacket" {
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$NetworkManager$PacketContext, $NetworkManager$PacketContext$Type} from "packages/dev/architectury/networking/$NetworkManager$PacketContext"
import {$BaseS2CMessage, $BaseS2CMessage$Type} from "packages/dev/architectury/networking/simple/$BaseS2CMessage"
import {$MessageType, $MessageType$Type} from "packages/dev/architectury/networking/simple/$MessageType"

export class $EditConfigPacket extends $BaseS2CMessage {

constructor(isClientConfig: boolean)
constructor(buf: $FriendlyByteBuf$Type)

public "write"(buf: $FriendlyByteBuf$Type): void
public "getType"(): $MessageType
public "handle"(context: $NetworkManager$PacketContext$Type): void
get "type"(): $MessageType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EditConfigPacket$Type = ($EditConfigPacket);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EditConfigPacket_ = $EditConfigPacket$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/block/entity/$ITaskScreen" {
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$TaskScreenBlockEntity, $TaskScreenBlockEntity$Type} from "packages/dev/ftb/mods/ftbquests/block/entity/$TaskScreenBlockEntity"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export interface $ITaskScreen {

 "getSkin"(): $ItemStack
 "getCoreScreen"(): $Optional<($TaskScreenBlockEntity)>
 "isInputOnly"(): boolean
 "isIndestructible"(): boolean
 "getTeamId"(): $UUID
}

export namespace $ITaskScreen {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ITaskScreen$Type = ($ITaskScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ITaskScreen_ = $ITaskScreen$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/config/ui/$EditConfigListScreen$ConfigPanel" {
import {$Panel, $Panel$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Panel"
import {$EditConfigListScreen, $EditConfigListScreen$Type} from "packages/dev/ftb/mods/ftblibrary/config/ui/$EditConfigListScreen"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EditConfigListScreen$Deletable, $EditConfigListScreen$Deletable$Type} from "packages/dev/ftb/mods/ftblibrary/config/ui/$EditConfigListScreen$Deletable"

export class $EditConfigListScreen$ConfigPanel extends $Panel {
 "posX": integer
 "posY": integer
 "width": integer
 "height": integer

constructor(this$0: $EditConfigListScreen$Type<(any), (any)>)

public "getHoveredDeletable"(): $Optional<($EditConfigListScreen$Deletable)>
public "alignWidgets"(): void
public "addWidgets"(): void
get "hoveredDeletable"(): $Optional<($EditConfigListScreen$Deletable)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EditConfigListScreen$ConfigPanel$Type = ($EditConfigListScreen$ConfigPanel);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EditConfigListScreen$ConfigPanel_ = $EditConfigListScreen$ConfigPanel$Type;
}}
declare module "packages/dev/ftb/mods/ftbxmodcompat/ftbchunks/$FTBChunksSetup" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $FTBChunksSetup {

constructor()

public static "init"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FTBChunksSetup$Type = ($FTBChunksSetup);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FTBChunksSetup_ = $FTBChunksSetup$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/$FTBQuests" {
import {$Logger, $Logger$Type} from "packages/org/apache/logging/log4j/$Logger"
import {$RecipeModHelper, $RecipeModHelper$Type} from "packages/dev/ftb/mods/ftbquests/integration/$RecipeModHelper"
import {$IQuestProxy, $IQuestProxy$Type} from "packages/dev/ftb/mods/ftbquests/$IQuestProxy"

export class $FTBQuests {
static readonly "LOGGER": $Logger
static "instance": $FTBQuests
static "PROXY": $IQuestProxy

constructor()

public "setup"(): void
public static "getRecipeModHelper"(): $RecipeModHelper
public static "setRecipeModHelper"(recipeModHelper: $RecipeModHelper$Type): void
get "recipeModHelper"(): $RecipeModHelper
set "recipeModHelper"(value: $RecipeModHelper$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FTBQuests$Type = ($FTBQuests);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FTBQuests_ = $FTBQuests$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/block/forge/$TaskScreenBlockImpl" {
import {$TaskScreenBlockEntity, $TaskScreenBlockEntity$Type} from "packages/dev/ftb/mods/ftbquests/block/entity/$TaskScreenBlockEntity"
import {$BlockEntityType$BlockEntitySupplier, $BlockEntityType$BlockEntitySupplier$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType$BlockEntitySupplier"
import {$TaskScreenAuxBlockEntity, $TaskScreenAuxBlockEntity$Type} from "packages/dev/ftb/mods/ftbquests/block/entity/$TaskScreenAuxBlockEntity"

export class $TaskScreenBlockImpl {

constructor()

public static "blockEntityProvider"(): $BlockEntityType$BlockEntitySupplier<($TaskScreenBlockEntity)>
public static "blockEntityAuxProvider"(): $BlockEntityType$BlockEntitySupplier<($TaskScreenAuxBlockEntity)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TaskScreenBlockImpl$Type = ($TaskScreenBlockImpl);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TaskScreenBlockImpl_ = $TaskScreenBlockImpl$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/ui/$SimpleButton$Callback" {
import {$MouseButton, $MouseButton$Type} from "packages/dev/ftb/mods/ftblibrary/ui/input/$MouseButton"
import {$SimpleButton, $SimpleButton$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$SimpleButton"

export interface $SimpleButton$Callback {

 "onClicked"(arg0: $SimpleButton$Type, arg1: $MouseButton$Type): void

(arg0: $SimpleButton$Type, arg1: $MouseButton$Type): void
}

export namespace $SimpleButton$Callback {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SimpleButton$Callback$Type = ($SimpleButton$Callback);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SimpleButton$Callback_ = $SimpleButton$Callback$Type;
}}
declare module "packages/dev/ftb/mods/ftbteams/net/$OpenGUIMessage" {
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$NetworkManager$PacketContext, $NetworkManager$PacketContext$Type} from "packages/dev/architectury/networking/$NetworkManager$PacketContext"
import {$BaseC2SMessage, $BaseC2SMessage$Type} from "packages/dev/architectury/networking/simple/$BaseC2SMessage"
import {$MessageType, $MessageType$Type} from "packages/dev/architectury/networking/simple/$MessageType"

export class $OpenGUIMessage extends $BaseC2SMessage {

constructor()

public "write"(buffer: $FriendlyByteBuf$Type): void
public "getType"(): $MessageType
public "handle"(context: $NetworkManager$PacketContext$Type): void
get "type"(): $MessageType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $OpenGUIMessage$Type = ($OpenGUIMessage);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $OpenGUIMessage_ = $OpenGUIMessage$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/config/$ResourceConfigValue" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$OptionalLong, $OptionalLong$Type} from "packages/java/util/$OptionalLong"
import {$ConfigValue, $ConfigValue$Type} from "packages/dev/ftb/mods/ftblibrary/config/$ConfigValue"
import {$SelectableResource, $SelectableResource$Type} from "packages/dev/ftb/mods/ftblibrary/config/ui/$SelectableResource"

export class $ResourceConfigValue<T> extends $ConfigValue<(T)> {
static readonly "NULL_TEXT": $Component
 "id": string

constructor()

public "isEmpty"(): boolean
public "getResource"(): $SelectableResource<(T)>
public "setAllowNBTEdit"(allow: boolean): $ResourceConfigValue<(T)>
public "canHaveNBT"(): boolean
public "allowEmptyResource"(): boolean
public "setResource"(arg0: $SelectableResource$Type<(T)>): boolean
public "fixedResourceSize"(): $OptionalLong
get "empty"(): boolean
get "resource"(): $SelectableResource<(T)>
set "allowNBTEdit"(value: boolean)
set "resource"(value: $SelectableResource$Type<(T)>)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ResourceConfigValue$Type<T> = ($ResourceConfigValue<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ResourceConfigValue_<T> = $ResourceConfigValue$Type<(T)>;
}}
declare module "packages/dev/ftb/mods/ftbquests/$FTBQServerProxy" {
import {$LootCrate, $LootCrate$Type} from "packages/dev/ftb/mods/ftbquests/quest/loot/$LootCrate"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$IQuestProxy, $IQuestProxy$Type} from "packages/dev/ftb/mods/ftbquests/$IQuestProxy"

export class $FTBQServerProxy implements $IQuestProxy {

constructor()

public "getKnownLootCrates"(): $Collection<($LootCrate)>
get "knownLootCrates"(): $Collection<($LootCrate)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FTBQServerProxy$Type = ($FTBQServerProxy);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FTBQServerProxy_ = $FTBQServerProxy$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/ui/$BaseMenuScreen" {
import {$AbstractContainerMenu, $AbstractContainerMenu$Type} from "packages/net/minecraft/world/inventory/$AbstractContainerMenu"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"
import {$BaseScreen, $BaseScreen$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$BaseScreen"

export class $BaseMenuScreen<T extends $AbstractContainerMenu> extends $BaseScreen {
 "posX": integer
 "posY": integer
 "width": integer
 "height": integer

constructor(menu: T, playerInventory: $Inventory$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BaseMenuScreen$Type<T> = ($BaseMenuScreen<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BaseMenuScreen_<T> = $BaseMenuScreen$Type<(T)>;
}}
declare module "packages/dev/ftb/mods/ftbquests/client/gui/quests/$QuestPositionableButton" {
import {$QuestPositionableButton$Position, $QuestPositionableButton$Position$Type} from "packages/dev/ftb/mods/ftbquests/client/gui/quests/$QuestPositionableButton$Position"
import {$Movable, $Movable$Type} from "packages/dev/ftb/mods/ftbquests/quest/$Movable"

export interface $QuestPositionableButton {

 "moveAndDeleteFocus"(): $Movable
 "getPosition"(): $QuestPositionableButton$Position
}

export namespace $QuestPositionableButton {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $QuestPositionableButton$Type = ($QuestPositionableButton);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $QuestPositionableButton_ = $QuestPositionableButton$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/client/$RenderUtil" {
import {$VertexConsumer, $VertexConsumer$Type} from "packages/com/mojang/blaze3d/vertex/$VertexConsumer"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"

export class $RenderUtil {
static readonly "FULL_BRIGHT": integer


public static "create"(matrixStack: $PoseStack$Type, builder: $VertexConsumer$Type, x: float, y: float): $RenderUtil
public "draw"(): void
public "withUV"(u1: float, v1: float, u2: float, v2: float): $RenderUtil
public "withColor"(color: integer): $RenderUtil
public "withSize"(w: float, h: float): $RenderUtil
public "withLighting"(packedLightIn: integer): $RenderUtil
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RenderUtil$Type = ($RenderUtil);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RenderUtil_ = $RenderUtil$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/ui/$MenuScreenWrapper" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$IScreenWrapper, $IScreenWrapper$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$IScreenWrapper"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$Runnable, $Runnable$Type} from "packages/java/lang/$Runnable"
import {$BaseScreen, $BaseScreen$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$BaseScreen"
import {$AbstractContainerScreen, $AbstractContainerScreen$Type} from "packages/net/minecraft/client/gui/screens/inventory/$AbstractContainerScreen"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$List, $List$Type} from "packages/java/util/$List"
import {$AbstractContainerMenu, $AbstractContainerMenu$Type} from "packages/net/minecraft/world/inventory/$AbstractContainerMenu"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"

export class $MenuScreenWrapper<T extends $AbstractContainerMenu> extends $AbstractContainerScreen<(T)> implements $IScreenWrapper {
static readonly "INVENTORY_LOCATION": $ResourceLocation
static readonly "SLOT_ITEM_BLIT_OFFSET": integer
 "imageWidth": integer
 "hoveredSlot": $Slot
 "leftPos": integer
 "topPos": integer
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering

constructor(g: $BaseScreen$Type, menu: T, playerInventory: $Inventory$Type, title: $Component$Type)

public "keyPressed"(keyCode: integer, scanCode: integer, modifiers: integer): boolean
public "shouldCloseOnEsc"(): boolean
public "renderBackground"(graphics: $GuiGraphics$Type): void
public "m_7856_"(): void
public "removed"(): void
public "render"(graphics: $GuiGraphics$Type, mouseX: integer, mouseY: integer, partialTicks: float): void
public "isPauseScreen"(): boolean
public "mouseReleased"(x: double, y: double, button: integer): boolean
public "mouseClicked"(x: double, y: double, button: integer): boolean
public "charTyped"(keyChar: character, modifiers: integer): boolean
public "mouseScrolled"(x: double, y: double, scroll: double): boolean
public "keyReleased"(keyCode: integer, scanCode: integer, modifiers: integer): boolean
public "getGui"(): $BaseScreen
public "m_181908_"(): void
public "disableSlotDrawing"(): $MenuScreenWrapper<(T)>
public "openGui"(): void
public "closeGui"(openPrevScreen: boolean): void
public "run"(): void
public "closeGui"(): void
public "openAfter"(runnable: $Runnable$Type): $Runnable
public "openGuiLater"(): void
public "closeContextMenu"(): void
get "pauseScreen"(): boolean
get "gui"(): $BaseScreen
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MenuScreenWrapper$Type<T> = ($MenuScreenWrapper<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MenuScreenWrapper_<T> = $MenuScreenWrapper$Type<(T)>;
}}
declare module "packages/dev/ftb/mods/ftbquests/item/$TaskScreenConfiguratorItem" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$InteractionResultHolder, $InteractionResultHolder$Type} from "packages/net/minecraft/world/$InteractionResultHolder"
import {$UseOnContext, $UseOnContext$Type} from "packages/net/minecraft/world/item/context/$UseOnContext"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$GlobalPos, $GlobalPos$Type} from "packages/net/minecraft/core/$GlobalPos"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $TaskScreenConfiguratorItem extends $Item {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor()

public static "readBlockPos"(stack: $ItemStack$Type): $Optional<($GlobalPos)>
public static "storeBlockPos"(itemInHand: $ItemStack$Type, level: $Level$Type, clickedPos: $BlockPos$Type): void
public "use"(level: $Level$Type, player: $Player$Type, hand: $InteractionHand$Type): $InteractionResultHolder<($ItemStack)>
public "useOn"(ctx: $UseOnContext$Type): $InteractionResult
public "appendHoverText"(itemStack: $ItemStack$Type, level: $Level$Type, list: $List$Type<($Component$Type)>, tooltipFlag: $TooltipFlag$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TaskScreenConfiguratorItem$Type = ($TaskScreenConfiguratorItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TaskScreenConfiguratorItem_ = $TaskScreenConfiguratorItem$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/client/$FTBQuestsNetClient" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$QuestObjectType, $QuestObjectType$Type} from "packages/dev/ftb/mods/ftbquests/quest/$QuestObjectType"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Date, $Date$Type} from "packages/java/util/$Date"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Icon, $Icon$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Icon"
import {$TeamDataUpdate, $TeamDataUpdate$Type} from "packages/dev/ftb/mods/ftbquests/net/$TeamDataUpdate"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$TeamData, $TeamData$Type} from "packages/dev/ftb/mods/ftbquests/quest/$TeamData"

export class $FTBQuestsNetClient {

constructor()

public static "createObject"(id: long, parent: long, type: $QuestObjectType$Type, nbt: $CompoundTag$Type, extra: $CompoundTag$Type, creator: $UUID$Type): void
public static "syncEditingMode"(teamId: $UUID$Type, editingMode: boolean): void
public static "objectStarted"(teamId: $UUID$Type, id: long, time: $Date$Type): void
public static "editObject"(id: long, nbt: $CompoundTag$Type): void
public static "updateTeamData"(teamId: $UUID$Type, name: string): void
public static "setEditorPermission"(hasPermission: boolean): void
public static "displayCompletionToast"(id: long): void
public static "moveChapter"(id: long, movingUp: boolean): void
public static "syncRewardBlocking"(teamId: $UUID$Type, rewardsBlocked: boolean): void
public static "moveQuest"(id: long, chapter: long, x: double, y: double): void
public static "changeChapterGroup"(id: long, newGroupId: long): void
public static "toggleChapterPinned"(pinned: boolean): void
public static "updateTaskProgress"(teamId: $UUID$Type, task: long, progress: long): void
public static "syncTeamData"(self: boolean, data: $TeamData$Type): void
public static "displayItemRewardToast"(stack: $ItemStack$Type, count: integer): void
public static "togglePinned"(id: long, pinned: boolean): void
public static "objectCompleted"(teamId: $UUID$Type, id: long, time: $Date$Type): void
public static "claimReward"(teamId: $UUID$Type, player: $UUID$Type, rewardId: long): void
public static "resetReward"(teamId: $UUID$Type, player: $UUID$Type, rewardId: long): void
public static "displayRewardToast"(id: long, text: $Component$Type, icon: $Icon$Type): void
public static "moveChapterGroup"(id: long, movingUp: boolean): void
public static "deleteObject"(id: long): void
public static "createOtherTeamData"(dataUpdate: $TeamDataUpdate$Type): void
public static "syncLock"(id: $UUID$Type, lock: boolean): void
public static "teamDataChanged"(oldDataUpdate: $TeamDataUpdate$Type, newDataUpdate: $TeamDataUpdate$Type): void
set "editorPermission"(value: boolean)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FTBQuestsNetClient$Type = ($FTBQuestsNetClient);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FTBQuestsNetClient_ = $FTBQuestsNetClient$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/net/$MoveChapterMessage" {
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$NetworkManager$PacketContext, $NetworkManager$PacketContext$Type} from "packages/dev/architectury/networking/$NetworkManager$PacketContext"
import {$BaseC2SMessage, $BaseC2SMessage$Type} from "packages/dev/architectury/networking/simple/$BaseC2SMessage"
import {$MessageType, $MessageType$Type} from "packages/dev/architectury/networking/simple/$MessageType"

export class $MoveChapterMessage extends $BaseC2SMessage {

constructor(buffer: $FriendlyByteBuf$Type)
constructor(id: long, movingUp: boolean)

public "write"(buffer: $FriendlyByteBuf$Type): void
public "getType"(): $MessageType
public "handle"(context: $NetworkManager$PacketContext$Type): void
get "type"(): $MessageType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MoveChapterMessage$Type = ($MoveChapterMessage);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MoveChapterMessage_ = $MoveChapterMessage$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/net/$SyncLockMessage" {
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$NetworkManager$PacketContext, $NetworkManager$PacketContext$Type} from "packages/dev/architectury/networking/$NetworkManager$PacketContext"
import {$BaseS2CMessage, $BaseS2CMessage$Type} from "packages/dev/architectury/networking/simple/$BaseS2CMessage"
import {$MessageType, $MessageType$Type} from "packages/dev/architectury/networking/simple/$MessageType"

export class $SyncLockMessage extends $BaseS2CMessage {

constructor(buffer: $FriendlyByteBuf$Type)
constructor(i: $UUID$Type, e: boolean)

public "write"(buffer: $FriendlyByteBuf$Type): void
public "getType"(): $MessageType
public "handle"(context: $NetworkManager$PacketContext$Type): void
get "type"(): $MessageType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SyncLockMessage$Type = ($SyncLockMessage);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SyncLockMessage_ = $SyncLockMessage$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/net/$ResetRewardMessage" {
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$NetworkManager$PacketContext, $NetworkManager$PacketContext$Type} from "packages/dev/architectury/networking/$NetworkManager$PacketContext"
import {$BaseS2CMessage, $BaseS2CMessage$Type} from "packages/dev/architectury/networking/simple/$BaseS2CMessage"
import {$MessageType, $MessageType$Type} from "packages/dev/architectury/networking/simple/$MessageType"

export class $ResetRewardMessage extends $BaseS2CMessage {

constructor(t: $UUID$Type, p: $UUID$Type, i: long)

public "write"(buffer: $FriendlyByteBuf$Type): void
public "getType"(): $MessageType
public "handle"(context: $NetworkManager$PacketContext$Type): void
get "type"(): $MessageType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ResetRewardMessage$Type = ($ResetRewardMessage);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ResetRewardMessage_ = $ResetRewardMessage$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/quest/reward/$RewardTypes" {
import {$Icon, $Icon$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Icon"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$RewardType$Provider, $RewardType$Provider$Type} from "packages/dev/ftb/mods/ftbquests/quest/reward/$RewardType$Provider"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$RewardType, $RewardType$Type} from "packages/dev/ftb/mods/ftbquests/quest/reward/$RewardType"

export interface $RewardTypes {

}

export namespace $RewardTypes {
const TYPES: $Map<($ResourceLocation), ($RewardType)>
const ITEM: $RewardType
const CHOICE: $RewardType
const RANDOM: $RewardType
const LOOT: $RewardType
const COMMAND: $RewardType
const CUSTOM: $RewardType
const XP: $RewardType
const XP_LEVELS: $RewardType
const ADVANCEMENT: $RewardType
const TOAST: $RewardType
const STAGE: $RewardType
function register(name: $ResourceLocation$Type, p: $RewardType$Provider$Type, i: $Supplier$Type<($Icon$Type)>): $RewardType
function init(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RewardTypes$Type = ($RewardTypes);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RewardTypes_ = $RewardTypes$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/block/entity/$BarrierBlockEntity" {
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export interface $BarrierBlockEntity {

 "update"(arg0: string): void
 "isOpen"(arg0: $Player$Type): boolean
}

export namespace $BarrierBlockEntity {
function tick(level: $Level$Type, blockPos: $BlockPos$Type, blockState: $BlockState$Type, blockEntity: $BlockEntity$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BarrierBlockEntity$Type = ($BarrierBlockEntity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BarrierBlockEntity_ = $BarrierBlockEntity$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/icon/$BulletIcon" {
import {$Color4I, $Color4I$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Color4I"
import {$JsonElement, $JsonElement$Type} from "packages/com/google/gson/$JsonElement"
import {$Icon, $Icon$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Icon"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $BulletIcon extends $Icon {

constructor()

public "copy"(): $BulletIcon
public "setColor"(col: $Color4I$Type): $BulletIcon
public "draw"(graphics: $GuiGraphics$Type, x: integer, y: integer, w: integer, h: integer): void
public "setInverse"(v: boolean): $BulletIcon
public "withTint"(c: $Color4I$Type): $BulletIcon
public "getJson"(): $JsonElement
set "color"(value: $Color4I$Type)
set "inverse"(value: boolean)
get "json"(): $JsonElement
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BulletIcon$Type = ($BulletIcon);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BulletIcon_ = $BulletIcon$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/quest/theme/property/$ColorProperty" {
import {$Color4I, $Color4I$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Color4I"
import {$ThemeProperty, $ThemeProperty$Type} from "packages/dev/ftb/mods/ftbquests/quest/theme/property/$ThemeProperty"

export class $ColorProperty extends $ThemeProperty<($Color4I)> {

constructor(n: string)

public "parse"(string: string): $Color4I
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ColorProperty$Type = ($ColorProperty);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ColorProperty_ = $ColorProperty$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/ui/$WidgetType" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $WidgetType extends $Enum<($WidgetType)> {
static readonly "NORMAL": $WidgetType
static readonly "MOUSE_OVER": $WidgetType
static readonly "DISABLED": $WidgetType


public static "values"(): ($WidgetType)[]
public static "valueOf"(name: string): $WidgetType
public static "mouseOver"(mouseOver: boolean): $WidgetType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WidgetType$Type = (("normal") | ("mouse_over") | ("disabled")) | ($WidgetType);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WidgetType_ = $WidgetType$Type;
}}
declare module "packages/dev/ftb/mods/ftbteams/api/event/$TeamCreatedEvent" {
import {$TeamEvent, $TeamEvent$Type} from "packages/dev/ftb/mods/ftbteams/api/event/$TeamEvent"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$PlayerChangedTeamEvent, $PlayerChangedTeamEvent$Type} from "packages/dev/ftb/mods/ftbteams/api/event/$PlayerChangedTeamEvent"
import {$Event, $Event$Type} from "packages/dev/architectury/event/$Event"
import {$PlayerJoinedPartyTeamEvent, $PlayerJoinedPartyTeamEvent$Type} from "packages/dev/ftb/mods/ftbteams/api/event/$PlayerJoinedPartyTeamEvent"
import {$TeamPropertiesChangedEvent, $TeamPropertiesChangedEvent$Type} from "packages/dev/ftb/mods/ftbteams/api/event/$TeamPropertiesChangedEvent"
import {$TeamAllyEvent, $TeamAllyEvent$Type} from "packages/dev/ftb/mods/ftbteams/api/event/$TeamAllyEvent"
import {$PlayerLeftPartyTeamEvent, $PlayerLeftPartyTeamEvent$Type} from "packages/dev/ftb/mods/ftbteams/api/event/$PlayerLeftPartyTeamEvent"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$TeamInfoEvent, $TeamInfoEvent$Type} from "packages/dev/ftb/mods/ftbteams/api/event/$TeamInfoEvent"
import {$PlayerTransferredTeamOwnershipEvent, $PlayerTransferredTeamOwnershipEvent$Type} from "packages/dev/ftb/mods/ftbteams/api/event/$PlayerTransferredTeamOwnershipEvent"
import {$TeamCollectPropertiesEvent, $TeamCollectPropertiesEvent$Type} from "packages/dev/ftb/mods/ftbteams/api/event/$TeamCollectPropertiesEvent"
import {$PlayerLoggedInAfterTeamEvent, $PlayerLoggedInAfterTeamEvent$Type} from "packages/dev/ftb/mods/ftbteams/api/event/$PlayerLoggedInAfterTeamEvent"
import {$ClientTeamPropertiesChangedEvent, $ClientTeamPropertiesChangedEvent$Type} from "packages/dev/ftb/mods/ftbteams/api/event/$ClientTeamPropertiesChangedEvent"
import {$Team, $Team$Type} from "packages/dev/ftb/mods/ftbteams/api/$Team"

export class $TeamCreatedEvent extends $TeamEvent {
static readonly "CREATED": $Event<($Consumer<($TeamCreatedEvent)>)>
static readonly "LOADED": $Event<($Consumer<($TeamEvent)>)>
static readonly "SAVED": $Event<($Consumer<($TeamEvent)>)>
static readonly "DELETED": $Event<($Consumer<($TeamEvent)>)>
static readonly "PLAYER_LOGGED_IN": $Event<($Consumer<($PlayerLoggedInAfterTeamEvent)>)>
static readonly "OWNERSHIP_TRANSFERRED": $Event<($Consumer<($PlayerTransferredTeamOwnershipEvent)>)>
static readonly "COLLECT_PROPERTIES": $Event<($Consumer<($TeamCollectPropertiesEvent)>)>
static readonly "PROPERTIES_CHANGED": $Event<($Consumer<($TeamPropertiesChangedEvent)>)>
static readonly "PLAYER_CHANGED": $Event<($Consumer<($PlayerChangedTeamEvent)>)>
static readonly "PLAYER_JOINED_PARTY": $Event<($Consumer<($PlayerJoinedPartyTeamEvent)>)>
static readonly "PLAYER_LEFT_PARTY": $Event<($Consumer<($PlayerLeftPartyTeamEvent)>)>
static readonly "INFO": $Event<($Consumer<($TeamInfoEvent)>)>
static readonly "ADD_ALLY": $Event<($Consumer<($TeamAllyEvent)>)>
static readonly "REMOVE_ALLY": $Event<($Consumer<($TeamAllyEvent)>)>
static readonly "CLIENT_PROPERTIES_CHANGED": $Event<($Consumer<($ClientTeamPropertiesChangedEvent)>)>

constructor(team: $Team$Type, creator: $ServerPlayer$Type, creatorId: $UUID$Type)

public "getCreator"(): $ServerPlayer
public "getCreatorId"(): $UUID
get "creator"(): $ServerPlayer
get "creatorId"(): $UUID
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TeamCreatedEvent$Type = ($TeamCreatedEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TeamCreatedEvent_ = $TeamCreatedEvent$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/client/gui/quests/$QuestLinkButton" {
import {$Quest, $Quest$Type} from "packages/dev/ftb/mods/ftbquests/quest/$Quest"
import {$QuestPositionableButton$Position, $QuestPositionableButton$Position$Type} from "packages/dev/ftb/mods/ftbquests/client/gui/quests/$QuestPositionableButton$Position"
import {$QuestButton, $QuestButton$Type} from "packages/dev/ftb/mods/ftbquests/client/gui/quests/$QuestButton"
import {$Theme, $Theme$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Theme"
import {$QuestLink, $QuestLink$Type} from "packages/dev/ftb/mods/ftbquests/quest/$QuestLink"
import {$QuestPanel, $QuestPanel$Type} from "packages/dev/ftb/mods/ftbquests/client/gui/quests/$QuestPanel"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $QuestLinkButton extends $QuestButton {
 "posX": integer
 "posY": integer
 "width": integer
 "height": integer

constructor(questPanel: $QuestPanel$Type, link: $QuestLink$Type, quest: $Quest$Type)

public "getPosition"(): $QuestPositionableButton$Position
public "draw"(graphics: $GuiGraphics$Type, theme: $Theme$Type, x: integer, y: integer, w: integer, h: integer): void
get "position"(): $QuestPositionableButton$Position
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $QuestLinkButton$Type = ($QuestLinkButton);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $QuestLinkButton_ = $QuestLinkButton$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/math/$PixelBuffer" {
import {$BufferedImage, $BufferedImage$Type} from "packages/java/awt/image/$BufferedImage"
import {$InputStream, $InputStream$Type} from "packages/java/io/$InputStream"
import {$ByteBuffer, $ByteBuffer$Type} from "packages/java/nio/$ByteBuffer"

export class $PixelBuffer {

constructor(w: integer, h: integer)

public "equals"(o: any): boolean
public "hashCode"(): integer
public "fill"(col: integer): void
public "fill"(startX: integer, startY: integer, w: integer, h: integer, col: integer): void
public static "from"(stream: $InputStream$Type): $PixelBuffer
public static "from"(img: $BufferedImage$Type): $PixelBuffer
public "copy"(): $PixelBuffer
public "toByteBuffer"(alpha: boolean): $ByteBuffer
public "getWidth"(): integer
public "getHeight"(): integer
public "setPixels"(p: (integer)[]): void
public "setRGB"(startX: integer, startY: integer, buffer: $PixelBuffer$Type): void
public "setRGB"(x: integer, y: integer, col: integer): void
public "setRGB"(startX: integer, startY: integer, w: integer, h: integer, rgbArray: (integer)[]): void
public "getRGB"(x: integer, y: integer): integer
public "getRGB"(startX: integer, startY: integer, w: integer, h: integer, p: (integer)[]): (integer)[]
public "getSubimage"(x: integer, y: integer, w: integer, h: integer): $PixelBuffer
public "getPixels"(): (integer)[]
public "toImage"(type: integer): $BufferedImage
get "width"(): integer
get "height"(): integer
set "pixels"(value: (integer)[])
get "pixels"(): (integer)[]
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PixelBuffer$Type = ($PixelBuffer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PixelBuffer_ = $PixelBuffer$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/net/$DisplayItemRewardToastMessage" {
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$NetworkManager$PacketContext, $NetworkManager$PacketContext$Type} from "packages/dev/architectury/networking/$NetworkManager$PacketContext"
import {$BaseS2CMessage, $BaseS2CMessage$Type} from "packages/dev/architectury/networking/simple/$BaseS2CMessage"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MessageType, $MessageType$Type} from "packages/dev/architectury/networking/simple/$MessageType"

export class $DisplayItemRewardToastMessage extends $BaseS2CMessage {

constructor(is: $ItemStack$Type, c: integer)

public "write"(buffer: $FriendlyByteBuf$Type): void
public "getType"(): $MessageType
public "handle"(context: $NetworkManager$PacketContext$Type): void
get "type"(): $MessageType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DisplayItemRewardToastMessage$Type = ($DisplayItemRewardToastMessage);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DisplayItemRewardToastMessage_ = $DisplayItemRewardToastMessage$Type;
}}
declare module "packages/dev/ftb/mods/ftbteams/api/property/$StringListProperty" {
import {$ConfigGroup, $ConfigGroup$Type} from "packages/dev/ftb/mods/ftblibrary/config/$ConfigGroup"
import {$TeamPropertyType, $TeamPropertyType$Type} from "packages/dev/ftb/mods/ftbteams/api/property/$TeamPropertyType"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$Tag, $Tag$Type} from "packages/net/minecraft/nbt/$Tag"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$TeamProperty, $TeamProperty$Type} from "packages/dev/ftb/mods/ftbteams/api/property/$TeamProperty"
import {$TeamPropertyValue, $TeamPropertyValue$Type} from "packages/dev/ftb/mods/ftbteams/api/property/$TeamPropertyValue"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $StringListProperty extends $TeamProperty<($List<(string)>)> {

constructor(id: $ResourceLocation$Type, def: $Supplier$Type<($List$Type<(string)>)>)
constructor(id: $ResourceLocation$Type, def: $List$Type<(string)>)

public "toString"(value: $List$Type<(string)>): string
public "write"(buf: $FriendlyByteBuf$Type): void
public "getType"(): $TeamPropertyType<($List<(string)>)>
public "config"(config: $ConfigGroup$Type, value: $TeamPropertyValue$Type<($List$Type<(string)>)>): void
public "fromString"(string: string): $Optional<($List<(string)>)>
public "fromNBT"(tag: $Tag$Type): $Optional<($List<(string)>)>
public "toNBT"(value: $List$Type<(string)>): $Tag
get "type"(): $TeamPropertyType<($List<(string)>)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $StringListProperty$Type = ($StringListProperty);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $StringListProperty_ = $StringListProperty$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/net/$CreateOtherTeamDataMessage" {
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$NetworkManager$PacketContext, $NetworkManager$PacketContext$Type} from "packages/dev/architectury/networking/$NetworkManager$PacketContext"
import {$BaseS2CMessage, $BaseS2CMessage$Type} from "packages/dev/architectury/networking/simple/$BaseS2CMessage"
import {$TeamDataUpdate, $TeamDataUpdate$Type} from "packages/dev/ftb/mods/ftbquests/net/$TeamDataUpdate"
import {$MessageType, $MessageType$Type} from "packages/dev/architectury/networking/simple/$MessageType"

export class $CreateOtherTeamDataMessage extends $BaseS2CMessage {

constructor(update: $TeamDataUpdate$Type)

public "write"(buffer: $FriendlyByteBuf$Type): void
public "getType"(): $MessageType
public "handle"(context: $NetworkManager$PacketContext$Type): void
get "type"(): $MessageType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CreateOtherTeamDataMessage$Type = ($CreateOtherTeamDataMessage);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CreateOtherTeamDataMessage_ = $CreateOtherTeamDataMessage$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/net/$SyncKnownServerRegistriesPacket" {
import {$KnownServerRegistries, $KnownServerRegistries$Type} from "packages/dev/ftb/mods/ftblibrary/util/$KnownServerRegistries"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$NetworkManager$PacketContext, $NetworkManager$PacketContext$Type} from "packages/dev/architectury/networking/$NetworkManager$PacketContext"
import {$BaseS2CMessage, $BaseS2CMessage$Type} from "packages/dev/architectury/networking/simple/$BaseS2CMessage"
import {$MessageType, $MessageType$Type} from "packages/dev/architectury/networking/simple/$MessageType"

export class $SyncKnownServerRegistriesPacket extends $BaseS2CMessage {

constructor(buf: $FriendlyByteBuf$Type)
constructor(r: $KnownServerRegistries$Type)

public "write"(buf: $FriendlyByteBuf$Type): void
public "getType"(): $MessageType
public "handle"(context: $NetworkManager$PacketContext$Type): void
get "type"(): $MessageType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SyncKnownServerRegistriesPacket$Type = ($SyncKnownServerRegistriesPacket);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SyncKnownServerRegistriesPacket_ = $SyncKnownServerRegistriesPacket$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/quest/theme/selector/$ThemeSelectorType" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $ThemeSelectorType extends $Enum<($ThemeSelectorType)> {
static readonly "ID": $ThemeSelectorType
static readonly "DIRECT_PARENT": $ThemeSelectorType
static readonly "TAG": $ThemeSelectorType
static readonly "INDIRECT_PARENT": $ThemeSelectorType
static readonly "TYPE": $ThemeSelectorType
static readonly "AND": $ThemeSelectorType
static readonly "NOT": $ThemeSelectorType
static readonly "ALL": $ThemeSelectorType


public static "values"(): ($ThemeSelectorType)[]
public static "valueOf"(name: string): $ThemeSelectorType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ThemeSelectorType$Type = (("all") | ("not") | ("direct_parent") | ("and") | ("indirect_parent") | ("id") | ("tag") | ("type")) | ($ThemeSelectorType);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ThemeSelectorType_ = $ThemeSelectorType$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/net/$TogglePinnedResponseMessage" {
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$NetworkManager$PacketContext, $NetworkManager$PacketContext$Type} from "packages/dev/architectury/networking/$NetworkManager$PacketContext"
import {$BaseS2CMessage, $BaseS2CMessage$Type} from "packages/dev/architectury/networking/simple/$BaseS2CMessage"
import {$MessageType, $MessageType$Type} from "packages/dev/architectury/networking/simple/$MessageType"

export class $TogglePinnedResponseMessage extends $BaseS2CMessage {

constructor(i: long, p: boolean)

public "write"(buffer: $FriendlyByteBuf$Type): void
public "getType"(): $MessageType
public "handle"(context: $NetworkManager$PacketContext$Type): void
get "type"(): $MessageType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TogglePinnedResponseMessage$Type = ($TogglePinnedResponseMessage);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TogglePinnedResponseMessage_ = $TogglePinnedResponseMessage$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/net/$RequestTeamDataMessage" {
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$NetworkManager$PacketContext, $NetworkManager$PacketContext$Type} from "packages/dev/architectury/networking/$NetworkManager$PacketContext"
import {$BaseC2SMessage, $BaseC2SMessage$Type} from "packages/dev/architectury/networking/simple/$BaseC2SMessage"
import {$MessageType, $MessageType$Type} from "packages/dev/architectury/networking/simple/$MessageType"

export class $RequestTeamDataMessage extends $BaseC2SMessage {

constructor(buf: $FriendlyByteBuf$Type)
constructor()

public "write"(buf: $FriendlyByteBuf$Type): void
public "getType"(): $MessageType
public "handle"(context: $NetworkManager$PacketContext$Type): void
get "type"(): $MessageType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RequestTeamDataMessage$Type = ($RequestTeamDataMessage);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RequestTeamDataMessage_ = $RequestTeamDataMessage$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/integration/stages/$EntityTagStageProvider" {
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$StageProvider, $StageProvider$Type} from "packages/dev/ftb/mods/ftblibrary/integration/stages/$StageProvider"

export class $EntityTagStageProvider implements $StageProvider {

constructor()

public "getName"(): string
public "add"(player: $ServerPlayer$Type, stage: string): void
public "remove"(player: $ServerPlayer$Type, stage: string): void
public "has"(player: $Player$Type, stage: string): boolean
public "sync"(player: $ServerPlayer$Type): void
get "name"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EntityTagStageProvider$Type = ($EntityTagStageProvider);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EntityTagStageProvider_ = $EntityTagStageProvider$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/quest/$QuestObject" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Color4I, $Color4I$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Color4I"
import {$ConfigGroup, $ConfigGroup$Type} from "packages/dev/ftb/mods/ftblibrary/config/$ConfigGroup"
import {$QuestObjectBase, $QuestObjectBase$Type} from "packages/dev/ftb/mods/ftbquests/quest/$QuestObjectBase"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$QuestProgressEventData, $QuestProgressEventData$Type} from "packages/dev/ftb/mods/ftbquests/events/$QuestProgressEventData"
import {$ProgressChange, $ProgressChange$Type} from "packages/dev/ftb/mods/ftbquests/util/$ProgressChange"
import {$TeamData, $TeamData$Type} from "packages/dev/ftb/mods/ftbquests/quest/$TeamData"

export class $QuestObject extends $QuestObjectBase {
readonly "id": long

constructor(id: long)

public "getChildren"(): $Collection<(any)>
public "isVisible"(data: $TeamData$Type): boolean
public "readData"(nbt: $CompoundTag$Type): void
public "forceProgress"(teamData: $TeamData$Type, progressChange: $ProgressChange$Type): void
public "isOptionalForProgression"(): boolean
public "getRelativeProgressFromChildren"(arg0: $TeamData$Type): integer
public static "getRelativeProgressFromChildren"(progressSum: integer, count: integer): integer
public "hasUnclaimedRewardsRaw"(teamData: $TeamData$Type, player: $UUID$Type): boolean
public "onCompleted"(data: $QuestProgressEventData$Type<(any)>): void
public "getProgressColor"(data: $TeamData$Type, dim: boolean): $Color4I
public "getProgressColor"(data: $TeamData$Type): $Color4I
public "onStarted"(data: $QuestProgressEventData$Type<(any)>): void
public "cacheProgress"(): boolean
public "isCompletedRaw"(data: $TeamData$Type): boolean
public "writeNetData"(buffer: $FriendlyByteBuf$Type): void
public "writeData"(nbt: $CompoundTag$Type): void
public "fillConfigGroup"(config: $ConfigGroup$Type): void
public "readNetData"(buffer: $FriendlyByteBuf$Type): void
get "children"(): $Collection<(any)>
get "optionalForProgression"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $QuestObject$Type = ($QuestObject);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $QuestObject_ = $QuestObject$Type;
}}
declare module "packages/dev/ftb/mods/ftbteams/client/gui/$CreatePartyButton" {
import {$NordButton, $NordButton$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$NordButton"
import {$MouseButton, $MouseButton$Type} from "packages/dev/ftb/mods/ftblibrary/ui/input/$MouseButton"
import {$TooltipList, $TooltipList$Type} from "packages/dev/ftb/mods/ftblibrary/util/$TooltipList"

export class $CreatePartyButton extends $NordButton {
 "posX": integer
 "posY": integer
 "width": integer
 "height": integer


public "addMouseOverText"(list: $TooltipList$Type): void
public "onClicked"(button: $MouseButton$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CreatePartyButton$Type = ($CreatePartyButton);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CreatePartyButton_ = $CreatePartyButton$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/quest/theme/selector/$IDSelector" {
import {$QuestObjectBase, $QuestObjectBase$Type} from "packages/dev/ftb/mods/ftbquests/quest/$QuestObjectBase"
import {$ThemeSelector, $ThemeSelector$Type} from "packages/dev/ftb/mods/ftbquests/quest/theme/selector/$ThemeSelector"
import {$ThemeSelectorType, $ThemeSelectorType$Type} from "packages/dev/ftb/mods/ftbquests/quest/theme/selector/$ThemeSelectorType"

export class $IDSelector extends $ThemeSelector {
readonly "id": long

constructor(i: long)

public "equals"(o: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "matches"(object: $QuestObjectBase$Type): boolean
public "getType"(): $ThemeSelectorType
get "type"(): $ThemeSelectorType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IDSelector$Type = ($IDSelector);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IDSelector_ = $IDSelector$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/ui/misc/$LoadingScreen" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Theme, $Theme$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Theme"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$BaseScreen, $BaseScreen$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$BaseScreen"

export class $LoadingScreen extends $BaseScreen {
 "posX": integer
 "posY": integer
 "width": integer
 "height": integer

constructor()
constructor(t: $Component$Type)

public "finishLoading"(): void
public "getText"(): ($Component)[]
public "isLoading"(): boolean
public "setText"(...s: ($Component$Type)[]): void
public "addWidgets"(): void
public "startLoading"(): void
public "setFinished"(): void
public "drawBackground"(graphics: $GuiGraphics$Type, theme: $Theme$Type, x: integer, y: integer, w: integer, h: integer): void
get "text"(): ($Component)[]
get "loading"(): boolean
set "text"(value: ($Component$Type)[])
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LoadingScreen$Type = ($LoadingScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LoadingScreen_ = $LoadingScreen$Type;
}}
declare module "packages/dev/ftb/mods/ftbteams/api/property/$TeamPropertyCollection" {
import {$BiConsumer, $BiConsumer$Type} from "packages/java/util/function/$BiConsumer"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$TeamProperty, $TeamProperty$Type} from "packages/dev/ftb/mods/ftbteams/api/property/$TeamProperty"
import {$TeamPropertyValue, $TeamPropertyValue$Type} from "packages/dev/ftb/mods/ftbteams/api/property/$TeamPropertyValue"

export interface $TeamPropertyCollection {

 "get"<T>(arg0: $TeamProperty$Type<(T)>): T
 "set"<T>(arg0: $TeamProperty$Type<(T)>, arg1: T): void
 "write"(arg0: $FriendlyByteBuf$Type): void
 "read"(arg0: $FriendlyByteBuf$Type): void
 "forEach"<T>(arg0: $BiConsumer$Type<($TeamProperty$Type<(T)>), ($TeamPropertyValue$Type<(T)>)>): void
 "copy"(): $TeamPropertyCollection
 "updateFrom"(arg0: $TeamPropertyCollection$Type): void
}

export namespace $TeamPropertyCollection {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TeamPropertyCollection$Type = ($TeamPropertyCollection);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TeamPropertyCollection_ = $TeamPropertyCollection$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/block/$QuestBarrierBlock" {
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$CollisionContext, $CollisionContext$Type} from "packages/net/minecraft/world/phys/shapes/$CollisionContext"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$BaseEntityBlock, $BaseEntityBlock$Type} from "packages/net/minecraft/world/level/block/$BaseEntityBlock"
import {$BlockEntityTicker, $BlockEntityTicker$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityTicker"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$RenderShape, $RenderShape$Type} from "packages/net/minecraft/world/level/block/$RenderShape"

export class $QuestBarrierBlock extends $BaseEntityBlock {
static readonly "OPEN": $BooleanProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation


public "getTicker"<T extends $BlockEntity>(level: $Level$Type, blockState: $BlockState$Type, blockEntityType: $BlockEntityType$Type<(T)>): $BlockEntityTicker<(T)>
public "propagatesSkylightDown"(state: $BlockState$Type, bg: $BlockGetter$Type, pos: $BlockPos$Type): boolean
public "setPlacedBy"(level: $Level$Type, pos: $BlockPos$Type, state: $BlockState$Type, entity: $LivingEntity$Type, stack: $ItemStack$Type): void
public "skipRendering"(state: $BlockState$Type, state2: $BlockState$Type, dir: $Direction$Type): boolean
public "getRenderShape"(state: $BlockState$Type): $RenderShape
public "getShadeBrightness"(blockState: $BlockState$Type, blockGetter: $BlockGetter$Type, blockPos: $BlockPos$Type): float
public "getCollisionShape"(state: $BlockState$Type, bg: $BlockGetter$Type, pos: $BlockPos$Type, ctx: $CollisionContext$Type): $VoxelShape
public "getVisualShape"(state: $BlockState$Type, blockGetter: $BlockGetter$Type, pos: $BlockPos$Type, ctx: $CollisionContext$Type): $VoxelShape
public "newBlockEntity"(blockPos: $BlockPos$Type, blockState: $BlockState$Type): $BlockEntity
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $QuestBarrierBlock$Type = ($QuestBarrierBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $QuestBarrierBlock_ = $QuestBarrierBlock$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/icon/$IconWithParent" {
import {$Icon, $Icon$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Icon"

export class $IconWithParent extends $Icon {
readonly "parent": $Icon

constructor(i: $Icon$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IconWithParent$Type = ($IconWithParent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IconWithParent_ = $IconWithParent$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/item/$QuestBarrierBlockItem" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$BlockItem, $BlockItem$Type} from "packages/net/minecraft/world/item/$BlockItem"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$List, $List$Type} from "packages/java/util/$List"
import {$AdditionalItemPlacement, $AdditionalItemPlacement$Type} from "packages/net/mehvahdjukaar/moonlight/api/item/additional_placements/$AdditionalItemPlacement"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $QuestBarrierBlockItem extends $BlockItem {
static readonly "BLOCK_ENTITY_TAG": string
static readonly "BLOCK_STATE_TAG": string
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor()

public "appendHoverText"(stack: $ItemStack$Type, level: $Level$Type, tooltip: $List$Type<($Component$Type)>, flag: $TooltipFlag$Type): void
public "moonlight$addAdditionalBehavior"(arg0: $AdditionalItemPlacement$Type): void
public "moonlight$getAdditionalBehavior"(): $AdditionalItemPlacement
public "moonlight$getClientAnimationExtension"(): any
public "moonlight$setClientAnimationExtension"(arg0: any): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $QuestBarrierBlockItem$Type = ($QuestBarrierBlockItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $QuestBarrierBlockItem_ = $QuestBarrierBlockItem$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/ui/$CursorType" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $CursorType extends $Enum<($CursorType)> {
static readonly "ARROW": $CursorType
static readonly "IBEAM": $CursorType
static readonly "CROSSHAIR": $CursorType
static readonly "HAND": $CursorType
static readonly "HRESIZE": $CursorType
static readonly "VRESIZE": $CursorType


public static "values"(): ($CursorType)[]
public static "valueOf"(name: string): $CursorType
public static "set"(type: $CursorType$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CursorType$Type = (("crosshair") | ("arrow") | ("vresize") | ("hresize") | ("ibeam") | ("hand")) | ($CursorType);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CursorType_ = $CursorType$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/quest/theme/selector/$TypeSelector" {
import {$QuestObjectType, $QuestObjectType$Type} from "packages/dev/ftb/mods/ftbquests/quest/$QuestObjectType"
import {$QuestObjectBase, $QuestObjectBase$Type} from "packages/dev/ftb/mods/ftbquests/quest/$QuestObjectBase"
import {$ThemeSelector, $ThemeSelector$Type} from "packages/dev/ftb/mods/ftbquests/quest/theme/selector/$ThemeSelector"
import {$ThemeSelectorType, $ThemeSelectorType$Type} from "packages/dev/ftb/mods/ftbquests/quest/theme/selector/$ThemeSelectorType"

export class $TypeSelector extends $ThemeSelector {
readonly "type": $QuestObjectType

constructor(t: $QuestObjectType$Type)

public "equals"(o: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "compareTo"(o: $ThemeSelector$Type): integer
public "matches"(object: $QuestObjectBase$Type): boolean
public "getType"(): $ThemeSelectorType
get "type"(): $ThemeSelectorType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TypeSelector$Type = ($TypeSelector);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TypeSelector_ = $TypeSelector$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/config/$Tristate" {
import {$Color4I, $Color4I$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Color4I"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$NameMap, $NameMap$Type} from "packages/dev/ftb/mods/ftblibrary/config/$NameMap"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$Icon, $Icon$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Icon"

export class $Tristate extends $Enum<($Tristate)> {
static readonly "FALSE": $Tristate
static readonly "TRUE": $Tristate
static readonly "DEFAULT": $Tristate
static readonly "VALUES": ($Tristate)[]
static readonly "NAME_MAP": $NameMap<($Tristate)>
readonly "name": string
readonly "displayName": string
readonly "result": $InteractionResult
readonly "color": $Color4I
readonly "icon": $Icon


public "get"(def: boolean): boolean
public "toString"(): string
public static "values"(): ($Tristate)[]
public static "valueOf"(name: string): $Tristate
public "write"(buffer: $FriendlyByteBuf$Type): void
public "write"(nbt: $CompoundTag$Type, key: string): void
public static "read"(nbt: $CompoundTag$Type, key: string): $Tristate
public static "read"(buffer: $FriendlyByteBuf$Type): $Tristate
public "isDefault"(): boolean
public "isTrue"(): boolean
public "getOpposite"(): $Tristate
public "isFalse"(): boolean
get "default"(): boolean
get "true"(): boolean
get "opposite"(): $Tristate
get "false"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Tristate$Type = (("default") | ("false") | ("true")) | ($Tristate);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Tristate_ = $Tristate$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/ui/$VerticalSpaceWidget" {
import {$Panel, $Panel$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Panel"
import {$Widget, $Widget$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Widget"

export class $VerticalSpaceWidget extends $Widget {
 "posX": integer
 "posY": integer
 "width": integer
 "height": integer

constructor(p: $Panel$Type, h: integer)

public "isEnabled"(): boolean
public "shouldDraw"(): boolean
get "enabled"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $VerticalSpaceWidget$Type = ($VerticalSpaceWidget);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $VerticalSpaceWidget_ = $VerticalSpaceWidget$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/client/gui/$ImageComponentWidget" {
import {$ImageComponent, $ImageComponent$Type} from "packages/dev/ftb/mods/ftblibrary/util/client/$ImageComponent"
import {$Panel, $Panel$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Panel"
import {$Widget, $Widget$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Widget"
import {$ViewQuestPanel, $ViewQuestPanel$Type} from "packages/dev/ftb/mods/ftbquests/client/gui/quests/$ViewQuestPanel"
import {$Theme, $Theme$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Theme"
import {$MouseButton, $MouseButton$Type} from "packages/dev/ftb/mods/ftblibrary/ui/input/$MouseButton"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$TooltipList, $TooltipList$Type} from "packages/dev/ftb/mods/ftblibrary/util/$TooltipList"

export class $ImageComponentWidget extends $Widget {
 "posX": integer
 "posY": integer
 "width": integer
 "height": integer

constructor(viewQuestPanel: $ViewQuestPanel$Type, panel: $Panel$Type, component: $ImageComponent$Type, index: integer)

public "draw"(graphics: $GuiGraphics$Type, theme: $Theme$Type, x: integer, y: integer, w: integer, h: integer): void
public "getComponent"(): $ImageComponent
public "mouseDoubleClicked"(button: $MouseButton$Type): boolean
public "mousePressed"(button: $MouseButton$Type): boolean
public "addMouseOverText"(list: $TooltipList$Type): void
get "component"(): $ImageComponent
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ImageComponentWidget$Type = ($ImageComponentWidget);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ImageComponentWidget_ = $ImageComponentWidget$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/math/$Bits" {
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$List, $List$Type} from "packages/java/util/$List"

export class $Bits {

constructor()

public static "toLong"(b: (byte)[], off: integer): long
public static "toBool"(b: (boolean)[], d: integer): void
public static "intsToLong"(a: integer, b: integer): long
public static "intFromLongA"(l: long): integer
public static "intFromLongB"(l: long): integer
public static "shortsToInt"(a: integer, b: integer): integer
public static "byteFromShortB"(s: short): byte
public static "bytesToShort"(a: integer, b: integer): short
public static "fromUUIDList"(c: $Collection$Type<($UUID$Type)>): (byte)[]
public static "byteFromShortA"(s: short): byte
public static "shortFromIntA"(i: integer): short
public static "toUShort"(b: (byte)[], off: integer): integer
public static "fromLong"(b: (byte)[], off: integer, v: long): void
public static "fromUShort"(b: (byte)[], off: integer, v: integer): void
public static "toUUIDList"(b: (byte)[]): $List<($UUID)>
public static "fromInt"(b: (byte)[], off: integer, v: integer): void
public static "shortFromIntB"(i: integer): short
public static "toInt"(b: (boolean)[]): integer
public static "toInt"(b: (byte)[], off: integer): integer
public static "toUUID"(b: (byte)[], off: integer): $UUID
public static "getFlag"(flags: integer, flag: integer): boolean
public static "fromUUID"(b: (byte)[], off: integer, uuid: $UUID$Type): void
public static "setFlag"(flags: integer, flag: integer, v: boolean): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Bits$Type = ($Bits);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Bits_ = $Bits$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/net/$MoveMovableResponseMessage" {
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$NetworkManager$PacketContext, $NetworkManager$PacketContext$Type} from "packages/dev/architectury/networking/$NetworkManager$PacketContext"
import {$BaseS2CMessage, $BaseS2CMessage$Type} from "packages/dev/architectury/networking/simple/$BaseS2CMessage"
import {$Movable, $Movable$Type} from "packages/dev/ftb/mods/ftbquests/quest/$Movable"
import {$MessageType, $MessageType$Type} from "packages/dev/architectury/networking/simple/$MessageType"

export class $MoveMovableResponseMessage extends $BaseS2CMessage {

constructor(movable: $Movable$Type, c: long, _x: double, _y: double)

public "write"(buffer: $FriendlyByteBuf$Type): void
public "getType"(): $MessageType
public "handle"(context: $NetworkManager$PacketContext$Type): void
get "type"(): $MessageType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MoveMovableResponseMessage$Type = ($MoveMovableResponseMessage);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MoveMovableResponseMessage_ = $MoveMovableResponseMessage$Type;
}}
declare module "packages/dev/ftb/mods/ftbteams/client/$FTBTeamsClient" {
import {$KeyMapping, $KeyMapping$Type} from "packages/net/minecraft/client/$KeyMapping"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$KnownClientPlayer, $KnownClientPlayer$Type} from "packages/dev/ftb/mods/ftbteams/api/client/$KnownClientPlayer"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$TeamPropertyCollection, $TeamPropertyCollection$Type} from "packages/dev/ftb/mods/ftbteams/api/property/$TeamPropertyCollection"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$PlayerPermissions, $PlayerPermissions$Type} from "packages/dev/ftb/mods/ftbteams/data/$PlayerPermissions"

export class $FTBTeamsClient {
static readonly "OPEN_GUI_ID": $ResourceLocation
static "openTeamsKey": $KeyMapping

constructor()

public static "init"(): void
public static "sendMessage"(from: $UUID$Type, text: $Component$Type): void
public static "updateSettings"(id: $UUID$Type, properties: $TeamPropertyCollection$Type): void
public static "updatePresence"(update: $KnownClientPlayer$Type): void
public static "openMyTeamGui"(properties: $TeamPropertyCollection$Type, permissions: $PlayerPermissions$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FTBTeamsClient$Type = ($FTBTeamsClient);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FTBTeamsClient_ = $FTBTeamsClient$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/quest/$DependencyDepthException" {
import {$QuestObject, $QuestObject$Type} from "packages/dev/ftb/mods/ftbquests/quest/$QuestObject"
import {$RuntimeException, $RuntimeException$Type} from "packages/java/lang/$RuntimeException"

export class $DependencyDepthException extends $RuntimeException {
readonly "object": $QuestObject

constructor(o: $QuestObject$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DependencyDepthException$Type = ($DependencyDepthException);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DependencyDepthException_ = $DependencyDepthException$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/math/$ScreenPosition" {
import {$StringRepresentable$EnumCodec, $StringRepresentable$EnumCodec$Type} from "packages/net/minecraft/util/$StringRepresentable$EnumCodec"
import {$StringRepresentable, $StringRepresentable$Type} from "packages/net/minecraft/util/$StringRepresentable"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$Keyable, $Keyable$Type} from "packages/com/mojang/serialization/$Keyable"
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"

export class $ScreenPosition extends $Enum<($ScreenPosition)> implements $StringRepresentable {
static readonly "CENTER": $ScreenPosition
static readonly "TOP": $ScreenPosition
static readonly "BOTTOM": $ScreenPosition
static readonly "LEFT": $ScreenPosition
static readonly "RIGHT": $ScreenPosition
static readonly "TOP_LEFT": $ScreenPosition
static readonly "TOP_RIGHT": $ScreenPosition
static readonly "BOTTOM_LEFT": $ScreenPosition
static readonly "BOTTOM_RIGHT": $ScreenPosition


public static "values"(): ($ScreenPosition)[]
public static "valueOf"(name: string): $ScreenPosition
public "getY"(screenHeight: integer, height: integer, offset: integer): integer
public "getSerializedName"(): string
public "getX"(screenWidth: integer, width: integer, offset: integer): integer
public "getOffsetX"(): integer
public "getOffsetY"(): integer
public static "fromEnumWithMapping"<E extends ($Enum<(E)>) & ($StringRepresentable)>(arg0: $Supplier$Type<((E)[])>, arg1: $Function$Type<(string), (string)>): $StringRepresentable$EnumCodec<(E)>
public static "keys"(arg0: ($StringRepresentable$Type)[]): $Keyable
public static "fromEnum"<E extends ($Enum<(E)>) & ($StringRepresentable)>(arg0: $Supplier$Type<((E)[])>): $StringRepresentable$EnumCodec<(E)>
get "serializedName"(): string
get "offsetX"(): integer
get "offsetY"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ScreenPosition$Type = (("top_right") | ("top") | ("left") | ("bottom") | ("center") | ("top_left") | ("bottom_right") | ("right") | ("bottom_left")) | ($ScreenPosition);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ScreenPosition_ = $ScreenPosition$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/$FTBLibrary" {
import {$Logger, $Logger$Type} from "packages/org/apache/logging/log4j/$Logger"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $FTBLibrary {
static readonly "MOD_ID": string
static readonly "MOD_NAME": string
static readonly "LOGGER": $Logger

constructor()

public static "rl"(path: string): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FTBLibrary$Type = ($FTBLibrary);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FTBLibrary_ = $FTBLibrary$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/quest/$BaseQuestFile" {
import {$Quest, $Quest$Type} from "packages/dev/ftb/mods/ftbquests/quest/$Quest"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Task, $Task$Type} from "packages/dev/ftb/mods/ftbquests/quest/task/$Task"
import {$ConfigGroup, $ConfigGroup$Type} from "packages/dev/ftb/mods/ftblibrary/config/$ConfigGroup"
import {$QuestObjectType, $QuestObjectType$Type} from "packages/dev/ftb/mods/ftbquests/quest/$QuestObjectType"
import {$CommandSourceStack, $CommandSourceStack$Type} from "packages/net/minecraft/commands/$CommandSourceStack"
import {$LootCrate, $LootCrate$Type} from "packages/dev/ftb/mods/ftbquests/quest/loot/$LootCrate"
import {$EntityWeight, $EntityWeight$Type} from "packages/dev/ftb/mods/ftbquests/quest/loot/$EntityWeight"
import {$Icon, $Icon$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Icon"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$Env, $Env$Type} from "packages/dev/architectury/utils/$Env"
import {$QuestObject, $QuestObject$Type} from "packages/dev/ftb/mods/ftbquests/quest/$QuestObject"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$TaskType, $TaskType$Type} from "packages/dev/ftb/mods/ftbquests/quest/task/$TaskType"
import {$QuestProgressEventData, $QuestProgressEventData$Type} from "packages/dev/ftb/mods/ftbquests/events/$QuestProgressEventData"
import {$List, $List$Type} from "packages/java/util/$List"
import {$RewardAutoClaim, $RewardAutoClaim$Type} from "packages/dev/ftb/mods/ftbquests/quest/reward/$RewardAutoClaim"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$QuestLink, $QuestLink$Type} from "packages/dev/ftb/mods/ftbquests/quest/$QuestLink"
import {$Reward, $Reward$Type} from "packages/dev/ftb/mods/ftbquests/quest/reward/$Reward"
import {$Chapter, $Chapter$Type} from "packages/dev/ftb/mods/ftbquests/quest/$Chapter"
import {$QuestFile, $QuestFile$Type} from "packages/dev/ftb/mods/ftbquests/api/$QuestFile"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$QuestObjectBase, $QuestObjectBase$Type} from "packages/dev/ftb/mods/ftbquests/quest/$QuestObjectBase"
import {$Path, $Path$Type} from "packages/java/nio/file/$Path"
import {$DefaultChapterGroup, $DefaultChapterGroup$Type} from "packages/dev/ftb/mods/ftbquests/quest/$DefaultChapterGroup"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Tag, $Tag$Type} from "packages/net/minecraft/nbt/$Tag"
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$RecipeModHelper$Components, $RecipeModHelper$Components$Type} from "packages/dev/ftb/mods/ftbquests/integration/$RecipeModHelper$Components"
import {$TeamData, $TeamData$Type} from "packages/dev/ftb/mods/ftbquests/quest/$TeamData"
import {$RewardType, $RewardType$Type} from "packages/dev/ftb/mods/ftbquests/quest/reward/$RewardType"
import {$RewardTable, $RewardTable$Type} from "packages/dev/ftb/mods/ftbquests/quest/loot/$RewardTable"
import {$ProgressionMode, $ProgressionMode$Type} from "packages/dev/ftb/mods/ftbquests/quest/$ProgressionMode"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$ChapterGroup, $ChapterGroup$Type} from "packages/dev/ftb/mods/ftbquests/quest/$ChapterGroup"
import {$Team, $Team$Type} from "packages/dev/ftb/mods/ftbteams/api/$Team"

export class $BaseQuestFile extends $QuestObject implements $QuestFile {
static "VERSION": integer
readonly "id": long

constructor()

public "remove"(id: long): $QuestObjectBase
public "get"(id: long): $QuestObject
public "collect"<T extends $QuestObjectBase>(filter: $Predicate$Type<($QuestObjectBase$Type)>): $List<(T)>
public "collect"<T extends $QuestObjectBase>(clazz: $Class$Type<(T)>): $List<(T)>
public "create"(id: long, type: $QuestObjectType$Type, parent: long, extra: $CompoundTag$Type): $QuestObjectBase
public "getID"(obj: any): long
public "getBase"(id: long): $QuestObjectBase
public "getChildren"(): $Collection<(any)>
public "isLoading"(): boolean
public "getObjectType"(): $QuestObjectType
public "getQuest"(id: long): $Quest
public "getTask"(id: long): $Task
public "deleteSelf"(): void
public "getQuestFile"(): $BaseQuestFile
public "getFolder"(): $Path
public "getReward"(id: long): $Reward
public "getSide"(): $Env
public "deleteChildren"(): void
public "isVisible"(data: $TeamData$Type): boolean
public "readData"(nbt: $CompoundTag$Type): void
public "getAltTitle"(): $MutableComponent
public "getAltIcon"(): $Icon
public "isDropLootCrates"(): boolean
public "markDirty"(): void
public "getParentID"(): long
public "componentsToRefresh"(): $Set<($RecipeModHelper$Components)>
public "clearCachedProgress"(): void
public "getNullableTeamData"(id: $UUID$Type): $TeamData
public "getRelativeProgressFromChildren"(data: $TeamData$Type): integer
public "getOrCreateTeamData"(teamId: $UUID$Type): $TeamData
public "getOrCreateTeamData"(player: $Entity$Type): $TeamData
public "getOrCreateTeamData"(team: $Team$Type): $TeamData
public "hasUnclaimedRewardsRaw"(teamData: $TeamData$Type, player: $UUID$Type): boolean
public "generateRewardTableName"(basename: string): string
public "isDefaultTeamConsumeItems"(): boolean
public "getFirstVisibleChapter"(data: $TeamData$Type): $Chapter
public "getDefaultRewardAutoClaim"(): $RewardAutoClaim
public "getEmergencyItemsCooldown"(): integer
public "forAllChapterGroups"(consumer: $Consumer$Type<($ChapterGroup$Type)>): void
public "isDefaultPerTeamReward"(): boolean
public "removeEmptyRewardTables"(source: $CommandSourceStack$Type): integer
public "getDefaultChapterGroup"(): $DefaultChapterGroup
public "isDefaultQuestDisableJEI"(): boolean
public "getDefaultQuestShape"(): string
public "onCompleted"(data: $QuestProgressEventData$Type<(any)>): void
public "onStarted"(data: $QuestProgressEventData$Type<(any)>): void
public "clearCachedData"(): void
public "forAllQuests"(consumer: $Consumer$Type<($Quest$Type)>): void
public "refreshIDMap"(): void
public "getChapter"(id: long): $Chapter
public "canEdit"(): boolean
public "isServerSide"(): boolean
public "forAllChapters"(consumer: $Consumer$Type<($Chapter$Type)>): void
public "getChapterOrThrow"(id: long): $Chapter
public "getLootCrate"(id: string): $LootCrate
public "getRewardTable"(id: long): $RewardTable
public "getChapterGroup"(id: long): $ChapterGroup
public "writeDataFull"(folder: $Path$Type): void
public "readDataFull"(folder: $Path$Type): void
public "updateLootCrates"(): void
public "getAllObjects"(): $Collection<($QuestObjectBase)>
public "readID"(tag: $Tag$Type): long
public "readID"(id: long): long
public "readNetDataFull"(buffer: $FriendlyByteBuf$Type): void
public "writeNetDataFull"(buffer: $FriendlyByteBuf$Type): void
public "newID"(): long
public "getAllTeamData"(): $Collection<($TeamData)>
public "getEmergencyItems"(): $List<($ItemStack)>
public "getSubmitTasks"(): $List<($Task)>
public "isPlayerOnTeam"(arg0: $Player$Type, arg1: $TeamData$Type): boolean
public "getDetectionDelay"(): integer
public "isDisableGui"(): boolean
public "getVisibleChapters"(data: $TeamData$Type): $List<($Chapter)>
public "getAllTasks"(): $List<($Task)>
public "getAllChapters"(): $List<($Chapter)>
public "getCraftingTasks"(): $List<($Task)>
public "getProgressionMode"(): $ProgressionMode
public "isPauseGame"(): boolean
public "getGridScale"(): double
public "getRewardType"(typeId: integer): $RewardType
public "getTaskType"(typeId: integer): $TaskType
public "moveChapterGroup"(id: long, movingUp: boolean): boolean
public "getChapterGroups"(): $List<($ChapterGroup)>
public "getLootCrateNoDrop"(): $EntityWeight
public "removeRewardTable"(rewardTable: $RewardTable$Type): void
public "addRewardTable"(rewardTable: $RewardTable$Type): void
public "getRewardTables"(): $List<($RewardTable)>
public "forAllQuestLinks"(consumer: $Consumer$Type<($QuestLink$Type)>): void
public "writeNetData"(buffer: $FriendlyByteBuf$Type): void
public "writeData"(nbt: $CompoundTag$Type): void
public "deleteObject"(arg0: long): void
public "refreshGui"(): void
public "addData"(data: $TeamData$Type, override: boolean): void
public "makeRandomLootCrate"(entity: $Entity$Type, random: $RandomSource$Type): $Optional<($LootCrate)>
public "fillConfigGroup"(config: $ConfigGroup$Type): void
public "readNetData"(buffer: $FriendlyByteBuf$Type): void
get "children"(): $Collection<(any)>
get "loading"(): boolean
get "objectType"(): $QuestObjectType
get "questFile"(): $BaseQuestFile
get "folder"(): $Path
get "side"(): $Env
get "altTitle"(): $MutableComponent
get "altIcon"(): $Icon
get "dropLootCrates"(): boolean
get "parentID"(): long
get "defaultTeamConsumeItems"(): boolean
get "defaultRewardAutoClaim"(): $RewardAutoClaim
get "emergencyItemsCooldown"(): integer
get "defaultPerTeamReward"(): boolean
get "defaultChapterGroup"(): $DefaultChapterGroup
get "defaultQuestDisableJEI"(): boolean
get "defaultQuestShape"(): string
get "serverSide"(): boolean
get "allObjects"(): $Collection<($QuestObjectBase)>
get "allTeamData"(): $Collection<($TeamData)>
get "emergencyItems"(): $List<($ItemStack)>
get "submitTasks"(): $List<($Task)>
get "detectionDelay"(): integer
get "disableGui"(): boolean
get "allTasks"(): $List<($Task)>
get "allChapters"(): $List<($Chapter)>
get "craftingTasks"(): $List<($Task)>
get "progressionMode"(): $ProgressionMode
get "pauseGame"(): boolean
get "gridScale"(): double
get "chapterGroups"(): $List<($ChapterGroup)>
get "lootCrateNoDrop"(): $EntityWeight
get "rewardTables"(): $List<($RewardTable)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BaseQuestFile$Type = ($BaseQuestFile);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BaseQuestFile_ = $BaseQuestFile$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/quest/task/$TaskType$GuiProvider" {
import {$Quest, $Quest$Type} from "packages/dev/ftb/mods/ftbquests/quest/$Quest"
import {$Panel, $Panel$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Panel"
import {$Task, $Task$Type} from "packages/dev/ftb/mods/ftbquests/quest/task/$Task"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"

export interface $TaskType$GuiProvider {

 "openCreationGui"(arg0: $Panel$Type, arg1: $Quest$Type, arg2: $Consumer$Type<($Task$Type)>): void

(arg0: $Panel$Type, arg1: $Quest$Type, arg2: $Consumer$Type<($Task$Type)>): void
}

export namespace $TaskType$GuiProvider {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TaskType$GuiProvider$Type = ($TaskType$GuiProvider);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TaskType$GuiProvider_ = $TaskType$GuiProvider$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/ui/$IOpenableScreen" {
import {$Runnable, $Runnable$Type} from "packages/java/lang/$Runnable"

export interface $IOpenableScreen extends $Runnable {

 "run"(): void
 "openGui"(): void
 "closeGui"(openPrevScreen: boolean): void
 "closeGui"(): void
 "openAfter"(runnable: $Runnable$Type): $Runnable
 "openGuiLater"(): void
 "closeContextMenu"(): void

(): void
}

export namespace $IOpenableScreen {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IOpenableScreen$Type = ($IOpenableScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IOpenableScreen_ = $IOpenableScreen$Type;
}}
declare module "packages/dev/ftb/mods/ftbxmodcompat/ftbquests/$FTBQuestsSetup" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $FTBQuestsSetup {

constructor()

public static "init"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FTBQuestsSetup$Type = ($FTBQuestsSetup);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FTBQuestsSetup_ = $FTBQuestsSetup$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/quest/reward/$AdvancementReward" {
import {$Quest, $Quest$Type} from "packages/dev/ftb/mods/ftbquests/quest/$Quest"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$ConfigGroup, $ConfigGroup$Type} from "packages/dev/ftb/mods/ftblibrary/config/$ConfigGroup"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$Icon, $Icon$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Icon"
import {$Reward, $Reward$Type} from "packages/dev/ftb/mods/ftbquests/quest/reward/$Reward"
import {$RewardType, $RewardType$Type} from "packages/dev/ftb/mods/ftbquests/quest/reward/$RewardType"

export class $AdvancementReward extends $Reward {
readonly "id": long

constructor(id: long, quest: $Quest$Type)

public "getType"(): $RewardType
public "claim"(player: $ServerPlayer$Type, notify: boolean): void
public "readData"(nbt: $CompoundTag$Type): void
public "getAltTitle"(): $Component
public "getAltIcon"(): $Icon
public "writeNetData"(buffer: $FriendlyByteBuf$Type): void
public "writeData"(nbt: $CompoundTag$Type): void
public "fillConfigGroup"(config: $ConfigGroup$Type): void
public "readNetData"(buffer: $FriendlyByteBuf$Type): void
get "type"(): $RewardType
get "altTitle"(): $Component
get "altIcon"(): $Icon
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AdvancementReward$Type = ($AdvancementReward);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AdvancementReward_ = $AdvancementReward$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/client/$ClientQuestFile" {
import {$Env, $Env$Type} from "packages/dev/architectury/utils/$Env"
import {$Quest, $Quest$Type} from "packages/dev/ftb/mods/ftbquests/quest/$Quest"
import {$BaseQuestFile, $BaseQuestFile$Type} from "packages/dev/ftb/mods/ftbquests/quest/$BaseQuestFile"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$QuestScreen, $QuestScreen$Type} from "packages/dev/ftb/mods/ftbquests/client/gui/quests/$QuestScreen"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$QuestScreen$PersistedData, $QuestScreen$PersistedData$Type} from "packages/dev/ftb/mods/ftbquests/client/gui/quests/$QuestScreen$PersistedData"
import {$TeamData, $TeamData$Type} from "packages/dev/ftb/mods/ftbquests/quest/$TeamData"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $ClientQuestFile extends $BaseQuestFile {
static "INSTANCE": $ClientQuestFile
 "selfTeamData": $TeamData
static "VERSION": integer
readonly "id": long

constructor()

public static "exists"(): boolean
public "getSide"(): $Env
public static "syncFromServer"(newInstance: $BaseQuestFile$Type): void
public static "openGui"(quest: $Quest$Type, focused: boolean): $QuestScreen
public static "openGui"(): $QuestScreen
public static "canClientPlayerEdit"(): boolean
public "setPersistedScreenInfo"(persistedData: $QuestScreen$PersistedData$Type): void
public "setEditorPermission"(hasPermission: boolean): void
public static "openBookToQuestObject"(id: long): void
public static "isQuestPinned"(id: long): boolean
public "getQuestScreen"(): $Optional<($QuestScreen)>
public "getOrCreateTeamData"(player: $Entity$Type): $TeamData
public "hasEditorPermission"(): boolean
public "clearCachedData"(): void
public "canEdit"(): boolean
public "isPlayerOnTeam"(player: $Player$Type, teamData: $TeamData$Type): boolean
public "moveChapterGroup"(id: long, movingUp: boolean): boolean
public "deleteObject"(id: long): void
public "refreshGui"(): void
get "side"(): $Env
set "persistedScreenInfo"(value: $QuestScreen$PersistedData$Type)
set "editorPermission"(value: boolean)
get "questScreen"(): $Optional<($QuestScreen)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientQuestFile$Type = ($ClientQuestFile);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientQuestFile_ = $ClientQuestFile$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/net/$DeleteObjectResponseMessage" {
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$NetworkManager$PacketContext, $NetworkManager$PacketContext$Type} from "packages/dev/architectury/networking/$NetworkManager$PacketContext"
import {$BaseS2CMessage, $BaseS2CMessage$Type} from "packages/dev/architectury/networking/simple/$BaseS2CMessage"
import {$MessageType, $MessageType$Type} from "packages/dev/architectury/networking/simple/$MessageType"

export class $DeleteObjectResponseMessage extends $BaseS2CMessage {

constructor(i: long)

public "write"(buffer: $FriendlyByteBuf$Type): void
public "getType"(): $MessageType
public "handle"(context: $NetworkManager$PacketContext$Type): void
get "type"(): $MessageType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DeleteObjectResponseMessage$Type = ($DeleteObjectResponseMessage);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DeleteObjectResponseMessage_ = $DeleteObjectResponseMessage$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/ui/$MismatchingParentPanelException" {
import {$Panel, $Panel$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Panel"
import {$Widget, $Widget$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Widget"
import {$IllegalArgumentException, $IllegalArgumentException$Type} from "packages/java/lang/$IllegalArgumentException"

export class $MismatchingParentPanelException extends $IllegalArgumentException {
readonly "panel": $Panel
readonly "widget": $Widget

constructor(p: $Panel$Type, w: $Widget$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MismatchingParentPanelException$Type = ($MismatchingParentPanelException);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MismatchingParentPanelException_ = $MismatchingParentPanelException$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/quest/loot/$RewardTable" {
import {$Quest, $Quest$Type} from "packages/dev/ftb/mods/ftbquests/quest/$Quest"
import {$BaseQuestFile, $BaseQuestFile$Type} from "packages/dev/ftb/mods/ftbquests/quest/$BaseQuestFile"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$ConfigGroup, $ConfigGroup$Type} from "packages/dev/ftb/mods/ftblibrary/config/$ConfigGroup"
import {$QuestObjectType, $QuestObjectType$Type} from "packages/dev/ftb/mods/ftbquests/quest/$QuestObjectType"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$QuestObjectBase, $QuestObjectBase$Type} from "packages/dev/ftb/mods/ftbquests/quest/$QuestObjectBase"
import {$LootCrate, $LootCrate$Type} from "packages/dev/ftb/mods/ftbquests/quest/loot/$LootCrate"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$Icon, $Icon$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Icon"
import {$RecipeModHelper$Components, $RecipeModHelper$Components$Type} from "packages/dev/ftb/mods/ftbquests/integration/$RecipeModHelper$Components"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$TooltipList, $TooltipList$Type} from "packages/dev/ftb/mods/ftblibrary/util/$TooltipList"
import {$Runnable, $Runnable$Type} from "packages/java/lang/$Runnable"
import {$WeightedReward, $WeightedReward$Type} from "packages/dev/ftb/mods/ftbquests/quest/loot/$WeightedReward"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"

export class $RewardTable extends $QuestObjectBase {
readonly "id": long

constructor(id: long, file: $BaseQuestFile$Type)
constructor(id: long, file: $BaseQuestFile$Type, filename: string)

public "getFile"(): $BaseQuestFile
public "getPath"(): $Optional<(string)>
public "getObjectType"(): $QuestObjectType
public "deleteSelf"(): void
public "getQuestFile"(): $BaseQuestFile
public "editedFromGUI"(): void
public "readData"(nbt: $CompoundTag$Type): void
public "getAltTitle"(): $Component
public "getAltIcon"(): $Icon
public "makeWeightedItemReward"(stack: $ItemStack$Type, weight: float): $WeightedReward
public "getTitleOrElse"(def: $Component$Type): $Component
public "addMouseOverText"(list: $TooltipList$Type, includeWeight: boolean, includeEmpty: boolean): void
public "getTotalWeight"(includeEmpty: boolean): float
public "getFilename"(): string
public "onEditButtonClicked"(gui: $Runnable$Type): void
public "editedFromGUIOnServer"(): void
public "componentsToRefresh"(): $Set<($RecipeModHelper$Components)>
public "onCreated"(): void
public "clearCachedData"(): void
public "getLootCrate"(): $LootCrate
public "addReward"(weightedReward: $WeightedReward$Type): void
public "getWeightedRewards"(): $List<($WeightedReward)>
public "removeReward"(weightedReward: $WeightedReward$Type): void
public "writeNetData"(buffer: $FriendlyByteBuf$Type): void
public "writeData"(nbt: $CompoundTag$Type): void
public "generateWeightedRandomRewards"(random: $RandomSource$Type, nAttempts: integer, includeEmpty: boolean): $Collection<($WeightedReward)>
public "fillConfigGroup"(config: $ConfigGroup$Type): void
public "readNetData"(buffer: $FriendlyByteBuf$Type): void
public "shouldShowTooltip"(): boolean
public "getFakeQuest"(): $Quest
public "toggleLootCrate"(): $LootCrate
get "file"(): $BaseQuestFile
get "path"(): $Optional<(string)>
get "objectType"(): $QuestObjectType
get "questFile"(): $BaseQuestFile
get "altTitle"(): $Component
get "altIcon"(): $Icon
get "filename"(): string
get "lootCrate"(): $LootCrate
get "weightedRewards"(): $List<($WeightedReward)>
get "fakeQuest"(): $Quest
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RewardTable$Type = ($RewardTable);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RewardTable_ = $RewardTable$Type;
}}
declare module "packages/dev/ftb/mods/ftbteams/api/property/$PrivacyProperty" {
import {$ConfigGroup, $ConfigGroup$Type} from "packages/dev/ftb/mods/ftblibrary/config/$ConfigGroup"
import {$TeamPropertyType, $TeamPropertyType$Type} from "packages/dev/ftb/mods/ftbteams/api/property/$TeamPropertyType"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$PrivacyMode, $PrivacyMode$Type} from "packages/dev/ftb/mods/ftbteams/api/property/$PrivacyMode"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$TeamProperty, $TeamProperty$Type} from "packages/dev/ftb/mods/ftbteams/api/property/$TeamProperty"
import {$TeamPropertyValue, $TeamPropertyValue$Type} from "packages/dev/ftb/mods/ftbteams/api/property/$TeamPropertyValue"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $PrivacyProperty extends $TeamProperty<($PrivacyMode)> {

constructor(id: $ResourceLocation$Type, def: $Supplier$Type<($PrivacyMode$Type)>)
constructor(id: $ResourceLocation$Type, def: $PrivacyMode$Type)

public "toString"(value: $PrivacyMode$Type): string
public "write"(buf: $FriendlyByteBuf$Type): void
public "getType"(): $TeamPropertyType<($PrivacyMode)>
public "config"(config: $ConfigGroup$Type, value: $TeamPropertyValue$Type<($PrivacyMode$Type)>): void
public "fromString"(string: string): $Optional<($PrivacyMode)>
get "type"(): $TeamPropertyType<($PrivacyMode)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PrivacyProperty$Type = ($PrivacyProperty);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PrivacyProperty_ = $PrivacyProperty$Type;
}}
declare module "packages/dev/ftb/mods/ftbteams/api/event/$TeamManagerEvent" {
import {$TeamManager, $TeamManager$Type} from "packages/dev/ftb/mods/ftbteams/api/$TeamManager"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Event, $Event$Type} from "packages/dev/architectury/event/$Event"

export class $TeamManagerEvent {
static readonly "CREATED": $Event<($Consumer<($TeamManagerEvent)>)>
static readonly "LOADED": $Event<($Consumer<($TeamManagerEvent)>)>
static readonly "SAVED": $Event<($Consumer<($TeamManagerEvent)>)>
static readonly "DESTROYED": $Event<($Consumer<($TeamManagerEvent)>)>

constructor(t: $TeamManager$Type)

public "getManager"(): $TeamManager
public "getExtraData"(): $CompoundTag
get "manager"(): $TeamManager
get "extraData"(): $CompoundTag
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TeamManagerEvent$Type = ($TeamManagerEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TeamManagerEvent_ = $TeamManagerEvent$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/ui/$MultilineTextBox$StringExtents" {
import {$MultilineTextField$StringView, $MultilineTextField$StringView$Type} from "packages/net/minecraft/client/gui/components/$MultilineTextField$StringView"
import {$Record, $Record$Type} from "packages/java/lang/$Record"

export class $MultilineTextBox$StringExtents extends $Record {

constructor(start: integer, end: integer)

public "equals"(o: any): boolean
public "toString"(): string
public "hashCode"(): integer
public static "of"(view: $MultilineTextField$StringView$Type): $MultilineTextBox$StringExtents
public "start"(): integer
public "end"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MultilineTextBox$StringExtents$Type = ($MultilineTextBox$StringExtents);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MultilineTextBox$StringExtents_ = $MultilineTextBox$StringExtents$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/quest/task/$LocationTask" {
import {$Quest, $Quest$Type} from "packages/dev/ftb/mods/ftbquests/quest/$Quest"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$ConfigGroup, $ConfigGroup$Type} from "packages/dev/ftb/mods/ftblibrary/config/$ConfigGroup"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$TaskType, $TaskType$Type} from "packages/dev/ftb/mods/ftbquests/quest/task/$TaskType"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$AbstractBooleanTask, $AbstractBooleanTask$Type} from "packages/dev/ftb/mods/ftbquests/quest/task/$AbstractBooleanTask"
import {$StructureBlockEntity, $StructureBlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$StructureBlockEntity"
import {$TeamData, $TeamData$Type} from "packages/dev/ftb/mods/ftbquests/quest/$TeamData"

export class $LocationTask extends $AbstractBooleanTask {
readonly "id": long

constructor(id: long, quest: $Quest$Type)

public "getType"(): $TaskType
public "readData"(nbt: $CompoundTag$Type): void
public "autoSubmitOnPlayerTick"(): integer
public "initFromStructure"(structure: $StructureBlockEntity$Type): void
public "canSubmit"(teamData: $TeamData$Type, player: $ServerPlayer$Type): boolean
public "writeNetData"(buffer: $FriendlyByteBuf$Type): void
public "writeData"(nbt: $CompoundTag$Type): void
public "fillConfigGroup"(config: $ConfigGroup$Type): void
public "readNetData"(buffer: $FriendlyByteBuf$Type): void
get "type"(): $TaskType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LocationTask$Type = ($LocationTask);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LocationTask_ = $LocationTask$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/client/gui/$MultilineTextEditorScreen" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$KeyModifiers, $KeyModifiers$Type} from "packages/dev/ftb/mods/ftblibrary/ui/input/$KeyModifiers"
import {$ConfigCallback, $ConfigCallback$Type} from "packages/dev/ftb/mods/ftblibrary/config/$ConfigCallback"
import {$StringConfig, $StringConfig$Type} from "packages/dev/ftb/mods/ftblibrary/config/$StringConfig"
import {$Theme, $Theme$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Theme"
import {$Key, $Key$Type} from "packages/dev/ftb/mods/ftblibrary/ui/input/$Key"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$ListConfig, $ListConfig$Type} from "packages/dev/ftb/mods/ftblibrary/config/$ListConfig"
import {$BaseScreen, $BaseScreen$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$BaseScreen"

export class $MultilineTextEditorScreen extends $BaseScreen {
 "posX": integer
 "posY": integer
 "width": integer
 "height": integer

constructor(title: $Component$Type, config: $ListConfig$Type<(string), ($StringConfig$Type)>, callback: $ConfigCallback$Type)

public "tick"(): void
public "alignWidgets"(): void
public "addWidgets"(): void
public "getTheme"(): $Theme
public "keyPressed"(key: $Key$Type): boolean
public "onInit"(): boolean
public "drawBackground"(matrixStack: $GuiGraphics$Type, theme: $Theme$Type, x: integer, y: integer, w: integer, h: integer): void
public "charTyped"(c: character, modifiers: $KeyModifiers$Type): boolean
public "keyReleased"(key: $Key$Type): void
get "theme"(): $Theme
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MultilineTextEditorScreen$Type = ($MultilineTextEditorScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MultilineTextEditorScreen_ = $MultilineTextEditorScreen$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/net/$ChangeProgressMessage" {
import {$QuestObjectBase, $QuestObjectBase$Type} from "packages/dev/ftb/mods/ftbquests/quest/$QuestObjectBase"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$NetworkManager$PacketContext, $NetworkManager$PacketContext$Type} from "packages/dev/architectury/networking/$NetworkManager$PacketContext"
import {$ProgressChange, $ProgressChange$Type} from "packages/dev/ftb/mods/ftbquests/util/$ProgressChange"
import {$BaseC2SMessage, $BaseC2SMessage$Type} from "packages/dev/architectury/networking/simple/$BaseC2SMessage"
import {$TeamData, $TeamData$Type} from "packages/dev/ftb/mods/ftbquests/quest/$TeamData"
import {$MessageType, $MessageType$Type} from "packages/dev/architectury/networking/simple/$MessageType"

export class $ChangeProgressMessage extends $BaseC2SMessage {

constructor(teamId: $UUID$Type, progressChange: $ProgressChange$Type)

public "write"(buffer: $FriendlyByteBuf$Type): void
public "getType"(): $MessageType
public "handle"(context: $NetworkManager$PacketContext$Type): void
public static "sendToServer"(team: $TeamData$Type, object: $QuestObjectBase$Type, progressChange: $Consumer$Type<($ProgressChange$Type)>): void
get "type"(): $MessageType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ChangeProgressMessage$Type = ($ChangeProgressMessage);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ChangeProgressMessage_ = $ChangeProgressMessage$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/ui/input/$Key" {
import {$KeyModifiers, $KeyModifiers$Type} from "packages/dev/ftb/mods/ftblibrary/ui/input/$KeyModifiers"
import {$InputConstants$Key, $InputConstants$Key$Type} from "packages/com/mojang/blaze3d/platform/$InputConstants$Key"

export class $Key {
readonly "keyCode": integer
readonly "scanCode": integer
readonly "modifiers": $KeyModifiers

constructor(k: integer, s: integer, m: integer)

public "copy"(): boolean
public "is"(k: integer): boolean
public "esc"(): boolean
public "escOrInventory"(): boolean
public "enter"(): boolean
public "backspace"(): boolean
public "selectAll"(): boolean
public "paste"(): boolean
public "cut"(): boolean
public "deselectAll"(): boolean
public "getInputMapping"(): $InputConstants$Key
get "inputMapping"(): $InputConstants$Key
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Key$Type = ($Key);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Key_ = $Key$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/quest/reward/$RandomReward" {
import {$Quest, $Quest$Type} from "packages/dev/ftb/mods/ftbquests/quest/$Quest"
import {$PositionedIngredient, $PositionedIngredient$Type} from "packages/dev/ftb/mods/ftblibrary/util/client/$PositionedIngredient"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$ConfigGroup, $ConfigGroup$Type} from "packages/dev/ftb/mods/ftblibrary/config/$ConfigGroup"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Widget, $Widget$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Widget"
import {$Icon, $Icon$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Icon"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$TooltipList, $TooltipList$Type} from "packages/dev/ftb/mods/ftblibrary/util/$TooltipList"
import {$RewardType, $RewardType$Type} from "packages/dev/ftb/mods/ftbquests/quest/reward/$RewardType"
import {$RewardTable, $RewardTable$Type} from "packages/dev/ftb/mods/ftbquests/quest/loot/$RewardTable"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$Reward, $Reward$Type} from "packages/dev/ftb/mods/ftbquests/quest/reward/$Reward"

export class $RandomReward extends $Reward {
readonly "id": long

constructor(id: long, parent: $Quest$Type)

public "getType"(): $RewardType
public "getTable"(): $RewardTable
public "getIngredient"(widget: $Widget$Type): $Optional<($PositionedIngredient)>
public "claim"(player: $ServerPlayer$Type, notify: boolean): void
public "getExcludeFromClaimAll"(): boolean
public "isClaimAllHardcoded"(): boolean
public "readData"(nbt: $CompoundTag$Type): void
public "getAltTitle"(): $Component
public "getAltIcon"(): $Icon
public "addMouseOverText"(list: $TooltipList$Type): void
public "setTable"(table: $RewardTable$Type): void
public "automatedClaimPost"(blockEntity: $BlockEntity$Type, playerId: $UUID$Type, player: $ServerPlayer$Type): void
public "automatedClaimPre"(blockEntity: $BlockEntity$Type, items: $List$Type<($ItemStack$Type)>, random: $RandomSource$Type, playerId: $UUID$Type, player: $ServerPlayer$Type): boolean
public "writeNetData"(buffer: $FriendlyByteBuf$Type): void
public "writeData"(nbt: $CompoundTag$Type): void
public "fillConfigGroup"(config: $ConfigGroup$Type): void
public "readNetData"(buffer: $FriendlyByteBuf$Type): void
get "type"(): $RewardType
get "table"(): $RewardTable
get "excludeFromClaimAll"(): boolean
get "claimAllHardcoded"(): boolean
get "altTitle"(): $Component
get "altIcon"(): $Icon
set "table"(value: $RewardTable$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RandomReward$Type = ($RandomReward);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RandomReward_ = $RandomReward$Type;
}}
declare module "packages/dev/ftb/mods/ftbteams/api/event/$TeamInfoEvent" {
import {$TeamEvent, $TeamEvent$Type} from "packages/dev/ftb/mods/ftbteams/api/event/$TeamEvent"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$CommandSourceStack, $CommandSourceStack$Type} from "packages/net/minecraft/commands/$CommandSourceStack"
import {$PlayerChangedTeamEvent, $PlayerChangedTeamEvent$Type} from "packages/dev/ftb/mods/ftbteams/api/event/$PlayerChangedTeamEvent"
import {$Event, $Event$Type} from "packages/dev/architectury/event/$Event"
import {$PlayerJoinedPartyTeamEvent, $PlayerJoinedPartyTeamEvent$Type} from "packages/dev/ftb/mods/ftbteams/api/event/$PlayerJoinedPartyTeamEvent"
import {$TeamPropertiesChangedEvent, $TeamPropertiesChangedEvent$Type} from "packages/dev/ftb/mods/ftbteams/api/event/$TeamPropertiesChangedEvent"
import {$TeamAllyEvent, $TeamAllyEvent$Type} from "packages/dev/ftb/mods/ftbteams/api/event/$TeamAllyEvent"
import {$PlayerLeftPartyTeamEvent, $PlayerLeftPartyTeamEvent$Type} from "packages/dev/ftb/mods/ftbteams/api/event/$PlayerLeftPartyTeamEvent"
import {$TeamCreatedEvent, $TeamCreatedEvent$Type} from "packages/dev/ftb/mods/ftbteams/api/event/$TeamCreatedEvent"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$PlayerTransferredTeamOwnershipEvent, $PlayerTransferredTeamOwnershipEvent$Type} from "packages/dev/ftb/mods/ftbteams/api/event/$PlayerTransferredTeamOwnershipEvent"
import {$TeamCollectPropertiesEvent, $TeamCollectPropertiesEvent$Type} from "packages/dev/ftb/mods/ftbteams/api/event/$TeamCollectPropertiesEvent"
import {$PlayerLoggedInAfterTeamEvent, $PlayerLoggedInAfterTeamEvent$Type} from "packages/dev/ftb/mods/ftbteams/api/event/$PlayerLoggedInAfterTeamEvent"
import {$ClientTeamPropertiesChangedEvent, $ClientTeamPropertiesChangedEvent$Type} from "packages/dev/ftb/mods/ftbteams/api/event/$ClientTeamPropertiesChangedEvent"
import {$Team, $Team$Type} from "packages/dev/ftb/mods/ftbteams/api/$Team"

export class $TeamInfoEvent extends $TeamEvent {
static readonly "CREATED": $Event<($Consumer<($TeamCreatedEvent)>)>
static readonly "LOADED": $Event<($Consumer<($TeamEvent)>)>
static readonly "SAVED": $Event<($Consumer<($TeamEvent)>)>
static readonly "DELETED": $Event<($Consumer<($TeamEvent)>)>
static readonly "PLAYER_LOGGED_IN": $Event<($Consumer<($PlayerLoggedInAfterTeamEvent)>)>
static readonly "OWNERSHIP_TRANSFERRED": $Event<($Consumer<($PlayerTransferredTeamOwnershipEvent)>)>
static readonly "COLLECT_PROPERTIES": $Event<($Consumer<($TeamCollectPropertiesEvent)>)>
static readonly "PROPERTIES_CHANGED": $Event<($Consumer<($TeamPropertiesChangedEvent)>)>
static readonly "PLAYER_CHANGED": $Event<($Consumer<($PlayerChangedTeamEvent)>)>
static readonly "PLAYER_JOINED_PARTY": $Event<($Consumer<($PlayerJoinedPartyTeamEvent)>)>
static readonly "PLAYER_LEFT_PARTY": $Event<($Consumer<($PlayerLeftPartyTeamEvent)>)>
static readonly "INFO": $Event<($Consumer<($TeamInfoEvent)>)>
static readonly "ADD_ALLY": $Event<($Consumer<($TeamAllyEvent)>)>
static readonly "REMOVE_ALLY": $Event<($Consumer<($TeamAllyEvent)>)>
static readonly "CLIENT_PROPERTIES_CHANGED": $Event<($Consumer<($ClientTeamPropertiesChangedEvent)>)>

constructor(t: $Team$Type, p: $CommandSourceStack$Type)

public "add"(component: $Component$Type): void
public "getSource"(): $CommandSourceStack
get "source"(): $CommandSourceStack
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TeamInfoEvent$Type = ($TeamInfoEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TeamInfoEvent_ = $TeamInfoEvent$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/integration/permissions/$PermissionHelper" {
import {$PermissionProvider, $PermissionProvider$Type} from "packages/dev/ftb/mods/ftblibrary/integration/permissions/$PermissionProvider"
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $PermissionHelper extends $Enum<($PermissionHelper)> {
static readonly "INSTANCE": $PermissionHelper


public static "values"(): ($PermissionHelper)[]
public static "valueOf"(name: string): $PermissionHelper
public "getInstance"(): $PermissionHelper
public "getProvider"(): $PermissionProvider
public "setProviderImpl"(newProvider: $PermissionProvider$Type): void
get "instance"(): $PermissionHelper
get "provider"(): $PermissionProvider
set "providerImpl"(value: $PermissionProvider$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PermissionHelper$Type = (("instance")) | ($PermissionHelper);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PermissionHelper_ = $PermissionHelper$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/events/$ObjectCompletedEvent$QuestEvent" {
import {$Quest, $Quest$Type} from "packages/dev/ftb/mods/ftbquests/quest/$Quest"
import {$ObjectCompletedEvent$TaskEvent, $ObjectCompletedEvent$TaskEvent$Type} from "packages/dev/ftb/mods/ftbquests/events/$ObjectCompletedEvent$TaskEvent"
import {$Event, $Event$Type} from "packages/dev/architectury/event/$Event"
import {$QuestProgressEventData, $QuestProgressEventData$Type} from "packages/dev/ftb/mods/ftbquests/events/$QuestProgressEventData"
import {$EventActor, $EventActor$Type} from "packages/dev/architectury/event/$EventActor"
import {$ObjectCompletedEvent$FileEvent, $ObjectCompletedEvent$FileEvent$Type} from "packages/dev/ftb/mods/ftbquests/events/$ObjectCompletedEvent$FileEvent"
import {$ObjectCompletedEvent$ChapterEvent, $ObjectCompletedEvent$ChapterEvent$Type} from "packages/dev/ftb/mods/ftbquests/events/$ObjectCompletedEvent$ChapterEvent"
import {$ObjectCompletedEvent, $ObjectCompletedEvent$Type} from "packages/dev/ftb/mods/ftbquests/events/$ObjectCompletedEvent"

export class $ObjectCompletedEvent$QuestEvent extends $ObjectCompletedEvent<($Quest)> {
static readonly "GENERIC": $Event<($EventActor<($ObjectCompletedEvent<(any)>)>)>
static readonly "FILE": $Event<($EventActor<($ObjectCompletedEvent$FileEvent)>)>
static readonly "CHAPTER": $Event<($EventActor<($ObjectCompletedEvent$ChapterEvent)>)>
static readonly "QUEST": $Event<($EventActor<($ObjectCompletedEvent$QuestEvent)>)>
static readonly "TASK": $Event<($EventActor<($ObjectCompletedEvent$TaskEvent)>)>

constructor(d: $QuestProgressEventData$Type<($Quest$Type)>)

public "getQuest"(): $Quest
get "quest"(): $Quest
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ObjectCompletedEvent$QuestEvent$Type = ($ObjectCompletedEvent$QuestEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ObjectCompletedEvent$QuestEvent_ = $ObjectCompletedEvent$QuestEvent$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/config/$ItemStackConfig" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Widget, $Widget$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Widget"
import {$OptionalLong, $OptionalLong$Type} from "packages/java/util/$OptionalLong"
import {$ConfigCallback, $ConfigCallback$Type} from "packages/dev/ftb/mods/ftblibrary/config/$ConfigCallback"
import {$MouseButton, $MouseButton$Type} from "packages/dev/ftb/mods/ftblibrary/ui/input/$MouseButton"
import {$ResourceConfigValue, $ResourceConfigValue$Type} from "packages/dev/ftb/mods/ftblibrary/config/$ResourceConfigValue"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$SelectableResource, $SelectableResource$Type} from "packages/dev/ftb/mods/ftblibrary/config/ui/$SelectableResource"

export class $ItemStackConfig extends $ResourceConfigValue<($ItemStack)> {
static readonly "NULL_TEXT": $Component
 "id": string

constructor(single: boolean, empty: boolean)
constructor(fixedSize: long)

public "getValue"(): $ItemStack
public "isEmpty"(): boolean
public "getResource"(): $SelectableResource<($ItemStack)>
public "copy"(value: $ItemStack$Type): $ItemStack
public "getStringForGUI"(v: $ItemStack$Type): $Component
public "onClicked"(clickedWidget: $Widget$Type, button: $MouseButton$Type, callback: $ConfigCallback$Type): void
public "allowEmptyResource"(): boolean
public "setResource"(selectedStack: $SelectableResource$Type<($ItemStack$Type)>): boolean
public "fixedResourceSize"(): $OptionalLong
get "value"(): $ItemStack
get "empty"(): boolean
get "resource"(): $SelectableResource<($ItemStack)>
set "resource"(value: $SelectableResource$Type<($ItemStack$Type)>)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ItemStackConfig$Type = ($ItemStackConfig);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ItemStackConfig_ = $ItemStackConfig$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/quest/reward/$RewardType" {
import {$Quest, $Quest$Type} from "packages/dev/ftb/mods/ftbquests/quest/$Quest"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$RewardType$GuiProvider, $RewardType$GuiProvider$Type} from "packages/dev/ftb/mods/ftbquests/quest/reward/$RewardType$GuiProvider"
import {$Icon, $Icon$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Icon"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$RewardType$Provider, $RewardType$Provider$Type} from "packages/dev/ftb/mods/ftbquests/quest/reward/$RewardType$Provider"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Reward, $Reward$Type} from "packages/dev/ftb/mods/ftbquests/quest/reward/$Reward"

export class $RewardType {
 "intId": integer

constructor(typeId: $ResourceLocation$Type, provider: $RewardType$Provider$Type, iconSupplier: $Supplier$Type<($Icon$Type)>)

public "getDisplayName"(): $Component
public "setDisplayName"(name: $Component$Type): $RewardType
public "setExcludeFromListRewards"(v: boolean): $RewardType
public "getExcludeFromListRewards"(): boolean
public "getTypeId"(): $ResourceLocation
public "createReward"(id: long, quest: $Quest$Type): $Reward
public static "createReward"(id: long, quest: $Quest$Type, typeId: string): $Reward
public "getTypeForNBT"(): string
public "getIconSupplier"(): $Icon
public "getGuiProvider"(): $RewardType$GuiProvider
public "setGuiProvider"(p: $RewardType$GuiProvider$Type): $RewardType
get "displayName"(): $Component
set "displayName"(value: $Component$Type)
set "excludeFromListRewards"(value: boolean)
get "excludeFromListRewards"(): boolean
get "typeId"(): $ResourceLocation
get "typeForNBT"(): string
get "iconSupplier"(): $Icon
get "guiProvider"(): $RewardType$GuiProvider
set "guiProvider"(value: $RewardType$GuiProvider$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RewardType$Type = ($RewardType);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RewardType_ = $RewardType$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/quest/task/$AdvancementTask" {
import {$Quest, $Quest$Type} from "packages/dev/ftb/mods/ftbquests/quest/$Quest"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$ConfigGroup, $ConfigGroup$Type} from "packages/dev/ftb/mods/ftblibrary/config/$ConfigGroup"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$TaskType, $TaskType$Type} from "packages/dev/ftb/mods/ftbquests/quest/task/$TaskType"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$Icon, $Icon$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Icon"
import {$AbstractBooleanTask, $AbstractBooleanTask$Type} from "packages/dev/ftb/mods/ftbquests/quest/task/$AbstractBooleanTask"
import {$TeamData, $TeamData$Type} from "packages/dev/ftb/mods/ftbquests/quest/$TeamData"

export class $AdvancementTask extends $AbstractBooleanTask {
readonly "id": long

constructor(id: long, quest: $Quest$Type)

public "getType"(): $TaskType
public "readData"(nbt: $CompoundTag$Type): void
public "getAltTitle"(): $Component
public "getAltIcon"(): $Icon
public "autoSubmitOnPlayerTick"(): integer
public "canSubmit"(teamData: $TeamData$Type, player: $ServerPlayer$Type): boolean
public "writeNetData"(buffer: $FriendlyByteBuf$Type): void
public "writeData"(nbt: $CompoundTag$Type): void
public "fillConfigGroup"(config: $ConfigGroup$Type): void
public "readNetData"(buffer: $FriendlyByteBuf$Type): void
get "type"(): $TaskType
get "altTitle"(): $Component
get "altIcon"(): $Icon
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AdvancementTask$Type = ($AdvancementTask);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AdvancementTask_ = $AdvancementTask$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/icon/$ImageCallback" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $ImageCallback<T> {

 "imageLoaded"(arg0: boolean, arg1: T): void

(arg0: boolean, arg1: T): void
}

export namespace $ImageCallback {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ImageCallback$Type<T> = ($ImageCallback<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ImageCallback_<T> = $ImageCallback$Type<(T)>;
}}
declare module "packages/dev/ftb/mods/ftblibrary/snbt/config/$NumberValue" {
import {$SNBTConfig, $SNBTConfig$Type} from "packages/dev/ftb/mods/ftblibrary/snbt/config/$SNBTConfig"
import {$SNBTCompoundTag, $SNBTCompoundTag$Type} from "packages/dev/ftb/mods/ftblibrary/snbt/$SNBTCompoundTag"
import {$BaseValue, $BaseValue$Type} from "packages/dev/ftb/mods/ftblibrary/snbt/config/$BaseValue"

export class $NumberValue<T extends number> extends $BaseValue<(T)> {
readonly "parent": $SNBTConfig
readonly "key": string
readonly "defaultValue": T


public "write"(tag: $SNBTCompoundTag$Type): void
public "range"<E extends $BaseValue<(T)>>(min: T, max: T): E
public "fader"<E extends $BaseValue<(T)>>(): E
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $NumberValue$Type<T> = ($NumberValue<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $NumberValue_<T> = $NumberValue$Type<(T)>;
}}
declare module "packages/dev/ftb/mods/ftbquests/quest/task/$TaskType$Provider" {
import {$Quest, $Quest$Type} from "packages/dev/ftb/mods/ftbquests/quest/$Quest"
import {$Task, $Task$Type} from "packages/dev/ftb/mods/ftbquests/quest/task/$Task"

export interface $TaskType$Provider {

 "create"(arg0: long, arg1: $Quest$Type): $Task

(arg0: long, arg1: $Quest$Type): $Task
}

export namespace $TaskType$Provider {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TaskType$Provider$Type = ($TaskType$Provider);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TaskType$Provider_ = $TaskType$Provider$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/quest/theme/property/$IntProperty" {
import {$ThemeProperty, $ThemeProperty$Type} from "packages/dev/ftb/mods/ftbquests/quest/theme/property/$ThemeProperty"

export class $IntProperty extends $ThemeProperty<(integer)> {
readonly "min": integer
readonly "max": integer

constructor(n: string, mn: integer, mx: integer)
constructor(n: string)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IntProperty$Type = ($IntProperty);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IntProperty_ = $IntProperty$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/quest/$QuestLink" {
import {$Quest, $Quest$Type} from "packages/dev/ftb/mods/ftbquests/quest/$Quest"
import {$BaseQuestFile, $BaseQuestFile$Type} from "packages/dev/ftb/mods/ftbquests/quest/$BaseQuestFile"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$ConfigGroup, $ConfigGroup$Type} from "packages/dev/ftb/mods/ftblibrary/config/$ConfigGroup"
import {$QuestObjectType, $QuestObjectType$Type} from "packages/dev/ftb/mods/ftbquests/quest/$QuestObjectType"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Icon, $Icon$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Icon"
import {$Movable, $Movable$Type} from "packages/dev/ftb/mods/ftbquests/quest/$Movable"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$TeamData, $TeamData$Type} from "packages/dev/ftb/mods/ftbquests/quest/$TeamData"
import {$QuestObject, $QuestObject$Type} from "packages/dev/ftb/mods/ftbquests/quest/$QuestObject"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$Chapter, $Chapter$Type} from "packages/dev/ftb/mods/ftbquests/quest/$Chapter"

export class $QuestLink extends $QuestObject implements $Movable {
readonly "id": long

constructor(id: long, chapter: $Chapter$Type, linkId: long)

public "move"(to: $Chapter$Type, x: double, y: double): void
public "getObjectType"(): $QuestObjectType
public "getShape"(): string
public "getQuest"(): $Optional<($Quest)>
public "deleteSelf"(): void
public "getQuestFile"(): $BaseQuestFile
public "getY"(): double
public "editedFromGUI"(): void
public "getX"(): double
public "isVisible"(data: $TeamData$Type): boolean
public "getWidth"(): double
public "getHeight"(): double
public "readData"(nbt: $CompoundTag$Type): void
public "getAltTitle"(): $Component
public "getAltIcon"(): $Icon
public "onMoved"(newX: double, newY: double, newChapterId: long): void
public "getParentID"(): long
public "setPosition"(qx: double, qy: double): void
public "getRelativeProgressFromChildren"(data: $TeamData$Type): integer
public "onCreated"(): void
public "getChapter"(): $Chapter
public "getMovableID"(): long
public "copyToClipboard"(): void
public "linksTo"(quest: $Quest$Type): boolean
public "writeNetData"(buffer: $FriendlyByteBuf$Type): void
public "writeData"(nbt: $CompoundTag$Type): void
public "fillConfigGroup"(config: $ConfigGroup$Type): void
public "readNetData"(buffer: $FriendlyByteBuf$Type): void
public "getTitle"(): $Component
public "drawMoved"(graphics: $GuiGraphics$Type): void
get "objectType"(): $QuestObjectType
get "shape"(): string
get "quest"(): $Optional<($Quest)>
get "questFile"(): $BaseQuestFile
get "y"(): double
get "x"(): double
get "width"(): double
get "height"(): double
get "altTitle"(): $Component
get "altIcon"(): $Icon
get "parentID"(): long
get "chapter"(): $Chapter
get "movableID"(): long
get "title"(): $Component
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $QuestLink$Type = ($QuestLink);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $QuestLink_ = $QuestLink$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/net/$ObjectStartedResetMessage" {
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$NetworkManager$PacketContext, $NetworkManager$PacketContext$Type} from "packages/dev/architectury/networking/$NetworkManager$PacketContext"
import {$BaseS2CMessage, $BaseS2CMessage$Type} from "packages/dev/architectury/networking/simple/$BaseS2CMessage"
import {$MessageType, $MessageType$Type} from "packages/dev/architectury/networking/simple/$MessageType"

export class $ObjectStartedResetMessage extends $BaseS2CMessage {

constructor(buffer: $FriendlyByteBuf$Type)
constructor(t: $UUID$Type, i: long)

public "write"(buffer: $FriendlyByteBuf$Type): void
public "getType"(): $MessageType
public "handle"(context: $NetworkManager$PacketContext$Type): void
get "type"(): $MessageType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ObjectStartedResetMessage$Type = ($ObjectStartedResetMessage);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ObjectStartedResetMessage_ = $ObjectStartedResetMessage$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/ui/$CustomClickEvent" {
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$Event, $Event$Type} from "packages/dev/architectury/event/$Event"
import {$EventActor, $EventActor$Type} from "packages/dev/architectury/event/$EventActor"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $CustomClickEvent extends $Record {
static readonly "EVENT": $Event<($EventActor<($CustomClickEvent)>)>

constructor(id: $ResourceLocation$Type)

public "equals"(o: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "id"(): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CustomClickEvent$Type = ($CustomClickEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CustomClickEvent_ = $CustomClickEvent$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/nbtedit/$NBTEditorScreen$NBTPanel" {
import {$Panel, $Panel$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Panel"
import {$NBTEditorScreen, $NBTEditorScreen$Type} from "packages/dev/ftb/mods/ftblibrary/nbtedit/$NBTEditorScreen"

export class $NBTEditorScreen$NBTPanel extends $Panel {
 "posX": integer
 "posY": integer
 "width": integer
 "height": integer

constructor(this$0: $NBTEditorScreen$Type)

public "alignWidgets"(): void
public "addWidgets"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $NBTEditorScreen$NBTPanel$Type = ($NBTEditorScreen$NBTPanel);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $NBTEditorScreen$NBTPanel_ = $NBTEditorScreen$NBTPanel$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/net/$CopyChapterImageMessage" {
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$NetworkManager$PacketContext, $NetworkManager$PacketContext$Type} from "packages/dev/architectury/networking/$NetworkManager$PacketContext"
import {$BaseC2SMessage, $BaseC2SMessage$Type} from "packages/dev/architectury/networking/simple/$BaseC2SMessage"
import {$Chapter, $Chapter$Type} from "packages/dev/ftb/mods/ftbquests/quest/$Chapter"
import {$ChapterImage, $ChapterImage$Type} from "packages/dev/ftb/mods/ftbquests/quest/$ChapterImage"
import {$MessageType, $MessageType$Type} from "packages/dev/architectury/networking/simple/$MessageType"

export class $CopyChapterImageMessage extends $BaseC2SMessage {

constructor(toCopy: $ChapterImage$Type, chapter: $Chapter$Type, newX: double, newY: double)
constructor(buf: $FriendlyByteBuf$Type)

public "write"(buf: $FriendlyByteBuf$Type): void
public "getType"(): $MessageType
public "handle"(context: $NetworkManager$PacketContext$Type): void
get "type"(): $MessageType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CopyChapterImageMessage$Type = ($CopyChapterImageMessage);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CopyChapterImageMessage_ = $CopyChapterImageMessage$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/config/$ConfigGroup" {
import {$Comparable, $Comparable$Type} from "packages/java/lang/$Comparable"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$ConfigCallback, $ConfigCallback$Type} from "packages/dev/ftb/mods/ftblibrary/config/$ConfigCallback"
import {$StringConfig, $StringConfig$Type} from "packages/dev/ftb/mods/ftblibrary/config/$StringConfig"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$BooleanConfig, $BooleanConfig$Type} from "packages/dev/ftb/mods/ftblibrary/config/$BooleanConfig"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$LongConfig, $LongConfig$Type} from "packages/dev/ftb/mods/ftblibrary/config/$LongConfig"
import {$Tristate, $Tristate$Type} from "packages/dev/ftb/mods/ftblibrary/config/$Tristate"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Pattern, $Pattern$Type} from "packages/java/util/regex/$Pattern"
import {$ImageResourceConfig, $ImageResourceConfig$Type} from "packages/dev/ftb/mods/ftblibrary/config/$ImageResourceConfig"
import {$List, $List$Type} from "packages/java/util/$List"
import {$DoubleConfig, $DoubleConfig$Type} from "packages/dev/ftb/mods/ftblibrary/config/$DoubleConfig"
import {$ItemStackConfig, $ItemStackConfig$Type} from "packages/dev/ftb/mods/ftblibrary/config/$ItemStackConfig"
import {$Color4I, $Color4I$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Color4I"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$ConfigValue, $ConfigValue$Type} from "packages/dev/ftb/mods/ftblibrary/config/$ConfigValue"
import {$FluidStack, $FluidStack$Type} from "packages/dev/architectury/fluid/$FluidStack"
import {$ListConfig, $ListConfig$Type} from "packages/dev/ftb/mods/ftblibrary/config/$ListConfig"
import {$NameMap, $NameMap$Type} from "packages/dev/ftb/mods/ftblibrary/config/$NameMap"
import {$FluidConfig, $FluidConfig$Type} from "packages/dev/ftb/mods/ftblibrary/config/$FluidConfig"
import {$EnumConfig, $EnumConfig$Type} from "packages/dev/ftb/mods/ftblibrary/config/$EnumConfig"
import {$ColorConfig, $ColorConfig$Type} from "packages/dev/ftb/mods/ftblibrary/config/$ColorConfig"
import {$IntConfig, $IntConfig$Type} from "packages/dev/ftb/mods/ftblibrary/config/$IntConfig"

export class $ConfigGroup implements $Comparable<($ConfigGroup)> {

constructor(id: string, savedCallback: $ConfigCallback$Type)
constructor(id: string)

public "getName"(): $Component
public "add"<T, CV extends $ConfigValue<(T)>>(id: string, type: CV, value: T, setter: $Consumer$Type<(T)>, defaultValue: T): CV
public "compareTo"(o: $ConfigGroup$Type): integer
public "getParent"(): $ConfigGroup
public "getId"(): string
public "save"(accepted: boolean): void
public "getPath"(): string
public "addLong"(id: string, value: long, setter: $Consumer$Type<(long)>, def: long, min: long, max: long): $LongConfig
public "addDouble"(id: string, value: double, setter: $Consumer$Type<(double)>, def: double, min: double, max: double): $DoubleConfig
public "addEnum"<E>(id: string, value: E, setter: $Consumer$Type<(E)>, nameMap: $NameMap$Type<(E)>): $EnumConfig<(E)>
public "addEnum"<E>(id: string, value: E, setter: $Consumer$Type<(E)>, nameMap: $NameMap$Type<(E)>, def: E): $EnumConfig<(E)>
public "setNameKey"(key: string): $ConfigGroup
public "getNameKey"(): string
public "getTooltip"(): $Component
public "addItemStack"(id: string, value: $ItemStack$Type, setter: $Consumer$Type<($ItemStack$Type)>, def: $ItemStack$Type, singleItem: boolean, allowEmpty: boolean): $ItemStackConfig
public "addItemStack"(id: string, value: $ItemStack$Type, setter: $Consumer$Type<($ItemStack$Type)>, def: $ItemStack$Type, fixedSize: integer): $ItemStackConfig
public "addBool"(id: string, value: boolean, setter: $Consumer$Type<(boolean)>, def: boolean): $BooleanConfig
public "addString"(id: string, value: string, setter: $Consumer$Type<(string)>, def: string, pattern: $Pattern$Type): $StringConfig
public "addString"(id: string, value: string, setter: $Consumer$Type<(string)>, def: string): $StringConfig
public "getOrCreateSubgroup"(id: string): $ConfigGroup
public "getOrCreateSubgroup"(id: string, displayOrder: integer): $ConfigGroup
public "addList"<E, CV extends $ConfigValue<(E)>>(id: string, c: $List$Type<(E)>, type: CV, def: E): $ListConfig<(E), (CV)>
public "addInt"(id: string, value: integer, setter: $Consumer$Type<(integer)>, def: integer, min: integer, max: integer): $IntConfig
public "addColor"(id: string, value: $Color4I$Type, setter: $Consumer$Type<($Color4I$Type)>, def: $Color4I$Type): $ColorConfig
public "addTristate"(id: string, value: $Tristate$Type, setter: $Consumer$Type<($Tristate$Type)>): $EnumConfig<($Tristate)>
public "addTristate"(id: string, value: $Tristate$Type, setter: $Consumer$Type<($Tristate$Type)>, def: $Tristate$Type): $EnumConfig<($Tristate)>
public "getSubgroups"(): $Collection<($ConfigGroup)>
public "addImage"(id: string, value: $ResourceLocation$Type, setter: $Consumer$Type<($ResourceLocation$Type)>, def: $ResourceLocation$Type): $ImageResourceConfig
public "addFluidStack"(id: string, value: $FluidStack$Type, setter: $Consumer$Type<($FluidStack$Type)>, def: $FluidStack$Type, fixedSize: long): $FluidConfig
public "addFluidStack"(id: string, value: $FluidStack$Type, setter: $Consumer$Type<($FluidStack$Type)>, def: $FluidStack$Type, allowEmpty: boolean): $FluidConfig
public "getValues"(): $Collection<($ConfigValue<(any)>)>
get "name"(): $Component
get "parent"(): $ConfigGroup
get "id"(): string
get "path"(): string
set "nameKey"(value: string)
get "nameKey"(): string
get "tooltip"(): $Component
get "subgroups"(): $Collection<($ConfigGroup)>
get "values"(): $Collection<($ConfigValue<(any)>)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ConfigGroup$Type = ($ConfigGroup);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ConfigGroup_ = $ConfigGroup$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/forge/$FTBLibraryForge" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $FTBLibraryForge {

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FTBLibraryForge$Type = ($FTBLibraryForge);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FTBLibraryForge_ = $FTBLibraryForge$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/client/gui/quests/$ExpandChaptersButton" {
import {$QuestScreen, $QuestScreen$Type} from "packages/dev/ftb/mods/ftbquests/client/gui/quests/$QuestScreen"
import {$Widget, $Widget$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Widget"
import {$Theme, $Theme$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Theme"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $ExpandChaptersButton extends $Widget {
 "posX": integer
 "posY": integer
 "width": integer
 "height": integer

constructor(panel: $QuestScreen$Type)

public "draw"(graphics: $GuiGraphics$Type, theme: $Theme$Type, x: integer, y: integer, w: integer, h: integer): void
public "updateMouseOver"(mouseX: integer, mouseY: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ExpandChaptersButton$Type = ($ExpandChaptersButton);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ExpandChaptersButton_ = $ExpandChaptersButton$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/net/$MoveChapterGroupResponseMessage" {
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$NetworkManager$PacketContext, $NetworkManager$PacketContext$Type} from "packages/dev/architectury/networking/$NetworkManager$PacketContext"
import {$BaseS2CMessage, $BaseS2CMessage$Type} from "packages/dev/architectury/networking/simple/$BaseS2CMessage"
import {$MessageType, $MessageType$Type} from "packages/dev/architectury/networking/simple/$MessageType"

export class $MoveChapterGroupResponseMessage extends $BaseS2CMessage {

constructor(i: long, u: boolean)

public "write"(buffer: $FriendlyByteBuf$Type): void
public "getType"(): $MessageType
public "handle"(context: $NetworkManager$PacketContext$Type): void
get "type"(): $MessageType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MoveChapterGroupResponseMessage$Type = ($MoveChapterGroupResponseMessage);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MoveChapterGroupResponseMessage_ = $MoveChapterGroupResponseMessage$Type;
}}
declare module "packages/dev/ftb/mods/ftblibrary/util/client/$PositionedIngredient" {
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$Widget, $Widget$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Widget"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$Rect2i, $Rect2i$Type} from "packages/net/minecraft/client/renderer/$Rect2i"

export class $PositionedIngredient extends $Record {

constructor(ingredient: any, area: $Rect2i$Type, tooltip: boolean)

public "equals"(o: any): boolean
public "toString"(): string
public "hashCode"(): integer
public static "of"(ingredient: any, widget: $Widget$Type): $Optional<($PositionedIngredient)>
public static "of"(ingredient: any, widget: $Widget$Type, tooltip: boolean): $Optional<($PositionedIngredient)>
public "area"(): $Rect2i
public "tooltip"(): boolean
public "ingredient"(): any
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PositionedIngredient$Type = ($PositionedIngredient);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PositionedIngredient_ = $PositionedIngredient$Type;
}}
declare module "packages/dev/ftb/mods/ftbquests/client/gui/quests/$ViewQuestPanel" {
import {$Quest, $Quest$Type} from "packages/dev/ftb/mods/ftbquests/quest/$Quest"
import {$ModalPanel, $ModalPanel$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$ModalPanel"
import {$QuestScreen, $QuestScreen$Type} from "packages/dev/ftb/mods/ftbquests/client/gui/quests/$QuestScreen"
import {$Widget, $Widget$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Widget"
import {$Icon, $Icon$Type} from "packages/dev/ftb/mods/ftblibrary/icon/$Icon"
import {$Theme, $Theme$Type} from "packages/dev/ftb/mods/ftblibrary/ui/$Theme"
import {$Key, $Key$Type} from "packages/dev/ftb/mods/ftblibrary/ui/input/$Key"
import {$MouseButton, $MouseButton$Type} from "packages/dev/ftb/mods/ftblibrary/ui/input/$MouseButton"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $ViewQuestPanel extends $ModalPanel {
static readonly "PAGEBREAK_ICON": $Icon
 "posX": integer
 "posY": integer
 "width": integer
 "height": integer

constructor(questScreen: $QuestScreen$Type)

public "getViewedQuest"(): $Quest
public "tick"(): void
public "alignWidgets"(): void
public "addWidgets"(): void
public "draw"(graphics: $GuiGraphics$Type, theme: $Theme$Type, x: integer, y: integer, w: integer, h: integer): void
public "checkMouseOver"(mouseX: integer, mouseY: integer): boolean
public "onClosed"(): void
public "mousePressed"(button: $MouseButton$Type): boolean
public "editDescLine"(clickedWidget: $Widget$Type, line: integer, context: boolean, type: any): void
public "drawBackground"(graphics: $GuiGraphics$Type, theme: $Theme$Type, x: integer, y: integer, w: integer, h: integer): void
public "canEdit"(): boolean
public "mouseScrolled"(scroll: double): boolean
public "keyReleased"(key: $Key$Type): void
public "setViewedQuest"(newQuest: $Quest$Type): void
get "viewedQuest"(): $Quest
set "viewedQuest"(value: $Quest$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ViewQuestPanel$Type = ($ViewQuestPanel);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ViewQuestPanel_ = $ViewQuestPanel$Type;
}}
