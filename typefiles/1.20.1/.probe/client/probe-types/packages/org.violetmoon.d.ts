declare module "packages/org/violetmoon/quark/integration/jei/$SlabToBlockExtension" {
import {$SlabToBlockRecipe, $SlabToBlockRecipe$Type} from "packages/org/violetmoon/quark/content/tweaks/recipe/$SlabToBlockRecipe"
import {$IRecipeLayoutBuilder, $IRecipeLayoutBuilder$Type} from "packages/mezz/jei/api/gui/builder/$IRecipeLayoutBuilder"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$ICraftingCategoryExtension, $ICraftingCategoryExtension$Type} from "packages/mezz/jei/api/recipe/category/extensions/vanilla/crafting/$ICraftingCategoryExtension"
import {$List, $List$Type} from "packages/java/util/$List"
import {$IFocusGroup, $IFocusGroup$Type} from "packages/mezz/jei/api/recipe/$IFocusGroup"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$ICraftingGridHelper, $ICraftingGridHelper$Type} from "packages/mezz/jei/api/gui/ingredient/$ICraftingGridHelper"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$InputConstants$Key, $InputConstants$Key$Type} from "packages/com/mojang/blaze3d/platform/$InputConstants$Key"

export class $SlabToBlockExtension extends $Record implements $ICraftingCategoryExtension {

constructor(recipe: $SlabToBlockRecipe$Type)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "recipe"(): $SlabToBlockRecipe
public "setRecipe"(arg0: $IRecipeLayoutBuilder$Type, arg1: $ICraftingGridHelper$Type, arg2: $IFocusGroup$Type): void
public "getRegistryName"(): $ResourceLocation
public "getWidth"(): integer
public "getHeight"(): integer
public "drawInfo"(arg0: integer, arg1: integer, arg2: $GuiGraphics$Type, arg3: double, arg4: double): void
public "handleInput"(arg0: double, arg1: double, arg2: $InputConstants$Key$Type): boolean
public "getTooltipStrings"(arg0: double, arg1: double): $List<($Component)>
get "registryName"(): $ResourceLocation
get "width"(): integer
get "height"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SlabToBlockExtension$Type = ($SlabToBlockExtension);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SlabToBlockExtension_ = $SlabToBlockExtension$Type;
}}
declare module "packages/org/violetmoon/zetaimplforge/event/play/entity/player/$ForgeZRightClickBlock" {
import {$ZRightClickBlock, $ZRightClickBlock$Type} from "packages/org/violetmoon/zeta/event/play/entity/player/$ZRightClickBlock"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$ZResult, $ZResult$Type} from "packages/org/violetmoon/zeta/event/bus/$ZResult"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$PlayerInteractEvent$RightClickBlock, $PlayerInteractEvent$RightClickBlock$Type} from "packages/net/minecraftforge/event/entity/player/$PlayerInteractEvent$RightClickBlock"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $ForgeZRightClickBlock implements $ZRightClickBlock {

constructor(arg0: $PlayerInteractEvent$RightClickBlock$Type)

public "setResult"(arg0: $ZResult$Type): void
public "getLevel"(): $Level
public "getResult"(): $ZResult
public "setCanceled"(arg0: boolean): void
public "isCanceled"(): boolean
public "getHitVec"(): $BlockHitResult
public "getFace"(): $Direction
public "getHand"(): $InteractionHand
public "getEntity"(): $Player
public "getItemStack"(): $ItemStack
public "getUseBlock"(): $ZResult
public "getPos"(): $BlockPos
public "setCancellationResult"(arg0: $InteractionResult$Type): void
public "cancel"(): void
public "getPlayer"(): $Player
set "result"(value: $ZResult$Type)
get "level"(): $Level
get "result"(): $ZResult
set "canceled"(value: boolean)
get "canceled"(): boolean
get "hitVec"(): $BlockHitResult
get "face"(): $Direction
get "hand"(): $InteractionHand
get "entity"(): $Player
get "itemStack"(): $ItemStack
get "useBlock"(): $ZResult
get "pos"(): $BlockPos
set "cancellationResult"(value: $InteractionResult$Type)
get "player"(): $Player
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ForgeZRightClickBlock$Type = ($ForgeZRightClickBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ForgeZRightClickBlock_ = $ForgeZRightClickBlock$Type;
}}
declare module "packages/org/violetmoon/quark/base/handler/$QuarkRemapHandler" {
import {$MissingMappingsEvent, $MissingMappingsEvent$Type} from "packages/net/minecraftforge/registries/$MissingMappingsEvent"

export class $QuarkRemapHandler {

constructor()

public static "onRemapBlocks"(arg0: $MissingMappingsEvent$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $QuarkRemapHandler$Type = ($QuarkRemapHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $QuarkRemapHandler_ = $QuarkRemapHandler$Type;
}}
declare module "packages/org/violetmoon/zetaimplforge/world/$ZetaSpawnModifier" {
import {$ModifiableBiomeInfo$BiomeInfo$Builder, $ModifiableBiomeInfo$BiomeInfo$Builder$Type} from "packages/net/minecraftforge/common/world/$ModifiableBiomeInfo$BiomeInfo$Builder"
import {$Holder, $Holder$Type} from "packages/net/minecraft/core/$Holder"
import {$EntitySpawnHandler, $EntitySpawnHandler$Type} from "packages/org/violetmoon/zeta/world/$EntitySpawnHandler"
import {$Biome, $Biome$Type} from "packages/net/minecraft/world/level/biome/$Biome"

export class $ZetaSpawnModifier {

constructor()

public static "modifyBiome"(arg0: $Holder$Type<($Biome$Type)>, arg1: $EntitySpawnHandler$Type, arg2: $ModifiableBiomeInfo$BiomeInfo$Builder$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZetaSpawnModifier$Type = ($ZetaSpawnModifier);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZetaSpawnModifier_ = $ZetaSpawnModifier$Type;
}}
declare module "packages/org/violetmoon/zeta/client/event/play/$ZClientTick" {
import {$ZPhase, $ZPhase$Type} from "packages/org/violetmoon/zeta/event/bus/$ZPhase"
import {$IZetaPlayEvent, $IZetaPlayEvent$Type} from "packages/org/violetmoon/zeta/event/bus/$IZetaPlayEvent"

export interface $ZClientTick extends $IZetaPlayEvent {

 "getPhase"(): $ZPhase

(): $ZPhase
}

export namespace $ZClientTick {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZClientTick$Type = ($ZClientTick);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZClientTick_ = $ZClientTick$Type;
}}
declare module "packages/org/violetmoon/quark/content/mobs/client/layer/$FoxhoundCollarLayer" {
import {$RenderLayer, $RenderLayer$Type} from "packages/net/minecraft/client/renderer/entity/layers/$RenderLayer"
import {$RenderLayerParent, $RenderLayerParent$Type} from "packages/net/minecraft/client/renderer/entity/$RenderLayerParent"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$Foxhound, $Foxhound$Type} from "packages/org/violetmoon/quark/content/mobs/entity/$Foxhound"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$FoxhoundModel, $FoxhoundModel$Type} from "packages/org/violetmoon/quark/content/mobs/client/model/$FoxhoundModel"

export class $FoxhoundCollarLayer extends $RenderLayer<($Foxhound), ($FoxhoundModel)> {

constructor(arg0: $RenderLayerParent$Type<($Foxhound$Type), ($FoxhoundModel$Type)>)

public "render"(arg0: $PoseStack$Type, arg1: $MultiBufferSource$Type, arg2: integer, arg3: $Foxhound$Type, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: float): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FoxhoundCollarLayer$Type = ($FoxhoundCollarLayer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FoxhoundCollarLayer_ = $FoxhoundCollarLayer$Type;
}}
declare module "packages/org/violetmoon/zeta/mixin/plugin/$DelegateInterfaceMixin" {
import {$Annotation, $Annotation$Type} from "packages/java/lang/annotation/$Annotation"
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$DelegateReturnValueModifier, $DelegateReturnValueModifier$Type} from "packages/org/violetmoon/zeta/mixin/plugin/$DelegateReturnValueModifier"

export interface $DelegateInterfaceMixin extends $Annotation {

 "methods"(): ($DelegateReturnValueModifier)[]
 "delegate"(): $Class<(any)>
 "equals"(arg0: any): boolean
 "toString"(): string
 "hashCode"(): integer
 "annotationType"(): $Class<(any)>
}

export namespace $DelegateInterfaceMixin {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DelegateInterfaceMixin$Type = ($DelegateInterfaceMixin);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DelegateInterfaceMixin_ = $DelegateInterfaceMixin$Type;
}}
declare module "packages/org/violetmoon/quark/api/event/$ModuleLoadedEvent" {
import {$ListenerList, $ListenerList$Type} from "packages/net/minecraftforge/eventbus/$ListenerList"
import {$QuarkModuleEvent, $QuarkModuleEvent$Type} from "packages/org/violetmoon/quark/api/event/$QuarkModuleEvent"

export class $ModuleLoadedEvent extends $QuarkModuleEvent {
readonly "eventName": string

constructor(arg0: string)
constructor()

public "getListenerList"(): $ListenerList
get "listenerList"(): $ListenerList
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModuleLoadedEvent$Type = ($ModuleLoadedEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModuleLoadedEvent_ = $ModuleLoadedEvent$Type;
}}
declare module "packages/org/violetmoon/zeta/advancement/modifier/$FishyBusinessModifier" {
import {$AdvancementModifier, $AdvancementModifier$Type} from "packages/org/violetmoon/zeta/advancement/$AdvancementModifier"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$IMutableAdvancement, $IMutableAdvancement$Type} from "packages/org/violetmoon/zeta/api/$IMutableAdvancement"
import {$ItemLike, $ItemLike$Type} from "packages/net/minecraft/world/level/$ItemLike"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $FishyBusinessModifier extends $AdvancementModifier {
readonly "module": $ZetaModule

constructor(arg0: $ZetaModule$Type, arg1: $Set$Type<($ItemLike$Type)>)

public "apply"(arg0: $ResourceLocation$Type, arg1: $IMutableAdvancement$Type): boolean
public "getTargets"(): $Set<($ResourceLocation)>
get "targets"(): $Set<($ResourceLocation)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FishyBusinessModifier$Type = ($FishyBusinessModifier);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FishyBusinessModifier_ = $FishyBusinessModifier$Type;
}}
declare module "packages/org/violetmoon/quark/mixin/mixins/accessor/$AccessorAbstractChestedHorse" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $AccessorAbstractChestedHorse {

 "quark$playChestEquipsSound"(): void

(): void
}

export namespace $AccessorAbstractChestedHorse {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AccessorAbstractChestedHorse$Type = ($AccessorAbstractChestedHorse);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AccessorAbstractChestedHorse_ = $AccessorAbstractChestedHorse$Type;
}}
declare module "packages/org/violetmoon/zeta/item/$ZetaArmorItem" {
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Equipable, $Equipable$Type} from "packages/net/minecraft/world/item/$Equipable"
import {$IForgeItem, $IForgeItem$Type} from "packages/net/minecraftforge/common/extensions/$IForgeItem"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$RecipeType, $RecipeType$Type} from "packages/net/minecraft/world/item/crafting/$RecipeType"
import {$ToolAction, $ToolAction$Type} from "packages/net/minecraftforge/common/$ToolAction"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$ArmorItem$Type, $ArmorItem$Type$Type} from "packages/net/minecraft/world/item/$ArmorItem$Type"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$Multimap, $Multimap$Type} from "packages/com/google/common/collect/$Multimap"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$IZetaItemExtensions, $IZetaItemExtensions$Type} from "packages/org/violetmoon/zeta/item/ext/$IZetaItemExtensions"
import {$EnderMan, $EnderMan$Type} from "packages/net/minecraft/world/entity/monster/$EnderMan"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$UseOnContext, $UseOnContext$Type} from "packages/net/minecraft/world/item/context/$UseOnContext"
import {$Enchantment, $Enchantment$Type} from "packages/net/minecraft/world/item/enchantment/$Enchantment"
import {$ArmorMaterial, $ArmorMaterial$Type} from "packages/net/minecraft/world/item/$ArmorMaterial"
import {$Attribute, $Attribute$Type} from "packages/net/minecraft/world/entity/ai/attributes/$Attribute"
import {$ArmorItem, $ArmorItem$Type} from "packages/net/minecraft/world/item/$ArmorItem"
import {$AttributeModifier, $AttributeModifier$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeModifier"
import {$DispenseItemBehavior, $DispenseItemBehavior$Type} from "packages/net/minecraft/core/dispenser/$DispenseItemBehavior"
import {$ItemEntity, $ItemEntity$Type} from "packages/net/minecraft/world/entity/item/$ItemEntity"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $ZetaArmorItem extends $ArmorItem implements $IZetaItemExtensions, $IForgeItem {
static readonly "DISPENSE_ITEM_BEHAVIOR": $DispenseItemBehavior
 "defaultModifiers": $Multimap<($Attribute), ($AttributeModifier)>
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $ArmorMaterial$Type, arg1: $ArmorItem$Type$Type, arg2: $Item$Properties$Type)

public "getEnchantmentLevel"(arg0: $ItemStack$Type, arg1: $Enchantment$Type): integer
public "canPerformAction"(arg0: $ItemStack$Type, arg1: $ToolAction$Type): boolean
public "canElytraFly"(arg0: $ItemStack$Type, arg1: $LivingEntity$Type): boolean
public "shouldCauseReequipAnimation"(arg0: $ItemStack$Type, arg1: $ItemStack$Type, arg2: boolean): boolean
public "getEnchantmentValue"(arg0: $ItemStack$Type): integer
public "getDefaultTooltipHideFlags"(arg0: $ItemStack$Type): integer
public "canApplyAtEnchantingTable"(arg0: $ItemStack$Type, arg1: $Enchantment$Type): boolean
public "isRepairable"(arg0: $ItemStack$Type): boolean
public "getMaxDamage"(arg0: $ItemStack$Type): integer
public "onItemUseFirst"(arg0: $ItemStack$Type, arg1: $UseOnContext$Type): $InteractionResult
public "isBookEnchantable"(arg0: $ItemStack$Type, arg1: $ItemStack$Type): boolean
public "getArmorTexture"(arg0: $ItemStack$Type, arg1: $Entity$Type, arg2: $EquipmentSlot$Type, arg3: string): string
public "doesSneakBypassUse"(arg0: $ItemStack$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $Player$Type): boolean
public "canEquip"(arg0: $ItemStack$Type, arg1: $EquipmentSlot$Type, arg2: $Entity$Type): boolean
public "damageItem"(arg0: $ItemStack$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $Consumer$Type<(any)>): integer
public "getBurnTime"(arg0: $ItemStack$Type, arg1: $RecipeType$Type<(any)>): integer
public "isEnderMask"(arg0: $ItemStack$Type, arg1: $Player$Type, arg2: $EnderMan$Type): boolean
public "getAllEnchantments"(arg0: $ItemStack$Type): $Map<(any), (any)>
public "onEntityItemUpdate"(arg0: $ItemStack$Type, arg1: $ItemEntity$Type): boolean
public "isRepairableZeta"(arg0: $ItemStack$Type): boolean
public "onItemUseFirstZeta"(arg0: $ItemStack$Type, arg1: $UseOnContext$Type): $InteractionResult
public "getBurnTimeZeta"(arg0: $ItemStack$Type, arg1: $RecipeType$Type<(any)>): integer
public "damageItemZeta"<T extends $LivingEntity>(arg0: $ItemStack$Type, arg1: integer, arg2: T, arg3: $Consumer$Type<(T)>): integer
public "isEnderMaskZeta"(arg0: $ItemStack$Type, arg1: $Player$Type, arg2: $EnderMan$Type): boolean
public "canEquipZeta"(arg0: $ItemStack$Type, arg1: $EquipmentSlot$Type, arg2: $Entity$Type): boolean
public "canElytraFlyZeta"(arg0: $ItemStack$Type, arg1: $LivingEntity$Type): boolean
public "canShearZeta"(arg0: $ItemStack$Type): boolean
public "getMaxDamageZeta"(arg0: $ItemStack$Type): integer
public "getEnchantmentLevelZeta"(arg0: $ItemStack$Type, arg1: $Enchantment$Type): integer
public "getAllEnchantmentsZeta"(arg0: $ItemStack$Type): $Map<($Enchantment), (integer)>
public "getEnchantmentValueZeta"(arg0: $ItemStack$Type): integer
public "shouldCauseReequipAnimationZeta"(arg0: $ItemStack$Type, arg1: $ItemStack$Type, arg2: boolean): boolean
public "getArmorTextureZeta"(arg0: $ItemStack$Type, arg1: $Entity$Type, arg2: $EquipmentSlot$Type, arg3: string): string
public "canApplyAtEnchantingTableZeta"(arg0: $ItemStack$Type, arg1: $Enchantment$Type): boolean
public "doesSneakBypassUseZeta"(arg0: $ItemStack$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $Player$Type): boolean
public "getDefaultTooltipHideFlagsZeta"(arg0: $ItemStack$Type): integer
public "onEntityItemUpdateZeta"(arg0: $ItemStack$Type, arg1: $ItemEntity$Type): boolean
public "isBookEnchantableZeta"(arg0: $ItemStack$Type, arg1: $ItemStack$Type): boolean
public static "get"(arg0: $ItemStack$Type): $Equipable
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZetaArmorItem$Type = ($ZetaArmorItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZetaArmorItem_ = $ZetaArmorItem$Type;
}}
declare module "packages/org/violetmoon/quark/content/tools/module/$PathfinderMapsModule$TradeInfo" {
import {$Holder, $Holder$Type} from "packages/net/minecraft/core/$Holder"
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$ConfigFlagManager, $ConfigFlagManager$Type} from "packages/org/violetmoon/zeta/config/$ConfigFlagManager"
import {$Biome, $Biome$Type} from "packages/net/minecraft/world/level/biome/$Biome"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$IConfigType, $IConfigType$Type} from "packages/org/violetmoon/zeta/config/type/$IConfigType"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $PathfinderMapsModule$TradeInfo implements $Predicate<($Holder<($Biome)>)>, $IConfigType {
readonly "biome": $ResourceLocation
readonly "color": integer
 "enabled": boolean
readonly "level": integer
readonly "minPrice": integer
readonly "maxPrice": integer


public "test"(arg0: $Holder$Type<($Biome$Type)>): boolean
public "or"(arg0: $Predicate$Type<(any)>): $Predicate<($Holder<($Biome)>)>
public "negate"(): $Predicate<($Holder<($Biome)>)>
public "and"(arg0: $Predicate$Type<(any)>): $Predicate<($Holder<($Biome)>)>
public static "not"<T>(arg0: $Predicate$Type<(any)>): $Predicate<($Holder<($Biome)>)>
public static "isEqual"<T>(arg0: any): $Predicate<($Holder<($Biome)>)>
public "onReload"(arg0: $ZetaModule$Type, arg1: $ConfigFlagManager$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PathfinderMapsModule$TradeInfo$Type = ($PathfinderMapsModule$TradeInfo);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PathfinderMapsModule$TradeInfo_ = $PathfinderMapsModule$TradeInfo$Type;
}}
declare module "packages/org/violetmoon/zeta/config/type/$CostSensitiveEntitySpawnConfig" {
import {$EntitySpawnConfig, $EntitySpawnConfig$Type} from "packages/org/violetmoon/zeta/config/type/$EntitySpawnConfig"
import {$IBiomeConfig, $IBiomeConfig$Type} from "packages/org/violetmoon/zeta/config/type/$IBiomeConfig"

export class $CostSensitiveEntitySpawnConfig extends $EntitySpawnConfig {
 "maxCost": double
 "spawnCost": double
 "spawnWeight": integer
 "minGroupSize": integer
 "maxGroupSize": integer
 "biomes": $IBiomeConfig

constructor(arg0: integer, arg1: integer, arg2: integer, arg3: double, arg4: double, arg5: $IBiomeConfig$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CostSensitiveEntitySpawnConfig$Type = ($CostSensitiveEntitySpawnConfig);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CostSensitiveEntitySpawnConfig_ = $CostSensitiveEntitySpawnConfig$Type;
}}
declare module "packages/org/violetmoon/zeta/util/handler/$StructureBlockReplacementHandler" {
import {$StructureBlockReplacementHandler$StructureFunction, $StructureBlockReplacementHandler$StructureFunction$Type} from "packages/org/violetmoon/zeta/util/handler/$StructureBlockReplacementHandler$StructureFunction"
import {$Holder, $Holder$Type} from "packages/net/minecraft/core/$Holder"
import {$Structure, $Structure$Type} from "packages/net/minecraft/world/level/levelgen/structure/$Structure"
import {$ServerLevelAccessor, $ServerLevelAccessor$Type} from "packages/net/minecraft/world/level/$ServerLevelAccessor"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$ResourceKey, $ResourceKey$Type} from "packages/net/minecraft/resources/$ResourceKey"
import {$StructureBlockReplacementHandler$StructureHolder, $StructureBlockReplacementHandler$StructureHolder$Type} from "packages/org/violetmoon/zeta/util/handler/$StructureBlockReplacementHandler$StructureHolder"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$PiecesContainer, $PiecesContainer$Type} from "packages/net/minecraft/world/level/levelgen/structure/pieces/$PiecesContainer"

export class $StructureBlockReplacementHandler {

constructor()

public static "getResultingBlockState"(arg0: $ServerLevelAccessor$Type, arg1: $BlockState$Type): $BlockState
public static "addReplacement"(arg0: $StructureBlockReplacementHandler$StructureFunction$Type): void
public static "isStructure"(arg0: $ServerLevelAccessor$Type, arg1: $StructureBlockReplacementHandler$StructureHolder$Type, arg2: $ResourceKey$Type<($Structure$Type)>): boolean
public static "getStructure"(arg0: $ServerLevelAccessor$Type, arg1: $StructureBlockReplacementHandler$StructureHolder$Type): $Holder<($Structure)>
public static "getStructureKey"(arg0: $ServerLevelAccessor$Type, arg1: $StructureBlockReplacementHandler$StructureHolder$Type): $ResourceKey<($Structure)>
public static "getStructureRes"(arg0: $ServerLevelAccessor$Type, arg1: $StructureBlockReplacementHandler$StructureHolder$Type): $ResourceLocation
public static "setActiveStructure"(arg0: $Structure$Type, arg1: $PiecesContainer$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $StructureBlockReplacementHandler$Type = ($StructureBlockReplacementHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $StructureBlockReplacementHandler_ = $StructureBlockReplacementHandler$Type;
}}
declare module "packages/org/violetmoon/zeta/recipe/$FlagIngredient$Serializer" {
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$ConfigFlagManager, $ConfigFlagManager$Type} from "packages/org/violetmoon/zeta/config/$ConfigFlagManager"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$IZetaIngredientSerializer, $IZetaIngredientSerializer$Type} from "packages/org/violetmoon/zeta/recipe/$IZetaIngredientSerializer"
import {$FlagIngredient, $FlagIngredient$Type} from "packages/org/violetmoon/zeta/recipe/$FlagIngredient"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $FlagIngredient$Serializer extends $Record implements $IZetaIngredientSerializer<($FlagIngredient)> {
/**
 * 
 * @deprecated
 */
static "INSTANCE": $FlagIngredient$Serializer

constructor(cfm: $ConfigFlagManager$Type)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "write"(arg0: $FriendlyByteBuf$Type, arg1: $FlagIngredient$Type): void
public "getZeta"(): $Zeta
public "cfm"(): $ConfigFlagManager
public "getID"(): $ResourceLocation
get "zeta"(): $Zeta
get "iD"(): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FlagIngredient$Serializer$Type = ($FlagIngredient$Serializer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FlagIngredient$Serializer_ = $FlagIngredient$Serializer$Type;
}}
declare module "packages/org/violetmoon/quark/content/automation/module/$CrafterModule" {
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$CrafterBlockEntity, $CrafterBlockEntity$Type} from "packages/org/violetmoon/quark/content/automation/block/be/$CrafterBlockEntity"
import {$CrafterMenu, $CrafterMenu$Type} from "packages/org/violetmoon/quark/content/automation/inventory/$CrafterMenu"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$ZRegister, $ZRegister$Type} from "packages/org/violetmoon/zeta/event/load/$ZRegister"
import {$ZClientSetup, $ZClientSetup$Type} from "packages/org/violetmoon/zeta/client/event/load/$ZClientSetup"
import {$MenuType, $MenuType$Type} from "packages/net/minecraft/world/inventory/$MenuType"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $CrafterModule extends $ZetaModule {
static "block": $Block
static "menuType": $MenuType<($CrafterMenu)>
static "blockEntityType": $BlockEntityType<($CrafterBlockEntity)>
static "useEmiLogic": boolean
static "allowItemsWhilePowered": boolean
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "register"(arg0: $ZRegister$Type): void
public "clientSetup"(arg0: $ZClientSetup$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CrafterModule$Type = ($CrafterModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CrafterModule_ = $CrafterModule$Type;
}}
declare module "packages/org/violetmoon/zeta/mixin/plugin/$DelegateReturnValueTarget" {
import {$Annotation, $Annotation$Type} from "packages/java/lang/annotation/$Annotation"
import {$Class, $Class$Type} from "packages/java/lang/$Class"

export interface $DelegateReturnValueTarget extends $Annotation {

 "value"(): (string)[]
 "equals"(arg0: any): boolean
 "toString"(): string
 "hashCode"(): integer
 "annotationType"(): $Class<(any)>
}

export namespace $DelegateReturnValueTarget {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DelegateReturnValueTarget$Type = ($DelegateReturnValueTarget);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DelegateReturnValueTarget_ = $DelegateReturnValueTarget$Type;
}}
declare module "packages/org/violetmoon/quark/content/tweaks/module/$BeachVillagersModule" {
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$ZCommonSetup, $ZCommonSetup$Type} from "packages/org/violetmoon/zeta/event/load/$ZCommonSetup"
import {$VillagerType, $VillagerType$Type} from "packages/net/minecraft/world/entity/npc/$VillagerType"
import {$ZRegister, $ZRegister$Type} from "packages/org/violetmoon/zeta/event/load/$ZRegister"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $BeachVillagersModule extends $ZetaModule {
static "beach": $VillagerType
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "register"(arg0: $ZRegister$Type): void
public "onCommonSetup"(arg0: $ZCommonSetup$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BeachVillagersModule$Type = ($BeachVillagersModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BeachVillagersModule_ = $BeachVillagersModule$Type;
}}
declare module "packages/org/violetmoon/zetaimplforge/event/load/$ForgeZEntityAttributeCreation" {
import {$AttributeSupplier, $AttributeSupplier$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeSupplier"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$EntityAttributeCreationEvent, $EntityAttributeCreationEvent$Type} from "packages/net/minecraftforge/event/entity/$EntityAttributeCreationEvent"
import {$ZEntityAttributeCreation, $ZEntityAttributeCreation$Type} from "packages/org/violetmoon/zeta/event/load/$ZEntityAttributeCreation"

export class $ForgeZEntityAttributeCreation implements $ZEntityAttributeCreation {

constructor(arg0: $EntityAttributeCreationEvent$Type)

public "put"(arg0: $EntityType$Type<(any)>, arg1: $AttributeSupplier$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ForgeZEntityAttributeCreation$Type = ($ForgeZEntityAttributeCreation);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ForgeZEntityAttributeCreation_ = $ForgeZEntityAttributeCreation$Type;
}}
declare module "packages/org/violetmoon/quark/content/experimental/module/$AdjustableChatModule" {
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $AdjustableChatModule extends $ZetaModule {
static "horizontalShift": integer
static "verticalShift": integer
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AdjustableChatModule$Type = ($AdjustableChatModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AdjustableChatModule_ = $AdjustableChatModule$Type;
}}
declare module "packages/org/violetmoon/zetaimplforge/event/play/entity/$ForgeZEntityItemPickup" {
import {$EntityItemPickupEvent, $EntityItemPickupEvent$Type} from "packages/net/minecraftforge/event/entity/player/$EntityItemPickupEvent"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$ZEntityItemPickup, $ZEntityItemPickup$Type} from "packages/org/violetmoon/zeta/event/play/entity/$ZEntityItemPickup"
import {$ItemEntity, $ItemEntity$Type} from "packages/net/minecraft/world/entity/item/$ItemEntity"

export class $ForgeZEntityItemPickup implements $ZEntityItemPickup {

constructor(arg0: $EntityItemPickupEvent$Type)

public "getItem"(): $ItemEntity
public "getEntity"(): $Player
public "getPlayer"(): $Player
get "item"(): $ItemEntity
get "entity"(): $Player
get "player"(): $Player
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ForgeZEntityItemPickup$Type = ($ForgeZEntityItemPickup);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ForgeZEntityItemPickup_ = $ForgeZEntityItemPickup$Type;
}}
declare module "packages/org/violetmoon/quark/content/world/undergroundstyle/base/$UndergroundStyleConfig" {
import {$UndergroundStyleConfig$Builder, $UndergroundStyleConfig$Builder$Type} from "packages/org/violetmoon/quark/content/world/undergroundstyle/base/$UndergroundStyleConfig$Builder"
import {$UndergroundStyle, $UndergroundStyle$Type} from "packages/org/violetmoon/quark/content/world/undergroundstyle/base/$UndergroundStyle"
import {$DimensionConfig, $DimensionConfig$Type} from "packages/org/violetmoon/zeta/config/type/$DimensionConfig"
import {$IBiomeConfig, $IBiomeConfig$Type} from "packages/org/violetmoon/zeta/config/type/$IBiomeConfig"
import {$ClusterSizeConfig, $ClusterSizeConfig$Type} from "packages/org/violetmoon/zeta/config/type/$ClusterSizeConfig"

export class $UndergroundStyleConfig extends $ClusterSizeConfig {
readonly "style": $UndergroundStyle
 "dimensions": $DimensionConfig
 "biomes": $IBiomeConfig
 "rarity": integer
 "minYLevel": integer
 "maxYLevel": integer
 "horizontalSize": integer
 "verticalSize": integer
 "horizontalVariation": integer
 "verticalVariation": integer

constructor(arg0: $UndergroundStyleConfig$Builder$Type<(any)>)

public static "styleBuilder"<B extends $UndergroundStyleConfig$Builder<(B)>>(): $UndergroundStyleConfig$Builder<(B)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $UndergroundStyleConfig$Type = ($UndergroundStyleConfig);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $UndergroundStyleConfig_ = $UndergroundStyleConfig$Type;
}}
declare module "packages/org/violetmoon/quark/content/tweaks/module/$AutomaticRecipeUnlockModule" {
import {$Advancement$Builder, $Advancement$Builder$Type} from "packages/net/minecraft/advancements/$Advancement$Builder"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$ZPlayer$LoggedIn, $ZPlayer$LoggedIn$Type} from "packages/org/violetmoon/zeta/event/play/entity/player/$ZPlayer$LoggedIn"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$ZConfigChanged, $ZConfigChanged$Type} from "packages/org/violetmoon/zeta/event/load/$ZConfigChanged"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $AutomaticRecipeUnlockModule extends $ZetaModule {
static "ignoredRecipes": $List<(string)>
static "forceLimitedCrafting": boolean
static "disableRecipeBook": boolean
static "filterRecipeAdvancements": boolean
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "onPlayerLoggedIn"(arg0: $ZPlayer$LoggedIn$Type): void
public static "removeRecipeAdvancements"(arg0: $Map$Type<($ResourceLocation$Type), ($Advancement$Builder$Type)>): void
public "configChanged"(arg0: $ZConfigChanged$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AutomaticRecipeUnlockModule$Type = ($AutomaticRecipeUnlockModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AutomaticRecipeUnlockModule_ = $AutomaticRecipeUnlockModule$Type;
}}
declare module "packages/org/violetmoon/quark/content/tweaks/compat/$BetterElytraRocketCuriosCompat" {
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"

export class $BetterElytraRocketCuriosCompat {

constructor()

public static "hasCuriosElytra"(arg0: $Player$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BetterElytraRocketCuriosCompat$Type = ($BetterElytraRocketCuriosCompat);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BetterElytraRocketCuriosCompat_ = $BetterElytraRocketCuriosCompat$Type;
}}
declare module "packages/org/violetmoon/quark/content/tweaks/module/$VillagersFollowEmeraldsModule" {
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$ZEntityJoinLevel, $ZEntityJoinLevel$Type} from "packages/org/violetmoon/zeta/event/play/entity/$ZEntityJoinLevel"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $VillagersFollowEmeraldsModule extends $ZetaModule {
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "onVillagerAppear"(arg0: $ZEntityJoinLevel$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $VillagersFollowEmeraldsModule$Type = ($VillagersFollowEmeraldsModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $VillagersFollowEmeraldsModule_ = $VillagersFollowEmeraldsModule$Type;
}}
declare module "packages/org/violetmoon/quark/content/tools/config/$PickarangType$PickarangConstructor" {
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$AbstractPickarang, $AbstractPickarang$Type} from "packages/org/violetmoon/quark/content/tools/entity/rang/$AbstractPickarang"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"

export interface $PickarangType$PickarangConstructor<T extends $AbstractPickarang<(T)>> {

 "makePickarang"(arg0: $EntityType$Type<(T)>, arg1: $Level$Type, arg2: $Player$Type): T

(arg0: $EntityType$Type<(T)>, arg1: $Level$Type, arg2: $Player$Type): T
}

export namespace $PickarangType$PickarangConstructor {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PickarangType$PickarangConstructor$Type<T> = ($PickarangType$PickarangConstructor<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PickarangType$PickarangConstructor_<T> = $PickarangType$PickarangConstructor$Type<(T)>;
}}
declare module "packages/org/violetmoon/zeta/api/$IConditionalSticky" {
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export interface $IConditionalSticky {

 "canStickToBlock"(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type, arg4: $BlockState$Type, arg5: $BlockState$Type, arg6: $Direction$Type): boolean

(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type, arg4: $BlockState$Type, arg5: $BlockState$Type, arg6: $Direction$Type): boolean
}

export namespace $IConditionalSticky {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IConditionalSticky$Type = ($IConditionalSticky);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IConditionalSticky_ = $IConditionalSticky$Type;
}}
declare module "packages/org/violetmoon/zeta/client/event/load/$ZAddItemColorHandlers" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$IZetaLoadEvent, $IZetaLoadEvent$Type} from "packages/org/violetmoon/zeta/event/bus/$IZetaLoadEvent"
import {$ZAddItemColorHandlers$Post, $ZAddItemColorHandlers$Post$Type} from "packages/org/violetmoon/zeta/client/event/load/$ZAddItemColorHandlers$Post"
import {$ItemLike, $ItemLike$Type} from "packages/net/minecraft/world/level/$ItemLike"
import {$ItemColor, $ItemColor$Type} from "packages/net/minecraft/client/color/item/$ItemColor"
import {$ItemColors, $ItemColors$Type} from "packages/net/minecraft/client/color/item/$ItemColors"

export interface $ZAddItemColorHandlers extends $IZetaLoadEvent {

 "register"(arg0: $ItemColor$Type, ...arg1: ($ItemLike$Type)[]): void
 "getItemColors"(): $ItemColors
 "makePostEvent"(): $ZAddItemColorHandlers$Post
 "registerNamed"(arg0: $Function$Type<($Item$Type), ($ItemColor$Type)>, ...arg1: (string)[]): void
}

export namespace $ZAddItemColorHandlers {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZAddItemColorHandlers$Type = ($ZAddItemColorHandlers);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZAddItemColorHandlers_ = $ZAddItemColorHandlers$Type;
}}
declare module "packages/org/violetmoon/quark/content/mobs/client/layer/$CrabMoldLayer" {
import {$RenderLayer, $RenderLayer$Type} from "packages/net/minecraft/client/renderer/entity/layers/$RenderLayer"
import {$Crab, $Crab$Type} from "packages/org/violetmoon/quark/content/mobs/entity/$Crab"
import {$CrabModel, $CrabModel$Type} from "packages/org/violetmoon/quark/content/mobs/client/model/$CrabModel"
import {$RenderLayerParent, $RenderLayerParent$Type} from "packages/net/minecraft/client/renderer/entity/$RenderLayerParent"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"

export class $CrabMoldLayer extends $RenderLayer<($Crab), ($CrabModel)> {

constructor(arg0: $RenderLayerParent$Type<($Crab$Type), ($CrabModel$Type)>)

public "render"(arg0: $PoseStack$Type, arg1: $MultiBufferSource$Type, arg2: integer, arg3: $Crab$Type, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: float): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CrabMoldLayer$Type = ($CrabMoldLayer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CrabMoldLayer_ = $CrabMoldLayer$Type;
}}
declare module "packages/org/violetmoon/quark/content/automation/block/be/$EnderWatcherBlockEntity" {
import {$ZetaBlockEntity, $ZetaBlockEntity$Type} from "packages/org/violetmoon/zeta/block/be/$ZetaBlockEntity"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $EnderWatcherBlockEntity extends $ZetaBlockEntity {
 "blockState": $BlockState

constructor(arg0: $BlockPos$Type, arg1: $BlockState$Type)

public static "tick"(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: $EnderWatcherBlockEntity$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EnderWatcherBlockEntity$Type = ($EnderWatcherBlockEntity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EnderWatcherBlockEntity_ = $EnderWatcherBlockEntity$Type;
}}
declare module "packages/org/violetmoon/quark/integration/lootr/client/$IClientLootrIntegration" {
import {$ZClientSetup, $ZClientSetup$Type} from "packages/org/violetmoon/zeta/client/event/load/$ZClientSetup"

export interface $IClientLootrIntegration {

 "clientSetup"(arg0: $ZClientSetup$Type): void
}

export namespace $IClientLootrIntegration {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IClientLootrIntegration$Type = ($IClientLootrIntegration);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IClientLootrIntegration_ = $IClientLootrIntegration$Type;
}}
declare module "packages/org/violetmoon/quark/base/client/handler/$InventoryButtonHandler$ButtonProvider" {
import {$MiniInventoryButton, $MiniInventoryButton$Type} from "packages/org/violetmoon/quark/content/management/client/screen/widgets/$MiniInventoryButton"
import {$AbstractContainerScreen, $AbstractContainerScreen$Type} from "packages/net/minecraft/client/gui/screens/inventory/$AbstractContainerScreen"

export interface $InventoryButtonHandler$ButtonProvider {

 "provide"(arg0: $AbstractContainerScreen$Type<(any)>, arg1: integer, arg2: integer): $MiniInventoryButton

(arg0: $AbstractContainerScreen$Type<(any)>, arg1: integer, arg2: integer): $MiniInventoryButton
}

export namespace $InventoryButtonHandler$ButtonProvider {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $InventoryButtonHandler$ButtonProvider$Type = ($InventoryButtonHandler$ButtonProvider);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $InventoryButtonHandler$ButtonProvider_ = $InventoryButtonHandler$ButtonProvider$Type;
}}
declare module "packages/org/violetmoon/quark/content/automation/block/be/$ChuteBlockEntity" {
import {$LazyOptional, $LazyOptional$Type} from "packages/net/minecraftforge/common/util/$LazyOptional"
import {$ZetaBlockEntity, $ZetaBlockEntity$Type} from "packages/org/violetmoon/zeta/block/be/$ZetaBlockEntity"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Capability, $Capability$Type} from "packages/net/minecraftforge/common/capabilities/$Capability"

export class $ChuteBlockEntity extends $ZetaBlockEntity {
 "blockState": $BlockState

constructor(arg0: $BlockPos$Type, arg1: $BlockState$Type)

public "getCapability"<T>(arg0: $Capability$Type<(T)>, arg1: $Direction$Type): $LazyOptional<(T)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ChuteBlockEntity$Type = ($ChuteBlockEntity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ChuteBlockEntity_ = $ChuteBlockEntity$Type;
}}
declare module "packages/org/violetmoon/quark/content/mobs/client/render/entity/$StonelingRenderer" {
import {$RenderLayer, $RenderLayer$Type} from "packages/net/minecraft/client/renderer/entity/layers/$RenderLayer"
import {$EntityRendererProvider$Context, $EntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRendererProvider$Context"
import {$List, $List$Type} from "packages/java/util/$List"
import {$EntityModel, $EntityModel$Type} from "packages/net/minecraft/client/model/$EntityModel"
import {$MobRenderer, $MobRenderer$Type} from "packages/net/minecraft/client/renderer/entity/$MobRenderer"
import {$StonelingModel, $StonelingModel$Type} from "packages/org/violetmoon/quark/content/mobs/client/model/$StonelingModel"
import {$Stoneling, $Stoneling$Type} from "packages/org/violetmoon/quark/content/mobs/entity/$Stoneling"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $StonelingRenderer extends $MobRenderer<($Stoneling), ($StonelingModel)> {
static readonly "LEASH_RENDER_STEPS": integer
 "model": M
 "layers": $List<($RenderLayer<(T), (M)>)>
 "shadowRadius": float

constructor(arg0: $EntityRendererProvider$Context$Type)

public "getTextureLocation"(arg0: $Stoneling$Type): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $StonelingRenderer$Type = ($StonelingRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $StonelingRenderer_ = $StonelingRenderer$Type;
}}
declare module "packages/org/violetmoon/quark/content/world/feature/$AncientTreeTopperDecorator" {
import {$TreeDecorator, $TreeDecorator$Type} from "packages/net/minecraft/world/level/levelgen/feature/treedecorators/$TreeDecorator"
import {$TreeDecoratorType, $TreeDecoratorType$Type} from "packages/net/minecraft/world/level/levelgen/feature/treedecorators/$TreeDecoratorType"
import {$TreeDecorator$Context, $TreeDecorator$Context$Type} from "packages/net/minecraft/world/level/levelgen/feature/treedecorators/$TreeDecorator$Context"
import {$Codec, $Codec$Type} from "packages/com/mojang/serialization/$Codec"

export class $AncientTreeTopperDecorator extends $TreeDecorator {
static readonly "CODEC": $Codec<($AncientTreeTopperDecorator)>
static readonly "TYPE": $TreeDecoratorType<($AncientTreeTopperDecorator)>

constructor()

public "place"(arg0: $TreeDecorator$Context$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AncientTreeTopperDecorator$Type = ($AncientTreeTopperDecorator);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AncientTreeTopperDecorator_ = $AncientTreeTopperDecorator$Type;
}}
declare module "packages/org/violetmoon/quark/content/tools/client/render/entity/$SkullPikeRenderer" {
import {$SkullPike, $SkullPike$Type} from "packages/org/violetmoon/quark/content/tools/entity/$SkullPike"
import {$EntityRendererProvider$Context, $EntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRendererProvider$Context"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$EntityRenderer, $EntityRenderer$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRenderer"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $SkullPikeRenderer extends $EntityRenderer<($SkullPike)> {
 "shadowRadius": float

constructor(arg0: $EntityRendererProvider$Context$Type)

public "render"(arg0: $SkullPike$Type, arg1: float, arg2: float, arg3: $PoseStack$Type, arg4: $MultiBufferSource$Type, arg5: integer): void
public "getTextureLocation"(arg0: $SkullPike$Type): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SkullPikeRenderer$Type = ($SkullPikeRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SkullPikeRenderer_ = $SkullPikeRenderer$Type;
}}
declare module "packages/org/violetmoon/quark/content/client/resources/$AttributeTooltipManager" {
import {$AttributeIconEntry, $AttributeIconEntry$Type} from "packages/org/violetmoon/quark/content/client/resources/$AttributeIconEntry"
import {$SimplePreparableReloadListener, $SimplePreparableReloadListener$Type} from "packages/net/minecraft/server/packs/resources/$SimplePreparableReloadListener"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $AttributeTooltipManager extends $SimplePreparableReloadListener<($Map<(string), ($AttributeIconEntry)>)> {

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AttributeTooltipManager$Type = ($AttributeTooltipManager);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AttributeTooltipManager_ = $AttributeTooltipManager$Type;
}}
declare module "packages/org/violetmoon/zeta/config/type/$OrePocketConfig" {
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$ConfigFlagManager, $ConfigFlagManager$Type} from "packages/org/violetmoon/zeta/config/$ConfigFlagManager"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$IConfigType, $IConfigType$Type} from "packages/org/violetmoon/zeta/config/type/$IConfigType"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $OrePocketConfig implements $IConfigType {
 "clusterSize": integer
 "clusterCount": double

constructor(arg0: integer, arg1: integer, arg2: integer, arg3: double)

public "forEach"(arg0: $BlockPos$Type, arg1: $RandomSource$Type, arg2: $Consumer$Type<($BlockPos$Type)>): void
public "getRandomHeight"(arg0: $RandomSource$Type): integer
public "onReload"(arg0: $ZetaModule$Type, arg1: $ConfigFlagManager$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $OrePocketConfig$Type = ($OrePocketConfig);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $OrePocketConfig_ = $OrePocketConfig$Type;
}}
declare module "packages/org/violetmoon/quark/content/mobs/module/$StonelingsModule" {
import {$EntitySpawnConfig, $EntitySpawnConfig$Type} from "packages/org/violetmoon/zeta/config/type/$EntitySpawnConfig"
import {$ZClientSetup, $ZClientSetup$Type} from "packages/org/violetmoon/zeta/client/event/load/$ZClientSetup"
import {$Stoneling, $Stoneling$Type} from "packages/org/violetmoon/quark/content/mobs/entity/$Stoneling"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$DimensionConfig, $DimensionConfig$Type} from "packages/org/violetmoon/zeta/config/type/$DimensionConfig"
import {$ZRegister, $ZRegister$Type} from "packages/org/violetmoon/zeta/event/load/$ZRegister"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ManualTrigger, $ManualTrigger$Type} from "packages/org/violetmoon/zeta/advancement/$ManualTrigger"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZEntityAttributeCreation, $ZEntityAttributeCreation$Type} from "packages/org/violetmoon/zeta/event/load/$ZEntityAttributeCreation"

export class $StonelingsModule extends $ZetaModule {
static "stonelingType": $EntityType<($Stoneling)>
static "maxYLevel": integer
static "dimensions": $DimensionConfig
static "spawnConfig": $EntitySpawnConfig
static "enableDiamondHeart": boolean
static "cautiousStonelings": boolean
static "tamableStonelings": boolean
static "wealdPathfinderMaps": boolean
static "makeStonelingTrigger": $ManualTrigger
static "diamondHeart": $Item
 "registered": boolean
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "register"(arg0: $ZRegister$Type): void
public "clientSetup"(arg0: $ZClientSetup$Type): void
public "entityAttrs"(arg0: $ZEntityAttributeCreation$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $StonelingsModule$Type = ($StonelingsModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $StonelingsModule_ = $StonelingsModule$Type;
}}
declare module "packages/org/violetmoon/zeta/world/generator/multichunk/$ClusterShape$Provider" {
import {$ClusterSizeConfig, $ClusterSizeConfig$Type} from "packages/org/violetmoon/zeta/config/type/$ClusterSizeConfig"
import {$Random, $Random$Type} from "packages/java/util/$Random"
import {$ClusterShape, $ClusterShape$Type} from "packages/org/violetmoon/zeta/world/generator/multichunk/$ClusterShape"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $ClusterShape$Provider {

constructor(arg0: $ClusterSizeConfig$Type, arg1: long)

public "getRadius"(): integer
public "randAroundBlockPos"(arg0: $BlockPos$Type): $Random
public "around"(arg0: $BlockPos$Type): $ClusterShape
public "getRarity"(): integer
get "radius"(): integer
get "rarity"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClusterShape$Provider$Type = ($ClusterShape$Provider);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClusterShape$Provider_ = $ClusterShape$Provider$Type;
}}
declare module "packages/org/violetmoon/quark/base/network/message/$ShareItemS2CMessage" {
import {$IZetaMessage, $IZetaMessage$Type} from "packages/org/violetmoon/zeta/network/$IZetaMessage"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$IZetaNetworkEventContext, $IZetaNetworkEventContext$Type} from "packages/org/violetmoon/zeta/network/$IZetaNetworkEventContext"

export class $ShareItemS2CMessage implements $IZetaMessage {
 "senderUuid": $UUID
 "senderName": $Component
 "stack": $ItemStack

constructor()
constructor(arg0: $UUID$Type, arg1: $Component$Type, arg2: $ItemStack$Type)

public "receive"(arg0: $IZetaNetworkEventContext$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ShareItemS2CMessage$Type = ($ShareItemS2CMessage);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ShareItemS2CMessage_ = $ShareItemS2CMessage$Type;
}}
declare module "packages/org/violetmoon/quark/base/util/$QuarkWorldGenWeights" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $QuarkWorldGenWeights {
static readonly "CLAY": integer
static readonly "NEW_STONES": integer
static readonly "BIG_STONE_CLUSTERS": integer
static readonly "UNDERGROUND_BIOMES": integer
static readonly "MONSTER_BOXES": integer
static readonly "OBSIDIAN_SPIKES": integer
static readonly "FAIRY_RINGS": integer
static readonly "FALLEN_LOGS": integer
static readonly "BLOSSOM_TREES": integer
static readonly "SPIRAL_SPIRES": integer
static readonly "CHORUS_VEGETATION": integer

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $QuarkWorldGenWeights$Type = ($QuarkWorldGenWeights);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $QuarkWorldGenWeights_ = $QuarkWorldGenWeights$Type;
}}
declare module "packages/org/violetmoon/zeta/client/event/play/$ZScreen$KeyPressed" {
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$Cancellable, $Cancellable$Type} from "packages/org/violetmoon/zeta/event/bus/$Cancellable"
import {$ZScreen, $ZScreen$Type} from "packages/org/violetmoon/zeta/client/event/play/$ZScreen"

export interface $ZScreen$KeyPressed extends $ZScreen, $Cancellable {

 "getModifiers"(): integer
 "getKeyCode"(): integer
 "getScanCode"(): integer
 "getScreen"(): $Screen
 "cancel"(): void
 "setCanceled"(arg0: boolean): void
 "isCanceled"(): boolean
}

export namespace $ZScreen$KeyPressed {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZScreen$KeyPressed$Type = ($ZScreen$KeyPressed);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZScreen$KeyPressed_ = $ZScreen$KeyPressed$Type;
}}
declare module "packages/org/violetmoon/quark/content/tweaks/module/$PatTheDogsModule" {
import {$ZAnimalTame, $ZAnimalTame$Type} from "packages/org/violetmoon/zeta/event/play/entity/living/$ZAnimalTame"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ZEntityJoinLevel, $ZEntityJoinLevel$Type} from "packages/org/violetmoon/zeta/event/play/entity/$ZEntityJoinLevel"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZPlayerInteract$EntityInteract, $ZPlayerInteract$EntityInteract$Type} from "packages/org/violetmoon/zeta/event/play/entity/player/$ZPlayerInteract$EntityInteract"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $PatTheDogsModule extends $ZetaModule {
static "dogsWantLove": integer
static "petAllMobs": boolean
static "pettableDenylist": $List<(string)>
static "pettableAllowlist": $List<(string)>
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "onWolfAppear"(arg0: $ZEntityJoinLevel$Type): void
public "onTame"(arg0: $ZAnimalTame$Type): void
public "onInteract"(arg0: $ZPlayerInteract$EntityInteract$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PatTheDogsModule$Type = ($PatTheDogsModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PatTheDogsModule_ = $PatTheDogsModule$Type;
}}
declare module "packages/org/violetmoon/zetaimplforge/event/play/entity/living/$ForgeZLivingChangeTarget" {
import {$ZLivingChangeTarget, $ZLivingChangeTarget$Type} from "packages/org/violetmoon/zeta/event/play/entity/living/$ZLivingChangeTarget"
import {$LivingChangeTargetEvent$ILivingTargetType, $LivingChangeTargetEvent$ILivingTargetType$Type} from "packages/net/minecraftforge/event/entity/living/$LivingChangeTargetEvent$ILivingTargetType"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$LivingChangeTargetEvent, $LivingChangeTargetEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingChangeTargetEvent"

export class $ForgeZLivingChangeTarget implements $ZLivingChangeTarget {

constructor(arg0: $LivingChangeTargetEvent$Type)

public "setCanceled"(arg0: boolean): void
public "isCanceled"(): boolean
public "getTargetType"(): $LivingChangeTargetEvent$ILivingTargetType
public "getEntity"(): $LivingEntity
public "getNewTarget"(): $LivingEntity
public "cancel"(): void
set "canceled"(value: boolean)
get "canceled"(): boolean
get "targetType"(): $LivingChangeTargetEvent$ILivingTargetType
get "entity"(): $LivingEntity
get "newTarget"(): $LivingEntity
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ForgeZLivingChangeTarget$Type = ($ForgeZLivingChangeTarget);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ForgeZLivingChangeTarget_ = $ForgeZLivingChangeTarget$Type;
}}
declare module "packages/org/violetmoon/zetaimplforge/event/play/$ForgeZAnvilRepair" {
import {$AnvilRepairEvent, $AnvilRepairEvent$Type} from "packages/net/minecraftforge/event/entity/player/$AnvilRepairEvent"
import {$ZAnvilRepair, $ZAnvilRepair$Type} from "packages/org/violetmoon/zeta/event/play/$ZAnvilRepair"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export class $ForgeZAnvilRepair implements $ZAnvilRepair {

constructor(arg0: $AnvilRepairEvent$Type)

public "getRight"(): $ItemStack
public "getLeft"(): $ItemStack
public "getEntity"(): $Player
public "getBreakChance"(): float
public "setBreakChance"(arg0: float): void
public "getOutput"(): $ItemStack
public "getPlayer"(): $Player
get "right"(): $ItemStack
get "left"(): $ItemStack
get "entity"(): $Player
get "breakChance"(): float
set "breakChance"(value: float)
get "output"(): $ItemStack
get "player"(): $Player
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ForgeZAnvilRepair$Type = ($ForgeZAnvilRepair);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ForgeZAnvilRepair_ = $ForgeZAnvilRepair$Type;
}}
declare module "packages/org/violetmoon/quark/addons/oddities/module/$MagnetsModule" {
import {$ZLevelTick$End, $ZLevelTick$End$Type} from "packages/org/violetmoon/zeta/event/play/$ZLevelTick$End"
import {$ZLevelTick$Start, $ZLevelTick$Start$Type} from "packages/org/violetmoon/zeta/event/play/$ZLevelTick$Start"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$ZClientSetup, $ZClientSetup$Type} from "packages/org/violetmoon/zeta/client/event/load/$ZClientSetup"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$MagnetizedBlockBlockEntity, $MagnetizedBlockBlockEntity$Type} from "packages/org/violetmoon/quark/addons/oddities/block/be/$MagnetizedBlockBlockEntity"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$MagnetBlockEntity, $MagnetBlockEntity$Type} from "packages/org/violetmoon/quark/addons/oddities/block/be/$MagnetBlockEntity"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$SimpleParticleType, $SimpleParticleType$Type} from "packages/net/minecraft/core/particles/$SimpleParticleType"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ZRecipeCrawl$Reset, $ZRecipeCrawl$Reset$Type} from "packages/org/violetmoon/zeta/event/play/$ZRecipeCrawl$Reset"
import {$ZRecipeCrawl$Digest, $ZRecipeCrawl$Digest$Type} from "packages/org/violetmoon/zeta/event/play/$ZRecipeCrawl$Digest"
import {$ZRegister, $ZRegister$Type} from "packages/org/violetmoon/zeta/event/load/$ZRegister"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"

export class $MagnetsModule extends $ZetaModule {
static "magnetType": $BlockEntityType<($MagnetBlockEntity)>
static "magnetizedBlockType": $BlockEntityType<($MagnetizedBlockBlockEntity)>
static "attractorParticle": $SimpleParticleType
static "repulsorParticle": $SimpleParticleType
static "magneticDerivationList": $List<(string)>
static "magneticWhitelist": $List<(string)>
static "magneticBlacklist": $List<(string)>
static "usePreEndRecipe": boolean
static "affectEntities": boolean
static "affectsArmor": boolean
static "entitiesPullForce": double
static "stoneCutterSilkTouch": boolean
static readonly "magneticEntities": $TagKey<($EntityType<(any)>)>
static "magnet": $Block
static "magnetized_block": $Block
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "register"(arg0: $ZRegister$Type): void
public "clientSetup"(arg0: $ZClientSetup$Type): void
public "crawlReset"(arg0: $ZRecipeCrawl$Reset$Type): void
public "tickEnd"(arg0: $ZLevelTick$End$Type): void
public "crawlDigest"(arg0: $ZRecipeCrawl$Digest$Type): void
public "tickStart"(arg0: $ZLevelTick$Start$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MagnetsModule$Type = ($MagnetsModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MagnetsModule_ = $MagnetsModule$Type;
}}
declare module "packages/org/violetmoon/zeta/advancement/$ManualTrigger" {
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$SimpleCriterionTrigger, $SimpleCriterionTrigger$Type} from "packages/net/minecraft/advancements/critereon/$SimpleCriterionTrigger"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$ManualTrigger$Instance, $ManualTrigger$Instance$Type} from "packages/org/violetmoon/zeta/advancement/$ManualTrigger$Instance"

export class $ManualTrigger extends $SimpleCriterionTrigger<($ManualTrigger$Instance)> {

constructor(arg0: $ResourceLocation$Type)

public "trigger"(arg0: $ServerPlayer$Type): void
public "getId"(): $ResourceLocation
get "id"(): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ManualTrigger$Type = ($ManualTrigger);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ManualTrigger_ = $ManualTrigger$Type;
}}
declare module "packages/org/violetmoon/zeta/advancement/modifier/$GlowAndBeholdModifier" {
import {$AdvancementModifier, $AdvancementModifier$Type} from "packages/org/violetmoon/zeta/advancement/$AdvancementModifier"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$IMutableAdvancement, $IMutableAdvancement$Type} from "packages/org/violetmoon/zeta/api/$IMutableAdvancement"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $GlowAndBeholdModifier extends $AdvancementModifier {
readonly "module": $ZetaModule

constructor(arg0: $ZetaModule$Type, arg1: $Set$Type<($Block$Type)>)

public "apply"(arg0: $ResourceLocation$Type, arg1: $IMutableAdvancement$Type): boolean
public "getTargets"(): $Set<($ResourceLocation)>
get "targets"(): $Set<($ResourceLocation)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GlowAndBeholdModifier$Type = ($GlowAndBeholdModifier);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GlowAndBeholdModifier_ = $GlowAndBeholdModifier$Type;
}}
declare module "packages/org/violetmoon/quark/content/building/module/$VariantChestsModule" {
import {$VariantTrappedChestBlockEntity, $VariantTrappedChestBlockEntity$Type} from "packages/org/violetmoon/quark/content/building/block/be/$VariantTrappedChestBlockEntity"
import {$BooleanSupplier, $BooleanSupplier$Type} from "packages/java/util/function/$BooleanSupplier"
import {$ZEntityJoinLevel, $ZEntityJoinLevel$Type} from "packages/org/violetmoon/zeta/event/play/entity/$ZEntityJoinLevel"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$ZPlayerInteract$EntityInteractSpecific, $ZPlayerInteract$EntityInteractSpecific$Type} from "packages/org/violetmoon/zeta/event/play/entity/player/$ZPlayerInteract$EntityInteractSpecific"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$SoundType, $SoundType$Type} from "packages/net/minecraft/world/level/block/$SoundType"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ZRegister, $ZRegister$Type} from "packages/org/violetmoon/zeta/event/load/$ZRegister"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ZLivingDeath, $ZLivingDeath$Type} from "packages/org/violetmoon/zeta/event/play/entity/living/$ZLivingDeath"
import {$ZRegister$Post, $ZRegister$Post$Type} from "packages/org/violetmoon/zeta/event/load/$ZRegister$Post"
import {$VariantChestBlockEntity, $VariantChestBlockEntity$Type} from "packages/org/violetmoon/quark/content/building/block/be/$VariantChestBlockEntity"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZConfigChanged, $ZConfigChanged$Type} from "packages/org/violetmoon/zeta/event/load/$ZConfigChanged"

export class $VariantChestsModule extends $ZetaModule {
static "chestTEType": $BlockEntityType<($VariantChestBlockEntity)>
static "trappedChestTEType": $BlockEntityType<($VariantTrappedChestBlockEntity)>
 "structureChests": $List<(string)>
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "register"(arg0: $ZRegister$Type): void
public "postRegister"(arg0: $ZRegister$Post$Type): void
public "onEntityJoinWorld"(arg0: $ZEntityJoinLevel$Type): void
public "onClickEntity"(arg0: $ZPlayerInteract$EntityInteractSpecific$Type): void
public "configChanged"(arg0: $ZConfigChanged$Type): void
public static "makeChestBlocksExternal"(arg0: $ZetaModule$Type, arg1: string, arg2: $Block$Type, arg3: $SoundType$Type, arg4: $BooleanSupplier$Type): void
public "onDeath"(arg0: $ZLivingDeath$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $VariantChestsModule$Type = ($VariantChestsModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $VariantChestsModule_ = $VariantChestsModule$Type;
}}
declare module "packages/org/violetmoon/quark/content/building/block/$WeatheringCopperVerticalSlabBlock" {
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$EnumProperty, $EnumProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$EnumProperty"
import {$VerticalSlabBlock$VerticalSlabType, $VerticalSlabBlock$VerticalSlabType$Type} from "packages/org/violetmoon/quark/content/building/block/$VerticalSlabBlock$VerticalSlabType"
import {$CustomWeatheringCopper, $CustomWeatheringCopper$Type} from "packages/org/violetmoon/zeta/block/ext/$CustomWeatheringCopper"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$QuarkVerticalSlabBlock, $QuarkVerticalSlabBlock$Type} from "packages/org/violetmoon/quark/content/building/block/$QuarkVerticalSlabBlock"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$WeatheringCopper$WeatherState, $WeatheringCopper$WeatherState$Type} from "packages/net/minecraft/world/level/block/$WeatheringCopper$WeatherState"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $WeatheringCopperVerticalSlabBlock extends $QuarkVerticalSlabBlock implements $CustomWeatheringCopper {
 "first": $WeatheringCopperVerticalSlabBlock
 "prev": $WeatheringCopperVerticalSlabBlock
 "next": $WeatheringCopperVerticalSlabBlock
static readonly "TYPE": $EnumProperty<($VerticalSlabBlock$VerticalSlabType)>
static readonly "WATERLOGGED": $BooleanProperty
readonly "parent": $Supplier<($Block)>
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(arg0: $Block$Type, arg1: $ZetaModule$Type)

public "getNext"(arg0: $BlockState$Type): $Optional<($BlockState)>
public "getFirst"(arg0: $BlockState$Type): $BlockState
public "isRandomlyTicking"(arg0: $BlockState$Type): boolean
public "getAge"(): $WeatheringCopper$WeatherState
public "getPrevious"(arg0: $BlockState$Type): $Optional<($BlockState)>
public "randomTick"(arg0: $BlockState$Type, arg1: $ServerLevel$Type, arg2: $BlockPos$Type, arg3: $RandomSource$Type): void
public static "getNext"(arg0: $Block$Type): $Optional<($Block)>
public static "getPrevious"(arg0: $Block$Type): $Optional<($Block)>
public "getChanceModifier"(): float
public static "getFirst"(arg0: $Block$Type): $Block
public "getFlammabilityZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "isFlammableZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): boolean
public "onRandomTick"(arg0: $BlockState$Type, arg1: $ServerLevel$Type, arg2: $BlockPos$Type, arg3: $RandomSource$Type): void
public "applyChangeOverTime"(arg0: $BlockState$Type, arg1: $ServerLevel$Type, arg2: $BlockPos$Type, arg3: $RandomSource$Type): void
public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
get "age"(): $WeatheringCopper$WeatherState
get "chanceModifier"(): float
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WeatheringCopperVerticalSlabBlock$Type = ($WeatheringCopperVerticalSlabBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WeatheringCopperVerticalSlabBlock_ = $WeatheringCopperVerticalSlabBlock$Type;
}}
declare module "packages/org/violetmoon/quark/content/tweaks/module/$CompassesWorkEverywhereModule" {
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$ZGatherHints, $ZGatherHints$Type} from "packages/org/violetmoon/zeta/event/play/loading/$ZGatherHints"
import {$ZPlayerTick$Start, $ZPlayerTick$Start$Type} from "packages/org/violetmoon/zeta/event/play/entity/player/$ZPlayerTick$Start"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $CompassesWorkEverywhereModule extends $ZetaModule {
static "enableCompassNerf": boolean
static "enableClockNerf": boolean
static "enableNether": boolean
static "enableEnd": boolean
static readonly "TAG_CLOCK_CALCULATED": string
static readonly "TAG_COMPASS_CALCULATED": string
static readonly "TAG_WAS_IN_NETHER": string
static readonly "TAG_POSITION_SET": string
static readonly "TAG_NETHER_TARGET_X": string
static readonly "TAG_NETHER_TARGET_Z": string
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public static "isClockCalculated"(arg0: $ItemStack$Type): boolean
public static "tickClock"(arg0: $ItemStack$Type): void
public static "tickCompass"(arg0: $Player$Type, arg1: $ItemStack$Type): void
public "addAdditionalHints"(arg0: $ZGatherHints$Type): void
public static "isCompassCalculated"(arg0: $ItemStack$Type): boolean
public "onUpdate"(arg0: $ZPlayerTick$Start$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CompassesWorkEverywhereModule$Type = ($CompassesWorkEverywhereModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CompassesWorkEverywhereModule_ = $CompassesWorkEverywhereModule$Type;
}}
declare module "packages/org/violetmoon/zeta/config/$Config" {
import {$Annotation, $Annotation$Type} from "packages/java/lang/annotation/$Annotation"
import {$Class, $Class$Type} from "packages/java/lang/$Class"

export interface $Config extends $Annotation {

 "name"(): string
 "flag"(): string
 "description"(): string
 "equals"(arg0: any): boolean
 "toString"(): string
 "hashCode"(): integer
 "annotationType"(): $Class<(any)>
}

export namespace $Config {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Config$Type = ($Config);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Config_ = $Config$Type;
}}
declare module "packages/org/violetmoon/quark/content/building/block/$ThatchBlock" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$ZetaFlammableBlock, $ZetaFlammableBlock$Type} from "packages/org/violetmoon/zeta/block/$ZetaFlammableBlock"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $ThatchBlock extends $ZetaFlammableBlock {
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(arg0: $ZetaModule$Type)

public "fallOn"(arg0: $Level$Type, arg1: $BlockState$Type, arg2: $BlockPos$Type, arg3: $Entity$Type, arg4: float): void
public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ThatchBlock$Type = ($ThatchBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ThatchBlock_ = $ThatchBlock$Type;
}}
declare module "packages/org/violetmoon/zeta/network/$IZetaMessage" {
import {$IZetaNetworkEventContext, $IZetaNetworkEventContext$Type} from "packages/org/violetmoon/zeta/network/$IZetaNetworkEventContext"

export interface $IZetaMessage {

 "receive"(arg0: $IZetaNetworkEventContext$Type): boolean

(arg0: $IZetaNetworkEventContext$Type): boolean
}

export namespace $IZetaMessage {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IZetaMessage$Type = ($IZetaMessage);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IZetaMessage_ = $IZetaMessage$Type;
}}
declare module "packages/org/violetmoon/zeta/event/play/entity/$ZEntityJoinLevel" {
import {$IZetaPlayEvent, $IZetaPlayEvent$Type} from "packages/org/violetmoon/zeta/event/bus/$IZetaPlayEvent"
import {$Cancellable, $Cancellable$Type} from "packages/org/violetmoon/zeta/event/bus/$Cancellable"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export interface $ZEntityJoinLevel extends $IZetaPlayEvent, $Cancellable {

 "getEntity"(): $Entity
 "cancel"(): void
 "setCanceled"(arg0: boolean): void
 "isCanceled"(): boolean
}

export namespace $ZEntityJoinLevel {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZEntityJoinLevel$Type = ($ZEntityJoinLevel);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZEntityJoinLevel_ = $ZEntityJoinLevel$Type;
}}
declare module "packages/org/violetmoon/zeta/module/$ZetaLoadModuleAnnotationData" {
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$ZetaLoadModule, $ZetaLoadModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaLoadModule"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $ZetaLoadModuleAnnotationData extends $Record {

constructor(clazz: $Class$Type<(any)>, category: string, name: string, description: string, antiOverlap: (string)[], enabledByDefault: boolean, clientReplacement: boolean, loadPhase: integer)

public "clazz"(): $Class<(any)>
public "name"(): string
public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "description"(): string
public "category"(): string
public "loadPhase"(): integer
public static "fromForgeThing"(arg0: $Class$Type<(any)>, arg1: $Map$Type<(string), (any)>): $ZetaLoadModuleAnnotationData
public "clientReplacement"(): boolean
public "antiOverlap"(): (string)[]
public "enabledByDefault"(): boolean
public static "fromAnnotation"(arg0: $Class$Type<(any)>, arg1: $ZetaLoadModule$Type): $ZetaLoadModuleAnnotationData
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZetaLoadModuleAnnotationData$Type = ($ZetaLoadModuleAnnotationData);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZetaLoadModuleAnnotationData_ = $ZetaLoadModuleAnnotationData$Type;
}}
declare module "packages/org/violetmoon/quark/content/world/config/$BigStoneClusterConfig$Builder" {
import {$ClusterSizeConfig$Builder, $ClusterSizeConfig$Builder$Type} from "packages/org/violetmoon/zeta/config/type/$ClusterSizeConfig$Builder"

export class $BigStoneClusterConfig$Builder<B extends $BigStoneClusterConfig$Builder<(B)>> extends $ClusterSizeConfig$Builder<(B)> {

constructor()

public "enabled"(arg0: boolean): B
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BigStoneClusterConfig$Builder$Type<B> = ($BigStoneClusterConfig$Builder<(B)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BigStoneClusterConfig$Builder_<B> = $BigStoneClusterConfig$Builder$Type<(B)>;
}}
declare module "packages/org/violetmoon/zeta/mixin/plugin/$DelegateReturnValueModifier" {
import {$Annotation, $Annotation$Type} from "packages/java/lang/annotation/$Annotation"
import {$Class, $Class$Type} from "packages/java/lang/$Class"

export interface $DelegateReturnValueModifier extends $Annotation {

 "target"(): (string)[]
 "desc"(): string
 "delegate"(): string
 "equals"(arg0: any): boolean
 "toString"(): string
 "hashCode"(): integer
 "annotationType"(): $Class<(any)>
}

export namespace $DelegateReturnValueModifier {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DelegateReturnValueModifier$Type = ($DelegateReturnValueModifier);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DelegateReturnValueModifier_ = $DelegateReturnValueModifier$Type;
}}
declare module "packages/org/violetmoon/zetaimplforge/event/play/entity/player/$ForgeZPlayerDestroyItem" {
import {$ZPlayerDestroyItem, $ZPlayerDestroyItem$Type} from "packages/org/violetmoon/zeta/event/play/entity/player/$ZPlayerDestroyItem"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$PlayerDestroyItemEvent, $PlayerDestroyItemEvent$Type} from "packages/net/minecraftforge/event/entity/player/$PlayerDestroyItemEvent"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export class $ForgeZPlayerDestroyItem implements $ZPlayerDestroyItem {

constructor(arg0: $PlayerDestroyItemEvent$Type)

public "getOriginal"(): $ItemStack
public "getHand"(): $InteractionHand
public "getEntity"(): $Player
get "original"(): $ItemStack
get "hand"(): $InteractionHand
get "entity"(): $Player
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ForgeZPlayerDestroyItem$Type = ($ForgeZPlayerDestroyItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ForgeZPlayerDestroyItem_ = $ForgeZPlayerDestroyItem$Type;
}}
declare module "packages/org/violetmoon/quark/api/$ICrawlSpaceBlock" {
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export interface $ICrawlSpaceBlock {

 "crawlHeight"(arg0: $Level$Type, arg1: $BlockState$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): double
 "isLog"(arg0: $ServerPlayer$Type, arg1: $BlockState$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): boolean
 "canCrawl"(arg0: $Level$Type, arg1: $BlockState$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): boolean

(arg0: $Level$Type, arg1: $BlockState$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): double
}

export namespace $ICrawlSpaceBlock {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ICrawlSpaceBlock$Type = ($ICrawlSpaceBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ICrawlSpaceBlock_ = $ICrawlSpaceBlock$Type;
}}
declare module "packages/org/violetmoon/zeta/event/play/entity/player/$ZPlayerTick$End" {
import {$ZPlayerTick, $ZPlayerTick$Type} from "packages/org/violetmoon/zeta/event/play/entity/player/$ZPlayerTick"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"

export interface $ZPlayerTick$End extends $ZPlayerTick {

 "getPlayer"(): $Player

(): $Player
}

export namespace $ZPlayerTick$End {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZPlayerTick$End$Type = ($ZPlayerTick$End);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZPlayerTick$End_ = $ZPlayerTick$End$Type;
}}
declare module "packages/org/violetmoon/quark/addons/oddities/inventory/$EnchantmentMatrix$Piece" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Enchantment, $Enchantment$Type} from "packages/net/minecraft/world/item/enchantment/$Enchantment"
import {$EnchantmentMatrix$EnchantmentDataWrapper, $EnchantmentMatrix$EnchantmentDataWrapper$Type} from "packages/org/violetmoon/quark/addons/oddities/inventory/$EnchantmentMatrix$EnchantmentDataWrapper"

export class $EnchantmentMatrix$Piece {
 "enchant": $Enchantment
 "level": integer
 "color": integer
 "type": integer
 "x": integer
 "y": integer
 "xp": integer
 "blocks": ((integer)[])[]
 "marked": boolean
 "influence": integer

constructor()
constructor(arg0: $EnchantmentMatrix$EnchantmentDataWrapper$Type, arg1: integer)

public "getValue"(): integer
public "rotate"(): void
public "readFromNBT"(arg0: $CompoundTag$Type): void
public "getMaxXP"(): integer
public "writeToNBT"(arg0: $CompoundTag$Type): void
public "generateBlocks"(): void
get "value"(): integer
get "maxXP"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EnchantmentMatrix$Piece$Type = ($EnchantmentMatrix$Piece);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EnchantmentMatrix$Piece_ = $EnchantmentMatrix$Piece$Type;
}}
declare module "packages/org/violetmoon/zeta/multiloader/$Env" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$Runnable, $Runnable$Type} from "packages/java/lang/$Runnable"

export class $Env extends $Enum<($Env)> {
static readonly "CLIENT": $Env
static readonly "SERVER": $Env
static readonly "CURRENT": $Env


public static "values"(): ($Env)[]
public static "valueOf"(arg0: string): $Env
public "isCurrent"(): boolean
public static "getCurrent"(): $Env
public "runIfCurrent"(arg0: $Supplier$Type<($Runnable$Type)>): void
public static "unsafeRunForDist"<T>(arg0: $Supplier$Type<($Supplier$Type<(T)>)>, arg1: $Supplier$Type<($Supplier$Type<(T)>)>): T
get "current"(): boolean
get "current"(): $Env
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Env$Type = (("server") | ("client")) | ($Env);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Env_ = $Env$Type;
}}
declare module "packages/org/violetmoon/quark/content/client/module/$VariantAnimalTexturesModule" {
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $VariantAnimalTexturesModule extends $ZetaModule {
static "enableCow": boolean
static "enablePig": boolean
static "enableChicken": boolean
static "enableShinyRabbit": boolean
static "enableShinyLlama": boolean
static "enableShinyDolphin": boolean
static "enableShinySlime": boolean
static "enableLGBTBees": boolean
static "everyBeeIsLGBT": boolean
static "shinyAnimalChance": integer
static "shinySparkles": boolean
static "staticEnabled": boolean
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $VariantAnimalTexturesModule$Type = ($VariantAnimalTexturesModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $VariantAnimalTexturesModule_ = $VariantAnimalTexturesModule$Type;
}}
declare module "packages/org/violetmoon/quark/content/building/block/$RopeBlock" {
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$Fluid, $Fluid$Type} from "packages/net/minecraft/world/level/material/$Fluid"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$SimpleWaterloggedBlock, $SimpleWaterloggedBlock$Type} from "packages/net/minecraft/world/level/block/$SimpleWaterloggedBlock"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$FluidState, $FluidState$Type} from "packages/net/minecraft/world/level/material/$FluidState"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$IZetaBlockItemProvider, $IZetaBlockItemProvider$Type} from "packages/org/violetmoon/zeta/registry/$IZetaBlockItemProvider"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$ZetaBlock, $ZetaBlock$Type} from "packages/org/violetmoon/zeta/block/$ZetaBlock"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$CollisionContext, $CollisionContext$Type} from "packages/net/minecraft/world/phys/shapes/$CollisionContext"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$BlockItem, $BlockItem$Type} from "packages/net/minecraft/world/item/$BlockItem"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"

export class $RopeBlock extends $ZetaBlock implements $IZetaBlockItemProvider, $SimpleWaterloggedBlock {
static "WATERLOGGED": $BooleanProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(arg0: string, arg1: $ZetaModule$Type, arg2: $BlockBehaviour$Properties$Type)

public "isLadderZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "provideItemBlock"(arg0: $Block$Type, arg1: $Item$Properties$Type): $BlockItem
public "propagatesSkylightDown"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type): boolean
public "getStateForPlacement"(arg0: $BlockPlaceContext$Type): $BlockState
public "getFireSpreadSpeedZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "getFlammabilityZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "neighborChanged"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type, arg3: $Block$Type, arg4: $BlockPos$Type, arg5: boolean): void
public "updateShape"(arg0: $BlockState$Type, arg1: $Direction$Type, arg2: $BlockState$Type, arg3: $LevelAccessor$Type, arg4: $BlockPos$Type, arg5: $BlockPos$Type): $BlockState
public "use"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type, arg3: $Player$Type, arg4: $InteractionHand$Type, arg5: $BlockHitResult$Type): $InteractionResult
public "getFluidState"(arg0: $BlockState$Type): $FluidState
public "canSurvive"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type): boolean
public "getCollisionShape"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $CollisionContext$Type): $VoxelShape
public "getShape"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $CollisionContext$Type): $VoxelShape
public "pullUp"(arg0: $Level$Type, arg1: $BlockPos$Type): boolean
public "pullDown"(arg0: $Level$Type, arg1: $BlockPos$Type): boolean
public "getPickupSound"(): $Optional<($SoundEvent)>
public "canPlaceLiquid"(arg0: $BlockGetter$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: $Fluid$Type): boolean
public "placeLiquid"(arg0: $LevelAccessor$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: $FluidState$Type): boolean
public "pickupBlock"(arg0: $LevelAccessor$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type): $ItemStack
public "getPickupSound"(arg0: $BlockState$Type): $Optional<($SoundEvent)>
public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
get "pickupSound"(): $Optional<($SoundEvent)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RopeBlock$Type = ($RopeBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RopeBlock_ = $RopeBlock$Type;
}}
declare module "packages/org/violetmoon/zeta/network/$IZetaNetworkEventContext" {
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$CompletableFuture, $CompletableFuture$Type} from "packages/java/util/concurrent/$CompletableFuture"
import {$ZetaHandshakeMessage, $ZetaHandshakeMessage$Type} from "packages/org/violetmoon/zeta/network/$ZetaHandshakeMessage"
import {$Runnable, $Runnable$Type} from "packages/java/lang/$Runnable"

export interface $IZetaNetworkEventContext {

 "reply"(arg0: $ZetaHandshakeMessage$Type): void
 "enqueueWork"(arg0: $Runnable$Type): $CompletableFuture<(void)>
 "getSender"(): $ServerPlayer
}

export namespace $IZetaNetworkEventContext {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IZetaNetworkEventContext$Type = ($IZetaNetworkEventContext);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IZetaNetworkEventContext_ = $IZetaNetworkEventContext$Type;
}}
declare module "packages/org/violetmoon/quark/content/world/module/$AncientWoodModule" {
import {$ZCommonSetup, $ZCommonSetup$Type} from "packages/org/violetmoon/zeta/event/load/$ZCommonSetup"
import {$ZLootTableLoad, $ZLootTableLoad$Type} from "packages/org/violetmoon/zeta/event/play/loading/$ZLootTableLoad"
import {$WoodSetHandler$WoodSet, $WoodSetHandler$WoodSet$Type} from "packages/org/violetmoon/quark/base/handler/$WoodSetHandler$WoodSet"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$ConfiguredFeature, $ConfiguredFeature$Type} from "packages/net/minecraft/world/level/levelgen/feature/$ConfiguredFeature"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$ZRegister, $ZRegister$Type} from "packages/org/violetmoon/zeta/event/load/$ZRegister"
import {$ResourceKey, $ResourceKey$Type} from "packages/net/minecraft/resources/$ResourceKey"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ManualTrigger, $ManualTrigger$Type} from "packages/org/violetmoon/zeta/advancement/$ManualTrigger"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"

export class $AncientWoodModule extends $ZetaModule {
static "ancientFruitGivesExp": boolean
static "ancientFruitExpValue": integer
static "ancientCityLootWeight": integer
static "ancientCityLootQuality": integer
static "sniffingLootWeight": integer
static "sniffingLootQuality": integer
static "woodSet": $WoodSetHandler$WoodSet
static "ancient_leaves": $Block
static "ancient_sapling": $Block
static "ancient_fruit": $Item
static readonly "configuredFeatureKey": $ResourceKey<($ConfiguredFeature<(any), (any)>)>
static "ancientFruitTrigger": $ManualTrigger
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "register"(arg0: $ZRegister$Type): void
public "setup"(arg0: $ZCommonSetup$Type): void
public "onLootTableLoad"(arg0: $ZLootTableLoad$Type): void
set "up"(value: $ZCommonSetup$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AncientWoodModule$Type = ($AncientWoodModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AncientWoodModule_ = $AncientWoodModule$Type;
}}
declare module "packages/org/violetmoon/zeta/client/event/play/$ZScreenshot" {
import {$IZetaPlayEvent, $IZetaPlayEvent$Type} from "packages/org/violetmoon/zeta/event/bus/$IZetaPlayEvent"

export class $ZScreenshot implements $IZetaPlayEvent {

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZScreenshot$Type = ($ZScreenshot);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZScreenshot_ = $ZScreenshot$Type;
}}
declare module "packages/org/violetmoon/zetaimplforge/$ForgeZeta" {
import {$ZetaModuleManager, $ZetaModuleManager$Type} from "packages/org/violetmoon/zeta/module/$ZetaModuleManager"
import {$RaytracingUtil, $RaytracingUtil$Type} from "packages/org/violetmoon/zeta/util/$RaytracingUtil"
import {$EntityEvent$EntityConstructing, $EntityEvent$EntityConstructing$Type} from "packages/net/minecraftforge/event/entity/$EntityEvent$EntityConstructing"
import {$FurnaceFuelBurnTimeEvent, $FurnaceFuelBurnTimeEvent$Type} from "packages/net/minecraftforge/event/furnace/$FurnaceFuelBurnTimeEvent"
import {$RenderLayerRegistry, $RenderLayerRegistry$Type} from "packages/org/violetmoon/zeta/registry/$RenderLayerRegistry"
import {$EntitySpawnHandler, $EntitySpawnHandler$Type} from "packages/org/violetmoon/zeta/world/$EntitySpawnHandler"
import {$EntityTeleportEvent, $EntityTeleportEvent$Type} from "packages/net/minecraftforge/event/entity/$EntityTeleportEvent"
import {$VillagerTradesEvent, $VillagerTradesEvent$Type} from "packages/net/minecraftforge/event/village/$VillagerTradesEvent"
import {$PlayerEvent, $PlayerEvent$Type} from "packages/net/minecraftforge/event/entity/player/$PlayerEvent"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$IZetaLoadEvent, $IZetaLoadEvent$Type} from "packages/org/violetmoon/zeta/event/bus/$IZetaLoadEvent"
import {$Event$Result, $Event$Result$Type} from "packages/net/minecraftforge/eventbus/api/$Event$Result"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$PlayerEvent$PlayerLoggedOutEvent, $PlayerEvent$PlayerLoggedOutEvent$Type} from "packages/net/minecraftforge/event/entity/player/$PlayerEvent$PlayerLoggedOutEvent"
import {$ZetaEventBus, $ZetaEventBus$Type} from "packages/org/violetmoon/zeta/event/bus/$ZetaEventBus"
import {$ZResult, $ZResult$Type} from "packages/org/violetmoon/zeta/event/bus/$ZResult"
import {$LivingConversionEvent, $LivingConversionEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingConversionEvent"
import {$BonemealEvent, $BonemealEvent$Type} from "packages/net/minecraftforge/event/entity/player/$BonemealEvent"
import {$PlayerInteractEvent$RightClickItem, $PlayerInteractEvent$RightClickItem$Type} from "packages/net/minecraftforge/event/entity/player/$PlayerInteractEvent$RightClickItem"
import {$BlockEvent$BlockToolModificationEvent, $BlockEvent$BlockToolModificationEvent$Type} from "packages/net/minecraftforge/event/level/$BlockEvent$BlockToolModificationEvent"
import {$BlockEvent$BreakEvent, $BlockEvent$BreakEvent$Type} from "packages/net/minecraftforge/event/level/$BlockEvent$BreakEvent"
import {$PlayerEvent$PlayerLoggedInEvent, $PlayerEvent$PlayerLoggedInEvent$Type} from "packages/net/minecraftforge/event/entity/player/$PlayerEvent$PlayerLoggedInEvent"
import {$BlockEvent$EntityPlaceEvent, $BlockEvent$EntityPlaceEvent$Type} from "packages/net/minecraftforge/event/level/$BlockEvent$EntityPlaceEvent"
import {$ZetaRegistry, $ZetaRegistry$Type} from "packages/org/violetmoon/zeta/registry/$ZetaRegistry"
import {$PottedPlantRegistry, $PottedPlantRegistry$Type} from "packages/org/violetmoon/zeta/registry/$PottedPlantRegistry"
import {$LivingFallEvent, $LivingFallEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingFallEvent"
import {$LivingDropsEvent, $LivingDropsEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingDropsEvent"
import {$PlayerInteractEvent, $PlayerInteractEvent$Type} from "packages/net/minecraftforge/event/entity/player/$PlayerInteractEvent"
import {$RegisterEvent, $RegisterEvent$Type} from "packages/net/minecraftforge/registries/$RegisterEvent"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$VariantRegistry, $VariantRegistry$Type} from "packages/org/violetmoon/zeta/registry/$VariantRegistry"
import {$ItemTooltipEvent, $ItemTooltipEvent$Type} from "packages/net/minecraftforge/event/entity/player/$ItemTooltipEvent"
import {$TickEvent$PlayerTickEvent, $TickEvent$PlayerTickEvent$Type} from "packages/net/minecraftforge/event/$TickEvent$PlayerTickEvent"
import {$CraftingExtensionsRegistry, $CraftingExtensionsRegistry$Type} from "packages/org/violetmoon/zeta/registry/$CraftingExtensionsRegistry"
import {$EntityItemPickupEvent, $EntityItemPickupEvent$Type} from "packages/net/minecraftforge/event/entity/player/$EntityItemPickupEvent"
import {$PlayerInteractEvent$EntityInteract, $PlayerInteractEvent$EntityInteract$Type} from "packages/net/minecraftforge/event/entity/player/$PlayerInteractEvent$EntityInteract"
import {$BrewingRegistry, $BrewingRegistry$Type} from "packages/org/violetmoon/zeta/registry/$BrewingRegistry"
import {$MobSpawnEvent$FinalizeSpawn, $MobSpawnEvent$FinalizeSpawn$Type} from "packages/net/minecraftforge/event/entity/living/$MobSpawnEvent$FinalizeSpawn"
import {$AnvilUpdateEvent, $AnvilUpdateEvent$Type} from "packages/net/minecraftforge/event/$AnvilUpdateEvent"
import {$LootTableLoadEvent, $LootTableLoadEvent$Type} from "packages/net/minecraftforge/event/$LootTableLoadEvent"
import {$TickEvent$ServerTickEvent, $TickEvent$ServerTickEvent$Type} from "packages/net/minecraftforge/event/$TickEvent$ServerTickEvent"
import {$PlayerDestroyItemEvent, $PlayerDestroyItemEvent$Type} from "packages/net/minecraftforge/event/entity/player/$PlayerDestroyItemEvent"
import {$EntityJoinLevelEvent, $EntityJoinLevelEvent$Type} from "packages/net/minecraftforge/event/entity/$EntityJoinLevelEvent"
import {$Logger, $Logger$Type} from "packages/org/apache/logging/log4j/$Logger"
import {$ZetaSide, $ZetaSide$Type} from "packages/org/violetmoon/zeta/util/$ZetaSide"
import {$DyeablesRegistry, $DyeablesRegistry$Type} from "packages/org/violetmoon/zeta/registry/$DyeablesRegistry"
import {$RegistryUtil, $RegistryUtil$Type} from "packages/org/violetmoon/zeta/util/$RegistryUtil"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$LivingChangeTargetEvent, $LivingChangeTargetEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingChangeTargetEvent"
import {$IZetaPlayEvent, $IZetaPlayEvent$Type} from "packages/org/violetmoon/zeta/event/bus/$IZetaPlayEvent"
import {$BabyEntitySpawnEvent, $BabyEntitySpawnEvent$Type} from "packages/net/minecraftforge/event/entity/living/$BabyEntitySpawnEvent"
import {$LivingDeathEvent, $LivingDeathEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingDeathEvent"
import {$PlayerEvent$Clone, $PlayerEvent$Clone$Type} from "packages/net/minecraftforge/event/entity/player/$PlayerEvent$Clone"
import {$LivingConversionEvent$Post, $LivingConversionEvent$Post$Type} from "packages/net/minecraftforge/event/entity/living/$LivingConversionEvent$Post"
import {$AttachCapabilitiesEvent, $AttachCapabilitiesEvent$Type} from "packages/net/minecraftforge/event/$AttachCapabilitiesEvent"
import {$ZetaNetworkHandler, $ZetaNetworkHandler$Type} from "packages/org/violetmoon/zeta/network/$ZetaNetworkHandler"
import {$SleepingLocationCheckEvent, $SleepingLocationCheckEvent$Type} from "packages/net/minecraftforge/event/entity/player/$SleepingLocationCheckEvent"
import {$PlayerInteractEvent$EntityInteractSpecific, $PlayerInteractEvent$EntityInteractSpecific$Type} from "packages/net/minecraftforge/event/entity/player/$PlayerInteractEvent$EntityInteractSpecific"
import {$LivingConversionEvent$Pre, $LivingConversionEvent$Pre$Type} from "packages/net/minecraftforge/event/entity/living/$LivingConversionEvent$Pre"
import {$NameChanger, $NameChanger$Type} from "packages/org/violetmoon/zeta/util/$NameChanger"
import {$AdvancementModifierRegistry, $AdvancementModifierRegistry$Type} from "packages/org/violetmoon/zeta/advancement/$AdvancementModifierRegistry"
import {$AnimalTameEvent, $AnimalTameEvent$Type} from "packages/net/minecraftforge/event/entity/living/$AnimalTameEvent"
import {$MobSpawnEvent, $MobSpawnEvent$Type} from "packages/net/minecraftforge/event/entity/living/$MobSpawnEvent"
import {$WandererTradesEvent, $WandererTradesEvent$Type} from "packages/net/minecraftforge/event/village/$WandererTradesEvent"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$AddReloadListenerEvent, $AddReloadListenerEvent$Type} from "packages/net/minecraftforge/event/$AddReloadListenerEvent"
import {$EntityAttributeCreationEvent, $EntityAttributeCreationEvent$Type} from "packages/net/minecraftforge/event/entity/$EntityAttributeCreationEvent"
import {$SectionDefinition, $SectionDefinition$Type} from "packages/org/violetmoon/zeta/config/$SectionDefinition"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$PlayerEvent$BreakSpeed, $PlayerEvent$BreakSpeed$Type} from "packages/net/minecraftforge/event/entity/player/$PlayerEvent$BreakSpeed"
import {$FMLLoadCompleteEvent, $FMLLoadCompleteEvent$Type} from "packages/net/minecraftforge/fml/event/lifecycle/$FMLLoadCompleteEvent"
import {$LivingEvent$LivingTickEvent, $LivingEvent$LivingTickEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingEvent$LivingTickEvent"
import {$RequiredModTooltipHandler, $RequiredModTooltipHandler$Type} from "packages/org/violetmoon/zeta/util/handler/$RequiredModTooltipHandler"
import {$EntityMobGriefingEvent, $EntityMobGriefingEvent$Type} from "packages/net/minecraftforge/event/entity/$EntityMobGriefingEvent"
import {$ConfigManager, $ConfigManager$Type} from "packages/org/violetmoon/zeta/config/$ConfigManager"
import {$FuelHandler, $FuelHandler$Type} from "packages/org/violetmoon/zeta/util/handler/$FuelHandler"
import {$PlayerInteractEvent$RightClickBlock, $PlayerInteractEvent$RightClickBlock$Type} from "packages/net/minecraftforge/event/entity/player/$PlayerInteractEvent$RightClickBlock"
import {$ZetaCapabilityManager, $ZetaCapabilityManager$Type} from "packages/org/violetmoon/zeta/capability/$ZetaCapabilityManager"
import {$BlockExtensionFactory, $BlockExtensionFactory$Type} from "packages/org/violetmoon/zeta/block/ext/$BlockExtensionFactory"
import {$IZetaConfigInternals, $IZetaConfigInternals$Type} from "packages/org/violetmoon/zeta/config/$IZetaConfigInternals"
import {$AnvilRepairEvent, $AnvilRepairEvent$Type} from "packages/net/minecraftforge/event/entity/player/$AnvilRepairEvent"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$TagsUpdatedEvent, $TagsUpdatedEvent$Type} from "packages/net/minecraftforge/event/$TagsUpdatedEvent"
import {$ItemExtensionFactory, $ItemExtensionFactory$Type} from "packages/org/violetmoon/zeta/item/ext/$ItemExtensionFactory"
import {$FMLCommonSetupEvent, $FMLCommonSetupEvent$Type} from "packages/net/minecraftforge/fml/event/lifecycle/$FMLCommonSetupEvent"
import {$TickEvent$LevelTickEvent, $TickEvent$LevelTickEvent$Type} from "packages/net/minecraftforge/event/$TickEvent$LevelTickEvent"
import {$NoteBlockEvent$Play, $NoteBlockEvent$Play$Type} from "packages/net/minecraftforge/event/level/$NoteBlockEvent$Play"

export class $ForgeZeta extends $Zeta {
static readonly "ZETA_ID": string
static readonly "GLOBAL_LOG": $Logger
readonly "log": $Logger
readonly "modid": string
readonly "side": $ZetaSide
readonly "loadBus": $ZetaEventBus<($IZetaLoadEvent)>
readonly "playBus": $ZetaEventBus<($IZetaPlayEvent)>
readonly "modules": $ZetaModuleManager
readonly "registry": $ZetaRegistry
readonly "registryUtil": $RegistryUtil
readonly "renderLayerRegistry": $RenderLayerRegistry
readonly "dyeables": $DyeablesRegistry
readonly "craftingExtensions": $CraftingExtensionsRegistry
readonly "brewingRegistry": $BrewingRegistry
readonly "advancementModifierRegistry": $AdvancementModifierRegistry
readonly "pottedPlantRegistry": $PottedPlantRegistry
readonly "requiredModTooltipHandler": $RequiredModTooltipHandler
readonly "variantRegistry": $VariantRegistry
readonly "capabilityManager": $ZetaCapabilityManager
readonly "blockExtensions": $BlockExtensionFactory
readonly "itemExtensions": $ItemExtensionFactory
readonly "raytracingUtil": $RaytracingUtil
readonly "nameChanger": $NameChanger
readonly "fuel": $FuelHandler
 "configManager": $ConfigManager
 "configInternals": $IZetaConfigInternals
 "network": $ZetaNetworkHandler
 "entitySpawn": $EntitySpawnHandler

constructor(arg0: string, arg1: $Logger$Type)

public "start"(): void
public static "to"(arg0: $ZResult$Type): $Event$Result
public static "from"(arg0: $Event$Result$Type): $ZResult
public "mobSpawnFinalizeSpawnLowest"(arg0: $MobSpawnEvent$FinalizeSpawn$Type): void
public "loadComplete"(arg0: $FMLLoadCompleteEvent$Type): void
public "fireExternalEvent"<E, T extends E>(arg0: T): T
public "getModDisplayName"(arg0: string): string
public "blockBreak"(arg0: $BlockEvent$BreakEvent$Type): void
public "player"(arg0: $PlayerEvent$Type): void
public "tagsUpdated"(arg0: $TagsUpdatedEvent$Type): void
public "livingDrops"(arg0: $LivingDropsEvent$Type): void
public "commonSetup"(arg0: $FMLCommonSetupEvent$Type): void
public "sleepingLocationCheck"(arg0: $SleepingLocationCheckEvent$Type): void
public "blockToolModification"(arg0: $BlockEvent$BlockToolModificationEvent$Type): void
public "playerLoggedIn"(arg0: $PlayerEvent$PlayerLoggedInEvent$Type): void
public "createItemExtensionFactory"(): $ItemExtensionFactory
public "createCraftingExtensionsRegistry"(): $CraftingExtensionsRegistry
public "createBrewingRegistry"(): $BrewingRegistry
public "createNetworkHandler"(arg0: integer): $ZetaNetworkHandler
public "createPottedPlantRegistry"(): $PottedPlantRegistry
public "createCapabilityManager"(): $ZetaCapabilityManager
public "makeConfigInternals"(arg0: $SectionDefinition$Type): $IZetaConfigInternals
public "createRaytracingUtil"(): $RaytracingUtil
public "fireRightClickBlock"(arg0: $Player$Type, arg1: $InteractionHand$Type, arg2: $BlockPos$Type, arg3: $BlockHitResult$Type): boolean
public "createBlockExtensionFactory"(): $BlockExtensionFactory
public "playerInteractEntityInteractSpecific"(arg0: $PlayerInteractEvent$EntityInteractSpecific$Type): void
public "entityAttributeCreation"(arg0: $EntityAttributeCreationEvent$Type): void
public "livingConversionPre"(arg0: $LivingConversionEvent$Pre$Type): void
public "livingConversionPost"(arg0: $LivingConversionEvent$Post$Type): void
public "babyEntitySpawnLowest"(arg0: $BabyEntitySpawnEvent$Type): void
public "playerInteractRightClickBlock"(arg0: $PlayerInteractEvent$RightClickBlock$Type): void
public "playerInteractEntityInteract"(arg0: $PlayerInteractEvent$EntityInteract$Type): void
public "playerInteractRightClickItem"(arg0: $PlayerInteractEvent$RightClickItem$Type): void
public "mobSpawnFinalizeSpawn"(arg0: $MobSpawnEvent$FinalizeSpawn$Type): void
public "rightClickBlock"(arg0: $PlayerInteractEvent$RightClickBlock$Type): void
public "rightClickItem"(arg0: $PlayerInteractEvent$RightClickItem$Type): void
public "rightClickBlockLow"(arg0: $PlayerInteractEvent$RightClickBlock$Type): void
public "registerHighest"(arg0: $RegisterEvent$Type): void
public "addReloadListener"(arg0: $AddReloadListenerEvent$Type): void
public "anvilUpdate"(arg0: $AnvilUpdateEvent$Type): void
public "levelTickStart"(arg0: $TickEvent$LevelTickEvent$Type): void
public "livingDeath"(arg0: $LivingDeathEvent$Type): void
public "lootTableLoad"(arg0: $LootTableLoadEvent$Type): void
public "livingDeathLowest"(arg0: $LivingDeathEvent$Type): void
public "playerTickEnd"(arg0: $TickEvent$PlayerTickEvent$Type): void
public "playNoteBlock"(arg0: $NoteBlockEvent$Play$Type): void
public "blockEntityCaps"(arg0: $AttachCapabilitiesEvent$Type<($BlockEntity$Type)>): void
public "serverTickStart"(arg0: $TickEvent$ServerTickEvent$Type): void
public "livingTick"(arg0: $LivingEvent$LivingTickEvent$Type): void
public "anvilUpdateLowest"(arg0: $AnvilUpdateEvent$Type): void
public "entityMobGriefing"(arg0: $EntityMobGriefingEvent$Type): void
public "entityJoinLevel"(arg0: $EntityJoinLevelEvent$Type): void
public "itemStackCaps"(arg0: $AttachCapabilitiesEvent$Type<($ItemStack$Type)>): void
public "entityConstruct"(arg0: $EntityEvent$EntityConstructing$Type): void
public "livingDropsLowest"(arg0: $LivingDropsEvent$Type): void
public "serverTickEnd"(arg0: $TickEvent$ServerTickEvent$Type): void
public "playerTickStart"(arg0: $TickEvent$PlayerTickEvent$Type): void
public "babyEntitySpawn"(arg0: $BabyEntitySpawnEvent$Type): void
public "playerInteract"(arg0: $PlayerInteractEvent$Type): void
public "anvilUpdateHighest"(arg0: $AnvilUpdateEvent$Type): void
public "entityInteract"(arg0: $PlayerInteractEvent$EntityInteract$Type): void
public "levelCaps"(arg0: $AttachCapabilitiesEvent$Type<($Level$Type)>): void
public "livingConversion"(arg0: $LivingConversionEvent$Type): void
public "levelTickEnd"(arg0: $TickEvent$LevelTickEvent$Type): void
public "livingChangeTarget"(arg0: $LivingChangeTargetEvent$Type): void
public "blockEntityPlace"(arg0: $BlockEvent$EntityPlaceEvent$Type): void
public "playerDestroyItem"(arg0: $PlayerDestroyItemEvent$Type): void
public "livingFall"(arg0: $LivingFallEvent$Type): void
public "bonemeal"(arg0: $BonemealEvent$Type): void
public "animalTame"(arg0: $AnimalTameEvent$Type): void
public "playerClone"(arg0: $PlayerEvent$Clone$Type): void
public "entityItemPickup"(arg0: $EntityItemPickupEvent$Type): void
public "wandererTrades"(arg0: $WandererTradesEvent$Type): void
public "playerBreakSpeed"(arg0: $PlayerEvent$BreakSpeed$Type): void
public "entityTeleport"(arg0: $EntityTeleportEvent$Type): void
public "mobSpawn"(arg0: $MobSpawnEvent$Type): void
public "villagerTrades"(arg0: $VillagerTradesEvent$Type): void
public "anvilRepair"(arg0: $AnvilRepairEvent$Type): void
public "itemTooltip"(arg0: $ItemTooltipEvent$Type): void
public "playerLoggedOut"(arg0: $PlayerEvent$PlayerLoggedOutEvent$Type): void
public "isModLoaded"(arg0: string): boolean
public "furnaceFuelBurnTime"(arg0: $FurnaceFuelBurnTimeEvent$Type): void
public "createRegistry"(): $ZetaRegistry
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ForgeZeta$Type = ($ForgeZeta);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ForgeZeta_ = $ForgeZeta$Type;
}}
declare module "packages/org/violetmoon/zeta/client/event/play/$ZScreen$Init$Post" {
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$ZScreen$Init, $ZScreen$Init$Type} from "packages/org/violetmoon/zeta/client/event/play/$ZScreen$Init"

export interface $ZScreen$Init$Post extends $ZScreen$Init {

 "getListenersList"(): $List<($GuiEventListener)>
 "removeListener"(arg0: $GuiEventListener$Type): void
 "addListener"(arg0: $GuiEventListener$Type): void
 "getScreen"(): $Screen
}

export namespace $ZScreen$Init$Post {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZScreen$Init$Post$Type = ($ZScreen$Init$Post);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZScreen$Init$Post_ = $ZScreen$Init$Post$Type;
}}
declare module "packages/org/violetmoon/zeta/block/$ZetaSaplingBlock" {
import {$IntegerProperty, $IntegerProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$IntegerProperty"
import {$BooleanSupplier, $BooleanSupplier$Type} from "packages/java/util/function/$BooleanSupplier"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$FluidState, $FluidState$Type} from "packages/net/minecraft/world/level/material/$FluidState"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$ToolAction, $ToolAction$Type} from "packages/net/minecraftforge/common/$ToolAction"
import {$IForgeBlock, $IForgeBlock$Type} from "packages/net/minecraftforge/common/extensions/$IForgeBlock"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$AbstractTreeGrower, $AbstractTreeGrower$Type} from "packages/net/minecraft/world/level/block/grower/$AbstractTreeGrower"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$CreativeModeTab, $CreativeModeTab$Type} from "packages/net/minecraft/world/item/$CreativeModeTab"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$IZetaBlock, $IZetaBlock$Type} from "packages/org/violetmoon/zeta/block/$IZetaBlock"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$UseOnContext, $UseOnContext$Type} from "packages/net/minecraft/world/item/context/$UseOnContext"
import {$SaplingBlock, $SaplingBlock$Type} from "packages/net/minecraft/world/level/block/$SaplingBlock"
import {$SoundType, $SoundType$Type} from "packages/net/minecraft/world/level/block/$SoundType"
import {$IPlantable, $IPlantable$Type} from "packages/net/minecraftforge/common/$IPlantable"
import {$IZetaBlockExtensions, $IZetaBlockExtensions$Type} from "packages/org/violetmoon/zeta/block/ext/$IZetaBlockExtensions"
import {$ResourceKey, $ResourceKey$Type} from "packages/net/minecraft/resources/$ResourceKey"
import {$ItemLike, $ItemLike$Type} from "packages/net/minecraft/world/level/$ItemLike"
import {$BlockAndTintGetter, $BlockAndTintGetter$Type} from "packages/net/minecraft/world/level/$BlockAndTintGetter"

export class $ZetaSaplingBlock extends $SaplingBlock implements $IZetaBlock, $IZetaBlockExtensions, $IForgeBlock {
static readonly "STAGE": $IntegerProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(arg0: string, arg1: $ZetaModule$Type, arg2: $AbstractTreeGrower$Type)

public "getModule"(): $ZetaModule
public "canSustainPlant"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type, arg4: $IPlantable$Type): boolean
public "isLadder"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "isConduitFrame"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): boolean
public "doesConditionApply"(): boolean
public "setCondition"(arg0: $BooleanSupplier$Type): $ZetaSaplingBlock
public "getEnchantPowerBonus"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type): float
public "shouldDisplayFluidOverlay"(arg0: $BlockState$Type, arg1: $BlockAndTintGetter$Type, arg2: $BlockPos$Type, arg3: $FluidState$Type): boolean
public "getToolModifiedState"(arg0: $BlockState$Type, arg1: $UseOnContext$Type, arg2: $ToolAction$Type, arg3: boolean): $BlockState
public "getBeaconColorMultiplier"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): (float)[]
public "makesOpenTrapdoorAboveClimbable"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockState$Type): boolean
public "getSoundType"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): $SoundType
public "isScaffolding"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "getLightEmission"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type): integer
public "isFlammable"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): boolean
public "canStickTo"(arg0: $BlockState$Type, arg1: $BlockState$Type): boolean
public "getFireSpreadSpeed"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "getFlammability"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "isStickyBlock"(arg0: $BlockState$Type): boolean
public "collisionExtendsVertically"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): boolean
public "getBlock"(): $Block
public "getFireSpreadSpeedZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "getFlammabilityZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "setCreativeTab"(arg0: $ResourceKey$Type<($CreativeModeTab$Type)>): $Block
public "setCreativeTab"(arg0: $ResourceKey$Type<($CreativeModeTab$Type)>, arg1: $ItemLike$Type, arg2: boolean): $Block
public "isConduitFrameZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): boolean
public "isLadderZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "isStickyBlockZeta"(arg0: $BlockState$Type): boolean
public "isScaffoldingZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "canStickToZeta"(arg0: $BlockState$Type, arg1: $BlockState$Type): boolean
public "isFlammableZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): boolean
public "getSoundTypeZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): $SoundType
public "makesOpenTrapdoorAboveClimbableZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockState$Type): boolean
public "canSustainPlantZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type, arg4: string): boolean
public "getToolModifiedStateZeta"(arg0: $BlockState$Type, arg1: $UseOnContext$Type, arg2: string, arg3: boolean): $BlockState
public "collisionExtendsVerticallyZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): boolean
public "shouldDisplayFluidOverlayZeta"(arg0: $BlockState$Type, arg1: $BlockAndTintGetter$Type, arg2: $BlockPos$Type, arg3: $FluidState$Type): boolean
public "getEnchantPowerBonusZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type): float
public "getBeaconColorMultiplierZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): (float)[]
public "getLightEmissionZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type): integer
public "isEnabled"(): boolean
public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
get "module"(): $ZetaModule
set "condition"(value: $BooleanSupplier$Type)
get "block"(): $Block
set "creativeTab"(value: $ResourceKey$Type<($CreativeModeTab$Type)>)
get "enabled"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZetaSaplingBlock$Type = ($ZetaSaplingBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZetaSaplingBlock_ = $ZetaSaplingBlock$Type;
}}
declare module "packages/org/violetmoon/quark/content/automation/entity/$Gravisand" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Packet, $Packet$Type} from "packages/net/minecraft/network/protocol/$Packet"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$FallingBlockEntity, $FallingBlockEntity$Type} from "packages/net/minecraft/world/entity/item/$FallingBlockEntity"
import {$ClientGamePacketListener, $ClientGamePacketListener$Type} from "packages/net/minecraft/network/protocol/game/$ClientGamePacketListener"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$MoverType, $MoverType$Type} from "packages/net/minecraft/world/entity/$MoverType"

export class $Gravisand extends $FallingBlockEntity {
 "blockState": $BlockState
 "time": integer
 "dropItem": boolean
 "cancelDrop": boolean
 "blockData": $CompoundTag
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(arg0: $EntityType$Type<(any)>, arg1: $Level$Type)
constructor(arg0: $Level$Type, arg1: double, arg2: double, arg3: double, arg4: float)

public "tick"(): void
public "causeFallDamage"(arg0: float, arg1: float, arg2: $DamageSource$Type): boolean
public "move"(arg0: $MoverType$Type, arg1: $Vec3$Type): void
public "getAddEntityPacket"(): $Packet<($ClientGamePacketListener)>
get "addEntityPacket"(): $Packet<($ClientGamePacketListener)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Gravisand$Type = ($Gravisand);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Gravisand_ = $Gravisand$Type;
}}
declare module "packages/org/violetmoon/quark/content/building/block/$HollowLogBlock" {
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$EnumProperty, $EnumProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$EnumProperty"
import {$Direction$Axis, $Direction$Axis$Type} from "packages/net/minecraft/core/$Direction$Axis"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$HollowPillarBlock, $HollowPillarBlock$Type} from "packages/org/violetmoon/quark/content/building/block/$HollowPillarBlock"

export class $HollowLogBlock extends $HollowPillarBlock {
static readonly "WATERLOGGED": $BooleanProperty
static readonly "AXIS": $EnumProperty<($Direction$Axis)>
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(arg0: $Block$Type, arg1: $ZetaModule$Type, arg2: boolean)
constructor(arg0: string, arg1: $Block$Type, arg2: $ZetaModule$Type, arg3: boolean)

public "isFlammable"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): boolean
public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $HollowLogBlock$Type = ($HollowLogBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $HollowLogBlock_ = $HollowLogBlock$Type;
}}
declare module "packages/org/violetmoon/quark/content/mobs/ai/$RaveGoal" {
import {$Goal, $Goal$Type} from "packages/net/minecraft/world/entity/ai/goal/$Goal"
import {$Crab, $Crab$Type} from "packages/org/violetmoon/quark/content/mobs/entity/$Crab"

export class $RaveGoal extends $Goal {

constructor(arg0: $Crab$Type)

public "canUse"(): boolean
public "start"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RaveGoal$Type = ($RaveGoal);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RaveGoal_ = $RaveGoal$Type;
}}
declare module "packages/org/violetmoon/quark/content/tweaks/client/layer/$ArmorStandFakePlayerLayer" {
import {$RenderLayer, $RenderLayer$Type} from "packages/net/minecraft/client/renderer/entity/layers/$RenderLayer"
import {$ArmorStand, $ArmorStand$Type} from "packages/net/minecraft/world/entity/decoration/$ArmorStand"
import {$RenderLayerParent, $RenderLayerParent$Type} from "packages/net/minecraft/client/renderer/entity/$RenderLayerParent"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$EntityModelSet, $EntityModelSet$Type} from "packages/net/minecraft/client/model/geom/$EntityModelSet"
import {$EntityModel, $EntityModel$Type} from "packages/net/minecraft/client/model/$EntityModel"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"

export class $ArmorStandFakePlayerLayer<M extends $EntityModel<($ArmorStand)>> extends $RenderLayer<($ArmorStand), (M)> {

constructor(arg0: $RenderLayerParent$Type<($ArmorStand$Type), (M)>, arg1: $EntityModelSet$Type)

public "render"(arg0: $PoseStack$Type, arg1: $MultiBufferSource$Type, arg2: integer, arg3: $ArmorStand$Type, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: float): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ArmorStandFakePlayerLayer$Type<M> = ($ArmorStandFakePlayerLayer<(M)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ArmorStandFakePlayerLayer_<M> = $ArmorStandFakePlayerLayer$Type<(M)>;
}}
declare module "packages/org/violetmoon/zeta/event/play/entity/living/$ZLivingConversion$Pre" {
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$ZLivingConversion, $ZLivingConversion$Type} from "packages/org/violetmoon/zeta/event/play/entity/living/$ZLivingConversion"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export interface $ZLivingConversion$Pre extends $ZLivingConversion {

 "getOutcome"(): $EntityType<(any)>
 "cancel"(): void
 "setCanceled"(arg0: boolean): void
 "isCanceled"(): boolean
 "getEntity"(): $LivingEntity
}

export namespace $ZLivingConversion$Pre {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZLivingConversion$Pre$Type = ($ZLivingConversion$Pre);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZLivingConversion$Pre_ = $ZLivingConversion$Pre$Type;
}}
declare module "packages/org/violetmoon/zeta/event/play/entity/player/$ZPlayer$LoggedIn" {
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$ZPlayer, $ZPlayer$Type} from "packages/org/violetmoon/zeta/event/play/entity/player/$ZPlayer"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export interface $ZPlayer$LoggedIn extends $ZPlayer {

 "getPlayer"(): $Player
 "getEntity"(): $LivingEntity

(): $Player
}

export namespace $ZPlayer$LoggedIn {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZPlayer$LoggedIn$Type = ($ZPlayer$LoggedIn);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZPlayer$LoggedIn_ = $ZPlayer$LoggedIn$Type;
}}
declare module "packages/org/violetmoon/zeta/config/type/$CompoundBiomeConfig" {
import {$BiomeTagConfig, $BiomeTagConfig$Type} from "packages/org/violetmoon/zeta/config/type/$BiomeTagConfig"
import {$Holder, $Holder$Type} from "packages/net/minecraft/core/$Holder"
import {$IBiomeConfig, $IBiomeConfig$Type} from "packages/org/violetmoon/zeta/config/type/$IBiomeConfig"
import {$ConfigFlagManager, $ConfigFlagManager$Type} from "packages/org/violetmoon/zeta/config/$ConfigFlagManager"
import {$Biome, $Biome$Type} from "packages/net/minecraft/world/level/biome/$Biome"
import {$StrictBiomeConfig, $StrictBiomeConfig$Type} from "packages/org/violetmoon/zeta/config/type/$StrictBiomeConfig"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"
import {$IConfigType, $IConfigType$Type} from "packages/org/violetmoon/zeta/config/type/$IConfigType"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $CompoundBiomeConfig implements $IBiomeConfig, $IConfigType {
 "tags": $BiomeTagConfig
 "biomes": $StrictBiomeConfig


public static "all"(): $CompoundBiomeConfig
public "canSpawn"(arg0: $Holder$Type<($Biome$Type)>): boolean
public static "fromBiomeTags"(arg0: boolean, ...arg1: ($TagKey$Type<($Biome$Type)>)[]): $CompoundBiomeConfig
public "onReload"(arg0: $ZetaModule$Type, arg1: $ConfigFlagManager$Type): void
public static "fromBiomeReslocs"(arg0: boolean, ...arg1: (string)[]): $CompoundBiomeConfig
public static "fromBiomeTagStrings"(arg0: boolean, ...arg1: (string)[]): $CompoundBiomeConfig
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CompoundBiomeConfig$Type = ($CompoundBiomeConfig);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CompoundBiomeConfig_ = $CompoundBiomeConfig$Type;
}}
declare module "packages/org/violetmoon/zetaimplforge/network/$ForgeNetworkEventContextImpl" {
import {$NetworkEvent$Context, $NetworkEvent$Context$Type} from "packages/net/minecraftforge/network/$NetworkEvent$Context"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$CompletableFuture, $CompletableFuture$Type} from "packages/java/util/concurrent/$CompletableFuture"
import {$IZetaNetworkEventContext, $IZetaNetworkEventContext$Type} from "packages/org/violetmoon/zeta/network/$IZetaNetworkEventContext"
import {$ZetaHandshakeMessage, $ZetaHandshakeMessage$Type} from "packages/org/violetmoon/zeta/network/$ZetaHandshakeMessage"
import {$Runnable, $Runnable$Type} from "packages/java/lang/$Runnable"
import {$SimpleChannel, $SimpleChannel$Type} from "packages/net/minecraftforge/network/simple/$SimpleChannel"

export class $ForgeNetworkEventContextImpl implements $IZetaNetworkEventContext {

constructor(arg0: $NetworkEvent$Context$Type, arg1: $SimpleChannel$Type)

public "reply"(arg0: $ZetaHandshakeMessage$Type): void
public "enqueueWork"(arg0: $Runnable$Type): $CompletableFuture<(void)>
public "getSender"(): $ServerPlayer
get "sender"(): $ServerPlayer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ForgeNetworkEventContextImpl$Type = ($ForgeNetworkEventContextImpl);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ForgeNetworkEventContextImpl_ = $ForgeNetworkEventContextImpl$Type;
}}
declare module "packages/org/violetmoon/zeta/block/$ZetaStairsBlock" {
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$StairsShape, $StairsShape$Type} from "packages/net/minecraft/world/level/block/state/properties/$StairsShape"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$FluidState, $FluidState$Type} from "packages/net/minecraft/world/level/material/$FluidState"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$ToolAction, $ToolAction$Type} from "packages/net/minecraftforge/common/$ToolAction"
import {$IForgeBlock, $IForgeBlock$Type} from "packages/net/minecraftforge/common/extensions/$IForgeBlock"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$DirectionProperty, $DirectionProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$DirectionProperty"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$Half, $Half$Type} from "packages/net/minecraft/world/level/block/state/properties/$Half"
import {$CreativeModeTab, $CreativeModeTab$Type} from "packages/net/minecraft/world/item/$CreativeModeTab"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$IZetaBlock, $IZetaBlock$Type} from "packages/org/violetmoon/zeta/block/$IZetaBlock"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$UseOnContext, $UseOnContext$Type} from "packages/net/minecraft/world/item/context/$UseOnContext"
import {$EnumProperty, $EnumProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$EnumProperty"
import {$IZetaBlockColorProvider, $IZetaBlockColorProvider$Type} from "packages/org/violetmoon/zeta/registry/$IZetaBlockColorProvider"
import {$SoundType, $SoundType$Type} from "packages/net/minecraft/world/level/block/$SoundType"
import {$StairBlock, $StairBlock$Type} from "packages/net/minecraft/world/level/block/$StairBlock"
import {$IPlantable, $IPlantable$Type} from "packages/net/minecraftforge/common/$IPlantable"
import {$IZetaBlockExtensions, $IZetaBlockExtensions$Type} from "packages/org/violetmoon/zeta/block/ext/$IZetaBlockExtensions"
import {$ResourceKey, $ResourceKey$Type} from "packages/net/minecraft/resources/$ResourceKey"
import {$ItemLike, $ItemLike$Type} from "packages/net/minecraft/world/level/$ItemLike"
import {$BlockAndTintGetter, $BlockAndTintGetter$Type} from "packages/net/minecraft/world/level/$BlockAndTintGetter"

export class $ZetaStairsBlock extends $StairBlock implements $IZetaBlock, $IZetaBlockColorProvider, $IZetaBlockExtensions, $IForgeBlock {
static readonly "FACING": $DirectionProperty
static readonly "HALF": $EnumProperty<($Half)>
static readonly "SHAPE": $EnumProperty<($StairsShape)>
static readonly "WATERLOGGED": $BooleanProperty
readonly "baseState": $BlockState
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(arg0: $IZetaBlock$Type, arg1: $ResourceKey$Type<($CreativeModeTab$Type)>)

public "getModule"(): $ZetaModule
public "isFlammableZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): boolean
public "canSustainPlant"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type, arg4: $IPlantable$Type): boolean
public "isLadder"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "isConduitFrame"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): boolean
public "doesConditionApply"(): boolean
public "getEnchantPowerBonus"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type): float
public "shouldDisplayFluidOverlay"(arg0: $BlockState$Type, arg1: $BlockAndTintGetter$Type, arg2: $BlockPos$Type, arg3: $FluidState$Type): boolean
public "getToolModifiedState"(arg0: $BlockState$Type, arg1: $UseOnContext$Type, arg2: $ToolAction$Type, arg3: boolean): $BlockState
public "getBeaconColorMultiplier"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): (float)[]
public "makesOpenTrapdoorAboveClimbable"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockState$Type): boolean
public "getSoundType"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): $SoundType
public "isScaffolding"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "getLightEmission"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type): integer
public "getBlockColorProviderName"(): string
public "getItemColorProviderName"(): string
public "getBeaconColorMultiplierZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): (float)[]
public "getFlammabilityZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "isFlammable"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): boolean
public "canStickTo"(arg0: $BlockState$Type, arg1: $BlockState$Type): boolean
public "getFireSpreadSpeed"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "getFlammability"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "isStickyBlock"(arg0: $BlockState$Type): boolean
public "collisionExtendsVertically"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): boolean
public "getBlock"(): $Block
public "getFireSpreadSpeedZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "setCreativeTab"(arg0: $ResourceKey$Type<($CreativeModeTab$Type)>): $Block
public "setCreativeTab"(arg0: $ResourceKey$Type<($CreativeModeTab$Type)>, arg1: $ItemLike$Type, arg2: boolean): $Block
public "isConduitFrameZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): boolean
public "isLadderZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "isStickyBlockZeta"(arg0: $BlockState$Type): boolean
public "isScaffoldingZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "canStickToZeta"(arg0: $BlockState$Type, arg1: $BlockState$Type): boolean
public "getSoundTypeZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): $SoundType
public "makesOpenTrapdoorAboveClimbableZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockState$Type): boolean
public "canSustainPlantZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type, arg4: string): boolean
public "getToolModifiedStateZeta"(arg0: $BlockState$Type, arg1: $UseOnContext$Type, arg2: string, arg3: boolean): $BlockState
public "collisionExtendsVerticallyZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): boolean
public "shouldDisplayFluidOverlayZeta"(arg0: $BlockState$Type, arg1: $BlockAndTintGetter$Type, arg2: $BlockPos$Type, arg3: $FluidState$Type): boolean
public "getEnchantPowerBonusZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type): float
public "getLightEmissionZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type): integer
public "isEnabled"(): boolean
public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
get "module"(): $ZetaModule
get "blockColorProviderName"(): string
get "itemColorProviderName"(): string
get "block"(): $Block
set "creativeTab"(value: $ResourceKey$Type<($CreativeModeTab$Type)>)
get "enabled"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZetaStairsBlock$Type = ($ZetaStairsBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZetaStairsBlock_ = $ZetaStairsBlock$Type;
}}
declare module "packages/org/violetmoon/quark/base/config/type/$RGBAColorConfig" {
import {$RGBColorConfig, $RGBColorConfig$Type} from "packages/org/violetmoon/quark/base/config/type/$RGBColorConfig"

export class $RGBAColorConfig extends $RGBColorConfig {
 "a": double
 "r": double
 "g": double
 "b": double


public "equals"(arg0: any): boolean
public "hashCode"(): integer
public static "forColor"(arg0: double, arg1: double, arg2: double, arg3: double): $RGBAColorConfig
public "getAlphaComponent"(): double
get "alphaComponent"(): double
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RGBAColorConfig$Type = ($RGBAColorConfig);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RGBAColorConfig_ = $RGBAColorConfig$Type;
}}
declare module "packages/org/violetmoon/quark/content/world/module/$BlossomTreesModule" {
import {$ZGatherHints, $ZGatherHints$Type} from "packages/org/violetmoon/zeta/event/play/loading/$ZGatherHints"
import {$ZCommonSetup, $ZCommonSetup$Type} from "packages/org/violetmoon/zeta/event/load/$ZCommonSetup"
import {$BlossomTreeConfig, $BlossomTreeConfig$Type} from "packages/org/violetmoon/quark/content/world/config/$BlossomTreeConfig"
import {$WoodSetHandler$WoodSet, $WoodSetHandler$WoodSet$Type} from "packages/org/violetmoon/quark/base/handler/$WoodSetHandler$WoodSet"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$BlossomTreesModule$BlossomTree, $BlossomTreesModule$BlossomTree$Type} from "packages/org/violetmoon/quark/content/world/module/$BlossomTreesModule$BlossomTree"
import {$ConfiguredFeature, $ConfiguredFeature$Type} from "packages/net/minecraft/world/level/levelgen/feature/$ConfiguredFeature"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ZRegister, $ZRegister$Type} from "packages/org/violetmoon/zeta/event/load/$ZRegister"
import {$ResourceKey, $ResourceKey$Type} from "packages/net/minecraft/resources/$ResourceKey"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"

export class $BlossomTreesModule extends $ZetaModule {
static readonly "BLUE_BLOSSOM_KEY": $ResourceKey<($ConfiguredFeature<(any), (any)>)>
static readonly "LAVENDER_BLOSSOM_KEY": $ResourceKey<($ConfiguredFeature<(any), (any)>)>
static readonly "ORANGE_BLOSSOM_KEY": $ResourceKey<($ConfiguredFeature<(any), (any)>)>
static readonly "YELLOW_BLOSSOM_KEY": $ResourceKey<($ConfiguredFeature<(any), (any)>)>
static readonly "RED_BLOSSOM_KEY": $ResourceKey<($ConfiguredFeature<(any), (any)>)>
 "blue": $BlossomTreeConfig
 "lavender": $BlossomTreeConfig
 "orange": $BlossomTreeConfig
 "yellow": $BlossomTreeConfig
 "red": $BlossomTreeConfig
static "dropLeafParticles": boolean
static "woodSet": $WoodSetHandler$WoodSet
static readonly "blossomTrees": $List<($BlossomTreesModule$BlossomTree)>
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "register"(arg0: $ZRegister$Type): void
public "setup"(arg0: $ZCommonSetup$Type): void
public "addAdditionalHints"(arg0: $ZGatherHints$Type): void
set "up"(value: $ZCommonSetup$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BlossomTreesModule$Type = ($BlossomTreesModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BlossomTreesModule_ = $BlossomTreesModule$Type;
}}
declare module "packages/org/violetmoon/quark/integration/claim/$IClaimIntegration" {
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export interface $IClaimIntegration {

 "canReplace"(arg0: $Player$Type, arg1: $BlockPos$Type): boolean
 "canPlace"(arg0: $Player$Type, arg1: $BlockPos$Type): boolean
 "canInteract"(arg0: $Player$Type, arg1: $BlockPos$Type): boolean
 "canBreak"(arg0: $Player$Type, arg1: $BlockPos$Type): boolean
 "canAttack"(arg0: $Player$Type, arg1: $Entity$Type): boolean
}

export namespace $IClaimIntegration {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IClaimIntegration$Type = ($IClaimIntegration);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IClaimIntegration_ = $IClaimIntegration$Type;
}}
declare module "packages/org/violetmoon/quark/content/tools/loot/$EnchantTome" {
import {$LootContext, $LootContext$Type} from "packages/net/minecraft/world/level/storage/loot/$LootContext"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$LootItemFunctionType, $LootItemFunctionType$Type} from "packages/net/minecraft/world/level/storage/loot/functions/$LootItemFunctionType"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$LootItemCondition, $LootItemCondition$Type} from "packages/net/minecraft/world/level/storage/loot/predicates/$LootItemCondition"
import {$BiFunction, $BiFunction$Type} from "packages/java/util/function/$BiFunction"
import {$LootItemConditionalFunction, $LootItemConditionalFunction$Type} from "packages/net/minecraft/world/level/storage/loot/functions/$LootItemConditionalFunction"

export class $EnchantTome extends $LootItemConditionalFunction {

constructor(arg0: ($LootItemCondition$Type)[])

public "getType"(): $LootItemFunctionType
public "m_7372_"(arg0: $ItemStack$Type, arg1: $LootContext$Type): $ItemStack
public static "decorate"(arg0: $BiFunction$Type<($ItemStack$Type), ($LootContext$Type), ($ItemStack$Type)>, arg1: $Consumer$Type<($ItemStack$Type)>, arg2: $LootContext$Type): $Consumer<($ItemStack)>
get "type"(): $LootItemFunctionType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EnchantTome$Type = ($EnchantTome);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EnchantTome_ = $EnchantTome$Type;
}}
declare module "packages/org/violetmoon/quark/content/tweaks/module/$RenewableSporeBlossomsModule" {
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$ZBonemeal, $ZBonemeal$Type} from "packages/org/violetmoon/zeta/event/play/$ZBonemeal"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $RenewableSporeBlossomsModule extends $ZetaModule {
 "boneMealChance": double
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "onBoneMealed"(arg0: $ZBonemeal$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RenewableSporeBlossomsModule$Type = ($RenewableSporeBlossomsModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RenewableSporeBlossomsModule_ = $RenewableSporeBlossomsModule$Type;
}}
declare module "packages/org/violetmoon/quark/content/world/gen/$FairyRingGenerator" {
import {$Holder, $Holder$Type} from "packages/net/minecraft/core/$Holder"
import {$ChunkGenerator, $ChunkGenerator$Type} from "packages/net/minecraft/world/level/chunk/$ChunkGenerator"
import {$Generator, $Generator$Type} from "packages/org/violetmoon/zeta/world/generator/$Generator"
import {$DimensionConfig, $DimensionConfig$Type} from "packages/org/violetmoon/zeta/config/type/$DimensionConfig"
import {$WorldGenRegion, $WorldGenRegion$Type} from "packages/net/minecraft/server/level/$WorldGenRegion"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$Biome, $Biome$Type} from "packages/net/minecraft/world/level/biome/$Biome"
import {$WorldGenLevel, $WorldGenLevel$Type} from "packages/net/minecraft/world/level/$WorldGenLevel"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $FairyRingGenerator extends $Generator {
readonly "dimConfig": $DimensionConfig

constructor(arg0: $DimensionConfig$Type)

public "generateChunk"(arg0: $WorldGenRegion$Type, arg1: $ChunkGenerator$Type, arg2: $RandomSource$Type, arg3: $BlockPos$Type): void
public static "spawnFairyRing"(arg0: $WorldGenLevel$Type, arg1: $ChunkGenerator$Type, arg2: $BlockPos$Type, arg3: $Holder$Type<($Biome$Type)>, arg4: $RandomSource$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FairyRingGenerator$Type = ($FairyRingGenerator);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FairyRingGenerator_ = $FairyRingGenerator$Type;
}}
declare module "packages/org/violetmoon/quark/addons/oddities/util/$CustomInfluence" {
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$IEnchantmentInfluencer, $IEnchantmentInfluencer$Type} from "packages/org/violetmoon/quark/api/$IEnchantmentInfluencer"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$Enchantment, $Enchantment$Type} from "packages/net/minecraft/world/item/enchantment/$Enchantment"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Influence, $Influence$Type} from "packages/org/violetmoon/quark/addons/oddities/util/$Influence"
import {$ParticleOptions, $ParticleOptions$Type} from "packages/net/minecraft/core/particles/$ParticleOptions"

export class $CustomInfluence extends $Record implements $IEnchantmentInfluencer {

constructor(strength: integer, color: integer, influence: $Influence$Type)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "color"(): integer
public "getEnchantmentInfluenceColor"(arg0: $BlockGetter$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type): (float)[]
public "influencesEnchantment"(arg0: $BlockGetter$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: $Enchantment$Type): boolean
public "influence"(): $Influence
public "strength"(): integer
public "getInfluenceStack"(arg0: $BlockGetter$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type): integer
public "dampensEnchantment"(arg0: $BlockGetter$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: $Enchantment$Type): boolean
public "getExtraParticleOptions"(arg0: $BlockGetter$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type): $ParticleOptions
public "getExtraParticleChance"(arg0: $BlockGetter$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type): double
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CustomInfluence$Type = ($CustomInfluence);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CustomInfluence_ = $CustomInfluence$Type;
}}
declare module "packages/org/violetmoon/quark/content/building/block/$GrateBlock" {
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$Fluid, $Fluid$Type} from "packages/net/minecraft/world/level/material/$Fluid"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$PathComputationType, $PathComputationType$Type} from "packages/net/minecraft/world/level/pathfinder/$PathComputationType"
import {$FluidState, $FluidState$Type} from "packages/net/minecraft/world/level/material/$FluidState"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$ZetaBlock, $ZetaBlock$Type} from "packages/org/violetmoon/zeta/block/$ZetaBlock"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$CollisionContext, $CollisionContext$Type} from "packages/net/minecraft/world/phys/shapes/$CollisionContext"
import {$SimpleFluidloggedBlock, $SimpleFluidloggedBlock$Type} from "packages/org/violetmoon/zeta/block/$SimpleFluidloggedBlock"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$ICrawlSpaceBlock, $ICrawlSpaceBlock$Type} from "packages/org/violetmoon/quark/api/$ICrawlSpaceBlock"

export class $GrateBlock extends $ZetaBlock implements $SimpleFluidloggedBlock, $ICrawlSpaceBlock {
static readonly "WATERLOGGED": $BooleanProperty
static readonly "LAVALOGGED": $BooleanProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(arg0: $ZetaModule$Type)

public "propagatesSkylightDown"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type): boolean
public "getStateForPlacement"(arg0: $BlockPlaceContext$Type): $BlockState
public "hasDynamicShape"(): boolean
public "crawlHeight"(arg0: $Level$Type, arg1: $BlockState$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): double
public "isLog"(arg0: $ServerPlayer$Type, arg1: $BlockState$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): boolean
public "canCrawl"(arg0: $Level$Type, arg1: $BlockState$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): boolean
public "collisionExtendsVerticallyZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): boolean
public "isPathfindable"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $PathComputationType$Type): boolean
public "neighborChanged"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type, arg3: $Block$Type, arg4: $BlockPos$Type, arg5: boolean): void
public "updateShape"(arg0: $BlockState$Type, arg1: $Direction$Type, arg2: $BlockState$Type, arg3: $LevelAccessor$Type, arg4: $BlockPos$Type, arg5: $BlockPos$Type): $BlockState
public "getFluidState"(arg0: $BlockState$Type): $FluidState
public "getCollisionShape"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $CollisionContext$Type): $VoxelShape
public "getShape"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $CollisionContext$Type): $VoxelShape
public "withFluid"(arg0: $BlockState$Type, arg1: $Fluid$Type): $BlockState
public "fluidContained"(arg0: $BlockState$Type): $Fluid
public "acceptsFluid"(arg0: $Fluid$Type): boolean
public "getPickupSound"(): $Optional<($SoundEvent)>
public "canPlaceLiquid"(arg0: $BlockGetter$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: $Fluid$Type): boolean
public "placeLiquid"(arg0: $LevelAccessor$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: $FluidState$Type): boolean
public "pickupBlock"(arg0: $LevelAccessor$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type): $ItemStack
public "getPickupSound"(arg0: $BlockState$Type): $Optional<($SoundEvent)>
public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
get "pickupSound"(): $Optional<($SoundEvent)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GrateBlock$Type = ($GrateBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GrateBlock_ = $GrateBlock$Type;
}}
declare module "packages/org/violetmoon/quark/content/mobs/ai/$FindPlaceToSleepGoal$Target" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $FindPlaceToSleepGoal$Target extends $Enum<($FindPlaceToSleepGoal$Target)> {
static readonly "LIT_FURNACE": $FindPlaceToSleepGoal$Target
static readonly "FURNACE": $FindPlaceToSleepGoal$Target
static readonly "GLOWING": $FindPlaceToSleepGoal$Target


public static "values"(): ($FindPlaceToSleepGoal$Target)[]
public static "valueOf"(arg0: string): $FindPlaceToSleepGoal$Target
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FindPlaceToSleepGoal$Target$Type = (("furnace") | ("glowing") | ("lit_furnace")) | ($FindPlaceToSleepGoal$Target);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FindPlaceToSleepGoal$Target_ = $FindPlaceToSleepGoal$Target$Type;
}}
declare module "packages/org/violetmoon/zetaimplforge/event/play/loading/$ForgeZVillagerTrades" {
import {$VillagerTradesEvent, $VillagerTradesEvent$Type} from "packages/net/minecraftforge/event/village/$VillagerTradesEvent"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ZVillagerTrades, $ZVillagerTrades$Type} from "packages/org/violetmoon/zeta/event/play/loading/$ZVillagerTrades"
import {$VillagerTrades$ItemListing, $VillagerTrades$ItemListing$Type} from "packages/net/minecraft/world/entity/npc/$VillagerTrades$ItemListing"
import {$Int2ObjectMap, $Int2ObjectMap$Type} from "packages/it/unimi/dsi/fastutil/ints/$Int2ObjectMap"
import {$VillagerProfession, $VillagerProfession$Type} from "packages/net/minecraft/world/entity/npc/$VillagerProfession"

export class $ForgeZVillagerTrades implements $ZVillagerTrades {

constructor(arg0: $VillagerTradesEvent$Type)

public "getType"(): $VillagerProfession
public "getTrades"(): $Int2ObjectMap<($List<($VillagerTrades$ItemListing)>)>
get "type"(): $VillagerProfession
get "trades"(): $Int2ObjectMap<($List<($VillagerTrades$ItemListing)>)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ForgeZVillagerTrades$Type = ($ForgeZVillagerTrades);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ForgeZVillagerTrades_ = $ForgeZVillagerTrades$Type;
}}
declare module "packages/org/violetmoon/zetaimplforge/event/play/$ForgeZBonemeal" {
import {$ZResult, $ZResult$Type} from "packages/org/violetmoon/zeta/event/bus/$ZResult"
import {$ZBonemeal, $ZBonemeal$Type} from "packages/org/violetmoon/zeta/event/play/$ZBonemeal"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BonemealEvent, $BonemealEvent$Type} from "packages/net/minecraftforge/event/entity/player/$BonemealEvent"

export class $ForgeZBonemeal implements $ZBonemeal {

constructor(arg0: $BonemealEvent$Type)

public "getStack"(): $ItemStack
public "setResult"(arg0: $ZResult$Type): void
public "getLevel"(): $Level
public "getResult"(): $ZResult
public "getBlock"(): $BlockState
public "getPos"(): $BlockPos
get "stack"(): $ItemStack
set "result"(value: $ZResult$Type)
get "level"(): $Level
get "result"(): $ZResult
get "block"(): $BlockState
get "pos"(): $BlockPos
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ForgeZBonemeal$Type = ($ForgeZBonemeal);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ForgeZBonemeal_ = $ForgeZBonemeal$Type;
}}
declare module "packages/org/violetmoon/quark/api/$IUsageTickerOverride" {
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export interface $IUsageTickerOverride {

 "getUsageTickerCountForItem"(arg0: $ItemStack$Type, arg1: $Predicate$Type<($ItemStack$Type)>): integer
 "shouldUsageTickerCheckMatchSize"(arg0: $ItemStack$Type): boolean
 "getUsageTickerItem"(arg0: $ItemStack$Type): $ItemStack

(arg0: $ItemStack$Type, arg1: $Predicate$Type<($ItemStack$Type)>): integer
}

export namespace $IUsageTickerOverride {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IUsageTickerOverride$Type = ($IUsageTickerOverride);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IUsageTickerOverride_ = $IUsageTickerOverride$Type;
}}
declare module "packages/org/violetmoon/zeta/config/$ConfigObjectMapper" {
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$ConfigFlagManager, $ConfigFlagManager$Type} from "packages/org/violetmoon/zeta/config/$ConfigFlagManager"
import {$Field, $Field$Type} from "packages/java/lang/reflect/$Field"
import {$IZetaConfigInternals, $IZetaConfigInternals$Type} from "packages/org/violetmoon/zeta/config/$IZetaConfigInternals"
import {$SectionDefinition$Builder, $SectionDefinition$Builder$Type} from "packages/org/violetmoon/zeta/config/$SectionDefinition$Builder"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $ConfigObjectMapper {

constructor()

public static "getField"(arg0: any, arg1: $Field$Type): any
public static "walkModuleFields"(arg0: $Class$Type<(any)>): $List<($Field)>
public static "readInto"(arg0: $SectionDefinition$Builder$Type, arg1: any, arg2: $ZetaModule$Type, arg3: $List$Type<($Consumer$Type<($IZetaConfigInternals$Type)>)>, arg4: $ConfigFlagManager$Type): void
public static "readInto"(arg0: $SectionDefinition$Builder$Type, arg1: any, arg2: $List$Type<($Consumer$Type<($IZetaConfigInternals$Type)>)>, arg3: $ConfigFlagManager$Type): void
public static "setField"(arg0: any, arg1: $Field$Type, arg2: any): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ConfigObjectMapper$Type = ($ConfigObjectMapper);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ConfigObjectMapper_ = $ConfigObjectMapper$Type;
}}
declare module "packages/org/violetmoon/zeta/recipe/$FlagIngredient" {
import {$Ingredient$Value, $Ingredient$Value$Type} from "packages/net/minecraft/world/item/crafting/$Ingredient$Value"
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$IZetaIngredient, $IZetaIngredient$Type} from "packages/org/violetmoon/zeta/recipe/$IZetaIngredient"
import {$IntList, $IntList$Type} from "packages/it/unimi/dsi/fastutil/ints/$IntList"
import {$ConfigFlagManager, $ConfigFlagManager$Type} from "packages/org/violetmoon/zeta/config/$ConfigFlagManager"
import {$Ingredient, $Ingredient$Type} from "packages/net/minecraft/world/item/crafting/$Ingredient"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$IZetaIngredientSerializer, $IZetaIngredientSerializer$Type} from "packages/org/violetmoon/zeta/recipe/$IZetaIngredientSerializer"

export class $FlagIngredient extends $Ingredient implements $IZetaIngredient<($FlagIngredient)> {
static readonly "EMPTY": $Ingredient
 "values": ($Ingredient$Value)[]
 "itemStacks": ($ItemStack)[]
 "stackingIds": $IntList

constructor(arg0: $Ingredient$Type, arg1: string, arg2: $ConfigFlagManager$Type, arg3: $IZetaIngredientSerializer$Type<($FlagIngredient$Type)>)

public "test"(arg0: $ItemStack$Type): boolean
public "isSimple"(): boolean
public "getStackingIds"(): $IntList
public "zetaGetSerializer"(): $IZetaIngredientSerializer<($FlagIngredient)>
public static "not"<T>(arg0: $Predicate$Type<(any)>): $Predicate<(T)>
public static "isEqual"<T>(arg0: any): $Predicate<(T)>
get "simple"(): boolean
get "stackingIds"(): $IntList
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FlagIngredient$Type = ($FlagIngredient);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FlagIngredient_ = $FlagIngredient$Type;
}}
declare module "packages/org/violetmoon/quark/content/mobs/ai/$DeliverFetchedItemGoal" {
import {$FollowOwnerGoal, $FollowOwnerGoal$Type} from "packages/net/minecraft/world/entity/ai/goal/$FollowOwnerGoal"
import {$Shiba, $Shiba$Type} from "packages/org/violetmoon/quark/content/mobs/entity/$Shiba"

export class $DeliverFetchedItemGoal extends $FollowOwnerGoal {
static readonly "TELEPORT_WHEN_DISTANCE_IS": integer

constructor(arg0: $Shiba$Type, arg1: double, arg2: float, arg3: float, arg4: boolean)

public "canUse"(): boolean
public "canContinueToUse"(): boolean
public "tick"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DeliverFetchedItemGoal$Type = ($DeliverFetchedItemGoal);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DeliverFetchedItemGoal_ = $DeliverFetchedItemGoal$Type;
}}
declare module "packages/org/violetmoon/zetaimplforge/api/$GatherAdvancementModifiersEvent" {
import {$ListenerList, $ListenerList$Type} from "packages/net/minecraftforge/eventbus/$ListenerList"
import {$Event, $Event$Type} from "packages/net/minecraftforge/eventbus/api/$Event"
import {$BooleanSupplier, $BooleanSupplier$Type} from "packages/java/util/function/$BooleanSupplier"
import {$IAdvancementModifierDelegate, $IAdvancementModifierDelegate$Type} from "packages/org/violetmoon/zeta/api/$IAdvancementModifierDelegate"
import {$BucketItem, $BucketItem$Type} from "packages/net/minecraft/world/item/$BucketItem"
import {$IAdvancementModifier, $IAdvancementModifier$Type} from "packages/org/violetmoon/zeta/api/$IAdvancementModifier"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$Biome, $Biome$Type} from "packages/net/minecraft/world/level/biome/$Biome"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ResourceKey, $ResourceKey$Type} from "packages/net/minecraft/resources/$ResourceKey"
import {$ItemLike, $ItemLike$Type} from "packages/net/minecraft/world/level/$ItemLike"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"
import {$ZGatherAdvancementModifiers, $ZGatherAdvancementModifiers$Type} from "packages/org/violetmoon/zeta/event/load/$ZGatherAdvancementModifiers"

export class $GatherAdvancementModifiersEvent extends $Event implements $ZGatherAdvancementModifiers {

constructor()
constructor(arg0: $Zeta$Type, arg1: $ZGatherAdvancementModifiers$Type)

public "register"(arg0: $IAdvancementModifier$Type): void
public "getDelegate"(): $IAdvancementModifierDelegate
public "getZeta"(): $Zeta
public "isCancelable"(): boolean
public "getModid"(): string
public "getListenerList"(): $ListenerList
public "hasResult"(): boolean
public "createMonsterHunterMod"(arg0: $Set$Type<($EntityType$Type<(any)>)>): $IAdvancementModifier
public "createFuriousCocktailMod"(arg0: $BooleanSupplier$Type, arg1: $Set$Type<($MobEffect$Type)>): $IAdvancementModifier
public "createAdventuringTimeMod"(arg0: $Set$Type<($ResourceKey$Type<($Biome$Type)>)>): $IAdvancementModifier
public "createFishyBusinessMod"(arg0: $Set$Type<($ItemLike$Type)>): $IAdvancementModifier
public "createASeedyPlaceMod"(arg0: $Set$Type<($Block$Type)>): $IAdvancementModifier
public "createWaxOnWaxOffMod"(arg0: $Set$Type<($Block$Type)>, arg1: $Set$Type<($Block$Type)>): $IAdvancementModifier
public "createTacticalFishingMod"(arg0: $Set$Type<($BucketItem$Type)>): $IAdvancementModifier
public "createGlowAndBeholdMod"(arg0: $Set$Type<($Block$Type)>): $IAdvancementModifier
public "createBalancedDietMod"(arg0: $Set$Type<($ItemLike$Type)>): $IAdvancementModifier
public "createTwoByTwoMod"(arg0: $Set$Type<($EntityType$Type<(any)>)>): $IAdvancementModifier
get "delegate"(): $IAdvancementModifierDelegate
get "zeta"(): $Zeta
get "cancelable"(): boolean
get "modid"(): string
get "listenerList"(): $ListenerList
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GatherAdvancementModifiersEvent$Type = ($GatherAdvancementModifiersEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GatherAdvancementModifiersEvent_ = $GatherAdvancementModifiersEvent$Type;
}}
declare module "packages/org/violetmoon/quark/content/building/block/$StoolBlock" {
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$Fluid, $Fluid$Type} from "packages/net/minecraft/world/level/material/$Fluid"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$SimpleWaterloggedBlock, $SimpleWaterloggedBlock$Type} from "packages/net/minecraft/world/level/block/$SimpleWaterloggedBlock"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$FluidState, $FluidState$Type} from "packages/net/minecraft/world/level/material/$FluidState"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$DyeColor, $DyeColor$Type} from "packages/net/minecraft/world/item/$DyeColor"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$ZetaBlock, $ZetaBlock$Type} from "packages/org/violetmoon/zeta/block/$ZetaBlock"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$CollisionContext, $CollisionContext$Type} from "packages/net/minecraft/world/phys/shapes/$CollisionContext"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"

export class $StoolBlock extends $ZetaBlock implements $SimpleWaterloggedBlock {
static readonly "WATERLOGGED": $BooleanProperty
static readonly "BIG": $BooleanProperty
static readonly "SAT_IN": $BooleanProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(arg0: $ZetaModule$Type, arg1: $DyeColor$Type)

public "propagatesSkylightDown"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type): boolean
public "getStateForPlacement"(arg0: $BlockPlaceContext$Type): $BlockState
public "blockClicked"(arg0: $Level$Type, arg1: $BlockPos$Type): void
public "updateEntityAfterFallOn"(arg0: $BlockGetter$Type, arg1: $Entity$Type): void
public "fallOn"(arg0: $Level$Type, arg1: $BlockState$Type, arg2: $BlockPos$Type, arg3: $Entity$Type, arg4: float): void
public "neighborChanged"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type, arg3: $Block$Type, arg4: $BlockPos$Type, arg5: boolean): void
public "updateShape"(arg0: $BlockState$Type, arg1: $Direction$Type, arg2: $BlockState$Type, arg3: $LevelAccessor$Type, arg4: $BlockPos$Type, arg5: $BlockPos$Type): $BlockState
public "use"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type, arg3: $Player$Type, arg4: $InteractionHand$Type, arg5: $BlockHitResult$Type): $InteractionResult
public "hasAnalogOutputSignal"(arg0: $BlockState$Type): boolean
public "getFluidState"(arg0: $BlockState$Type): $FluidState
public "getAnalogOutputSignal"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type): integer
public "getShape"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $CollisionContext$Type): $VoxelShape
public "tick"(arg0: $BlockState$Type, arg1: $ServerLevel$Type, arg2: $BlockPos$Type, arg3: $RandomSource$Type): void
public "getPickupSound"(): $Optional<($SoundEvent)>
public "canPlaceLiquid"(arg0: $BlockGetter$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: $Fluid$Type): boolean
public "placeLiquid"(arg0: $LevelAccessor$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: $FluidState$Type): boolean
public "pickupBlock"(arg0: $LevelAccessor$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type): $ItemStack
public "getPickupSound"(arg0: $BlockState$Type): $Optional<($SoundEvent)>
public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
get "pickupSound"(): $Optional<($SoundEvent)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $StoolBlock$Type = ($StoolBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $StoolBlock_ = $StoolBlock$Type;
}}
declare module "packages/org/violetmoon/quark/content/world/module/$MonsterBoxModule" {
import {$ZCommonSetup, $ZCommonSetup$Type} from "packages/org/violetmoon/zeta/event/load/$ZCommonSetup"
import {$ZLivingDrops, $ZLivingDrops$Type} from "packages/org/violetmoon/zeta/event/play/entity/living/$ZLivingDrops"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$DimensionConfig, $DimensionConfig$Type} from "packages/org/violetmoon/zeta/config/type/$DimensionConfig"
import {$MonsterBoxBlockEntity, $MonsterBoxBlockEntity$Type} from "packages/org/violetmoon/quark/content/world/block/be/$MonsterBoxBlockEntity"
import {$ZRegister, $ZRegister$Type} from "packages/org/violetmoon/zeta/event/load/$ZRegister"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"

export class $MonsterBoxModule extends $ZetaModule {
static readonly "TAG_MONSTER_BOX_SPAWNED": string
static readonly "MONSTER_BOX_LOOT_TABLE": $ResourceLocation
static readonly "MONSTER_BOX_SPAWNS_LOOT_TABLE": $ResourceLocation
static "blockEntityType": $BlockEntityType<($MonsterBoxBlockEntity)>
static "chancePerChunk": double
static "minY": integer
static "maxY": integer
static "minMobCount": integer
static "maxMobCount": integer
static "dimensions": $DimensionConfig
static "enableExtraLootTable": boolean
static "activationRange": double
static "searchRange": integer
static "monster_box": $Block
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "register"(arg0: $ZRegister$Type): void
public "setup"(arg0: $ZCommonSetup$Type): void
public "onDrops"(arg0: $ZLivingDrops$Type): void
set "up"(value: $ZCommonSetup$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MonsterBoxModule$Type = ($MonsterBoxModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MonsterBoxModule_ = $MonsterBoxModule$Type;
}}
declare module "packages/org/violetmoon/quark/content/building/client/render/entity/$GlassItemFrameRenderer" {
import {$EntityRendererProvider$Context, $EntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRendererProvider$Context"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$EntityRenderer, $EntityRenderer$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRenderer"
import {$GlassItemFrame, $GlassItemFrame$Type} from "packages/org/violetmoon/quark/content/building/entity/$GlassItemFrame"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $GlassItemFrameRenderer extends $EntityRenderer<($GlassItemFrame)> {
 "shadowRadius": float

constructor(arg0: $EntityRendererProvider$Context$Type)

public "render"(arg0: $GlassItemFrame$Type, arg1: float, arg2: float, arg3: $PoseStack$Type, arg4: $MultiBufferSource$Type, arg5: integer): void
public "getTextureLocation"(arg0: $GlassItemFrame$Type): $ResourceLocation
public "getRenderOffset"(arg0: $GlassItemFrame$Type, arg1: float): $Vec3
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GlassItemFrameRenderer$Type = ($GlassItemFrameRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GlassItemFrameRenderer_ = $GlassItemFrameRenderer$Type;
}}
declare module "packages/org/violetmoon/zeta/util/handler/$ToolInteractionHandler" {
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$ZRightClickBlock, $ZRightClickBlock$Type} from "packages/org/violetmoon/zeta/event/play/entity/player/$ZRightClickBlock"
import {$ZCommonSetup, $ZCommonSetup$Type} from "packages/org/violetmoon/zeta/event/load/$ZCommonSetup"
import {$ToolAction, $ToolAction$Type} from "packages/net/minecraftforge/common/$ToolAction"
import {$ZBlock$BlockToolModification, $ZBlock$BlockToolModification$Type} from "packages/org/violetmoon/zeta/event/play/$ZBlock$BlockToolModification"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $ToolInteractionHandler {

constructor()

public static "registerWaxedBlockBooleanProperty"(arg0: $ZetaModule$Type, arg1: $Block$Type, arg2: $BooleanProperty$Type): void
public static "addModifiers"(arg0: $ZCommonSetup$Type): void
public static "toolActionEvent"(arg0: $ZBlock$BlockToolModification$Type): void
public static "itemUse"(arg0: $ZRightClickBlock$Type): void
public static "registerWaxedBlock"(arg0: $ZetaModule$Type, arg1: $Block$Type, arg2: $Block$Type): void
public static "registerInteraction"(arg0: $ToolAction$Type, arg1: $Block$Type, arg2: $Block$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ToolInteractionHandler$Type = ($ToolInteractionHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ToolInteractionHandler_ = $ToolInteractionHandler$Type;
}}
declare module "packages/org/violetmoon/quark/content/tools/client/tooltip/$SeedPouchClientTooltipComponent" {
import {$TooltipComponent, $TooltipComponent$Type} from "packages/net/minecraft/world/inventory/tooltip/$TooltipComponent"
import {$FormattedCharSequence, $FormattedCharSequence$Type} from "packages/net/minecraft/util/$FormattedCharSequence"
import {$Font, $Font$Type} from "packages/net/minecraft/client/gui/$Font"
import {$MultiBufferSource$BufferSource, $MultiBufferSource$BufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource$BufferSource"
import {$Matrix4f, $Matrix4f$Type} from "packages/org/joml/$Matrix4f"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$ClientTooltipComponent, $ClientTooltipComponent$Type} from "packages/net/minecraft/client/gui/screens/inventory/tooltip/$ClientTooltipComponent"

export class $SeedPouchClientTooltipComponent implements $ClientTooltipComponent {

constructor(arg0: $ItemStack$Type)

public "getWidth"(arg0: $Font$Type): integer
public "getHeight"(): integer
public "renderImage"(arg0: $Font$Type, arg1: integer, arg2: integer, arg3: $GuiGraphics$Type): void
public static "create"(arg0: $TooltipComponent$Type): $ClientTooltipComponent
public "renderText"(arg0: $Font$Type, arg1: integer, arg2: integer, arg3: $Matrix4f$Type, arg4: $MultiBufferSource$BufferSource$Type): void
public static "create"(arg0: $FormattedCharSequence$Type): $ClientTooltipComponent
get "height"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SeedPouchClientTooltipComponent$Type = ($SeedPouchClientTooltipComponent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SeedPouchClientTooltipComponent_ = $SeedPouchClientTooltipComponent$Type;
}}
declare module "packages/org/violetmoon/quark/content/world/block/$CorundumClusterBlock" {
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$Fluid, $Fluid$Type} from "packages/net/minecraft/world/level/material/$Fluid"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$SimpleWaterloggedBlock, $SimpleWaterloggedBlock$Type} from "packages/net/minecraft/world/level/block/$SimpleWaterloggedBlock"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$PathComputationType, $PathComputationType$Type} from "packages/net/minecraft/world/level/pathfinder/$PathComputationType"
import {$FluidState, $FluidState$Type} from "packages/net/minecraft/world/level/material/$FluidState"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$ZetaBlock, $ZetaBlock$Type} from "packages/org/violetmoon/zeta/block/$ZetaBlock"
import {$CorundumBlock, $CorundumBlock$Type} from "packages/org/violetmoon/quark/content/world/block/$CorundumBlock"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$CollisionContext, $CollisionContext$Type} from "packages/net/minecraft/world/phys/shapes/$CollisionContext"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$EnumProperty, $EnumProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$EnumProperty"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"

export class $CorundumClusterBlock extends $ZetaBlock implements $SimpleWaterloggedBlock {
readonly "base": $CorundumBlock
static readonly "FACING": $EnumProperty<($Direction)>
static readonly "WATERLOGGED": $BooleanProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(arg0: $CorundumBlock$Type)

public "getStateForPlacement"(arg0: $BlockPlaceContext$Type): $BlockState
public "isPathfindable"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $PathComputationType$Type): boolean
public "neighborChanged"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type, arg3: $Block$Type, arg4: $BlockPos$Type, arg5: boolean): void
public "updateShape"(arg0: $BlockState$Type, arg1: $Direction$Type, arg2: $BlockState$Type, arg3: $LevelAccessor$Type, arg4: $BlockPos$Type, arg5: $BlockPos$Type): $BlockState
public "getFluidState"(arg0: $BlockState$Type): $FluidState
public "canSurvive"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type): boolean
public "getShape"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $CollisionContext$Type): $VoxelShape
public "getPickupSound"(): $Optional<($SoundEvent)>
public "canPlaceLiquid"(arg0: $BlockGetter$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: $Fluid$Type): boolean
public "placeLiquid"(arg0: $LevelAccessor$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: $FluidState$Type): boolean
public "pickupBlock"(arg0: $LevelAccessor$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type): $ItemStack
public "getPickupSound"(arg0: $BlockState$Type): $Optional<($SoundEvent)>
public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
get "pickupSound"(): $Optional<($SoundEvent)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CorundumClusterBlock$Type = ($CorundumClusterBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CorundumClusterBlock_ = $CorundumClusterBlock$Type;
}}
declare module "packages/org/violetmoon/zeta/client/event/play/$ZRenderGuiOverlay" {
import {$IZetaPlayEvent, $IZetaPlayEvent$Type} from "packages/org/violetmoon/zeta/event/bus/$IZetaPlayEvent"
import {$Window, $Window$Type} from "packages/com/mojang/blaze3d/platform/$Window"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export interface $ZRenderGuiOverlay extends $IZetaPlayEvent {

 "getPartialTick"(): float
 "getWindow"(): $Window
 "shouldDrawSurvivalElements"(): boolean
 "getGuiGraphics"(): $GuiGraphics
 "getLeftHeight"(): integer
}

export namespace $ZRenderGuiOverlay {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZRenderGuiOverlay$Type = ($ZRenderGuiOverlay);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZRenderGuiOverlay_ = $ZRenderGuiOverlay$Type;
}}
declare module "packages/org/violetmoon/quark/content/building/module/$GrateModule" {
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$ZRegister, $ZRegister$Type} from "packages/org/violetmoon/zeta/event/load/$ZRegister"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $GrateModule extends $ZetaModule {
static "grate": $Block
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "register"(arg0: $ZRegister$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GrateModule$Type = ($GrateModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GrateModule_ = $GrateModule$Type;
}}
declare module "packages/org/violetmoon/quark/base/handler/$SortingHandler" {
import {$Comparator, $Comparator$Type} from "packages/java/util/$Comparator"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$IItemHandler, $IItemHandler$Type} from "packages/net/minecraftforge/items/$IItemHandler"

export class $SortingHandler {

constructor()

public static "sortInventory"(arg0: $IItemHandler$Type, arg1: (integer)[]): void
public static "sortInventory"(arg0: $Player$Type, arg1: boolean): void
public static "sortInventory"(arg0: $IItemHandler$Type, arg1: integer, arg2: (integer)[]): void
public static "sortInventory"(arg0: $IItemHandler$Type, arg1: integer, arg2: integer, arg3: (integer)[]): void
public static "mergeStacks"(arg0: $List$Type<($ItemStack$Type)>): void
public static "jointComparator"(arg0: $List$Type<($Comparator$Type<($ItemStack$Type)>)>): $Comparator<($ItemStack)>
public static "jointComparator"(arg0: $Comparator$Type<($ItemStack$Type)>, arg1: $List$Type<($Comparator$Type<($ItemStack$Type)>)>): $Comparator<($ItemStack)>
public static "sortStackList"(arg0: $List$Type<($ItemStack$Type)>): void
public static "potionTypeCompare"(arg0: $ItemStack$Type, arg1: $ItemStack$Type): integer
public static "fallbackNBTCompare"(arg0: $ItemStack$Type, arg1: $ItemStack$Type): integer
public static "damageCompare"(arg0: $ItemStack$Type, arg1: $ItemStack$Type): integer
public static "potionComplexityCompare"(arg0: $ItemStack$Type, arg1: $ItemStack$Type): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SortingHandler$Type = ($SortingHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SortingHandler_ = $SortingHandler$Type;
}}
declare module "packages/org/violetmoon/zeta/config/$SectionDefinition" {
import {$Definition, $Definition$Type} from "packages/org/violetmoon/zeta/config/$Definition"
import {$ValueDefinition, $ValueDefinition$Type} from "packages/org/violetmoon/zeta/config/$ValueDefinition"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$Iterable, $Iterable$Type} from "packages/java/lang/$Iterable"
import {$SectionDefinition$Builder, $SectionDefinition$Builder$Type} from "packages/org/violetmoon/zeta/config/$SectionDefinition$Builder"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $SectionDefinition extends $Definition {
readonly "subsections": $Map<(string), ($SectionDefinition)>
readonly "values": $Map<(string), ($ValueDefinition<(any)>)>
readonly "name": string
readonly "lowercaseName": string
readonly "englishDisplayName": string
readonly "comment": $List<(string)>
 "parent": $SectionDefinition
 "path": $List<(string)>
readonly "hint": any

constructor(arg0: $SectionDefinition$Builder$Type)

public "toString"(): string
public "getValue"<T>(arg0: string, arg1: $Class$Type<(T)>): $ValueDefinition<(T)>
public "getValue"(arg0: string): $ValueDefinition<(any)>
public "finish"(): void
public "getSubsections"(): $Collection<($SectionDefinition)>
public "getValueErased"<T>(arg0: string, arg1: $Class$Type<(any)>): $ValueDefinition<(T)>
public "getAllChildren"(): $Iterable<($Definition)>
public "getValues"(): $Collection<($ValueDefinition<(any)>)>
get "subsections"(): $Collection<($SectionDefinition)>
get "allChildren"(): $Iterable<($Definition)>
get "values"(): $Collection<($ValueDefinition<(any)>)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SectionDefinition$Type = ($SectionDefinition);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SectionDefinition_ = $SectionDefinition$Type;
}}
declare module "packages/org/violetmoon/quark/content/tweaks/module/$ArmedArmorStandsModule" {
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZConfigChanged, $ZConfigChanged$Type} from "packages/org/violetmoon/zeta/event/load/$ZConfigChanged"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $ArmedArmorStandsModule extends $ZetaModule {
static "staticEnabled": boolean
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "configChange"(arg0: $ZConfigChanged$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ArmedArmorStandsModule$Type = ($ArmedArmorStandsModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ArmedArmorStandsModule_ = $ArmedArmorStandsModule$Type;
}}
declare module "packages/org/violetmoon/zeta/client/$HumanoidArmorModelGetter" {
import {$HumanoidModel, $HumanoidModel$Type} from "packages/net/minecraft/client/model/$HumanoidModel"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export interface $HumanoidArmorModelGetter {

 "getHumanoidArmorModel"(arg0: $LivingEntity$Type, arg1: $ItemStack$Type, arg2: $EquipmentSlot$Type, arg3: $HumanoidModel$Type<(any)>): $HumanoidModel<(any)>

(arg0: $LivingEntity$Type, arg1: $ItemStack$Type, arg2: $EquipmentSlot$Type, arg3: $HumanoidModel$Type<(any)>): $HumanoidModel<(any)>
}

export namespace $HumanoidArmorModelGetter {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $HumanoidArmorModelGetter$Type = ($HumanoidArmorModelGetter);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $HumanoidArmorModelGetter_ = $HumanoidArmorModelGetter$Type;
}}
declare module "packages/org/violetmoon/zetaimplforge/mixin/delegate/$WeatheringCopperDelegate" {
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"

export class $WeatheringCopperDelegate {

constructor()

public static "customWeatheringPrevious"(arg0: $Optional$Type<($BlockState$Type)>, arg1: $BlockState$Type): $Optional<($BlockState)>
public static "customWeatheringFirst"(arg0: $BlockState$Type, arg1: $BlockState$Type): $BlockState
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WeatheringCopperDelegate$Type = ($WeatheringCopperDelegate);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WeatheringCopperDelegate_ = $WeatheringCopperDelegate$Type;
}}
declare module "packages/org/violetmoon/quark/content/building/block/$WoodPostBlock$PostSideType" {
import {$StringRepresentable$EnumCodec, $StringRepresentable$EnumCodec$Type} from "packages/net/minecraft/util/$StringRepresentable$EnumCodec"
import {$StringRepresentable, $StringRepresentable$Type} from "packages/net/minecraft/util/$StringRepresentable"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$Keyable, $Keyable$Type} from "packages/com/mojang/serialization/$Keyable"
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"

export class $WoodPostBlock$PostSideType extends $Enum<($WoodPostBlock$PostSideType)> implements $StringRepresentable {
static readonly "NONE": $WoodPostBlock$PostSideType
static readonly "CHAIN": $WoodPostBlock$PostSideType
static readonly "OTHER_POST": $WoodPostBlock$PostSideType


public "toString"(): string
public static "values"(): ($WoodPostBlock$PostSideType)[]
public static "valueOf"(arg0: string): $WoodPostBlock$PostSideType
public "getSerializedName"(): string
public "isSolid"(): boolean
public static "fromEnumWithMapping"<E extends ($Enum<(E)>) & ($StringRepresentable)>(arg0: $Supplier$Type<((E)[])>, arg1: $Function$Type<(string), (string)>): $StringRepresentable$EnumCodec<(E)>
public static "keys"(arg0: ($StringRepresentable$Type)[]): $Keyable
public static "fromEnum"<E extends ($Enum<(E)>) & ($StringRepresentable)>(arg0: $Supplier$Type<((E)[])>): $StringRepresentable$EnumCodec<(E)>
get "serializedName"(): string
get "solid"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WoodPostBlock$PostSideType$Type = (("chain") | ("none") | ("other_post")) | ($WoodPostBlock$PostSideType);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WoodPostBlock$PostSideType_ = $WoodPostBlock$PostSideType$Type;
}}
declare module "packages/org/violetmoon/zetaimplforge/client/$IZetaForgeItemStuff" {
import {$BlockEntityWithoutLevelRenderer, $BlockEntityWithoutLevelRenderer$Type} from "packages/net/minecraft/client/renderer/$BlockEntityWithoutLevelRenderer"
import {$HumanoidArmorModelGetter, $HumanoidArmorModelGetter$Type} from "packages/org/violetmoon/zeta/client/$HumanoidArmorModelGetter"

export interface $IZetaForgeItemStuff {

 "zeta$setHumanoidArmorModel"(arg0: $HumanoidArmorModelGetter$Type): void
 "zeta$setBlockEntityWithoutLevelRenderer"(arg0: $BlockEntityWithoutLevelRenderer$Type): void
}

export namespace $IZetaForgeItemStuff {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IZetaForgeItemStuff$Type = ($IZetaForgeItemStuff);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IZetaForgeItemStuff_ = $IZetaForgeItemStuff$Type;
}}
declare module "packages/org/violetmoon/quark/content/mobs/module/$WraithModule" {
import {$EntitySpawnConfig, $EntitySpawnConfig$Type} from "packages/org/violetmoon/zeta/config/type/$EntitySpawnConfig"
import {$ZCommonSetup, $ZCommonSetup$Type} from "packages/org/violetmoon/zeta/event/load/$ZCommonSetup"
import {$ZClientSetup, $ZClientSetup$Type} from "packages/org/violetmoon/zeta/client/event/load/$ZClientSetup"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$SoulBead, $SoulBead$Type} from "packages/org/violetmoon/quark/content/mobs/entity/$SoulBead"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Wraith, $Wraith$Type} from "packages/org/violetmoon/quark/content/mobs/entity/$Wraith"
import {$Structure, $Structure$Type} from "packages/net/minecraft/world/level/levelgen/structure/$Structure"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ZRegister, $ZRegister$Type} from "packages/org/violetmoon/zeta/event/load/$ZRegister"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZEntityAttributeCreation, $ZEntityAttributeCreation$Type} from "packages/org/violetmoon/zeta/event/load/$ZEntityAttributeCreation"
import {$ZConfigChanged, $ZConfigChanged$Type} from "packages/org/violetmoon/zeta/event/load/$ZConfigChanged"

export class $WraithModule extends $ZetaModule {
static "wraithType": $EntityType<($Wraith)>
static "soulBeadType": $EntityType<($SoulBead)>
static "spawnConfig": $EntitySpawnConfig
static "wraithSpawnableTag": $TagKey<($Block)>
static "soulBeadTargetTag": $TagKey<($Structure)>
static "validWraithSounds": $List<(string)>
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "register"(arg0: $ZRegister$Type): void
public "setup"(arg0: $ZCommonSetup$Type): void
public "clientSetup"(arg0: $ZClientSetup$Type): void
public "entityAttrs"(arg0: $ZEntityAttributeCreation$Type): void
public "configChanged"(arg0: $ZConfigChanged$Type): void
set "up"(value: $ZCommonSetup$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WraithModule$Type = ($WraithModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WraithModule_ = $WraithModule$Type;
}}
declare module "packages/org/violetmoon/quark/content/client/module/$AutoWalkKeybindModule" {
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $AutoWalkKeybindModule extends $ZetaModule {
static "drawHud": boolean
static "hudHeight": integer
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AutoWalkKeybindModule$Type = ($AutoWalkKeybindModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AutoWalkKeybindModule_ = $AutoWalkKeybindModule$Type;
}}
declare module "packages/org/violetmoon/zeta/block/$ZetaButtonBlock" {
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$BooleanSupplier, $BooleanSupplier$Type} from "packages/java/util/function/$BooleanSupplier"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$FluidState, $FluidState$Type} from "packages/net/minecraft/world/level/material/$FluidState"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$ToolAction, $ToolAction$Type} from "packages/net/minecraftforge/common/$ToolAction"
import {$IForgeBlock, $IForgeBlock$Type} from "packages/net/minecraftforge/common/extensions/$IForgeBlock"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$DirectionProperty, $DirectionProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$DirectionProperty"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$CreativeModeTab, $CreativeModeTab$Type} from "packages/net/minecraft/world/item/$CreativeModeTab"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$IZetaBlock, $IZetaBlock$Type} from "packages/org/violetmoon/zeta/block/$IZetaBlock"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$UseOnContext, $UseOnContext$Type} from "packages/net/minecraft/world/item/context/$UseOnContext"
import {$EnumProperty, $EnumProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$EnumProperty"
import {$AttachFace, $AttachFace$Type} from "packages/net/minecraft/world/level/block/state/properties/$AttachFace"
import {$ButtonBlock, $ButtonBlock$Type} from "packages/net/minecraft/world/level/block/$ButtonBlock"
import {$SoundType, $SoundType$Type} from "packages/net/minecraft/world/level/block/$SoundType"
import {$IPlantable, $IPlantable$Type} from "packages/net/minecraftforge/common/$IPlantable"
import {$IZetaBlockExtensions, $IZetaBlockExtensions$Type} from "packages/org/violetmoon/zeta/block/ext/$IZetaBlockExtensions"
import {$ResourceKey, $ResourceKey$Type} from "packages/net/minecraft/resources/$ResourceKey"
import {$ItemLike, $ItemLike$Type} from "packages/net/minecraft/world/level/$ItemLike"
import {$BlockAndTintGetter, $BlockAndTintGetter$Type} from "packages/net/minecraft/world/level/$BlockAndTintGetter"
import {$BlockSetType, $BlockSetType$Type} from "packages/net/minecraft/world/level/block/state/properties/$BlockSetType"

export class $ZetaButtonBlock extends $ButtonBlock implements $IZetaBlock, $IZetaBlockExtensions, $IForgeBlock {
static readonly "POWERED": $BooleanProperty
static readonly "FACE": $EnumProperty<($AttachFace)>
static readonly "FACING": $DirectionProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(arg0: $BlockSetType$Type, arg1: integer, arg2: boolean, arg3: string, arg4: $ZetaModule$Type, arg5: $BlockBehaviour$Properties$Type)

public "getModule"(): $ZetaModule
public "canSustainPlant"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type, arg4: $IPlantable$Type): boolean
public "isLadder"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "isConduitFrame"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): boolean
public "doesConditionApply"(): boolean
public "setCondition"(arg0: $BooleanSupplier$Type): $ZetaButtonBlock
public "getEnchantPowerBonus"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type): float
public "shouldDisplayFluidOverlay"(arg0: $BlockState$Type, arg1: $BlockAndTintGetter$Type, arg2: $BlockPos$Type, arg3: $FluidState$Type): boolean
public "getToolModifiedState"(arg0: $BlockState$Type, arg1: $UseOnContext$Type, arg2: $ToolAction$Type, arg3: boolean): $BlockState
public "getBeaconColorMultiplier"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): (float)[]
public "makesOpenTrapdoorAboveClimbable"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockState$Type): boolean
public "getSoundType"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): $SoundType
public "isScaffolding"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "getLightEmission"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type): integer
public "isFlammable"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): boolean
public "canStickTo"(arg0: $BlockState$Type, arg1: $BlockState$Type): boolean
public "getFireSpreadSpeed"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "getFlammability"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "isStickyBlock"(arg0: $BlockState$Type): boolean
public "collisionExtendsVertically"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): boolean
public "getBlock"(): $Block
public "getFireSpreadSpeedZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "getFlammabilityZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "setCreativeTab"(arg0: $ResourceKey$Type<($CreativeModeTab$Type)>): $Block
public "setCreativeTab"(arg0: $ResourceKey$Type<($CreativeModeTab$Type)>, arg1: $ItemLike$Type, arg2: boolean): $Block
public "isConduitFrameZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): boolean
public "isLadderZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "isStickyBlockZeta"(arg0: $BlockState$Type): boolean
public "isScaffoldingZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "canStickToZeta"(arg0: $BlockState$Type, arg1: $BlockState$Type): boolean
public "isFlammableZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): boolean
public "getSoundTypeZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): $SoundType
public "makesOpenTrapdoorAboveClimbableZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockState$Type): boolean
public "canSustainPlantZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type, arg4: string): boolean
public "getToolModifiedStateZeta"(arg0: $BlockState$Type, arg1: $UseOnContext$Type, arg2: string, arg3: boolean): $BlockState
public "collisionExtendsVerticallyZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): boolean
public "shouldDisplayFluidOverlayZeta"(arg0: $BlockState$Type, arg1: $BlockAndTintGetter$Type, arg2: $BlockPos$Type, arg3: $FluidState$Type): boolean
public "getEnchantPowerBonusZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type): float
public "getBeaconColorMultiplierZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): (float)[]
public "getLightEmissionZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type): integer
public "isEnabled"(): boolean
public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
get "module"(): $ZetaModule
set "condition"(value: $BooleanSupplier$Type)
get "block"(): $Block
set "creativeTab"(value: $ResourceKey$Type<($CreativeModeTab$Type)>)
get "enabled"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZetaButtonBlock$Type = ($ZetaButtonBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZetaButtonBlock_ = $ZetaButtonBlock$Type;
}}
declare module "packages/org/violetmoon/zeta/event/bus/$IZetaLoadEvent" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $IZetaLoadEvent {

}

export namespace $IZetaLoadEvent {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IZetaLoadEvent$Type = ($IZetaLoadEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IZetaLoadEvent_ = $IZetaLoadEvent$Type;
}}
declare module "packages/org/violetmoon/zeta/event/play/$ZBlock$Break" {
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$ZBlock, $ZBlock$Type} from "packages/org/violetmoon/zeta/event/play/$ZBlock"

export interface $ZBlock$Break extends $ZBlock {

 "getPlayer"(): $Player
 "getState"(): $BlockState
 "getLevel"(): $LevelAccessor
 "getPos"(): $BlockPos
}

export namespace $ZBlock$Break {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZBlock$Break$Type = ($ZBlock$Break);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZBlock$Break_ = $ZBlock$Break$Type;
}}
declare module "packages/org/violetmoon/zeta/block/ext/$IZetaBlockExtensions" {
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$UseOnContext, $UseOnContext$Type} from "packages/net/minecraft/world/item/context/$UseOnContext"
import {$SoundType, $SoundType$Type} from "packages/net/minecraft/world/level/block/$SoundType"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$BlockAndTintGetter, $BlockAndTintGetter$Type} from "packages/net/minecraft/world/level/$BlockAndTintGetter"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$FluidState, $FluidState$Type} from "packages/net/minecraft/world/level/material/$FluidState"

export interface $IZetaBlockExtensions {

 "isConduitFrameZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): boolean
 "isLadderZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
 "isStickyBlockZeta"(arg0: $BlockState$Type): boolean
 "isScaffoldingZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
 "canStickToZeta"(arg0: $BlockState$Type, arg1: $BlockState$Type): boolean
 "isFlammableZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): boolean
 "getSoundTypeZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): $SoundType
 "makesOpenTrapdoorAboveClimbableZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockState$Type): boolean
 "canSustainPlantZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type, arg4: string): boolean
 "getFireSpreadSpeedZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
 "getToolModifiedStateZeta"(arg0: $BlockState$Type, arg1: $UseOnContext$Type, arg2: string, arg3: boolean): $BlockState
 "collisionExtendsVerticallyZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): boolean
 "shouldDisplayFluidOverlayZeta"(arg0: $BlockState$Type, arg1: $BlockAndTintGetter$Type, arg2: $BlockPos$Type, arg3: $FluidState$Type): boolean
 "getEnchantPowerBonusZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type): float
 "getBeaconColorMultiplierZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): (float)[]
 "getFlammabilityZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
 "getLightEmissionZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type): integer
}

export namespace $IZetaBlockExtensions {
const DEFAULT: $IZetaBlockExtensions
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IZetaBlockExtensions$Type = ($IZetaBlockExtensions);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IZetaBlockExtensions_ = $IZetaBlockExtensions$Type;
}}
declare module "packages/org/violetmoon/zeta/event/play/entity/$ZEntityItemPickup" {
import {$IZetaPlayEvent, $IZetaPlayEvent$Type} from "packages/org/violetmoon/zeta/event/bus/$IZetaPlayEvent"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$PlayerGetter, $PlayerGetter$Type} from "packages/org/violetmoon/zeta/event/bus/helpers/$PlayerGetter"
import {$ItemEntity, $ItemEntity$Type} from "packages/net/minecraft/world/entity/item/$ItemEntity"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export interface $ZEntityItemPickup extends $IZetaPlayEvent, $PlayerGetter {

 "getItem"(): $ItemEntity
 "getPlayer"(): $Player
 "getEntity"(): $LivingEntity
}

export namespace $ZEntityItemPickup {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZEntityItemPickup$Type = ($ZEntityItemPickup);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZEntityItemPickup_ = $ZEntityItemPickup$Type;
}}
declare module "packages/org/violetmoon/quark/content/automation/module/$EnderWatcherModule" {
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$ZRegister, $ZRegister$Type} from "packages/org/violetmoon/zeta/event/load/$ZRegister"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$EnderWatcherBlockEntity, $EnderWatcherBlockEntity$Type} from "packages/org/violetmoon/quark/content/automation/block/be/$EnderWatcherBlockEntity"
import {$ManualTrigger, $ManualTrigger$Type} from "packages/org/violetmoon/zeta/advancement/$ManualTrigger"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $EnderWatcherModule extends $ZetaModule {
static "blockEntityType": $BlockEntityType<($EnderWatcherBlockEntity)>
static "watcherCenterTrigger": $ManualTrigger
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "register"(arg0: $ZRegister$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EnderWatcherModule$Type = ($EnderWatcherModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EnderWatcherModule_ = $EnderWatcherModule$Type;
}}
declare module "packages/org/violetmoon/quark/content/mobs/entity/$Stoneling$StonelingVariant" {
import {$SpawnGroupData, $SpawnGroupData$Type} from "packages/net/minecraft/world/entity/$SpawnGroupData"
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"

export class $Stoneling$StonelingVariant extends $Enum<($Stoneling$StonelingVariant)> implements $SpawnGroupData {
static readonly "STONE": $Stoneling$StonelingVariant
static readonly "ANDESITE": $Stoneling$StonelingVariant
static readonly "DIORITE": $Stoneling$StonelingVariant
static readonly "GRANITE": $Stoneling$StonelingVariant
static readonly "LIMESTONE": $Stoneling$StonelingVariant
static readonly "CALCITE": $Stoneling$StonelingVariant
static readonly "SHALE": $Stoneling$StonelingVariant
static readonly "JASPER": $Stoneling$StonelingVariant
static readonly "DEEPSLATE": $Stoneling$StonelingVariant
static readonly "TUFF": $Stoneling$StonelingVariant
static readonly "DRIPSTONE": $Stoneling$StonelingVariant


public static "values"(): ($Stoneling$StonelingVariant)[]
public static "valueOf"(arg0: string): $Stoneling$StonelingVariant
public "getIndex"(): byte
public "getTexture"(): $ResourceLocation
public "getBlocks"(): $List<($Block)>
public static "byIndex"(arg0: byte): $Stoneling$StonelingVariant
get "index"(): byte
get "texture"(): $ResourceLocation
get "blocks"(): $List<($Block)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Stoneling$StonelingVariant$Type = (("shale") | ("deepslate") | ("limestone") | ("granite") | ("tuff") | ("dripstone") | ("calcite") | ("andesite") | ("stone") | ("diorite") | ("jasper")) | ($Stoneling$StonelingVariant);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Stoneling$StonelingVariant_ = $Stoneling$StonelingVariant$Type;
}}
declare module "packages/org/violetmoon/quark/addons/oddities/magnetsystem/$DefaultMoveActions" {
import {$HashMap, $HashMap$Type} from "packages/java/util/$HashMap"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$IMagnetMoveAction, $IMagnetMoveAction$Type} from "packages/org/violetmoon/quark/api/$IMagnetMoveAction"

export class $DefaultMoveActions {

constructor()

public static "addActions"(arg0: $HashMap$Type<($Block$Type), ($IMagnetMoveAction$Type)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DefaultMoveActions$Type = ($DefaultMoveActions);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DefaultMoveActions_ = $DefaultMoveActions$Type;
}}
declare module "packages/org/violetmoon/quark/addons/oddities/block/$CrateBlock" {
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$EntityBlock, $EntityBlock$Type} from "packages/net/minecraft/world/level/block/$EntityBlock"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$ZetaBlock, $ZetaBlock$Type} from "packages/org/violetmoon/zeta/block/$ZetaBlock"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$MenuProvider, $MenuProvider$Type} from "packages/net/minecraft/world/$MenuProvider"
import {$BlockEntityTicker, $BlockEntityTicker$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityTicker"
import {$GameEventListener, $GameEventListener$Type} from "packages/net/minecraft/world/level/gameevent/$GameEventListener"

export class $CrateBlock extends $ZetaBlock implements $EntityBlock {
static readonly "PROPERTY_OPEN": $BooleanProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(arg0: $ZetaModule$Type)

public "getTicker"<T extends $BlockEntity>(arg0: $Level$Type, arg1: $BlockState$Type, arg2: $BlockEntityType$Type<(T)>): $BlockEntityTicker<(T)>
public "setPlacedBy"(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: $LivingEntity$Type, arg4: $ItemStack$Type): void
public "use"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type, arg3: $Player$Type, arg4: $InteractionHand$Type, arg5: $BlockHitResult$Type): $InteractionResult
public "hasAnalogOutputSignal"(arg0: $BlockState$Type): boolean
public "onRemove"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type, arg3: $BlockState$Type, arg4: boolean): void
public "getMenuProvider"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type): $MenuProvider
public "getAnalogOutputSignal"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type): integer
public "tick"(arg0: $BlockState$Type, arg1: $ServerLevel$Type, arg2: $BlockPos$Type, arg3: $RandomSource$Type): void
public "newBlockEntity"(arg0: $BlockPos$Type, arg1: $BlockState$Type): $BlockEntity
public "getListener"<T extends $BlockEntity>(arg0: $ServerLevel$Type, arg1: T): $GameEventListener
public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CrateBlock$Type = ($CrateBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CrateBlock_ = $CrateBlock$Type;
}}
declare module "packages/org/violetmoon/quark/content/automation/client/screen/$TroughScreen" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$DispenserMenu, $DispenserMenu$Type} from "packages/net/minecraft/world/inventory/$DispenserMenu"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$List, $List$Type} from "packages/java/util/$List"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$DispenserScreen, $DispenserScreen$Type} from "packages/net/minecraft/client/gui/screens/inventory/$DispenserScreen"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"

export class $TroughScreen extends $DispenserScreen {
static readonly "INVENTORY_LOCATION": $ResourceLocation
static readonly "SLOT_ITEM_BLIT_OFFSET": integer
 "imageWidth": integer
 "hoveredSlot": $Slot
 "leftPos": integer
 "topPos": integer
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering

constructor(arg0: $DispenserMenu$Type, arg1: $Inventory$Type, arg2: $Component$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TroughScreen$Type = ($TroughScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TroughScreen_ = $TroughScreen$Type;
}}
declare module "packages/org/violetmoon/quark/content/mobs/client/layer/$ToretoiseOreLayer" {
import {$RenderLayer, $RenderLayer$Type} from "packages/net/minecraft/client/renderer/entity/layers/$RenderLayer"
import {$RenderLayerParent, $RenderLayerParent$Type} from "packages/net/minecraft/client/renderer/entity/$RenderLayerParent"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$Toretoise, $Toretoise$Type} from "packages/org/violetmoon/quark/content/mobs/entity/$Toretoise"
import {$ToretoiseModel, $ToretoiseModel$Type} from "packages/org/violetmoon/quark/content/mobs/client/model/$ToretoiseModel"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"

export class $ToretoiseOreLayer extends $RenderLayer<($Toretoise), ($ToretoiseModel)> {

constructor(arg0: $RenderLayerParent$Type<($Toretoise$Type), ($ToretoiseModel$Type)>)

public "render"(arg0: $PoseStack$Type, arg1: $MultiBufferSource$Type, arg2: integer, arg3: $Toretoise$Type, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: float): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ToretoiseOreLayer$Type = ($ToretoiseOreLayer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ToretoiseOreLayer_ = $ToretoiseOreLayer$Type;
}}
declare module "packages/org/violetmoon/quark/content/tweaks/module/$GlassShardModule" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$DyeColor, $DyeColor$Type} from "packages/net/minecraft/world/item/$DyeColor"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$ZCommonSetup, $ZCommonSetup$Type} from "packages/org/violetmoon/zeta/event/load/$ZCommonSetup"
import {$ZetaBlock, $ZetaBlock$Type} from "packages/org/violetmoon/zeta/block/$ZetaBlock"
import {$ZRegister, $ZRegister$Type} from "packages/org/violetmoon/zeta/event/load/$ZRegister"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $GlassShardModule extends $ZetaModule {
static "dirtyGlass": $ZetaBlock
static "shardTag": $TagKey<($Item)>
static "clearShard": $Item
static "dirtyShard": $Item
static readonly "shardColors": $Map<($DyeColor), ($Item)>
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "register"(arg0: $ZRegister$Type): void
public "setup"(arg0: $ZCommonSetup$Type): void
set "up"(value: $ZCommonSetup$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GlassShardModule$Type = ($GlassShardModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GlassShardModule_ = $GlassShardModule$Type;
}}
declare module "packages/org/violetmoon/quark/addons/oddities/client/render/be/$MatrixEnchantingTableRenderer" {
import {$Material, $Material$Type} from "packages/net/minecraft/client/resources/model/$Material"
import {$BlockEntityRendererProvider$Context, $BlockEntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/blockentity/$BlockEntityRendererProvider$Context"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$MatrixEnchantingTableBlockEntity, $MatrixEnchantingTableBlockEntity$Type} from "packages/org/violetmoon/quark/addons/oddities/block/be/$MatrixEnchantingTableBlockEntity"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$BlockEntityRenderer, $BlockEntityRenderer$Type} from "packages/net/minecraft/client/renderer/blockentity/$BlockEntityRenderer"

export class $MatrixEnchantingTableRenderer implements $BlockEntityRenderer<($MatrixEnchantingTableBlockEntity)> {
static readonly "TEXTURE_BOOK": $Material

constructor(arg0: $BlockEntityRendererProvider$Context$Type)

public "render"(arg0: $MatrixEnchantingTableBlockEntity$Type, arg1: float, arg2: $PoseStack$Type, arg3: $MultiBufferSource$Type, arg4: integer, arg5: integer): void
public "shouldRender"(arg0: $MatrixEnchantingTableBlockEntity$Type, arg1: $Vec3$Type): boolean
public "shouldRenderOffScreen"(arg0: $MatrixEnchantingTableBlockEntity$Type): boolean
public "getViewDistance"(): integer
get "viewDistance"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MatrixEnchantingTableRenderer$Type = ($MatrixEnchantingTableRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MatrixEnchantingTableRenderer_ = $MatrixEnchantingTableRenderer$Type;
}}
declare module "packages/org/violetmoon/quark/content/client/tooltip/$FuelTooltips" {
import {$ZGatherTooltipComponents, $ZGatherTooltipComponents$Type} from "packages/org/violetmoon/zeta/client/event/play/$ZGatherTooltipComponents"

export class $FuelTooltips {

constructor()

public static "makeTooltip"(arg0: $ZGatherTooltipComponents$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FuelTooltips$Type = ($FuelTooltips);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FuelTooltips_ = $FuelTooltips$Type;
}}
declare module "packages/org/violetmoon/quark/addons/oddities/module/$TotemOfHoldingModule" {
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$TotemOfHoldingEntity, $TotemOfHoldingEntity$Type} from "packages/org/violetmoon/quark/addons/oddities/entity/$TotemOfHoldingEntity"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$ZRegister, $ZRegister$Type} from "packages/org/violetmoon/zeta/event/load/$ZRegister"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ZLivingDrops$Lowest, $ZLivingDrops$Lowest$Type} from "packages/org/violetmoon/zeta/event/play/entity/living/$ZLivingDrops$Lowest"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $TotemOfHoldingModule extends $ZetaModule {
static "totemType": $EntityType<($TotemOfHoldingEntity)>
static "darkSoulsMode": boolean
static "enableOnPK": boolean
static "destroyLostItems": boolean
static "allowAnyoneToCollect": boolean
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "register"(arg0: $ZRegister$Type): void
public "onPlayerDrops"(arg0: $ZLivingDrops$Lowest$Type): void
public static "getTotemUUID"(arg0: $Player$Type): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TotemOfHoldingModule$Type = ($TotemOfHoldingModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TotemOfHoldingModule_ = $TotemOfHoldingModule$Type;
}}
declare module "packages/org/violetmoon/zetaimplforge/client/event/load/$ForgeZAddItemColorHandlers$Post" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$ZAddItemColorHandlers$Post, $ZAddItemColorHandlers$Post$Type} from "packages/org/violetmoon/zeta/client/event/load/$ZAddItemColorHandlers$Post"
import {$RegisterColorHandlersEvent$Item, $RegisterColorHandlersEvent$Item$Type} from "packages/net/minecraftforge/client/event/$RegisterColorHandlersEvent$Item"
import {$ForgeZAddItemColorHandlers, $ForgeZAddItemColorHandlers$Type} from "packages/org/violetmoon/zetaimplforge/client/event/load/$ForgeZAddItemColorHandlers"
import {$ItemColor, $ItemColor$Type} from "packages/net/minecraft/client/color/item/$ItemColor"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $ForgeZAddItemColorHandlers$Post extends $ForgeZAddItemColorHandlers implements $ZAddItemColorHandlers$Post {

constructor(arg0: $RegisterColorHandlersEvent$Item$Type, arg1: $Map$Type<(string), ($Function$Type<($Item$Type), ($ItemColor$Type)>)>)

public "getNamedItemColors"(): $Map<(string), ($Function<($Item), ($ItemColor)>)>
get "namedItemColors"(): $Map<(string), ($Function<($Item), ($ItemColor)>)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ForgeZAddItemColorHandlers$Post$Type = ($ForgeZAddItemColorHandlers$Post);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ForgeZAddItemColorHandlers$Post_ = $ForgeZAddItemColorHandlers$Post$Type;
}}
declare module "packages/org/violetmoon/quark/content/world/module/$BlossomTreesModule$BlossomTree" {
import {$BlossomLeavesBlock, $BlossomLeavesBlock$Type} from "packages/org/violetmoon/quark/content/world/block/$BlossomLeavesBlock"
import {$ConfiguredFeature, $ConfiguredFeature$Type} from "packages/net/minecraft/world/level/levelgen/feature/$ConfiguredFeature"
import {$BlossomTreeConfig, $BlossomTreeConfig$Type} from "packages/org/violetmoon/quark/content/world/config/$BlossomTreeConfig"
import {$ResourceKey, $ResourceKey$Type} from "packages/net/minecraft/resources/$ResourceKey"
import {$AbstractTreeGrower, $AbstractTreeGrower$Type} from "packages/net/minecraft/world/level/block/grower/$AbstractTreeGrower"
import {$ZetaSaplingBlock, $ZetaSaplingBlock$Type} from "packages/org/violetmoon/zeta/block/$ZetaSaplingBlock"

export class $BlossomTreesModule$BlossomTree {
 "name": string
 "quarkConfig": $BlossomTreeConfig
 "leaves": $BlossomLeavesBlock
 "configuredFeatureKey": $ResourceKey<($ConfiguredFeature<(any), (any)>)>
 "grower": $AbstractTreeGrower
 "sapling": $ZetaSaplingBlock

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BlossomTreesModule$BlossomTree$Type = ($BlossomTreesModule$BlossomTree);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BlossomTreesModule$BlossomTree_ = $BlossomTreesModule$BlossomTree$Type;
}}
declare module "packages/org/violetmoon/quark/base/recipe/$ExclusionRecipe$Serializer" {
import {$JsonObject, $JsonObject$Type} from "packages/com/google/gson/$JsonObject"
import {$ExclusionRecipe, $ExclusionRecipe$Type} from "packages/org/violetmoon/quark/base/recipe/$ExclusionRecipe"
import {$RecipeSerializer, $RecipeSerializer$Type} from "packages/net/minecraft/world/item/crafting/$RecipeSerializer"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$ICondition$IContext, $ICondition$IContext$Type} from "packages/net/minecraftforge/common/crafting/conditions/$ICondition$IContext"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Recipe, $Recipe$Type} from "packages/net/minecraft/world/item/crafting/$Recipe"

export class $ExclusionRecipe$Serializer implements $RecipeSerializer<($ExclusionRecipe)> {

constructor()

public "fromJson"(arg0: $ResourceLocation$Type, arg1: $JsonObject$Type): $ExclusionRecipe
public "fromNetwork"(arg0: $ResourceLocation$Type, arg1: $FriendlyByteBuf$Type): $ExclusionRecipe
public "toNetwork"(arg0: $FriendlyByteBuf$Type, arg1: $ExclusionRecipe$Type): void
public static "register"<S extends $RecipeSerializer<(T)>, T extends $Recipe<(any)>>(arg0: string, arg1: S): S
public "fromJson"(arg0: $ResourceLocation$Type, arg1: $JsonObject$Type, arg2: $ICondition$IContext$Type): $ExclusionRecipe
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ExclusionRecipe$Serializer$Type = ($ExclusionRecipe$Serializer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ExclusionRecipe$Serializer_ = $ExclusionRecipe$Serializer$Type;
}}
declare module "packages/org/violetmoon/quark/content/building/block/$VariantBookshelfBlock" {
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$SoundType, $SoundType$Type} from "packages/net/minecraft/world/level/block/$SoundType"
import {$ZetaBlock, $ZetaBlock$Type} from "packages/org/violetmoon/zeta/block/$ZetaBlock"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $VariantBookshelfBlock extends $ZetaBlock {
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(arg0: string, arg1: $ZetaModule$Type, arg2: boolean, arg3: $SoundType$Type)

public "isFlammableZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): boolean
public "getEnchantPowerBonusZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type): float
public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $VariantBookshelfBlock$Type = ($VariantBookshelfBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $VariantBookshelfBlock_ = $VariantBookshelfBlock$Type;
}}
declare module "packages/org/violetmoon/zetaimplforge/util/$ForgeRaytracingUtil" {
import {$RaytracingUtil, $RaytracingUtil$Type} from "packages/org/violetmoon/zeta/util/$RaytracingUtil"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $ForgeRaytracingUtil extends $RaytracingUtil {

constructor()

public "getEntityRange"(arg0: $LivingEntity$Type): double
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ForgeRaytracingUtil$Type = ($ForgeRaytracingUtil);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ForgeRaytracingUtil_ = $ForgeRaytracingUtil$Type;
}}
declare module "packages/org/violetmoon/quark/content/tools/ai/$RunAwayFromPikesGoal" {
import {$Goal, $Goal$Type} from "packages/net/minecraft/world/entity/ai/goal/$Goal"
import {$PathfinderMob, $PathfinderMob$Type} from "packages/net/minecraft/world/entity/$PathfinderMob"

export class $RunAwayFromPikesGoal extends $Goal {

constructor(arg0: $PathfinderMob$Type, arg1: float, arg2: double, arg3: double)

public "canUse"(): boolean
public "canContinueToUse"(): boolean
public "start"(): void
public "stop"(): void
public "tick"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RunAwayFromPikesGoal$Type = ($RunAwayFromPikesGoal);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RunAwayFromPikesGoal_ = $RunAwayFromPikesGoal$Type;
}}
declare module "packages/org/violetmoon/quark/content/building/block/be/$VariantFurnaceBlockEntity" {
import {$AbstractFurnaceBlockEntity, $AbstractFurnaceBlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$AbstractFurnaceBlockEntity"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$LockCode, $LockCode$Type} from "packages/net/minecraft/world/$LockCode"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $VariantFurnaceBlockEntity extends $AbstractFurnaceBlockEntity {
static readonly "DATA_LIT_TIME": integer
static readonly "DATA_LIT_DURATION": integer
static readonly "DATA_COOKING_PROGRESS": integer
static readonly "DATA_COOKING_TOTAL_TIME": integer
static readonly "NUM_DATA_VALUES": integer
static readonly "BURN_TIME_STANDARD": integer
static readonly "BURN_COOL_SPEED": integer
 "litTime": integer
 "cookingProgress": integer
 "cookingTotalTime": integer
 "lockKey": $LockCode
 "blockState": $BlockState

constructor(arg0: $BlockPos$Type, arg1: $BlockState$Type)

public "setChanged"(): void
public static "stillValidBlockEntity"(arg0: $BlockEntity$Type, arg1: $Player$Type, arg2: integer): boolean
public static "stillValidBlockEntity"(arg0: $BlockEntity$Type, arg1: $Player$Type): boolean
public static "tryClear"(arg0: any): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $VariantFurnaceBlockEntity$Type = ($VariantFurnaceBlockEntity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $VariantFurnaceBlockEntity_ = $VariantFurnaceBlockEntity$Type;
}}
declare module "packages/org/violetmoon/zetaimplforge/event/play/loading/$ForgeZWandererTrades" {
import {$ZWandererTrades, $ZWandererTrades$Type} from "packages/org/violetmoon/zeta/event/play/loading/$ZWandererTrades"
import {$WandererTradesEvent, $WandererTradesEvent$Type} from "packages/net/minecraftforge/event/village/$WandererTradesEvent"
import {$List, $List$Type} from "packages/java/util/$List"
import {$VillagerTrades$ItemListing, $VillagerTrades$ItemListing$Type} from "packages/net/minecraft/world/entity/npc/$VillagerTrades$ItemListing"

export class $ForgeZWandererTrades implements $ZWandererTrades {

constructor(arg0: $WandererTradesEvent$Type)

public "getGenericTrades"(): $List<($VillagerTrades$ItemListing)>
public "getRareTrades"(): $List<($VillagerTrades$ItemListing)>
get "genericTrades"(): $List<($VillagerTrades$ItemListing)>
get "rareTrades"(): $List<($VillagerTrades$ItemListing)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ForgeZWandererTrades$Type = ($ForgeZWandererTrades);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ForgeZWandererTrades_ = $ForgeZWandererTrades$Type;
}}
declare module "packages/org/violetmoon/zeta/block/$ZetaWallSignBlock" {
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$BooleanSupplier, $BooleanSupplier$Type} from "packages/java/util/function/$BooleanSupplier"
import {$WoodType, $WoodType$Type} from "packages/net/minecraft/world/level/block/state/properties/$WoodType"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$FluidState, $FluidState$Type} from "packages/net/minecraft/world/level/material/$FluidState"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$ToolAction, $ToolAction$Type} from "packages/net/minecraftforge/common/$ToolAction"
import {$IForgeBlock, $IForgeBlock$Type} from "packages/net/minecraftforge/common/extensions/$IForgeBlock"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$DirectionProperty, $DirectionProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$DirectionProperty"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$CreativeModeTab, $CreativeModeTab$Type} from "packages/net/minecraft/world/item/$CreativeModeTab"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$IZetaBlock, $IZetaBlock$Type} from "packages/org/violetmoon/zeta/block/$IZetaBlock"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$UseOnContext, $UseOnContext$Type} from "packages/net/minecraft/world/item/context/$UseOnContext"
import {$SoundType, $SoundType$Type} from "packages/net/minecraft/world/level/block/$SoundType"
import {$IPlantable, $IPlantable$Type} from "packages/net/minecraftforge/common/$IPlantable"
import {$IZetaBlockExtensions, $IZetaBlockExtensions$Type} from "packages/org/violetmoon/zeta/block/ext/$IZetaBlockExtensions"
import {$ResourceKey, $ResourceKey$Type} from "packages/net/minecraft/resources/$ResourceKey"
import {$ItemLike, $ItemLike$Type} from "packages/net/minecraft/world/level/$ItemLike"
import {$WallSignBlock, $WallSignBlock$Type} from "packages/net/minecraft/world/level/block/$WallSignBlock"
import {$BlockAndTintGetter, $BlockAndTintGetter$Type} from "packages/net/minecraft/world/level/$BlockAndTintGetter"

export class $ZetaWallSignBlock extends $WallSignBlock implements $IZetaBlock, $IZetaBlockExtensions, $IForgeBlock {
static readonly "FACING": $DirectionProperty
static readonly "WATERLOGGED": $BooleanProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(arg0: string, arg1: $ZetaModule$Type, arg2: $WoodType$Type, arg3: $BlockBehaviour$Properties$Type)

public "getModule"(): $ZetaModule
public "canSustainPlant"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type, arg4: $IPlantable$Type): boolean
public "isLadder"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "isConduitFrame"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): boolean
public "doesConditionApply"(): boolean
public "setCondition"(arg0: $BooleanSupplier$Type): $ZetaWallSignBlock
public "getEnchantPowerBonus"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type): float
public "shouldDisplayFluidOverlay"(arg0: $BlockState$Type, arg1: $BlockAndTintGetter$Type, arg2: $BlockPos$Type, arg3: $FluidState$Type): boolean
public "getToolModifiedState"(arg0: $BlockState$Type, arg1: $UseOnContext$Type, arg2: $ToolAction$Type, arg3: boolean): $BlockState
public "getBeaconColorMultiplier"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): (float)[]
public "makesOpenTrapdoorAboveClimbable"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockState$Type): boolean
public "getSoundType"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): $SoundType
public "isScaffolding"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "getLightEmission"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type): integer
public "isFlammable"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): boolean
public "canStickTo"(arg0: $BlockState$Type, arg1: $BlockState$Type): boolean
public "getFireSpreadSpeed"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "getFlammability"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "isStickyBlock"(arg0: $BlockState$Type): boolean
public "collisionExtendsVertically"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): boolean
public "getBlock"(): $Block
public "getFireSpreadSpeedZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "getFlammabilityZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "setCreativeTab"(arg0: $ResourceKey$Type<($CreativeModeTab$Type)>): $Block
public "setCreativeTab"(arg0: $ResourceKey$Type<($CreativeModeTab$Type)>, arg1: $ItemLike$Type, arg2: boolean): $Block
public "isConduitFrameZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): boolean
public "isLadderZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "isStickyBlockZeta"(arg0: $BlockState$Type): boolean
public "isScaffoldingZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "canStickToZeta"(arg0: $BlockState$Type, arg1: $BlockState$Type): boolean
public "isFlammableZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): boolean
public "getSoundTypeZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): $SoundType
public "makesOpenTrapdoorAboveClimbableZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockState$Type): boolean
public "canSustainPlantZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type, arg4: string): boolean
public "getToolModifiedStateZeta"(arg0: $BlockState$Type, arg1: $UseOnContext$Type, arg2: string, arg3: boolean): $BlockState
public "collisionExtendsVerticallyZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): boolean
public "shouldDisplayFluidOverlayZeta"(arg0: $BlockState$Type, arg1: $BlockAndTintGetter$Type, arg2: $BlockPos$Type, arg3: $FluidState$Type): boolean
public "getEnchantPowerBonusZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type): float
public "getBeaconColorMultiplierZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): (float)[]
public "getLightEmissionZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type): integer
public "isEnabled"(): boolean
public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
get "module"(): $ZetaModule
set "condition"(value: $BooleanSupplier$Type)
get "block"(): $Block
set "creativeTab"(value: $ResourceKey$Type<($CreativeModeTab$Type)>)
get "enabled"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZetaWallSignBlock$Type = ($ZetaWallSignBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZetaWallSignBlock_ = $ZetaWallSignBlock$Type;
}}
declare module "packages/org/violetmoon/quark/integration/lootr/client/$ClientLootrIntegration" {
import {$IClientLootrIntegration, $IClientLootrIntegration$Type} from "packages/org/violetmoon/quark/integration/lootr/client/$IClientLootrIntegration"
import {$ZClientSetup, $ZClientSetup$Type} from "packages/org/violetmoon/zeta/client/event/load/$ZClientSetup"

export class $ClientLootrIntegration implements $IClientLootrIntegration {

constructor()

public "clientSetup"(arg0: $ZClientSetup$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientLootrIntegration$Type = ($ClientLootrIntegration);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientLootrIntegration_ = $ClientLootrIntegration$Type;
}}
declare module "packages/org/violetmoon/quark/content/world/block/$HugeGlowShroomBlock" {
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$HugeMushroomBlock, $HugeMushroomBlock$Type} from "packages/net/minecraft/world/level/block/$HugeMushroomBlock"
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$FluidState, $FluidState$Type} from "packages/net/minecraft/world/level/material/$FluidState"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$ToolAction, $ToolAction$Type} from "packages/net/minecraftforge/common/$ToolAction"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$IForgeBlock, $IForgeBlock$Type} from "packages/net/minecraftforge/common/extensions/$IForgeBlock"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$CreativeModeTab, $CreativeModeTab$Type} from "packages/net/minecraft/world/item/$CreativeModeTab"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$IZetaBlock, $IZetaBlock$Type} from "packages/org/violetmoon/zeta/block/$IZetaBlock"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$UseOnContext, $UseOnContext$Type} from "packages/net/minecraft/world/item/context/$UseOnContext"
import {$SoundType, $SoundType$Type} from "packages/net/minecraft/world/level/block/$SoundType"
import {$IPlantable, $IPlantable$Type} from "packages/net/minecraftforge/common/$IPlantable"
import {$IZetaBlockExtensions, $IZetaBlockExtensions$Type} from "packages/org/violetmoon/zeta/block/ext/$IZetaBlockExtensions"
import {$ResourceKey, $ResourceKey$Type} from "packages/net/minecraft/resources/$ResourceKey"
import {$ItemLike, $ItemLike$Type} from "packages/net/minecraft/world/level/$ItemLike"
import {$BlockAndTintGetter, $BlockAndTintGetter$Type} from "packages/net/minecraft/world/level/$BlockAndTintGetter"

export class $HugeGlowShroomBlock extends $HugeMushroomBlock implements $IZetaBlock, $IZetaBlockExtensions, $IForgeBlock {
static readonly "NORTH": $BooleanProperty
static readonly "EAST": $BooleanProperty
static readonly "SOUTH": $BooleanProperty
static readonly "WEST": $BooleanProperty
static readonly "UP": $BooleanProperty
static readonly "DOWN": $BooleanProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(arg0: string, arg1: $ZetaModule$Type, arg2: boolean)

public "getModule"(): $ZetaModule
public static "place"(arg0: $LevelAccessor$Type, arg1: $RandomSource$Type, arg2: $BlockPos$Type): boolean
public "canSustainPlant"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type, arg4: $IPlantable$Type): boolean
public "isLadder"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "isConduitFrame"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): boolean
public "doesConditionApply"(): boolean
public "getEnchantPowerBonus"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type): float
public "shouldDisplayFluidOverlay"(arg0: $BlockState$Type, arg1: $BlockAndTintGetter$Type, arg2: $BlockPos$Type, arg3: $FluidState$Type): boolean
public "getToolModifiedState"(arg0: $BlockState$Type, arg1: $UseOnContext$Type, arg2: $ToolAction$Type, arg3: boolean): $BlockState
public "getBeaconColorMultiplier"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): (float)[]
public "makesOpenTrapdoorAboveClimbable"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockState$Type): boolean
public "getSoundType"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): $SoundType
public "isScaffolding"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "getLightEmission"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type): integer
public "getFireSpreadSpeedZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "getFlammabilityZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "isFlammable"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): boolean
public "canStickTo"(arg0: $BlockState$Type, arg1: $BlockState$Type): boolean
public "getFireSpreadSpeed"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "getFlammability"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "isStickyBlock"(arg0: $BlockState$Type): boolean
public "animateTick"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type, arg3: $RandomSource$Type): void
public "collisionExtendsVertically"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): boolean
public "getBlock"(): $Block
public "setCreativeTab"(arg0: $ResourceKey$Type<($CreativeModeTab$Type)>): $Block
public "setCreativeTab"(arg0: $ResourceKey$Type<($CreativeModeTab$Type)>, arg1: $ItemLike$Type, arg2: boolean): $Block
public "isConduitFrameZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): boolean
public "isLadderZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "isStickyBlockZeta"(arg0: $BlockState$Type): boolean
public "isScaffoldingZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "canStickToZeta"(arg0: $BlockState$Type, arg1: $BlockState$Type): boolean
public "isFlammableZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): boolean
public "getSoundTypeZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): $SoundType
public "makesOpenTrapdoorAboveClimbableZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockState$Type): boolean
public "canSustainPlantZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type, arg4: string): boolean
public "getToolModifiedStateZeta"(arg0: $BlockState$Type, arg1: $UseOnContext$Type, arg2: string, arg3: boolean): $BlockState
public "collisionExtendsVerticallyZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): boolean
public "shouldDisplayFluidOverlayZeta"(arg0: $BlockState$Type, arg1: $BlockAndTintGetter$Type, arg2: $BlockPos$Type, arg3: $FluidState$Type): boolean
public "getEnchantPowerBonusZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type): float
public "getBeaconColorMultiplierZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): (float)[]
public "getLightEmissionZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type): integer
public "isEnabled"(): boolean
public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
get "module"(): $ZetaModule
get "block"(): $Block
set "creativeTab"(value: $ResourceKey$Type<($CreativeModeTab$Type)>)
get "enabled"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $HugeGlowShroomBlock$Type = ($HugeGlowShroomBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $HugeGlowShroomBlock_ = $HugeGlowShroomBlock$Type;
}}
declare module "packages/org/violetmoon/zeta/world/$DeferredFeature" {
import {$BonusChestFeature, $BonusChestFeature$Type} from "packages/net/minecraft/world/level/levelgen/feature/$BonusChestFeature"
import {$RandomFeatureConfiguration, $RandomFeatureConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$RandomFeatureConfiguration"
import {$GenerationStep$Decoration, $GenerationStep$Decoration$Type} from "packages/net/minecraft/world/level/levelgen/$GenerationStep$Decoration"
import {$SpikeConfiguration, $SpikeConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$SpikeConfiguration"
import {$LakeFeature$Configuration, $LakeFeature$Configuration$Type} from "packages/net/minecraft/world/level/levelgen/feature/$LakeFeature$Configuration"
import {$BlockColumnConfiguration, $BlockColumnConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$BlockColumnConfiguration"
import {$MultifaceGrowthConfiguration, $MultifaceGrowthConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$MultifaceGrowthConfiguration"
import {$RootSystemConfiguration, $RootSystemConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$RootSystemConfiguration"
import {$UnderwaterMagmaConfiguration, $UnderwaterMagmaConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$UnderwaterMagmaConfiguration"
import {$RandomPatchConfiguration, $RandomPatchConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$RandomPatchConfiguration"
import {$ProbabilityFeatureConfiguration, $ProbabilityFeatureConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$ProbabilityFeatureConfiguration"
import {$TreeConfiguration, $TreeConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$TreeConfiguration"
import {$TwistingVinesConfig, $TwistingVinesConfig$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$TwistingVinesConfig"
import {$FeaturePlaceContext, $FeaturePlaceContext$Type} from "packages/net/minecraft/world/level/levelgen/feature/$FeaturePlaceContext"
import {$DripstoneClusterConfiguration, $DripstoneClusterConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$DripstoneClusterConfiguration"
import {$LayerConfiguration, $LayerConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$LayerConfiguration"
import {$HugeMushroomFeatureConfiguration, $HugeMushroomFeatureConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$HugeMushroomFeatureConfiguration"
import {$ReplaceBlockConfiguration, $ReplaceBlockConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$ReplaceBlockConfiguration"
import {$BlockStateConfiguration, $BlockStateConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$BlockStateConfiguration"
import {$SimpleBlockConfiguration, $SimpleBlockConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$SimpleBlockConfiguration"
import {$HugeFungusConfiguration, $HugeFungusConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/$HugeFungusConfiguration"
import {$DiskConfiguration, $DiskConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$DiskConfiguration"
import {$SeagrassFeature, $SeagrassFeature$Type} from "packages/net/minecraft/world/level/levelgen/feature/$SeagrassFeature"
import {$ReplaceSphereConfiguration, $ReplaceSphereConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$ReplaceSphereConfiguration"
import {$FossilFeatureConfiguration, $FossilFeatureConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/$FossilFeatureConfiguration"
import {$DeltaFeatureConfiguration, $DeltaFeatureConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$DeltaFeatureConfiguration"
import {$PointedDripstoneConfiguration, $PointedDripstoneConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$PointedDripstoneConfiguration"
import {$SpringConfiguration, $SpringConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$SpringConfiguration"
import {$BlockPileConfiguration, $BlockPileConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$BlockPileConfiguration"
import {$OreConfiguration, $OreConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$OreConfiguration"
import {$SimpleRandomFeatureConfiguration, $SimpleRandomFeatureConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$SimpleRandomFeatureConfiguration"
import {$SculkPatchConfiguration, $SculkPatchConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$SculkPatchConfiguration"
import {$NetherForestVegetationConfig, $NetherForestVegetationConfig$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$NetherForestVegetationConfig"
import {$GeodeConfiguration, $GeodeConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$GeodeConfiguration"
import {$LargeDripstoneConfiguration, $LargeDripstoneConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$LargeDripstoneConfiguration"
import {$RandomBooleanFeatureConfiguration, $RandomBooleanFeatureConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$RandomBooleanFeatureConfiguration"
import {$ColumnFeatureConfiguration, $ColumnFeatureConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$ColumnFeatureConfiguration"
import {$CountConfiguration, $CountConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$CountConfiguration"
import {$VegetationPatchConfiguration, $VegetationPatchConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$VegetationPatchConfiguration"
import {$Feature, $Feature$Type} from "packages/net/minecraft/world/level/levelgen/feature/$Feature"
import {$NoneFeatureConfiguration, $NoneFeatureConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$NoneFeatureConfiguration"
import {$EndGatewayConfiguration, $EndGatewayConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$EndGatewayConfiguration"

export class $DeferredFeature extends $Feature<($NoneFeatureConfiguration)> {
static readonly "NO_OP": $Feature<($NoneFeatureConfiguration)>
static readonly "TREE": $Feature<($TreeConfiguration)>
static readonly "FLOWER": $Feature<($RandomPatchConfiguration)>
static readonly "NO_BONEMEAL_FLOWER": $Feature<($RandomPatchConfiguration)>
static readonly "RANDOM_PATCH": $Feature<($RandomPatchConfiguration)>
static readonly "BLOCK_PILE": $Feature<($BlockPileConfiguration)>
static readonly "SPRING": $Feature<($SpringConfiguration)>
static readonly "CHORUS_PLANT": $Feature<($NoneFeatureConfiguration)>
static readonly "REPLACE_SINGLE_BLOCK": $Feature<($ReplaceBlockConfiguration)>
static readonly "VOID_START_PLATFORM": $Feature<($NoneFeatureConfiguration)>
static readonly "DESERT_WELL": $Feature<($NoneFeatureConfiguration)>
static readonly "FOSSIL": $Feature<($FossilFeatureConfiguration)>
static readonly "HUGE_RED_MUSHROOM": $Feature<($HugeMushroomFeatureConfiguration)>
static readonly "HUGE_BROWN_MUSHROOM": $Feature<($HugeMushroomFeatureConfiguration)>
static readonly "ICE_SPIKE": $Feature<($NoneFeatureConfiguration)>
static readonly "GLOWSTONE_BLOB": $Feature<($NoneFeatureConfiguration)>
static readonly "FREEZE_TOP_LAYER": $Feature<($NoneFeatureConfiguration)>
static readonly "VINES": $Feature<($NoneFeatureConfiguration)>
static readonly "BLOCK_COLUMN": $Feature<($BlockColumnConfiguration)>
static readonly "VEGETATION_PATCH": $Feature<($VegetationPatchConfiguration)>
static readonly "WATERLOGGED_VEGETATION_PATCH": $Feature<($VegetationPatchConfiguration)>
static readonly "ROOT_SYSTEM": $Feature<($RootSystemConfiguration)>
static readonly "MULTIFACE_GROWTH": $Feature<($MultifaceGrowthConfiguration)>
static readonly "UNDERWATER_MAGMA": $Feature<($UnderwaterMagmaConfiguration)>
static readonly "MONSTER_ROOM": $Feature<($NoneFeatureConfiguration)>
static readonly "BLUE_ICE": $Feature<($NoneFeatureConfiguration)>
static readonly "ICEBERG": $Feature<($BlockStateConfiguration)>
static readonly "FOREST_ROCK": $Feature<($BlockStateConfiguration)>
static readonly "DISK": $Feature<($DiskConfiguration)>
static readonly "LAKE": $Feature<($LakeFeature$Configuration)>
static readonly "ORE": $Feature<($OreConfiguration)>
static readonly "END_SPIKE": $Feature<($SpikeConfiguration)>
static readonly "END_ISLAND": $Feature<($NoneFeatureConfiguration)>
static readonly "END_GATEWAY": $Feature<($EndGatewayConfiguration)>
static readonly "SEAGRASS": $SeagrassFeature
static readonly "KELP": $Feature<($NoneFeatureConfiguration)>
static readonly "CORAL_TREE": $Feature<($NoneFeatureConfiguration)>
static readonly "CORAL_MUSHROOM": $Feature<($NoneFeatureConfiguration)>
static readonly "CORAL_CLAW": $Feature<($NoneFeatureConfiguration)>
static readonly "SEA_PICKLE": $Feature<($CountConfiguration)>
static readonly "SIMPLE_BLOCK": $Feature<($SimpleBlockConfiguration)>
static readonly "BAMBOO": $Feature<($ProbabilityFeatureConfiguration)>
static readonly "HUGE_FUNGUS": $Feature<($HugeFungusConfiguration)>
static readonly "NETHER_FOREST_VEGETATION": $Feature<($NetherForestVegetationConfig)>
static readonly "WEEPING_VINES": $Feature<($NoneFeatureConfiguration)>
static readonly "TWISTING_VINES": $Feature<($TwistingVinesConfig)>
static readonly "BASALT_COLUMNS": $Feature<($ColumnFeatureConfiguration)>
static readonly "DELTA_FEATURE": $Feature<($DeltaFeatureConfiguration)>
static readonly "REPLACE_BLOBS": $Feature<($ReplaceSphereConfiguration)>
static readonly "FILL_LAYER": $Feature<($LayerConfiguration)>
static readonly "BONUS_CHEST": $BonusChestFeature
static readonly "BASALT_PILLAR": $Feature<($NoneFeatureConfiguration)>
static readonly "SCATTERED_ORE": $Feature<($OreConfiguration)>
static readonly "RANDOM_SELECTOR": $Feature<($RandomFeatureConfiguration)>
static readonly "SIMPLE_RANDOM_SELECTOR": $Feature<($SimpleRandomFeatureConfiguration)>
static readonly "RANDOM_BOOLEAN_SELECTOR": $Feature<($RandomBooleanFeatureConfiguration)>
static readonly "GEODE": $Feature<($GeodeConfiguration)>
static readonly "DRIPSTONE_CLUSTER": $Feature<($DripstoneClusterConfiguration)>
static readonly "LARGE_DRIPSTONE": $Feature<($LargeDripstoneConfiguration)>
static readonly "POINTED_DRIPSTONE": $Feature<($PointedDripstoneConfiguration)>
static readonly "SCULK_PATCH": $Feature<($SculkPatchConfiguration)>

constructor(arg0: $GenerationStep$Decoration$Type)

public "place"(arg0: $FeaturePlaceContext$Type<($NoneFeatureConfiguration$Type)>): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DeferredFeature$Type = ($DeferredFeature);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DeferredFeature_ = $DeferredFeature$Type;
}}
declare module "packages/org/violetmoon/quark/content/automation/client/render/$QuarkPistonBlockEntityRenderer" {
import {$PistonMovingBlockEntity, $PistonMovingBlockEntity$Type} from "packages/net/minecraft/world/level/block/piston/$PistonMovingBlockEntity"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $QuarkPistonBlockEntityRenderer {

constructor()

public static "renderPistonBlock"(arg0: $PistonMovingBlockEntity$Type, arg1: float, arg2: $PoseStack$Type, arg3: $MultiBufferSource$Type, arg4: integer, arg5: integer): boolean
public static "renderTESafely"(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: $BlockEntity$Type, arg4: $BlockEntity$Type, arg5: float, arg6: $Vec3$Type, arg7: $PoseStack$Type, arg8: $MultiBufferSource$Type, arg9: integer, arg10: integer): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $QuarkPistonBlockEntityRenderer$Type = ($QuarkPistonBlockEntityRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $QuarkPistonBlockEntityRenderer_ = $QuarkPistonBlockEntityRenderer$Type;
}}
declare module "packages/org/violetmoon/quark/content/world/gen/$ChorusVegetationGenerator" {
import {$MultiChunkFeatureGenerator, $MultiChunkFeatureGenerator$Type} from "packages/org/violetmoon/zeta/world/generator/multichunk/$MultiChunkFeatureGenerator"
import {$ChunkGenerator, $ChunkGenerator$Type} from "packages/net/minecraft/world/level/chunk/$ChunkGenerator"
import {$DimensionConfig, $DimensionConfig$Type} from "packages/org/violetmoon/zeta/config/type/$DimensionConfig"
import {$WorldGenRegion, $WorldGenRegion$Type} from "packages/net/minecraft/server/level/$WorldGenRegion"
import {$Random, $Random$Type} from "packages/java/util/$Random"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $ChorusVegetationGenerator extends $MultiChunkFeatureGenerator {
readonly "dimConfig": $DimensionConfig

constructor()

public "getSourcesInChunk"(arg0: $WorldGenRegion$Type, arg1: $Random$Type, arg2: $ChunkGenerator$Type, arg3: $BlockPos$Type): ($BlockPos)[]
public "getFeatureRadius"(): integer
public "generateChunkPart"(arg0: $BlockPos$Type, arg1: $ChunkGenerator$Type, arg2: $Random$Type, arg3: $BlockPos$Type, arg4: $WorldGenRegion$Type): void
get "featureRadius"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ChorusVegetationGenerator$Type = ($ChorusVegetationGenerator);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ChorusVegetationGenerator_ = $ChorusVegetationGenerator$Type;
}}
declare module "packages/org/violetmoon/quark/content/client/module/$UsesForCursesModule" {
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZConfigChanged, $ZConfigChanged$Type} from "packages/org/violetmoon/zeta/event/load/$ZConfigChanged"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $UsesForCursesModule extends $ZetaModule {
static "staticEnabled": boolean
static "vanishPumpkinOverlay": boolean
static "bindArmorStandsWithPlayerHeads": boolean
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public static "shouldHidePumpkinOverlay"(arg0: $ResourceLocation$Type, arg1: $Player$Type): boolean
public "configChanged"(arg0: $ZConfigChanged$Type): void
public static "shouldHideArmorStandModel"(arg0: $ItemStack$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $UsesForCursesModule$Type = ($UsesForCursesModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $UsesForCursesModule_ = $UsesForCursesModule$Type;
}}
declare module "packages/org/violetmoon/quark/base/$QuarkClient" {
import {$ZetaClient, $ZetaClient$Type} from "packages/org/violetmoon/zeta/client/$ZetaClient"
import {$IClientLootrIntegration, $IClientLootrIntegration$Type} from "packages/org/violetmoon/quark/integration/lootr/client/$IClientLootrIntegration"
import {$ClientTicker, $ClientTicker$Type} from "packages/org/violetmoon/zeta/client/$ClientTicker"

export class $QuarkClient {
static "instance": $QuarkClient
static readonly "ZETA_CLIENT": $ZetaClient
static readonly "ticker": $ClientTicker
static readonly "MISC_GROUP": string
static readonly "INV_GROUP": string
static readonly "EMOTE_GROUP": string
static readonly "LOOTR_INTEGRATION": $IClientLootrIntegration

constructor()

public static "start"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $QuarkClient$Type = ($QuarkClient);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $QuarkClient_ = $QuarkClient$Type;
}}
declare module "packages/org/violetmoon/zeta/util/$Utils" {
import {$Path, $Path$Type} from "packages/java/nio/file/$Path"

export class $Utils {

constructor()

public static "modsDir"(): $Path
public static "isDevEnv"(): boolean
public static "configDir"(): $Path
get "devEnv"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Utils$Type = ($Utils);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Utils_ = $Utils$Type;
}}
declare module "packages/org/violetmoon/zeta/event/play/loading/$ZAttachCapabilities$LevelCaps" {
import {$ZetaCapability, $ZetaCapability$Type} from "packages/org/violetmoon/zeta/capability/$ZetaCapability"
import {$ICapabilityProvider, $ICapabilityProvider$Type} from "packages/net/minecraftforge/common/capabilities/$ICapabilityProvider"
import {$ZAttachCapabilities, $ZAttachCapabilities$Type} from "packages/org/violetmoon/zeta/event/play/loading/$ZAttachCapabilities"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ZetaCapabilityManager, $ZetaCapabilityManager$Type} from "packages/org/violetmoon/zeta/capability/$ZetaCapabilityManager"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export interface $ZAttachCapabilities$LevelCaps extends $ZAttachCapabilities<($Level)> {

 "getObject"(): $Level
/**
 * 
 * @deprecated
 */
 "addCapabilityForgeApi"(arg0: $ResourceLocation$Type, arg1: $ICapabilityProvider$Type): void
 "getCapabilityManager"(): $ZetaCapabilityManager
 "addCapability"<C>(arg0: $ResourceLocation$Type, arg1: $ZetaCapability$Type<(C)>, arg2: C): void
}

export namespace $ZAttachCapabilities$LevelCaps {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZAttachCapabilities$LevelCaps$Type = ($ZAttachCapabilities$LevelCaps);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZAttachCapabilities$LevelCaps_ = $ZAttachCapabilities$LevelCaps$Type;
}}
declare module "packages/org/violetmoon/zeta/capability/$ZetaCapabilityManager" {
import {$ZetaCapability, $ZetaCapability$Type} from "packages/org/violetmoon/zeta/capability/$ZetaCapability"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export interface $ZetaCapabilityManager {

 "register"(arg0: $ZetaCapability$Type<(any)>, arg1: any): $ZetaCapabilityManager
 "hasCapability"<T>(arg0: $ZetaCapability$Type<(T)>, arg1: $BlockEntity$Type): boolean
 "hasCapability"<T>(arg0: $ZetaCapability$Type<(T)>, arg1: $Level$Type): boolean
 "hasCapability"<T>(arg0: $ZetaCapability$Type<(T)>, arg1: $ItemStack$Type): boolean
 "attachCapability"<T>(arg0: any, arg1: $ResourceLocation$Type, arg2: $ZetaCapability$Type<(T)>, arg3: T): void
 "getCapability"<T>(arg0: $ZetaCapability$Type<(T)>, arg1: $ItemStack$Type): T
 "getCapability"<T>(arg0: $ZetaCapability$Type<(T)>, arg1: $Level$Type): T
 "getCapability"<T>(arg0: $ZetaCapability$Type<(T)>, arg1: $BlockEntity$Type): T
}

export namespace $ZetaCapabilityManager {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZetaCapabilityManager$Type = ($ZetaCapabilityManager);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZetaCapabilityManager_ = $ZetaCapabilityManager$Type;
}}
declare module "packages/org/violetmoon/quark/content/client/module/$SoulCandlesModule" {
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ParticleOptions, $ParticleOptions$Type} from "packages/net/minecraft/core/particles/$ParticleOptions"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZConfigChanged, $ZConfigChanged$Type} from "packages/org/violetmoon/zeta/event/load/$ZConfigChanged"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $SoulCandlesModule extends $ZetaModule {
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "configChanged"(arg0: $ZConfigChanged$Type): void
public static "getParticleOptions"(arg0: $ParticleOptions$Type, arg1: $Level$Type, arg2: double, arg3: double, arg4: double): $ParticleOptions
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SoulCandlesModule$Type = ($SoulCandlesModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SoulCandlesModule_ = $SoulCandlesModule$Type;
}}
declare module "packages/org/violetmoon/quark/content/building/block/$HollowPillarBlock" {
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$Fluid, $Fluid$Type} from "packages/net/minecraft/world/level/material/$Fluid"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$SimpleWaterloggedBlock, $SimpleWaterloggedBlock$Type} from "packages/net/minecraft/world/level/block/$SimpleWaterloggedBlock"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$FluidState, $FluidState$Type} from "packages/net/minecraft/world/level/material/$FluidState"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$ZetaPillarBlock, $ZetaPillarBlock$Type} from "packages/org/violetmoon/zeta/block/$ZetaPillarBlock"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$CollisionContext, $CollisionContext$Type} from "packages/net/minecraft/world/phys/shapes/$CollisionContext"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$EnumProperty, $EnumProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$EnumProperty"
import {$Direction$Axis, $Direction$Axis$Type} from "packages/net/minecraft/core/$Direction$Axis"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$ICrawlSpaceBlock, $ICrawlSpaceBlock$Type} from "packages/org/violetmoon/quark/api/$ICrawlSpaceBlock"

export class $HollowPillarBlock extends $ZetaPillarBlock implements $SimpleWaterloggedBlock, $ICrawlSpaceBlock {
static readonly "WATERLOGGED": $BooleanProperty
static readonly "AXIS": $EnumProperty<($Direction$Axis)>
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(arg0: string, arg1: $ZetaModule$Type, arg2: $BlockBehaviour$Properties$Type)

public "isLadderZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "propagatesSkylightDown"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type): boolean
public "getStateForPlacement"(arg0: $BlockPlaceContext$Type): $BlockState
public "canCrawl"(arg0: $Level$Type, arg1: $BlockState$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): boolean
public "updateShape"(arg0: $BlockState$Type, arg1: $Direction$Type, arg2: $BlockState$Type, arg3: $LevelAccessor$Type, arg4: $BlockPos$Type, arg5: $BlockPos$Type): $BlockState
public "useShapeForLightOcclusion"(arg0: $BlockState$Type): boolean
public "getFluidState"(arg0: $BlockState$Type): $FluidState
public "getShape"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $CollisionContext$Type): $VoxelShape
public "getPickupSound"(): $Optional<($SoundEvent)>
public "canPlaceLiquid"(arg0: $BlockGetter$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: $Fluid$Type): boolean
public "placeLiquid"(arg0: $LevelAccessor$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: $FluidState$Type): boolean
public "pickupBlock"(arg0: $LevelAccessor$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type): $ItemStack
public "crawlHeight"(arg0: $Level$Type, arg1: $BlockState$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): double
public "isLog"(arg0: $ServerPlayer$Type, arg1: $BlockState$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): boolean
public "getPickupSound"(arg0: $BlockState$Type): $Optional<($SoundEvent)>
public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
get "pickupSound"(): $Optional<($SoundEvent)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $HollowPillarBlock$Type = ($HollowPillarBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $HollowPillarBlock_ = $HollowPillarBlock$Type;
}}
declare module "packages/org/violetmoon/zeta/advancement/modifier/$MonsterHunterModifier" {
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$AdvancementModifier, $AdvancementModifier$Type} from "packages/org/violetmoon/zeta/advancement/$AdvancementModifier"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$IMutableAdvancement, $IMutableAdvancement$Type} from "packages/org/violetmoon/zeta/api/$IMutableAdvancement"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $MonsterHunterModifier extends $AdvancementModifier {
readonly "module": $ZetaModule

constructor(arg0: $ZetaModule$Type, arg1: $Set$Type<($EntityType$Type<(any)>)>)

public "apply"(arg0: $ResourceLocation$Type, arg1: $IMutableAdvancement$Type): boolean
public "getTargets"(): $Set<($ResourceLocation)>
get "targets"(): $Set<($ResourceLocation)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MonsterHunterModifier$Type = ($MonsterHunterModifier);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MonsterHunterModifier_ = $MonsterHunterModifier$Type;
}}
declare module "packages/org/violetmoon/zeta/event/bus/$Cancellable" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $Cancellable {

 "cancel"(): void
 "setCanceled"(arg0: boolean): void
 "isCanceled"(): boolean
}

export namespace $Cancellable {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Cancellable$Type = ($Cancellable);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Cancellable_ = $Cancellable$Type;
}}
declare module "packages/org/violetmoon/zeta/world/generator/multichunk/$MultiChunkFeatureGenerator" {
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$BooleanSupplier, $BooleanSupplier$Type} from "packages/java/util/function/$BooleanSupplier"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$ChunkGenerator, $ChunkGenerator$Type} from "packages/net/minecraft/world/level/chunk/$ChunkGenerator"
import {$Generator, $Generator$Type} from "packages/org/violetmoon/zeta/world/generator/$Generator"
import {$DimensionConfig, $DimensionConfig$Type} from "packages/org/violetmoon/zeta/config/type/$DimensionConfig"
import {$WorldGenRegion, $WorldGenRegion$Type} from "packages/net/minecraft/server/level/$WorldGenRegion"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$Random, $Random$Type} from "packages/java/util/$Random"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $MultiChunkFeatureGenerator extends $Generator {
readonly "dimConfig": $DimensionConfig

constructor(arg0: $DimensionConfig$Type, arg1: $BooleanSupplier$Type, arg2: long)

public "getSourcesInChunk"(arg0: $WorldGenRegion$Type, arg1: $Random$Type, arg2: $ChunkGenerator$Type, arg3: $BlockPos$Type): ($BlockPos)[]
public "getFeatureRadius"(): integer
public "forEachChunkBlock"(arg0: $LevelReader$Type, arg1: $BlockPos$Type, arg2: integer, arg3: integer, arg4: $Consumer$Type<($BlockPos$Type)>): void
public "generateChunkPart"(arg0: $BlockPos$Type, arg1: $ChunkGenerator$Type, arg2: $Random$Type, arg3: $BlockPos$Type, arg4: $WorldGenRegion$Type): void
public "isInsideChunk"(arg0: $BlockPos$Type, arg1: integer, arg2: integer): boolean
public "generateChunk"(arg0: $WorldGenRegion$Type, arg1: $ChunkGenerator$Type, arg2: $RandomSource$Type, arg3: $BlockPos$Type): void
get "featureRadius"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MultiChunkFeatureGenerator$Type = ($MultiChunkFeatureGenerator);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MultiChunkFeatureGenerator_ = $MultiChunkFeatureGenerator$Type;
}}
declare module "packages/org/violetmoon/zeta/event/play/$ZItemTooltip" {
import {$IZetaPlayEvent, $IZetaPlayEvent$Type} from "packages/org/violetmoon/zeta/event/bus/$IZetaPlayEvent"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export interface $ZItemTooltip extends $IZetaPlayEvent {

 "getFlags"(): $TooltipFlag
 "getEntity"(): $Player
 "getItemStack"(): $ItemStack
 "getToolTip"(): $List<($Component)>
}

export namespace $ZItemTooltip {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZItemTooltip$Type = ($ZItemTooltip);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZItemTooltip_ = $ZItemTooltip$Type;
}}
declare module "packages/org/violetmoon/quark/content/mobs/ai/$BarkAtDarknessGoal" {
import {$Goal, $Goal$Type} from "packages/net/minecraft/world/entity/ai/goal/$Goal"
import {$Shiba, $Shiba$Type} from "packages/org/violetmoon/quark/content/mobs/entity/$Shiba"

export class $BarkAtDarknessGoal extends $Goal {

constructor(arg0: $Shiba$Type)

public "canUse"(): boolean
public "tick"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BarkAtDarknessGoal$Type = ($BarkAtDarknessGoal);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BarkAtDarknessGoal_ = $BarkAtDarknessGoal$Type;
}}
declare module "packages/org/violetmoon/zeta/event/play/$ZAnvilUpdate$Highest" {
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$ZAnvilUpdate, $ZAnvilUpdate$Type} from "packages/org/violetmoon/zeta/event/play/$ZAnvilUpdate"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export interface $ZAnvilUpdate$Highest extends $ZAnvilUpdate {

 "getName"(): string
 "getMaterialCost"(): integer
 "getRight"(): $ItemStack
 "getLeft"(): $ItemStack
 "setOutput"(arg0: $ItemStack$Type): void
 "setCost"(arg0: integer): void
 "setMaterialCost"(arg0: integer): void
 "getPlayer"(): $Player
 "getOutput"(): $ItemStack
}

export namespace $ZAnvilUpdate$Highest {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZAnvilUpdate$Highest$Type = ($ZAnvilUpdate$Highest);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZAnvilUpdate$Highest_ = $ZAnvilUpdate$Highest$Type;
}}
declare module "packages/org/violetmoon/zeta/network/message/$S2CLoginFlag" {
import {$Pair, $Pair$Type} from "packages/org/apache/commons/lang3/tuple/$Pair"
import {$List, $List$Type} from "packages/java/util/$List"
import {$IZetaNetworkEventContext, $IZetaNetworkEventContext$Type} from "packages/org/violetmoon/zeta/network/$IZetaNetworkEventContext"
import {$BitSet, $BitSet$Type} from "packages/java/util/$BitSet"
import {$ZetaHandshakeMessage, $ZetaHandshakeMessage$Type} from "packages/org/violetmoon/zeta/network/$ZetaHandshakeMessage"

export class $S2CLoginFlag extends $ZetaHandshakeMessage {
 "flags": $BitSet
 "expectedLength": integer
 "expectedHash": integer

constructor()

public "receive"(arg0: $IZetaNetworkEventContext$Type): boolean
public static "generateRegistryPackets"(arg0: boolean): $List<($Pair<(string), ($S2CLoginFlag)>)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $S2CLoginFlag$Type = ($S2CLoginFlag);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $S2CLoginFlag_ = $S2CLoginFlag$Type;
}}
declare module "packages/org/violetmoon/quark/content/tweaks/compat/$TotemOfHoldingCuriosCompat" {
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$TotemOfHoldingEntity, $TotemOfHoldingEntity$Type} from "packages/org/violetmoon/quark/addons/oddities/entity/$TotemOfHoldingEntity"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export class $TotemOfHoldingCuriosCompat {

constructor()

public static "saveCurios"(arg0: $Player$Type, arg1: $TotemOfHoldingEntity$Type): void
public static "equipCurios"(arg0: $Player$Type, arg1: $List$Type<($ItemStack$Type)>, arg2: $ItemStack$Type): $ItemStack
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TotemOfHoldingCuriosCompat$Type = ($TotemOfHoldingCuriosCompat);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TotemOfHoldingCuriosCompat_ = $TotemOfHoldingCuriosCompat$Type;
}}
declare module "packages/org/violetmoon/quark/content/mobs/entity/$Foxhound" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$WalkAnimationState, $WalkAnimationState$Type} from "packages/net/minecraft/world/entity/$WalkAnimationState"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$MobSpawnType, $MobSpawnType$Type} from "packages/net/minecraft/world/entity/$MobSpawnType"
import {$SleepGoal, $SleepGoal$Type} from "packages/org/violetmoon/quark/content/mobs/ai/$SleepGoal"
import {$PathNavigation, $PathNavigation$Type} from "packages/net/minecraft/world/entity/ai/navigation/$PathNavigation"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$AttributeMap, $AttributeMap$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeMap"
import {$Enemy, $Enemy$Type} from "packages/net/minecraft/world/entity/monster/$Enemy"
import {$ClientGamePacketListener, $ClientGamePacketListener$Type} from "packages/net/minecraft/network/protocol/game/$ClientGamePacketListener"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$Animal, $Animal$Type} from "packages/net/minecraft/world/entity/animal/$Animal"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$ServerLevelAccessor, $ServerLevelAccessor$Type} from "packages/net/minecraft/world/level/$ServerLevelAccessor"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$LevelRenderer, $LevelRenderer$Type} from "packages/net/minecraft/client/renderer/$LevelRenderer"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$DifficultyInstance, $DifficultyInstance$Type} from "packages/net/minecraft/world/$DifficultyInstance"
import {$GoalSelector, $GoalSelector$Type} from "packages/net/minecraft/world/entity/ai/goal/$GoalSelector"
import {$Packet, $Packet$Type} from "packages/net/minecraft/network/protocol/$Packet"
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$SpawnGroupData, $SpawnGroupData$Type} from "packages/net/minecraft/world/entity/$SpawnGroupData"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$Wolf, $Wolf$Type} from "packages/net/minecraft/world/entity/animal/$Wolf"
import {$AgeableMob, $AgeableMob$Type} from "packages/net/minecraft/world/entity/$AgeableMob"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $Foxhound extends $Wolf implements $Enemy {
static readonly "FOXHOUND_LOOT_TABLE": $ResourceLocation
static readonly "PREY_SELECTOR": $Predicate<($LivingEntity)>
 "isWet": boolean
static readonly "BABY_START_AGE": integer
 "entityJs$builder": any
static readonly "MAX_WEARING_ARMOR_CHANCE": float
static readonly "MAX_PICKUP_LOOT_CHANCE": float
static readonly "MAX_ENCHANTED_ARMOR_CHANCE": float
static readonly "MAX_ENCHANTED_WEAPON_CHANCE": float
static readonly "LEASH_TAG": string
static readonly "DEFAULT_EQUIPMENT_DROP_CHANCE": float
static readonly "PRESERVE_ITEM_DROP_CHANCE": integer
static readonly "UPDATE_GOAL_SELECTOR_EVERY_N_TICKS": integer
 "ambientSoundTime": integer
 "navigation": $PathNavigation
readonly "goalSelector": $GoalSelector
readonly "targetSelector": $GoalSelector
 "leashInfoTag": $CompoundTag
static readonly "HAND_SLOTS": integer
static readonly "ARMOR_SLOTS": integer
static readonly "EQUIPMENT_SLOT_OFFSET": integer
static readonly "ARMOR_SLOT_OFFSET": integer
static readonly "SWING_DURATION": integer
static readonly "PLAYER_HURT_EXPERIENCE_TIME": integer
static readonly "MIN_MOVEMENT_DISTANCE": double
static readonly "DEFAULT_BASE_GRAVITY": double
static readonly "DEATH_DURATION": integer
static readonly "USE_ITEM_INTERVAL": integer
static readonly "EXTRA_RENDER_CULLING_SIZE_WITH_BIG_HAT": float
 "attributes": $AttributeMap
readonly "activeEffects": $Map<($MobEffect), ($MobEffectInstance)>
 "swinging": boolean
 "swingingArm": $InteractionHand
 "swingTime": integer
 "removeArrowTime": integer
 "removeStingerTime": integer
 "hurtTime": integer
 "hurtDuration": integer
 "deathTime": integer
 "oAttackAnim": float
 "attackAnim": float
 "attackStrengthTicker": integer
readonly "walkAnimation": $WalkAnimationState
readonly "invulnerableDuration": integer
readonly "timeOffs": float
readonly "rotA": float
 "yBodyRot": float
 "yBodyRotO": float
 "yHeadRot": float
 "yHeadRotO": float
 "dead": boolean
 "jumping": boolean
 "xxa": float
 "yya": float
 "zza": float
 "effectsDirty": boolean
 "noJumpDelay": integer
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(arg0: $EntityType$Type<(any)>, arg1: $Level$Type)

public "tick"(): void
public "readAdditionalSaveData"(arg0: $CompoundTag$Type): void
public "addAdditionalSaveData"(arg0: $CompoundTag$Type): void
public "attack"(arg0: $DamageSource$Type, arg1: float): boolean
public "doHurtTarget"(arg0: $Entity$Type): boolean
public "setBlue"(arg0: boolean): void
public "isBlue"(): boolean
public "getWalkTargetValue"(arg0: $BlockPos$Type, arg1: $LevelReader$Type): float
public static "spawnPredicate"(arg0: $EntityType$Type<(any)>, arg1: $ServerLevelAccessor$Type, arg2: $MobSpawnType$Type, arg3: $BlockPos$Type, arg4: $RandomSource$Type): boolean
public "isInWaterOrRain"(): boolean
public "getRemainingPersistentAngerTime"(): integer
public "getAddEntityPacket"(): $Packet<($ClientGamePacketListener)>
public "isPersistenceRequired"(): boolean
public "removeWhenFarAway"(arg0: double): boolean
public "requiresCustomPersistence"(): boolean
public "getMaxSpawnClusterSize"(): integer
public "mobInteract"(arg0: $Player$Type, arg1: $InteractionHand$Type): $InteractionResult
public "finalizeSpawn"(arg0: $ServerLevelAccessor$Type, arg1: $DifficultyInstance$Type, arg2: $MobSpawnType$Type, arg3: $SpawnGroupData$Type, arg4: $CompoundTag$Type): $SpawnGroupData
public "getBreedOffspring"(arg0: $ServerLevel$Type, arg1: $AgeableMob$Type): $Wolf
public "canMate"(arg0: $Animal$Type): boolean
public "isTatering"(): boolean
public "getSleepGoal"(): $SleepGoal
public "setTatering"(arg0: boolean): void
public "setLastHurtByMob"(arg0: $LivingEntity$Type): void
public "setLastHurtByPlayer"(arg0: $Player$Type): void
public "getLastHurtByMob"(): $LivingEntity
public "canAttack"(arg0: $LivingEntity$Type): boolean
public "setTarget"(arg0: $LivingEntity$Type): void
public "getTarget"(): $LivingEntity
public "lithiumOnEquipmentChanged"(): void
public "tdv$getDynamicLightX"(): double
public "tdv$getDynamicLightZ"(): double
public "tdv$getDynamicLightWorld"(): $Level
public "tdv$shouldUpdateDynamicLight"(): boolean
public "tdv$resetDynamicLight"(): void
public "tdv$getDynamicLightY"(): double
public "tdv$lambdynlights$scheduleTrackedChunksRebuild"(arg0: $LevelRenderer$Type): void
public "tdv$lambdynlights$updateDynamicLight"(arg0: $LevelRenderer$Type): boolean
public "getCachedFeetBlockState"(): $BlockState
set "blue"(value: boolean)
get "blue"(): boolean
get "inWaterOrRain"(): boolean
get "remainingPersistentAngerTime"(): integer
get "addEntityPacket"(): $Packet<($ClientGamePacketListener)>
get "persistenceRequired"(): boolean
get "maxSpawnClusterSize"(): integer
get "tatering"(): boolean
get "sleepGoal"(): $SleepGoal
set "tatering"(value: boolean)
set "lastHurtByMob"(value: $LivingEntity$Type)
set "lastHurtByPlayer"(value: $Player$Type)
get "lastHurtByMob"(): $LivingEntity
set "target"(value: $LivingEntity$Type)
get "target"(): $LivingEntity
get "cachedFeetBlockState"(): $BlockState
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Foxhound$Type = ($Foxhound);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Foxhound_ = $Foxhound$Type;
}}
declare module "packages/org/violetmoon/quark/content/management/module/$ItemSharingModule" {
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$MinecraftServer, $MinecraftServer$Type} from "packages/net/minecraft/server/$MinecraftServer"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $ItemSharingModule extends $ZetaModule {
static "renderItemsInChat": boolean
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public static "canShare"(arg0: $UUID$Type, arg1: $MinecraftServer$Type): boolean
public static "createStackComponent"(arg0: $ItemStack$Type, arg1: $MutableComponent$Type): $MutableComponent
public static "createStackComponent"(arg0: $ItemStack$Type): $MutableComponent
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ItemSharingModule$Type = ($ItemSharingModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ItemSharingModule_ = $ItemSharingModule$Type;
}}
declare module "packages/org/violetmoon/zeta/config/$Definition$Builder" {
import {$Definition, $Definition$Type} from "packages/org/violetmoon/zeta/config/$Definition"
import {$List, $List$Type} from "packages/java/util/$List"

export class $Definition$Builder<B extends $Definition$Builder<(B), (T)>, T extends $Definition> {

constructor()

public "name"(arg0: string): B
public "comment"(arg0: $List$Type<(string)>): B
public "comment"(arg0: string): B
public "build"(): T
public "hint"(arg0: any): B
public "englishDisplayName"(arg0: string): B
public "lowercaseName"(arg0: string): B
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Definition$Builder$Type<B, T> = ($Definition$Builder<(B), (T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Definition$Builder_<B, T> = $Definition$Builder$Type<(B), (T)>;
}}
declare module "packages/org/violetmoon/zeta/client/config/screen/$ZetaConfigHomeScreen" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Button, $Button$Type} from "packages/net/minecraft/client/gui/components/$Button"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$ZetaClient, $ZetaClient$Type} from "packages/org/violetmoon/zeta/client/$ZetaClient"
import {$ZetaScreen, $ZetaScreen$Type} from "packages/org/violetmoon/zeta/client/config/screen/$ZetaScreen"
import {$List, $List$Type} from "packages/java/util/$List"

export class $ZetaConfigHomeScreen extends $ZetaScreen {
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering

constructor(arg0: $ZetaClient$Type, arg1: $Screen$Type)

public "commit"(arg0: $Button$Type): void
public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
public "tick"(): void
public "centeredRow"(arg0: integer, arg1: integer, arg2: integer, arg3: integer): $List<(integer)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZetaConfigHomeScreen$Type = ($ZetaConfigHomeScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZetaConfigHomeScreen_ = $ZetaConfigHomeScreen$Type;
}}
declare module "packages/org/violetmoon/zeta/mod/$ZetaClientProxy" {
import {$ZetaModProxy, $ZetaModProxy$Type} from "packages/org/violetmoon/zeta/mod/$ZetaModProxy"
import {$ZetaClient, $ZetaClient$Type} from "packages/org/violetmoon/zeta/client/$ZetaClient"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"

export class $ZetaClientProxy extends $ZetaModProxy {
static "ZETA_CLIENT": $ZetaClient

constructor()

public "registerEvents"(arg0: $Zeta$Type): void
public "setClientZeta"(arg0: any): void
set "clientZeta"(value: any)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZetaClientProxy$Type = ($ZetaClientProxy);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZetaClientProxy_ = $ZetaClientProxy$Type;
}}
declare module "packages/org/violetmoon/quark/base/handler/$InventoryTransferHandler" {
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$AbstractContainerMenu, $AbstractContainerMenu$Type} from "packages/net/minecraft/world/inventory/$AbstractContainerMenu"

export class $InventoryTransferHandler {

constructor()

public static "transfer"(arg0: $Player$Type, arg1: boolean, arg2: boolean): void
public static "accepts"(arg0: $AbstractContainerMenu$Type, arg1: $Player$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $InventoryTransferHandler$Type = ($InventoryTransferHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $InventoryTransferHandler_ = $InventoryTransferHandler$Type;
}}
declare module "packages/org/violetmoon/zeta/item/$ZetaSpawnEggItem" {
import {$SpawnEggItem, $SpawnEggItem$Type} from "packages/net/minecraft/world/item/$SpawnEggItem"
import {$BooleanSupplier, $BooleanSupplier$Type} from "packages/java/util/function/$BooleanSupplier"
import {$ForgeSpawnEggItem, $ForgeSpawnEggItem$Type} from "packages/net/minecraftforge/common/$ForgeSpawnEggItem"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$CreativeModeTab, $CreativeModeTab$Type} from "packages/net/minecraft/world/item/$CreativeModeTab"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$IZetaItem, $IZetaItem$Type} from "packages/org/violetmoon/zeta/item/$IZetaItem"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$ResourceKey, $ResourceKey$Type} from "packages/net/minecraft/resources/$ResourceKey"
import {$ItemLike, $ItemLike$Type} from "packages/net/minecraft/world/level/$ItemLike"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $ZetaSpawnEggItem extends $ForgeSpawnEggItem implements $IZetaItem {
static readonly "BY_ID": $Map<($EntityType<(any)>), ($SpawnEggItem)>
 "defaultType": $EntityType<(any)>
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Supplier$Type<($EntityType$Type<(any)>)>, arg1: integer, arg2: integer, arg3: string, arg4: $ZetaModule$Type, arg5: $Item$Properties$Type)

public "getModule"(): $ZetaModule
public "doesConditionApply"(): boolean
public "setCondition"(arg0: $BooleanSupplier$Type): $ZetaSpawnEggItem
public "getItem"(): $Item
public "setCreativeTab"(arg0: $ResourceKey$Type<($CreativeModeTab$Type)>): $Item
public "setCreativeTab"(arg0: $ResourceKey$Type<($CreativeModeTab$Type)>, arg1: $ItemLike$Type, arg2: boolean): $Item
public "isEnabled"(): boolean
public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
get "module"(): $ZetaModule
set "condition"(value: $BooleanSupplier$Type)
get "item"(): $Item
set "creativeTab"(value: $ResourceKey$Type<($CreativeModeTab$Type)>)
get "enabled"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZetaSpawnEggItem$Type = ($ZetaSpawnEggItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZetaSpawnEggItem_ = $ZetaSpawnEggItem$Type;
}}
declare module "packages/org/violetmoon/zeta/event/load/$ZConfigChanged" {
import {$IZetaLoadEvent, $IZetaLoadEvent$Type} from "packages/org/violetmoon/zeta/event/bus/$IZetaLoadEvent"

export class $ZConfigChanged implements $IZetaLoadEvent {

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZConfigChanged$Type = ($ZConfigChanged);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZConfigChanged_ = $ZConfigChanged$Type;
}}
declare module "packages/org/violetmoon/zeta/api/$IMutableAdvancement" {
import {$Criterion, $Criterion$Type} from "packages/net/minecraft/advancements/$Criterion"

export interface $IMutableAdvancement {

 "addRequiredCriterion"(arg0: string, arg1: $Criterion$Type): void
 "getCriterion"(arg0: string): $Criterion
 "addOrCriterion"(arg0: string, arg1: $Criterion$Type): void
}

export namespace $IMutableAdvancement {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IMutableAdvancement$Type = ($IMutableAdvancement);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IMutableAdvancement_ = $IMutableAdvancement$Type;
}}
declare module "packages/org/violetmoon/zetaimplforge/client/$ForgeZetaClient" {
import {$ScreenEvent$Init$Pre, $ScreenEvent$Init$Pre$Type} from "packages/net/minecraftforge/client/event/$ScreenEvent$Init$Pre"
import {$ScreenEvent$CharacterTyped$Pre, $ScreenEvent$CharacterTyped$Pre$Type} from "packages/net/minecraftforge/client/event/$ScreenEvent$CharacterTyped$Pre"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$RegisterClientReloadListenersEvent, $RegisterClientReloadListenersEvent$Type} from "packages/net/minecraftforge/client/event/$RegisterClientReloadListenersEvent"
import {$TopLayerTooltipHandler, $TopLayerTooltipHandler$Type} from "packages/org/violetmoon/zeta/client/$TopLayerTooltipHandler"
import {$ScreenEvent$MouseScrolled$Pre, $ScreenEvent$MouseScrolled$Pre$Type} from "packages/net/minecraftforge/client/event/$ScreenEvent$MouseScrolled$Pre"
import {$IZetaLoadEvent, $IZetaLoadEvent$Type} from "packages/org/violetmoon/zeta/event/bus/$IZetaLoadEvent"
import {$ZetaClient, $ZetaClient$Type} from "packages/org/violetmoon/zeta/client/$ZetaClient"
import {$EntityRenderersEvent$AddLayers, $EntityRenderersEvent$AddLayers$Type} from "packages/net/minecraftforge/client/event/$EntityRenderersEvent$AddLayers"
import {$ZetaEventBus, $ZetaEventBus$Type} from "packages/org/violetmoon/zeta/event/bus/$ZetaEventBus"
import {$ModelEvent$RegisterAdditional, $ModelEvent$RegisterAdditional$Type} from "packages/net/minecraftforge/client/event/$ModelEvent$RegisterAdditional"
import {$ScreenEvent$Opening, $ScreenEvent$Opening$Type} from "packages/net/minecraftforge/client/event/$ScreenEvent$Opening"
import {$ClientRegistryExtension, $ClientRegistryExtension$Type} from "packages/org/violetmoon/zeta/client/$ClientRegistryExtension"
import {$ClientConfigManager, $ClientConfigManager$Type} from "packages/org/violetmoon/zeta/client/config/$ClientConfigManager"
import {$ScreenEvent$MouseButtonPressed$Pre, $ScreenEvent$MouseButtonPressed$Pre$Type} from "packages/net/minecraftforge/client/event/$ScreenEvent$MouseButtonPressed$Pre"
import {$ScreenshotEvent, $ScreenshotEvent$Type} from "packages/net/minecraftforge/client/event/$ScreenshotEvent"
import {$RenderGuiOverlayEvent$Pre, $RenderGuiOverlayEvent$Pre$Type} from "packages/net/minecraftforge/client/event/$RenderGuiOverlayEvent$Pre"
import {$RegisterKeyMappingsEvent, $RegisterKeyMappingsEvent$Type} from "packages/net/minecraftforge/client/event/$RegisterKeyMappingsEvent"
import {$ModelEvent$ModifyBakingResult, $ModelEvent$ModifyBakingResult$Type} from "packages/net/minecraftforge/client/event/$ModelEvent$ModifyBakingResult"
import {$ItemColors, $ItemColors$Type} from "packages/net/minecraft/client/color/item/$ItemColors"
import {$RegistryAccess, $RegistryAccess$Type} from "packages/net/minecraft/core/$RegistryAccess"
import {$MovementInputUpdateEvent, $MovementInputUpdateEvent$Type} from "packages/net/minecraftforge/client/event/$MovementInputUpdateEvent"
import {$RenderLivingEvent$Pre, $RenderLivingEvent$Pre$Type} from "packages/net/minecraftforge/client/event/$RenderLivingEvent$Pre"
import {$ScreenEvent$Render$Post, $ScreenEvent$Render$Post$Type} from "packages/net/minecraftforge/client/event/$ScreenEvent$Render$Post"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$RenderLivingEvent$Post, $RenderLivingEvent$Post$Type} from "packages/net/minecraftforge/client/event/$RenderLivingEvent$Post"
import {$ScreenEvent$Render$Pre, $ScreenEvent$Render$Pre$Type} from "packages/net/minecraftforge/client/event/$ScreenEvent$Render$Pre"
import {$TickEvent$ClientTickEvent, $TickEvent$ClientTickEvent$Type} from "packages/net/minecraftforge/event/$TickEvent$ClientTickEvent"
import {$IZetaPlayEvent, $IZetaPlayEvent$Type} from "packages/org/violetmoon/zeta/event/bus/$IZetaPlayEvent"
import {$BlockEntityWithoutLevelRenderer, $BlockEntityWithoutLevelRenderer$Type} from "packages/net/minecraft/client/renderer/$BlockEntityWithoutLevelRenderer"
import {$BlockColor, $BlockColor$Type} from "packages/net/minecraft/client/color/block/$BlockColor"
import {$FMLClientSetupEvent, $FMLClientSetupEvent$Type} from "packages/net/minecraftforge/fml/event/lifecycle/$FMLClientSetupEvent"
import {$RenderGuiOverlayEvent$Post, $RenderGuiOverlayEvent$Post$Type} from "packages/net/minecraftforge/client/event/$RenderGuiOverlayEvent$Post"
import {$RegisterColorHandlersEvent$Item, $RegisterColorHandlersEvent$Item$Type} from "packages/net/minecraftforge/client/event/$RegisterColorHandlersEvent$Item"
import {$ScreenEvent$CharacterTyped$Post, $ScreenEvent$CharacterTyped$Post$Type} from "packages/net/minecraftforge/client/event/$ScreenEvent$CharacterTyped$Post"
import {$HumanoidArmorModelGetter, $HumanoidArmorModelGetter$Type} from "packages/org/violetmoon/zeta/client/$HumanoidArmorModelGetter"
import {$ModelEvent$RegisterGeometryLoaders, $ModelEvent$RegisterGeometryLoaders$Type} from "packages/net/minecraftforge/client/event/$ModelEvent$RegisterGeometryLoaders"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$ContainerScreenEvent$Render$Foreground, $ContainerScreenEvent$Render$Foreground$Type} from "packages/net/minecraftforge/client/event/$ContainerScreenEvent$Render$Foreground"
import {$ContainerScreenEvent$Render$Background, $ContainerScreenEvent$Render$Background$Type} from "packages/net/minecraftforge/client/event/$ContainerScreenEvent$Render$Background"
import {$BlockColors, $BlockColors$Type} from "packages/net/minecraft/client/color/block/$BlockColors"
import {$RenderPlayerEvent$Post, $RenderPlayerEvent$Post$Type} from "packages/net/minecraftforge/client/event/$RenderPlayerEvent$Post"
import {$RenderGuiOverlayEvent, $RenderGuiOverlayEvent$Type} from "packages/net/minecraftforge/client/event/$RenderGuiOverlayEvent"
import {$ScreenEvent$MouseScrolled$Post, $ScreenEvent$MouseScrolled$Post$Type} from "packages/net/minecraftforge/client/event/$ScreenEvent$MouseScrolled$Post"
import {$InputEvent$MouseButton, $InputEvent$MouseButton$Type} from "packages/net/minecraftforge/client/event/$InputEvent$MouseButton"
import {$ModelEvent$BakingCompleted, $ModelEvent$BakingCompleted$Type} from "packages/net/minecraftforge/client/event/$ModelEvent$BakingCompleted"
import {$RenderHighlightEvent$Block, $RenderHighlightEvent$Block$Type} from "packages/net/minecraftforge/client/event/$RenderHighlightEvent$Block"
import {$TickEvent$RenderTickEvent, $TickEvent$RenderTickEvent$Type} from "packages/net/minecraftforge/event/$TickEvent$RenderTickEvent"
import {$InputEvent$Key, $InputEvent$Key$Type} from "packages/net/minecraftforge/client/event/$InputEvent$Key"
import {$ScreenEvent$KeyPressed$Post, $ScreenEvent$KeyPressed$Post$Type} from "packages/net/minecraftforge/client/event/$ScreenEvent$KeyPressed$Post"
import {$RenderPlayerEvent$Pre, $RenderPlayerEvent$Pre$Type} from "packages/net/minecraftforge/client/event/$RenderPlayerEvent$Pre"
import {$ScreenEvent$MouseButtonPressed$Post, $ScreenEvent$MouseButtonPressed$Post$Type} from "packages/net/minecraftforge/client/event/$ScreenEvent$MouseButtonPressed$Post"
import {$ItemColor, $ItemColor$Type} from "packages/net/minecraft/client/color/item/$ItemColor"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$RenderTooltipEvent$GatherComponents, $RenderTooltipEvent$GatherComponents$Type} from "packages/net/minecraftforge/client/event/$RenderTooltipEvent$GatherComponents"
import {$ScreenEvent$Init$Post, $ScreenEvent$Init$Post$Type} from "packages/net/minecraftforge/client/event/$ScreenEvent$Init$Post"
import {$ScreenEvent$KeyPressed$Pre, $ScreenEvent$KeyPressed$Pre$Type} from "packages/net/minecraftforge/client/event/$ScreenEvent$KeyPressed$Pre"
import {$RegisterClientTooltipComponentFactoriesEvent, $RegisterClientTooltipComponentFactoriesEvent$Type} from "packages/net/minecraftforge/client/event/$RegisterClientTooltipComponentFactoriesEvent"
import {$ClientTicker, $ClientTicker$Type} from "packages/org/violetmoon/zeta/client/$ClientTicker"
import {$ItemLike, $ItemLike$Type} from "packages/net/minecraft/world/level/$ItemLike"
import {$EntityRenderersEvent$RegisterLayerDefinitions, $EntityRenderersEvent$RegisterLayerDefinitions$Type} from "packages/net/minecraftforge/client/event/$EntityRenderersEvent$RegisterLayerDefinitions"
import {$RegisterColorHandlersEvent$Block, $RegisterColorHandlersEvent$Block$Type} from "packages/net/minecraftforge/client/event/$RegisterColorHandlersEvent$Block"

export class $ForgeZetaClient extends $ZetaClient {
readonly "zeta": $Zeta
readonly "loadBus": $ZetaEventBus<($IZetaLoadEvent)>
readonly "playBus": $ZetaEventBus<($IZetaPlayEvent)>
 "generalIcons": $ResourceLocation
readonly "ticker": $ClientTicker
readonly "clientConfigManager": $ClientConfigManager
readonly "topLayerTooltipHandler": $TopLayerTooltipHandler
readonly "clientRegistryExtension": $ClientRegistryExtension

constructor(arg0: $Zeta$Type)

public "start"(): void
public "inputKey"(arg0: $InputEvent$Key$Type): void
public "renderTick"(arg0: $TickEvent$RenderTickEvent$Type): void
public "clientSetup"(arg0: $FMLClientSetupEvent$Type): void
public "registerItemColors"(arg0: $RegisterColorHandlersEvent$Item$Type): void
public "screenshot"(arg0: $ScreenshotEvent$Type): void
public "screenRenderPost"(arg0: $ScreenEvent$Render$Post$Type): void
public "modelLayers"(arg0: $EntityRenderersEvent$AddLayers$Type): void
public "screenOpening"(arg0: $ScreenEvent$Opening$Type): void
public "renderPlayerPre"(arg0: $RenderPlayerEvent$Pre$Type): void
public "renderPlayerPost"(arg0: $RenderPlayerEvent$Post$Type): void
public "screenInitPre"(arg0: $ScreenEvent$Init$Pre$Type): void
public "screenInitPost"(arg0: $ScreenEvent$Init$Post$Type): void
public "inputMouseButton"(arg0: $InputEvent$MouseButton$Type): void
public "registerKeybinds"(arg0: $RegisterKeyMappingsEvent$Type): void
public "screenRenderPre"(arg0: $ScreenEvent$Render$Pre$Type): void
public "clientTick"(arg0: $TickEvent$ClientTickEvent$Type): void
public "getBlockColor"(arg0: $BlockColors$Type, arg1: $Block$Type): $BlockColor
public "getItemColor"(arg0: $ItemColors$Type, arg1: $ItemLike$Type): $ItemColor
public "registerReloadListeners"(arg0: $RegisterClientReloadListenersEvent$Type): void
public "registerAdditionalModels"(arg0: $ModelEvent$RegisterAdditional$Type): void
public "registerClientTooltipComponentFactories"(arg0: $RegisterClientTooltipComponentFactoriesEvent$Type): void
public "gatherTooltipComponents"(arg0: $RenderTooltipEvent$GatherComponents$Type): void
public "hackilyGetCurrentClientLevelRegistryAccess"(): $RegistryAccess
public "setBlockEntityWithoutLevelRenderer"(arg0: $Item$Type, arg1: $BlockEntityWithoutLevelRenderer$Type): void
public "createClientRegistryExtension"(): $ClientRegistryExtension
public "setHumanoidArmorModel"(arg0: $Item$Type, arg1: $HumanoidArmorModelGetter$Type): void
public "modelModifyBakingResult"(arg0: $ModelEvent$ModifyBakingResult$Type): void
public "modelBakingCompleted"(arg0: $ModelEvent$BakingCompleted$Type): void
public "modelRegisterAdditional"(arg0: $ModelEvent$RegisterAdditional$Type): void
public "modelRegisterGeometryLoaders"(arg0: $ModelEvent$RegisterGeometryLoaders$Type): void
public "registerLayerDefinitions"(arg0: $EntityRenderersEvent$RegisterLayerDefinitions$Type): void
public "movementInputUpdate"(arg0: $MovementInputUpdateEvent$Type): void
public "renderBlockHighlight"(arg0: $RenderHighlightEvent$Block$Type): void
public "renderLivingPreHighest"(arg0: $RenderLivingEvent$Pre$Type<(any), (any)>): void
public "screenKeyPressedPost"(arg0: $ScreenEvent$KeyPressed$Post$Type): void
public "renderContainerScreenBackground"(arg0: $ContainerScreenEvent$Render$Background$Type): void
public "renderGuiOverlayPre"(arg0: $RenderGuiOverlayEvent$Pre$Type): void
public "renderGameOverlayNeitherPreNorPost"(arg0: $RenderGuiOverlayEvent$Type): void
public "screenCharacterTypedPre"(arg0: $ScreenEvent$CharacterTyped$Pre$Type): void
public "screenMouseButtonPressedPre"(arg0: $ScreenEvent$MouseButtonPressed$Pre$Type): void
public "screenMouseScrolledPre"(arg0: $ScreenEvent$MouseScrolled$Pre$Type): void
public "renderLivingPostLowest"(arg0: $RenderLivingEvent$Post$Type<(any), (any)>): void
public "renderTooltipGatherComponentsLow"(arg0: $RenderTooltipEvent$GatherComponents$Type): void
public "screenKeyPressedPre"(arg0: $ScreenEvent$KeyPressed$Pre$Type): void
public "renderTooltipGatherComponents"(arg0: $RenderTooltipEvent$GatherComponents$Type): void
public "screenCharacterTypedPost"(arg0: $ScreenEvent$CharacterTyped$Post$Type): void
public "screenMouseButtonPressedPost"(arg0: $ScreenEvent$MouseButtonPressed$Post$Type): void
public "screenMouseScrolledPost"(arg0: $ScreenEvent$MouseScrolled$Post$Type): void
public "renderContainerScreenForeground"(arg0: $ContainerScreenEvent$Render$Foreground$Type): void
public "renderGuiOverlayPost"(arg0: $RenderGuiOverlayEvent$Post$Type): void
public "registerBlockColors"(arg0: $RegisterColorHandlersEvent$Block$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ForgeZetaClient$Type = ($ForgeZetaClient);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ForgeZetaClient_ = $ForgeZetaClient$Type;
}}
declare module "packages/org/violetmoon/quark/content/building/module/$MoreMudBlocksModule" {
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$ZRegister, $ZRegister$Type} from "packages/org/violetmoon/zeta/event/load/$ZRegister"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $MoreMudBlocksModule extends $ZetaModule {
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "register"(arg0: $ZRegister$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MoreMudBlocksModule$Type = ($MoreMudBlocksModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MoreMudBlocksModule_ = $MoreMudBlocksModule$Type;
}}
declare module "packages/org/violetmoon/zeta/event/play/entity/living/$ZMobSpawnEvent$CheckSpawn$Lowest" {
import {$Mob, $Mob$Type} from "packages/net/minecraft/world/entity/$Mob"
import {$MobSpawnType, $MobSpawnType$Type} from "packages/net/minecraft/world/entity/$MobSpawnType"
import {$BaseSpawner, $BaseSpawner$Type} from "packages/net/minecraft/world/level/$BaseSpawner"
import {$ZResult, $ZResult$Type} from "packages/org/violetmoon/zeta/event/bus/$ZResult"
import {$ServerLevelAccessor, $ServerLevelAccessor$Type} from "packages/net/minecraft/world/level/$ServerLevelAccessor"
import {$ZMobSpawnEvent$CheckSpawn, $ZMobSpawnEvent$CheckSpawn$Type} from "packages/org/violetmoon/zeta/event/play/entity/living/$ZMobSpawnEvent$CheckSpawn"

export interface $ZMobSpawnEvent$CheckSpawn$Lowest extends $ZMobSpawnEvent$CheckSpawn {

 "getSpawnType"(): $MobSpawnType
 "getSpawner"(): $BaseSpawner
 "getLevel"(): $ServerLevelAccessor
 "getY"(): double
 "getZ"(): double
 "getX"(): double
 "getEntity"(): $Mob
 "setResult"(arg0: $ZResult$Type): void
 "getResult"(): $ZResult
}

export namespace $ZMobSpawnEvent$CheckSpawn$Lowest {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZMobSpawnEvent$CheckSpawn$Lowest$Type = ($ZMobSpawnEvent$CheckSpawn$Lowest);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZMobSpawnEvent$CheckSpawn$Lowest_ = $ZMobSpawnEvent$CheckSpawn$Lowest$Type;
}}
declare module "packages/org/violetmoon/zeta/multiloader/$Loader" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$Runnable, $Runnable$Type} from "packages/java/lang/$Runnable"

export class $Loader extends $Enum<($Loader)> {
static readonly "FORGE": $Loader
static readonly "CURRENT": $Loader


public static "values"(): ($Loader)[]
public static "valueOf"(arg0: string): $Loader
public "isCurrent"(): boolean
public static "getCurrent"(): $Loader
public "runIfCurrent"(arg0: $Supplier$Type<($Runnable$Type)>): void
get "current"(): boolean
get "current"(): $Loader
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Loader$Type = (("forge")) | ($Loader);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Loader_ = $Loader$Type;
}}
declare module "packages/org/violetmoon/zeta/registry/$ZetaRegistry" {
import {$LateBoundHolder, $LateBoundHolder$Type} from "packages/org/violetmoon/zeta/registry/$LateBoundHolder"
import {$Holder$Direct, $Holder$Direct$Type} from "packages/net/minecraft/core/$Holder$Direct"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$WritableRegistry, $WritableRegistry$Type} from "packages/net/minecraft/core/$WritableRegistry"
import {$Registry, $Registry$Type} from "packages/net/minecraft/core/$Registry"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$BiConsumer, $BiConsumer$Type} from "packages/java/util/function/$BiConsumer"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ResourceKey, $ResourceKey$Type} from "packages/net/minecraft/resources/$ResourceKey"
import {$RegistryOps$RegistryInfoLookup, $RegistryOps$RegistryInfoLookup$Type} from "packages/net/minecraft/resources/$RegistryOps$RegistryInfoLookup"

export class $ZetaRegistry {

constructor(arg0: $Zeta$Type)

public "register"<T>(arg0: T, arg1: string, arg2: $ResourceKey$Type<($Registry$Type<(T)>)>): void
public "register"<T>(arg0: T, arg1: $ResourceLocation$Type, arg2: $ResourceKey$Type<($Registry$Type<(T)>)>): void
public "clearDeferCache"(arg0: $ResourceLocation$Type): void
public "getDefers"(arg0: $ResourceLocation$Type): $Collection<($Supplier<(any)>)>
public "registerDynamicF"<T>(arg0: $Function$Type<($RegistryOps$RegistryInfoLookup$Type), (T)>, arg1: $ResourceKey$Type<(T)>, arg2: $ResourceKey$Type<(any)>): $LateBoundHolder<(T)>
public "registerDynamicF"<T>(arg0: $Function$Type<($RegistryOps$RegistryInfoLookup$Type), (T)>, arg1: string, arg2: $ResourceKey$Type<(any)>): $LateBoundHolder<(T)>
public "registerDynamicF"<T>(arg0: $Function$Type<($RegistryOps$RegistryInfoLookup$Type), (T)>, arg1: $ResourceLocation$Type, arg2: $ResourceKey$Type<(any)>): $LateBoundHolder<(T)>
public "finalizeItemColors"(arg0: $BiConsumer$Type<($Item$Type), (string)>): void
public "registerBlock"(arg0: $Block$Type, arg1: $ResourceLocation$Type, arg2: boolean): void
public "registerBlock"(arg0: $Block$Type, arg1: string, arg2: boolean): void
public "registerBlock"(arg0: $Block$Type, arg1: $ResourceLocation$Type): void
public "registerBlock"(arg0: $Block$Type, arg1: string): void
public "newResourceLocation"(arg0: string): $ResourceLocation
public "performDynamicRegistration"<T>(arg0: $RegistryOps$RegistryInfoLookup$Type, arg1: $ResourceKey$Type<(any)>, arg2: $WritableRegistry$Type<(T)>): void
public "finalizeBlockColors"(arg0: $BiConsumer$Type<($Block$Type), (string)>): void
public "registerItem"(arg0: $Item$Type, arg1: $ResourceLocation$Type): void
public "registerItem"(arg0: $Item$Type, arg1: string): void
/**
 * 
 * @deprecated
 */
public "registerDynamic"<T>(arg0: T, arg1: $ResourceKey$Type<(T)>, arg2: $ResourceKey$Type<(any)>): $Holder$Direct<(T)>
/**
 * 
 * @deprecated
 */
public "registerDynamic"<T>(arg0: T, arg1: $ResourceLocation$Type, arg2: $ResourceKey$Type<(any)>): $Holder$Direct<(T)>
public "registerDynamic"<T>(arg0: T, arg1: string, arg2: $ResourceKey$Type<(any)>): $Holder$Direct<(T)>
public "getRegistryName"<T>(arg0: T, arg1: $Registry$Type<(T)>): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZetaRegistry$Type = ($ZetaRegistry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZetaRegistry_ = $ZetaRegistry$Type;
}}
declare module "packages/org/violetmoon/quark/addons/oddities/item/$BackpackItem" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$BooleanSupplier, $BooleanSupplier$Type} from "packages/java/util/function/$BooleanSupplier"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Equipable, $Equipable$Type} from "packages/net/minecraft/world/item/$Equipable"
import {$IForgeItem, $IForgeItem$Type} from "packages/net/minecraftforge/common/extensions/$IForgeItem"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$RecipeType, $RecipeType$Type} from "packages/net/minecraft/world/item/crafting/$RecipeType"
import {$ToolAction, $ToolAction$Type} from "packages/net/minecraftforge/common/$ToolAction"
import {$List, $List$Type} from "packages/java/util/$List"
import {$IZetaItem, $IZetaItem$Type} from "packages/org/violetmoon/zeta/item/$IZetaItem"
import {$DyeItem, $DyeItem$Type} from "packages/net/minecraft/world/item/$DyeItem"
import {$AbstractContainerMenu, $AbstractContainerMenu$Type} from "packages/net/minecraft/world/inventory/$AbstractContainerMenu"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$Multimap, $Multimap$Type} from "packages/com/google/common/collect/$Multimap"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$CreativeModeTab, $CreativeModeTab$Type} from "packages/net/minecraft/world/item/$CreativeModeTab"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$IZetaItemExtensions, $IZetaItemExtensions$Type} from "packages/org/violetmoon/zeta/item/ext/$IZetaItemExtensions"
import {$EnderMan, $EnderMan$Type} from "packages/net/minecraft/world/entity/monster/$EnderMan"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$DyeableArmorItem, $DyeableArmorItem$Type} from "packages/net/minecraft/world/item/$DyeableArmorItem"
import {$UseOnContext, $UseOnContext$Type} from "packages/net/minecraft/world/item/context/$UseOnContext"
import {$Enchantment, $Enchantment$Type} from "packages/net/minecraft/world/item/enchantment/$Enchantment"
import {$Attribute, $Attribute$Type} from "packages/net/minecraft/world/entity/ai/attributes/$Attribute"
import {$ICapabilityProvider, $ICapabilityProvider$Type} from "packages/net/minecraftforge/common/capabilities/$ICapabilityProvider"
import {$AttributeModifier, $AttributeModifier$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeModifier"
import {$MenuProvider, $MenuProvider$Type} from "packages/net/minecraft/world/$MenuProvider"
import {$ResourceKey, $ResourceKey$Type} from "packages/net/minecraft/resources/$ResourceKey"
import {$ItemLike, $ItemLike$Type} from "packages/net/minecraft/world/level/$ItemLike"
import {$DispenseItemBehavior, $DispenseItemBehavior$Type} from "packages/net/minecraft/core/dispenser/$DispenseItemBehavior"
import {$ItemEntity, $ItemEntity$Type} from "packages/net/minecraft/world/entity/item/$ItemEntity"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $BackpackItem extends $DyeableArmorItem implements $IZetaItem, $IZetaItemExtensions, $MenuProvider, $IForgeItem {
static readonly "DISPENSE_ITEM_BEHAVIOR": $DispenseItemBehavior
 "defaultModifiers": $Multimap<($Attribute), ($AttributeModifier)>
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $ZetaModule$Type)

public "getModule"(): $ZetaModule
public "damageItemZeta"<T extends $LivingEntity>(arg0: $ItemStack$Type, arg1: integer, arg2: T, arg3: $Consumer$Type<(T)>): integer
public "canEquipZeta"(arg0: $ItemStack$Type, arg1: $EquipmentSlot$Type, arg2: $Entity$Type): boolean
public "getDisplayName"(): $Component
public "doesConditionApply"(): boolean
public "setCondition"(arg0: $BooleanSupplier$Type): $IZetaItem
public "getEnchantmentLevel"(arg0: $ItemStack$Type, arg1: $Enchantment$Type): integer
public "canPerformAction"(arg0: $ItemStack$Type, arg1: $ToolAction$Type): boolean
public "canElytraFly"(arg0: $ItemStack$Type, arg1: $LivingEntity$Type): boolean
public "shouldCauseReequipAnimation"(arg0: $ItemStack$Type, arg1: $ItemStack$Type, arg2: boolean): boolean
public "getEnchantmentValue"(arg0: $ItemStack$Type): integer
public "getDefaultTooltipHideFlags"(arg0: $ItemStack$Type): integer
public "canApplyAtEnchantingTable"(arg0: $ItemStack$Type, arg1: $Enchantment$Type): boolean
public "canBeDepleted"(): boolean
public "inventoryTick"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $Entity$Type, arg3: integer, arg4: boolean): void
public "isFoil"(arg0: $ItemStack$Type): boolean
public "isRepairable"(arg0: $ItemStack$Type): boolean
public "getDefaultAttributeModifiers"(arg0: $EquipmentSlot$Type): $Multimap<($Attribute), ($AttributeModifier)>
public "isEnchantable"(arg0: $ItemStack$Type): boolean
public "getMaxDamage"(arg0: $ItemStack$Type): integer
public "onItemUseFirst"(arg0: $ItemStack$Type, arg1: $UseOnContext$Type): $InteractionResult
public "isBookEnchantable"(arg0: $ItemStack$Type, arg1: $ItemStack$Type): boolean
public "getArmorTexture"(arg0: $ItemStack$Type, arg1: $Entity$Type, arg2: $EquipmentSlot$Type, arg3: string): string
public "doesSneakBypassUse"(arg0: $ItemStack$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $Player$Type): boolean
public "canEquip"(arg0: $ItemStack$Type, arg1: $EquipmentSlot$Type, arg2: $Entity$Type): boolean
public "damageItem"(arg0: $ItemStack$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $Consumer$Type<(any)>): integer
public "getBurnTime"(arg0: $ItemStack$Type, arg1: $RecipeType$Type<(any)>): integer
public "isEnderMask"(arg0: $ItemStack$Type, arg1: $Player$Type, arg2: $EnderMan$Type): boolean
public static "doesBackpackHaveItems"(arg0: $ItemStack$Type): boolean
public "getEnchantmentValueZeta"(arg0: $ItemStack$Type): integer
public "getArmorTextureZeta"(arg0: $ItemStack$Type, arg1: $Entity$Type, arg2: $EquipmentSlot$Type, arg3: string): string
public "canApplyAtEnchantingTableZeta"(arg0: $ItemStack$Type, arg1: $Enchantment$Type): boolean
public "getDefaultTooltipHideFlagsZeta"(arg0: $ItemStack$Type): integer
public "onEntityItemUpdateZeta"(arg0: $ItemStack$Type, arg1: $ItemEntity$Type): boolean
public "isBookEnchantableZeta"(arg0: $ItemStack$Type, arg1: $ItemStack$Type): boolean
public "initCapabilities"(arg0: $ItemStack$Type, arg1: $CompoundTag$Type): $ICapabilityProvider
public "createMenu"(arg0: integer, arg1: $Inventory$Type, arg2: $Player$Type): $AbstractContainerMenu
public "getAllEnchantments"(arg0: $ItemStack$Type): $Map<(any), (any)>
public "onEntityItemUpdate"(arg0: $ItemStack$Type, arg1: $ItemEntity$Type): boolean
public "getItem"(): $Item
public "setCreativeTab"(arg0: $ResourceKey$Type<($CreativeModeTab$Type)>): $Item
public "setCreativeTab"(arg0: $ResourceKey$Type<($CreativeModeTab$Type)>, arg1: $ItemLike$Type, arg2: boolean): $Item
public "isRepairableZeta"(arg0: $ItemStack$Type): boolean
public "onItemUseFirstZeta"(arg0: $ItemStack$Type, arg1: $UseOnContext$Type): $InteractionResult
public "getBurnTimeZeta"(arg0: $ItemStack$Type, arg1: $RecipeType$Type<(any)>): integer
public "isEnderMaskZeta"(arg0: $ItemStack$Type, arg1: $Player$Type, arg2: $EnderMan$Type): boolean
public "canElytraFlyZeta"(arg0: $ItemStack$Type, arg1: $LivingEntity$Type): boolean
public "canShearZeta"(arg0: $ItemStack$Type): boolean
public "getMaxDamageZeta"(arg0: $ItemStack$Type): integer
public "getEnchantmentLevelZeta"(arg0: $ItemStack$Type, arg1: $Enchantment$Type): integer
public "getAllEnchantmentsZeta"(arg0: $ItemStack$Type): $Map<($Enchantment), (integer)>
public "shouldCauseReequipAnimationZeta"(arg0: $ItemStack$Type, arg1: $ItemStack$Type, arg2: boolean): boolean
public "doesSneakBypassUseZeta"(arg0: $ItemStack$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $Player$Type): boolean
public "isEnabled"(): boolean
public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
public static "dyeArmor"(arg0: $ItemStack$Type, arg1: $List$Type<($DyeItem$Type)>): $ItemStack
public static "get"(arg0: $ItemStack$Type): $Equipable
get "module"(): $ZetaModule
get "displayName"(): $Component
set "condition"(value: $BooleanSupplier$Type)
get "item"(): $Item
set "creativeTab"(value: $ResourceKey$Type<($CreativeModeTab$Type)>)
get "enabled"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BackpackItem$Type = ($BackpackItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BackpackItem_ = $BackpackItem$Type;
}}
declare module "packages/org/violetmoon/quark/content/building/module/$RopeModule" {
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$ZRegister, $ZRegister$Type} from "packages/org/violetmoon/zeta/event/load/$ZRegister"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZConfigChanged, $ZConfigChanged$Type} from "packages/org/violetmoon/zeta/event/load/$ZConfigChanged"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $RopeModule extends $ZetaModule {
static "rope": $Block
static "forceEnableMoveTileEntities": boolean
static "enableDispenserBehavior": boolean
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "register"(arg0: $ZRegister$Type): void
public "configChanged"(arg0: $ZConfigChanged$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RopeModule$Type = ($RopeModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RopeModule_ = $RopeModule$Type;
}}
declare module "packages/org/violetmoon/quark/content/management/module/$ExpandedItemInteractionsModule" {
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$ZClientSetup, $ZClientSetup$Type} from "packages/org/violetmoon/zeta/client/event/load/$ZClientSetup"
import {$MenuType, $MenuType$Type} from "packages/net/minecraft/world/inventory/$MenuType"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ClickAction, $ClickAction$Type} from "packages/net/minecraft/world/inventory/$ClickAction"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$SlotAccess, $SlotAccess$Type} from "packages/net/minecraft/world/entity/$SlotAccess"
import {$ZRegister, $ZRegister$Type} from "packages/org/violetmoon/zeta/event/load/$ZRegister"
import {$HeldShulkerBoxMenu, $HeldShulkerBoxMenu$Type} from "packages/org/violetmoon/quark/content/management/inventory/$HeldShulkerBoxMenu"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZConfigChanged, $ZConfigChanged$Type} from "packages/org/violetmoon/zeta/event/load/$ZConfigChanged"

export class $ExpandedItemInteractionsModule extends $ZetaModule {
static "enableArmorInteraction": boolean
static "enableShulkerBoxInteraction": boolean
static "enableLavaInteraction": boolean
static "allowOpeningShulkerBoxes": boolean
static "allowRotatingBundles": boolean
static "heldShulkerBoxMenuType": $MenuType<($HeldShulkerBoxMenu)>
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "register"(arg0: $ZRegister$Type): void
public "clientSetup"(arg0: $ZClientSetup$Type): void
public static "scrollOnBundle"(arg0: $ServerPlayer$Type, arg1: integer, arg2: integer, arg3: integer, arg4: double): void
public static "getShulkerBoxEntity"(arg0: $ItemStack$Type): $BlockEntity
public static "overrideStackedOnOther"(arg0: $ItemStack$Type, arg1: $Slot$Type, arg2: $ClickAction$Type, arg3: $Player$Type): boolean
public static "overrideOtherStackedOnMe"(arg0: $ItemStack$Type, arg1: $ItemStack$Type, arg2: $Slot$Type, arg3: $ClickAction$Type, arg4: $Player$Type, arg5: $SlotAccess$Type): boolean
public "configChanged"(arg0: $ZConfigChanged$Type): void
public static "lavaBucketOverride"(arg0: $ItemStack$Type, arg1: $ItemStack$Type, arg2: $Slot$Type, arg3: $ClickAction$Type, arg4: $Player$Type): boolean
public static "canOpenShulkerBox"(arg0: $ItemStack$Type, arg1: $ItemStack$Type, arg2: $Slot$Type, arg3: $Player$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ExpandedItemInteractionsModule$Type = ($ExpandedItemInteractionsModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ExpandedItemInteractionsModule_ = $ExpandedItemInteractionsModule$Type;
}}
declare module "packages/org/violetmoon/quark/content/mobs/client/layer/shiba/$ShibaCollarLayer" {
import {$RenderLayer, $RenderLayer$Type} from "packages/net/minecraft/client/renderer/entity/layers/$RenderLayer"
import {$RenderLayerParent, $RenderLayerParent$Type} from "packages/net/minecraft/client/renderer/entity/$RenderLayerParent"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$Shiba, $Shiba$Type} from "packages/org/violetmoon/quark/content/mobs/entity/$Shiba"
import {$ShibaModel, $ShibaModel$Type} from "packages/org/violetmoon/quark/content/mobs/client/model/$ShibaModel"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"

export class $ShibaCollarLayer extends $RenderLayer<($Shiba), ($ShibaModel)> {

constructor(arg0: $RenderLayerParent$Type<($Shiba$Type), ($ShibaModel$Type)>)

public "render"(arg0: $PoseStack$Type, arg1: $MultiBufferSource$Type, arg2: integer, arg3: $Shiba$Type, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: float): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ShibaCollarLayer$Type = ($ShibaCollarLayer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ShibaCollarLayer_ = $ShibaCollarLayer$Type;
}}
declare module "packages/org/violetmoon/quark/content/tools/block/be/$CloudBlockEntity" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$ClientGamePacketListener, $ClientGamePacketListener$Type} from "packages/net/minecraft/network/protocol/game/$ClientGamePacketListener"
import {$Packet, $Packet$Type} from "packages/net/minecraft/network/protocol/$Packet"
import {$ZetaBlockEntity, $ZetaBlockEntity$Type} from "packages/org/violetmoon/zeta/block/be/$ZetaBlockEntity"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $CloudBlockEntity extends $ZetaBlockEntity {
 "liveTime": integer
 "blockState": $BlockState

constructor(arg0: $BlockPos$Type, arg1: $BlockState$Type)

public static "tick"(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: $CloudBlockEntity$Type): void
public "writeSharedNBT"(arg0: $CompoundTag$Type): void
public "readSharedNBT"(arg0: $CompoundTag$Type): void
public "getUpdatePacket"(): $Packet<($ClientGamePacketListener)>
get "updatePacket"(): $Packet<($ClientGamePacketListener)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CloudBlockEntity$Type = ($CloudBlockEntity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CloudBlockEntity_ = $CloudBlockEntity$Type;
}}
declare module "packages/org/violetmoon/zeta/client/event/load/$ZAddBlockColorHandlers$Post" {
import {$ZAddBlockColorHandlers, $ZAddBlockColorHandlers$Type} from "packages/org/violetmoon/zeta/client/event/load/$ZAddBlockColorHandlers"
import {$BlockColors, $BlockColors$Type} from "packages/net/minecraft/client/color/block/$BlockColors"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$BlockColor, $BlockColor$Type} from "packages/net/minecraft/client/color/block/$BlockColor"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export interface $ZAddBlockColorHandlers$Post extends $ZAddBlockColorHandlers {

 "getNamedBlockColors"(): $Map<(string), ($Function<($Block), ($BlockColor)>)>
 "register"(arg0: $BlockColor$Type, ...arg1: ($Block$Type)[]): void
 "getBlockColors"(): $BlockColors
 "makePostEvent"(): $ZAddBlockColorHandlers$Post
 "registerNamed"(arg0: $Function$Type<($Block$Type), ($BlockColor$Type)>, ...arg1: (string)[]): void
}

export namespace $ZAddBlockColorHandlers$Post {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZAddBlockColorHandlers$Post$Type = ($ZAddBlockColorHandlers$Post);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZAddBlockColorHandlers$Post_ = $ZAddBlockColorHandlers$Post$Type;
}}
declare module "packages/org/violetmoon/quark/content/tweaks/ai/$NuzzleGoal" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$Goal, $Goal$Type} from "packages/net/minecraft/world/entity/ai/goal/$Goal"
import {$TamableAnimal, $TamableAnimal$Type} from "packages/net/minecraft/world/entity/$TamableAnimal"

export class $NuzzleGoal extends $Goal {

constructor(arg0: $TamableAnimal$Type, arg1: double, arg2: float, arg3: float, arg4: $SoundEvent$Type)

public "canUse"(): boolean
public "canContinueToUse"(): boolean
public "start"(): void
public "stop"(): void
public "tick"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $NuzzleGoal$Type = ($NuzzleGoal);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $NuzzleGoal_ = $NuzzleGoal$Type;
}}
declare module "packages/org/violetmoon/zeta/client/event/play/$ZRenderLiving" {
import {$IZetaPlayEvent, $IZetaPlayEvent$Type} from "packages/org/violetmoon/zeta/event/bus/$IZetaPlayEvent"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export interface $ZRenderLiving extends $IZetaPlayEvent {

 "getPoseStack"(): $PoseStack
 "getEntity"(): $Entity
}

export namespace $ZRenderLiving {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZRenderLiving$Type = ($ZRenderLiving);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZRenderLiving_ = $ZRenderLiving$Type;
}}
declare module "packages/org/violetmoon/quark/content/management/inventory/$HeldShulkerBoxContainer" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$Ingredient, $Ingredient$Type} from "packages/net/minecraft/world/item/crafting/$Ingredient"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ShulkerBoxBlockEntity, $ShulkerBoxBlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$ShulkerBoxBlockEntity"
import {$BlockContainerJS, $BlockContainerJS$Type} from "packages/dev/latvian/mods/kubejs/level/$BlockContainerJS"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$List, $List$Type} from "packages/java/util/$List"
import {$AbstractContainerMenu, $AbstractContainerMenu$Type} from "packages/net/minecraft/world/inventory/$AbstractContainerMenu"
import {$MenuProvider, $MenuProvider$Type} from "packages/net/minecraft/world/$MenuProvider"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"

export class $HeldShulkerBoxContainer implements $Container, $MenuProvider {
readonly "player": $Player
readonly "stack": $ItemStack
readonly "be": $ShulkerBoxBlockEntity
readonly "slot": integer

constructor(arg0: $Player$Type, arg1: integer)

public "getDisplayName"(): $Component
public "setChanged"(): void
public "getItem"(arg0: integer): $ItemStack
public "getContainerSize"(): integer
public "removeItemNoUpdate"(arg0: integer): $ItemStack
public "removeItem"(arg0: integer, arg1: integer): $ItemStack
public "clearContent"(): void
public "isEmpty"(): boolean
public "createMenu"(arg0: integer, arg1: $Inventory$Type, arg2: $Player$Type): $AbstractContainerMenu
public "stillValid"(arg0: $Player$Type): boolean
public "setItem"(arg0: integer, arg1: $ItemStack$Type): void
public "kjs$self"(): $Container
public "getBlock"(level: $Level$Type): $BlockContainerJS
public "startOpen"(arg0: $Player$Type): void
public "getMaxStackSize"(): integer
public "stopOpen"(arg0: $Player$Type): void
public static "stillValidBlockEntity"(arg0: $BlockEntity$Type, arg1: $Player$Type, arg2: integer): boolean
public "canPlaceItem"(arg0: integer, arg1: $ItemStack$Type): boolean
public "countItem"(arg0: $Item$Type): integer
public "canTakeItem"(arg0: $Container$Type, arg1: integer, arg2: $ItemStack$Type): boolean
public "hasAnyMatching"(arg0: $Predicate$Type<($ItemStack$Type)>): boolean
public "getSlots"(): integer
public "getStackInSlot"(slot: integer): $ItemStack
public "insertItem"(slot: integer, stack: $ItemStack$Type, simulate: boolean): $ItemStack
public static "stillValidBlockEntity"(arg0: $BlockEntity$Type, arg1: $Player$Type): boolean
public "isMutable"(): boolean
public "hasAnyOf"(arg0: $Set$Type<($Item$Type)>): boolean
public "setChanged"(): void
public "asContainer"(): $Container
public "getHeight"(): integer
public "extractItem"(slot: integer, amount: integer, simulate: boolean): $ItemStack
public "isItemValid"(slot: integer, stack: $ItemStack$Type): boolean
public "getWidth"(): integer
public "setStackInSlot"(slot: integer, stack: $ItemStack$Type): void
public "getSlotLimit"(slot: integer): integer
public "clear"(): void
public static "tryClear"(arg0: any): void
public "insertItem"(stack: $ItemStack$Type, simulate: boolean): $ItemStack
public "countNonEmpty"(ingredient: $Ingredient$Type): integer
public "countNonEmpty"(): integer
public "getAllItems"(): $List<($ItemStack)>
public "find"(ingredient: $Ingredient$Type): integer
public "find"(): integer
public "clear"(ingredient: $Ingredient$Type): void
public "count"(ingredient: $Ingredient$Type): integer
public "count"(): integer
public "isEmpty"(): boolean
get "displayName"(): $Component
get "containerSize"(): integer
get "empty"(): boolean
get "maxStackSize"(): integer
get "slots"(): integer
get "mutable"(): boolean
get "height"(): integer
get "width"(): integer
get "allItems"(): $List<($ItemStack)>
get "empty"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $HeldShulkerBoxContainer$Type = ($HeldShulkerBoxContainer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $HeldShulkerBoxContainer_ = $HeldShulkerBoxContainer$Type;
}}
declare module "packages/org/violetmoon/quark/content/management/inventory/$HeldShulkerBoxMenu" {
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$AbstractContainerMenu, $AbstractContainerMenu$Type} from "packages/net/minecraft/world/inventory/$AbstractContainerMenu"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"
import {$ISortingLockedSlots, $ISortingLockedSlots$Type} from "packages/org/violetmoon/quark/api/$ISortingLockedSlots"

export class $HeldShulkerBoxMenu extends $AbstractContainerMenu implements $ISortingLockedSlots {
readonly "blockedSlot": integer
static readonly "SLOT_CLICKED_OUTSIDE": integer
static readonly "QUICKCRAFT_TYPE_CHARITABLE": integer
static readonly "QUICKCRAFT_TYPE_GREEDY": integer
static readonly "QUICKCRAFT_TYPE_CLONE": integer
static readonly "QUICKCRAFT_HEADER_START": integer
static readonly "QUICKCRAFT_HEADER_CONTINUE": integer
static readonly "QUICKCRAFT_HEADER_END": integer
static readonly "CARRIED_SLOT_SIZE": integer
readonly "lastSlots": $NonNullList<($ItemStack)>
readonly "slots": $NonNullList<($Slot)>
 "remoteSlots": $NonNullList<($ItemStack)>
 "containerId": integer

constructor(arg0: integer, arg1: $Inventory$Type, arg2: integer)
constructor(arg0: integer, arg1: $Inventory$Type, arg2: $Container$Type, arg3: integer)

public static "fromNetwork"(arg0: integer, arg1: $Inventory$Type, arg2: $FriendlyByteBuf$Type): $HeldShulkerBoxMenu
public "stillValid"(arg0: $Player$Type): boolean
public "removed"(arg0: $Player$Type): void
public "getSortingLockedSlots"(arg0: boolean): (integer)[]
public "quickMoveStack"(arg0: $Player$Type, arg1: integer): $ItemStack
public "resumeRemoteUpdates"(): void
public "suppressRemoteUpdates"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $HeldShulkerBoxMenu$Type = ($HeldShulkerBoxMenu);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $HeldShulkerBoxMenu_ = $HeldShulkerBoxMenu$Type;
}}
declare module "packages/org/violetmoon/zetaimplforge/event/play/$ForgeZAnvilUpdate" {
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$AnvilUpdateEvent, $AnvilUpdateEvent$Type} from "packages/net/minecraftforge/event/$AnvilUpdateEvent"
import {$ZAnvilUpdate, $ZAnvilUpdate$Type} from "packages/org/violetmoon/zeta/event/play/$ZAnvilUpdate"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export class $ForgeZAnvilUpdate implements $ZAnvilUpdate {

constructor(arg0: $AnvilUpdateEvent$Type)

public "getName"(): string
public "getMaterialCost"(): integer
public "getRight"(): $ItemStack
public "getLeft"(): $ItemStack
public "setOutput"(arg0: $ItemStack$Type): void
public "setCost"(arg0: integer): void
public "setMaterialCost"(arg0: integer): void
public "getPlayer"(): $Player
public "getOutput"(): $ItemStack
get "name"(): string
get "materialCost"(): integer
get "right"(): $ItemStack
get "left"(): $ItemStack
set "output"(value: $ItemStack$Type)
set "cost"(value: integer)
set "materialCost"(value: integer)
get "player"(): $Player
get "output"(): $ItemStack
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ForgeZAnvilUpdate$Type = ($ForgeZAnvilUpdate);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ForgeZAnvilUpdate_ = $ForgeZAnvilUpdate$Type;
}}
declare module "packages/org/violetmoon/quark/content/world/block/$CorundumBlock" {
import {$CorundumClusterBlock, $CorundumClusterBlock$Type} from "packages/org/violetmoon/quark/content/world/block/$CorundumClusterBlock"
import {$ZetaGlassBlock, $ZetaGlassBlock$Type} from "packages/org/violetmoon/zeta/block/$ZetaGlassBlock"
import {$MapColor, $MapColor$Type} from "packages/net/minecraft/world/level/material/$MapColor"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $CorundumBlock extends $ZetaGlassBlock {
readonly "colorComponents": (float)[]
readonly "waxed": boolean
 "cluster": $CorundumClusterBlock
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(arg0: string, arg1: integer, arg2: $ZetaModule$Type, arg3: $MapColor$Type, arg4: boolean)

public "getBeaconColorMultiplierZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): (float)[]
public "tick"(arg0: $BlockState$Type, arg1: $ServerLevel$Type, arg2: $BlockPos$Type, arg3: $RandomSource$Type): void
public "animateTick"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type, arg3: $RandomSource$Type): void
public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CorundumBlock$Type = ($CorundumBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CorundumBlock_ = $CorundumBlock$Type;
}}
declare module "packages/org/violetmoon/quark/content/experimental/module/$ClimateControlRemoverModule" {
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZConfigChanged, $ZConfigChanged$Type} from "packages/org/violetmoon/zeta/event/load/$ZConfigChanged"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $ClimateControlRemoverModule extends $ZetaModule {
static "staticEnabled": boolean
static "disableTemperature": boolean
static "disableHumidity": boolean
static "disableContinentalness": boolean
static "disableErosion": boolean
static "disableDepth": boolean
static "disableWeirdness": boolean
static "disableOffset": boolean
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "configChanged"(arg0: $ZConfigChanged$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClimateControlRemoverModule$Type = ($ClimateControlRemoverModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClimateControlRemoverModule_ = $ClimateControlRemoverModule$Type;
}}
declare module "packages/org/violetmoon/quark/content/building/module/$GoldBarsModule" {
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$ZRegister, $ZRegister$Type} from "packages/org/violetmoon/zeta/event/load/$ZRegister"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZConfigChanged, $ZConfigChanged$Type} from "packages/org/violetmoon/zeta/event/load/$ZConfigChanged"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $GoldBarsModule extends $ZetaModule {
static "generateInNetherFortress": boolean
static "staticEnabled": boolean
static "gold_bars": $Block
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "register"(arg0: $ZRegister$Type): void
public "configChanged"(arg0: $ZConfigChanged$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GoldBarsModule$Type = ($GoldBarsModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GoldBarsModule_ = $GoldBarsModule$Type;
}}
declare module "packages/org/violetmoon/quark/content/tweaks/client/emote/$EmoteTemplate" {
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$HumanoidModel, $HumanoidModel$Type} from "packages/net/minecraft/client/model/$HumanoidModel"
import {$List, $List$Type} from "packages/java/util/$List"
import {$EmoteDescriptor, $EmoteDescriptor$Type} from "packages/org/violetmoon/quark/content/tweaks/client/emote/$EmoteDescriptor"
import {$Stack, $Stack$Type} from "packages/java/util/$Stack"
import {$Timeline, $Timeline$Type} from "packages/aurelienribon/tweenengine/$Timeline"

export class $EmoteTemplate {
readonly "file": string
 "readLines": $List<(string)>
 "usedParts": $List<(integer)>
 "timelineStack": $Stack<($Timeline)>
 "speed": float
 "tier": integer
 "compiled": boolean
 "compiledOnce": boolean

constructor(arg0: string)

public "readAndMakeTimeline"(arg0: $EmoteDescriptor$Type, arg1: $Player$Type, arg2: $HumanoidModel$Type<(any)>): $Timeline
public "getTimeline"(arg0: $EmoteDescriptor$Type, arg1: $Player$Type, arg2: $HumanoidModel$Type<(any)>): $Timeline
public "usesBodyPart"(arg0: integer): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EmoteTemplate$Type = ($EmoteTemplate);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EmoteTemplate_ = $EmoteTemplate$Type;
}}
declare module "packages/org/violetmoon/quark/base/network/message/$DoEmoteMessage" {
import {$IZetaMessage, $IZetaMessage$Type} from "packages/org/violetmoon/zeta/network/$IZetaMessage"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$IZetaNetworkEventContext, $IZetaNetworkEventContext$Type} from "packages/org/violetmoon/zeta/network/$IZetaNetworkEventContext"

export class $DoEmoteMessage implements $IZetaMessage {
 "emote": string
 "playerUUID": $UUID
 "tier": integer

constructor()
constructor(arg0: string, arg1: $UUID$Type, arg2: integer)

public "receive"(arg0: $IZetaNetworkEventContext$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DoEmoteMessage$Type = ($DoEmoteMessage);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DoEmoteMessage_ = $DoEmoteMessage$Type;
}}
declare module "packages/org/violetmoon/quark/addons/oddities/client/screen/$MatrixEnchantingPlusButton" {
import {$Button, $Button$Type} from "packages/net/minecraft/client/gui/components/$Button"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$Button$OnPress, $Button$OnPress$Type} from "packages/net/minecraft/client/gui/components/$Button$OnPress"

export class $MatrixEnchantingPlusButton extends $Button {
static readonly "SMALL_WIDTH": integer
static readonly "DEFAULT_WIDTH": integer
static readonly "DEFAULT_HEIGHT": integer
 "onPress": $Button$OnPress
static readonly "WIDGETS_LOCATION": $ResourceLocation
static readonly "ACCESSIBILITY_TEXTURE": $ResourceLocation
 "height": integer
 "x": integer
 "y": integer
 "active": boolean
 "visible": boolean
static readonly "UNSET_FG_COLOR": integer

constructor(arg0: integer, arg1: integer, arg2: $Button$OnPress$Type)

public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MatrixEnchantingPlusButton$Type = ($MatrixEnchantingPlusButton);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MatrixEnchantingPlusButton_ = $MatrixEnchantingPlusButton$Type;
}}
declare module "packages/org/violetmoon/quark/content/tools/item/$SeedPouchItem$PouchContents" {
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export class $SeedPouchItem$PouchContents {
static readonly "TAG_STORED_ITEM": string
static readonly "TAG_COUNT": string

constructor()

public "isEmpty"(): boolean
public "split"(arg0: integer): $ItemStack
public "grow"(arg0: integer): void
public "getCount"(): integer
public "getContents"(): $ItemStack
public "absorb"(arg0: $ItemStack$Type): boolean
public static "mutate"<T>(arg0: $ItemStack$Type, arg1: $Function$Type<($SeedPouchItem$PouchContents$Type), (T)>): T
public "canFit"(arg0: $ItemStack$Type): boolean
public "shrink"(arg0: integer): void
public static "readCountOnlyFromStack"(arg0: $ItemStack$Type): integer
public static "readFromStack"(arg0: $ItemStack$Type): $SeedPouchItem$PouchContents
public "writeToStack"(arg0: $ItemStack$Type): $ItemStack
public "isFertilizer"(): boolean
public "isSeed"(): boolean
public "setContents"(arg0: $ItemStack$Type): void
public "splitOneStack"(): $ItemStack
public "setCount"(arg0: integer): void
get "empty"(): boolean
get "count"(): integer
get "contents"(): $ItemStack
get "fertilizer"(): boolean
get "seed"(): boolean
set "contents"(value: $ItemStack$Type)
set "count"(value: integer)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SeedPouchItem$PouchContents$Type = ($SeedPouchItem$PouchContents);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SeedPouchItem$PouchContents_ = $SeedPouchItem$PouchContents$Type;
}}
declare module "packages/org/violetmoon/zeta/config/$FlagLootCondition" {
import {$LootContextParam, $LootContextParam$Type} from "packages/net/minecraft/world/level/storage/loot/parameters/$LootContextParam"
import {$LootItemConditionType, $LootItemConditionType$Type} from "packages/net/minecraft/world/level/storage/loot/predicates/$LootItemConditionType"
import {$LootContext, $LootContext$Type} from "packages/net/minecraft/world/level/storage/loot/$LootContext"
import {$ValidationContext, $ValidationContext$Type} from "packages/net/minecraft/world/level/storage/loot/$ValidationContext"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$ConfigFlagManager, $ConfigFlagManager$Type} from "packages/org/violetmoon/zeta/config/$ConfigFlagManager"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$LootItemCondition, $LootItemCondition$Type} from "packages/net/minecraft/world/level/storage/loot/predicates/$LootItemCondition"

export class $FlagLootCondition extends $Record implements $LootItemCondition {

constructor(manager: $ConfigFlagManager$Type, flag: string, selfType: $LootItemConditionType$Type)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "test"(arg0: $LootContext$Type): boolean
public "flag"(): string
public "manager"(): $ConfigFlagManager
public "selfType"(): $LootItemConditionType
public "getType"(): $LootItemConditionType
public "validate"(arg0: $ValidationContext$Type): void
public "getReferencedContextParams"(): $Set<($LootContextParam<(any)>)>
public "or"(arg0: $Predicate$Type<(any)>): $Predicate<($LootContext)>
public "negate"(): $Predicate<($LootContext)>
public "and"(arg0: $Predicate$Type<(any)>): $Predicate<($LootContext)>
public static "not"<T>(arg0: $Predicate$Type<(any)>): $Predicate<($LootContext)>
public static "isEqual"<T>(arg0: any): $Predicate<($LootContext)>
public "applyLootHandler"(context: $LootContext$Type, loot: $List$Type<($ItemStack$Type)>): boolean
get "type"(): $LootItemConditionType
get "referencedContextParams"(): $Set<($LootContextParam<(any)>)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FlagLootCondition$Type = ($FlagLootCondition);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FlagLootCondition_ = $FlagLootCondition$Type;
}}
declare module "packages/org/violetmoon/zeta/event/play/$ZPlayNoteBlock" {
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$IZetaPlayEvent, $IZetaPlayEvent$Type} from "packages/org/violetmoon/zeta/event/bus/$IZetaPlayEvent"
import {$NoteBlockInstrument, $NoteBlockInstrument$Type} from "packages/net/minecraft/world/level/block/state/properties/$NoteBlockInstrument"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Cancellable, $Cancellable$Type} from "packages/org/violetmoon/zeta/event/bus/$Cancellable"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export interface $ZPlayNoteBlock extends $IZetaPlayEvent, $Cancellable {

 "getState"(): $BlockState
 "getLevel"(): $LevelAccessor
 "getPos"(): $BlockPos
 "getInstrument"(): $NoteBlockInstrument
 "getVanillaNoteId"(): integer
 "cancel"(): void
 "setCanceled"(arg0: boolean): void
 "isCanceled"(): boolean
}

export namespace $ZPlayNoteBlock {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZPlayNoteBlock$Type = ($ZPlayNoteBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZPlayNoteBlock_ = $ZPlayNoteBlock$Type;
}}
declare module "packages/org/violetmoon/quark/base/item/boat/$QuarkBoat" {
import {$Boat$Type, $Boat$Type$Type} from "packages/net/minecraft/world/entity/vehicle/$Boat$Type"
import {$WoodSetHandler$QuarkBoatType, $WoodSetHandler$QuarkBoatType$Type} from "packages/org/violetmoon/quark/base/handler/$WoodSetHandler$QuarkBoatType"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Boat$Status, $Boat$Status$Type} from "packages/net/minecraft/world/entity/vehicle/$Boat$Status"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$IQuarkBoat, $IQuarkBoat$Type} from "packages/org/violetmoon/quark/base/item/boat/$IQuarkBoat"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$Boat, $Boat$Type} from "packages/net/minecraft/world/entity/vehicle/$Boat"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$ItemLike, $ItemLike$Type} from "packages/net/minecraft/world/level/$ItemLike"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$ItemEntity, $ItemEntity$Type} from "packages/net/minecraft/world/entity/item/$ItemEntity"

export class $QuarkBoat extends $Boat implements $IQuarkBoat {
static readonly "PADDLE_LEFT": integer
static readonly "PADDLE_RIGHT": integer
static readonly "PADDLE_SOUND_TIME": double
static readonly "BUBBLE_TIME": integer
 "status": $Boat$Status
 "lastYd": double
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(arg0: $EntityType$Type<(any)>, arg1: $Level$Type)
constructor(arg0: $Level$Type, arg1: double, arg2: double, arg3: double)

public "getDropItem"(): $Item
public "setQuarkBoatType"(arg0: string): void
public "setQuarkBoatTypeObj"(arg0: $WoodSetHandler$QuarkBoatType$Type): void
public "getQuarkBoatTypeObj"(): $WoodSetHandler$QuarkBoatType
public "getQuarkBoatType"(): string
public "setVariant"(arg0: $Boat$Type$Type): void
public "spawnAtLocation"(arg0: $ItemLike$Type): $ItemEntity
public "getVariant"(): $Boat$Type
get "dropItem"(): $Item
set "quarkBoatType"(value: string)
set "quarkBoatTypeObj"(value: $WoodSetHandler$QuarkBoatType$Type)
get "quarkBoatTypeObj"(): $WoodSetHandler$QuarkBoatType
get "quarkBoatType"(): string
set "variant"(value: $Boat$Type$Type)
get "variant"(): $Boat$Type
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $QuarkBoat$Type = ($QuarkBoat);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $QuarkBoat_ = $QuarkBoat$Type;
}}
declare module "packages/org/violetmoon/quark/api/$IEnchantmentInfluencer" {
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$Enchantment, $Enchantment$Type} from "packages/net/minecraft/world/item/enchantment/$Enchantment"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$ParticleOptions, $ParticleOptions$Type} from "packages/net/minecraft/core/particles/$ParticleOptions"

export interface $IEnchantmentInfluencer {

 "getEnchantmentInfluenceColor"(arg0: $BlockGetter$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type): (float)[]
 "getExtraParticleOptions"(arg0: $BlockGetter$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type): $ParticleOptions
 "getExtraParticleChance"(arg0: $BlockGetter$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type): double
 "influencesEnchantment"(arg0: $BlockGetter$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: $Enchantment$Type): boolean
 "getInfluenceStack"(arg0: $BlockGetter$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type): integer
 "dampensEnchantment"(arg0: $BlockGetter$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: $Enchantment$Type): boolean
}

export namespace $IEnchantmentInfluencer {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IEnchantmentInfluencer$Type = ($IEnchantmentInfluencer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IEnchantmentInfluencer_ = $IEnchantmentInfluencer$Type;
}}
declare module "packages/org/violetmoon/zeta/block/$ZetaStandingSignBlock" {
import {$IntegerProperty, $IntegerProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$IntegerProperty"
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$BooleanSupplier, $BooleanSupplier$Type} from "packages/java/util/function/$BooleanSupplier"
import {$WoodType, $WoodType$Type} from "packages/net/minecraft/world/level/block/state/properties/$WoodType"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$FluidState, $FluidState$Type} from "packages/net/minecraft/world/level/material/$FluidState"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$ToolAction, $ToolAction$Type} from "packages/net/minecraftforge/common/$ToolAction"
import {$IForgeBlock, $IForgeBlock$Type} from "packages/net/minecraftforge/common/extensions/$IForgeBlock"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$CreativeModeTab, $CreativeModeTab$Type} from "packages/net/minecraft/world/item/$CreativeModeTab"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$IZetaBlock, $IZetaBlock$Type} from "packages/org/violetmoon/zeta/block/$IZetaBlock"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$UseOnContext, $UseOnContext$Type} from "packages/net/minecraft/world/item/context/$UseOnContext"
import {$StandingSignBlock, $StandingSignBlock$Type} from "packages/net/minecraft/world/level/block/$StandingSignBlock"
import {$SoundType, $SoundType$Type} from "packages/net/minecraft/world/level/block/$SoundType"
import {$IPlantable, $IPlantable$Type} from "packages/net/minecraftforge/common/$IPlantable"
import {$IZetaBlockExtensions, $IZetaBlockExtensions$Type} from "packages/org/violetmoon/zeta/block/ext/$IZetaBlockExtensions"
import {$ResourceKey, $ResourceKey$Type} from "packages/net/minecraft/resources/$ResourceKey"
import {$ItemLike, $ItemLike$Type} from "packages/net/minecraft/world/level/$ItemLike"
import {$BlockAndTintGetter, $BlockAndTintGetter$Type} from "packages/net/minecraft/world/level/$BlockAndTintGetter"

export class $ZetaStandingSignBlock extends $StandingSignBlock implements $IZetaBlock, $IZetaBlockExtensions, $IForgeBlock {
static readonly "ROTATION": $IntegerProperty
static readonly "WATERLOGGED": $BooleanProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(arg0: string, arg1: $ZetaModule$Type, arg2: $WoodType$Type, arg3: $BlockBehaviour$Properties$Type)

public "getModule"(): $ZetaModule
public "canSustainPlant"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type, arg4: $IPlantable$Type): boolean
public "isLadder"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "isConduitFrame"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): boolean
public "doesConditionApply"(): boolean
public "setCondition"(arg0: $BooleanSupplier$Type): $ZetaStandingSignBlock
public "getEnchantPowerBonus"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type): float
public "shouldDisplayFluidOverlay"(arg0: $BlockState$Type, arg1: $BlockAndTintGetter$Type, arg2: $BlockPos$Type, arg3: $FluidState$Type): boolean
public "getToolModifiedState"(arg0: $BlockState$Type, arg1: $UseOnContext$Type, arg2: $ToolAction$Type, arg3: boolean): $BlockState
public "getBeaconColorMultiplier"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): (float)[]
public "makesOpenTrapdoorAboveClimbable"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockState$Type): boolean
public "getSoundType"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): $SoundType
public "isScaffolding"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "getLightEmission"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type): integer
public "isFlammable"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): boolean
public "canStickTo"(arg0: $BlockState$Type, arg1: $BlockState$Type): boolean
public "getFireSpreadSpeed"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "getFlammability"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "isStickyBlock"(arg0: $BlockState$Type): boolean
public "collisionExtendsVertically"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): boolean
public "getBlock"(): $Block
public "getFireSpreadSpeedZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "getFlammabilityZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "setCreativeTab"(arg0: $ResourceKey$Type<($CreativeModeTab$Type)>): $Block
public "setCreativeTab"(arg0: $ResourceKey$Type<($CreativeModeTab$Type)>, arg1: $ItemLike$Type, arg2: boolean): $Block
public "isConduitFrameZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): boolean
public "isLadderZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "isStickyBlockZeta"(arg0: $BlockState$Type): boolean
public "isScaffoldingZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "canStickToZeta"(arg0: $BlockState$Type, arg1: $BlockState$Type): boolean
public "isFlammableZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): boolean
public "getSoundTypeZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): $SoundType
public "makesOpenTrapdoorAboveClimbableZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockState$Type): boolean
public "canSustainPlantZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type, arg4: string): boolean
public "getToolModifiedStateZeta"(arg0: $BlockState$Type, arg1: $UseOnContext$Type, arg2: string, arg3: boolean): $BlockState
public "collisionExtendsVerticallyZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): boolean
public "shouldDisplayFluidOverlayZeta"(arg0: $BlockState$Type, arg1: $BlockAndTintGetter$Type, arg2: $BlockPos$Type, arg3: $FluidState$Type): boolean
public "getEnchantPowerBonusZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type): float
public "getBeaconColorMultiplierZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): (float)[]
public "getLightEmissionZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type): integer
public "isEnabled"(): boolean
public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
get "module"(): $ZetaModule
set "condition"(value: $BooleanSupplier$Type)
get "block"(): $Block
set "creativeTab"(value: $ResourceKey$Type<($CreativeModeTab$Type)>)
get "enabled"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZetaStandingSignBlock$Type = ($ZetaStandingSignBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZetaStandingSignBlock_ = $ZetaStandingSignBlock$Type;
}}
declare module "packages/org/violetmoon/zeta/config/$ValueDefinition" {
import {$ValueDefinition$Builder, $ValueDefinition$Builder$Type} from "packages/org/violetmoon/zeta/config/$ValueDefinition$Builder"
import {$Definition, $Definition$Type} from "packages/org/violetmoon/zeta/config/$Definition"
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$SectionDefinition, $SectionDefinition$Type} from "packages/org/violetmoon/zeta/config/$SectionDefinition"

export class $ValueDefinition<T> extends $Definition {
readonly "defaultValue": T
readonly "validator": $Predicate<(any)>
readonly "name": string
readonly "lowercaseName": string
readonly "englishDisplayName": string
readonly "comment": $List<(string)>
 "parent": $SectionDefinition
 "path": $List<(string)>
readonly "hint": any

constructor(arg0: $ValueDefinition$Builder$Type<(T)>)

public "toString"(): string
public "validate"(arg0: any): boolean
public "downcast"<X>(arg0: $Class$Type<(X)>): $ValueDefinition<(X)>
public "isOfType"(arg0: $Class$Type<(any)>): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ValueDefinition$Type<T> = ($ValueDefinition<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ValueDefinition_<T> = $ValueDefinition$Type<(T)>;
}}
declare module "packages/org/violetmoon/zeta/event/play/$ZServerTick$Start" {
import {$ZServerTick, $ZServerTick$Type} from "packages/org/violetmoon/zeta/event/play/$ZServerTick"
import {$MinecraftServer, $MinecraftServer$Type} from "packages/net/minecraft/server/$MinecraftServer"

export interface $ZServerTick$Start extends $ZServerTick {

 "getServer"(): $MinecraftServer

(): $MinecraftServer
}

export namespace $ZServerTick$Start {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZServerTick$Start$Type = ($ZServerTick$Start);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZServerTick$Start_ = $ZServerTick$Start$Type;
}}
declare module "packages/org/violetmoon/zetaimplforge/client/event/play/$ForgeZClientTick" {
import {$ZPhase, $ZPhase$Type} from "packages/org/violetmoon/zeta/event/bus/$ZPhase"
import {$TickEvent$Phase, $TickEvent$Phase$Type} from "packages/net/minecraftforge/event/$TickEvent$Phase"
import {$TickEvent$ClientTickEvent, $TickEvent$ClientTickEvent$Type} from "packages/net/minecraftforge/event/$TickEvent$ClientTickEvent"
import {$ZClientTick, $ZClientTick$Type} from "packages/org/violetmoon/zeta/client/event/play/$ZClientTick"

export class $ForgeZClientTick implements $ZClientTick {

constructor(arg0: $TickEvent$ClientTickEvent$Type)

public static "to"(arg0: $ZPhase$Type): $TickEvent$Phase
public static "from"(arg0: $TickEvent$Phase$Type): $ZPhase
public "getPhase"(): $ZPhase
get "phase"(): $ZPhase
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ForgeZClientTick$Type = ($ForgeZClientTick);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ForgeZClientTick_ = $ForgeZClientTick$Type;
}}
declare module "packages/org/violetmoon/zeta/client/event/load/$ZTooltipComponents" {
import {$TooltipComponent, $TooltipComponent$Type} from "packages/net/minecraft/world/inventory/tooltip/$TooltipComponent"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$IZetaLoadEvent, $IZetaLoadEvent$Type} from "packages/org/violetmoon/zeta/event/bus/$IZetaLoadEvent"
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$ClientTooltipComponent, $ClientTooltipComponent$Type} from "packages/net/minecraft/client/gui/screens/inventory/tooltip/$ClientTooltipComponent"

export interface $ZTooltipComponents extends $IZetaLoadEvent {

 "register"<T extends $TooltipComponent>(arg0: $Class$Type<(T)>, arg1: $Function$Type<(any), (any)>): void
 "register"<T extends ($ClientTooltipComponent) & ($TooltipComponent)>(arg0: $Class$Type<(T)>): void

(arg0: $Class$Type<(T)>, arg1: $Function$Type<(any), (any)>): void
}

export namespace $ZTooltipComponents {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZTooltipComponents$Type = ($ZTooltipComponents);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZTooltipComponents_ = $ZTooltipComponents$Type;
}}
declare module "packages/org/violetmoon/quark/content/tweaks/client/emote/$CustomEmote" {
import {$TemplateSourcedEmote, $TemplateSourcedEmote$Type} from "packages/org/violetmoon/quark/content/tweaks/client/emote/$TemplateSourcedEmote"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$HumanoidModel, $HumanoidModel$Type} from "packages/net/minecraft/client/model/$HumanoidModel"
import {$EmoteDescriptor, $EmoteDescriptor$Type} from "packages/org/violetmoon/quark/content/tweaks/client/emote/$EmoteDescriptor"

export class $CustomEmote extends $TemplateSourcedEmote {
static readonly "PI_F": float
readonly "desc": $EmoteDescriptor
 "timeDone": float
 "totalTime": float
 "animatedTime": float

constructor(arg0: $EmoteDescriptor$Type, arg1: $Player$Type, arg2: $HumanoidModel$Type<(any)>, arg3: $HumanoidModel$Type<(any)>, arg4: $HumanoidModel$Type<(any)>)

public "shouldLoadTimelineOnLaunch"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CustomEmote$Type = ($CustomEmote);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CustomEmote_ = $CustomEmote$Type;
}}
declare module "packages/org/violetmoon/zeta/world/$PassthroughTreeGrower" {
import {$ConfiguredFeature, $ConfiguredFeature$Type} from "packages/net/minecraft/world/level/levelgen/feature/$ConfiguredFeature"
import {$ResourceKey, $ResourceKey$Type} from "packages/net/minecraft/resources/$ResourceKey"
import {$AbstractTreeGrower, $AbstractTreeGrower$Type} from "packages/net/minecraft/world/level/block/grower/$AbstractTreeGrower"

export class $PassthroughTreeGrower extends $AbstractTreeGrower {

constructor(arg0: $ResourceKey$Type<($ConfiguredFeature$Type<(any), (any)>)>)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PassthroughTreeGrower$Type = ($PassthroughTreeGrower);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PassthroughTreeGrower_ = $PassthroughTreeGrower$Type;
}}
declare module "packages/org/violetmoon/zeta/config/$ConfigManager" {
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$ValueDefinition, $ValueDefinition$Type} from "packages/org/violetmoon/zeta/config/$ValueDefinition"
import {$ConfigFlagManager, $ConfigFlagManager$Type} from "packages/org/violetmoon/zeta/config/$ConfigFlagManager"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$SectionDefinition, $SectionDefinition$Type} from "packages/org/violetmoon/zeta/config/$SectionDefinition"
import {$IZetaConfigInternals, $IZetaConfigInternals$Type} from "packages/org/violetmoon/zeta/config/$IZetaConfigInternals"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $ConfigManager {

constructor(arg0: $Zeta$Type, arg1: any)

public "getRootConfig"(): $SectionDefinition
public "setJeiReloadListener"(arg0: $Consumer$Type<($IZetaConfigInternals$Type)>): void
public "getCategoryEnabledOption"(arg0: $ZetaCategory$Type): $ValueDefinition<(boolean)>
public "getModuleEnabledOption"(arg0: $ZetaModule$Type): $ValueDefinition<(boolean)>
public "onReload"(): void
public "getCategorySection"(arg0: $ZetaCategory$Type): $SectionDefinition
public "getGeneralSection"(): $SectionDefinition
public "isCategoryEnabled"(arg0: $ZetaCategory$Type): boolean
public "getConfigFlagManager"(): $ConfigFlagManager
get "rootConfig"(): $SectionDefinition
set "jeiReloadListener"(value: $Consumer$Type<($IZetaConfigInternals$Type)>)
get "generalSection"(): $SectionDefinition
get "configFlagManager"(): $ConfigFlagManager
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ConfigManager$Type = ($ConfigManager);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ConfigManager_ = $ConfigManager$Type;
}}
declare module "packages/org/violetmoon/quark/content/world/module/$NetherObsidianSpikesModule" {
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$ZCommonSetup, $ZCommonSetup$Type} from "packages/org/violetmoon/zeta/event/load/$ZCommonSetup"
import {$DimensionConfig, $DimensionConfig$Type} from "packages/org/violetmoon/zeta/config/type/$DimensionConfig"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $NetherObsidianSpikesModule extends $ZetaModule {
static "chancePerChunk": double
static "bigSpikeChance": double
static "triesPerChunk": integer
static "bigSpikeSpawners": boolean
static "dimensions": $DimensionConfig
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "setup"(arg0: $ZCommonSetup$Type): void
set "up"(value: $ZCommonSetup$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $NetherObsidianSpikesModule$Type = ($NetherObsidianSpikesModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $NetherObsidianSpikesModule_ = $NetherObsidianSpikesModule$Type;
}}
declare module "packages/org/violetmoon/zeta/util/handler/$FuelHandler" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ZLoadComplete, $ZLoadComplete$Type} from "packages/org/violetmoon/zeta/event/load/$ZLoadComplete"
import {$ZFurnaceFuelBurnTime, $ZFurnaceFuelBurnTime$Type} from "packages/org/violetmoon/zeta/event/play/$ZFurnaceFuelBurnTime"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"

export class $FuelHandler {

constructor(arg0: $Zeta$Type)

public "addWood"(arg0: $Block$Type): void
public "getFuel"(arg0: $ZFurnaceFuelBurnTime$Type): void
public "addAllWoods"(arg0: $ZLoadComplete$Type): void
public "addFuel"(arg0: $Item$Type, arg1: integer): void
public "addFuel"(arg0: $Block$Type, arg1: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FuelHandler$Type = ($FuelHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FuelHandler_ = $FuelHandler$Type;
}}
declare module "packages/org/violetmoon/zeta/event/play/entity/living/$ZLivingDrops$Lowest" {
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$ZLivingDrops, $ZLivingDrops$Type} from "packages/org/violetmoon/zeta/event/play/entity/living/$ZLivingDrops"
import {$ItemEntity, $ItemEntity$Type} from "packages/net/minecraft/world/entity/item/$ItemEntity"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export interface $ZLivingDrops$Lowest extends $ZLivingDrops {

 "getSource"(): $DamageSource
 "isRecentlyHit"(): boolean
 "getDrops"(): $Collection<($ItemEntity)>
 "getLootingLevel"(): integer
 "cancel"(): void
 "setCanceled"(arg0: boolean): void
 "isCanceled"(): boolean
 "getEntity"(): $LivingEntity
}

export namespace $ZLivingDrops$Lowest {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZLivingDrops$Lowest$Type = ($ZLivingDrops$Lowest);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZLivingDrops$Lowest_ = $ZLivingDrops$Lowest$Type;
}}
declare module "packages/org/violetmoon/quark/content/building/block/$HollowWoodBlock" {
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$HollowFrameBlock, $HollowFrameBlock$Type} from "packages/org/violetmoon/quark/content/building/block/$HollowFrameBlock"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$Mirror, $Mirror$Type} from "packages/net/minecraft/world/level/block/$Mirror"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$UseOnContext, $UseOnContext$Type} from "packages/net/minecraft/world/item/context/$UseOnContext"
import {$Rotation, $Rotation$Type} from "packages/net/minecraft/world/level/block/$Rotation"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $HollowWoodBlock extends $HollowFrameBlock {
static readonly "WATERLOGGED": $BooleanProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(arg0: $Block$Type, arg1: $ZetaModule$Type, arg2: boolean)
constructor(arg0: string, arg1: $Block$Type, arg2: $ZetaModule$Type, arg3: boolean)

public "getToolModifiedStateZeta"(arg0: $BlockState$Type, arg1: $UseOnContext$Type, arg2: string, arg3: boolean): $BlockState
public "isFlammable"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): boolean
public "rotate"(arg0: $BlockState$Type, arg1: $Rotation$Type): $BlockState
public "mirror"(arg0: $BlockState$Type, arg1: $Mirror$Type): $BlockState
public "getShapeCode"(arg0: $BlockState$Type): byte
public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $HollowWoodBlock$Type = ($HollowWoodBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $HollowWoodBlock_ = $HollowWoodBlock$Type;
}}
declare module "packages/org/violetmoon/quark/content/tools/entity/$ParrotEgg" {
import {$ThrowableItemProjectile, $ThrowableItemProjectile$Type} from "packages/net/minecraft/world/entity/projectile/$ThrowableItemProjectile"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $ParrotEgg extends $ThrowableItemProjectile {
static readonly "VARIANTS": integer
 "ownerUUID": $UUID
 "cachedOwner": $Entity
 "leftOwner": boolean
 "hasBeenShot": boolean
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(arg0: $Level$Type, arg1: $LivingEntity$Type)
constructor(arg0: $Level$Type, arg1: double, arg2: double, arg3: double)
constructor(arg0: $EntityType$Type<($ParrotEgg$Type)>, arg1: $Level$Type)

public "getVariant"(): integer
public "setVariant"(arg0: integer): void
public "handleEntityEvent"(arg0: byte): void
get "variant"(): integer
set "variant"(value: integer)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ParrotEgg$Type = ($ParrotEgg);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ParrotEgg_ = $ParrotEgg$Type;
}}
declare module "packages/org/violetmoon/zeta/config/type/$StrictBiomeConfig" {
import {$Holder, $Holder$Type} from "packages/net/minecraft/core/$Holder"
import {$IBiomeConfig, $IBiomeConfig$Type} from "packages/org/violetmoon/zeta/config/type/$IBiomeConfig"
import {$ConfigFlagManager, $ConfigFlagManager$Type} from "packages/org/violetmoon/zeta/config/$ConfigFlagManager"
import {$Biome, $Biome$Type} from "packages/net/minecraft/world/level/biome/$Biome"
import {$IConfigType, $IConfigType$Type} from "packages/org/violetmoon/zeta/config/type/$IConfigType"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $StrictBiomeConfig implements $IBiomeConfig, $IConfigType {


public "canSpawn"(arg0: $Holder$Type<($Biome$Type)>): boolean
public "onReload"(arg0: $ZetaModule$Type, arg1: $ConfigFlagManager$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $StrictBiomeConfig$Type = ($StrictBiomeConfig);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $StrictBiomeConfig_ = $StrictBiomeConfig$Type;
}}
declare module "packages/org/violetmoon/quark/base/handler/$SimilarBlockTypeHandler" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $SimilarBlockTypeHandler {

constructor()

public static "isShulkerBox"(arg0: $ResourceLocation$Type): boolean
public static "isShulkerBox"(arg0: $ItemStack$Type): boolean
public static "getBasicShulkerBoxes"(): $List<(string)>
get "basicShulkerBoxes"(): $List<(string)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SimilarBlockTypeHandler$Type = ($SimilarBlockTypeHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SimilarBlockTypeHandler_ = $SimilarBlockTypeHandler$Type;
}}
declare module "packages/org/violetmoon/quark/base/client/handler/$ModelHandler" {
import {$Mob, $Mob$Type} from "packages/net/minecraft/world/entity/$Mob"
import {$ModelLayerLocation, $ModelLayerLocation$Type} from "packages/net/minecraft/client/model/geom/$ModelLayerLocation"
import {$EntityModel, $EntityModel$Type} from "packages/net/minecraft/client/model/$EntityModel"
import {$ZRegisterLayerDefinitions, $ZRegisterLayerDefinitions$Type} from "packages/org/violetmoon/zeta/client/event/load/$ZRegisterLayerDefinitions"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$QuarkArmorModel, $QuarkArmorModel$Type} from "packages/org/violetmoon/quark/base/client/render/$QuarkArmorModel"

export class $ModelHandler {
static "shiba": $ModelLayerLocation
static "foxhound": $ModelLayerLocation
static "stoneling": $ModelLayerLocation
static "crab": $ModelLayerLocation
static "toretoise": $ModelLayerLocation
static "wraith": $ModelLayerLocation
static "quark_boat": $ModelLayerLocation
static "quark_boat_chest": $ModelLayerLocation
static "forgotten_hat": $ModelLayerLocation
static "backpack": $ModelLayerLocation

constructor()

public static "registerLayer"(arg0: $ZRegisterLayerDefinitions$Type): void
public static "armorModel"(arg0: $ModelLayerLocation$Type, arg1: $EquipmentSlot$Type): $QuarkArmorModel
public static "model"<T extends $Mob, M extends $EntityModel<(T)>>(arg0: $ModelLayerLocation$Type): M
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModelHandler$Type = ($ModelHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModelHandler_ = $ModelHandler$Type;
}}
declare module "packages/org/violetmoon/quark/content/building/module/$RawMetalBricksModule" {
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$ZRegister, $ZRegister$Type} from "packages/org/violetmoon/zeta/event/load/$ZRegister"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $RawMetalBricksModule extends $ZetaModule {
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "register"(arg0: $ZRegister$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RawMetalBricksModule$Type = ($RawMetalBricksModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RawMetalBricksModule_ = $RawMetalBricksModule$Type;
}}
declare module "packages/org/violetmoon/quark/content/building/block/$PaperWallBlock" {
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$IZetaBlock, $IZetaBlock$Type} from "packages/org/violetmoon/zeta/block/$IZetaBlock"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$ZetaInheritedPaneBlock, $ZetaInheritedPaneBlock$Type} from "packages/org/violetmoon/zeta/block/$ZetaInheritedPaneBlock"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $PaperWallBlock extends $ZetaInheritedPaneBlock {
readonly "parent": $IZetaBlock
readonly "module": $ZetaModule
static readonly "NORTH": $BooleanProperty
static readonly "EAST": $BooleanProperty
static readonly "SOUTH": $BooleanProperty
static readonly "WEST": $BooleanProperty
static readonly "WATERLOGGED": $BooleanProperty
static readonly "PROPERTY_BY_DIRECTION": $Map<($Direction), ($BooleanProperty)>
 "collisionShapeByIndex": ($VoxelShape)[]
 "shapeByIndex": ($VoxelShape)[]
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(arg0: $IZetaBlock$Type, arg1: string)

public "getFireSpreadSpeedZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "getFlammabilityZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PaperWallBlock$Type = ($PaperWallBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PaperWallBlock_ = $PaperWallBlock$Type;
}}
declare module "packages/org/violetmoon/zeta/client/event/play/$ZRenderTooltip" {
import {$IZetaPlayEvent, $IZetaPlayEvent$Type} from "packages/org/violetmoon/zeta/event/bus/$IZetaPlayEvent"

export interface $ZRenderTooltip extends $IZetaPlayEvent {

}

export namespace $ZRenderTooltip {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZRenderTooltip$Type = ($ZRenderTooltip);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZRenderTooltip_ = $ZRenderTooltip$Type;
}}
declare module "packages/org/violetmoon/zeta/client/config/screen/$StringListInputScreen" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$ValueDefinition, $ValueDefinition$Type} from "packages/org/violetmoon/zeta/config/$ValueDefinition"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$AbstractInputScreen, $AbstractInputScreen$Type} from "packages/org/violetmoon/zeta/client/config/screen/$AbstractInputScreen"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$ChangeSet, $ChangeSet$Type} from "packages/org/violetmoon/zeta/config/$ChangeSet"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$ZetaClient, $ZetaClient$Type} from "packages/org/violetmoon/zeta/client/$ZetaClient"
import {$List, $List$Type} from "packages/java/util/$List"

export class $StringListInputScreen extends $AbstractInputScreen<($List<(string)>)> {
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering

constructor(arg0: $ZetaClient$Type, arg1: $Screen$Type, arg2: $ChangeSet$Type, arg3: $ValueDefinition$Type<($List$Type<(string)>)>)

public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $StringListInputScreen$Type = ($StringListInputScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $StringListInputScreen_ = $StringListInputScreen$Type;
}}
declare module "packages/org/violetmoon/quark/addons/oddities/block/be/$CrateBlockEntity" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$WorldlyContainer, $WorldlyContainer$Type} from "packages/net/minecraft/world/$WorldlyContainer"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$CrateItemHandler, $CrateItemHandler$Type} from "packages/org/violetmoon/quark/addons/oddities/capability/$CrateItemHandler"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$LockCode, $LockCode$Type} from "packages/net/minecraft/world/$LockCode"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BaseContainerBlockEntity, $BaseContainerBlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BaseContainerBlockEntity"

export class $CrateBlockEntity extends $BaseContainerBlockEntity implements $WorldlyContainer {
 "lockKey": $LockCode
 "blockState": $BlockState

constructor(arg0: $BlockPos$Type, arg1: $BlockState$Type)

public "tick"(): void
public static "tick"(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: $CrateBlockEntity$Type): void
public "getItem"(arg0: integer): $ItemStack
public "getContainerSize"(): integer
public "removeItemNoUpdate"(arg0: integer): $ItemStack
public static "calculatePlayersUsing"(arg0: $Level$Type, arg1: $BaseContainerBlockEntity$Type, arg2: integer, arg3: integer, arg4: integer): integer
public "canTakeItemThroughFace"(arg0: integer, arg1: $ItemStack$Type, arg2: $Direction$Type): boolean
public "getSlotsForFace"(arg0: $Direction$Type): (integer)[]
public "canPlaceItemThroughFace"(arg0: integer, arg1: $ItemStack$Type, arg2: $Direction$Type): boolean
public "load"(arg0: $CompoundTag$Type): void
public "removeItem"(arg0: integer, arg1: integer): $ItemStack
public "clearContent"(): void
public "isEmpty"(): boolean
public "startOpen"(arg0: $Player$Type): void
public "stillValid"(arg0: $Player$Type): boolean
public "stopOpen"(arg0: $Player$Type): void
public "itemHandler"(): $CrateItemHandler
public "crateTick"(): void
public "spillTheTea"(): void
public "setItem"(arg0: integer, arg1: $ItemStack$Type): void
public "setChanged"(): void
public static "stillValidBlockEntity"(arg0: $BlockEntity$Type, arg1: $Player$Type, arg2: integer): boolean
public static "stillValidBlockEntity"(arg0: $BlockEntity$Type, arg1: $Player$Type): boolean
public static "tryClear"(arg0: any): void
get "containerSize"(): integer
get "empty"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CrateBlockEntity$Type = ($CrateBlockEntity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CrateBlockEntity_ = $CrateBlockEntity$Type;
}}
declare module "packages/org/violetmoon/quark/base/network/message/$ScrollOnBundleMessage" {
import {$IZetaMessage, $IZetaMessage$Type} from "packages/org/violetmoon/zeta/network/$IZetaMessage"
import {$IZetaNetworkEventContext, $IZetaNetworkEventContext$Type} from "packages/org/violetmoon/zeta/network/$IZetaNetworkEventContext"

export class $ScrollOnBundleMessage implements $IZetaMessage {
 "containerId": integer
 "stateId": integer
 "slotNum": integer
 "scrollDelta": double

constructor()
constructor(arg0: integer, arg1: integer, arg2: integer, arg3: double)

public "receive"(arg0: $IZetaNetworkEventContext$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ScrollOnBundleMessage$Type = ($ScrollOnBundleMessage);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ScrollOnBundleMessage_ = $ScrollOnBundleMessage$Type;
}}
declare module "packages/org/violetmoon/zeta/util/$BlockUtils" {
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $BlockUtils {

constructor()

public static "isWoodBased"(arg0: $BlockState$Type): boolean
public static "isStoneBased"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type): boolean
public static "isGlassBased"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type): boolean
public static "canFallThrough"(arg0: $BlockState$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BlockUtils$Type = ($BlockUtils);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BlockUtils_ = $BlockUtils$Type;
}}
declare module "packages/org/violetmoon/zeta/event/play/$ZBlock" {
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$IZetaPlayEvent, $IZetaPlayEvent$Type} from "packages/org/violetmoon/zeta/event/bus/$IZetaPlayEvent"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export interface $ZBlock extends $IZetaPlayEvent {

 "getState"(): $BlockState
 "getLevel"(): $LevelAccessor
 "getPos"(): $BlockPos
}

export namespace $ZBlock {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZBlock$Type = ($ZBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZBlock_ = $ZBlock$Type;
}}
declare module "packages/org/violetmoon/quark/content/tools/item/$AncientTomeItem" {
import {$CreativeTabManager$AppendsUniquely, $CreativeTabManager$AppendsUniquely$Type} from "packages/org/violetmoon/zeta/registry/$CreativeTabManager$AppendsUniquely"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$Enchantment, $Enchantment$Type} from "packages/net/minecraft/world/item/enchantment/$Enchantment"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$ZetaItem, $ZetaItem$Type} from "packages/org/violetmoon/zeta/item/$ZetaItem"

export class $AncientTomeItem extends $ZetaItem implements $CreativeTabManager$AppendsUniquely {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $ZetaModule$Type)

public static "getEnchantedItemStack"(arg0: $Enchantment$Type): $ItemStack
public "isFoil"(arg0: $ItemStack$Type): boolean
public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
public "isEnchantable"(arg0: $ItemStack$Type): boolean
public "canApplyAtEnchantingTableZeta"(arg0: $ItemStack$Type, arg1: $Enchantment$Type): boolean
public static "getFullTooltipText"(arg0: $Enchantment$Type): $Component
public "appendItemsToCreativeTab"(): $List<($ItemStack)>
public "asItem"(): $Item
public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AncientTomeItem$Type = ($AncientTomeItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AncientTomeItem_ = $AncientTomeItem$Type;
}}
declare module "packages/org/violetmoon/zetaimplforge/client/event/load/$ForgeZModel" {
import {$ZModel, $ZModel$Type} from "packages/org/violetmoon/zeta/client/event/load/$ZModel"

export class $ForgeZModel implements $ZModel {

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ForgeZModel$Type = ($ForgeZModel);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ForgeZModel_ = $ForgeZModel$Type;
}}
declare module "packages/org/violetmoon/zetaimplforge/world/$ZetaBiomeModifier" {
import {$IEventBus, $IEventBus$Type} from "packages/net/minecraftforge/eventbus/api/$IEventBus"
import {$ModifiableBiomeInfo$BiomeInfo$Builder, $ModifiableBiomeInfo$BiomeInfo$Builder$Type} from "packages/net/minecraftforge/common/world/$ModifiableBiomeInfo$BiomeInfo$Builder"
import {$Holder, $Holder$Type} from "packages/net/minecraft/core/$Holder"
import {$BiomeModifier, $BiomeModifier$Type} from "packages/net/minecraftforge/common/world/$BiomeModifier"
import {$BiomeModifier$Phase, $BiomeModifier$Phase$Type} from "packages/net/minecraftforge/common/world/$BiomeModifier$Phase"
import {$Biome, $Biome$Type} from "packages/net/minecraft/world/level/biome/$Biome"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Codec, $Codec$Type} from "packages/com/mojang/serialization/$Codec"

export class $ZetaBiomeModifier implements $BiomeModifier {
static readonly "RESOURCE": $ResourceLocation

constructor()

public "modify"(arg0: $Holder$Type<($Biome$Type)>, arg1: $BiomeModifier$Phase$Type, arg2: $ModifiableBiomeInfo$BiomeInfo$Builder$Type): void
public static "modifyBiome"(arg0: $Holder$Type<($Biome$Type)>, arg1: $ModifiableBiomeInfo$BiomeInfo$Builder$Type): void
public "codec"(): $Codec<(any)>
public static "registerBiomeModifier"(arg0: $IEventBus$Type): void
public static "makeCodec"(): $Codec<($ZetaBiomeModifier)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZetaBiomeModifier$Type = ($ZetaBiomeModifier);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZetaBiomeModifier_ = $ZetaBiomeModifier$Type;
}}
declare module "packages/org/violetmoon/quark/content/experimental/module/$EnchantmentsBegoneModule" {
import {$ZAnvilUpdate$Lowest, $ZAnvilUpdate$Lowest$Type} from "packages/org/violetmoon/zeta/event/play/$ZAnvilUpdate$Lowest"
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$Enchantment, $Enchantment$Type} from "packages/net/minecraft/world/item/enchantment/$Enchantment"
import {$List, $List$Type} from "packages/java/util/$List"
import {$EnchantmentInstance, $EnchantmentInstance$Type} from "packages/net/minecraft/world/item/enchantment/$EnchantmentInstance"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZConfigChanged, $ZConfigChanged$Type} from "packages/org/violetmoon/zeta/event/load/$ZConfigChanged"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $EnchantmentsBegoneModule extends $ZetaModule {
static "enchantmentsToBegone": $List<(string)>
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "stripAnvilEnchantments"(arg0: $ZAnvilUpdate$Lowest$Type): void
public static "begoneEnchantmentsFromItem"(arg0: $ItemStack$Type): $ItemStack
public static "begoneEnchantmentInstances"(arg0: $List$Type<($EnchantmentInstance$Type)>): $List<($EnchantmentInstance)>
public "configChanged"(arg0: $ZConfigChanged$Type): void
public static "begoneItems"(arg0: $NonNullList$Type<($ItemStack$Type)>): void
public static "begoneEnchantments"(arg0: $List$Type<($Enchantment$Type)>): $List<($Enchantment)>
public static "shouldBegone"(arg0: $Enchantment$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EnchantmentsBegoneModule$Type = ($EnchantmentsBegoneModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EnchantmentsBegoneModule_ = $EnchantmentsBegoneModule$Type;
}}
declare module "packages/org/violetmoon/zeta/mixin/plugin/$InterfaceDelegateMixinPlugin" {
import {$IMixinInfo, $IMixinInfo$Type} from "packages/org/spongepowered/asm/mixin/extensibility/$IMixinInfo"
import {$ClassNode, $ClassNode$Type} from "packages/org/objectweb/asm/tree/$ClassNode"
import {$IMixinConfigPlugin, $IMixinConfigPlugin$Type} from "packages/org/spongepowered/asm/mixin/extensibility/$IMixinConfigPlugin"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$List, $List$Type} from "packages/java/util/$List"

export class $InterfaceDelegateMixinPlugin implements $IMixinConfigPlugin {

constructor()

public "onLoad"(arg0: string): void
public "postApply"(arg0: string, arg1: $ClassNode$Type, arg2: string, arg3: $IMixinInfo$Type): void
public "getMixins"(): $List<(string)>
public "getRefMapperConfig"(): string
public "shouldApplyMixin"(arg0: string, arg1: string): boolean
public "preApply"(arg0: string, arg1: $ClassNode$Type, arg2: string, arg3: $IMixinInfo$Type): void
public "acceptTargets"(arg0: $Set$Type<(string)>, arg1: $Set$Type<(string)>): void
get "mixins"(): $List<(string)>
get "refMapperConfig"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $InterfaceDelegateMixinPlugin$Type = ($InterfaceDelegateMixinPlugin);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $InterfaceDelegateMixinPlugin_ = $InterfaceDelegateMixinPlugin$Type;
}}
declare module "packages/org/violetmoon/quark/integration/lootr/$LootrVariantChestBlock" {
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$ChestType, $ChestType$Type} from "packages/net/minecraft/world/level/block/state/properties/$ChestType"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$FluidState, $FluidState$Type} from "packages/net/minecraft/world/level/material/$FluidState"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$IZetaBlockItemProvider, $IZetaBlockItemProvider$Type} from "packages/org/violetmoon/zeta/registry/$IZetaBlockItemProvider"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"
import {$DirectionProperty, $DirectionProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$DirectionProperty"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$CollisionContext, $CollisionContext$Type} from "packages/net/minecraft/world/phys/shapes/$CollisionContext"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$VariantChestBlock, $VariantChestBlock$Type} from "packages/org/violetmoon/quark/content/building/block/$VariantChestBlock"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$BlockItem, $BlockItem$Type} from "packages/net/minecraft/world/item/$BlockItem"
import {$EnumProperty, $EnumProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$EnumProperty"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$MenuProvider, $MenuProvider$Type} from "packages/net/minecraft/world/$MenuProvider"
import {$BlockEntityTicker, $BlockEntityTicker$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityTicker"

export class $LootrVariantChestBlock extends $VariantChestBlock implements $IZetaBlockItemProvider {
static readonly "FACING": $DirectionProperty
static readonly "TYPE": $EnumProperty<($ChestType)>
static readonly "WATERLOGGED": $BooleanProperty
static readonly "EVENT_SET_OPEN_COUNT": integer
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(arg0: string, arg1: $ZetaModule$Type, arg2: $Supplier$Type<($BlockEntityType$Type<(any)>)>, arg3: $BlockBehaviour$Properties$Type)

public "getTicker"<T extends $BlockEntity>(arg0: $Level$Type, arg1: $BlockState$Type, arg2: $BlockEntityType$Type<(T)>): $BlockEntityTicker<(T)>
public "provideItemBlock"(arg0: $Block$Type, arg1: $Item$Properties$Type): $BlockItem
public "getExplosionResistance"(): float
public "getStateForPlacement"(arg0: $BlockPlaceContext$Type): $BlockState
public "updateShape"(arg0: $BlockState$Type, arg1: $Direction$Type, arg2: $BlockState$Type, arg3: $LevelAccessor$Type, arg4: $BlockPos$Type, arg5: $BlockPos$Type): $BlockState
public "use"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type, arg3: $Player$Type, arg4: $InteractionHand$Type, arg5: $BlockHitResult$Type): $InteractionResult
public "hasAnalogOutputSignal"(arg0: $BlockState$Type): boolean
public "getFluidState"(arg0: $BlockState$Type): $FluidState
public "getMenuProvider"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type): $MenuProvider
public "getAnalogOutputSignal"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type): integer
public "getShape"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $CollisionContext$Type): $VoxelShape
public "tick"(arg0: $BlockState$Type, arg1: $ServerLevel$Type, arg2: $BlockPos$Type, arg3: $RandomSource$Type): void
public "newBlockEntity"(arg0: $BlockPos$Type, arg1: $BlockState$Type): $BlockEntity
public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
get "explosionResistance"(): float
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LootrVariantChestBlock$Type = ($LootrVariantChestBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LootrVariantChestBlock_ = $LootrVariantChestBlock$Type;
}}
declare module "packages/org/violetmoon/zeta/client/event/play/$ZScreen$Init" {
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$ZScreen, $ZScreen$Type} from "packages/org/violetmoon/zeta/client/event/play/$ZScreen"

export interface $ZScreen$Init extends $ZScreen {

 "getListenersList"(): $List<($GuiEventListener)>
 "removeListener"(arg0: $GuiEventListener$Type): void
 "addListener"(arg0: $GuiEventListener$Type): void
 "getScreen"(): $Screen
}

export namespace $ZScreen$Init {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZScreen$Init$Type = ($ZScreen$Init);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZScreen$Init_ = $ZScreen$Init$Type;
}}
declare module "packages/org/violetmoon/zeta/network/$ZetaMessageSerializer$Reader" {
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$Field, $Field$Type} from "packages/java/lang/reflect/$Field"

export interface $ZetaMessageSerializer$Reader<T> {

 "read"(arg0: $FriendlyByteBuf$Type, arg1: $Field$Type): T

(arg0: $FriendlyByteBuf$Type, arg1: $Field$Type): T
}

export namespace $ZetaMessageSerializer$Reader {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZetaMessageSerializer$Reader$Type<T> = ($ZetaMessageSerializer$Reader<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZetaMessageSerializer$Reader_<T> = $ZetaMessageSerializer$Reader$Type<(T)>;
}}
declare module "packages/org/violetmoon/zeta/world/generator/multichunk/$ClusterShape" {
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$PerlinSimplexNoise, $PerlinSimplexNoise$Type} from "packages/net/minecraft/world/level/levelgen/synth/$PerlinSimplexNoise"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $ClusterShape extends $Record {

constructor(src: $BlockPos$Type, radius: $Vec3$Type, noiseGenerator: $PerlinSimplexNoise$Type)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "src"(): $BlockPos
public "noiseGenerator"(): $PerlinSimplexNoise
public "radius"(): $Vec3
public "isInside"(arg0: $BlockPos$Type): boolean
public "getUpperBound"(): integer
public "getLowerBound"(): integer
get "upperBound"(): integer
get "lowerBound"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClusterShape$Type = ($ClusterShape);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClusterShape_ = $ClusterShape$Type;
}}
declare module "packages/org/violetmoon/zetaimplforge/event/play/entity/living/$ForgeZLivingTick" {
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$ZLivingTick, $ZLivingTick$Type} from "packages/org/violetmoon/zeta/event/play/entity/living/$ZLivingTick"
import {$LivingEvent$LivingTickEvent, $LivingEvent$LivingTickEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingEvent$LivingTickEvent"

export class $ForgeZLivingTick extends $Record implements $ZLivingTick {

constructor(e: $LivingEvent$LivingTickEvent$Type)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "e"(): $LivingEvent$LivingTickEvent
public "getEntity"(): $LivingEntity
get "entity"(): $LivingEntity
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ForgeZLivingTick$Type = ($ForgeZLivingTick);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ForgeZLivingTick_ = $ForgeZLivingTick$Type;
}}
declare module "packages/org/violetmoon/zetaimplforge/event/play/entity/$ForgeZEntityTeleport" {
import {$EntityTeleportEvent, $EntityTeleportEvent$Type} from "packages/net/minecraftforge/event/entity/$EntityTeleportEvent"
import {$ZEntityTeleport, $ZEntityTeleport$Type} from "packages/org/violetmoon/zeta/event/play/entity/$ZEntityTeleport"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $ForgeZEntityTeleport implements $ZEntityTeleport {

constructor(arg0: $EntityTeleportEvent$Type)

public "setTargetZ"(arg0: double): void
public "getEntity"(): $Entity
public "getTargetX"(): double
public "getTargetZ"(): double
public "getTargetY"(): double
public "setTargetX"(arg0: double): void
public "setTargetY"(arg0: double): void
set "targetZ"(value: double)
get "entity"(): $Entity
get "targetX"(): double
get "targetZ"(): double
get "targetY"(): double
set "targetX"(value: double)
set "targetY"(value: double)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ForgeZEntityTeleport$Type = ($ForgeZEntityTeleport);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ForgeZEntityTeleport_ = $ForgeZEntityTeleport$Type;
}}
declare module "packages/org/violetmoon/quark/content/tweaks/module/$SimpleHarvestModule" {
import {$ZCommonSetup, $ZCommonSetup$Type} from "packages/org/violetmoon/zeta/event/load/$ZCommonSetup"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$ZRightClickBlock, $ZRightClickBlock$Type} from "packages/org/violetmoon/zeta/event/play/entity/player/$ZRightClickBlock"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$List, $List$Type} from "packages/java/util/$List"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZConfigChanged, $ZConfigChanged$Type} from "packages/org/violetmoon/zeta/event/load/$ZConfigChanged"

export class $SimpleHarvestModule extends $ZetaModule {
static "emptyHandHarvest": boolean
static "harvestingCostsDurability": boolean
static "doHarvestingSearch": boolean
static "villagersUseSimpleHarvest": boolean
static "harvestableBlocks": $List<(string)>
static "rightClickableBlocks": $List<(string)>
static readonly "crops": $Map<($BlockState), ($BlockState)>
static readonly "rightClickCrops": $Set<($Block)>
static "simpleHarvestBlacklistedTag": $TagKey<($Block)>
static "staticEnabled": boolean
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "setup"(arg0: $ZCommonSetup$Type): void
public static "tryHarvestOrClickCrop"(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $LivingEntity$Type, arg3: $InteractionHand$Type, arg4: boolean): boolean
public "onClick"(arg0: $ZRightClickBlock$Type): void
public "configChanged"(arg0: $ZConfigChanged$Type): void
public static "click"(arg0: $Player$Type, arg1: $InteractionHand$Type, arg2: $BlockPos$Type, arg3: $BlockHitResult$Type): boolean
set "up"(value: $ZCommonSetup$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SimpleHarvestModule$Type = ($SimpleHarvestModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SimpleHarvestModule_ = $SimpleHarvestModule$Type;
}}
declare module "packages/org/violetmoon/quark/base/handler/$ProxiedItemStackHandler" {
import {$LazyOptional, $LazyOptional$Type} from "packages/net/minecraftforge/common/util/$LazyOptional"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$Ingredient, $Ingredient$Type} from "packages/net/minecraft/world/item/crafting/$Ingredient"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$BlockContainerJS, $BlockContainerJS$Type} from "packages/dev/latvian/mods/kubejs/level/$BlockContainerJS"
import {$IItemHandlerModifiable, $IItemHandlerModifiable$Type} from "packages/net/minecraftforge/items/$IItemHandlerModifiable"
import {$IItemHandler, $IItemHandler$Type} from "packages/net/minecraftforge/items/$IItemHandler"
import {$Capability, $Capability$Type} from "packages/net/minecraftforge/common/capabilities/$Capability"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ICapabilityProvider, $ICapabilityProvider$Type} from "packages/net/minecraftforge/common/capabilities/$ICapabilityProvider"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"

export class $ProxiedItemStackHandler implements $IItemHandler, $IItemHandlerModifiable, $ICapabilityProvider {

constructor(arg0: $ItemStack$Type)
constructor(arg0: $ItemStack$Type, arg1: string, arg2: integer)
constructor(arg0: $ItemStack$Type, arg1: integer)
constructor(arg0: $ItemStack$Type, arg1: string)

public "getSlots"(): integer
public "getStackInSlot"(arg0: integer): $ItemStack
public "insertItem"(arg0: integer, arg1: $ItemStack$Type, arg2: boolean): $ItemStack
public "setStackInSlot"(arg0: integer, arg1: $ItemStack$Type): void
public "getSlotLimit"(arg0: integer): integer
public "extractItem"(arg0: integer, arg1: integer, arg2: boolean): $ItemStack
public "isItemValid"(arg0: integer, arg1: $ItemStack$Type): boolean
public "getCapability"<T>(arg0: $Capability$Type<(T)>, arg1: $Direction$Type): $LazyOptional<(T)>
public "kjs$self"(): $IItemHandler
public "getBlock"(level: $Level$Type): $BlockContainerJS
public "getSlots"(): integer
public "getStackInSlot"(i: integer): $ItemStack
public "insertItem"(i: integer, itemStack: $ItemStack$Type, b: boolean): $ItemStack
public "isMutable"(): boolean
public "extractItem"(i: integer, i1: integer, b: boolean): $ItemStack
public "isItemValid"(i: integer, itemStack: $ItemStack$Type): boolean
public "setStackInSlot"(slot: integer, stack: $ItemStack$Type): void
public "getSlotLimit"(i: integer): integer
public "getCapability"<T>(arg0: $Capability$Type<(T)>): $LazyOptional<(T)>
public "insertItem"(stack: $ItemStack$Type, simulate: boolean): $ItemStack
public "setChanged"(): void
public "asContainer"(): $Container
public "countNonEmpty"(ingredient: $Ingredient$Type): integer
public "countNonEmpty"(): integer
public "getAllItems"(): $List<($ItemStack)>
public "getHeight"(): integer
public "find"(ingredient: $Ingredient$Type): integer
public "find"(): integer
public "getWidth"(): integer
public "clear"(): void
public "clear"(ingredient: $Ingredient$Type): void
public "count"(ingredient: $Ingredient$Type): integer
public "count"(): integer
public "isEmpty"(): boolean
get "slots"(): integer
get "slots"(): integer
get "mutable"(): boolean
get "allItems"(): $List<($ItemStack)>
get "height"(): integer
get "width"(): integer
get "empty"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ProxiedItemStackHandler$Type = ($ProxiedItemStackHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ProxiedItemStackHandler_ = $ProxiedItemStackHandler$Type;
}}
declare module "packages/org/violetmoon/quark/content/building/module/$CompressedBlocksModule" {
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$ZRegister, $ZRegister$Type} from "packages/org/violetmoon/zeta/event/load/$ZRegister"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ZLoadComplete, $ZLoadComplete$Type} from "packages/org/violetmoon/zeta/event/load/$ZLoadComplete"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $CompressedBlocksModule extends $ZetaModule {
static "burnsForever": boolean
static "charcoalBlockFuelTime": integer
static "blazeLanternFuelTime": integer
static "stickBlockFuelTime": integer
static "enableCharcoalBlock": boolean
static "enableSugarCaneBlock": boolean
static "enableCactusBlock": boolean
static "enableChorusFruitBlock": boolean
static "enableStickBlock": boolean
static "enableAppleCrate": boolean
static "enableGoldenAppleCrate": boolean
static "enablePotatoCrate": boolean
static "enableCarrotCrate": boolean
static "enableGoldenCarrotCrate": boolean
static "enableBeetrootCrate": boolean
static "enableCocoaBeanSack": boolean
static "enableNetherWartSack": boolean
static "enableGunpowderSack": boolean
static "enableBerrySack": boolean
static "enableGlowBerrySack": boolean
static "enableBlazeLantern": boolean
static "enableBondedLeather": boolean
static "enableBondedRabbitHide": boolean
static "charcoal_block": $Block
static "blaze_lantern": $Block
static "golden_apple_crate": $Block
static "stick_block": $Block
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "register"(arg0: $ZRegister$Type): void
public "loadComplete"(arg0: $ZLoadComplete$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CompressedBlocksModule$Type = ($CompressedBlocksModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CompressedBlocksModule_ = $CompressedBlocksModule$Type;
}}
declare module "packages/org/violetmoon/quark/content/world/block/$GlowShroomBlock" {
import {$ZetaBushBlock, $ZetaBushBlock$Type} from "packages/org/violetmoon/zeta/block/$ZetaBushBlock"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$CollisionContext, $CollisionContext$Type} from "packages/net/minecraft/world/phys/shapes/$CollisionContext"
import {$BonemealableBlock, $BonemealableBlock$Type} from "packages/net/minecraft/world/level/block/$BonemealableBlock"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $GlowShroomBlock extends $ZetaBushBlock implements $BonemealableBlock {
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(arg0: $ZetaModule$Type)

public "getShape"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $CollisionContext$Type): $VoxelShape
public "animateTick"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type, arg3: $RandomSource$Type): void
public "isValidBonemealTarget"(arg0: $LevelReader$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: boolean): boolean
public "isBonemealSuccess"(arg0: $Level$Type, arg1: $RandomSource$Type, arg2: $BlockPos$Type, arg3: $BlockState$Type): boolean
public "performBonemeal"(arg0: $ServerLevel$Type, arg1: $RandomSource$Type, arg2: $BlockPos$Type, arg3: $BlockState$Type): void
public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GlowShroomBlock$Type = ($GlowShroomBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GlowShroomBlock_ = $GlowShroomBlock$Type;
}}
declare module "packages/org/violetmoon/zeta/event/play/entity/player/$ZPlayer$BreakSpeed" {
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$ZPlayer, $ZPlayer$Type} from "packages/org/violetmoon/zeta/event/play/entity/player/$ZPlayer"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export interface $ZPlayer$BreakSpeed extends $ZPlayer {

 "getState"(): $BlockState
 "setNewSpeed"(arg0: float): void
 "getOriginalSpeed"(): float
 "getPlayer"(): $Player
 "getEntity"(): $LivingEntity
}

export namespace $ZPlayer$BreakSpeed {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZPlayer$BreakSpeed$Type = ($ZPlayer$BreakSpeed);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZPlayer$BreakSpeed_ = $ZPlayer$BreakSpeed$Type;
}}
declare module "packages/org/violetmoon/zeta/client/config/widget/$CategoryButton" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Button, $Button$Type} from "packages/net/minecraft/client/gui/components/$Button"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$Button$OnPress, $Button$OnPress$Type} from "packages/net/minecraft/client/gui/components/$Button$OnPress"

export class $CategoryButton extends $Button {
static readonly "SMALL_WIDTH": integer
static readonly "DEFAULT_WIDTH": integer
static readonly "DEFAULT_HEIGHT": integer
 "onPress": $Button$OnPress
static readonly "WIDGETS_LOCATION": $ResourceLocation
static readonly "ACCESSIBILITY_TEXTURE": $ResourceLocation
 "height": integer
 "x": integer
 "y": integer
 "active": boolean
 "visible": boolean
static readonly "UNSET_FG_COLOR": integer

constructor(arg0: integer, arg1: integer, arg2: integer, arg3: integer, arg4: $Component$Type, arg5: $ItemStack$Type, arg6: $Button$OnPress$Type)

public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CategoryButton$Type = ($CategoryButton);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CategoryButton_ = $CategoryButton$Type;
}}
declare module "packages/org/violetmoon/zeta/block/$ZetaPaneBlock" {
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$BooleanSupplier, $BooleanSupplier$Type} from "packages/java/util/function/$BooleanSupplier"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$RenderLayerRegistry$Layer, $RenderLayerRegistry$Layer$Type} from "packages/org/violetmoon/zeta/registry/$RenderLayerRegistry$Layer"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$FluidState, $FluidState$Type} from "packages/net/minecraft/world/level/material/$FluidState"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$ToolAction, $ToolAction$Type} from "packages/net/minecraftforge/common/$ToolAction"
import {$IForgeBlock, $IForgeBlock$Type} from "packages/net/minecraftforge/common/extensions/$IForgeBlock"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$CreativeModeTab, $CreativeModeTab$Type} from "packages/net/minecraft/world/item/$CreativeModeTab"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$IronBarsBlock, $IronBarsBlock$Type} from "packages/net/minecraft/world/level/block/$IronBarsBlock"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$IZetaBlock, $IZetaBlock$Type} from "packages/org/violetmoon/zeta/block/$IZetaBlock"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$UseOnContext, $UseOnContext$Type} from "packages/net/minecraft/world/item/context/$UseOnContext"
import {$SoundType, $SoundType$Type} from "packages/net/minecraft/world/level/block/$SoundType"
import {$IPlantable, $IPlantable$Type} from "packages/net/minecraftforge/common/$IPlantable"
import {$IZetaBlockExtensions, $IZetaBlockExtensions$Type} from "packages/org/violetmoon/zeta/block/ext/$IZetaBlockExtensions"
import {$ResourceKey, $ResourceKey$Type} from "packages/net/minecraft/resources/$ResourceKey"
import {$ItemLike, $ItemLike$Type} from "packages/net/minecraft/world/level/$ItemLike"
import {$BlockAndTintGetter, $BlockAndTintGetter$Type} from "packages/net/minecraft/world/level/$BlockAndTintGetter"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $ZetaPaneBlock extends $IronBarsBlock implements $IZetaBlock, $IZetaBlockExtensions, $IForgeBlock {
readonly "module": $ZetaModule
static readonly "NORTH": $BooleanProperty
static readonly "EAST": $BooleanProperty
static readonly "SOUTH": $BooleanProperty
static readonly "WEST": $BooleanProperty
static readonly "WATERLOGGED": $BooleanProperty
static readonly "PROPERTY_BY_DIRECTION": $Map<($Direction), ($BooleanProperty)>
 "collisionShapeByIndex": ($VoxelShape)[]
 "shapeByIndex": ($VoxelShape)[]
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(arg0: string, arg1: $ZetaModule$Type, arg2: $BlockBehaviour$Properties$Type, arg3: $RenderLayerRegistry$Layer$Type)

public "getModule"(): $ZetaModule
public "canSustainPlant"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type, arg4: $IPlantable$Type): boolean
public "isLadder"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "isConduitFrame"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): boolean
public "doesConditionApply"(): boolean
public "setCondition"(arg0: $BooleanSupplier$Type): $ZetaPaneBlock
public "getEnchantPowerBonus"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type): float
public "shouldDisplayFluidOverlay"(arg0: $BlockState$Type, arg1: $BlockAndTintGetter$Type, arg2: $BlockPos$Type, arg3: $FluidState$Type): boolean
public "getToolModifiedState"(arg0: $BlockState$Type, arg1: $UseOnContext$Type, arg2: $ToolAction$Type, arg3: boolean): $BlockState
public "getBeaconColorMultiplier"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): (float)[]
public "makesOpenTrapdoorAboveClimbable"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockState$Type): boolean
public "getSoundType"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): $SoundType
public "isScaffolding"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "getLightEmission"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type): integer
public "isFlammable"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): boolean
public "canStickTo"(arg0: $BlockState$Type, arg1: $BlockState$Type): boolean
public "getFireSpreadSpeed"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "getFlammability"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "isStickyBlock"(arg0: $BlockState$Type): boolean
public "collisionExtendsVertically"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): boolean
public "getBlock"(): $Block
public "getFireSpreadSpeedZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "getFlammabilityZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "setCreativeTab"(arg0: $ResourceKey$Type<($CreativeModeTab$Type)>): $Block
public "setCreativeTab"(arg0: $ResourceKey$Type<($CreativeModeTab$Type)>, arg1: $ItemLike$Type, arg2: boolean): $Block
public "isConduitFrameZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): boolean
public "isLadderZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "isStickyBlockZeta"(arg0: $BlockState$Type): boolean
public "isScaffoldingZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "canStickToZeta"(arg0: $BlockState$Type, arg1: $BlockState$Type): boolean
public "isFlammableZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): boolean
public "getSoundTypeZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): $SoundType
public "makesOpenTrapdoorAboveClimbableZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockState$Type): boolean
public "canSustainPlantZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type, arg4: string): boolean
public "getToolModifiedStateZeta"(arg0: $BlockState$Type, arg1: $UseOnContext$Type, arg2: string, arg3: boolean): $BlockState
public "collisionExtendsVerticallyZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): boolean
public "shouldDisplayFluidOverlayZeta"(arg0: $BlockState$Type, arg1: $BlockAndTintGetter$Type, arg2: $BlockPos$Type, arg3: $FluidState$Type): boolean
public "getEnchantPowerBonusZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type): float
public "getBeaconColorMultiplierZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): (float)[]
public "getLightEmissionZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type): integer
public "isEnabled"(): boolean
public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
get "module"(): $ZetaModule
set "condition"(value: $BooleanSupplier$Type)
get "block"(): $Block
set "creativeTab"(value: $ResourceKey$Type<($CreativeModeTab$Type)>)
get "enabled"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZetaPaneBlock$Type = ($ZetaPaneBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZetaPaneBlock_ = $ZetaPaneBlock$Type;
}}
declare module "packages/org/violetmoon/zeta/client/event/load/$ZModel" {
import {$IZetaLoadEvent, $IZetaLoadEvent$Type} from "packages/org/violetmoon/zeta/event/bus/$IZetaLoadEvent"

export interface $ZModel extends $IZetaLoadEvent {

}

export namespace $ZModel {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZModel$Type = ($ZModel);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZModel_ = $ZModel$Type;
}}
declare module "packages/org/violetmoon/zetaimplforge/mixin/mixins/client/$AccessorBlockColors" {
import {$BlockColor, $BlockColor$Type} from "packages/net/minecraft/client/color/block/$BlockColor"
import {$Holder$Reference, $Holder$Reference$Type} from "packages/net/minecraft/core/$Holder$Reference"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export interface $AccessorBlockColors {

 "zeta$getBlockColors"(): $Map<($Holder$Reference<($Block)>), ($BlockColor)>

(): $Map<($Holder$Reference<($Block)>), ($BlockColor)>
}

export namespace $AccessorBlockColors {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AccessorBlockColors$Type = ($AccessorBlockColors);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AccessorBlockColors_ = $AccessorBlockColors$Type;
}}
declare module "packages/org/violetmoon/zeta/config/$Definition" {
import {$Definition$Builder, $Definition$Builder$Type} from "packages/org/violetmoon/zeta/config/$Definition$Builder"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$List, $List$Type} from "packages/java/util/$List"
import {$SectionDefinition, $SectionDefinition$Type} from "packages/org/violetmoon/zeta/config/$SectionDefinition"

export class $Definition {
readonly "name": string
readonly "lowercaseName": string
readonly "englishDisplayName": string
readonly "comment": $List<(string)>
 "parent": $SectionDefinition
 "path": $List<(string)>
readonly "hint": any

constructor(arg0: $Definition$Builder$Type<(any), (any)>)

public "setParent"(arg0: $SectionDefinition$Type): void
public "commentToString"(): string
public "commentToArray"(): (string)[]
public "getTranslatedDisplayName"(arg0: $Function$Type<(string), (string)>): string
public "getTranslatedComment"(arg0: $Function$Type<(string), (string)>): $List<(string)>
set "parent"(value: $SectionDefinition$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Definition$Type = ($Definition);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Definition_ = $Definition$Type;
}}
declare module "packages/org/violetmoon/zeta/event/play/entity/player/$ZPlayerTick$Start" {
import {$ZPlayerTick, $ZPlayerTick$Type} from "packages/org/violetmoon/zeta/event/play/entity/player/$ZPlayerTick"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"

export interface $ZPlayerTick$Start extends $ZPlayerTick {

 "getPlayer"(): $Player

(): $Player
}

export namespace $ZPlayerTick$Start {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZPlayerTick$Start$Type = ($ZPlayerTick$Start);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZPlayerTick$Start_ = $ZPlayerTick$Start$Type;
}}
declare module "packages/org/violetmoon/zeta/client/event/load/$ZKeyMapping" {
import {$KeyMapping, $KeyMapping$Type} from "packages/net/minecraft/client/$KeyMapping"
import {$IZetaLoadEvent, $IZetaLoadEvent$Type} from "packages/org/violetmoon/zeta/event/bus/$IZetaLoadEvent"
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$InputConstants$Type, $InputConstants$Type$Type} from "packages/com/mojang/blaze3d/platform/$InputConstants$Type"
import {$InputConstants$Key, $InputConstants$Key$Type} from "packages/com/mojang/blaze3d/platform/$InputConstants$Key"

export interface $ZKeyMapping extends $IZetaLoadEvent {

 "register"(arg0: $KeyMapping$Type): $KeyMapping
 "init"(arg0: string, arg1: string, arg2: string, arg3: integer, arg4: $Predicate$Type<($InputConstants$Key$Type)>): $KeyMapping
 "init"(arg0: string, arg1: string, arg2: string, arg3: $Predicate$Type<($InputConstants$Key$Type)>): $KeyMapping
 "init"(arg0: string, arg1: string, arg2: string, arg3: integer): $KeyMapping
 "init"(arg0: string, arg1: string, arg2: string): $KeyMapping
 "getKeyCode"(arg0: string, arg1: $InputConstants$Type$Type): integer
 "getKeyPrefix"(arg0: $InputConstants$Type$Type): string
 "initMouse"(arg0: string, arg1: integer, arg2: string): $KeyMapping
 "initMouse"(arg0: string, arg1: integer, arg2: string, arg3: integer, arg4: $Predicate$Type<($InputConstants$Key$Type)>): $KeyMapping
 "initMouse"(arg0: string, arg1: integer, arg2: string, arg3: $Predicate$Type<($InputConstants$Key$Type)>): $KeyMapping
 "initMouse"(arg0: string, arg1: integer, arg2: string, arg3: integer): $KeyMapping

(arg0: $KeyMapping$Type): $KeyMapping
}

export namespace $ZKeyMapping {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZKeyMapping$Type = ($ZKeyMapping);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZKeyMapping_ = $ZKeyMapping$Type;
}}
declare module "packages/org/violetmoon/quark/content/tweaks/block/$WaterPetalBlock" {
import {$IntegerProperty, $IntegerProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$IntegerProperty"
import {$PinkPetalsBlock, $PinkPetalsBlock$Type} from "packages/net/minecraft/world/level/block/$PinkPetalsBlock"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$FluidState, $FluidState$Type} from "packages/net/minecraft/world/level/material/$FluidState"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$DirectionProperty, $DirectionProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$DirectionProperty"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$CreativeModeTab, $CreativeModeTab$Type} from "packages/net/minecraft/world/item/$CreativeModeTab"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$IZetaBlock, $IZetaBlock$Type} from "packages/org/violetmoon/zeta/block/$IZetaBlock"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$UseOnContext, $UseOnContext$Type} from "packages/net/minecraft/world/item/context/$UseOnContext"
import {$SoundType, $SoundType$Type} from "packages/net/minecraft/world/level/block/$SoundType"
import {$ResourceKey, $ResourceKey$Type} from "packages/net/minecraft/resources/$ResourceKey"
import {$ItemLike, $ItemLike$Type} from "packages/net/minecraft/world/level/$ItemLike"
import {$BlockAndTintGetter, $BlockAndTintGetter$Type} from "packages/net/minecraft/world/level/$BlockAndTintGetter"

export class $WaterPetalBlock extends $PinkPetalsBlock implements $IZetaBlock {
static readonly "MIN_FLOWERS": integer
static readonly "MAX_FLOWERS": integer
static readonly "FACING": $DirectionProperty
static readonly "AMOUNT": $IntegerProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(arg0: $Item$Type, arg1: string, arg2: $ZetaModule$Type, arg3: $BlockBehaviour$Properties$Type)

public "getModule"(): $ZetaModule
public "getCloneItemStack"(arg0: $BlockGetter$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type): $ItemStack
public "doesConditionApply"(): boolean
public "canSurvive"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type): boolean
public "getBlock"(): $Block
public "getFireSpreadSpeedZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "getFlammabilityZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "setCreativeTab"(arg0: $ResourceKey$Type<($CreativeModeTab$Type)>): $Block
public "setCreativeTab"(arg0: $ResourceKey$Type<($CreativeModeTab$Type)>, arg1: $ItemLike$Type, arg2: boolean): $Block
public "isConduitFrameZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): boolean
public "isLadderZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "isStickyBlockZeta"(arg0: $BlockState$Type): boolean
public "isScaffoldingZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "canStickToZeta"(arg0: $BlockState$Type, arg1: $BlockState$Type): boolean
public "isFlammableZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): boolean
public "getSoundTypeZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): $SoundType
public "makesOpenTrapdoorAboveClimbableZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockState$Type): boolean
public "canSustainPlantZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type, arg4: string): boolean
public "getToolModifiedStateZeta"(arg0: $BlockState$Type, arg1: $UseOnContext$Type, arg2: string, arg3: boolean): $BlockState
public "collisionExtendsVerticallyZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): boolean
public "shouldDisplayFluidOverlayZeta"(arg0: $BlockState$Type, arg1: $BlockAndTintGetter$Type, arg2: $BlockPos$Type, arg3: $FluidState$Type): boolean
public "getEnchantPowerBonusZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type): float
public "getBeaconColorMultiplierZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): (float)[]
public "getLightEmissionZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type): integer
public "isEnabled"(): boolean
public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
get "module"(): $ZetaModule
get "block"(): $Block
set "creativeTab"(value: $ResourceKey$Type<($CreativeModeTab$Type)>)
get "enabled"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WaterPetalBlock$Type = ($WaterPetalBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WaterPetalBlock_ = $WaterPetalBlock$Type;
}}
declare module "packages/org/violetmoon/quark/addons/oddities/client/model/$TinyPotatoModel" {
import {$ModelData, $ModelData$Type} from "packages/net/minecraftforge/client/model/data/$ModelData"
import {$ItemTransforms, $ItemTransforms$Type} from "packages/net/minecraft/client/renderer/block/model/$ItemTransforms"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BakedModel, $BakedModel$Type} from "packages/net/minecraft/client/resources/model/$BakedModel"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$RenderType, $RenderType$Type} from "packages/net/minecraft/client/renderer/$RenderType"
import {$ItemOverrides, $ItemOverrides$Type} from "packages/net/minecraft/client/renderer/block/model/$ItemOverrides"
import {$ItemDisplayContext, $ItemDisplayContext$Type} from "packages/net/minecraft/world/item/$ItemDisplayContext"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$List, $List$Type} from "packages/java/util/$List"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$ChunkRenderTypeSet, $ChunkRenderTypeSet$Type} from "packages/net/minecraftforge/client/$ChunkRenderTypeSet"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockAndTintGetter, $BlockAndTintGetter$Type} from "packages/net/minecraft/world/level/$BlockAndTintGetter"
import {$TextureAtlasSprite, $TextureAtlasSprite$Type} from "packages/net/minecraft/client/renderer/texture/$TextureAtlasSprite"
import {$BakedQuad, $BakedQuad$Type} from "packages/net/minecraft/client/renderer/block/model/$BakedQuad"

export class $TinyPotatoModel extends $Record implements $BakedModel {

constructor(originalModel: $BakedModel$Type)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "originalModel"(): $BakedModel
public "usesBlockLight"(): boolean
public "isGui3d"(): boolean
public "getParticleIcon"(): $TextureAtlasSprite
public "getQuads"(arg0: $BlockState$Type, arg1: $Direction$Type, arg2: $RandomSource$Type): $List<($BakedQuad)>
public "isCustomRenderer"(): boolean
public "getOverrides"(): $ItemOverrides
public "getTransforms"(): $ItemTransforms
public "useAmbientOcclusion"(): boolean
public "useAmbientOcclusion"(arg0: $BlockState$Type, arg1: $RenderType$Type): boolean
public "useAmbientOcclusion"(arg0: $BlockState$Type): boolean
public "getRenderTypes"(arg0: $ItemStack$Type, arg1: boolean): $List<($RenderType)>
public "getRenderTypes"(arg0: $BlockState$Type, arg1: $RandomSource$Type, arg2: $ModelData$Type): $ChunkRenderTypeSet
public "getRenderPasses"(arg0: $ItemStack$Type, arg1: boolean): $List<($BakedModel)>
public "applyTransform"(arg0: $ItemDisplayContext$Type, arg1: $PoseStack$Type, arg2: boolean): $BakedModel
public "getQuads"(arg0: $BlockState$Type, arg1: $Direction$Type, arg2: $RandomSource$Type, arg3: $ModelData$Type, arg4: $RenderType$Type): $List<($BakedQuad)>
public "getParticleIcon"(arg0: $ModelData$Type): $TextureAtlasSprite
public "getModelData"(arg0: $BlockAndTintGetter$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: $ModelData$Type): $ModelData
public "useAmbientOcclusionWithLightEmission"(arg0: $BlockState$Type, arg1: $RenderType$Type): boolean
get "gui3d"(): boolean
get "particleIcon"(): $TextureAtlasSprite
get "customRenderer"(): boolean
get "overrides"(): $ItemOverrides
get "transforms"(): $ItemTransforms
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TinyPotatoModel$Type = ($TinyPotatoModel);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TinyPotatoModel_ = $TinyPotatoModel$Type;
}}
declare module "packages/org/violetmoon/quark/content/building/module/$ThatchModule" {
import {$ThatchBlock, $ThatchBlock$Type} from "packages/org/violetmoon/quark/content/building/block/$ThatchBlock"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$ZRegister, $ZRegister$Type} from "packages/org/violetmoon/zeta/event/load/$ZRegister"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ZLoadComplete, $ZLoadComplete$Type} from "packages/org/violetmoon/zeta/event/load/$ZLoadComplete"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $ThatchModule extends $ZetaModule {
static "fallDamageMultiplier": double
static "thatch": $ThatchBlock
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "register"(arg0: $ZRegister$Type): void
public "loadComplete"(arg0: $ZLoadComplete$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ThatchModule$Type = ($ThatchModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ThatchModule_ = $ThatchModule$Type;
}}
declare module "packages/org/violetmoon/zeta/client/config/widget/$PencilButton" {
import {$ZetaClient, $ZetaClient$Type} from "packages/org/violetmoon/zeta/client/$ZetaClient"
import {$Button, $Button$Type} from "packages/net/minecraft/client/gui/components/$Button"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$Button$OnPress, $Button$OnPress$Type} from "packages/net/minecraft/client/gui/components/$Button$OnPress"

export class $PencilButton extends $Button {
static readonly "SMALL_WIDTH": integer
static readonly "DEFAULT_WIDTH": integer
static readonly "DEFAULT_HEIGHT": integer
 "onPress": $Button$OnPress
static readonly "WIDGETS_LOCATION": $ResourceLocation
static readonly "ACCESSIBILITY_TEXTURE": $ResourceLocation
 "height": integer
 "x": integer
 "y": integer
 "active": boolean
 "visible": boolean
static readonly "UNSET_FG_COLOR": integer

constructor(arg0: $ResourceLocation$Type, arg1: integer, arg2: integer, arg3: $Button$OnPress$Type)
constructor(arg0: $ZetaClient$Type, arg1: integer, arg2: integer, arg3: $Button$OnPress$Type)

public "m_87963_"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PencilButton$Type = ($PencilButton);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PencilButton_ = $PencilButton$Type;
}}
declare module "packages/org/violetmoon/zetaimplforge/registry/$ForgeCraftingExtensionsRegistry" {
import {$CraftingExtensionsRegistry, $CraftingExtensionsRegistry$Type} from "packages/org/violetmoon/zeta/registry/$CraftingExtensionsRegistry"
import {$IZetaConditionSerializer, $IZetaConditionSerializer$Type} from "packages/org/violetmoon/zeta/recipe/$IZetaConditionSerializer"
import {$IIngredientSerializer, $IIngredientSerializer$Type} from "packages/net/minecraftforge/common/crafting/$IIngredientSerializer"
import {$Ingredient, $Ingredient$Type} from "packages/net/minecraft/world/item/crafting/$Ingredient"
import {$IZetaIngredientSerializer, $IZetaIngredientSerializer$Type} from "packages/org/violetmoon/zeta/recipe/$IZetaIngredientSerializer"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$IZetaCondition, $IZetaCondition$Type} from "packages/org/violetmoon/zeta/recipe/$IZetaCondition"

export class $ForgeCraftingExtensionsRegistry implements $CraftingExtensionsRegistry {
readonly "toForgeIngredientSerializers": $Map<($IZetaIngredientSerializer<(any)>), ($IIngredientSerializer<(any)>)>

constructor()

public "getID"(arg0: $IZetaIngredientSerializer$Type<(any)>): $ResourceLocation
public "registerIngredientSerializer"<T extends $Ingredient>(arg0: $ResourceLocation$Type, arg1: $IZetaIngredientSerializer$Type<(T)>): $IZetaIngredientSerializer<(T)>
public "registerConditionSerializer"<T extends $IZetaCondition>(arg0: $IZetaConditionSerializer$Type<(T)>): $IZetaConditionSerializer<(T)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ForgeCraftingExtensionsRegistry$Type = ($ForgeCraftingExtensionsRegistry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ForgeCraftingExtensionsRegistry_ = $ForgeCraftingExtensionsRegistry$Type;
}}
declare module "packages/org/violetmoon/quark/addons/oddities/inventory/slot/$BackpackSlot" {
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$CachedItemHandlerSlot, $CachedItemHandlerSlot$Type} from "packages/org/violetmoon/quark/addons/oddities/inventory/slot/$CachedItemHandlerSlot"
import {$IItemHandler, $IItemHandler$Type} from "packages/net/minecraftforge/items/$IItemHandler"

export class $BackpackSlot extends $CachedItemHandlerSlot {
readonly "container": $Container
 "index": integer
 "x": integer
 "y": integer

constructor(arg0: $IItemHandler$Type, arg1: integer, arg2: integer, arg3: integer)

public "mayPlace"(arg0: $ItemStack$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BackpackSlot$Type = ($BackpackSlot);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BackpackSlot_ = $BackpackSlot$Type;
}}
declare module "packages/org/violetmoon/zetaimplforge/mixin/mixins/client/$AccessorItemColors" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Holder$Reference, $Holder$Reference$Type} from "packages/net/minecraft/core/$Holder$Reference"
import {$ItemColor, $ItemColor$Type} from "packages/net/minecraft/client/color/item/$ItemColor"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export interface $AccessorItemColors {

 "zeta$getItemColors"(): $Map<($Holder$Reference<($Item)>), ($ItemColor)>

(): $Map<($Holder$Reference<($Item)>), ($ItemColor)>
}

export namespace $AccessorItemColors {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AccessorItemColors$Type = ($AccessorItemColors);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AccessorItemColors_ = $AccessorItemColors$Type;
}}
declare module "packages/org/violetmoon/quark/integration/lootr/$LootrVariantTrappedChestBlockEntity" {
import {$LithiumStackList, $LithiumStackList$Type} from "packages/me/jellysquid/mods/lithium/common/hopper/$LithiumStackList"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$InventoryChangeTracker, $InventoryChangeTracker$Type} from "packages/me/jellysquid/mods/lithium/common/block/entity/inventory_change_tracking/$InventoryChangeTracker"
import {$LootrVariantChestBlockEntity, $LootrVariantChestBlockEntity$Type} from "packages/org/violetmoon/quark/integration/lootr/$LootrVariantChestBlockEntity"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$InventoryChangeListener, $InventoryChangeListener$Type} from "packages/me/jellysquid/mods/lithium/common/block/entity/inventory_change_tracking/$InventoryChangeListener"
import {$LockCode, $LockCode$Type} from "packages/net/minecraft/world/$LockCode"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $LootrVariantTrappedChestBlockEntity extends $LootrVariantChestBlockEntity {
 "openers": $Set<($UUID)>
 "items": $NonNullList<($ItemStack)>
static readonly "LOOT_TABLE_TAG": string
static readonly "LOOT_TABLE_SEED_TAG": string
 "lootTable": $ResourceLocation
 "lootTableSeed": long
 "lockKey": $LockCode
 "blockState": $BlockState

constructor(arg0: $BlockPos$Type, arg1: $BlockState$Type)

public "stopForwardingMajorInventoryChanges"(arg0: $InventoryChangeListener$Type): void
public "emitFirstComparatorAdded"(): void
public "forwardMajorInventoryChanges"(arg0: $InventoryChangeListener$Type): void
public "emitContentModified"(): void
public "emitStackListReplaced"(): void
public "forwardContentChangeOnce"(arg0: $InventoryChangeListener$Type, arg1: $LithiumStackList$Type, arg2: $InventoryChangeTracker$Type): void
public "emitRemoved"(): void
public "setChanged"(): void
public static "stillValidBlockEntity"(arg0: $BlockEntity$Type, arg1: $Player$Type, arg2: integer): boolean
public static "stillValidBlockEntity"(arg0: $BlockEntity$Type, arg1: $Player$Type): boolean
public static "tryClear"(arg0: any): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LootrVariantTrappedChestBlockEntity$Type = ($LootrVariantTrappedChestBlockEntity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LootrVariantTrappedChestBlockEntity_ = $LootrVariantTrappedChestBlockEntity$Type;
}}
declare module "packages/org/violetmoon/quark/addons/oddities/client/model/$BackpackModel" {
import {$LayerDefinition, $LayerDefinition$Type} from "packages/net/minecraft/client/model/geom/builders/$LayerDefinition"

export class $BackpackModel {

constructor()

public static "createBodyLayer"(): $LayerDefinition
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BackpackModel$Type = ($BackpackModel);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BackpackModel_ = $BackpackModel$Type;
}}
declare module "packages/org/violetmoon/quark/content/tweaks/client/render/entity/$DyedItemFrameRenderer" {
import {$EntityRendererProvider$Context, $EntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRendererProvider$Context"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$EntityRenderer, $EntityRenderer$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRenderer"
import {$DyedItemFrame, $DyedItemFrame$Type} from "packages/org/violetmoon/quark/content/tweaks/entity/$DyedItemFrame"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $DyedItemFrameRenderer extends $EntityRenderer<($DyedItemFrame)> {
static readonly "GLOW_FRAME_BRIGHTNESS": integer
static readonly "BRIGHT_MAP_LIGHT_ADJUSTMENT": integer
 "shadowRadius": float

constructor(arg0: $EntityRendererProvider$Context$Type)

public "render"(arg0: $DyedItemFrame$Type, arg1: float, arg2: float, arg3: $PoseStack$Type, arg4: $MultiBufferSource$Type, arg5: integer): void
public "getTextureLocation"(arg0: $DyedItemFrame$Type): $ResourceLocation
public "getRenderOffset"(arg0: $DyedItemFrame$Type, arg1: float): $Vec3
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DyedItemFrameRenderer$Type = ($DyedItemFrameRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DyedItemFrameRenderer_ = $DyedItemFrameRenderer$Type;
}}
declare module "packages/org/violetmoon/zeta/block/$ZetaBlock" {
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$FluidState, $FluidState$Type} from "packages/net/minecraft/world/level/material/$FluidState"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$ToolAction, $ToolAction$Type} from "packages/net/minecraftforge/common/$ToolAction"
import {$IForgeBlock, $IForgeBlock$Type} from "packages/net/minecraftforge/common/extensions/$IForgeBlock"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$CreativeModeTab, $CreativeModeTab$Type} from "packages/net/minecraft/world/item/$CreativeModeTab"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$IZetaBlock, $IZetaBlock$Type} from "packages/org/violetmoon/zeta/block/$IZetaBlock"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$UseOnContext, $UseOnContext$Type} from "packages/net/minecraft/world/item/context/$UseOnContext"
import {$SoundType, $SoundType$Type} from "packages/net/minecraft/world/level/block/$SoundType"
import {$IPlantable, $IPlantable$Type} from "packages/net/minecraftforge/common/$IPlantable"
import {$IZetaBlockExtensions, $IZetaBlockExtensions$Type} from "packages/org/violetmoon/zeta/block/ext/$IZetaBlockExtensions"
import {$ResourceKey, $ResourceKey$Type} from "packages/net/minecraft/resources/$ResourceKey"
import {$ItemLike, $ItemLike$Type} from "packages/net/minecraft/world/level/$ItemLike"
import {$BlockAndTintGetter, $BlockAndTintGetter$Type} from "packages/net/minecraft/world/level/$BlockAndTintGetter"

export class $ZetaBlock extends $Block implements $IZetaBlock, $IZetaBlockExtensions, $IForgeBlock {
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(arg0: string, arg1: $ZetaModule$Type, arg2: $BlockBehaviour$Properties$Type)

public "getModule"(): $ZetaModule
public "canSustainPlant"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type, arg4: $IPlantable$Type): boolean
public "isLadder"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "isConduitFrame"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): boolean
public "doesConditionApply"(): boolean
public "getEnchantPowerBonus"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type): float
public "shouldDisplayFluidOverlay"(arg0: $BlockState$Type, arg1: $BlockAndTintGetter$Type, arg2: $BlockPos$Type, arg3: $FluidState$Type): boolean
public "getToolModifiedState"(arg0: $BlockState$Type, arg1: $UseOnContext$Type, arg2: $ToolAction$Type, arg3: boolean): $BlockState
public "getBeaconColorMultiplier"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): (float)[]
public "makesOpenTrapdoorAboveClimbable"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockState$Type): boolean
public "getSoundType"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): $SoundType
public "isScaffolding"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "getLightEmission"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type): integer
public "isFlammable"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): boolean
public "canStickTo"(arg0: $BlockState$Type, arg1: $BlockState$Type): boolean
public "getFireSpreadSpeed"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "getFlammability"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "isStickyBlock"(arg0: $BlockState$Type): boolean
public "collisionExtendsVertically"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): boolean
public "getBlock"(): $Block
public "getFireSpreadSpeedZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "getFlammabilityZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "setCreativeTab"(arg0: $ResourceKey$Type<($CreativeModeTab$Type)>): $Block
public "setCreativeTab"(arg0: $ResourceKey$Type<($CreativeModeTab$Type)>, arg1: $ItemLike$Type, arg2: boolean): $Block
public "isConduitFrameZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): boolean
public "isLadderZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "isStickyBlockZeta"(arg0: $BlockState$Type): boolean
public "isScaffoldingZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "canStickToZeta"(arg0: $BlockState$Type, arg1: $BlockState$Type): boolean
public "isFlammableZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): boolean
public "getSoundTypeZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): $SoundType
public "makesOpenTrapdoorAboveClimbableZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockState$Type): boolean
public "canSustainPlantZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type, arg4: string): boolean
public "getToolModifiedStateZeta"(arg0: $BlockState$Type, arg1: $UseOnContext$Type, arg2: string, arg3: boolean): $BlockState
public "collisionExtendsVerticallyZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): boolean
public "shouldDisplayFluidOverlayZeta"(arg0: $BlockState$Type, arg1: $BlockAndTintGetter$Type, arg2: $BlockPos$Type, arg3: $FluidState$Type): boolean
public "getEnchantPowerBonusZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type): float
public "getBeaconColorMultiplierZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): (float)[]
public "getLightEmissionZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type): integer
public "isEnabled"(): boolean
public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
get "module"(): $ZetaModule
get "block"(): $Block
set "creativeTab"(value: $ResourceKey$Type<($CreativeModeTab$Type)>)
get "enabled"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZetaBlock$Type = ($ZetaBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZetaBlock_ = $ZetaBlock$Type;
}}
declare module "packages/org/violetmoon/zeta/event/play/entity/player/$ZPlayer" {
import {$IZetaPlayEvent, $IZetaPlayEvent$Type} from "packages/org/violetmoon/zeta/event/bus/$IZetaPlayEvent"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$PlayerGetter, $PlayerGetter$Type} from "packages/org/violetmoon/zeta/event/bus/helpers/$PlayerGetter"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export interface $ZPlayer extends $IZetaPlayEvent, $PlayerGetter {

 "getPlayer"(): $Player
 "getEntity"(): $LivingEntity

(): $Player
}

export namespace $ZPlayer {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZPlayer$Type = ($ZPlayer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZPlayer_ = $ZPlayer$Type;
}}
declare module "packages/org/violetmoon/quark/content/experimental/module/$VillagerRerollingReworkModule" {
import {$Villager, $Villager$Type} from "packages/net/minecraft/world/entity/npc/$Villager"
import {$MerchantOffer, $MerchantOffer$Type} from "packages/net/minecraft/world/item/trading/$MerchantOffer"
import {$AbstractVillager, $AbstractVillager$Type} from "packages/net/minecraft/world/entity/npc/$AbstractVillager"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$MerchantOffers, $MerchantOffers$Type} from "packages/net/minecraft/world/item/trading/$MerchantOffers"
import {$ZLivingConversion$Post, $ZLivingConversion$Post$Type} from "packages/org/violetmoon/zeta/event/play/entity/living/$ZLivingConversion$Post"
import {$ZLivingTick, $ZLivingTick$Type} from "packages/org/violetmoon/zeta/event/play/entity/living/$ZLivingTick"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZConfigChanged, $ZConfigChanged$Type} from "packages/org/violetmoon/zeta/event/load/$ZConfigChanged"

export class $VillagerRerollingReworkModule extends $ZetaModule {
static readonly "TAG_VILLAGER_SEED": string
static readonly "TAG_ITEMS_REROLLED_TODAY": string
static readonly "TAG_TRADE_TIER": string
static "staticEnabled": boolean
static "seedInitialVillagerTrades": boolean
static "chanceToRerollWhenRestocking": double
static "maximumRestocksPerDay": integer
static "rerollOnAnyRestock": boolean
static "rerollEvenIfNotOutOfStock": boolean
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public static "attemptToReroll"(arg0: $Villager$Type): void
public static "attemptToReroll"(arg0: $Villager$Type, arg1: $MerchantOffer$Type): $MerchantOffer
public static "clearRerolls"(arg0: $Villager$Type): void
public static "canUseSeededRandom"(arg0: $LivingEntity$Type): boolean
public "assignSeedIfUnassigned"(arg0: $ZLivingTick$Type): void
public "keepSeedOnConversion"(arg0: $ZLivingConversion$Post$Type): void
public "configChanged"(arg0: $ZConfigChanged$Type): void
public static "shouldUseSeededRandom"(arg0: $LivingEntity$Type, arg1: $MerchantOffers$Type): boolean
public static "seededRandomForVillager"(arg0: $AbstractVillager$Type): $RandomSource
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $VillagerRerollingReworkModule$Type = ($VillagerRerollingReworkModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $VillagerRerollingReworkModule_ = $VillagerRerollingReworkModule$Type;
}}
declare module "packages/org/violetmoon/zeta/mixin/mixins/$AccessorLootTable" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$LootPool, $LootPool$Type} from "packages/net/minecraft/world/level/storage/loot/$LootPool"

export interface $AccessorLootTable {

 "zeta$getPools"(): $List<($LootPool)>

(): $List<($LootPool)>
}

export namespace $AccessorLootTable {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AccessorLootTable$Type = ($AccessorLootTable);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AccessorLootTable_ = $AccessorLootTable$Type;
}}
declare module "packages/org/violetmoon/quark/content/mobs/client/render/entity/$CrabRenderer" {
import {$RenderLayer, $RenderLayer$Type} from "packages/net/minecraft/client/renderer/entity/layers/$RenderLayer"
import {$EntityRendererProvider$Context, $EntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRendererProvider$Context"
import {$Crab, $Crab$Type} from "packages/org/violetmoon/quark/content/mobs/entity/$Crab"
import {$CrabModel, $CrabModel$Type} from "packages/org/violetmoon/quark/content/mobs/client/model/$CrabModel"
import {$List, $List$Type} from "packages/java/util/$List"
import {$EntityModel, $EntityModel$Type} from "packages/net/minecraft/client/model/$EntityModel"
import {$MobRenderer, $MobRenderer$Type} from "packages/net/minecraft/client/renderer/entity/$MobRenderer"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $CrabRenderer extends $MobRenderer<($Crab), ($CrabModel)> {
static readonly "LEASH_RENDER_STEPS": integer
 "model": M
 "layers": $List<($RenderLayer<(T), (M)>)>
 "shadowRadius": float

constructor(arg0: $EntityRendererProvider$Context$Type)

public "getTextureLocation"(arg0: $Crab$Type): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CrabRenderer$Type = ($CrabRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CrabRenderer_ = $CrabRenderer$Type;
}}
declare module "packages/org/violetmoon/zetaimplforge/client/event/play/$ForgeZGatherTooltipComponents" {
import {$TooltipComponent, $TooltipComponent$Type} from "packages/net/minecraft/world/inventory/tooltip/$TooltipComponent"
import {$FormattedText, $FormattedText$Type} from "packages/net/minecraft/network/chat/$FormattedText"
import {$RenderTooltipEvent$GatherComponents, $RenderTooltipEvent$GatherComponents$Type} from "packages/net/minecraftforge/client/event/$RenderTooltipEvent$GatherComponents"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Either, $Either$Type} from "packages/com/mojang/datafixers/util/$Either"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ZGatherTooltipComponents, $ZGatherTooltipComponents$Type} from "packages/org/violetmoon/zeta/client/event/play/$ZGatherTooltipComponents"

export class $ForgeZGatherTooltipComponents extends $Record implements $ZGatherTooltipComponents {

constructor(e: $RenderTooltipEvent$GatherComponents$Type)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "e"(): $RenderTooltipEvent$GatherComponents
public "getTooltipElements"(): $List<($Either<($FormattedText), ($TooltipComponent)>)>
public "setMaxWidth"(arg0: integer): void
public "getScreenWidth"(): integer
public "getScreenHeight"(): integer
public "getMaxWidth"(): integer
public "getItemStack"(): $ItemStack
get "tooltipElements"(): $List<($Either<($FormattedText), ($TooltipComponent)>)>
set "maxWidth"(value: integer)
get "screenWidth"(): integer
get "screenHeight"(): integer
get "maxWidth"(): integer
get "itemStack"(): $ItemStack
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ForgeZGatherTooltipComponents$Type = ($ForgeZGatherTooltipComponents);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ForgeZGatherTooltipComponents_ = $ForgeZGatherTooltipComponents$Type;
}}
declare module "packages/org/violetmoon/quark/content/mobs/module/$ShibaModule" {
import {$EntitySpawnConfig, $EntitySpawnConfig$Type} from "packages/org/violetmoon/zeta/config/type/$EntitySpawnConfig"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$Shiba, $Shiba$Type} from "packages/org/violetmoon/quark/content/mobs/entity/$Shiba"
import {$ZRegister, $ZRegister$Type} from "packages/org/violetmoon/zeta/event/load/$ZRegister"
import {$ZClientSetup, $ZClientSetup$Type} from "packages/org/violetmoon/zeta/client/event/load/$ZClientSetup"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ManualTrigger, $ManualTrigger$Type} from "packages/org/violetmoon/zeta/advancement/$ManualTrigger"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZEntityAttributeCreation, $ZEntityAttributeCreation$Type} from "packages/org/violetmoon/zeta/event/load/$ZEntityAttributeCreation"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $ShibaModule extends $ZetaModule {
static "shibaType": $EntityType<($Shiba)>
static "spawnConfig": $EntitySpawnConfig
static "ignoreAreasWithSkylight": boolean
static "shibaHelpTrigger": $ManualTrigger
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "register"(arg0: $ZRegister$Type): void
public "clientSetup"(arg0: $ZClientSetup$Type): void
public "entityAttrs"(arg0: $ZEntityAttributeCreation$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ShibaModule$Type = ($ShibaModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ShibaModule_ = $ShibaModule$Type;
}}
declare module "packages/org/violetmoon/quark/content/tweaks/client/emote/$CustomEmoteTemplate" {
import {$EmoteTemplate, $EmoteTemplate$Type} from "packages/org/violetmoon/quark/content/tweaks/client/emote/$EmoteTemplate"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Stack, $Stack$Type} from "packages/java/util/$Stack"
import {$Timeline, $Timeline$Type} from "packages/aurelienribon/tweenengine/$Timeline"

export class $CustomEmoteTemplate extends $EmoteTemplate {
readonly "file": string
 "readLines": $List<(string)>
 "usedParts": $List<(integer)>
 "timelineStack": $Stack<($Timeline)>
 "speed": float
 "tier": integer
 "compiled": boolean
 "compiledOnce": boolean

constructor(arg0: string)

public "getName"(): string
get "name"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CustomEmoteTemplate$Type = ($CustomEmoteTemplate);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CustomEmoteTemplate_ = $CustomEmoteTemplate$Type;
}}
declare module "packages/org/violetmoon/quark/content/world/module/$CorundumModule" {
import {$CorundumClusterBlock, $CorundumClusterBlock$Type} from "packages/org/violetmoon/quark/content/world/block/$CorundumClusterBlock"
import {$ZGatherHints, $ZGatherHints$Type} from "packages/org/violetmoon/zeta/event/play/loading/$ZGatherHints"
import {$ZCommonSetup, $ZCommonSetup$Type} from "packages/org/violetmoon/zeta/event/load/$ZCommonSetup"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$UndergroundStyleConfig, $UndergroundStyleConfig$Type} from "packages/org/violetmoon/quark/content/world/undergroundstyle/base/$UndergroundStyleConfig"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ZRegister, $ZRegister$Type} from "packages/org/violetmoon/zeta/event/load/$ZRegister"
import {$CorundumBlock, $CorundumBlock$Type} from "packages/org/violetmoon/quark/content/world/block/$CorundumBlock"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZConfigChanged, $ZConfigChanged$Type} from "packages/org/violetmoon/zeta/event/load/$ZConfigChanged"

export class $CorundumModule extends $ZetaModule {
 "generationSettings": $UndergroundStyleConfig
static "crystalChance": double
static "crystalClusterChance": double
static "crystalClusterOnSidesChance": double
static "doubleCrystalChance": double
static "caveCrystalGrowthChance": integer
static "crystalsCraftRunes": boolean
static "enableCollateralMovement": boolean
static "staticEnabled": boolean
static "crystals": $List<($CorundumBlock)>
static "clusters": $List<($CorundumClusterBlock)>
static readonly "corundumTag": $TagKey<($Block)>
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "register"(arg0: $ZRegister$Type): void
public "setup"(arg0: $ZCommonSetup$Type): void
public "addAdditionalHints"(arg0: $ZGatherHints$Type): void
public "configChanged"(arg0: $ZConfigChanged$Type): void
set "up"(value: $ZCommonSetup$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CorundumModule$Type = ($CorundumModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CorundumModule_ = $CorundumModule$Type;
}}
declare module "packages/org/violetmoon/zeta/block/$ZetaInheritedPaneBlock" {
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$FluidState, $FluidState$Type} from "packages/net/minecraft/world/level/material/$FluidState"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$ToolAction, $ToolAction$Type} from "packages/net/minecraftforge/common/$ToolAction"
import {$IForgeBlock, $IForgeBlock$Type} from "packages/net/minecraftforge/common/extensions/$IForgeBlock"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$ZetaPaneBlock, $ZetaPaneBlock$Type} from "packages/org/violetmoon/zeta/block/$ZetaPaneBlock"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$IZetaBlock, $IZetaBlock$Type} from "packages/org/violetmoon/zeta/block/$IZetaBlock"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$UseOnContext, $UseOnContext$Type} from "packages/net/minecraft/world/item/context/$UseOnContext"
import {$IZetaBlockColorProvider, $IZetaBlockColorProvider$Type} from "packages/org/violetmoon/zeta/registry/$IZetaBlockColorProvider"
import {$SoundType, $SoundType$Type} from "packages/net/minecraft/world/level/block/$SoundType"
import {$IPlantable, $IPlantable$Type} from "packages/net/minecraftforge/common/$IPlantable"
import {$IZetaBlockExtensions, $IZetaBlockExtensions$Type} from "packages/org/violetmoon/zeta/block/ext/$IZetaBlockExtensions"
import {$BlockAndTintGetter, $BlockAndTintGetter$Type} from "packages/net/minecraft/world/level/$BlockAndTintGetter"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $ZetaInheritedPaneBlock extends $ZetaPaneBlock implements $IZetaBlock, $IZetaBlockColorProvider, $IZetaBlockExtensions, $IForgeBlock {
readonly "parent": $IZetaBlock
readonly "module": $ZetaModule
static readonly "NORTH": $BooleanProperty
static readonly "EAST": $BooleanProperty
static readonly "SOUTH": $BooleanProperty
static readonly "WEST": $BooleanProperty
static readonly "WATERLOGGED": $BooleanProperty
static readonly "PROPERTY_BY_DIRECTION": $Map<($Direction), ($BooleanProperty)>
 "collisionShapeByIndex": ($VoxelShape)[]
 "shapeByIndex": ($VoxelShape)[]
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(arg0: $IZetaBlock$Type)
constructor(arg0: $IZetaBlock$Type, arg1: $BlockBehaviour$Properties$Type)
constructor(arg0: $IZetaBlock$Type, arg1: string, arg2: $BlockBehaviour$Properties$Type)

public "isEnabled"(): boolean
public "canSustainPlant"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type, arg4: $IPlantable$Type): boolean
public "isLadder"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "isConduitFrame"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): boolean
public "getEnchantPowerBonus"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type): float
public "shouldDisplayFluidOverlay"(arg0: $BlockState$Type, arg1: $BlockAndTintGetter$Type, arg2: $BlockPos$Type, arg3: $FluidState$Type): boolean
public "getToolModifiedState"(arg0: $BlockState$Type, arg1: $UseOnContext$Type, arg2: $ToolAction$Type, arg3: boolean): $BlockState
public "getBeaconColorMultiplier"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): (float)[]
public "makesOpenTrapdoorAboveClimbable"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockState$Type): boolean
public "getSoundType"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): $SoundType
public "isScaffolding"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "getLightEmission"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type): integer
public "getBlockColorProviderName"(): string
public "getItemColorProviderName"(): string
public "getBeaconColorMultiplierZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): (float)[]
public "isFlammable"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): boolean
public "canStickTo"(arg0: $BlockState$Type, arg1: $BlockState$Type): boolean
public "getFireSpreadSpeed"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "getFlammability"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "isStickyBlock"(arg0: $BlockState$Type): boolean
public "collisionExtendsVertically"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): boolean
public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
get "enabled"(): boolean
get "blockColorProviderName"(): string
get "itemColorProviderName"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZetaInheritedPaneBlock$Type = ($ZetaInheritedPaneBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZetaInheritedPaneBlock_ = $ZetaInheritedPaneBlock$Type;
}}
declare module "packages/org/violetmoon/quark/api/event/$SimpleHarvestEvent" {
import {$ListenerList, $ListenerList$Type} from "packages/net/minecraftforge/eventbus/$ListenerList"
import {$Event, $Event$Type} from "packages/net/minecraftforge/eventbus/api/$Event"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$SimpleHarvestEvent$ActionType, $SimpleHarvestEvent$ActionType$Type} from "packages/org/violetmoon/quark/api/event/$SimpleHarvestEvent$ActionType"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $SimpleHarvestEvent extends $Event {
readonly "blockState": $BlockState
readonly "pos": $BlockPos
readonly "level": $Level
readonly "hand": $InteractionHand
readonly "entity": $Entity

constructor()
constructor(arg0: $BlockState$Type, arg1: $BlockPos$Type, arg2: $Level$Type, arg3: $InteractionHand$Type, arg4: $Entity$Type, arg5: $SimpleHarvestEvent$ActionType$Type)

public "setCanceled"(arg0: boolean): void
public "isCancelable"(): boolean
public "setAction"(arg0: $SimpleHarvestEvent$ActionType$Type): void
public "getAction"(): $SimpleHarvestEvent$ActionType
public "getTargetPos"(): $BlockPos
public "setTargetPos"(arg0: $BlockPos$Type): void
public "getListenerList"(): $ListenerList
public "hasResult"(): boolean
set "canceled"(value: boolean)
get "cancelable"(): boolean
set "action"(value: $SimpleHarvestEvent$ActionType$Type)
get "action"(): $SimpleHarvestEvent$ActionType
get "targetPos"(): $BlockPos
set "targetPos"(value: $BlockPos$Type)
get "listenerList"(): $ListenerList
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SimpleHarvestEvent$Type = ($SimpleHarvestEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SimpleHarvestEvent_ = $SimpleHarvestEvent$Type;
}}
declare module "packages/org/violetmoon/quark/content/building/block/$VariantFurnaceBlock" {
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$BooleanSupplier, $BooleanSupplier$Type} from "packages/java/util/function/$BooleanSupplier"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$FluidState, $FluidState$Type} from "packages/net/minecraft/world/level/material/$FluidState"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$FurnaceBlock, $FurnaceBlock$Type} from "packages/net/minecraft/world/level/block/$FurnaceBlock"
import {$ToolAction, $ToolAction$Type} from "packages/net/minecraftforge/common/$ToolAction"
import {$IForgeBlock, $IForgeBlock$Type} from "packages/net/minecraftforge/common/extensions/$IForgeBlock"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$DirectionProperty, $DirectionProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$DirectionProperty"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$CreativeModeTab, $CreativeModeTab$Type} from "packages/net/minecraft/world/item/$CreativeModeTab"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$IZetaBlock, $IZetaBlock$Type} from "packages/org/violetmoon/zeta/block/$IZetaBlock"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$UseOnContext, $UseOnContext$Type} from "packages/net/minecraft/world/item/context/$UseOnContext"
import {$SoundType, $SoundType$Type} from "packages/net/minecraft/world/level/block/$SoundType"
import {$IPlantable, $IPlantable$Type} from "packages/net/minecraftforge/common/$IPlantable"
import {$IZetaBlockExtensions, $IZetaBlockExtensions$Type} from "packages/org/violetmoon/zeta/block/ext/$IZetaBlockExtensions"
import {$BlockEntityTicker, $BlockEntityTicker$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityTicker"
import {$ResourceKey, $ResourceKey$Type} from "packages/net/minecraft/resources/$ResourceKey"
import {$ItemLike, $ItemLike$Type} from "packages/net/minecraft/world/level/$ItemLike"
import {$BlockAndTintGetter, $BlockAndTintGetter$Type} from "packages/net/minecraft/world/level/$BlockAndTintGetter"

export class $VariantFurnaceBlock extends $FurnaceBlock implements $IZetaBlock, $IZetaBlockExtensions, $IForgeBlock {
static readonly "FACING": $DirectionProperty
static readonly "LIT": $BooleanProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(arg0: string, arg1: $ZetaModule$Type, arg2: $BlockBehaviour$Properties$Type)

public "getModule"(): $ZetaModule
public "getTicker"<T extends $BlockEntity>(arg0: $Level$Type, arg1: $BlockState$Type, arg2: $BlockEntityType$Type<(T)>): $BlockEntityTicker<(T)>
public "canSustainPlant"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type, arg4: $IPlantable$Type): boolean
public "isLadder"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "isConduitFrame"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): boolean
public "doesConditionApply"(): boolean
public "setCondition"(arg0: $BooleanSupplier$Type): $IZetaBlock
public "getEnchantPowerBonus"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type): float
public "shouldDisplayFluidOverlay"(arg0: $BlockState$Type, arg1: $BlockAndTintGetter$Type, arg2: $BlockPos$Type, arg3: $FluidState$Type): boolean
public "getToolModifiedState"(arg0: $BlockState$Type, arg1: $UseOnContext$Type, arg2: $ToolAction$Type, arg3: boolean): $BlockState
public "getBeaconColorMultiplier"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): (float)[]
public "makesOpenTrapdoorAboveClimbable"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockState$Type): boolean
public "getSoundType"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): $SoundType
public "isScaffolding"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "getLightEmission"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type): integer
public "isFlammable"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): boolean
public "canStickTo"(arg0: $BlockState$Type, arg1: $BlockState$Type): boolean
public "getFireSpreadSpeed"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "getFlammability"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "isStickyBlock"(arg0: $BlockState$Type): boolean
public "newBlockEntity"(arg0: $BlockPos$Type, arg1: $BlockState$Type): $BlockEntity
public "collisionExtendsVertically"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): boolean
public "getBlock"(): $Block
public "getFireSpreadSpeedZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "getFlammabilityZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "setCreativeTab"(arg0: $ResourceKey$Type<($CreativeModeTab$Type)>): $Block
public "setCreativeTab"(arg0: $ResourceKey$Type<($CreativeModeTab$Type)>, arg1: $ItemLike$Type, arg2: boolean): $Block
public "isConduitFrameZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): boolean
public "isLadderZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "isStickyBlockZeta"(arg0: $BlockState$Type): boolean
public "isScaffoldingZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "canStickToZeta"(arg0: $BlockState$Type, arg1: $BlockState$Type): boolean
public "isFlammableZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): boolean
public "getSoundTypeZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): $SoundType
public "makesOpenTrapdoorAboveClimbableZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockState$Type): boolean
public "canSustainPlantZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type, arg4: string): boolean
public "getToolModifiedStateZeta"(arg0: $BlockState$Type, arg1: $UseOnContext$Type, arg2: string, arg3: boolean): $BlockState
public "collisionExtendsVerticallyZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): boolean
public "shouldDisplayFluidOverlayZeta"(arg0: $BlockState$Type, arg1: $BlockAndTintGetter$Type, arg2: $BlockPos$Type, arg3: $FluidState$Type): boolean
public "getEnchantPowerBonusZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type): float
public "getBeaconColorMultiplierZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): (float)[]
public "getLightEmissionZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type): integer
public "isEnabled"(): boolean
public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
get "module"(): $ZetaModule
set "condition"(value: $BooleanSupplier$Type)
get "block"(): $Block
set "creativeTab"(value: $ResourceKey$Type<($CreativeModeTab$Type)>)
get "enabled"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $VariantFurnaceBlock$Type = ($VariantFurnaceBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $VariantFurnaceBlock_ = $VariantFurnaceBlock$Type;
}}
declare module "packages/org/violetmoon/zeta/event/load/$ZLoadComplete" {
import {$IZetaLoadEvent, $IZetaLoadEvent$Type} from "packages/org/violetmoon/zeta/event/bus/$IZetaLoadEvent"
import {$Runnable, $Runnable$Type} from "packages/java/lang/$Runnable"

export interface $ZLoadComplete extends $IZetaLoadEvent {

 "enqueueWork"(arg0: $Runnable$Type): void

(arg0: $Runnable$Type): void
}

export namespace $ZLoadComplete {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZLoadComplete$Type = ($ZLoadComplete);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZLoadComplete_ = $ZLoadComplete$Type;
}}
declare module "packages/org/violetmoon/zetaimplforge/module/$ModFileScanDataModuleFinder" {
import {$ModuleFinder, $ModuleFinder$Type} from "packages/org/violetmoon/zeta/module/$ModuleFinder"
import {$ModFileScanData, $ModFileScanData$Type} from "packages/net/minecraftforge/forgespi/language/$ModFileScanData"

export class $ModFileScanDataModuleFinder implements $ModuleFinder {

constructor(arg0: $ModFileScanData$Type)
constructor(arg0: string)

public "and"(arg0: $ModuleFinder$Type): $ModuleFinder
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModFileScanDataModuleFinder$Type = ($ModFileScanDataModuleFinder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModFileScanDataModuleFinder_ = $ModFileScanDataModuleFinder$Type;
}}
declare module "packages/org/violetmoon/zeta/network/message/$C2SUpdateFlag" {
import {$IZetaMessage, $IZetaMessage$Type} from "packages/org/violetmoon/zeta/network/$IZetaMessage"
import {$IZetaNetworkEventContext, $IZetaNetworkEventContext$Type} from "packages/org/violetmoon/zeta/network/$IZetaNetworkEventContext"
import {$BitSet, $BitSet$Type} from "packages/java/util/$BitSet"

export class $C2SUpdateFlag implements $IZetaMessage {
 "flags": $BitSet
 "expectedLength": integer
 "expectedHash": integer

constructor()

public "receive"(arg0: $IZetaNetworkEventContext$Type): boolean
public static "createPacket"(): $C2SUpdateFlag
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $C2SUpdateFlag$Type = ($C2SUpdateFlag);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $C2SUpdateFlag_ = $C2SUpdateFlag$Type;
}}
declare module "packages/org/violetmoon/quark/integration/jei/$InfluenceEntry" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$IRecipeCategoryExtension, $IRecipeCategoryExtension$Type} from "packages/mezz/jei/api/recipe/category/extensions/$IRecipeCategoryExtension"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Influence, $Influence$Type} from "packages/org/violetmoon/quark/addons/oddities/util/$Influence"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$InputConstants$Key, $InputConstants$Key$Type} from "packages/com/mojang/blaze3d/platform/$InputConstants$Key"

export class $InfluenceEntry implements $IRecipeCategoryExtension {

constructor(arg0: $Block$Type, arg1: $Influence$Type)

public "hasAny"(): boolean
public "getDampenBook"(): $ItemStack
public "getBoostBook"(): $ItemStack
public "getAssociatedBooks"(): $List<($ItemStack)>
public "getCandleStack"(): $ItemStack
public "drawInfo"(arg0: integer, arg1: integer, arg2: $GuiGraphics$Type, arg3: double, arg4: double): void
public "handleInput"(arg0: double, arg1: double, arg2: $InputConstants$Key$Type): boolean
public "getTooltipStrings"(arg0: double, arg1: double): $List<($Component)>
get "dampenBook"(): $ItemStack
get "boostBook"(): $ItemStack
get "associatedBooks"(): $List<($ItemStack)>
get "candleStack"(): $ItemStack
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $InfluenceEntry$Type = ($InfluenceEntry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $InfluenceEntry_ = $InfluenceEntry$Type;
}}
declare module "packages/org/violetmoon/zetaimplforge/client/event/play/$ForgeZRenderContainerScreen" {
import {$ContainerScreenEvent$Render, $ContainerScreenEvent$Render$Type} from "packages/net/minecraftforge/client/event/$ContainerScreenEvent$Render"
import {$ZRenderContainerScreen, $ZRenderContainerScreen$Type} from "packages/org/violetmoon/zeta/client/event/play/$ZRenderContainerScreen"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$AbstractContainerScreen, $AbstractContainerScreen$Type} from "packages/net/minecraft/client/gui/screens/inventory/$AbstractContainerScreen"

export class $ForgeZRenderContainerScreen implements $ZRenderContainerScreen {

constructor(arg0: $ContainerScreenEvent$Render$Type)

public "getMouseX"(): integer
public "getMouseY"(): integer
public "getGuiGraphics"(): $GuiGraphics
public "getContainerScreen"(): $AbstractContainerScreen<(any)>
get "mouseX"(): integer
get "mouseY"(): integer
get "guiGraphics"(): $GuiGraphics
get "containerScreen"(): $AbstractContainerScreen<(any)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ForgeZRenderContainerScreen$Type = ($ForgeZRenderContainerScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ForgeZRenderContainerScreen_ = $ForgeZRenderContainerScreen$Type;
}}
declare module "packages/org/violetmoon/quark/content/tweaks/module/$DiamondRepairModule" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Multimap, $Multimap$Type} from "packages/com/google/common/collect/$Multimap"
import {$ZGatherHints, $ZGatherHints$Type} from "packages/org/violetmoon/zeta/event/play/loading/$ZGatherHints"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZConfigChanged, $ZConfigChanged$Type} from "packages/org/violetmoon/zeta/event/load/$ZConfigChanged"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $DiamondRepairModule extends $ZetaModule {
static "repairChangesList": $List<(string)>
static "unrepairableItemsList": $List<(string)>
static "repairChanges": $Multimap<($Item), ($Item)>
static "unrepairableItems": $List<($Item)>
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "addAdditionalHints"(arg0: $ZGatherHints$Type): void
public "configChanged"(arg0: $ZConfigChanged$Type): void
public static "isValidRepairItem"(arg0: boolean, arg1: $Item$Type, arg2: $ItemStack$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DiamondRepairModule$Type = ($DiamondRepairModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DiamondRepairModule_ = $DiamondRepairModule$Type;
}}
declare module "packages/org/violetmoon/zeta/event/play/entity/living/$ZLivingFall" {
import {$IZetaPlayEvent, $IZetaPlayEvent$Type} from "packages/org/violetmoon/zeta/event/bus/$IZetaPlayEvent"
import {$LivingGetter, $LivingGetter$Type} from "packages/org/violetmoon/zeta/event/bus/helpers/$LivingGetter"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export interface $ZLivingFall extends $IZetaPlayEvent, $LivingGetter {

 "getDistance"(): float
 "setDistance"(arg0: float): void
 "getEntity"(): $LivingEntity
}

export namespace $ZLivingFall {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZLivingFall$Type = ($ZLivingFall);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZLivingFall_ = $ZLivingFall$Type;
}}
declare module "packages/org/violetmoon/zetaimplforge/client/event/load/$ForgeZKeyMapping" {
import {$KeyMapping, $KeyMapping$Type} from "packages/net/minecraft/client/$KeyMapping"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$ZKeyMapping, $ZKeyMapping$Type} from "packages/org/violetmoon/zeta/client/event/load/$ZKeyMapping"
import {$InputConstants$Type, $InputConstants$Type$Type} from "packages/com/mojang/blaze3d/platform/$InputConstants$Type"
import {$RegisterKeyMappingsEvent, $RegisterKeyMappingsEvent$Type} from "packages/net/minecraftforge/client/event/$RegisterKeyMappingsEvent"
import {$InputConstants$Key, $InputConstants$Key$Type} from "packages/com/mojang/blaze3d/platform/$InputConstants$Key"

export class $ForgeZKeyMapping extends $Record implements $ZKeyMapping {

constructor(e: $RegisterKeyMappingsEvent$Type)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "e"(): $RegisterKeyMappingsEvent
public "register"(arg0: $KeyMapping$Type): $KeyMapping
public "init"(arg0: string, arg1: string, arg2: string, arg3: integer, arg4: $Predicate$Type<($InputConstants$Key$Type)>): $KeyMapping
public "init"(arg0: string, arg1: string, arg2: string, arg3: $Predicate$Type<($InputConstants$Key$Type)>): $KeyMapping
public "init"(arg0: string, arg1: string, arg2: string, arg3: integer): $KeyMapping
public "init"(arg0: string, arg1: string, arg2: string): $KeyMapping
public "getKeyCode"(arg0: string, arg1: $InputConstants$Type$Type): integer
public "getKeyPrefix"(arg0: $InputConstants$Type$Type): string
public "initMouse"(arg0: string, arg1: integer, arg2: string): $KeyMapping
public "initMouse"(arg0: string, arg1: integer, arg2: string, arg3: integer, arg4: $Predicate$Type<($InputConstants$Key$Type)>): $KeyMapping
public "initMouse"(arg0: string, arg1: integer, arg2: string, arg3: $Predicate$Type<($InputConstants$Key$Type)>): $KeyMapping
public "initMouse"(arg0: string, arg1: integer, arg2: string, arg3: integer): $KeyMapping
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ForgeZKeyMapping$Type = ($ForgeZKeyMapping);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ForgeZKeyMapping_ = $ForgeZKeyMapping$Type;
}}
declare module "packages/org/violetmoon/zeta/client/event/load/$ZRegisterReloadListeners" {
import {$PreparableReloadListener, $PreparableReloadListener$Type} from "packages/net/minecraft/server/packs/resources/$PreparableReloadListener"
import {$IZetaLoadEvent, $IZetaLoadEvent$Type} from "packages/org/violetmoon/zeta/event/bus/$IZetaLoadEvent"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Record, $Record$Type} from "packages/java/lang/$Record"

export class $ZRegisterReloadListeners extends $Record implements $IZetaLoadEvent, $Consumer<($PreparableReloadListener)> {

constructor(manager: $Consumer$Type<($PreparableReloadListener$Type)>)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "accept"(arg0: $PreparableReloadListener$Type): void
public "manager"(): $Consumer<($PreparableReloadListener)>
public "andThen"(arg0: $Consumer$Type<(any)>): $Consumer<($PreparableReloadListener)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZRegisterReloadListeners$Type = ($ZRegisterReloadListeners);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZRegisterReloadListeners_ = $ZRegisterReloadListeners$Type;
}}
declare module "packages/org/violetmoon/quark/content/building/block/$WoodPostBlock" {
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$Fluid, $Fluid$Type} from "packages/net/minecraft/world/level/material/$Fluid"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$WoodPostBlock$PostSideType, $WoodPostBlock$PostSideType$Type} from "packages/org/violetmoon/quark/content/building/block/$WoodPostBlock$PostSideType"
import {$SimpleWaterloggedBlock, $SimpleWaterloggedBlock$Type} from "packages/net/minecraft/world/level/block/$SimpleWaterloggedBlock"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$FluidState, $FluidState$Type} from "packages/net/minecraft/world/level/material/$FluidState"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$ZetaBlock, $ZetaBlock$Type} from "packages/org/violetmoon/zeta/block/$ZetaBlock"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$CollisionContext, $CollisionContext$Type} from "packages/net/minecraft/world/phys/shapes/$CollisionContext"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$EnumProperty, $EnumProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$EnumProperty"
import {$SoundType, $SoundType$Type} from "packages/net/minecraft/world/level/block/$SoundType"
import {$Direction$Axis, $Direction$Axis$Type} from "packages/net/minecraft/core/$Direction$Axis"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"

export class $WoodPostBlock extends $ZetaBlock implements $SimpleWaterloggedBlock {
static readonly "WATERLOGGED": $BooleanProperty
static readonly "AXIS": $EnumProperty<($Direction$Axis)>
static readonly "SIDES": ($EnumProperty<($WoodPostBlock$PostSideType)>)[]
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(arg0: $ZetaModule$Type, arg1: $Block$Type, arg2: string, arg3: $SoundType$Type)

public "propagatesSkylightDown"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type): boolean
public "getStateForPlacement"(arg0: $BlockPlaceContext$Type): $BlockState
public "updateShape"(arg0: $BlockState$Type, arg1: $Direction$Type, arg2: $BlockState$Type, arg3: $LevelAccessor$Type, arg4: $BlockPos$Type, arg5: $BlockPos$Type): $BlockState
public "getFluidState"(arg0: $BlockState$Type): $FluidState
public "getShape"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $CollisionContext$Type): $VoxelShape
public "getPickupSound"(): $Optional<($SoundEvent)>
public "canPlaceLiquid"(arg0: $BlockGetter$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: $Fluid$Type): boolean
public "placeLiquid"(arg0: $LevelAccessor$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: $FluidState$Type): boolean
public "pickupBlock"(arg0: $LevelAccessor$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type): $ItemStack
public "getPickupSound"(arg0: $BlockState$Type): $Optional<($SoundEvent)>
public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
get "pickupSound"(): $Optional<($SoundEvent)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WoodPostBlock$Type = ($WoodPostBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WoodPostBlock_ = $WoodPostBlock$Type;
}}
declare module "packages/org/violetmoon/zeta/annotation/$ConditionalMixin" {
import {$Annotation, $Annotation$Type} from "packages/java/lang/annotation/$Annotation"
import {$Class, $Class$Type} from "packages/java/lang/$Class"

export interface $ConditionalMixin extends $Annotation {

 "value"(): (string)[]
 "applyIfPresent"(): boolean
 "equals"(arg0: any): boolean
 "toString"(): string
 "hashCode"(): integer
 "annotationType"(): $Class<(any)>
}

export namespace $ConditionalMixin {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ConditionalMixin$Type = ($ConditionalMixin);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ConditionalMixin_ = $ConditionalMixin$Type;
}}
declare module "packages/org/violetmoon/zeta/registry/$CreativeTabManager" {
import {$CreativeModeTab, $CreativeModeTab$Type} from "packages/net/minecraft/world/item/$CreativeModeTab"
import {$ResourceKey, $ResourceKey$Type} from "packages/net/minecraft/resources/$ResourceKey"
import {$ItemLike, $ItemLike$Type} from "packages/net/minecraft/world/level/$ItemLike"
import {$BuildCreativeModeTabContentsEvent, $BuildCreativeModeTabContentsEvent$Type} from "packages/net/minecraftforge/event/$BuildCreativeModeTabContentsEvent"

export class $CreativeTabManager {

constructor()

public static "endDaisyChain"(): void
public static "daisyChain"(): void
public static "addToCreativeTab"(arg0: $ResourceKey$Type<($CreativeModeTab$Type)>, arg1: $ItemLike$Type): void
public static "buildContents"(arg0: $BuildCreativeModeTabContentsEvent$Type): void
public static "addToCreativeTabNextTo"(arg0: $ResourceKey$Type<($CreativeModeTab$Type)>, arg1: $ItemLike$Type, arg2: $ItemLike$Type, arg3: boolean): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CreativeTabManager$Type = ($CreativeTabManager);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CreativeTabManager_ = $CreativeTabManager$Type;
}}
declare module "packages/org/violetmoon/zetaimplforge/event/play/entity/living/$ForgeZLivingFall" {
import {$ZLivingFall, $ZLivingFall$Type} from "packages/org/violetmoon/zeta/event/play/entity/living/$ZLivingFall"
import {$LivingFallEvent, $LivingFallEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingFallEvent"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $ForgeZLivingFall implements $ZLivingFall {

constructor(arg0: $LivingFallEvent$Type)

public "getDistance"(): float
public "setDistance"(arg0: float): void
public "getEntity"(): $LivingEntity
get "distance"(): float
set "distance"(value: float)
get "entity"(): $LivingEntity
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ForgeZLivingFall$Type = ($ForgeZLivingFall);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ForgeZLivingFall_ = $ForgeZLivingFall$Type;
}}
declare module "packages/org/violetmoon/quark/content/automation/block/be/$CrafterBlockEntity" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$WorldlyContainer, $WorldlyContainer$Type} from "packages/net/minecraft/world/$WorldlyContainer"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$List, $List$Type} from "packages/java/util/$List"
import {$AbstractContainerMenu, $AbstractContainerMenu$Type} from "packages/net/minecraft/world/inventory/$AbstractContainerMenu"
import {$LockCode, $LockCode$Type} from "packages/net/minecraft/world/$LockCode"
import {$CraftingContainer, $CraftingContainer$Type} from "packages/net/minecraft/world/inventory/$CraftingContainer"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$StackedContents, $StackedContents$Type} from "packages/net/minecraft/world/entity/player/$StackedContents"
import {$ContainerData, $ContainerData$Type} from "packages/net/minecraft/world/inventory/$ContainerData"
import {$ResultContainer, $ResultContainer$Type} from "packages/net/minecraft/world/inventory/$ResultContainer"
import {$BaseContainerBlockEntity, $BaseContainerBlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BaseContainerBlockEntity"

export class $CrafterBlockEntity extends $BaseContainerBlockEntity implements $CraftingContainer, $WorldlyContainer {
readonly "stacks": $NonNullList<($ItemStack)>
readonly "result": $ResultContainer
readonly "blocked": (boolean)[]
readonly "delegate": $ContainerData
 "lockKey": $LockCode
 "blockState": $BlockState

constructor(arg0: $BlockPos$Type, arg1: $BlockState$Type)

public "update"(): void
public static "tick"(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: $CrafterBlockEntity$Type): void
public static "getResult"(arg0: $Level$Type, arg1: $CraftingContainer$Type): $ItemStack
public "getComparatorOutput"(): integer
public "getItems"(): $List<($ItemStack)>
public "getItem"(arg0: integer): $ItemStack
public "getContainerSize"(): integer
public "removeItemNoUpdate"(arg0: integer): $ItemStack
public "canTakeItemThroughFace"(arg0: integer, arg1: $ItemStack$Type, arg2: $Direction$Type): boolean
public "getSlotsForFace"(arg0: $Direction$Type): (integer)[]
public "canPlaceItemThroughFace"(arg0: integer, arg1: $ItemStack$Type, arg2: $Direction$Type): boolean
public "hasSpace"(arg0: $Container$Type, arg1: $Direction$Type, arg2: $ItemStack$Type): boolean
public "load"(arg0: $CompoundTag$Type): void
public "removeItem"(arg0: integer, arg1: integer): $ItemStack
public "clearContent"(): void
public "isEmpty"(): boolean
public "stillValid"(arg0: $Player$Type): boolean
public "canPlaceItem"(arg0: integer, arg1: $ItemStack$Type): boolean
public "getHeight"(): integer
public "getWidth"(): integer
public "craft"(): void
public "fillStackedContents"(arg0: $StackedContents$Type): void
public "setItem"(arg0: integer, arg1: $ItemStack$Type): void
public "takeItems"(): void
public "getMenu"(): $AbstractContainerMenu
public "setChanged"(): void
public static "stillValidBlockEntity"(arg0: $BlockEntity$Type, arg1: $Player$Type, arg2: integer): boolean
public static "stillValidBlockEntity"(arg0: $BlockEntity$Type, arg1: $Player$Type): boolean
public static "tryClear"(arg0: any): void
get "comparatorOutput"(): integer
get "items"(): $List<($ItemStack)>
get "containerSize"(): integer
get "empty"(): boolean
get "height"(): integer
get "width"(): integer
get "menu"(): $AbstractContainerMenu
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CrafterBlockEntity$Type = ($CrafterBlockEntity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CrafterBlockEntity_ = $CrafterBlockEntity$Type;
}}
declare module "packages/org/violetmoon/quark/content/mobs/client/model/$StonelingModel" {
import {$VertexConsumer, $VertexConsumer$Type} from "packages/com/mojang/blaze3d/vertex/$VertexConsumer"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$EntityModel, $EntityModel$Type} from "packages/net/minecraft/client/model/$EntityModel"
import {$Stoneling, $Stoneling$Type} from "packages/org/violetmoon/quark/content/mobs/entity/$Stoneling"
import {$ModelPart, $ModelPart$Type} from "packages/net/minecraft/client/model/geom/$ModelPart"
import {$LayerDefinition, $LayerDefinition$Type} from "packages/net/minecraft/client/model/geom/builders/$LayerDefinition"

export class $StonelingModel extends $EntityModel<($Stoneling)> {
 "attackTime": float
 "riding": boolean
 "young": boolean

constructor(arg0: $ModelPart$Type)

public "setRotationAngle"(arg0: $ModelPart$Type, arg1: float, arg2: float, arg3: float): void
public "setupAnim"(arg0: $Stoneling$Type, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float): void
public static "createBodyLayer"(): $LayerDefinition
public "renderToBuffer"(arg0: $PoseStack$Type, arg1: $VertexConsumer$Type, arg2: integer, arg3: integer, arg4: float, arg5: float, arg6: float, arg7: float): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $StonelingModel$Type = ($StonelingModel);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $StonelingModel_ = $StonelingModel$Type;
}}
declare module "packages/org/violetmoon/quark/content/tweaks/module/$PigLittersModule" {
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$Animal, $Animal$Type} from "packages/net/minecraft/world/entity/animal/$Animal"
import {$ZEntityJoinLevel, $ZEntityJoinLevel$Type} from "packages/org/violetmoon/zeta/event/play/entity/$ZEntityJoinLevel"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ZBabyEntitySpawn$Lowest, $ZBabyEntitySpawn$Lowest$Type} from "packages/org/violetmoon/zeta/event/play/entity/living/$ZBabyEntitySpawn$Lowest"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ZLivingTick, $ZLivingTick$Type} from "packages/org/violetmoon/zeta/event/play/entity/living/$ZLivingTick"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $PigLittersModule extends $ZetaModule {
static "minPigLitterSize": integer
static "maxPigLitterSize": integer
static "pigsEatGoldenCarrots": boolean
static "minGoldenCarrotBoost": integer
static "maxGoldenCarrotBoost": integer
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "onEntityUpdate"(arg0: $ZLivingTick$Type): void
public "onPigBreed"(arg0: $ZBabyEntitySpawn$Lowest$Type): void
public "onPigAppear"(arg0: $ZEntityJoinLevel$Type): void
public static "canEat"(arg0: $ItemStack$Type): boolean
public static "onEat"(arg0: $Animal$Type, arg1: $ItemStack$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PigLittersModule$Type = ($PigLittersModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PigLittersModule_ = $PigLittersModule$Type;
}}
declare module "packages/org/violetmoon/quark/content/building/module/$MoreBrickTypesModule" {
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$ZRegister, $ZRegister$Type} from "packages/org/violetmoon/zeta/event/load/$ZRegister"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $MoreBrickTypesModule extends $ZetaModule {
 "enableBlueNetherBricks": boolean
 "enableSandstoneBricks": boolean
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "register"(arg0: $ZRegister$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MoreBrickTypesModule$Type = ($MoreBrickTypesModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MoreBrickTypesModule_ = $MoreBrickTypesModule$Type;
}}
declare module "packages/org/violetmoon/zeta/event/play/loading/$ZWandererTrades" {
import {$IZetaPlayEvent, $IZetaPlayEvent$Type} from "packages/org/violetmoon/zeta/event/bus/$IZetaPlayEvent"
import {$List, $List$Type} from "packages/java/util/$List"
import {$VillagerTrades$ItemListing, $VillagerTrades$ItemListing$Type} from "packages/net/minecraft/world/entity/npc/$VillagerTrades$ItemListing"

export interface $ZWandererTrades extends $IZetaPlayEvent {

 "getGenericTrades"(): $List<($VillagerTrades$ItemListing)>
 "getRareTrades"(): $List<($VillagerTrades$ItemListing)>
}

export namespace $ZWandererTrades {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZWandererTrades$Type = ($ZWandererTrades);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZWandererTrades_ = $ZWandererTrades$Type;
}}
declare module "packages/org/violetmoon/zeta/block/$ZetaSlabBlock" {
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$SlabType, $SlabType$Type} from "packages/net/minecraft/world/level/block/state/properties/$SlabType"
import {$FluidState, $FluidState$Type} from "packages/net/minecraft/world/level/material/$FluidState"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$ToolAction, $ToolAction$Type} from "packages/net/minecraftforge/common/$ToolAction"
import {$IForgeBlock, $IForgeBlock$Type} from "packages/net/minecraftforge/common/extensions/$IForgeBlock"
import {$SlabBlock, $SlabBlock$Type} from "packages/net/minecraft/world/level/block/$SlabBlock"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$CreativeModeTab, $CreativeModeTab$Type} from "packages/net/minecraft/world/item/$CreativeModeTab"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$IZetaBlock, $IZetaBlock$Type} from "packages/org/violetmoon/zeta/block/$IZetaBlock"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$UseOnContext, $UseOnContext$Type} from "packages/net/minecraft/world/item/context/$UseOnContext"
import {$EnumProperty, $EnumProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$EnumProperty"
import {$IZetaBlockColorProvider, $IZetaBlockColorProvider$Type} from "packages/org/violetmoon/zeta/registry/$IZetaBlockColorProvider"
import {$SoundType, $SoundType$Type} from "packages/net/minecraft/world/level/block/$SoundType"
import {$IPlantable, $IPlantable$Type} from "packages/net/minecraftforge/common/$IPlantable"
import {$IZetaBlockExtensions, $IZetaBlockExtensions$Type} from "packages/org/violetmoon/zeta/block/ext/$IZetaBlockExtensions"
import {$ResourceKey, $ResourceKey$Type} from "packages/net/minecraft/resources/$ResourceKey"
import {$ItemLike, $ItemLike$Type} from "packages/net/minecraft/world/level/$ItemLike"
import {$BlockAndTintGetter, $BlockAndTintGetter$Type} from "packages/net/minecraft/world/level/$BlockAndTintGetter"

export class $ZetaSlabBlock extends $SlabBlock implements $IZetaBlock, $IZetaBlockColorProvider, $IZetaBlockExtensions, $IForgeBlock {
readonly "parent": $IZetaBlock
static readonly "TYPE": $EnumProperty<($SlabType)>
static readonly "WATERLOGGED": $BooleanProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(arg0: $IZetaBlock$Type, arg1: $ResourceKey$Type<($CreativeModeTab$Type)>)

public "getModule"(): $ZetaModule
public "isFlammableZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): boolean
public "canSustainPlant"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type, arg4: $IPlantable$Type): boolean
public "isLadder"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "isConduitFrame"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): boolean
public "doesConditionApply"(): boolean
public "getEnchantPowerBonus"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type): float
public "shouldDisplayFluidOverlay"(arg0: $BlockState$Type, arg1: $BlockAndTintGetter$Type, arg2: $BlockPos$Type, arg3: $FluidState$Type): boolean
public "getToolModifiedState"(arg0: $BlockState$Type, arg1: $UseOnContext$Type, arg2: $ToolAction$Type, arg3: boolean): $BlockState
public "getBeaconColorMultiplier"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): (float)[]
public "makesOpenTrapdoorAboveClimbable"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockState$Type): boolean
public "getSoundType"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): $SoundType
public "isScaffolding"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "getLightEmission"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type): integer
public "getBlockColorProviderName"(): string
public "getItemColorProviderName"(): string
public "getBeaconColorMultiplierZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): (float)[]
public "getFlammabilityZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "isFlammable"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): boolean
public "canStickTo"(arg0: $BlockState$Type, arg1: $BlockState$Type): boolean
public "getFireSpreadSpeed"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "getFlammability"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "isStickyBlock"(arg0: $BlockState$Type): boolean
public "collisionExtendsVertically"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): boolean
public "getBlock"(): $Block
public "getFireSpreadSpeedZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "setCreativeTab"(arg0: $ResourceKey$Type<($CreativeModeTab$Type)>): $Block
public "setCreativeTab"(arg0: $ResourceKey$Type<($CreativeModeTab$Type)>, arg1: $ItemLike$Type, arg2: boolean): $Block
public "isConduitFrameZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): boolean
public "isLadderZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "isStickyBlockZeta"(arg0: $BlockState$Type): boolean
public "isScaffoldingZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "canStickToZeta"(arg0: $BlockState$Type, arg1: $BlockState$Type): boolean
public "getSoundTypeZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): $SoundType
public "makesOpenTrapdoorAboveClimbableZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockState$Type): boolean
public "canSustainPlantZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type, arg4: string): boolean
public "getToolModifiedStateZeta"(arg0: $BlockState$Type, arg1: $UseOnContext$Type, arg2: string, arg3: boolean): $BlockState
public "collisionExtendsVerticallyZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): boolean
public "shouldDisplayFluidOverlayZeta"(arg0: $BlockState$Type, arg1: $BlockAndTintGetter$Type, arg2: $BlockPos$Type, arg3: $FluidState$Type): boolean
public "getEnchantPowerBonusZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type): float
public "getLightEmissionZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type): integer
public "isEnabled"(): boolean
public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
get "module"(): $ZetaModule
get "blockColorProviderName"(): string
get "itemColorProviderName"(): string
get "block"(): $Block
set "creativeTab"(value: $ResourceKey$Type<($CreativeModeTab$Type)>)
get "enabled"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZetaSlabBlock$Type = ($ZetaSlabBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZetaSlabBlock_ = $ZetaSlabBlock$Type;
}}
declare module "packages/org/violetmoon/quark/base/util/$IfFlagGoal" {
import {$Goal, $Goal$Type} from "packages/net/minecraft/world/entity/ai/goal/$Goal"
import {$BooleanSupplier, $BooleanSupplier$Type} from "packages/java/util/function/$BooleanSupplier"
import {$EnumSet, $EnumSet$Type} from "packages/java/util/$EnumSet"
import {$Goal$Flag, $Goal$Flag$Type} from "packages/net/minecraft/world/entity/ai/goal/$Goal$Flag"

export class $IfFlagGoal extends $Goal {

constructor(arg0: $Goal$Type, arg1: $BooleanSupplier$Type)

public "canUse"(): boolean
public "canContinueToUse"(): boolean
public "isInterruptable"(): boolean
public "start"(): void
public "stop"(): void
public "getFlags"(): $EnumSet<($Goal$Flag)>
public "tick"(): void
get "interruptable"(): boolean
get "flags"(): $EnumSet<($Goal$Flag)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IfFlagGoal$Type = ($IfFlagGoal);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IfFlagGoal_ = $IfFlagGoal$Type;
}}
declare module "packages/org/violetmoon/quark/addons/oddities/inventory/$BackpackMenu" {
import {$InventoryMenu, $InventoryMenu$Type} from "packages/net/minecraft/world/inventory/$InventoryMenu"
import {$ClickType, $ClickType$Type} from "packages/net/minecraft/world/inventory/$ClickType"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MenuType, $MenuType$Type} from "packages/net/minecraft/world/inventory/$MenuType"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"

export class $BackpackMenu extends $InventoryMenu {
static readonly "CONTAINER_ID": integer
static readonly "RESULT_SLOT": integer
static readonly "CRAFT_SLOT_START": integer
static readonly "CRAFT_SLOT_END": integer
static readonly "ARMOR_SLOT_START": integer
static readonly "ARMOR_SLOT_END": integer
static readonly "INV_SLOT_START": integer
static readonly "INV_SLOT_END": integer
static readonly "USE_ROW_SLOT_START": integer
static readonly "USE_ROW_SLOT_END": integer
static readonly "SHIELD_SLOT": integer
static readonly "BLOCK_ATLAS": $ResourceLocation
static readonly "EMPTY_ARMOR_SLOT_HELMET": $ResourceLocation
static readonly "EMPTY_ARMOR_SLOT_CHESTPLATE": $ResourceLocation
static readonly "EMPTY_ARMOR_SLOT_LEGGINGS": $ResourceLocation
static readonly "EMPTY_ARMOR_SLOT_BOOTS": $ResourceLocation
static readonly "EMPTY_ARMOR_SLOT_SHIELD": $ResourceLocation
readonly "active": boolean
readonly "owner": $Player
static readonly "SLOT_CLICKED_OUTSIDE": integer
static readonly "QUICKCRAFT_TYPE_CHARITABLE": integer
static readonly "QUICKCRAFT_TYPE_GREEDY": integer
static readonly "QUICKCRAFT_TYPE_CLONE": integer
static readonly "QUICKCRAFT_HEADER_START": integer
static readonly "QUICKCRAFT_HEADER_CONTINUE": integer
static readonly "QUICKCRAFT_HEADER_END": integer
static readonly "CARRIED_SLOT_SIZE": integer
readonly "lastSlots": $NonNullList<($ItemStack)>
readonly "slots": $NonNullList<($Slot)>
 "remoteSlots": $NonNullList<($ItemStack)>
 "containerId": integer

constructor(arg0: integer, arg1: $Player$Type)

public static "fromNetwork"(arg0: integer, arg1: $Inventory$Type, arg2: $FriendlyByteBuf$Type): $BackpackMenu
public static "saveCraftingInventory"(arg0: $Player$Type): void
public "getType"(): $MenuType<(any)>
public "clicked"(arg0: integer, arg1: integer, arg2: $ClickType$Type, arg3: $Player$Type): void
public "quickMoveStack"(arg0: $Player$Type, arg1: integer): $ItemStack
public "m_38903_"(arg0: $ItemStack$Type, arg1: integer, arg2: integer, arg3: boolean): boolean
get "type"(): $MenuType<(any)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BackpackMenu$Type = ($BackpackMenu);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BackpackMenu_ = $BackpackMenu$Type;
}}
declare module "packages/org/violetmoon/zeta/event/play/entity/player/$ZPlayerInteract$RightClickItem" {
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$ZPlayerInteract, $ZPlayerInteract$Type} from "packages/org/violetmoon/zeta/event/play/entity/player/$ZPlayerInteract"

export interface $ZPlayerInteract$RightClickItem extends $ZPlayerInteract {

 "getItemStack"(): $ItemStack
 "getLevel"(): $Level
 "getHand"(): $InteractionHand
 "getEntity"(): $Player
 "getPos"(): $BlockPos
 "setCancellationResult"(arg0: $InteractionResult$Type): void
 "cancel"(): void
 "setCanceled"(arg0: boolean): void
 "isCanceled"(): boolean
}

export namespace $ZPlayerInteract$RightClickItem {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZPlayerInteract$RightClickItem$Type = ($ZPlayerInteract$RightClickItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZPlayerInteract$RightClickItem_ = $ZPlayerInteract$RightClickItem$Type;
}}
declare module "packages/org/violetmoon/quark/base/handler/$ContributorRewardHandler" {
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$ZCommonSetup, $ZCommonSetup$Type} from "packages/org/violetmoon/zeta/event/load/$ZCommonSetup"
import {$ZPlayer$LoggedIn, $ZPlayer$LoggedIn$Type} from "packages/org/violetmoon/zeta/event/play/entity/player/$ZPlayer$LoggedIn"

export class $ContributorRewardHandler {
static "localPatronTier": integer
static "featuredPatron": string

constructor()

public static "init"(arg0: $ZCommonSetup$Type): void
public static "init"(): void
public static "onPlayerJoin"(arg0: $ZPlayer$LoggedIn$Type): void
public static "getTier"(arg0: $Player$Type): integer
public static "getTier"(arg0: string): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ContributorRewardHandler$Type = ($ContributorRewardHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ContributorRewardHandler_ = $ContributorRewardHandler$Type;
}}
declare module "packages/org/violetmoon/quark/content/world/module/$FallenLogsModule" {
import {$ZCommonSetup, $ZCommonSetup$Type} from "packages/org/violetmoon/zeta/event/load/$ZCommonSetup"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$DimensionConfig, $DimensionConfig$Type} from "packages/org/violetmoon/zeta/config/type/$DimensionConfig"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Biome, $Biome$Type} from "packages/net/minecraft/world/level/biome/$Biome"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZConfigChanged, $ZConfigChanged$Type} from "packages/org/violetmoon/zeta/event/load/$ZConfigChanged"

export class $FallenLogsModule extends $ZetaModule {
static "dimensions": $DimensionConfig
static "useHollowLogs": boolean
static "rarity": integer
static "sparseBiomeRarity": integer
static "biomeTags": $List<(string)>
static "blocksPerTag": $Map<($TagKey<($Biome)>), ($Block)>
static "reducedLogsTag": $TagKey<($Biome)>
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "setup"(arg0: $ZCommonSetup$Type): void
public "configChanged"(arg0: $ZConfigChanged$Type): void
set "up"(value: $ZCommonSetup$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FallenLogsModule$Type = ($FallenLogsModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FallenLogsModule_ = $FallenLogsModule$Type;
}}
declare module "packages/org/violetmoon/quark/base/config/$QuarkGeneralConfig" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$QuarkGeneralConfig$ChestOffsets, $QuarkGeneralConfig$ChestOffsets$Type} from "packages/org/violetmoon/quark/base/config/$QuarkGeneralConfig$ChestOffsets"

export class $QuarkGeneralConfig {
static readonly "INSTANCE": $QuarkGeneralConfig
static "enableQButton": boolean
static "qButtonOnRight": boolean
static "disableQMenuEffects": boolean
static "advancementVisibilityDepth": integer
static "shulkerBoxes": $List<(string)>
static "interpretShulkerBoxLikeBlocks": boolean
static "printScreenClassnames": boolean
static "terrablenderAddRegion": boolean
static "terrablenderRegionWeight": integer
static "terrablenderModifyVanillaAnyway": boolean
static "enableOnboarding": boolean
static "chestButtonSlotTarget": integer
static "generateProgrammerArt": boolean
static "chestButtonOffsets": $QuarkGeneralConfig$ChestOffsets


public static "isScreenAllowed"(arg0: any): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $QuarkGeneralConfig$Type = ($QuarkGeneralConfig);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $QuarkGeneralConfig_ = $QuarkGeneralConfig$Type;
}}
declare module "packages/org/violetmoon/quark/content/experimental/item/$HammerItem" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$UseOnContext, $UseOnContext$Type} from "packages/net/minecraft/world/item/context/$UseOnContext"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$ZetaItem, $ZetaItem$Type} from "packages/org/violetmoon/zeta/item/$ZetaItem"

export class $HammerItem extends $ZetaItem {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $ZetaModule$Type)

public "useOn"(arg0: $UseOnContext$Type): $InteractionResult
public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $HammerItem$Type = ($HammerItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $HammerItem_ = $HammerItem$Type;
}}
declare module "packages/org/violetmoon/quark/addons/oddities/block/be/$AbstractEnchantingTableBlockEntity" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$ClientGamePacketListener, $ClientGamePacketListener$Type} from "packages/net/minecraft/network/protocol/game/$ClientGamePacketListener"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$Packet, $Packet$Type} from "packages/net/minecraft/network/protocol/$Packet"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$SimpleInventoryBlockEntity, $SimpleInventoryBlockEntity$Type} from "packages/org/violetmoon/zeta/util/$SimpleInventoryBlockEntity"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Nameable, $Nameable$Type} from "packages/net/minecraft/world/$Nameable"

export class $AbstractEnchantingTableBlockEntity extends $SimpleInventoryBlockEntity implements $Nameable {
 "tickCount": integer
 "pageFlip": float
 "pageFlipPrev": float
 "flipT": float
 "flipA": float
 "bookSpread": float
 "bookSpreadPrev": float
 "bookRotation": float
 "bookRotationPrev": float
 "tRot": float
 "blockState": $BlockState

constructor(arg0: $BlockEntityType$Type<(any)>, arg1: $BlockPos$Type, arg2: $BlockState$Type)

public "sync"(): void
public "tick"(): void
public "getName"(): $Component
public "getContainerSize"(): integer
public "isAutomationEnabled"(): boolean
public "hasCustomName"(): boolean
public "inventoryChanged"(arg0: integer): void
public "setCustomName"(arg0: $Component$Type): void
public "load"(arg0: $CompoundTag$Type): void
public "dropItem"(arg0: integer): void
public "getUpdatePacket"(): $Packet<($ClientGamePacketListener)>
public "getDisplayName"(): $Component
public "getCustomName"(): $Component
public "setChanged"(): void
public static "stillValidBlockEntity"(arg0: $BlockEntity$Type, arg1: $Player$Type, arg2: integer): boolean
public static "stillValidBlockEntity"(arg0: $BlockEntity$Type, arg1: $Player$Type): boolean
public static "tryClear"(arg0: any): void
get "name"(): $Component
get "containerSize"(): integer
get "automationEnabled"(): boolean
set "customName"(value: $Component$Type)
get "updatePacket"(): $Packet<($ClientGamePacketListener)>
get "displayName"(): $Component
get "customName"(): $Component
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AbstractEnchantingTableBlockEntity$Type = ($AbstractEnchantingTableBlockEntity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AbstractEnchantingTableBlockEntity_ = $AbstractEnchantingTableBlockEntity$Type;
}}
declare module "packages/org/violetmoon/zetaimplforge/client/event/play/$ForgeZHighlightBlock" {
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$Camera, $Camera$Type} from "packages/net/minecraft/client/$Camera"
import {$ZHighlightBlock, $ZHighlightBlock$Type} from "packages/org/violetmoon/zeta/client/event/play/$ZHighlightBlock"
import {$RenderHighlightEvent$Block, $RenderHighlightEvent$Block$Type} from "packages/net/minecraftforge/client/event/$RenderHighlightEvent$Block"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"

export class $ForgeZHighlightBlock extends $Record implements $ZHighlightBlock {

constructor(e: $RenderHighlightEvent$Block$Type)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "e"(): $RenderHighlightEvent$Block
public "setCanceled"(arg0: boolean): void
public "isCanceled"(): boolean
public "getPoseStack"(): $PoseStack
public "getMultiBufferSource"(): $MultiBufferSource
public "getCamera"(): $Camera
public "cancel"(): void
set "canceled"(value: boolean)
get "canceled"(): boolean
get "poseStack"(): $PoseStack
get "multiBufferSource"(): $MultiBufferSource
get "camera"(): $Camera
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ForgeZHighlightBlock$Type = ($ForgeZHighlightBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ForgeZHighlightBlock_ = $ForgeZHighlightBlock$Type;
}}
declare module "packages/org/violetmoon/quark/content/tweaks/module/$DyeableItemFramesModule" {
import {$ZRightClickBlock, $ZRightClickBlock$Type} from "packages/org/violetmoon/zeta/event/play/entity/player/$ZRightClickBlock"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$DyedItemFrame, $DyedItemFrame$Type} from "packages/org/violetmoon/quark/content/tweaks/entity/$DyedItemFrame"
import {$ZRegister, $ZRegister$Type} from "packages/org/violetmoon/zeta/event/load/$ZRegister"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $DyeableItemFramesModule extends $ZetaModule {
static "entityType": $EntityType<($DyedItemFrame)>
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "register"(arg0: $ZRegister$Type): void
public "onUse"(arg0: $ZRightClickBlock$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DyeableItemFramesModule$Type = ($DyeableItemFramesModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DyeableItemFramesModule_ = $DyeableItemFramesModule$Type;
}}
declare module "packages/org/violetmoon/quark/content/tweaks/module/$PetalsOnWaterModule" {
import {$ZRightClickBlock, $ZRightClickBlock$Type} from "packages/org/violetmoon/zeta/event/play/entity/player/$ZRightClickBlock"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$ZRegister, $ZRegister$Type} from "packages/org/violetmoon/zeta/event/load/$ZRegister"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ZRightClickItem, $ZRightClickItem$Type} from "packages/org/violetmoon/zeta/event/play/entity/player/$ZRightClickItem"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $PetalsOnWaterModule extends $ZetaModule {
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "register"(arg0: $ZRegister$Type): void
public "onUseOnBlock"(arg0: $ZRightClickBlock$Type): void
public "onUseOnAir"(arg0: $ZRightClickItem$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PetalsOnWaterModule$Type = ($PetalsOnWaterModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PetalsOnWaterModule_ = $PetalsOnWaterModule$Type;
}}
declare module "packages/org/violetmoon/quark/content/mobs/ai/$ActWaryGoal" {
import {$BooleanSupplier, $BooleanSupplier$Type} from "packages/java/util/function/$BooleanSupplier"
import {$WaterAvoidingRandomStrollGoal, $WaterAvoidingRandomStrollGoal$Type} from "packages/net/minecraft/world/entity/ai/goal/$WaterAvoidingRandomStrollGoal"
import {$Stoneling, $Stoneling$Type} from "packages/org/violetmoon/quark/content/mobs/entity/$Stoneling"

export class $ActWaryGoal extends $WaterAvoidingRandomStrollGoal {
static readonly "PROBABILITY": float
static readonly "DEFAULT_INTERVAL": integer

constructor(arg0: $Stoneling$Type, arg1: double, arg2: double, arg3: $BooleanSupplier$Type)

public "isStartled"(): boolean
public "startle"(): void
public "canUse"(): boolean
public "canContinueToUse"(): boolean
public "stop"(): void
public "tick"(): void
get "startled"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ActWaryGoal$Type = ($ActWaryGoal);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ActWaryGoal_ = $ActWaryGoal$Type;
}}
declare module "packages/org/violetmoon/zeta/event/play/entity/living/$ZMobSpawnEvent" {
import {$IZetaPlayEvent, $IZetaPlayEvent$Type} from "packages/org/violetmoon/zeta/event/bus/$IZetaPlayEvent"
import {$Mob, $Mob$Type} from "packages/net/minecraft/world/entity/$Mob"
import {$ZResult, $ZResult$Type} from "packages/org/violetmoon/zeta/event/bus/$ZResult"
import {$Resultable, $Resultable$Type} from "packages/org/violetmoon/zeta/event/bus/$Resultable"
import {$ServerLevelAccessor, $ServerLevelAccessor$Type} from "packages/net/minecraft/world/level/$ServerLevelAccessor"

export interface $ZMobSpawnEvent extends $IZetaPlayEvent, $Resultable {

 "getLevel"(): $ServerLevelAccessor
 "getY"(): double
 "getZ"(): double
 "getX"(): double
 "getEntity"(): $Mob
 "setResult"(arg0: $ZResult$Type): void
 "getResult"(): $ZResult
}

export namespace $ZMobSpawnEvent {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZMobSpawnEvent$Type = ($ZMobSpawnEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZMobSpawnEvent_ = $ZMobSpawnEvent$Type;
}}
declare module "packages/org/violetmoon/zeta/client/event/play/$ZGatherTooltipComponents" {
import {$TooltipComponent, $TooltipComponent$Type} from "packages/net/minecraft/world/inventory/tooltip/$TooltipComponent"
import {$IZetaPlayEvent, $IZetaPlayEvent$Type} from "packages/org/violetmoon/zeta/event/bus/$IZetaPlayEvent"
import {$FormattedText, $FormattedText$Type} from "packages/net/minecraft/network/chat/$FormattedText"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Either, $Either$Type} from "packages/com/mojang/datafixers/util/$Either"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export interface $ZGatherTooltipComponents extends $IZetaPlayEvent {

 "getTooltipElements"(): $List<($Either<($FormattedText), ($TooltipComponent)>)>
 "setMaxWidth"(arg0: integer): void
 "getScreenWidth"(): integer
 "getScreenHeight"(): integer
 "getMaxWidth"(): integer
 "getItemStack"(): $ItemStack
}

export namespace $ZGatherTooltipComponents {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZGatherTooltipComponents$Type = ($ZGatherTooltipComponents);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZGatherTooltipComponents_ = $ZGatherTooltipComponents$Type;
}}
declare module "packages/org/violetmoon/zeta/registry/$RenderLayerRegistry$Layer" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $RenderLayerRegistry$Layer extends $Enum<($RenderLayerRegistry$Layer)> {
static readonly "SOLID": $RenderLayerRegistry$Layer
static readonly "CUTOUT": $RenderLayerRegistry$Layer
static readonly "CUTOUT_MIPPED": $RenderLayerRegistry$Layer
static readonly "TRANSLUCENT": $RenderLayerRegistry$Layer


public static "values"(): ($RenderLayerRegistry$Layer)[]
public static "valueOf"(arg0: string): $RenderLayerRegistry$Layer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RenderLayerRegistry$Layer$Type = (("translucent") | ("solid") | ("cutout") | ("cutout_mipped")) | ($RenderLayerRegistry$Layer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RenderLayerRegistry$Layer_ = $RenderLayerRegistry$Layer$Type;
}}
declare module "packages/org/violetmoon/quark/content/client/module/$ElytraIndicatorModule" {
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $ElytraIndicatorModule extends $ZetaModule {
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "getArmorLimit"(arg0: integer): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ElytraIndicatorModule$Type = ($ElytraIndicatorModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ElytraIndicatorModule_ = $ElytraIndicatorModule$Type;
}}
declare module "packages/org/violetmoon/quark/api/$IPistonCallback" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $IPistonCallback {

 "onPistonMovementFinished"(): void
 "onPistonMovementStarted"(): void

(): void
}

export namespace $IPistonCallback {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IPistonCallback$Type = ($IPistonCallback);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IPistonCallback_ = $IPistonCallback$Type;
}}
declare module "packages/org/violetmoon/quark/content/management/module/$EasyTransferingModule" {
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $EasyTransferingModule extends $ZetaModule {
static "shiftLocked": boolean
static "enableShiftLock": boolean
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EasyTransferingModule$Type = ($EasyTransferingModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EasyTransferingModule_ = $EasyTransferingModule$Type;
}}
declare module "packages/org/violetmoon/quark/content/mobs/client/model/$ForgottenHatModel" {
import {$LayerDefinition, $LayerDefinition$Type} from "packages/net/minecraft/client/model/geom/builders/$LayerDefinition"

export class $ForgottenHatModel {

constructor()

public static "createBodyLayer"(): $LayerDefinition
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ForgottenHatModel$Type = ($ForgottenHatModel);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ForgottenHatModel_ = $ForgottenHatModel$Type;
}}
declare module "packages/org/violetmoon/zeta/block/$ZetaFlammablePillarBlock" {
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$ZetaPillarBlock, $ZetaPillarBlock$Type} from "packages/org/violetmoon/zeta/block/$ZetaPillarBlock"
import {$EnumProperty, $EnumProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$EnumProperty"
import {$Direction$Axis, $Direction$Axis$Type} from "packages/net/minecraft/core/$Direction$Axis"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $ZetaFlammablePillarBlock extends $ZetaPillarBlock {
static readonly "AXIS": $EnumProperty<($Direction$Axis)>
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(arg0: string, arg1: $ZetaModule$Type, arg2: integer, arg3: $BlockBehaviour$Properties$Type)

public "isFlammableZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): boolean
public "getFlammabilityZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZetaFlammablePillarBlock$Type = ($ZetaFlammablePillarBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZetaFlammablePillarBlock_ = $ZetaFlammablePillarBlock$Type;
}}
declare module "packages/org/violetmoon/zeta/client/config/definition/$ClientDefinitionExt" {
import {$AbstractWidget, $AbstractWidget$Type} from "packages/net/minecraft/client/gui/components/$AbstractWidget"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$ChangeSet, $ChangeSet$Type} from "packages/org/violetmoon/zeta/config/$ChangeSet"
import {$Definition, $Definition$Type} from "packages/org/violetmoon/zeta/config/$Definition"
import {$ZetaClient, $ZetaClient$Type} from "packages/org/violetmoon/zeta/client/$ZetaClient"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"

export interface $ClientDefinitionExt<T extends $Definition> {

 "truncate"(arg0: string): string
 "addWidgets"(arg0: $ZetaClient$Type, arg1: $Screen$Type, arg2: $ChangeSet$Type, arg3: T, arg4: $Consumer$Type<($AbstractWidget$Type)>): void
 "getSubtitle"(arg0: $ChangeSet$Type, arg1: T): string
}

export namespace $ClientDefinitionExt {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientDefinitionExt$Type<T> = ($ClientDefinitionExt<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientDefinitionExt_<T> = $ClientDefinitionExt$Type<(T)>;
}}
declare module "packages/org/violetmoon/quark/content/building/module/$HedgesModule" {
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$ZCommonSetup, $ZCommonSetup$Type} from "packages/org/violetmoon/zeta/event/load/$ZCommonSetup"
import {$ZRegister, $ZRegister$Type} from "packages/org/violetmoon/zeta/event/load/$ZRegister"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$ZRegister$Post, $ZRegister$Post$Type} from "packages/org/violetmoon/zeta/event/load/$ZRegister$Post"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $HedgesModule extends $ZetaModule {
static "hedgesTag": $TagKey<($Block)>
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "register"(arg0: $ZRegister$Type): void
public "setup"(arg0: $ZCommonSetup$Type): void
public "postRegister"(arg0: $ZRegister$Post$Type): void
set "up"(value: $ZCommonSetup$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $HedgesModule$Type = ($HedgesModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $HedgesModule_ = $HedgesModule$Type;
}}
declare module "packages/org/violetmoon/quark/base/client/render/$QuarkBoatRenderer" {
import {$EntityRendererProvider$Context, $EntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRendererProvider$Context"
import {$QuarkBoatRenderer$BoatModelTuple, $QuarkBoatRenderer$BoatModelTuple$Type} from "packages/org/violetmoon/quark/base/client/render/$QuarkBoatRenderer$BoatModelTuple"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$EntityRenderer, $EntityRenderer$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRenderer"
import {$Boat, $Boat$Type} from "packages/net/minecraft/world/entity/vehicle/$Boat"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $QuarkBoatRenderer extends $EntityRenderer<($Boat)> {
 "shadowRadius": float

constructor(arg0: $EntityRendererProvider$Context$Type, arg1: boolean)

public "render"(arg0: $Boat$Type, arg1: float, arg2: float, arg3: $PoseStack$Type, arg4: $MultiBufferSource$Type, arg5: integer): void
public "getModelWithLocation"(arg0: $Boat$Type): $QuarkBoatRenderer$BoatModelTuple
/**
 * 
 * @deprecated
 */
public "getTextureLocation"(arg0: $Boat$Type): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $QuarkBoatRenderer$Type = ($QuarkBoatRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $QuarkBoatRenderer_ = $QuarkBoatRenderer$Type;
}}
declare module "packages/org/violetmoon/quark/integration/lootr/$LootrVariantChestBlockEntity" {
import {$LithiumStackList, $LithiumStackList$Type} from "packages/me/jellysquid/mods/lithium/common/hopper/$LithiumStackList"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$LootrChestBlockEntity, $LootrChestBlockEntity$Type} from "packages/noobanidus/mods/lootr/block/entities/$LootrChestBlockEntity"
import {$InventoryChangeTracker, $InventoryChangeTracker$Type} from "packages/me/jellysquid/mods/lithium/common/block/entity/inventory_change_tracking/$InventoryChangeTracker"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$InventoryChangeListener, $InventoryChangeListener$Type} from "packages/me/jellysquid/mods/lithium/common/block/entity/inventory_change_tracking/$InventoryChangeListener"
import {$LockCode, $LockCode$Type} from "packages/net/minecraft/world/$LockCode"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$AABB, $AABB$Type} from "packages/net/minecraft/world/phys/$AABB"

export class $LootrVariantChestBlockEntity extends $LootrChestBlockEntity {
 "openers": $Set<($UUID)>
 "items": $NonNullList<($ItemStack)>
static readonly "LOOT_TABLE_TAG": string
static readonly "LOOT_TABLE_SEED_TAG": string
 "lootTable": $ResourceLocation
 "lootTableSeed": long
 "lockKey": $LockCode
 "blockState": $BlockState

constructor(arg0: $BlockEntityType$Type<(any)>, arg1: $BlockPos$Type, arg2: $BlockState$Type)
constructor(arg0: $BlockPos$Type, arg1: $BlockState$Type)

public "getRenderBoundingBox"(): $AABB
public "stopForwardingMajorInventoryChanges"(arg0: $InventoryChangeListener$Type): void
public "emitFirstComparatorAdded"(): void
public "forwardMajorInventoryChanges"(arg0: $InventoryChangeListener$Type): void
public "emitContentModified"(): void
public "emitStackListReplaced"(): void
public "forwardContentChangeOnce"(arg0: $InventoryChangeListener$Type, arg1: $LithiumStackList$Type, arg2: $InventoryChangeTracker$Type): void
public "emitRemoved"(): void
public "setChanged"(): void
public static "stillValidBlockEntity"(arg0: $BlockEntity$Type, arg1: $Player$Type, arg2: integer): boolean
public static "stillValidBlockEntity"(arg0: $BlockEntity$Type, arg1: $Player$Type): boolean
public static "tryClear"(arg0: any): void
get "renderBoundingBox"(): $AABB
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LootrVariantChestBlockEntity$Type = ($LootrVariantChestBlockEntity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LootrVariantChestBlockEntity_ = $LootrVariantChestBlockEntity$Type;
}}
declare module "packages/org/violetmoon/quark/integration/terrablender/$AbstractUndergroundBiomeHandler$UndergroundBiomeDesc" {
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$Biome, $Biome$Type} from "packages/net/minecraft/world/level/biome/$Biome"
import {$Climate$ParameterPoint, $Climate$ParameterPoint$Type} from "packages/net/minecraft/world/level/biome/$Climate$ParameterPoint"
import {$ResourceKey, $ResourceKey$Type} from "packages/net/minecraft/resources/$ResourceKey"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $AbstractUndergroundBiomeHandler$UndergroundBiomeDesc extends $Record {

constructor(module: $ZetaModule$Type, id: $ResourceLocation$Type, climateParameterPoint: $Climate$ParameterPoint$Type)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "module"(): $ZetaModule
public "id"(): $ResourceLocation
public "resourceKey"(): $ResourceKey<($Biome)>
public "climateParameterPoint"(): $Climate$ParameterPoint
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AbstractUndergroundBiomeHandler$UndergroundBiomeDesc$Type = ($AbstractUndergroundBiomeHandler$UndergroundBiomeDesc);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AbstractUndergroundBiomeHandler$UndergroundBiomeDesc_ = $AbstractUndergroundBiomeHandler$UndergroundBiomeDesc$Type;
}}
declare module "packages/org/violetmoon/quark/base/item/boat/$QuarkBoatDispenseItemBehavior" {
import {$BlockSource, $BlockSource$Type} from "packages/net/minecraft/core/$BlockSource"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$DefaultDispenseItemBehavior, $DefaultDispenseItemBehavior$Type} from "packages/net/minecraft/core/dispenser/$DefaultDispenseItemBehavior"

export class $QuarkBoatDispenseItemBehavior extends $DefaultDispenseItemBehavior {

constructor(arg0: string, arg1: boolean)

public "m_7498_"(arg0: $BlockSource$Type, arg1: $ItemStack$Type): $ItemStack
public static "bootStrap"(): void
public static "setEntityPokingOutOfBlock"(arg0: $BlockSource$Type, arg1: $Entity$Type, arg2: $Direction$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $QuarkBoatDispenseItemBehavior$Type = ($QuarkBoatDispenseItemBehavior);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $QuarkBoatDispenseItemBehavior_ = $QuarkBoatDispenseItemBehavior$Type;
}}
declare module "packages/org/violetmoon/quark/base/util/$TriFunction" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $TriFunction<R, T, U, V> {

 "apply"(arg0: T, arg1: U, arg2: V): R

(arg0: T, arg1: U, arg2: V): R
}

export namespace $TriFunction {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TriFunction$Type<R, T, U, V> = ($TriFunction<(R), (T), (U), (V)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TriFunction_<R, T, U, V> = $TriFunction$Type<(R), (T), (U), (V)>;
}}
declare module "packages/org/violetmoon/zetaimplforge/event/play/entity/living/$ForgeZLivingDrops" {
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$ZLivingDrops, $ZLivingDrops$Type} from "packages/org/violetmoon/zeta/event/play/entity/living/$ZLivingDrops"
import {$LivingDropsEvent, $LivingDropsEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingDropsEvent"
import {$ItemEntity, $ItemEntity$Type} from "packages/net/minecraft/world/entity/item/$ItemEntity"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $ForgeZLivingDrops implements $ZLivingDrops {

constructor(arg0: $LivingDropsEvent$Type)

public "getSource"(): $DamageSource
public "isRecentlyHit"(): boolean
public "setCanceled"(arg0: boolean): void
public "isCanceled"(): boolean
public "getDrops"(): $Collection<($ItemEntity)>
public "getLootingLevel"(): integer
public "getEntity"(): $LivingEntity
public "cancel"(): void
get "source"(): $DamageSource
get "recentlyHit"(): boolean
set "canceled"(value: boolean)
get "canceled"(): boolean
get "drops"(): $Collection<($ItemEntity)>
get "lootingLevel"(): integer
get "entity"(): $LivingEntity
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ForgeZLivingDrops$Type = ($ForgeZLivingDrops);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ForgeZLivingDrops_ = $ForgeZLivingDrops$Type;
}}
declare module "packages/org/violetmoon/quark/content/automation/block/$FeedingTroughBlock" {
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$EntityBlock, $EntityBlock$Type} from "packages/net/minecraft/world/level/block/$EntityBlock"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$ZetaBlock, $ZetaBlock$Type} from "packages/org/violetmoon/zeta/block/$ZetaBlock"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$CollisionContext, $CollisionContext$Type} from "packages/net/minecraft/world/phys/shapes/$CollisionContext"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$SoundType, $SoundType$Type} from "packages/net/minecraft/world/level/block/$SoundType"
import {$MenuProvider, $MenuProvider$Type} from "packages/net/minecraft/world/$MenuProvider"
import {$BlockEntityTicker, $BlockEntityTicker$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityTicker"
import {$GameEventListener, $GameEventListener$Type} from "packages/net/minecraft/world/level/gameevent/$GameEventListener"

export class $FeedingTroughBlock extends $ZetaBlock implements $EntityBlock {
static readonly "FULL": $BooleanProperty
static readonly "CUBOID_SHAPE": $VoxelShape
static readonly "EMPTY_SHAPE": $VoxelShape
static readonly "FULL_SHAPE": $VoxelShape
static readonly "ANIMAL_SHAPE": $VoxelShape
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(arg0: string, arg1: $ZetaModule$Type, arg2: $BlockBehaviour$Properties$Type)

public "getSoundType"(arg0: $BlockState$Type): $SoundType
public "fallOn"(arg0: $Level$Type, arg1: $BlockState$Type, arg2: $BlockPos$Type, arg3: $Entity$Type, arg4: float): void
public "triggerEvent"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type, arg3: integer, arg4: integer): boolean
public "use"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type, arg3: $Player$Type, arg4: $InteractionHand$Type, arg5: $BlockHitResult$Type): $InteractionResult
public "hasAnalogOutputSignal"(arg0: $BlockState$Type): boolean
public "onRemove"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type, arg3: $BlockState$Type, arg4: boolean): void
public "getMenuProvider"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type): $MenuProvider
public "getInteractionShape"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type): $VoxelShape
public "getCollisionShape"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $CollisionContext$Type): $VoxelShape
public "getAnalogOutputSignal"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type): integer
public "getShape"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $CollisionContext$Type): $VoxelShape
public "newBlockEntity"(arg0: $BlockPos$Type, arg1: $BlockState$Type): $BlockEntity
public "getTicker"<T extends $BlockEntity>(arg0: $Level$Type, arg1: $BlockState$Type, arg2: $BlockEntityType$Type<(T)>): $BlockEntityTicker<(T)>
public "getListener"<T extends $BlockEntity>(arg0: $ServerLevel$Type, arg1: T): $GameEventListener
public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FeedingTroughBlock$Type = ($FeedingTroughBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FeedingTroughBlock_ = $FeedingTroughBlock$Type;
}}
declare module "packages/org/violetmoon/zeta/world/generator/$Generator" {
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$BooleanSupplier, $BooleanSupplier$Type} from "packages/java/util/function/$BooleanSupplier"
import {$GenerationStep$Decoration, $GenerationStep$Decoration$Type} from "packages/net/minecraft/world/level/levelgen/$GenerationStep$Decoration"
import {$ChunkGenerator, $ChunkGenerator$Type} from "packages/net/minecraft/world/level/chunk/$ChunkGenerator"
import {$WorldgenRandom, $WorldgenRandom$Type} from "packages/net/minecraft/world/level/levelgen/$WorldgenRandom"
import {$Holder, $Holder$Type} from "packages/net/minecraft/core/$Holder"
import {$DimensionConfig, $DimensionConfig$Type} from "packages/org/violetmoon/zeta/config/type/$DimensionConfig"
import {$WorldGenRegion, $WorldGenRegion$Type} from "packages/net/minecraft/server/level/$WorldGenRegion"
import {$Biome, $Biome$Type} from "packages/net/minecraft/world/level/biome/$Biome"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$ServerLevelAccessor, $ServerLevelAccessor$Type} from "packages/net/minecraft/world/level/$ServerLevelAccessor"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $Generator {
readonly "dimConfig": $DimensionConfig

constructor(arg0: $DimensionConfig$Type)
constructor(arg0: $DimensionConfig$Type, arg1: $BooleanSupplier$Type)

public "generate"(arg0: integer, arg1: long, arg2: $GenerationStep$Decoration$Type, arg3: $WorldGenRegion$Type, arg4: $ChunkGenerator$Type, arg5: $WorldgenRandom$Type, arg6: $BlockPos$Type): integer
public "getBiome"(arg0: $LevelAccessor$Type, arg1: $BlockPos$Type, arg2: boolean): $Holder<($Biome)>
public "generateChunk"(arg0: $WorldGenRegion$Type, arg1: $ChunkGenerator$Type, arg2: $RandomSource$Type, arg3: $BlockPos$Type): void
public "canGenerate"(arg0: $ServerLevelAccessor$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Generator$Type = ($Generator);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Generator_ = $Generator$Type;
}}
declare module "packages/org/violetmoon/quark/content/building/entity/$GlassItemFrame" {
import {$ItemFrame, $ItemFrame$Type} from "packages/net/minecraft/world/entity/decoration/$ItemFrame"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$GlassItemFrame$SignAttachment, $GlassItemFrame$SignAttachment$Type} from "packages/org/violetmoon/quark/content/building/entity/$GlassItemFrame$SignAttachment"
import {$Packet, $Packet$Type} from "packages/net/minecraft/network/protocol/$Packet"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$EntityDataAccessor, $EntityDataAccessor$Type} from "packages/net/minecraft/network/syncher/$EntityDataAccessor"
import {$IEntityAdditionalSpawnData, $IEntityAdditionalSpawnData$Type} from "packages/net/minecraftforge/entity/$IEntityAdditionalSpawnData"
import {$ClientGamePacketListener, $ClientGamePacketListener$Type} from "packages/net/minecraft/network/protocol/game/$ClientGamePacketListener"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$HitResult, $HitResult$Type} from "packages/net/minecraft/world/phys/$HitResult"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$ItemEntity, $ItemEntity$Type} from "packages/net/minecraft/world/entity/item/$ItemEntity"
import {$LevelRenderer, $LevelRenderer$Type} from "packages/net/minecraft/client/renderer/$LevelRenderer"

export class $GlassItemFrame extends $ItemFrame implements $IEntityAdditionalSpawnData {
static readonly "IS_SHINY": $EntityDataAccessor<(boolean)>
static readonly "NUM_ROTATIONS": integer
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(arg0: $EntityType$Type<(any)>, arg1: $Level$Type)
constructor(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $Direction$Type)

public "getPickedResult"(arg0: $HitResult$Type): $ItemStack
public "tick"(): void
public "readAdditionalSaveData"(arg0: $CompoundTag$Type): void
public "addAdditionalSaveData"(arg0: $CompoundTag$Type): void
public "interact"(arg0: $Player$Type, arg1: $InteractionHand$Type): $InteractionResult
public "getAddEntityPacket"(): $Packet<($ClientGamePacketListener)>
public "writeSpawnData"(arg0: $FriendlyByteBuf$Type): void
public "readSpawnData"(arg0: $FriendlyByteBuf$Type): void
public "survives"(): boolean
public "getBehindPos"(): $BlockPos
public "getOnSignRotation"(): integer
public "getSignAttachment"(): $GlassItemFrame$SignAttachment
public "isOnSign"(): boolean
public "spawnAtLocation"(arg0: $ItemStack$Type, arg1: float): $ItemEntity
public "tdv$getLuminance"(): integer
public "tdv$getDynamicLightX"(): double
public "tdv$getDynamicLightZ"(): double
public "tdv$getDynamicLightWorld"(): $Level
public "tdv$shouldUpdateDynamicLight"(): boolean
public "tdv$resetDynamicLight"(): void
public "tdv$getDynamicLightY"(): double
public "tdv$dynamicLightTick"(): void
public "tdv$lambdynlights$scheduleTrackedChunksRebuild"(arg0: $LevelRenderer$Type): void
public "tdv$lambdynlights$updateDynamicLight"(arg0: $LevelRenderer$Type): boolean
get "addEntityPacket"(): $Packet<($ClientGamePacketListener)>
get "behindPos"(): $BlockPos
get "onSignRotation"(): integer
get "signAttachment"(): $GlassItemFrame$SignAttachment
get "onSign"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GlassItemFrame$Type = ($GlassItemFrame);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GlassItemFrame_ = $GlassItemFrame$Type;
}}
declare module "packages/org/violetmoon/quark/content/world/block/$MyaliteBlock" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$IZetaBlockColorProvider, $IZetaBlockColorProvider$Type} from "packages/org/violetmoon/zeta/registry/$IZetaBlockColorProvider"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$ZetaBlock, $ZetaBlock$Type} from "packages/org/violetmoon/zeta/block/$ZetaBlock"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $MyaliteBlock extends $ZetaBlock implements $IZetaBlockColorProvider {
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(arg0: string, arg1: $ZetaModule$Type, arg2: $BlockBehaviour$Properties$Type)

public "getBlockColorProviderName"(): string
public "getItemColorProviderName"(): string
public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
get "blockColorProviderName"(): string
get "itemColorProviderName"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MyaliteBlock$Type = ($MyaliteBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MyaliteBlock_ = $MyaliteBlock$Type;
}}
declare module "packages/org/violetmoon/zeta/util/$RegistryUtil" {
import {$IZetaBlock, $IZetaBlock$Type} from "packages/org/violetmoon/zeta/block/$IZetaBlock"
import {$RegistryAccess, $RegistryAccess$Type} from "packages/net/minecraft/core/$RegistryAccess"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Registry, $Registry$Type} from "packages/net/minecraft/core/$Registry"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"

export class $RegistryUtil {

constructor(arg0: $Zeta$Type)

public "inheritQuark"(arg0: $IZetaBlock$Type, arg1: string): string
public static "massRegistryGet"<T>(arg0: $Collection$Type<(string)>, arg1: $Registry$Type<(T)>): $List<(T)>
public "inherit"(arg0: $Block$Type, arg1: $Function$Type<(string), (string)>): string
public "inherit"(arg0: $Block$Type, arg1: string): string
public static "getTagValues"<T>(arg0: $RegistryAccess$Type, arg1: $TagKey$Type<(T)>): $List<(T)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RegistryUtil$Type = ($RegistryUtil);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RegistryUtil_ = $RegistryUtil$Type;
}}
declare module "packages/org/violetmoon/quark/content/world/module/$PermafrostModule" {
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$ZCommonSetup, $ZCommonSetup$Type} from "packages/org/violetmoon/zeta/event/load/$ZCommonSetup"
import {$UndergroundStyleConfig, $UndergroundStyleConfig$Type} from "packages/org/violetmoon/quark/content/world/undergroundstyle/base/$UndergroundStyleConfig"
import {$ZetaBlock, $ZetaBlock$Type} from "packages/org/violetmoon/zeta/block/$ZetaBlock"
import {$ZRegister, $ZRegister$Type} from "packages/org/violetmoon/zeta/event/load/$ZRegister"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $PermafrostModule extends $ZetaModule {
 "generationSettings": $UndergroundStyleConfig
static "permafrost": $ZetaBlock
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "register"(arg0: $ZRegister$Type): void
public "setup"(arg0: $ZCommonSetup$Type): void
set "up"(value: $ZCommonSetup$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PermafrostModule$Type = ($PermafrostModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PermafrostModule_ = $PermafrostModule$Type;
}}
declare module "packages/org/violetmoon/zetaimplforge/client/event/load/$ForgeZAddModelLayers" {
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$LivingEntityRenderer, $LivingEntityRenderer$Type} from "packages/net/minecraft/client/renderer/entity/$LivingEntityRenderer"
import {$EntityRenderersEvent$AddLayers, $EntityRenderersEvent$AddLayers$Type} from "packages/net/minecraftforge/client/event/$EntityRenderersEvent$AddLayers"
import {$EntityModelSet, $EntityModelSet$Type} from "packages/net/minecraft/client/model/geom/$EntityModelSet"
import {$ZAddModelLayers, $ZAddModelLayers$Type} from "packages/org/violetmoon/zeta/client/event/load/$ZAddModelLayers"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $ForgeZAddModelLayers extends $Record implements $ZAddModelLayers {

constructor(e: $EntityRenderersEvent$AddLayers$Type)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "e"(): $EntityRenderersEvent$AddLayers
public "getEntityModels"(): $EntityModelSet
public "getRenderer"<T extends $LivingEntity, R extends $LivingEntityRenderer<(T), (any)>>(arg0: $EntityType$Type<(any)>): R
get "entityModels"(): $EntityModelSet
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ForgeZAddModelLayers$Type = ($ForgeZAddModelLayers);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ForgeZAddModelLayers_ = $ForgeZAddModelLayers$Type;
}}
declare module "packages/org/violetmoon/quark/content/tools/loot/$InBiomeCondition" {
import {$LootContextParam, $LootContextParam$Type} from "packages/net/minecraft/world/level/storage/loot/parameters/$LootContextParam"
import {$LootItemConditionType, $LootItemConditionType$Type} from "packages/net/minecraft/world/level/storage/loot/predicates/$LootItemConditionType"
import {$LootContext, $LootContext$Type} from "packages/net/minecraft/world/level/storage/loot/$LootContext"
import {$ValidationContext, $ValidationContext$Type} from "packages/net/minecraft/world/level/storage/loot/$ValidationContext"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$LootItemCondition, $LootItemCondition$Type} from "packages/net/minecraft/world/level/storage/loot/predicates/$LootItemCondition"

export class $InBiomeCondition extends $Record implements $LootItemCondition {

constructor(target: $ResourceLocation$Type)

public "equals"(arg0: any): boolean
public "target"(): $ResourceLocation
public "toString"(): string
public "hashCode"(): integer
public "test"(arg0: $LootContext$Type): boolean
public "getType"(): $LootItemConditionType
public "validate"(arg0: $ValidationContext$Type): void
public "getReferencedContextParams"(): $Set<($LootContextParam<(any)>)>
public "or"(arg0: $Predicate$Type<(any)>): $Predicate<($LootContext)>
public "negate"(): $Predicate<($LootContext)>
public "and"(arg0: $Predicate$Type<(any)>): $Predicate<($LootContext)>
public static "not"<T>(arg0: $Predicate$Type<(any)>): $Predicate<($LootContext)>
public static "isEqual"<T>(arg0: any): $Predicate<($LootContext)>
public "applyLootHandler"(context: $LootContext$Type, loot: $List$Type<($ItemStack$Type)>): boolean
get "type"(): $LootItemConditionType
get "referencedContextParams"(): $Set<($LootContextParam<(any)>)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $InBiomeCondition$Type = ($InBiomeCondition);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $InBiomeCondition_ = $InBiomeCondition$Type;
}}
declare module "packages/org/violetmoon/quark/api/event/$SimpleHarvestEvent$ActionType" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $SimpleHarvestEvent$ActionType extends $Enum<($SimpleHarvestEvent$ActionType)> {
static readonly "NONE": $SimpleHarvestEvent$ActionType
static readonly "CLICK": $SimpleHarvestEvent$ActionType
static readonly "HARVEST": $SimpleHarvestEvent$ActionType


public static "values"(): ($SimpleHarvestEvent$ActionType)[]
public static "valueOf"(arg0: string): $SimpleHarvestEvent$ActionType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SimpleHarvestEvent$ActionType$Type = (("harvest") | ("none") | ("click")) | ($SimpleHarvestEvent$ActionType);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SimpleHarvestEvent$ActionType_ = $SimpleHarvestEvent$ActionType$Type;
}}
declare module "packages/org/violetmoon/quark/integration/jei/$ElytraDuplicationExtension" {
import {$IRecipeLayoutBuilder, $IRecipeLayoutBuilder$Type} from "packages/mezz/jei/api/gui/builder/$IRecipeLayoutBuilder"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$ICraftingCategoryExtension, $ICraftingCategoryExtension$Type} from "packages/mezz/jei/api/recipe/category/extensions/vanilla/crafting/$ICraftingCategoryExtension"
import {$List, $List$Type} from "packages/java/util/$List"
import {$IFocusGroup, $IFocusGroup$Type} from "packages/mezz/jei/api/recipe/$IFocusGroup"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$ICraftingGridHelper, $ICraftingGridHelper$Type} from "packages/mezz/jei/api/gui/ingredient/$ICraftingGridHelper"
import {$ElytraDuplicationRecipe, $ElytraDuplicationRecipe$Type} from "packages/org/violetmoon/quark/content/tweaks/recipe/$ElytraDuplicationRecipe"
import {$InputConstants$Key, $InputConstants$Key$Type} from "packages/com/mojang/blaze3d/platform/$InputConstants$Key"

export class $ElytraDuplicationExtension extends $Record implements $ICraftingCategoryExtension {

constructor(recipe: $ElytraDuplicationRecipe$Type)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "recipe"(): $ElytraDuplicationRecipe
public "drawInfo"(arg0: integer, arg1: integer, arg2: $GuiGraphics$Type, arg3: double, arg4: double): void
public "setRecipe"(arg0: $IRecipeLayoutBuilder$Type, arg1: $ICraftingGridHelper$Type, arg2: $IFocusGroup$Type): void
public "getRegistryName"(): $ResourceLocation
public "getWidth"(): integer
public "getHeight"(): integer
public "handleInput"(arg0: double, arg1: double, arg2: $InputConstants$Key$Type): boolean
public "getTooltipStrings"(arg0: double, arg1: double): $List<($Component)>
get "registryName"(): $ResourceLocation
get "width"(): integer
get "height"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ElytraDuplicationExtension$Type = ($ElytraDuplicationExtension);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ElytraDuplicationExtension_ = $ElytraDuplicationExtension$Type;
}}
declare module "packages/org/violetmoon/quark/content/tweaks/entity/$DyedItemFrame" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$ItemFrame, $ItemFrame$Type} from "packages/net/minecraft/world/entity/decoration/$ItemFrame"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$LevelRenderer, $LevelRenderer$Type} from "packages/net/minecraft/client/renderer/$LevelRenderer"

export class $DyedItemFrame extends $ItemFrame {
static readonly "NUM_ROTATIONS": integer
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(arg0: $EntityType$Type<(any)>, arg1: $Level$Type)
constructor(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $Direction$Type, arg3: integer, arg4: boolean)

public "isGlow"(): boolean
public "readAdditionalSaveData"(arg0: $CompoundTag$Type): void
public "addAdditionalSaveData"(arg0: $CompoundTag$Type): void
public "getColor"(): integer
public "getBreakSound"(): $SoundEvent
public "getRemoveItemSound"(): $SoundEvent
public "getPlaceSound"(): $SoundEvent
public "getAddItemSound"(): $SoundEvent
public "getRotateItemSound"(): $SoundEvent
public "tdv$getLuminance"(): integer
public "tdv$getDynamicLightX"(): double
public "tdv$getDynamicLightZ"(): double
public "tdv$getDynamicLightWorld"(): $Level
public "tdv$shouldUpdateDynamicLight"(): boolean
public "tdv$resetDynamicLight"(): void
public "tdv$getDynamicLightY"(): double
public "tdv$dynamicLightTick"(): void
public "tdv$lambdynlights$scheduleTrackedChunksRebuild"(arg0: $LevelRenderer$Type): void
public "tdv$lambdynlights$updateDynamicLight"(arg0: $LevelRenderer$Type): boolean
get "glow"(): boolean
get "color"(): integer
get "breakSound"(): $SoundEvent
get "removeItemSound"(): $SoundEvent
get "placeSound"(): $SoundEvent
get "addItemSound"(): $SoundEvent
get "rotateItemSound"(): $SoundEvent
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DyedItemFrame$Type = ($DyedItemFrame);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DyedItemFrame_ = $DyedItemFrame$Type;
}}
declare module "packages/org/violetmoon/zeta/world/$EntitySpawnHandler$TrackedSpawnConfig" {
import {$EntitySpawnConfig, $EntitySpawnConfig$Type} from "packages/org/violetmoon/zeta/config/type/$EntitySpawnConfig"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$MobSpawnSettings$SpawnerData, $MobSpawnSettings$SpawnerData$Type} from "packages/net/minecraft/world/level/biome/$MobSpawnSettings$SpawnerData"
import {$MobCategory, $MobCategory$Type} from "packages/net/minecraft/world/entity/$MobCategory"

export class $EntitySpawnHandler$TrackedSpawnConfig {
readonly "entityType": $EntityType<(any)>
readonly "classification": $MobCategory
readonly "config": $EntitySpawnConfig
readonly "secondary": boolean


public "getEntry"(): $MobSpawnSettings$SpawnerData
get "entry"(): $MobSpawnSettings$SpawnerData
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EntitySpawnHandler$TrackedSpawnConfig$Type = ($EntitySpawnHandler$TrackedSpawnConfig);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EntitySpawnHandler$TrackedSpawnConfig_ = $EntitySpawnHandler$TrackedSpawnConfig$Type;
}}
declare module "packages/org/violetmoon/quark/content/mobs/module/$FoxhoundModule" {
import {$EntitySpawnConfig, $EntitySpawnConfig$Type} from "packages/org/violetmoon/zeta/config/type/$EntitySpawnConfig"
import {$ZCommonSetup, $ZCommonSetup$Type} from "packages/org/violetmoon/zeta/event/load/$ZCommonSetup"
import {$Foxhound, $Foxhound$Type} from "packages/org/violetmoon/quark/content/mobs/entity/$Foxhound"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$ZLivingChangeTarget, $ZLivingChangeTarget$Type} from "packages/org/violetmoon/zeta/event/play/entity/living/$ZLivingChangeTarget"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$ZSleepingLocationCheck, $ZSleepingLocationCheck$Type} from "packages/org/violetmoon/zeta/event/play/entity/living/$ZSleepingLocationCheck"
import {$ZRegister, $ZRegister$Type} from "packages/org/violetmoon/zeta/event/load/$ZRegister"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ManualTrigger, $ManualTrigger$Type} from "packages/org/violetmoon/zeta/advancement/$ManualTrigger"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZEntityAttributeCreation, $ZEntityAttributeCreation$Type} from "packages/org/violetmoon/zeta/event/load/$ZEntityAttributeCreation"

export class $FoxhoundModule extends $ZetaModule {
static "foxhoundType": $EntityType<($Foxhound)>
static "tameChance": double
static "foxhoundsSpeedUpFurnaces": boolean
static "spawnConfig": $EntitySpawnConfig
static "lesserSpawnConfig": $EntitySpawnConfig
static "foxhoundSpawnableTag": $TagKey<($Block)>
static "foxhoundFurnaceTrigger": $ManualTrigger
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "register"(arg0: $ZRegister$Type): void
public "setup"(arg0: $ZCommonSetup$Type): void
public "entityAttrs"(arg0: $ZEntityAttributeCreation$Type): void
public "onAggro"(arg0: $ZLivingChangeTarget$Type): void
public "onSleepCheck"(arg0: $ZSleepingLocationCheck$Type): void
set "up"(value: $ZCommonSetup$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FoxhoundModule$Type = ($FoxhoundModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FoxhoundModule_ = $FoxhoundModule$Type;
}}
declare module "packages/org/violetmoon/zeta/api/$ICollateralMover" {
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ICollateralMover$MoveResult, $ICollateralMover$MoveResult$Type} from "packages/org/violetmoon/zeta/api/$ICollateralMover$MoveResult"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export interface $ICollateralMover {

 "isCollateralMover"(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $Direction$Type, arg3: $BlockPos$Type): boolean
 "getCollateralMovement"(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $Direction$Type, arg3: $Direction$Type, arg4: $BlockPos$Type): $ICollateralMover$MoveResult

(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $Direction$Type, arg3: $BlockPos$Type): boolean
}

export namespace $ICollateralMover {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ICollateralMover$Type = ($ICollateralMover);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ICollateralMover_ = $ICollateralMover$Type;
}}
declare module "packages/org/violetmoon/quark/content/client/resources/$AttributeDisplayType" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $AttributeDisplayType extends $Enum<($AttributeDisplayType)> {
static readonly "DIFFERENCE": $AttributeDisplayType
static readonly "PERCENTAGE": $AttributeDisplayType
static readonly "MULTIPLIER": $AttributeDisplayType
static readonly "FLAT": $AttributeDisplayType


public static "values"(): ($AttributeDisplayType)[]
public static "valueOf"(arg0: string): $AttributeDisplayType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AttributeDisplayType$Type = (("multiplier") | ("flat") | ("percentage") | ("difference")) | ($AttributeDisplayType);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AttributeDisplayType_ = $AttributeDisplayType$Type;
}}
declare module "packages/org/violetmoon/zeta/client/$ClientRegistryExtension" {
import {$ZAddItemColorHandlers, $ZAddItemColorHandlers$Type} from "packages/org/violetmoon/zeta/client/event/load/$ZAddItemColorHandlers"
import {$ZAddItemColorHandlers$Post, $ZAddItemColorHandlers$Post$Type} from "packages/org/violetmoon/zeta/client/event/load/$ZAddItemColorHandlers$Post"
import {$ZAddBlockColorHandlers$Post, $ZAddBlockColorHandlers$Post$Type} from "packages/org/violetmoon/zeta/client/event/load/$ZAddBlockColorHandlers$Post"
import {$ZClientSetup, $ZClientSetup$Type} from "packages/org/violetmoon/zeta/client/event/load/$ZClientSetup"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"

export class $ClientRegistryExtension {

constructor(arg0: $Zeta$Type)

public "registerItemColorHandlers"(arg0: $ZAddItemColorHandlers$Type): void
public "registerBlockColorsPost"(arg0: $ZAddBlockColorHandlers$Post$Type): void
public "registerItemColorsPost"(arg0: $ZAddItemColorHandlers$Post$Type): void
public "registerRenderLayers"(arg0: $ZClientSetup$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientRegistryExtension$Type = ($ClientRegistryExtension);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientRegistryExtension_ = $ClientRegistryExtension$Type;
}}
declare module "packages/org/violetmoon/quark/content/world/undergroundstyle/$CorundumStyle" {
import {$UndergroundStyleGenerator$Context, $UndergroundStyleGenerator$Context$Type} from "packages/org/violetmoon/quark/content/world/undergroundstyle/base/$UndergroundStyleGenerator$Context"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BasicUndergroundStyle, $BasicUndergroundStyle$Type} from "packages/org/violetmoon/quark/content/world/undergroundstyle/base/$BasicUndergroundStyle"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $CorundumStyle extends $BasicUndergroundStyle {
 "floorState": $BlockState
 "ceilingState": $BlockState
 "wallState": $BlockState
readonly "mimicInside": boolean

constructor()

public "fillCeiling"(arg0: $UndergroundStyleGenerator$Context$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type): void
public "fillFloor"(arg0: $UndergroundStyleGenerator$Context$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CorundumStyle$Type = ($CorundumStyle);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CorundumStyle_ = $CorundumStyle$Type;
}}
declare module "packages/org/violetmoon/quark/content/building/recipe/$MixedExclusionRecipe" {
import {$InputReplacement, $InputReplacement$Type} from "packages/dev/latvian/mods/kubejs/recipe/$InputReplacement"
import {$RecipeSerializer, $RecipeSerializer$Type} from "packages/net/minecraft/world/item/crafting/$RecipeSerializer"
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$RecipeSchema, $RecipeSchema$Type} from "packages/dev/latvian/mods/kubejs/recipe/schema/$RecipeSchema"
import {$Ingredient, $Ingredient$Type} from "packages/net/minecraft/world/item/crafting/$Ingredient"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$IShapedRecipe, $IShapedRecipe$Type} from "packages/net/minecraftforge/common/crafting/$IShapedRecipe"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"
import {$CraftingBookCategory, $CraftingBookCategory$Type} from "packages/net/minecraft/world/item/crafting/$CraftingBookCategory"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$RegistryAccess, $RegistryAccess$Type} from "packages/net/minecraft/core/$RegistryAccess"
import {$CraftingRecipe, $CraftingRecipe$Type} from "packages/net/minecraft/world/item/crafting/$CraftingRecipe"
import {$CraftingContainer, $CraftingContainer$Type} from "packages/net/minecraft/world/inventory/$CraftingContainer"
import {$ReplacementMatch, $ReplacementMatch$Type} from "packages/dev/latvian/mods/kubejs/recipe/$ReplacementMatch"
import {$OutputReplacement, $OutputReplacement$Type} from "packages/dev/latvian/mods/kubejs/recipe/$OutputReplacement"

export class $MixedExclusionRecipe implements $CraftingRecipe, $IShapedRecipe<($CraftingContainer)> {
static readonly "SERIALIZER": $RecipeSerializer<($MixedExclusionRecipe)>

constructor(arg0: $ResourceLocation$Type, arg1: string, arg2: $ItemStack$Type, arg3: $TagKey$Type<($Item$Type)>, arg4: $ItemStack$Type)

public "matches"(arg0: $CraftingContainer$Type, arg1: $Level$Type): boolean
public "getResultItem"(arg0: $RegistryAccess$Type): $ItemStack
public "getIngredients"(): $NonNullList<($Ingredient)>
public "canCraftInDimensions"(arg0: integer, arg1: integer): boolean
public "getSerializer"(): $RecipeSerializer<(any)>
public "category"(): $CraftingBookCategory
public "assemble"(arg0: $CraftingContainer$Type, arg1: $RegistryAccess$Type): $ItemStack
public static "forChest"(arg0: string, arg1: $ResourceLocation$Type, arg2: boolean): $MixedExclusionRecipe
public static "forFurnace"(arg0: string, arg1: $ResourceLocation$Type): $MixedExclusionRecipe
public "getRecipeHeight"(): integer
public "getRecipeWidth"(): integer
public "getId"(): $ResourceLocation
public "isSpecial"(): boolean
public "getRemainingItems"(arg0: $CraftingContainer$Type): $NonNullList<($ItemStack)>
public "getToastSymbol"(): $ItemStack
public "isIncomplete"(): boolean
public "showNotification"(): boolean
public "getType"(): $ResourceLocation
public "replaceOutput"(match: $ReplacementMatch$Type, arg1: $OutputReplacement$Type): boolean
public "setGroup"(group: string): void
public "hasInput"(match: $ReplacementMatch$Type): boolean
public "getOrCreateId"(): $ResourceLocation
public "getSchema"(): $RecipeSchema
public "replaceInput"(match: $ReplacementMatch$Type, arg1: $InputReplacement$Type): boolean
public "hasOutput"(match: $ReplacementMatch$Type): boolean
public "getGroup"(): string
public "getMod"(): string
get "ingredients"(): $NonNullList<($Ingredient)>
get "serializer"(): $RecipeSerializer<(any)>
get "recipeHeight"(): integer
get "recipeWidth"(): integer
get "id"(): $ResourceLocation
get "special"(): boolean
get "toastSymbol"(): $ItemStack
get "incomplete"(): boolean
get "type"(): $ResourceLocation
set "group"(value: string)
get "orCreateId"(): $ResourceLocation
get "schema"(): $RecipeSchema
get "group"(): string
get "mod"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MixedExclusionRecipe$Type = ($MixedExclusionRecipe);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MixedExclusionRecipe_ = $MixedExclusionRecipe$Type;
}}
declare module "packages/org/violetmoon/zeta/event/load/$ZModulesReady" {
import {$IZetaLoadEvent, $IZetaLoadEvent$Type} from "packages/org/violetmoon/zeta/event/bus/$IZetaLoadEvent"

export class $ZModulesReady implements $IZetaLoadEvent {

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZModulesReady$Type = ($ZModulesReady);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZModulesReady_ = $ZModulesReady$Type;
}}
declare module "packages/org/violetmoon/zeta/module/$IDisableable" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$BooleanSupplier, $BooleanSupplier$Type} from "packages/java/util/function/$BooleanSupplier"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export interface $IDisableable<SELF> {

 "getModule"(): $ZetaModule
 "isEnabled"(): boolean
 "doesConditionApply"(): boolean
 "setCondition"(arg0: $BooleanSupplier$Type): SELF
}

export namespace $IDisableable {
function isEnabled(arg0: $Item$Type): boolean
function isEnabled(arg0: $Block$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IDisableable$Type<SELF> = ($IDisableable<(SELF)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IDisableable_<SELF> = $IDisableable$Type<(SELF)>;
}}
declare module "packages/org/violetmoon/quark/content/tweaks/module/$SnowGolemPlayerHeadsModule" {
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$ZLivingDrops, $ZLivingDrops$Type} from "packages/org/violetmoon/zeta/event/play/entity/living/$ZLivingDrops"
import {$ZRegister, $ZRegister$Type} from "packages/org/violetmoon/zeta/event/load/$ZRegister"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ManualTrigger, $ManualTrigger$Type} from "packages/org/violetmoon/zeta/advancement/$ManualTrigger"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $SnowGolemPlayerHeadsModule extends $ZetaModule {
static "getOwnHeadTrigger": $ManualTrigger
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "register"(arg0: $ZRegister$Type): void
public "onDrops"(arg0: $ZLivingDrops$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SnowGolemPlayerHeadsModule$Type = ($SnowGolemPlayerHeadsModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SnowGolemPlayerHeadsModule_ = $SnowGolemPlayerHeadsModule$Type;
}}
declare module "packages/org/violetmoon/quark/content/building/block/$HollowFrameBlock" {
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$Fluid, $Fluid$Type} from "packages/net/minecraft/world/level/material/$Fluid"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$SimpleWaterloggedBlock, $SimpleWaterloggedBlock$Type} from "packages/net/minecraft/world/level/block/$SimpleWaterloggedBlock"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$FluidState, $FluidState$Type} from "packages/net/minecraft/world/level/material/$FluidState"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$ZetaBlock, $ZetaBlock$Type} from "packages/org/violetmoon/zeta/block/$ZetaBlock"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$CollisionContext, $CollisionContext$Type} from "packages/net/minecraft/world/phys/shapes/$CollisionContext"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$ICrawlSpaceBlock, $ICrawlSpaceBlock$Type} from "packages/org/violetmoon/quark/api/$ICrawlSpaceBlock"

export class $HollowFrameBlock extends $ZetaBlock implements $SimpleWaterloggedBlock, $ICrawlSpaceBlock {
static readonly "WATERLOGGED": $BooleanProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(arg0: string, arg1: $ZetaModule$Type, arg2: $BlockBehaviour$Properties$Type)

public static "top"(arg0: byte): boolean
public static "bottom"(arg0: byte): boolean
public "isLadderZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "propagatesSkylightDown"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type): boolean
public "getStateForPlacement"(arg0: $BlockPlaceContext$Type): $BlockState
public "hasDynamicShape"(): boolean
public "canCrawl"(arg0: $Level$Type, arg1: $BlockState$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): boolean
public "updateShape"(arg0: $BlockState$Type, arg1: $Direction$Type, arg2: $BlockState$Type, arg3: $LevelAccessor$Type, arg4: $BlockPos$Type, arg5: $BlockPos$Type): $BlockState
public "useShapeForLightOcclusion"(arg0: $BlockState$Type): boolean
public "getFluidState"(arg0: $BlockState$Type): $FluidState
public "getCollisionShape"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $CollisionContext$Type): $VoxelShape
public "getShape"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $CollisionContext$Type): $VoxelShape
public static "east"(arg0: byte): boolean
public static "north"(arg0: byte): boolean
public static "west"(arg0: byte): boolean
public static "south"(arg0: byte): boolean
public "hasDirection"(arg0: $BlockState$Type, arg1: $Direction$Type): boolean
public static "hasDirection"(arg0: byte, arg1: $Direction$Type): boolean
public "getShapeCode"(arg0: $BlockState$Type): byte
public "getPickupSound"(): $Optional<($SoundEvent)>
public "canPlaceLiquid"(arg0: $BlockGetter$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: $Fluid$Type): boolean
public "placeLiquid"(arg0: $LevelAccessor$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: $FluidState$Type): boolean
public "pickupBlock"(arg0: $LevelAccessor$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type): $ItemStack
public "crawlHeight"(arg0: $Level$Type, arg1: $BlockState$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): double
public "isLog"(arg0: $ServerPlayer$Type, arg1: $BlockState$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): boolean
public "getPickupSound"(arg0: $BlockState$Type): $Optional<($SoundEvent)>
public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
get "pickupSound"(): $Optional<($SoundEvent)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $HollowFrameBlock$Type = ($HollowFrameBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $HollowFrameBlock_ = $HollowFrameBlock$Type;
}}
declare module "packages/org/violetmoon/zetaimplforge/client/$ForgeClientRegistryExtension" {
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ClientRegistryExtension, $ClientRegistryExtension$Type} from "packages/org/violetmoon/zeta/client/$ClientRegistryExtension"

export class $ForgeClientRegistryExtension extends $ClientRegistryExtension {

constructor(arg0: $Zeta$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ForgeClientRegistryExtension$Type = ($ForgeClientRegistryExtension);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ForgeClientRegistryExtension_ = $ForgeClientRegistryExtension$Type;
}}
declare module "packages/org/violetmoon/quark/content/building/entity/$Stool" {
import {$ClientGamePacketListener, $ClientGamePacketListener$Type} from "packages/net/minecraft/network/protocol/game/$ClientGamePacketListener"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$Packet, $Packet$Type} from "packages/net/minecraft/network/protocol/$Packet"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $Stool extends $Entity {
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(arg0: $EntityType$Type<(any)>, arg1: $Level$Type)

public "tick"(): void
public "getAddEntityPacket"(): $Packet<($ClientGamePacketListener)>
public "getPassengersRidingOffset"(): double
get "addEntityPacket"(): $Packet<($ClientGamePacketListener)>
get "passengersRidingOffset"(): double
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Stool$Type = ($Stool);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Stool_ = $Stool$Type;
}}
declare module "packages/org/violetmoon/zeta/event/play/$ZLevelTick$Start" {
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ZLevelTick, $ZLevelTick$Type} from "packages/org/violetmoon/zeta/event/play/$ZLevelTick"

export interface $ZLevelTick$Start extends $ZLevelTick {

 "getLevel"(): $Level

(): $Level
}

export namespace $ZLevelTick$Start {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZLevelTick$Start$Type = ($ZLevelTick$Start);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZLevelTick$Start_ = $ZLevelTick$Start$Type;
}}
declare module "packages/org/violetmoon/zeta/event/play/entity/player/$ZPlayerInteract" {
import {$IZetaPlayEvent, $IZetaPlayEvent$Type} from "packages/org/violetmoon/zeta/event/bus/$IZetaPlayEvent"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$Cancellable, $Cancellable$Type} from "packages/org/violetmoon/zeta/event/bus/$Cancellable"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export interface $ZPlayerInteract extends $IZetaPlayEvent, $Cancellable {

 "getLevel"(): $Level
 "getHand"(): $InteractionHand
 "getEntity"(): $Player
 "getPos"(): $BlockPos
 "setCancellationResult"(arg0: $InteractionResult$Type): void
 "cancel"(): void
 "setCanceled"(arg0: boolean): void
 "isCanceled"(): boolean
}

export namespace $ZPlayerInteract {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZPlayerInteract$Type = ($ZPlayerInteract);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZPlayerInteract_ = $ZPlayerInteract$Type;
}}
declare module "packages/org/violetmoon/quark/content/automation/block/$ChuteBlock" {
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$EntityBlock, $EntityBlock$Type} from "packages/net/minecraft/world/level/block/$EntityBlock"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$CollisionContext, $CollisionContext$Type} from "packages/net/minecraft/world/phys/shapes/$CollisionContext"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$PathComputationType, $PathComputationType$Type} from "packages/net/minecraft/world/level/pathfinder/$PathComputationType"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$ZetaBlock, $ZetaBlock$Type} from "packages/org/violetmoon/zeta/block/$ZetaBlock"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$BlockEntityTicker, $BlockEntityTicker$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityTicker"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$GameEventListener, $GameEventListener$Type} from "packages/net/minecraft/world/level/gameevent/$GameEventListener"

export class $ChuteBlock extends $ZetaBlock implements $EntityBlock {
static readonly "ENABLED": $BooleanProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(arg0: string, arg1: $ZetaModule$Type, arg2: $BlockBehaviour$Properties$Type)

public "getFireSpreadSpeedZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "getFlammabilityZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "isPathfindable"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $PathComputationType$Type): boolean
public "neighborChanged"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type, arg3: $Block$Type, arg4: $BlockPos$Type, arg5: boolean): void
public "getShape"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $CollisionContext$Type): $VoxelShape
public "newBlockEntity"(arg0: $BlockPos$Type, arg1: $BlockState$Type): $BlockEntity
public "getTicker"<T extends $BlockEntity>(arg0: $Level$Type, arg1: $BlockState$Type, arg2: $BlockEntityType$Type<(T)>): $BlockEntityTicker<(T)>
public "getListener"<T extends $BlockEntity>(arg0: $ServerLevel$Type, arg1: T): $GameEventListener
public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ChuteBlock$Type = ($ChuteBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ChuteBlock_ = $ChuteBlock$Type;
}}
declare module "packages/org/violetmoon/zeta/block/$ZetaWoodenButtonBlock" {
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$ZetaButtonBlock, $ZetaButtonBlock$Type} from "packages/org/violetmoon/zeta/block/$ZetaButtonBlock"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$EnumProperty, $EnumProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$EnumProperty"
import {$AttachFace, $AttachFace$Type} from "packages/net/minecraft/world/level/block/state/properties/$AttachFace"
import {$DirectionProperty, $DirectionProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$DirectionProperty"
import {$BlockSetType, $BlockSetType$Type} from "packages/net/minecraft/world/level/block/state/properties/$BlockSetType"

export class $ZetaWoodenButtonBlock extends $ZetaButtonBlock {
static readonly "POWERED": $BooleanProperty
static readonly "FACE": $EnumProperty<($AttachFace)>
static readonly "FACING": $DirectionProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(arg0: $BlockSetType$Type, arg1: string, arg2: $ZetaModule$Type, arg3: $BlockBehaviour$Properties$Type)

public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZetaWoodenButtonBlock$Type = ($ZetaWoodenButtonBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZetaWoodenButtonBlock_ = $ZetaWoodenButtonBlock$Type;
}}
declare module "packages/org/violetmoon/zeta/block/$ZetaFenceBlock" {
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$BooleanSupplier, $BooleanSupplier$Type} from "packages/java/util/function/$BooleanSupplier"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$FluidState, $FluidState$Type} from "packages/net/minecraft/world/level/material/$FluidState"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$ToolAction, $ToolAction$Type} from "packages/net/minecraftforge/common/$ToolAction"
import {$IForgeBlock, $IForgeBlock$Type} from "packages/net/minecraftforge/common/extensions/$IForgeBlock"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$CreativeModeTab, $CreativeModeTab$Type} from "packages/net/minecraft/world/item/$CreativeModeTab"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$IZetaBlock, $IZetaBlock$Type} from "packages/org/violetmoon/zeta/block/$IZetaBlock"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$UseOnContext, $UseOnContext$Type} from "packages/net/minecraft/world/item/context/$UseOnContext"
import {$FenceBlock, $FenceBlock$Type} from "packages/net/minecraft/world/level/block/$FenceBlock"
import {$SoundType, $SoundType$Type} from "packages/net/minecraft/world/level/block/$SoundType"
import {$IPlantable, $IPlantable$Type} from "packages/net/minecraftforge/common/$IPlantable"
import {$IZetaBlockExtensions, $IZetaBlockExtensions$Type} from "packages/org/violetmoon/zeta/block/ext/$IZetaBlockExtensions"
import {$ResourceKey, $ResourceKey$Type} from "packages/net/minecraft/resources/$ResourceKey"
import {$ItemLike, $ItemLike$Type} from "packages/net/minecraft/world/level/$ItemLike"
import {$BlockAndTintGetter, $BlockAndTintGetter$Type} from "packages/net/minecraft/world/level/$BlockAndTintGetter"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $ZetaFenceBlock extends $FenceBlock implements $IZetaBlock, $IZetaBlockExtensions, $IForgeBlock {
static readonly "NORTH": $BooleanProperty
static readonly "EAST": $BooleanProperty
static readonly "SOUTH": $BooleanProperty
static readonly "WEST": $BooleanProperty
static readonly "WATERLOGGED": $BooleanProperty
static readonly "PROPERTY_BY_DIRECTION": $Map<($Direction), ($BooleanProperty)>
 "collisionShapeByIndex": ($VoxelShape)[]
 "shapeByIndex": ($VoxelShape)[]
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(arg0: string, arg1: $ZetaModule$Type, arg2: $BlockBehaviour$Properties$Type)

public "getModule"(): $ZetaModule
public "canSustainPlant"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type, arg4: $IPlantable$Type): boolean
public "isLadder"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "isConduitFrame"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): boolean
public "doesConditionApply"(): boolean
public "setCondition"(arg0: $BooleanSupplier$Type): $ZetaFenceBlock
public "getEnchantPowerBonus"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type): float
public "shouldDisplayFluidOverlay"(arg0: $BlockState$Type, arg1: $BlockAndTintGetter$Type, arg2: $BlockPos$Type, arg3: $FluidState$Type): boolean
public "getToolModifiedState"(arg0: $BlockState$Type, arg1: $UseOnContext$Type, arg2: $ToolAction$Type, arg3: boolean): $BlockState
public "getBeaconColorMultiplier"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): (float)[]
public "makesOpenTrapdoorAboveClimbable"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockState$Type): boolean
public "getSoundType"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): $SoundType
public "isScaffolding"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "getLightEmission"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type): integer
public "isFlammable"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): boolean
public "canStickTo"(arg0: $BlockState$Type, arg1: $BlockState$Type): boolean
public "getFireSpreadSpeed"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "getFlammability"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "isStickyBlock"(arg0: $BlockState$Type): boolean
public "collisionExtendsVertically"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): boolean
public "getBlock"(): $Block
public "getFireSpreadSpeedZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "getFlammabilityZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "setCreativeTab"(arg0: $ResourceKey$Type<($CreativeModeTab$Type)>): $Block
public "setCreativeTab"(arg0: $ResourceKey$Type<($CreativeModeTab$Type)>, arg1: $ItemLike$Type, arg2: boolean): $Block
public "isConduitFrameZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): boolean
public "isLadderZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "isStickyBlockZeta"(arg0: $BlockState$Type): boolean
public "isScaffoldingZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "canStickToZeta"(arg0: $BlockState$Type, arg1: $BlockState$Type): boolean
public "isFlammableZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): boolean
public "getSoundTypeZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): $SoundType
public "makesOpenTrapdoorAboveClimbableZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockState$Type): boolean
public "canSustainPlantZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type, arg4: string): boolean
public "getToolModifiedStateZeta"(arg0: $BlockState$Type, arg1: $UseOnContext$Type, arg2: string, arg3: boolean): $BlockState
public "collisionExtendsVerticallyZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): boolean
public "shouldDisplayFluidOverlayZeta"(arg0: $BlockState$Type, arg1: $BlockAndTintGetter$Type, arg2: $BlockPos$Type, arg3: $FluidState$Type): boolean
public "getEnchantPowerBonusZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type): float
public "getBeaconColorMultiplierZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): (float)[]
public "getLightEmissionZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type): integer
public "isEnabled"(): boolean
public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
get "module"(): $ZetaModule
set "condition"(value: $BooleanSupplier$Type)
get "block"(): $Block
set "creativeTab"(value: $ResourceKey$Type<($CreativeModeTab$Type)>)
get "enabled"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZetaFenceBlock$Type = ($ZetaFenceBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZetaFenceBlock_ = $ZetaFenceBlock$Type;
}}
declare module "packages/org/violetmoon/zeta/event/play/$ZAnvilRepair" {
import {$IZetaPlayEvent, $IZetaPlayEvent$Type} from "packages/org/violetmoon/zeta/event/bus/$IZetaPlayEvent"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$PlayerGetter, $PlayerGetter$Type} from "packages/org/violetmoon/zeta/event/bus/helpers/$PlayerGetter"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export interface $ZAnvilRepair extends $IZetaPlayEvent, $PlayerGetter {

 "getRight"(): $ItemStack
 "getLeft"(): $ItemStack
 "getBreakChance"(): float
 "setBreakChance"(arg0: float): void
 "getOutput"(): $ItemStack
 "getPlayer"(): $Player
 "getEntity"(): $LivingEntity
}

export namespace $ZAnvilRepair {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZAnvilRepair$Type = ($ZAnvilRepair);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZAnvilRepair_ = $ZAnvilRepair$Type;
}}
declare module "packages/org/violetmoon/quark/content/client/module/$ImprovedTooltipsModule" {
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $ImprovedTooltipsModule extends $ZetaModule {
static "attributeTooltips": boolean
static "foodTooltips": boolean
static "shulkerTooltips": boolean
static "mapTooltips": boolean
static "enchantingTooltips": boolean
static "fuelTimeTooltips": boolean
static "shulkerBoxUseColors": boolean
static "shulkerBoxRequireShift": boolean
static "mapRequireShift": boolean
static "foodDivisor": integer
static "showSaturation": boolean
static "foodCompressionThreshold": integer
static "fuelTimeDivisor": integer
static "showUpgradeStatus": boolean
static "animateUpDownArrows": boolean
static "enchantingStacks": $List<(string)>
static "enchantingAdditionalStacks": $List<(string)>
static "staticEnabled": boolean
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public static "shouldHideAttributes"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ImprovedTooltipsModule$Type = ($ImprovedTooltipsModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ImprovedTooltipsModule_ = $ImprovedTooltipsModule$Type;
}}
declare module "packages/org/violetmoon/quark/content/tweaks/client/emote/$ModelAccessor" {
import {$HumanoidModel, $HumanoidModel$Type} from "packages/net/minecraft/client/model/$HumanoidModel"
import {$TweenAccessor, $TweenAccessor$Type} from "packages/aurelienribon/tweenengine/$TweenAccessor"

export class $ModelAccessor implements $TweenAccessor<($HumanoidModel<(any)>)> {
static readonly "INSTANCE": $ModelAccessor
static readonly "HEAD": integer
static readonly "BODY": integer
static readonly "RIGHT_ARM": integer
static readonly "LEFT_ARM": integer
static readonly "RIGHT_LEG": integer
static readonly "LEFT_LEG": integer
static readonly "MODEL": integer
static readonly "HEAD_X": integer
static readonly "HEAD_Y": integer
static readonly "HEAD_Z": integer
static readonly "BODY_X": integer
static readonly "BODY_Y": integer
static readonly "BODY_Z": integer
static readonly "RIGHT_ARM_X": integer
static readonly "RIGHT_ARM_Y": integer
static readonly "RIGHT_ARM_Z": integer
static readonly "LEFT_ARM_X": integer
static readonly "LEFT_ARM_Y": integer
static readonly "LEFT_ARM_Z": integer
static readonly "RIGHT_LEG_X": integer
static readonly "RIGHT_LEG_Y": integer
static readonly "RIGHT_LEG_Z": integer
static readonly "LEFT_LEG_X": integer
static readonly "LEFT_LEG_Y": integer
static readonly "LEFT_LEG_Z": integer
static readonly "MODEL_X": integer
static readonly "MODEL_Y": integer
static readonly "MODEL_Z": integer

constructor()

public "setValues"(arg0: $HumanoidModel$Type<(any)>, arg1: integer, arg2: (float)[]): void
public "resetModel"(arg0: $HumanoidModel$Type<(any)>): void
public "getValues"(arg0: $HumanoidModel$Type<(any)>, arg1: integer, arg2: (float)[]): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModelAccessor$Type = ($ModelAccessor);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModelAccessor_ = $ModelAccessor$Type;
}}
declare module "packages/org/violetmoon/quark/content/mobs/client/model/$ToretoiseModel" {
import {$VertexConsumer, $VertexConsumer$Type} from "packages/com/mojang/blaze3d/vertex/$VertexConsumer"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$Toretoise, $Toretoise$Type} from "packages/org/violetmoon/quark/content/mobs/entity/$Toretoise"
import {$EntityModel, $EntityModel$Type} from "packages/net/minecraft/client/model/$EntityModel"
import {$ModelPart, $ModelPart$Type} from "packages/net/minecraft/client/model/geom/$ModelPart"
import {$LayerDefinition, $LayerDefinition$Type} from "packages/net/minecraft/client/model/geom/builders/$LayerDefinition"

export class $ToretoiseModel extends $EntityModel<($Toretoise)> {
 "body": $ModelPart
 "head": $ModelPart
 "rightFrontLeg": $ModelPart
 "leftFrontLeg": $ModelPart
 "rightBackLeg": $ModelPart
 "leftBackLeg": $ModelPart
 "mouth": $ModelPart
 "CoalOre1": $ModelPart
 "CoalOre2": $ModelPart
 "CoalOre3": $ModelPart
 "CoalOre4": $ModelPart
 "IronOre1": $ModelPart
 "IronOre2": $ModelPart
 "IronOre3": $ModelPart
 "LapisOre1": $ModelPart
 "LapisOre2": $ModelPart
 "LapisOre3": $ModelPart
 "LapisOre4": $ModelPart
 "RedstoneOre1": $ModelPart
 "RedstoneOre2": $ModelPart
 "RedstoneOre3": $ModelPart
 "RedstoneOre4": $ModelPart
 "RedstoneOre5": $ModelPart
 "attackTime": float
 "riding": boolean
 "young": boolean

constructor(arg0: $ModelPart$Type)

public "setRotateAngle"(arg0: $ModelPart$Type, arg1: float, arg2: float, arg3: float): void
public "setupAnim"(arg0: $Toretoise$Type, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float): void
public static "createBodyLayer"(): $LayerDefinition
public "renderToBuffer"(arg0: $PoseStack$Type, arg1: $VertexConsumer$Type, arg2: integer, arg3: integer, arg4: float, arg5: float, arg6: float, arg7: float): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ToretoiseModel$Type = ($ToretoiseModel);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ToretoiseModel_ = $ToretoiseModel$Type;
}}
declare module "packages/org/violetmoon/quark/addons/oddities/inventory/slot/$SlotCachingItemHandler" {
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$CachedItemHandlerSlot, $CachedItemHandlerSlot$Type} from "packages/org/violetmoon/quark/addons/oddities/inventory/slot/$CachedItemHandlerSlot"
import {$IItemHandler, $IItemHandler$Type} from "packages/net/minecraftforge/items/$IItemHandler"

/**
 * 
 * @deprecated
 */
export class $SlotCachingItemHandler extends $CachedItemHandlerSlot {
readonly "container": $Container
 "index": integer
 "x": integer
 "y": integer

constructor(arg0: $IItemHandler$Type, arg1: integer, arg2: integer, arg3: integer)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SlotCachingItemHandler$Type = ($SlotCachingItemHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SlotCachingItemHandler_ = $SlotCachingItemHandler$Type;
}}
declare module "packages/org/violetmoon/zetaimplforge/event/load/$ForgeZCommonSetup" {
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$ZCommonSetup, $ZCommonSetup$Type} from "packages/org/violetmoon/zeta/event/load/$ZCommonSetup"
import {$FMLCommonSetupEvent, $FMLCommonSetupEvent$Type} from "packages/net/minecraftforge/fml/event/lifecycle/$FMLCommonSetupEvent"
import {$Runnable, $Runnable$Type} from "packages/java/lang/$Runnable"

export class $ForgeZCommonSetup extends $Record implements $ZCommonSetup {

constructor(e: $FMLCommonSetupEvent$Type)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "e"(): $FMLCommonSetupEvent
public "enqueueWork"(arg0: $Runnable$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ForgeZCommonSetup$Type = ($ForgeZCommonSetup);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ForgeZCommonSetup_ = $ForgeZCommonSetup$Type;
}}
declare module "packages/org/violetmoon/zeta/util/$MiscUtil" {
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$GoalSelector, $GoalSelector$Type} from "packages/net/minecraft/world/entity/ai/goal/$GoalSelector"
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$MobSpawnType, $MobSpawnType$Type} from "packages/net/minecraft/world/entity/$MobSpawnType"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Vec2, $Vec2$Type} from "packages/net/minecraft/world/phys/$Vec2"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Goal, $Goal$Type} from "packages/net/minecraft/world/entity/ai/goal/$Goal"
import {$DyeColor, $DyeColor$Type} from "packages/net/minecraft/world/item/$DyeColor"
import {$BlockBehaviour, $BlockBehaviour$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$ServerLevelAccessor, $ServerLevelAccessor$Type} from "packages/net/minecraft/world/level/$ServerLevelAccessor"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $MiscUtil {
static readonly "HORIZONTALS": ($Direction)[]
static readonly "CREATIVE_COLOR_ORDER": ($DyeColor)[]

constructor()

public static "fromString"(arg0: string): $BlockState
public static "getMinecraftAnglesLossy"(arg0: $Vec3$Type): $Vec2
public static "putIntoInv"(arg0: $ItemStack$Type, arg1: $LevelAccessor$Type, arg2: $BlockPos$Type, arg3: $BlockEntity$Type, arg4: $Direction$Type, arg5: boolean, arg6: boolean): $ItemStack
public static "canPutIntoInv"(arg0: $ItemStack$Type, arg1: $LevelAccessor$Type, arg2: $BlockPos$Type, arg3: $BlockEntity$Type, arg4: $Direction$Type, arg5: boolean): boolean
public static "validSpawnLight"(arg0: $ServerLevelAccessor$Type, arg1: $BlockPos$Type, arg2: $RandomSource$Type): boolean
public static "getMinecraftAngles"(arg0: $Vec3$Type): $Vec2
public static "validSpawnLocation"(arg0: $EntityType$Type<(any)>, arg1: $LevelAccessor$Type, arg2: $MobSpawnType$Type, arg3: $BlockPos$Type): boolean
public static "damageStack"(arg0: $Player$Type, arg1: $InteractionHand$Type, arg2: $ItemStack$Type, arg3: integer): void
public static "addGoalJustAfterLatestWithPriority"(arg0: $GoalSelector$Type, arg1: integer, arg2: $Goal$Type): void
public static "syncTE"(arg0: $BlockEntity$Type): void
public static "copyPropertySafe"(arg0: $BlockBehaviour$Type): $BlockBehaviour$Properties
public static "directionProperty"(arg0: $Direction$Type): $BooleanProperty
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MiscUtil$Type = ($MiscUtil);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MiscUtil_ = $MiscUtil$Type;
}}
declare module "packages/org/violetmoon/quark/base/client/handler/$QuarkProgrammerArtHandler" {
import {$ZClientSetup, $ZClientSetup$Type} from "packages/org/violetmoon/zeta/client/event/load/$ZClientSetup"

export class $QuarkProgrammerArtHandler {

constructor()

public static "onClientSetup"(arg0: $ZClientSetup$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $QuarkProgrammerArtHandler$Type = ($QuarkProgrammerArtHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $QuarkProgrammerArtHandler_ = $QuarkProgrammerArtHandler$Type;
}}
declare module "packages/org/violetmoon/zeta/config/$ValueDefinition$Builder" {
import {$Definition$Builder, $Definition$Builder$Type} from "packages/org/violetmoon/zeta/config/$Definition$Builder"
import {$ValueDefinition, $ValueDefinition$Type} from "packages/org/violetmoon/zeta/config/$ValueDefinition"
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"

export class $ValueDefinition$Builder<T> extends $Definition$Builder<($ValueDefinition$Builder<(T)>), ($ValueDefinition<(T)>)> {

constructor()

public "defaultValue"(arg0: T): $ValueDefinition$Builder<(T)>
public "build"(): $ValueDefinition<(T)>
public "validator"(arg0: $Predicate$Type<(any)>): $ValueDefinition$Builder<(T)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ValueDefinition$Builder$Type<T> = ($ValueDefinition$Builder<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ValueDefinition$Builder_<T> = $ValueDefinition$Builder$Type<(T)>;
}}
declare module "packages/org/violetmoon/quark/content/tweaks/recipe/$SlabToBlockRecipe" {
import {$RegistryAccess, $RegistryAccess$Type} from "packages/net/minecraft/core/$RegistryAccess"
import {$SimpleCraftingRecipeSerializer, $SimpleCraftingRecipeSerializer$Type} from "packages/net/minecraft/world/item/crafting/$SimpleCraftingRecipeSerializer"
import {$RecipeSerializer, $RecipeSerializer$Type} from "packages/net/minecraft/world/item/crafting/$RecipeSerializer"
import {$CustomRecipe, $CustomRecipe$Type} from "packages/net/minecraft/world/item/crafting/$CustomRecipe"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$CraftingContainer, $CraftingContainer$Type} from "packages/net/minecraft/world/inventory/$CraftingContainer"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$CraftingBookCategory, $CraftingBookCategory$Type} from "packages/net/minecraft/world/item/crafting/$CraftingBookCategory"

export class $SlabToBlockRecipe extends $CustomRecipe {
static readonly "SERIALIZER": $SimpleCraftingRecipeSerializer<(any)>

constructor(arg0: $ResourceLocation$Type, arg1: $CraftingBookCategory$Type)

public "matches"(arg0: $CraftingContainer$Type, arg1: $Level$Type): boolean
public "canCraftInDimensions"(arg0: integer, arg1: integer): boolean
public "getSerializer"(): $RecipeSerializer<(any)>
public "assemble"(arg0: $CraftingContainer$Type, arg1: $RegistryAccess$Type): $ItemStack
public "isSpecial"(): boolean
get "serializer"(): $RecipeSerializer<(any)>
get "special"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SlabToBlockRecipe$Type = ($SlabToBlockRecipe);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SlabToBlockRecipe_ = $SlabToBlockRecipe$Type;
}}
declare module "packages/org/violetmoon/quark/content/automation/block/$IronRodBlock" {
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$FluidState, $FluidState$Type} from "packages/net/minecraft/world/level/material/$FluidState"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$ToolAction, $ToolAction$Type} from "packages/net/minecraftforge/common/$ToolAction"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$IForgeBlock, $IForgeBlock$Type} from "packages/net/minecraftforge/common/extensions/$IForgeBlock"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$DirectionProperty, $DirectionProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$DirectionProperty"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$ICollateralMover, $ICollateralMover$Type} from "packages/org/violetmoon/zeta/api/$ICollateralMover"
import {$CreativeModeTab, $CreativeModeTab$Type} from "packages/net/minecraft/world/item/$CreativeModeTab"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ICollateralMover$MoveResult, $ICollateralMover$MoveResult$Type} from "packages/org/violetmoon/zeta/api/$ICollateralMover$MoveResult"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$IZetaBlock, $IZetaBlock$Type} from "packages/org/violetmoon/zeta/block/$IZetaBlock"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$UseOnContext, $UseOnContext$Type} from "packages/net/minecraft/world/item/context/$UseOnContext"
import {$EndRodBlock, $EndRodBlock$Type} from "packages/net/minecraft/world/level/block/$EndRodBlock"
import {$SoundType, $SoundType$Type} from "packages/net/minecraft/world/level/block/$SoundType"
import {$IPlantable, $IPlantable$Type} from "packages/net/minecraftforge/common/$IPlantable"
import {$IZetaBlockExtensions, $IZetaBlockExtensions$Type} from "packages/org/violetmoon/zeta/block/ext/$IZetaBlockExtensions"
import {$ResourceKey, $ResourceKey$Type} from "packages/net/minecraft/resources/$ResourceKey"
import {$ItemLike, $ItemLike$Type} from "packages/net/minecraft/world/level/$ItemLike"
import {$BlockAndTintGetter, $BlockAndTintGetter$Type} from "packages/net/minecraft/world/level/$BlockAndTintGetter"

export class $IronRodBlock extends $EndRodBlock implements $ICollateralMover, $IZetaBlock, $IZetaBlockExtensions, $IForgeBlock {
static readonly "CONNECTED": $BooleanProperty
static readonly "FACING": $DirectionProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(arg0: $ZetaModule$Type)

public "getModule"(): $ZetaModule
public "canSustainPlant"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type, arg4: $IPlantable$Type): boolean
public "isLadder"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "isConduitFrame"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): boolean
public "doesConditionApply"(): boolean
public "getEnchantPowerBonus"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type): float
public "shouldDisplayFluidOverlay"(arg0: $BlockState$Type, arg1: $BlockAndTintGetter$Type, arg2: $BlockPos$Type, arg3: $FluidState$Type): boolean
public "getToolModifiedState"(arg0: $BlockState$Type, arg1: $UseOnContext$Type, arg2: $ToolAction$Type, arg3: boolean): $BlockState
public "getBeaconColorMultiplier"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): (float)[]
public "makesOpenTrapdoorAboveClimbable"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockState$Type): boolean
public "getSoundType"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): $SoundType
public "isScaffolding"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "isCollateralMover"(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $Direction$Type, arg3: $BlockPos$Type): boolean
public "getLightEmission"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type): integer
public "isFlammable"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): boolean
public "canStickTo"(arg0: $BlockState$Type, arg1: $BlockState$Type): boolean
public "getFireSpreadSpeed"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "getFlammability"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "isStickyBlock"(arg0: $BlockState$Type): boolean
public "animateTick"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type, arg3: $RandomSource$Type): void
public "getCollateralMovement"(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $Direction$Type, arg3: $Direction$Type, arg4: $BlockPos$Type): $ICollateralMover$MoveResult
public "collisionExtendsVertically"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): boolean
public "getBlock"(): $Block
public "getFireSpreadSpeedZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "getFlammabilityZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "setCreativeTab"(arg0: $ResourceKey$Type<($CreativeModeTab$Type)>): $Block
public "setCreativeTab"(arg0: $ResourceKey$Type<($CreativeModeTab$Type)>, arg1: $ItemLike$Type, arg2: boolean): $Block
public "isConduitFrameZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): boolean
public "isLadderZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "isStickyBlockZeta"(arg0: $BlockState$Type): boolean
public "isScaffoldingZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "canStickToZeta"(arg0: $BlockState$Type, arg1: $BlockState$Type): boolean
public "isFlammableZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): boolean
public "getSoundTypeZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): $SoundType
public "makesOpenTrapdoorAboveClimbableZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockState$Type): boolean
public "canSustainPlantZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type, arg4: string): boolean
public "getToolModifiedStateZeta"(arg0: $BlockState$Type, arg1: $UseOnContext$Type, arg2: string, arg3: boolean): $BlockState
public "collisionExtendsVerticallyZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): boolean
public "shouldDisplayFluidOverlayZeta"(arg0: $BlockState$Type, arg1: $BlockAndTintGetter$Type, arg2: $BlockPos$Type, arg3: $FluidState$Type): boolean
public "getEnchantPowerBonusZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type): float
public "getBeaconColorMultiplierZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): (float)[]
public "getLightEmissionZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type): integer
public "isEnabled"(): boolean
public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
get "module"(): $ZetaModule
get "block"(): $Block
set "creativeTab"(value: $ResourceKey$Type<($CreativeModeTab$Type)>)
get "enabled"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IronRodBlock$Type = ($IronRodBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IronRodBlock_ = $IronRodBlock$Type;
}}
declare module "packages/org/violetmoon/zeta/network/$ZetaMessageSerializer" {
import {$ZetaMessageSerializer$Reader, $ZetaMessageSerializer$Reader$Type} from "packages/org/violetmoon/zeta/network/$ZetaMessageSerializer$Reader"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$ZetaMessageSerializer$Writer, $ZetaMessageSerializer$Writer$Type} from "packages/org/violetmoon/zeta/network/$ZetaMessageSerializer$Writer"

export class $ZetaMessageSerializer {

constructor()

public "readObject"(arg0: any, arg1: $FriendlyByteBuf$Type): void
public "writeObject"(arg0: any, arg1: $FriendlyByteBuf$Type): void
public "instantiateAndReadObject"<T>(arg0: $Class$Type<(T)>, arg1: $FriendlyByteBuf$Type): T
public "mapHandlers"<T>(arg0: $Class$Type<(T)>, arg1: $ZetaMessageSerializer$Reader$Type<(T)>, arg2: $ZetaMessageSerializer$Writer$Type<(T)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZetaMessageSerializer$Type = ($ZetaMessageSerializer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZetaMessageSerializer_ = $ZetaMessageSerializer$Type;
}}
declare module "packages/org/violetmoon/quark/content/management/module/$AutomaticToolRestockModule" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$ZPlayerDestroyItem, $ZPlayerDestroyItem$Type} from "packages/org/violetmoon/zeta/event/play/entity/player/$ZPlayerDestroyItem"
import {$Enchantment, $Enchantment$Type} from "packages/net/minecraft/world/item/enchantment/$Enchantment"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ZPlayerTick$End, $ZPlayerTick$End$Type} from "packages/org/violetmoon/zeta/event/play/entity/player/$ZPlayerTick$End"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZConfigChanged, $ZConfigChanged$Type} from "packages/org/violetmoon/zeta/event/load/$ZConfigChanged"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $AutomaticToolRestockModule extends $ZetaModule {
 "importantEnchants": $List<($Enchantment)>
 "itemsToIgnore": $List<($Item)>
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "onPlayerTick"(arg0: $ZPlayerTick$End$Type): void
public "configChanged"(arg0: $ZConfigChanged$Type): void
public "onToolBreak"(arg0: $ZPlayerDestroyItem$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AutomaticToolRestockModule$Type = ($AutomaticToolRestockModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AutomaticToolRestockModule_ = $AutomaticToolRestockModule$Type;
}}
declare module "packages/org/violetmoon/quark/mixin/mixins/client/accessor/$AccessorMultiPlayerGameMode" {
import {$LocalPlayer, $LocalPlayer$Type} from "packages/net/minecraft/client/player/$LocalPlayer"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"

export interface $AccessorMultiPlayerGameMode {

 "quark$performUseItemOn"(arg0: $LocalPlayer$Type, arg1: $InteractionHand$Type, arg2: $BlockHitResult$Type): $InteractionResult

(arg0: $LocalPlayer$Type, arg1: $InteractionHand$Type, arg2: $BlockHitResult$Type): $InteractionResult
}

export namespace $AccessorMultiPlayerGameMode {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AccessorMultiPlayerGameMode$Type = ($AccessorMultiPlayerGameMode);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AccessorMultiPlayerGameMode_ = $AccessorMultiPlayerGameMode$Type;
}}
declare module "packages/org/violetmoon/quark/content/tools/module/$ColorRunesModule" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Packet, $Packet$Type} from "packages/net/minecraft/network/protocol/$Packet"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ZLootTableLoad, $ZLootTableLoad$Type} from "packages/org/violetmoon/zeta/event/play/loading/$ZLootTableLoad"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$RuneColor, $RuneColor$Type} from "packages/org/violetmoon/quark/content/tools/base/$RuneColor"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$ZPlayerTick$Start, $ZPlayerTick$Start$Type} from "packages/org/violetmoon/zeta/event/play/entity/player/$ZPlayerTick$Start"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ZRegister, $ZRegister$Type} from "packages/org/violetmoon/zeta/event/load/$ZRegister"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ThrownTrident, $ThrownTrident$Type} from "packages/net/minecraft/world/entity/projectile/$ThrownTrident"
import {$ManualTrigger, $ManualTrigger$Type} from "packages/org/violetmoon/zeta/advancement/$ManualTrigger"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"

export class $ColorRunesModule extends $ZetaModule {
static readonly "TAG_RUNE_COLOR": string
static "rune": $Item
static "dungeonWeight": integer
static "netherFortressWeight": integer
static "jungleTempleWeight": integer
static "desertTempleWeight": integer
static "itemQuality": integer
static "fullRainbowTrigger": $ManualTrigger
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "register"(arg0: $ZRegister$Type): void
public "onPlayerTick"(arg0: $ZPlayerTick$Start$Type): void
public static "setTargetStack"(arg0: $ItemStack$Type): void
public static "getAppliedStackColor"(arg0: $ItemStack$Type): $RuneColor
public static "syncTrident"(arg0: $Consumer$Type<($Packet$Type<(any)>)>, arg1: $ThrownTrident$Type, arg2: boolean): void
public static "setTargetColor"(arg0: $RuneColor$Type): void
public static "getStackColor"(arg0: $ItemStack$Type): $RuneColor
public static "canHaveRune"(arg0: $ItemStack$Type): boolean
public static "appendRuneText"(arg0: $ItemStack$Type, arg1: $List$Type<($Component$Type)>, arg2: $Component$Type): void
public static "extremeRainbow"(arg0: $Component$Type): $Component
public static "withRune"(arg0: $ItemStack$Type, arg1: $RuneColor$Type): $ItemStack
public static "changeColor"(): $RuneColor
public "onLootTableLoad"(arg0: $ZLootTableLoad$Type): void
set "targetStack"(value: $ItemStack$Type)
set "targetColor"(value: $RuneColor$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ColorRunesModule$Type = ($ColorRunesModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ColorRunesModule_ = $ColorRunesModule$Type;
}}
declare module "packages/org/violetmoon/quark/content/building/module/$ShinglesModule" {
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$ZRegister, $ZRegister$Type} from "packages/org/violetmoon/zeta/event/load/$ZRegister"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $ShinglesModule extends $ZetaModule {
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "register"(arg0: $ZRegister$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ShinglesModule$Type = ($ShinglesModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ShinglesModule_ = $ShinglesModule$Type;
}}
declare module "packages/org/violetmoon/quark/content/world/config/$StoneTypeConfig" {
import {$OrePocketConfig, $OrePocketConfig$Type} from "packages/org/violetmoon/zeta/config/type/$OrePocketConfig"
import {$DimensionConfig, $DimensionConfig$Type} from "packages/org/violetmoon/zeta/config/type/$DimensionConfig"
import {$ConfigFlagManager, $ConfigFlagManager$Type} from "packages/org/violetmoon/zeta/config/$ConfigFlagManager"
import {$IConfigType, $IConfigType$Type} from "packages/org/violetmoon/zeta/config/type/$IConfigType"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $StoneTypeConfig implements $IConfigType {
 "dimensions": $DimensionConfig
 "oregenLower": $OrePocketConfig
 "oregenUpper": $OrePocketConfig

constructor(arg0: $DimensionConfig$Type)
constructor()

public "onReload"(arg0: $ZetaModule$Type, arg1: $ConfigFlagManager$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $StoneTypeConfig$Type = ($StoneTypeConfig);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $StoneTypeConfig_ = $StoneTypeConfig$Type;
}}
declare module "packages/org/violetmoon/quark/content/automation/module/$ChainsConnectBlocksModule" {
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$ZRegister, $ZRegister$Type} from "packages/org/violetmoon/zeta/event/load/$ZRegister"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZConfigChanged, $ZConfigChanged$Type} from "packages/org/violetmoon/zeta/event/load/$ZConfigChanged"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $ChainsConnectBlocksModule extends $ZetaModule {
static "staticEnabled": boolean
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "register"(arg0: $ZRegister$Type): void
public "configChanged"(arg0: $ZConfigChanged$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ChainsConnectBlocksModule$Type = ($ChainsConnectBlocksModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ChainsConnectBlocksModule_ = $ChainsConnectBlocksModule$Type;
}}
declare module "packages/org/violetmoon/zeta/client/$AlikeColorHandler" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$BlockColor, $BlockColor$Type} from "packages/net/minecraft/client/color/block/$BlockColor"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$ItemColor, $ItemColor$Type} from "packages/net/minecraft/client/color/item/$ItemColor"
import {$BlockAndTintGetter, $BlockAndTintGetter$Type} from "packages/net/minecraft/world/level/$BlockAndTintGetter"

export class $AlikeColorHandler implements $BlockColor, $ItemColor {

constructor<B extends $Block>(arg0: $Item$Type, arg1: $Function$Type<(B), ($BlockState$Type)>)
constructor<B extends $Block>(arg0: B, arg1: $Function$Type<(B), ($BlockState$Type)>)
constructor(arg0: $BlockState$Type)
constructor(arg0: $BlockState$Type, arg1: $ItemStack$Type)

public "getColor"(arg0: $ItemStack$Type, arg1: integer): integer
public "getColor"(arg0: $BlockState$Type, arg1: $BlockAndTintGetter$Type, arg2: $BlockPos$Type, arg3: integer): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AlikeColorHandler$Type = ($AlikeColorHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AlikeColorHandler_ = $AlikeColorHandler$Type;
}}
declare module "packages/org/violetmoon/quark/mixin/mixins/client/accessor/$AccessorModelManager" {
import {$BakedModel, $BakedModel$Type} from "packages/net/minecraft/client/resources/model/$BakedModel"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export interface $AccessorModelManager {

 "getBakedRegistry"(): $Map<($ResourceLocation), ($BakedModel)>

(): $Map<($ResourceLocation), ($BakedModel)>
}

export namespace $AccessorModelManager {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AccessorModelManager$Type = ($AccessorModelManager);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AccessorModelManager_ = $AccessorModelManager$Type;
}}
declare module "packages/org/violetmoon/zetaimplforge/client/event/load/$ForgeZAddBlockColorHandlers" {
import {$ZAddBlockColorHandlers, $ZAddBlockColorHandlers$Type} from "packages/org/violetmoon/zeta/client/event/load/$ZAddBlockColorHandlers"
import {$BlockColors, $BlockColors$Type} from "packages/net/minecraft/client/color/block/$BlockColors"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$BlockColor, $BlockColor$Type} from "packages/net/minecraft/client/color/block/$BlockColor"
import {$ZAddBlockColorHandlers$Post, $ZAddBlockColorHandlers$Post$Type} from "packages/org/violetmoon/zeta/client/event/load/$ZAddBlockColorHandlers$Post"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$RegisterColorHandlersEvent$Block, $RegisterColorHandlersEvent$Block$Type} from "packages/net/minecraftforge/client/event/$RegisterColorHandlersEvent$Block"

export class $ForgeZAddBlockColorHandlers implements $ZAddBlockColorHandlers {

constructor(arg0: $RegisterColorHandlersEvent$Block$Type)

public "register"(arg0: $BlockColor$Type, ...arg1: ($Block$Type)[]): void
public "getBlockColors"(): $BlockColors
public "makePostEvent"(): $ZAddBlockColorHandlers$Post
public "registerNamed"(arg0: $Function$Type<($Block$Type), ($BlockColor$Type)>, ...arg1: (string)[]): void
get "blockColors"(): $BlockColors
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ForgeZAddBlockColorHandlers$Type = ($ForgeZAddBlockColorHandlers);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ForgeZAddBlockColorHandlers_ = $ForgeZAddBlockColorHandlers$Type;
}}
declare module "packages/org/violetmoon/zeta/network/message/$C2SLoginFlag" {
import {$IZetaNetworkEventContext, $IZetaNetworkEventContext$Type} from "packages/org/violetmoon/zeta/network/$IZetaNetworkEventContext"
import {$BitSet, $BitSet$Type} from "packages/java/util/$BitSet"
import {$ZetaHandshakeMessage, $ZetaHandshakeMessage$Type} from "packages/org/violetmoon/zeta/network/$ZetaHandshakeMessage"

export class $C2SLoginFlag extends $ZetaHandshakeMessage {
 "flags": $BitSet
 "expectedLength": integer
 "expectedHash": integer

constructor()

public "receive"(arg0: $IZetaNetworkEventContext$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $C2SLoginFlag$Type = ($C2SLoginFlag);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $C2SLoginFlag_ = $C2SLoginFlag$Type;
}}
declare module "packages/org/violetmoon/zeta/recipe/$IZetaConditionSerializer" {
import {$JsonObject, $JsonObject$Type} from "packages/com/google/gson/$JsonObject"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$IZetaCondition, $IZetaCondition$Type} from "packages/org/violetmoon/zeta/recipe/$IZetaCondition"

export interface $IZetaConditionSerializer<T extends $IZetaCondition> {

 "write"(arg0: $JsonObject$Type, arg1: T): void
 "read"(arg0: $JsonObject$Type): T
 "getID"(): $ResourceLocation
 "getJson"(arg0: T): $JsonObject
}

export namespace $IZetaConditionSerializer {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IZetaConditionSerializer$Type<T> = ($IZetaConditionSerializer<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IZetaConditionSerializer_<T> = $IZetaConditionSerializer$Type<(T)>;
}}
declare module "packages/org/violetmoon/zeta/block/ext/$BlockExtensionFactory" {
import {$IZetaBlockExtensions, $IZetaBlockExtensions$Type} from "packages/org/violetmoon/zeta/block/ext/$IZetaBlockExtensions"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"

export interface $BlockExtensionFactory {

 "get"(arg0: $BlockState$Type): $IZetaBlockExtensions
 "get"(arg0: $Block$Type): $IZetaBlockExtensions
 "getInternal"(arg0: $Block$Type): $IZetaBlockExtensions

(arg0: $BlockState$Type): $IZetaBlockExtensions
}

export namespace $BlockExtensionFactory {
const DEFAULT: $BlockExtensionFactory
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BlockExtensionFactory$Type = ($BlockExtensionFactory);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BlockExtensionFactory_ = $BlockExtensionFactory$Type;
}}
declare module "packages/org/violetmoon/zeta/event/play/loading/$ZAttachCapabilities$ItemStackCaps" {
import {$ZetaCapability, $ZetaCapability$Type} from "packages/org/violetmoon/zeta/capability/$ZetaCapability"
import {$ICapabilityProvider, $ICapabilityProvider$Type} from "packages/net/minecraftforge/common/capabilities/$ICapabilityProvider"
import {$ZAttachCapabilities, $ZAttachCapabilities$Type} from "packages/org/violetmoon/zeta/event/play/loading/$ZAttachCapabilities"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ZetaCapabilityManager, $ZetaCapabilityManager$Type} from "packages/org/violetmoon/zeta/capability/$ZetaCapabilityManager"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export interface $ZAttachCapabilities$ItemStackCaps extends $ZAttachCapabilities<($ItemStack)> {

 "getObject"(): $ItemStack
/**
 * 
 * @deprecated
 */
 "addCapabilityForgeApi"(arg0: $ResourceLocation$Type, arg1: $ICapabilityProvider$Type): void
 "getCapabilityManager"(): $ZetaCapabilityManager
 "addCapability"<C>(arg0: $ResourceLocation$Type, arg1: $ZetaCapability$Type<(C)>, arg2: C): void
}

export namespace $ZAttachCapabilities$ItemStackCaps {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZAttachCapabilities$ItemStackCaps$Type = ($ZAttachCapabilities$ItemStackCaps);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZAttachCapabilities$ItemStackCaps_ = $ZAttachCapabilities$ItemStackCaps$Type;
}}
declare module "packages/org/violetmoon/quark/content/mobs/client/layer/$StonelingItemLayer" {
import {$RenderLayer, $RenderLayer$Type} from "packages/net/minecraft/client/renderer/entity/layers/$RenderLayer"
import {$RenderLayerParent, $RenderLayerParent$Type} from "packages/net/minecraft/client/renderer/entity/$RenderLayerParent"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$StonelingModel, $StonelingModel$Type} from "packages/org/violetmoon/quark/content/mobs/client/model/$StonelingModel"
import {$Stoneling, $Stoneling$Type} from "packages/org/violetmoon/quark/content/mobs/entity/$Stoneling"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"

export class $StonelingItemLayer extends $RenderLayer<($Stoneling), ($StonelingModel)> {

constructor(arg0: $RenderLayerParent$Type<($Stoneling$Type), ($StonelingModel$Type)>)

public "render"(arg0: $PoseStack$Type, arg1: $MultiBufferSource$Type, arg2: integer, arg3: $Stoneling$Type, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: float): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $StonelingItemLayer$Type = ($StonelingItemLayer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $StonelingItemLayer_ = $StonelingItemLayer$Type;
}}
declare module "packages/org/violetmoon/zetaimplforge/client/event/load/$ForgeZAddModels" {
import {$ZAddModels, $ZAddModels$Type} from "packages/org/violetmoon/zeta/client/event/load/$ZAddModels"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$ModelEvent$RegisterAdditional, $ModelEvent$RegisterAdditional$Type} from "packages/net/minecraftforge/client/event/$ModelEvent$RegisterAdditional"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $ForgeZAddModels extends $Record implements $ZAddModels {

constructor(e: $ModelEvent$RegisterAdditional$Type)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "e"(): $ModelEvent$RegisterAdditional
public "register"(arg0: $ResourceLocation$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ForgeZAddModels$Type = ($ForgeZAddModels);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ForgeZAddModels_ = $ForgeZAddModels$Type;
}}
declare module "packages/org/violetmoon/quark/base/util/$MutableVectorHolder" {
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"

export class $MutableVectorHolder {
 "x": double
 "y": double
 "z": double

constructor()

public "importFrom"(arg0: $Vec3$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MutableVectorHolder$Type = ($MutableVectorHolder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MutableVectorHolder_ = $MutableVectorHolder$Type;
}}
declare module "packages/org/violetmoon/zeta/event/bus/$LoadEvent" {
import {$Annotation, $Annotation$Type} from "packages/java/lang/annotation/$Annotation"
import {$Class, $Class$Type} from "packages/java/lang/$Class"

export interface $LoadEvent extends $Annotation {

 "equals"(arg0: any): boolean
 "toString"(): string
 "hashCode"(): integer
 "annotationType"(): $Class<(any)>
}

export namespace $LoadEvent {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LoadEvent$Type = ($LoadEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LoadEvent_ = $LoadEvent$Type;
}}
declare module "packages/org/violetmoon/quark/content/tools/client/render/entity/$TorchArrowRenderer" {
import {$EntityRendererProvider$Context, $EntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRendererProvider$Context"
import {$ArrowRenderer, $ArrowRenderer$Type} from "packages/net/minecraft/client/renderer/entity/$ArrowRenderer"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$TorchArrow, $TorchArrow$Type} from "packages/org/violetmoon/quark/content/tools/entity/$TorchArrow"

export class $TorchArrowRenderer extends $ArrowRenderer<($TorchArrow)> {
static readonly "TORCH_ARROW_LOCATION": $ResourceLocation
 "shadowRadius": float

constructor(arg0: $EntityRendererProvider$Context$Type)

public "getTextureLocation"(arg0: $TorchArrow$Type): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TorchArrowRenderer$Type = ($TorchArrowRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TorchArrowRenderer_ = $TorchArrowRenderer$Type;
}}
declare module "packages/org/violetmoon/zeta/client/event/play/$ZInput" {
import {$IZetaPlayEvent, $IZetaPlayEvent$Type} from "packages/org/violetmoon/zeta/event/bus/$IZetaPlayEvent"

export interface $ZInput extends $IZetaPlayEvent {

}

export namespace $ZInput {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZInput$Type = ($ZInput);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZInput_ = $ZInput$Type;
}}
declare module "packages/org/violetmoon/quark/content/mobs/client/render/entity/$WraithRenderer" {
import {$RenderLayer, $RenderLayer$Type} from "packages/net/minecraft/client/renderer/entity/layers/$RenderLayer"
import {$EntityRendererProvider$Context, $EntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRendererProvider$Context"
import {$Wraith, $Wraith$Type} from "packages/org/violetmoon/quark/content/mobs/entity/$Wraith"
import {$List, $List$Type} from "packages/java/util/$List"
import {$EntityModel, $EntityModel$Type} from "packages/net/minecraft/client/model/$EntityModel"
import {$MobRenderer, $MobRenderer$Type} from "packages/net/minecraft/client/renderer/entity/$MobRenderer"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$WraithModel, $WraithModel$Type} from "packages/org/violetmoon/quark/content/mobs/client/model/$WraithModel"

export class $WraithRenderer extends $MobRenderer<($Wraith), ($WraithModel)> {
static readonly "LEASH_RENDER_STEPS": integer
 "model": M
 "layers": $List<($RenderLayer<(T), (M)>)>
 "shadowRadius": float

constructor(arg0: $EntityRendererProvider$Context$Type)

public "getTextureLocation"(arg0: $Wraith$Type): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WraithRenderer$Type = ($WraithRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WraithRenderer_ = $WraithRenderer$Type;
}}
declare module "packages/org/violetmoon/quark/base/network/message/$RequestEmoteMessage" {
import {$IZetaMessage, $IZetaMessage$Type} from "packages/org/violetmoon/zeta/network/$IZetaMessage"
import {$IZetaNetworkEventContext, $IZetaNetworkEventContext$Type} from "packages/org/violetmoon/zeta/network/$IZetaNetworkEventContext"

export class $RequestEmoteMessage implements $IZetaMessage {
 "emote": string

constructor()
constructor(arg0: string)

public "receive"(arg0: $IZetaNetworkEventContext$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RequestEmoteMessage$Type = ($RequestEmoteMessage);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RequestEmoteMessage_ = $RequestEmoteMessage$Type;
}}
declare module "packages/org/violetmoon/zetaimplforge/event/play/entity/player/$ForgeZPlayer" {
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$ZPlayer, $ZPlayer$Type} from "packages/org/violetmoon/zeta/event/play/entity/player/$ZPlayer"
import {$PlayerEvent, $PlayerEvent$Type} from "packages/net/minecraftforge/event/entity/player/$PlayerEvent"

export class $ForgeZPlayer implements $ZPlayer {

constructor(arg0: $PlayerEvent$Type)

public "getEntity"(): $Player
public "getPlayer"(): $Player
get "entity"(): $Player
get "player"(): $Player
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ForgeZPlayer$Type = ($ForgeZPlayer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ForgeZPlayer_ = $ForgeZPlayer$Type;
}}
declare module "packages/org/violetmoon/quark/content/tools/recipe/$SmithingRuneRecipe" {
import {$RegistryAccess, $RegistryAccess$Type} from "packages/net/minecraft/core/$RegistryAccess"
import {$RecipeSerializer, $RecipeSerializer$Type} from "packages/net/minecraft/world/item/crafting/$RecipeSerializer"
import {$SmithingTrimRecipe, $SmithingTrimRecipe$Type} from "packages/net/minecraft/world/item/crafting/$SmithingTrimRecipe"
import {$Ingredient, $Ingredient$Type} from "packages/net/minecraft/world/item/crafting/$Ingredient"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$SmithingRuneRecipe$Serializer, $SmithingRuneRecipe$Serializer$Type} from "packages/org/violetmoon/quark/content/tools/recipe/$SmithingRuneRecipe$Serializer"

export class $SmithingRuneRecipe extends $SmithingTrimRecipe {
static readonly "SERIALIZER": $SmithingRuneRecipe$Serializer
readonly "template": $Ingredient
readonly "base": $Ingredient
readonly "addition": $Ingredient


public "getResultItem"(arg0: $RegistryAccess$Type): $ItemStack
public "isBaseIngredient"(arg0: $ItemStack$Type): boolean
public "isAdditionIngredient"(arg0: $ItemStack$Type): boolean
public "isTemplateIngredient"(arg0: $ItemStack$Type): boolean
public "getSerializer"(): $RecipeSerializer<(any)>
public "assemble"(arg0: $Container$Type, arg1: $RegistryAccess$Type): $ItemStack
public "getId"(): $ResourceLocation
public "matches"(arg0: $Container$Type, arg1: $Level$Type): boolean
get "serializer"(): $RecipeSerializer<(any)>
get "id"(): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SmithingRuneRecipe$Type = ($SmithingRuneRecipe);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SmithingRuneRecipe_ = $SmithingRuneRecipe$Type;
}}
declare module "packages/org/violetmoon/quark/content/tools/item/$PickarangItem" {
import {$Multimap, $Multimap$Type} from "packages/com/google/common/collect/$Multimap"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$InteractionResultHolder, $InteractionResultHolder$Type} from "packages/net/minecraft/world/$InteractionResultHolder"
import {$PickarangType, $PickarangType$Type} from "packages/org/violetmoon/quark/content/tools/config/$PickarangType"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$Enchantment, $Enchantment$Type} from "packages/net/minecraft/world/item/enchantment/$Enchantment"
import {$Attribute, $Attribute$Type} from "packages/net/minecraft/world/entity/ai/attributes/$Attribute"
import {$AttributeModifier, $AttributeModifier$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeModifier"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$ZetaItem, $ZetaItem$Type} from "packages/org/violetmoon/zeta/item/$ZetaItem"

export class $PickarangItem extends $ZetaItem {
readonly "type": $PickarangType<(any)>
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: string, arg1: $ZetaModule$Type, arg2: $Item$Properties$Type, arg3: $PickarangType$Type<(any)>)

public "isRepairableZeta"(arg0: $ItemStack$Type): boolean
public "getMaxDamageZeta"(arg0: $ItemStack$Type): integer
public "getDestroySpeed"(arg0: $ItemStack$Type, arg1: $BlockState$Type): float
public "use"(arg0: $Level$Type, arg1: $Player$Type, arg2: $InteractionHand$Type): $InteractionResultHolder<($ItemStack)>
public "hurtEnemy"(arg0: $ItemStack$Type, arg1: $LivingEntity$Type, arg2: $LivingEntity$Type): boolean
public "isCorrectToolForDrops"(arg0: $BlockState$Type): boolean
public "mineBlock"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $BlockState$Type, arg3: $BlockPos$Type, arg4: $LivingEntity$Type): boolean
public "getEnchantmentValue"(): integer
public "getDefaultAttributeModifiers"(arg0: $EquipmentSlot$Type): $Multimap<($Attribute), ($AttributeModifier)>
public "isValidRepairItem"(arg0: $ItemStack$Type, arg1: $ItemStack$Type): boolean
public "getEnchantmentValueZeta"(arg0: $ItemStack$Type): integer
public "canApplyAtEnchantingTableZeta"(arg0: $ItemStack$Type, arg1: $Enchantment$Type): boolean
public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
get "enchantmentValue"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PickarangItem$Type = ($PickarangItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PickarangItem_ = $PickarangItem$Type;
}}
declare module "packages/org/violetmoon/quark/content/building/client/render/be/$VariantChestRenderer" {
import {$Material, $Material$Type} from "packages/net/minecraft/client/resources/model/$Material"
import {$ChestBlockEntity, $ChestBlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$ChestBlockEntity"
import {$BlockEntityRendererProvider$Context, $BlockEntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/blockentity/$BlockEntityRendererProvider$Context"
import {$ChestType, $ChestType$Type} from "packages/net/minecraft/world/level/block/state/properties/$ChestType"
import {$ChestRenderer, $ChestRenderer$Type} from "packages/net/minecraft/client/renderer/blockentity/$ChestRenderer"

export class $VariantChestRenderer extends $ChestRenderer<($ChestBlockEntity)> {

constructor(arg0: $BlockEntityRendererProvider$Context$Type, arg1: boolean)

public "getMaterial"(arg0: $ChestBlockEntity$Type, arg1: $ChestType$Type): $Material
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $VariantChestRenderer$Type = ($VariantChestRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $VariantChestRenderer_ = $VariantChestRenderer$Type;
}}
declare module "packages/org/violetmoon/quark/content/world/feature/$GlowShroomsFeature" {
import {$BonusChestFeature, $BonusChestFeature$Type} from "packages/net/minecraft/world/level/levelgen/feature/$BonusChestFeature"
import {$RandomFeatureConfiguration, $RandomFeatureConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$RandomFeatureConfiguration"
import {$SpikeConfiguration, $SpikeConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$SpikeConfiguration"
import {$LakeFeature$Configuration, $LakeFeature$Configuration$Type} from "packages/net/minecraft/world/level/levelgen/feature/$LakeFeature$Configuration"
import {$BlockColumnConfiguration, $BlockColumnConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$BlockColumnConfiguration"
import {$MultifaceGrowthConfiguration, $MultifaceGrowthConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$MultifaceGrowthConfiguration"
import {$RootSystemConfiguration, $RootSystemConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$RootSystemConfiguration"
import {$UnderwaterMagmaConfiguration, $UnderwaterMagmaConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$UnderwaterMagmaConfiguration"
import {$RandomPatchConfiguration, $RandomPatchConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$RandomPatchConfiguration"
import {$ProbabilityFeatureConfiguration, $ProbabilityFeatureConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$ProbabilityFeatureConfiguration"
import {$TreeConfiguration, $TreeConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$TreeConfiguration"
import {$TwistingVinesConfig, $TwistingVinesConfig$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$TwistingVinesConfig"
import {$FeaturePlaceContext, $FeaturePlaceContext$Type} from "packages/net/minecraft/world/level/levelgen/feature/$FeaturePlaceContext"
import {$DripstoneClusterConfiguration, $DripstoneClusterConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$DripstoneClusterConfiguration"
import {$LayerConfiguration, $LayerConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$LayerConfiguration"
import {$HugeMushroomFeatureConfiguration, $HugeMushroomFeatureConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$HugeMushroomFeatureConfiguration"
import {$ReplaceBlockConfiguration, $ReplaceBlockConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$ReplaceBlockConfiguration"
import {$List, $List$Type} from "packages/java/util/$List"
import {$BlockStateConfiguration, $BlockStateConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$BlockStateConfiguration"
import {$SimpleBlockConfiguration, $SimpleBlockConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$SimpleBlockConfiguration"
import {$HugeFungusConfiguration, $HugeFungusConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/$HugeFungusConfiguration"
import {$DiskConfiguration, $DiskConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$DiskConfiguration"
import {$SeagrassFeature, $SeagrassFeature$Type} from "packages/net/minecraft/world/level/levelgen/feature/$SeagrassFeature"
import {$ReplaceSphereConfiguration, $ReplaceSphereConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$ReplaceSphereConfiguration"
import {$PlacementModifier, $PlacementModifier$Type} from "packages/net/minecraft/world/level/levelgen/placement/$PlacementModifier"
import {$FossilFeatureConfiguration, $FossilFeatureConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/$FossilFeatureConfiguration"
import {$DeltaFeatureConfiguration, $DeltaFeatureConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$DeltaFeatureConfiguration"
import {$PointedDripstoneConfiguration, $PointedDripstoneConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$PointedDripstoneConfiguration"
import {$SpringConfiguration, $SpringConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$SpringConfiguration"
import {$BlockPileConfiguration, $BlockPileConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$BlockPileConfiguration"
import {$OreConfiguration, $OreConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$OreConfiguration"
import {$SimpleRandomFeatureConfiguration, $SimpleRandomFeatureConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$SimpleRandomFeatureConfiguration"
import {$SculkPatchConfiguration, $SculkPatchConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$SculkPatchConfiguration"
import {$NetherForestVegetationConfig, $NetherForestVegetationConfig$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$NetherForestVegetationConfig"
import {$GeodeConfiguration, $GeodeConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$GeodeConfiguration"
import {$LargeDripstoneConfiguration, $LargeDripstoneConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$LargeDripstoneConfiguration"
import {$RandomBooleanFeatureConfiguration, $RandomBooleanFeatureConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$RandomBooleanFeatureConfiguration"
import {$ColumnFeatureConfiguration, $ColumnFeatureConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$ColumnFeatureConfiguration"
import {$CountConfiguration, $CountConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$CountConfiguration"
import {$VegetationPatchConfiguration, $VegetationPatchConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$VegetationPatchConfiguration"
import {$Feature, $Feature$Type} from "packages/net/minecraft/world/level/levelgen/feature/$Feature"
import {$NoneFeatureConfiguration, $NoneFeatureConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$NoneFeatureConfiguration"
import {$EndGatewayConfiguration, $EndGatewayConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$EndGatewayConfiguration"

export class $GlowShroomsFeature extends $Feature<($NoneFeatureConfiguration)> {
static readonly "NO_OP": $Feature<($NoneFeatureConfiguration)>
static readonly "TREE": $Feature<($TreeConfiguration)>
static readonly "FLOWER": $Feature<($RandomPatchConfiguration)>
static readonly "NO_BONEMEAL_FLOWER": $Feature<($RandomPatchConfiguration)>
static readonly "RANDOM_PATCH": $Feature<($RandomPatchConfiguration)>
static readonly "BLOCK_PILE": $Feature<($BlockPileConfiguration)>
static readonly "SPRING": $Feature<($SpringConfiguration)>
static readonly "CHORUS_PLANT": $Feature<($NoneFeatureConfiguration)>
static readonly "REPLACE_SINGLE_BLOCK": $Feature<($ReplaceBlockConfiguration)>
static readonly "VOID_START_PLATFORM": $Feature<($NoneFeatureConfiguration)>
static readonly "DESERT_WELL": $Feature<($NoneFeatureConfiguration)>
static readonly "FOSSIL": $Feature<($FossilFeatureConfiguration)>
static readonly "HUGE_RED_MUSHROOM": $Feature<($HugeMushroomFeatureConfiguration)>
static readonly "HUGE_BROWN_MUSHROOM": $Feature<($HugeMushroomFeatureConfiguration)>
static readonly "ICE_SPIKE": $Feature<($NoneFeatureConfiguration)>
static readonly "GLOWSTONE_BLOB": $Feature<($NoneFeatureConfiguration)>
static readonly "FREEZE_TOP_LAYER": $Feature<($NoneFeatureConfiguration)>
static readonly "VINES": $Feature<($NoneFeatureConfiguration)>
static readonly "BLOCK_COLUMN": $Feature<($BlockColumnConfiguration)>
static readonly "VEGETATION_PATCH": $Feature<($VegetationPatchConfiguration)>
static readonly "WATERLOGGED_VEGETATION_PATCH": $Feature<($VegetationPatchConfiguration)>
static readonly "ROOT_SYSTEM": $Feature<($RootSystemConfiguration)>
static readonly "MULTIFACE_GROWTH": $Feature<($MultifaceGrowthConfiguration)>
static readonly "UNDERWATER_MAGMA": $Feature<($UnderwaterMagmaConfiguration)>
static readonly "MONSTER_ROOM": $Feature<($NoneFeatureConfiguration)>
static readonly "BLUE_ICE": $Feature<($NoneFeatureConfiguration)>
static readonly "ICEBERG": $Feature<($BlockStateConfiguration)>
static readonly "FOREST_ROCK": $Feature<($BlockStateConfiguration)>
static readonly "DISK": $Feature<($DiskConfiguration)>
static readonly "LAKE": $Feature<($LakeFeature$Configuration)>
static readonly "ORE": $Feature<($OreConfiguration)>
static readonly "END_SPIKE": $Feature<($SpikeConfiguration)>
static readonly "END_ISLAND": $Feature<($NoneFeatureConfiguration)>
static readonly "END_GATEWAY": $Feature<($EndGatewayConfiguration)>
static readonly "SEAGRASS": $SeagrassFeature
static readonly "KELP": $Feature<($NoneFeatureConfiguration)>
static readonly "CORAL_TREE": $Feature<($NoneFeatureConfiguration)>
static readonly "CORAL_MUSHROOM": $Feature<($NoneFeatureConfiguration)>
static readonly "CORAL_CLAW": $Feature<($NoneFeatureConfiguration)>
static readonly "SEA_PICKLE": $Feature<($CountConfiguration)>
static readonly "SIMPLE_BLOCK": $Feature<($SimpleBlockConfiguration)>
static readonly "BAMBOO": $Feature<($ProbabilityFeatureConfiguration)>
static readonly "HUGE_FUNGUS": $Feature<($HugeFungusConfiguration)>
static readonly "NETHER_FOREST_VEGETATION": $Feature<($NetherForestVegetationConfig)>
static readonly "WEEPING_VINES": $Feature<($NoneFeatureConfiguration)>
static readonly "TWISTING_VINES": $Feature<($TwistingVinesConfig)>
static readonly "BASALT_COLUMNS": $Feature<($ColumnFeatureConfiguration)>
static readonly "DELTA_FEATURE": $Feature<($DeltaFeatureConfiguration)>
static readonly "REPLACE_BLOBS": $Feature<($ReplaceSphereConfiguration)>
static readonly "FILL_LAYER": $Feature<($LayerConfiguration)>
static readonly "BONUS_CHEST": $BonusChestFeature
static readonly "BASALT_PILLAR": $Feature<($NoneFeatureConfiguration)>
static readonly "SCATTERED_ORE": $Feature<($OreConfiguration)>
static readonly "RANDOM_SELECTOR": $Feature<($RandomFeatureConfiguration)>
static readonly "SIMPLE_RANDOM_SELECTOR": $Feature<($SimpleRandomFeatureConfiguration)>
static readonly "RANDOM_BOOLEAN_SELECTOR": $Feature<($RandomBooleanFeatureConfiguration)>
static readonly "GEODE": $Feature<($GeodeConfiguration)>
static readonly "DRIPSTONE_CLUSTER": $Feature<($DripstoneClusterConfiguration)>
static readonly "LARGE_DRIPSTONE": $Feature<($LargeDripstoneConfiguration)>
static readonly "POINTED_DRIPSTONE": $Feature<($PointedDripstoneConfiguration)>
static readonly "SCULK_PATCH": $Feature<($SculkPatchConfiguration)>

constructor()

public static "placed"(): $List<($PlacementModifier)>
public "place"(arg0: $FeaturePlaceContext$Type<($NoneFeatureConfiguration$Type)>): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GlowShroomsFeature$Type = ($GlowShroomsFeature);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GlowShroomsFeature_ = $GlowShroomsFeature$Type;
}}
declare module "packages/org/violetmoon/quark/content/client/module/$ChestSearchingModule" {
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$RGBAColorConfig, $RGBAColorConfig$Type} from "packages/org/violetmoon/quark/base/config/type/$RGBAColorConfig"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $ChestSearchingModule extends $ZetaModule {
 "overlayColor": $RGBAColorConfig
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "namesMatch"(arg0: $ItemStack$Type): boolean
public "searchBarShown"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ChestSearchingModule$Type = ($ChestSearchingModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ChestSearchingModule_ = $ChestSearchingModule$Type;
}}
declare module "packages/org/violetmoon/quark/mixin/mixins/accessor/$AccessorBlockItem" {
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"

export interface $AccessorBlockItem {

 "quark$getPlacementState"(arg0: $BlockPlaceContext$Type): $BlockState

(arg0: $BlockPlaceContext$Type): $BlockState
}

export namespace $AccessorBlockItem {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AccessorBlockItem$Type = ($AccessorBlockItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AccessorBlockItem_ = $AccessorBlockItem$Type;
}}
declare module "packages/org/violetmoon/zeta/registry/$DyeablesRegistry" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$BooleanSupplier, $BooleanSupplier$Type} from "packages/java/util/function/$BooleanSupplier"
import {$List, $List$Type} from "packages/java/util/$List"
import {$DyeItem, $DyeItem$Type} from "packages/net/minecraft/world/item/$DyeItem"
import {$ZRegister, $ZRegister$Type} from "packages/org/violetmoon/zeta/event/load/$ZRegister"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$DyeableLeatherItem, $DyeableLeatherItem$Type} from "packages/net/minecraft/world/item/$DyeableLeatherItem"
import {$ZRegister$Post, $ZRegister$Post$Type} from "packages/org/violetmoon/zeta/event/load/$ZRegister$Post"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $DyeablesRegistry {
readonly "dyeableConditions": $Map<($Item), ($BooleanSupplier)>
readonly "SURROGATE": $DyeableLeatherItem

constructor()

public "register"(arg0: $Item$Type): void
public "register"(arg0: $Item$Type, arg1: $ZetaModule$Type): void
public "register"(arg0: $Item$Type, arg1: $BooleanSupplier$Type): void
public "register"(arg0: $ZRegister$Type): void
public "getColor"(arg0: $ItemStack$Type): integer
public "registerPost"(arg0: $ZRegister$Post$Type): void
public "applyDye"(arg0: $ItemStack$Type, arg1: integer): void
public "isDyed"(arg0: $ItemStack$Type): boolean
public "getDye"(arg0: $ItemStack$Type): integer
public "isDyeable"(arg0: $ItemStack$Type): boolean
public "dyeItem"(arg0: $ItemStack$Type, arg1: $List$Type<($DyeItem$Type)>): $ItemStack
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DyeablesRegistry$Type = ($DyeablesRegistry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DyeablesRegistry_ = $DyeablesRegistry$Type;
}}
declare module "packages/org/violetmoon/quark/content/experimental/hax/$PseudoAccessorMerchantOffer" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $PseudoAccessorMerchantOffer {

 "quark$setTier"(arg0: integer): void
 "quark$getTier"(): integer
}

export namespace $PseudoAccessorMerchantOffer {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PseudoAccessorMerchantOffer$Type = ($PseudoAccessorMerchantOffer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PseudoAccessorMerchantOffer_ = $PseudoAccessorMerchantOffer$Type;
}}
declare module "packages/org/violetmoon/quark/content/automation/base/$RandomizerPowerState" {
import {$StringRepresentable$EnumCodec, $StringRepresentable$EnumCodec$Type} from "packages/net/minecraft/util/$StringRepresentable$EnumCodec"
import {$StringRepresentable, $StringRepresentable$Type} from "packages/net/minecraft/util/$StringRepresentable"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$Keyable, $Keyable$Type} from "packages/com/mojang/serialization/$Keyable"
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"

export class $RandomizerPowerState extends $Enum<($RandomizerPowerState)> implements $StringRepresentable {
static readonly "OFF": $RandomizerPowerState
static readonly "LEFT": $RandomizerPowerState
static readonly "RIGHT": $RandomizerPowerState


public static "values"(): ($RandomizerPowerState)[]
public static "valueOf"(arg0: string): $RandomizerPowerState
public "getSerializedName"(): string
public static "fromEnumWithMapping"<E extends ($Enum<(E)>) & ($StringRepresentable)>(arg0: $Supplier$Type<((E)[])>, arg1: $Function$Type<(string), (string)>): $StringRepresentable$EnumCodec<(E)>
public static "keys"(arg0: ($StringRepresentable$Type)[]): $Keyable
public static "fromEnum"<E extends ($Enum<(E)>) & ($StringRepresentable)>(arg0: $Supplier$Type<((E)[])>): $StringRepresentable$EnumCodec<(E)>
get "serializedName"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RandomizerPowerState$Type = (("left") | ("right") | ("off")) | ($RandomizerPowerState);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RandomizerPowerState_ = $RandomizerPowerState$Type;
}}
declare module "packages/org/violetmoon/zeta/event/bus/$Resultable" {
import {$ZResult, $ZResult$Type} from "packages/org/violetmoon/zeta/event/bus/$ZResult"

export interface $Resultable {

 "setResult"(arg0: $ZResult$Type): void
 "getResult"(): $ZResult
}

export namespace $Resultable {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Resultable$Type = ($Resultable);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Resultable_ = $Resultable$Type;
}}
declare module "packages/org/violetmoon/zeta/util/$BooleanSuppliers" {
import {$BooleanSupplier, $BooleanSupplier$Type} from "packages/java/util/function/$BooleanSupplier"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"

export class $BooleanSuppliers {
static readonly "TRUE": $BooleanSupplier
static readonly "FALSE": $BooleanSupplier


public static "or"(arg0: $BooleanSupplier$Type, arg1: $BooleanSupplier$Type): $BooleanSupplier
public static "and"(arg0: $BooleanSupplier$Type, arg1: $BooleanSupplier$Type): $BooleanSupplier
public static "not"(arg0: $BooleanSupplier$Type): $BooleanSupplier
public static "boxed"(arg0: $BooleanSupplier$Type): $Supplier<(boolean)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BooleanSuppliers$Type = ($BooleanSuppliers);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BooleanSuppliers_ = $BooleanSuppliers$Type;
}}
declare module "packages/org/violetmoon/quark/content/world/undergroundstyle/base/$BasicUndergroundStyle" {
import {$UndergroundStyle, $UndergroundStyle$Type} from "packages/org/violetmoon/quark/content/world/undergroundstyle/base/$UndergroundStyle"
import {$UndergroundStyleGenerator$Context, $UndergroundStyleGenerator$Context$Type} from "packages/org/violetmoon/quark/content/world/undergroundstyle/base/$UndergroundStyleGenerator$Context"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $BasicUndergroundStyle extends $UndergroundStyle {
 "floorState": $BlockState
 "ceilingState": $BlockState
 "wallState": $BlockState
readonly "mimicInside": boolean

constructor(arg0: $BlockState$Type, arg1: $BlockState$Type, arg2: $BlockState$Type)
constructor(arg0: $BlockState$Type, arg1: $BlockState$Type, arg2: $BlockState$Type, arg3: boolean)

public "fillInside"(arg0: $UndergroundStyleGenerator$Context$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type): void
public "fillCeiling"(arg0: $UndergroundStyleGenerator$Context$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type): void
public "fillFloor"(arg0: $UndergroundStyleGenerator$Context$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type): void
public "fillWall"(arg0: $UndergroundStyleGenerator$Context$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BasicUndergroundStyle$Type = ($BasicUndergroundStyle);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BasicUndergroundStyle_ = $BasicUndergroundStyle$Type;
}}
declare module "packages/org/violetmoon/quark/content/experimental/module/$VariantSelectorModule" {
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$VariantsConfig, $VariantsConfig$Type} from "packages/org/violetmoon/quark/content/experimental/config/$VariantsConfig"
import {$ZEntityJoinLevel, $ZEntityJoinLevel$Type} from "packages/org/violetmoon/zeta/event/play/entity/$ZEntityJoinLevel"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$ZPlayer$LoggedIn, $ZPlayer$LoggedIn$Type} from "packages/org/violetmoon/zeta/event/play/entity/player/$ZPlayer$LoggedIn"
import {$ZRegister, $ZRegister$Type} from "packages/org/violetmoon/zeta/event/load/$ZRegister"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZConfigChanged, $ZConfigChanged$Type} from "packages/org/violetmoon/zeta/event/load/$ZConfigChanged"

export class $VariantSelectorModule extends $ZetaModule {
static "convertVariantItems": boolean
static "enableHammer": boolean
static "showTooltip": boolean
static "alignHudToHotbar": boolean
static "showSimpleHud": boolean
static "showHud": boolean
static "enableGreenTint": boolean
static "overrideHeldItemRender": boolean
static "hudOffsetX": integer
static "hudOffsetY": integer
static "renderLikeCrossHair": boolean
static "smallerArrow": boolean
static "variants": $VariantsConfig
static "hammer": $Item
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "register"(arg0: $ZRegister$Type): void
public static "getVariantBlockFromOriginal"(arg0: $Block$Type, arg1: string): $Block
public static "getVariantBlockFromAny"(arg0: $Block$Type, arg1: string): $Block
public "onPlayerJoin"(arg0: $ZPlayer$LoggedIn$Type): void
public "configChanged"(arg0: $ZConfigChanged$Type): void
public static "getSavedVariant"(arg0: $Player$Type): string
public "addEntityToWorld"(arg0: $ZEntityJoinLevel$Type): void
public static "modifyBlockPlacementState"(arg0: $BlockState$Type, arg1: $BlockPlaceContext$Type): $BlockState
public static "setSavedVariant"(arg0: $ServerPlayer$Type, arg1: string): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $VariantSelectorModule$Type = ($VariantSelectorModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $VariantSelectorModule_ = $VariantSelectorModule$Type;
}}
declare module "packages/org/violetmoon/zeta/event/load/$ZCommonSetup" {
import {$IZetaLoadEvent, $IZetaLoadEvent$Type} from "packages/org/violetmoon/zeta/event/bus/$IZetaLoadEvent"
import {$Runnable, $Runnable$Type} from "packages/java/lang/$Runnable"

export interface $ZCommonSetup extends $IZetaLoadEvent {

 "enqueueWork"(arg0: $Runnable$Type): void

(arg0: $Runnable$Type): void
}

export namespace $ZCommonSetup {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZCommonSetup$Type = ($ZCommonSetup);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZCommonSetup_ = $ZCommonSetup$Type;
}}
declare module "packages/org/violetmoon/quark/content/experimental/module/$GameNerfsModule" {
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$ZLivingDrops, $ZLivingDrops$Type} from "packages/org/violetmoon/zeta/event/play/entity/living/$ZLivingDrops"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$ZEntityMobGriefing, $ZEntityMobGriefing$Type} from "packages/org/violetmoon/zeta/event/play/entity/$ZEntityMobGriefing"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ZAnvilUpdate, $ZAnvilUpdate$Type} from "packages/org/violetmoon/zeta/event/play/$ZAnvilUpdate"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ZLivingTick, $ZLivingTick$Type} from "packages/org/violetmoon/zeta/event/play/entity/living/$ZLivingTick"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZConfigChanged, $ZConfigChanged$Type} from "packages/org/violetmoon/zeta/event/load/$ZConfigChanged"

export class $GameNerfsModule extends $ZetaModule {
static "nerfMending": boolean
static "noNerfForMendingTwo": boolean
static "nerfVillagerDiscount": boolean
static "disableIronFarms": boolean
static "disableIceRoads": boolean
static "disableWoolDrops": boolean
static "enableSelectiveMobGriefing": boolean
static "enableDimensionLockedElytra": boolean
static "disableFallingBlockDupe": boolean
static "disablePistonPhysicsExploits": boolean
static "disableMushroomBlockRemoval": boolean
static "disableTripwireHookDupe": boolean
static "nonGriefingEntities": $List<(string)>
static "elytraAllowedDimensions": $List<(string)>
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public static "getBoatFriction"(arg0: float): float
public "onAnvilUpdate"(arg0: $ZAnvilUpdate$Type): void
public static "shouldMushroomsUseTreeReplacementLogic"(): boolean
public "configChanged"(arg0: $ZConfigChanged$Type): void
public static "stopFallingBlocksDuping"(): boolean
public static "shouldTripwireHooksCheckForAir"(): boolean
public "onMobGriefing"(arg0: $ZEntityMobGriefing$Type): void
public "onLoot"(arg0: $ZLivingDrops$Type): void
public static "canEntityUseElytra"(arg0: $LivingEntity$Type, arg1: boolean): boolean
public "onTick"(arg0: $ZLivingTick$Type): void
public static "limitMendingItems"(arg0: $Predicate$Type<($ItemStack$Type)>): $Predicate<($ItemStack)>
public static "stopPistonPhysicsExploits"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GameNerfsModule$Type = ($GameNerfsModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GameNerfsModule_ = $GameNerfsModule$Type;
}}
declare module "packages/org/violetmoon/quark/content/mobs/client/layer/forgotten/$ForgottenSheathedItemLayer" {
import {$RenderLayer, $RenderLayer$Type} from "packages/net/minecraft/client/renderer/entity/layers/$RenderLayer"
import {$RenderLayerParent, $RenderLayerParent$Type} from "packages/net/minecraft/client/renderer/entity/$RenderLayerParent"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$Forgotten, $Forgotten$Type} from "packages/org/violetmoon/quark/content/mobs/entity/$Forgotten"
import {$EntityModel, $EntityModel$Type} from "packages/net/minecraft/client/model/$EntityModel"
import {$ItemInHandRenderer, $ItemInHandRenderer$Type} from "packages/net/minecraft/client/renderer/$ItemInHandRenderer"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"

export class $ForgottenSheathedItemLayer<M extends $EntityModel<($Forgotten)>> extends $RenderLayer<($Forgotten), (M)> {

constructor(arg0: $RenderLayerParent$Type<($Forgotten$Type), (M)>, arg1: $ItemInHandRenderer$Type)

public "render"(arg0: $PoseStack$Type, arg1: $MultiBufferSource$Type, arg2: integer, arg3: $Forgotten$Type, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: float): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ForgottenSheathedItemLayer$Type<M> = ($ForgottenSheathedItemLayer<(M)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ForgottenSheathedItemLayer_<M> = $ForgottenSheathedItemLayer$Type<(M)>;
}}
declare module "packages/org/violetmoon/quark/base/recipe/$ExclusionRecipe" {
import {$InputReplacement, $InputReplacement$Type} from "packages/dev/latvian/mods/kubejs/recipe/$InputReplacement"
import {$ExclusionRecipe$Serializer, $ExclusionRecipe$Serializer$Type} from "packages/org/violetmoon/quark/base/recipe/$ExclusionRecipe$Serializer"
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$RecipeSerializer, $RecipeSerializer$Type} from "packages/net/minecraft/world/item/crafting/$RecipeSerializer"
import {$RecipeSchema, $RecipeSchema$Type} from "packages/dev/latvian/mods/kubejs/recipe/schema/$RecipeSchema"
import {$Ingredient, $Ingredient$Type} from "packages/net/minecraft/world/item/crafting/$Ingredient"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$CraftingBookCategory, $CraftingBookCategory$Type} from "packages/net/minecraft/world/item/crafting/$CraftingBookCategory"
import {$RegistryAccess, $RegistryAccess$Type} from "packages/net/minecraft/core/$RegistryAccess"
import {$CraftingRecipe, $CraftingRecipe$Type} from "packages/net/minecraft/world/item/crafting/$CraftingRecipe"
import {$List, $List$Type} from "packages/java/util/$List"
import {$CraftingContainer, $CraftingContainer$Type} from "packages/net/minecraft/world/inventory/$CraftingContainer"
import {$ReplacementMatch, $ReplacementMatch$Type} from "packages/dev/latvian/mods/kubejs/recipe/$ReplacementMatch"
import {$OutputReplacement, $OutputReplacement$Type} from "packages/dev/latvian/mods/kubejs/recipe/$OutputReplacement"

export class $ExclusionRecipe implements $CraftingRecipe {
static readonly "SERIALIZER": $ExclusionRecipe$Serializer

constructor(arg0: $CraftingRecipe$Type, arg1: $List$Type<($ResourceLocation$Type)>)

public "matches"(arg0: $CraftingContainer$Type, arg1: $Level$Type): boolean
public "getRemainingItems"(arg0: $CraftingContainer$Type): $NonNullList<($ItemStack)>
public "getResultItem"(arg0: $RegistryAccess$Type): $ItemStack
public "getIngredients"(): $NonNullList<($Ingredient)>
public "getToastSymbol"(): $ItemStack
public "canCraftInDimensions"(arg0: integer, arg1: integer): boolean
public "getSerializer"(): $RecipeSerializer<(any)>
public "category"(): $CraftingBookCategory
public "assemble"(arg0: $CraftingContainer$Type, arg1: $RegistryAccess$Type): $ItemStack
public "getId"(): $ResourceLocation
public "isSpecial"(): boolean
public "isIncomplete"(): boolean
public "showNotification"(): boolean
public "getType"(): $ResourceLocation
public "replaceOutput"(match: $ReplacementMatch$Type, arg1: $OutputReplacement$Type): boolean
public "setGroup"(group: string): void
public "hasInput"(match: $ReplacementMatch$Type): boolean
public "getOrCreateId"(): $ResourceLocation
public "getSchema"(): $RecipeSchema
public "replaceInput"(match: $ReplacementMatch$Type, arg1: $InputReplacement$Type): boolean
public "hasOutput"(match: $ReplacementMatch$Type): boolean
public "getGroup"(): string
public "getMod"(): string
get "ingredients"(): $NonNullList<($Ingredient)>
get "toastSymbol"(): $ItemStack
get "serializer"(): $RecipeSerializer<(any)>
get "id"(): $ResourceLocation
get "special"(): boolean
get "incomplete"(): boolean
get "type"(): $ResourceLocation
set "group"(value: string)
get "orCreateId"(): $ResourceLocation
get "schema"(): $RecipeSchema
get "group"(): string
get "mod"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ExclusionRecipe$Type = ($ExclusionRecipe);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ExclusionRecipe_ = $ExclusionRecipe$Type;
}}
declare module "packages/org/violetmoon/quark/content/tweaks/module/$CampfiresBoostElytraModule" {
import {$ZPlayerTick$Start, $ZPlayerTick$Start$Type} from "packages/org/violetmoon/zeta/event/play/entity/player/$ZPlayerTick$Start"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $CampfiresBoostElytraModule extends $ZetaModule {
 "boostStrength": double
 "maxSpeed": double
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "onPlayerTick"(arg0: $ZPlayerTick$Start$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CampfiresBoostElytraModule$Type = ($CampfiresBoostElytraModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CampfiresBoostElytraModule_ = $CampfiresBoostElytraModule$Type;
}}
declare module "packages/org/violetmoon/quark/content/tweaks/module/$ImprovedSpongesModule" {
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ZRightClickItem, $ZRightClickItem$Type} from "packages/org/violetmoon/zeta/event/play/entity/player/$ZRightClickItem"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $ImprovedSpongesModule extends $ZetaModule {
static "maximumWaterDrain": integer
static "maximumCrawlDistance": integer
static "enablePlacingOnWater": boolean
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "onUse"(arg0: $ZRightClickItem$Type): void
public static "crawlLimit"(arg0: integer): integer
public static "drainLimit"(arg0: integer): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ImprovedSpongesModule$Type = ($ImprovedSpongesModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ImprovedSpongesModule_ = $ImprovedSpongesModule$Type;
}}
declare module "packages/org/violetmoon/zeta/item/$ZetaItem" {
import {$BooleanSupplier, $BooleanSupplier$Type} from "packages/java/util/function/$BooleanSupplier"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$IForgeItem, $IForgeItem$Type} from "packages/net/minecraftforge/common/extensions/$IForgeItem"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$RecipeType, $RecipeType$Type} from "packages/net/minecraft/world/item/crafting/$RecipeType"
import {$ToolAction, $ToolAction$Type} from "packages/net/minecraftforge/common/$ToolAction"
import {$IZetaItem, $IZetaItem$Type} from "packages/org/violetmoon/zeta/item/$IZetaItem"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$CreativeModeTab, $CreativeModeTab$Type} from "packages/net/minecraft/world/item/$CreativeModeTab"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$IZetaItemExtensions, $IZetaItemExtensions$Type} from "packages/org/violetmoon/zeta/item/ext/$IZetaItemExtensions"
import {$EnderMan, $EnderMan$Type} from "packages/net/minecraft/world/entity/monster/$EnderMan"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$UseOnContext, $UseOnContext$Type} from "packages/net/minecraft/world/item/context/$UseOnContext"
import {$Enchantment, $Enchantment$Type} from "packages/net/minecraft/world/item/enchantment/$Enchantment"
import {$ResourceKey, $ResourceKey$Type} from "packages/net/minecraft/resources/$ResourceKey"
import {$ItemLike, $ItemLike$Type} from "packages/net/minecraft/world/level/$ItemLike"
import {$ItemEntity, $ItemEntity$Type} from "packages/net/minecraft/world/entity/item/$ItemEntity"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $ZetaItem extends $Item implements $IZetaItem, $IZetaItemExtensions, $IForgeItem {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: string, arg1: $ZetaModule$Type, arg2: $Item$Properties$Type)

public "getModule"(): $ZetaModule
public "doesConditionApply"(): boolean
public "setCondition"(arg0: $BooleanSupplier$Type): $ZetaItem
public "getEnchantmentLevel"(arg0: $ItemStack$Type, arg1: $Enchantment$Type): integer
public "canPerformAction"(arg0: $ItemStack$Type, arg1: $ToolAction$Type): boolean
public "canElytraFly"(arg0: $ItemStack$Type, arg1: $LivingEntity$Type): boolean
public "shouldCauseReequipAnimation"(arg0: $ItemStack$Type, arg1: $ItemStack$Type, arg2: boolean): boolean
public "getEnchantmentValue"(arg0: $ItemStack$Type): integer
public "getDefaultTooltipHideFlags"(arg0: $ItemStack$Type): integer
public "canApplyAtEnchantingTable"(arg0: $ItemStack$Type, arg1: $Enchantment$Type): boolean
public "isRepairable"(arg0: $ItemStack$Type): boolean
public "getMaxDamage"(arg0: $ItemStack$Type): integer
public "onItemUseFirst"(arg0: $ItemStack$Type, arg1: $UseOnContext$Type): $InteractionResult
public "isBookEnchantable"(arg0: $ItemStack$Type, arg1: $ItemStack$Type): boolean
public "getArmorTexture"(arg0: $ItemStack$Type, arg1: $Entity$Type, arg2: $EquipmentSlot$Type, arg3: string): string
public "doesSneakBypassUse"(arg0: $ItemStack$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $Player$Type): boolean
public "canEquip"(arg0: $ItemStack$Type, arg1: $EquipmentSlot$Type, arg2: $Entity$Type): boolean
public "damageItem"(arg0: $ItemStack$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $Consumer$Type<(any)>): integer
public "getBurnTime"(arg0: $ItemStack$Type, arg1: $RecipeType$Type<(any)>): integer
public "isEnderMask"(arg0: $ItemStack$Type, arg1: $Player$Type, arg2: $EnderMan$Type): boolean
public "getAllEnchantments"(arg0: $ItemStack$Type): $Map<(any), (any)>
public "onEntityItemUpdate"(arg0: $ItemStack$Type, arg1: $ItemEntity$Type): boolean
public "getItem"(): $Item
public "setCreativeTab"(arg0: $ResourceKey$Type<($CreativeModeTab$Type)>): $Item
public "setCreativeTab"(arg0: $ResourceKey$Type<($CreativeModeTab$Type)>, arg1: $ItemLike$Type, arg2: boolean): $Item
public "isRepairableZeta"(arg0: $ItemStack$Type): boolean
public "onItemUseFirstZeta"(arg0: $ItemStack$Type, arg1: $UseOnContext$Type): $InteractionResult
public "getBurnTimeZeta"(arg0: $ItemStack$Type, arg1: $RecipeType$Type<(any)>): integer
public "damageItemZeta"<T extends $LivingEntity>(arg0: $ItemStack$Type, arg1: integer, arg2: T, arg3: $Consumer$Type<(T)>): integer
public "isEnderMaskZeta"(arg0: $ItemStack$Type, arg1: $Player$Type, arg2: $EnderMan$Type): boolean
public "canEquipZeta"(arg0: $ItemStack$Type, arg1: $EquipmentSlot$Type, arg2: $Entity$Type): boolean
public "canElytraFlyZeta"(arg0: $ItemStack$Type, arg1: $LivingEntity$Type): boolean
public "canShearZeta"(arg0: $ItemStack$Type): boolean
public "getMaxDamageZeta"(arg0: $ItemStack$Type): integer
public "getEnchantmentLevelZeta"(arg0: $ItemStack$Type, arg1: $Enchantment$Type): integer
public "getAllEnchantmentsZeta"(arg0: $ItemStack$Type): $Map<($Enchantment), (integer)>
public "getEnchantmentValueZeta"(arg0: $ItemStack$Type): integer
public "shouldCauseReequipAnimationZeta"(arg0: $ItemStack$Type, arg1: $ItemStack$Type, arg2: boolean): boolean
public "getArmorTextureZeta"(arg0: $ItemStack$Type, arg1: $Entity$Type, arg2: $EquipmentSlot$Type, arg3: string): string
public "canApplyAtEnchantingTableZeta"(arg0: $ItemStack$Type, arg1: $Enchantment$Type): boolean
public "doesSneakBypassUseZeta"(arg0: $ItemStack$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $Player$Type): boolean
public "getDefaultTooltipHideFlagsZeta"(arg0: $ItemStack$Type): integer
public "onEntityItemUpdateZeta"(arg0: $ItemStack$Type, arg1: $ItemEntity$Type): boolean
public "isBookEnchantableZeta"(arg0: $ItemStack$Type, arg1: $ItemStack$Type): boolean
public "isEnabled"(): boolean
public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
get "module"(): $ZetaModule
set "condition"(value: $BooleanSupplier$Type)
get "item"(): $Item
set "creativeTab"(value: $ResourceKey$Type<($CreativeModeTab$Type)>)
get "enabled"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZetaItem$Type = ($ZetaItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZetaItem_ = $ZetaItem$Type;
}}
declare module "packages/org/violetmoon/quark/integration/terrablender/$AbstractUndergroundBiomeHandler" {
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Biome, $Biome$Type} from "packages/net/minecraft/world/level/biome/$Biome"
import {$Climate$ParameterPoint, $Climate$ParameterPoint$Type} from "packages/net/minecraft/world/level/biome/$Climate$ParameterPoint"
import {$OverworldBiomeBuilder, $OverworldBiomeBuilder$Type} from "packages/net/minecraft/world/level/biome/$OverworldBiomeBuilder"
import {$Pair, $Pair$Type} from "packages/com/mojang/datafixers/util/$Pair"
import {$ResourceKey, $ResourceKey$Type} from "packages/net/minecraft/resources/$ResourceKey"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$AbstractUndergroundBiomeHandler$UndergroundBiomeDesc, $AbstractUndergroundBiomeHandler$UndergroundBiomeDesc$Type} from "packages/org/violetmoon/quark/integration/terrablender/$AbstractUndergroundBiomeHandler$UndergroundBiomeDesc"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $AbstractUndergroundBiomeHandler {

constructor()

public "registerUndergroundBiome"(arg0: $AbstractUndergroundBiomeHandler$UndergroundBiomeDesc$Type): void
public "registerUndergroundBiome"(arg0: $ZetaModule$Type, arg1: $ResourceLocation$Type, arg2: $Climate$ParameterPoint$Type): void
public "modifyVanillaOverworldPreset"(arg0: $OverworldBiomeBuilder$Type, arg1: $Consumer$Type<($Pair$Type<($Climate$ParameterPoint$Type), ($ResourceKey$Type<($Biome$Type)>)>)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AbstractUndergroundBiomeHandler$Type = ($AbstractUndergroundBiomeHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AbstractUndergroundBiomeHandler_ = $AbstractUndergroundBiomeHandler$Type;
}}
declare module "packages/org/violetmoon/quark/base/item/boat/$QuarkChestBoat" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Boat$Type, $Boat$Type$Type} from "packages/net/minecraft/world/entity/vehicle/$Boat$Type"
import {$ChestBoat, $ChestBoat$Type} from "packages/net/minecraft/world/entity/vehicle/$ChestBoat"
import {$WoodSetHandler$QuarkBoatType, $WoodSetHandler$QuarkBoatType$Type} from "packages/org/violetmoon/quark/base/handler/$WoodSetHandler$QuarkBoatType"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Boat$Status, $Boat$Status$Type} from "packages/net/minecraft/world/entity/vehicle/$Boat$Status"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$IQuarkBoat, $IQuarkBoat$Type} from "packages/org/violetmoon/quark/base/item/boat/$IQuarkBoat"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$ItemLike, $ItemLike$Type} from "packages/net/minecraft/world/level/$ItemLike"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$ItemEntity, $ItemEntity$Type} from "packages/net/minecraft/world/entity/item/$ItemEntity"

export class $QuarkChestBoat extends $ChestBoat implements $IQuarkBoat {
static readonly "PADDLE_LEFT": integer
static readonly "PADDLE_RIGHT": integer
static readonly "PADDLE_SOUND_TIME": double
static readonly "BUBBLE_TIME": integer
 "status": $Boat$Status
 "lastYd": double
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(arg0: $EntityType$Type<(any)>, arg1: $Level$Type)
constructor(arg0: $Level$Type, arg1: double, arg2: double, arg3: double)

public "getDropItem"(): $Item
public "setQuarkBoatType"(arg0: string): void
public "setQuarkBoatTypeObj"(arg0: $WoodSetHandler$QuarkBoatType$Type): void
public "getQuarkBoatTypeObj"(): $WoodSetHandler$QuarkBoatType
public "getQuarkBoatType"(): string
public "setVariant"(arg0: $Boat$Type$Type): void
public "spawnAtLocation"(arg0: $ItemLike$Type): $ItemEntity
public "getVariant"(): $Boat$Type
public "isRemoved"(): boolean
public "position"(): $Vec3
public "self"(): $Container
public static "stillValidBlockEntity"(arg0: $BlockEntity$Type, arg1: $Player$Type, arg2: integer): boolean
public static "stillValidBlockEntity"(arg0: $BlockEntity$Type, arg1: $Player$Type): boolean
public "getDisplayName"(): $Component
public static "tryClear"(arg0: any): void
get "dropItem"(): $Item
set "quarkBoatType"(value: string)
set "quarkBoatTypeObj"(value: $WoodSetHandler$QuarkBoatType$Type)
get "quarkBoatTypeObj"(): $WoodSetHandler$QuarkBoatType
get "quarkBoatType"(): string
set "variant"(value: $Boat$Type$Type)
get "variant"(): $Boat$Type
get "removed"(): boolean
get "displayName"(): $Component
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $QuarkChestBoat$Type = ($QuarkChestBoat);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $QuarkChestBoat_ = $QuarkChestBoat$Type;
}}
declare module "packages/org/violetmoon/zeta/item/ext/$ItemExtensionFactory" {
import {$IZetaItemExtensions, $IZetaItemExtensions$Type} from "packages/org/violetmoon/zeta/item/ext/$IZetaItemExtensions"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export interface $ItemExtensionFactory {

 "get"(arg0: $ItemStack$Type): $IZetaItemExtensions
 "getInternal"(arg0: $ItemStack$Type): $IZetaItemExtensions

(arg0: $ItemStack$Type): $IZetaItemExtensions
}

export namespace $ItemExtensionFactory {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ItemExtensionFactory$Type = ($ItemExtensionFactory);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ItemExtensionFactory_ = $ItemExtensionFactory$Type;
}}
declare module "packages/org/violetmoon/zeta/recipe/$IZetaIngredient" {
import {$Ingredient, $Ingredient$Type} from "packages/net/minecraft/world/item/crafting/$Ingredient"
import {$IZetaIngredientSerializer, $IZetaIngredientSerializer$Type} from "packages/org/violetmoon/zeta/recipe/$IZetaIngredientSerializer"

export interface $IZetaIngredient<T extends $Ingredient> {

 "zetaGetSerializer"(): $IZetaIngredientSerializer<(T)>

(): $IZetaIngredientSerializer<(T)>
}

export namespace $IZetaIngredient {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IZetaIngredient$Type<T> = ($IZetaIngredient<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IZetaIngredient_<T> = $IZetaIngredient$Type<(T)>;
}}
declare module "packages/org/violetmoon/quark/content/tools/base/$RuneColor" {
import {$StringRepresentable$EnumCodec, $StringRepresentable$EnumCodec$Type} from "packages/net/minecraft/util/$StringRepresentable$EnumCodec"
import {$StringRepresentable, $StringRepresentable$Type} from "packages/net/minecraft/util/$StringRepresentable"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$Keyable, $Keyable$Type} from "packages/com/mojang/serialization/$Keyable"
import {$DyeColor, $DyeColor$Type} from "packages/net/minecraft/world/item/$DyeColor"
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$TextColor, $TextColor$Type} from "packages/net/minecraft/network/chat/$TextColor"

export class $RuneColor implements $StringRepresentable {
static readonly "WHITE": $RuneColor
static readonly "ORANGE": $RuneColor
static readonly "MAGENTA": $RuneColor
static readonly "LIGHT_BLUE": $RuneColor
static readonly "YELLOW": $RuneColor
static readonly "LIME": $RuneColor
static readonly "PINK": $RuneColor
static readonly "GRAY": $RuneColor
static readonly "LIGHT_GRAY": $RuneColor
static readonly "CYAN": $RuneColor
static readonly "PURPLE": $RuneColor
static readonly "BLUE": $RuneColor
static readonly "BROWN": $RuneColor
static readonly "GREEN": $RuneColor
static readonly "RED": $RuneColor
static readonly "BLACK": $RuneColor
static readonly "RAINBOW": $RuneColor
static readonly "BLANK": $RuneColor

constructor(arg0: string, arg1: integer, arg2: $DyeColor$Type)

public "getName"(): string
public static "values"(): $Collection<($RuneColor)>
public "getSerializedName"(): string
public static "byDyeColor"(arg0: $DyeColor$Type): $RuneColor
public "getDyeColor"(): $DyeColor
public static "byName"(arg0: string): $RuneColor
public "getTextColor"(): $TextColor
public static "fromEnumWithMapping"<E extends ($Enum<(E)>) & ($StringRepresentable)>(arg0: $Supplier$Type<((E)[])>, arg1: $Function$Type<(string), (string)>): $StringRepresentable$EnumCodec<(E)>
public static "keys"(arg0: ($StringRepresentable$Type)[]): $Keyable
public static "fromEnum"<E extends ($Enum<(E)>) & ($StringRepresentable)>(arg0: $Supplier$Type<((E)[])>): $StringRepresentable$EnumCodec<(E)>
get "name"(): string
get "serializedName"(): string
get "dyeColor"(): $DyeColor
get "textColor"(): $TextColor
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RuneColor$Type = ($RuneColor);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RuneColor_ = $RuneColor$Type;
}}
declare module "packages/org/violetmoon/zeta/event/play/entity/$ZEntityConstruct" {
import {$IZetaPlayEvent, $IZetaPlayEvent$Type} from "packages/org/violetmoon/zeta/event/bus/$IZetaPlayEvent"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export interface $ZEntityConstruct extends $IZetaPlayEvent {

 "getEntity"(): $Entity

(): $Entity
}

export namespace $ZEntityConstruct {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZEntityConstruct$Type = ($ZEntityConstruct);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZEntityConstruct_ = $ZEntityConstruct$Type;
}}
declare module "packages/org/violetmoon/quark/base/network/message/$DoubleDoorMessage" {
import {$IZetaMessage, $IZetaMessage$Type} from "packages/org/violetmoon/zeta/network/$IZetaMessage"
import {$IZetaNetworkEventContext, $IZetaNetworkEventContext$Type} from "packages/org/violetmoon/zeta/network/$IZetaNetworkEventContext"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $DoubleDoorMessage implements $IZetaMessage {
 "pos": $BlockPos

constructor()
constructor(arg0: $BlockPos$Type)

public "receive"(arg0: $IZetaNetworkEventContext$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DoubleDoorMessage$Type = ($DoubleDoorMessage);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DoubleDoorMessage_ = $DoubleDoorMessage$Type;
}}
declare module "packages/org/violetmoon/quark/addons/oddities/magnetsystem/$MagnetSystem" {
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$ICollateralMover$MoveResult, $ICollateralMover$MoveResult$Type} from "packages/org/violetmoon/zeta/api/$ICollateralMover$MoveResult"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$IMagnetMoveAction, $IMagnetMoveAction$Type} from "packages/org/violetmoon/quark/api/$IMagnetMoveAction"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$MagnetBlockEntity, $MagnetBlockEntity$Type} from "packages/org/violetmoon/quark/addons/oddities/block/be/$MagnetBlockEntity"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$ZRecipeCrawl$Digest, $ZRecipeCrawl$Digest$Type} from "packages/org/violetmoon/zeta/event/play/$ZRecipeCrawl$Digest"
import {$IMagnetTracker, $IMagnetTracker$Type} from "packages/org/violetmoon/quark/api/$IMagnetTracker"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $MagnetSystem {

constructor()

public static "tick"(arg0: boolean, arg1: $Level$Type): void
public static "onRecipeReset"(): void
public static "onDigest"(arg0: $ZRecipeCrawl$Digest$Type): void
public static "getMoveAction"(arg0: $Block$Type): $IMagnetMoveAction
public static "applyForce"(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: integer, arg3: boolean, arg4: $Direction$Type, arg5: integer, arg6: $BlockPos$Type): void
public static "isBlockMagnetic"(arg0: $BlockState$Type): boolean
public static "isItemMagnetic"(arg0: $Item$Type): boolean
public static "getTracker"(arg0: $Level$Type): $IMagnetTracker
public static "getPushAction"(arg0: $MagnetBlockEntity$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: $Direction$Type): $ICollateralMover$MoveResult
public static "canBlockBeMagneticallyMoved"(arg0: $BlockState$Type, arg1: $BlockPos$Type, arg2: $Level$Type, arg3: $Direction$Type, arg4: $BlockEntity$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MagnetSystem$Type = ($MagnetSystem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MagnetSystem_ = $MagnetSystem$Type;
}}
declare module "packages/org/violetmoon/quark/base/util/$CorundumColor" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$MapColor, $MapColor$Type} from "packages/net/minecraft/world/level/material/$MapColor"

export class $CorundumColor extends $Enum<($CorundumColor)> {
static readonly "RED": $CorundumColor
static readonly "ORANGE": $CorundumColor
static readonly "YELLOW": $CorundumColor
static readonly "GREEN": $CorundumColor
static readonly "BLUE": $CorundumColor
static readonly "INDIGO": $CorundumColor
static readonly "VIOLET": $CorundumColor
static readonly "WHITE": $CorundumColor
static readonly "BLACK": $CorundumColor
readonly "name": string
readonly "beaconColor": integer
readonly "mapColor": $MapColor


public static "values"(): ($CorundumColor)[]
public static "valueOf"(arg0: string): $CorundumColor
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CorundumColor$Type = (("red") | ("orange") | ("green") | ("blue") | ("white") | ("yellow") | ("violet") | ("black") | ("indigo")) | ($CorundumColor);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CorundumColor_ = $CorundumColor$Type;
}}
declare module "packages/org/violetmoon/quark/addons/oddities/block/be/$TinyPotatoBlockEntity" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Packet, $Packet$Type} from "packages/net/minecraft/network/protocol/$Packet"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ClientGamePacketListener, $ClientGamePacketListener$Type} from "packages/net/minecraft/network/protocol/game/$ClientGamePacketListener"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$SimpleInventoryBlockEntity, $SimpleInventoryBlockEntity$Type} from "packages/org/violetmoon/zeta/util/$SimpleInventoryBlockEntity"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Nameable, $Nameable$Type} from "packages/net/minecraft/world/$Nameable"

export class $TinyPotatoBlockEntity extends $SimpleInventoryBlockEntity implements $Nameable {
static readonly "TAG_NAME": string
static readonly "TAG_ANGRY": string
 "jumpTicks": integer
 "name": $Component
 "angry": boolean
 "blockState": $BlockState

constructor(arg0: $BlockPos$Type, arg1: $BlockState$Type)

public "sync"(): void
public "getName"(): $Component
public "getDisplayName"(): $Component
public "setChanged"(): void
public "getContainerSize"(): integer
public "interact"(arg0: $Player$Type, arg1: $InteractionHand$Type, arg2: $ItemStack$Type, arg3: $Direction$Type): void
public "writeSharedNBT"(arg0: $CompoundTag$Type): void
public "inventoryChanged"(arg0: integer): void
public "readSharedNBT"(arg0: $CompoundTag$Type): void
public "getCustomName"(): $Component
public "getMaxStackSize"(): integer
public "canPlaceItem"(arg0: integer, arg1: $ItemStack$Type): boolean
public static "commonTick"(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: $TinyPotatoBlockEntity$Type): void
public "triggerEvent"(arg0: integer, arg1: integer): boolean
public "getUpdatePacket"(): $Packet<($ClientGamePacketListener)>
public "hasCustomName"(): boolean
public static "stillValidBlockEntity"(arg0: $BlockEntity$Type, arg1: $Player$Type, arg2: integer): boolean
public static "stillValidBlockEntity"(arg0: $BlockEntity$Type, arg1: $Player$Type): boolean
public static "tryClear"(arg0: any): void
get "name"(): $Component
get "displayName"(): $Component
get "containerSize"(): integer
get "customName"(): $Component
get "maxStackSize"(): integer
get "updatePacket"(): $Packet<($ClientGamePacketListener)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TinyPotatoBlockEntity$Type = ($TinyPotatoBlockEntity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TinyPotatoBlockEntity_ = $TinyPotatoBlockEntity$Type;
}}
declare module "packages/org/violetmoon/quark/base/config/type/$ConvulsionMatrixConfig$Params" {
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $ConvulsionMatrixConfig$Params {
static readonly "IDENTITY": (double)[]
readonly "name": string
readonly "biomeNames": (string)[]
readonly "defaultMatrix": (double)[]
readonly "testColors": (integer)[]
readonly "folliageTestColors": (integer)[]
readonly "presetMap": $Map<(string), ((double)[])>

constructor(arg0: string, arg1: (double)[], arg2: (string)[], arg3: (integer)[], arg4: (integer)[], arg5: (string)[], arg6: ((double)[])[])

public "shouldDisplayFolliage"(): boolean
public "cloneWithNewDefault"(arg0: (double)[]): $ConvulsionMatrixConfig$Params
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ConvulsionMatrixConfig$Params$Type = ($ConvulsionMatrixConfig$Params);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ConvulsionMatrixConfig$Params_ = $ConvulsionMatrixConfig$Params$Type;
}}
declare module "packages/org/violetmoon/zeta/util/handler/$RecipeCrawlHandler" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$ZTagsUpdated, $ZTagsUpdated$Type} from "packages/org/violetmoon/zeta/event/load/$ZTagsUpdated"
import {$ZServerTick$Start, $ZServerTick$Start$Type} from "packages/org/violetmoon/zeta/event/play/$ZServerTick$Start"
import {$ZAddReloadListener, $ZAddReloadListener$Type} from "packages/org/violetmoon/zeta/event/load/$ZAddReloadListener"

export class $RecipeCrawlHandler {

constructor()

/**
 * 
 * @deprecated
 */
public "recursivelyFindCraftedItems"(arg0: $Collection$Type<($Item$Type)>, arg1: $Collection$Type<($Item$Type)>, arg2: $Collection$Type<($Item$Type)>, arg3: $Consumer$Type<($Item$Type)>): void
public static "addListener"(arg0: $ZAddReloadListener$Type): void
public static "tagsHaveUpdated"(arg0: $ZTagsUpdated$Type): void
public static "onTick"(arg0: $ZServerTick$Start$Type): void
/**
 * 
 * @deprecated
 */
public "recursivelyFindCraftedItemsFromStrings"(arg0: $Collection$Type<(string)>, arg1: $Collection$Type<(string)>, arg2: $Collection$Type<(string)>, arg3: $Consumer$Type<($Item$Type)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RecipeCrawlHandler$Type = ($RecipeCrawlHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RecipeCrawlHandler_ = $RecipeCrawlHandler$Type;
}}
declare module "packages/org/violetmoon/zetaimplforge/event/load/$Test" {
import {$IZetaLoadEvent, $IZetaLoadEvent$Type} from "packages/org/violetmoon/zeta/event/bus/$IZetaLoadEvent"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Class, $Class$Type} from "packages/java/lang/$Class"

export class $Test {

constructor()

public static "remap"<T extends $IZetaLoadEvent>(arg0: $Consumer$Type<(T)>, arg1: $Class$Type<(T)>): $Consumer<(any)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Test$Type = ($Test);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Test_ = $Test$Type;
}}
declare module "packages/org/violetmoon/zetaimplforge/event/play/$ForgeZBlock" {
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockEvent, $BlockEvent$Type} from "packages/net/minecraftforge/event/level/$BlockEvent"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$ZBlock, $ZBlock$Type} from "packages/org/violetmoon/zeta/event/play/$ZBlock"

export class $ForgeZBlock implements $ZBlock {

constructor(arg0: $BlockEvent$Type)

public "getState"(): $BlockState
public "getLevel"(): $LevelAccessor
public "getPos"(): $BlockPos
get "state"(): $BlockState
get "level"(): $LevelAccessor
get "pos"(): $BlockPos
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ForgeZBlock$Type = ($ForgeZBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ForgeZBlock_ = $ForgeZBlock$Type;
}}
declare module "packages/org/violetmoon/zeta/config/$ChangeSet" {
import {$Definition, $Definition$Type} from "packages/org/violetmoon/zeta/config/$Definition"
import {$ValueDefinition, $ValueDefinition$Type} from "packages/org/violetmoon/zeta/config/$ValueDefinition"
import {$List, $List$Type} from "packages/java/util/$List"
import {$IZetaConfigInternals, $IZetaConfigInternals$Type} from "packages/org/violetmoon/zeta/config/$IZetaConfigInternals"
import {$SectionDefinition, $SectionDefinition$Type} from "packages/org/violetmoon/zeta/config/$SectionDefinition"

export class $ChangeSet implements $IZetaConfigInternals {

constructor(arg0: $IZetaConfigInternals$Type)

public "get"<T>(arg0: $ValueDefinition$Type<(T)>): T
public "flush"(): void
public "set"<T>(arg0: $ValueDefinition$Type<(T)>, arg1: T): void
public "isDirty"<T>(arg0: $ValueDefinition$Type<(T)>): boolean
public "isDirty"(arg0: $Definition$Type): boolean
public "isDirty"(arg0: $SectionDefinition$Type): boolean
public "resetToDefault"(arg0: $Definition$Type): void
public "resetToDefault"<T>(arg0: $ValueDefinition$Type<(T)>): void
public "resetToDefault"(arg0: $SectionDefinition$Type): void
public "applyAllChanges"(): void
public "changeCount"(): integer
public "toggle"(arg0: $ValueDefinition$Type<(boolean)>): void
public "removeChange"<T>(arg0: $ValueDefinition$Type<(T)>): void
public "removeChange"(arg0: $SectionDefinition$Type): void
public "removeChange"(arg0: $Definition$Type): void
public "getExactSizeCopy"<T>(arg0: $ValueDefinition$Type<($List$Type<(T)>)>, arg1: integer, arg2: T): $List<(T)>
public "debounceTime"(): long
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ChangeSet$Type = ($ChangeSet);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ChangeSet_ = $ChangeSet$Type;
}}
declare module "packages/org/violetmoon/quark/content/management/client/screen/widgets/$MiniInventoryButton" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$BooleanSupplier, $BooleanSupplier$Type} from "packages/java/util/function/$BooleanSupplier"
import {$Button, $Button$Type} from "packages/net/minecraft/client/gui/components/$Button"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$InventoryButtonHandler$ButtonTargetType, $InventoryButtonHandler$ButtonTargetType$Type} from "packages/org/violetmoon/quark/base/client/handler/$InventoryButtonHandler$ButtonTargetType"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$Button$OnPress, $Button$OnPress$Type} from "packages/net/minecraft/client/gui/components/$Button$OnPress"
import {$AbstractContainerScreen, $AbstractContainerScreen$Type} from "packages/net/minecraft/client/gui/screens/inventory/$AbstractContainerScreen"

export class $MiniInventoryButton extends $Button {
static readonly "SMALL_WIDTH": integer
static readonly "DEFAULT_WIDTH": integer
static readonly "DEFAULT_HEIGHT": integer
 "onPress": $Button$OnPress
static readonly "WIDGETS_LOCATION": $ResourceLocation
static readonly "ACCESSIBILITY_TEXTURE": $ResourceLocation
 "height": integer
 "x": integer
 "y": integer
 "active": boolean
 "visible": boolean
static readonly "UNSET_FG_COLOR": integer

constructor(arg0: $AbstractContainerScreen$Type<(any)>, arg1: integer, arg2: integer, arg3: integer, arg4: string, arg5: $Button$OnPress$Type)
constructor(arg0: $AbstractContainerScreen$Type<(any)>, arg1: integer, arg2: integer, arg3: integer, arg4: $Component$Type, arg5: $Button$OnPress$Type)
constructor(arg0: $AbstractContainerScreen$Type<(any)>, arg1: integer, arg2: integer, arg3: integer, arg4: $Supplier$Type<($List$Type<($Component$Type)>)>, arg5: $Button$OnPress$Type)
/**
 * 
 * @deprecated
 */
constructor(arg0: $AbstractContainerScreen$Type<(any)>, arg1: integer, arg2: integer, arg3: integer, arg4: $Consumer$Type<($List$Type<(string)>)>, arg5: $Button$OnPress$Type)

public "setType"(arg0: $InventoryButtonHandler$ButtonTargetType$Type): $MiniInventoryButton
public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
public "m_87963_"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
public "setTextureShift"(arg0: $BooleanSupplier$Type): $MiniInventoryButton
set "type"(value: $InventoryButtonHandler$ButtonTargetType$Type)
set "textureShift"(value: $BooleanSupplier$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MiniInventoryButton$Type = ($MiniInventoryButton);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MiniInventoryButton_ = $MiniInventoryButton$Type;
}}
declare module "packages/org/violetmoon/quark/content/client/module/$UsageTickerModule" {
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $UsageTickerModule extends $ZetaModule {
static "invert": boolean
static "shiftLeft": integer
static "shiftRight": integer
static "enableMainHand": boolean
static "enableOffHand": boolean
static "enableArmor": boolean
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $UsageTickerModule$Type = ($UsageTickerModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $UsageTickerModule_ = $UsageTickerModule$Type;
}}
declare module "packages/org/violetmoon/zeta/item/$ZetaSignItem" {
import {$BooleanSupplier, $BooleanSupplier$Type} from "packages/java/util/function/$BooleanSupplier"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$CreativeModeTab, $CreativeModeTab$Type} from "packages/net/minecraft/world/item/$CreativeModeTab"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$AdditionalItemPlacement, $AdditionalItemPlacement$Type} from "packages/net/mehvahdjukaar/moonlight/api/item/additional_placements/$AdditionalItemPlacement"
import {$IZetaItem, $IZetaItem$Type} from "packages/org/violetmoon/zeta/item/$IZetaItem"
import {$SignItem, $SignItem$Type} from "packages/net/minecraft/world/item/$SignItem"
import {$ResourceKey, $ResourceKey$Type} from "packages/net/minecraft/resources/$ResourceKey"
import {$ItemLike, $ItemLike$Type} from "packages/net/minecraft/world/level/$ItemLike"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $ZetaSignItem extends $SignItem implements $IZetaItem {
static readonly "BLOCK_ENTITY_TAG": string
static readonly "BLOCK_STATE_TAG": string
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $ZetaModule$Type, arg1: $Block$Type, arg2: $Block$Type)

public "getModule"(): $ZetaModule
public "doesConditionApply"(): boolean
public "setCondition"(arg0: $BooleanSupplier$Type): $ZetaSignItem
public "getItem"(): $Item
public "setCreativeTab"(arg0: $ResourceKey$Type<($CreativeModeTab$Type)>): $Item
public "setCreativeTab"(arg0: $ResourceKey$Type<($CreativeModeTab$Type)>, arg1: $ItemLike$Type, arg2: boolean): $Item
public "isEnabled"(): boolean
public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
public "moonlight$addAdditionalBehavior"(arg0: $AdditionalItemPlacement$Type): void
public "moonlight$getAdditionalBehavior"(): $AdditionalItemPlacement
public "moonlight$getClientAnimationExtension"(): any
public "moonlight$setClientAnimationExtension"(arg0: any): void
get "module"(): $ZetaModule
set "condition"(value: $BooleanSupplier$Type)
get "item"(): $Item
set "creativeTab"(value: $ResourceKey$Type<($CreativeModeTab$Type)>)
get "enabled"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZetaSignItem$Type = ($ZetaSignItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZetaSignItem_ = $ZetaSignItem$Type;
}}
declare module "packages/org/violetmoon/zetaimplforge/config/$ConfigEventDispatcher" {
import {$ModConfigEvent, $ModConfigEvent$Type} from "packages/net/minecraftforge/fml/event/config/$ModConfigEvent"

export class $ConfigEventDispatcher {

constructor()

public static "configChanged"(arg0: $ModConfigEvent$Type): void
public static "dispatchAllInitialLoads"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ConfigEventDispatcher$Type = ($ConfigEventDispatcher);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ConfigEventDispatcher_ = $ConfigEventDispatcher$Type;
}}
declare module "packages/org/violetmoon/quark/api/$QuarkCapabilities" {
import {$ICustomSorting, $ICustomSorting$Type} from "packages/org/violetmoon/quark/api/$ICustomSorting"
import {$IPistonCallback, $IPistonCallback$Type} from "packages/org/violetmoon/quark/api/$IPistonCallback"
import {$ZetaCapability, $ZetaCapability$Type} from "packages/org/violetmoon/zeta/capability/$ZetaCapability"
import {$ITransferManager, $ITransferManager$Type} from "packages/org/violetmoon/quark/api/$ITransferManager"
import {$IRuneColorProvider, $IRuneColorProvider$Type} from "packages/org/violetmoon/quark/api/$IRuneColorProvider"
import {$IMagnetTracker, $IMagnetTracker$Type} from "packages/org/violetmoon/quark/api/$IMagnetTracker"

export class $QuarkCapabilities {
static readonly "SORTING": $ZetaCapability<($ICustomSorting)>
static readonly "TRANSFER": $ZetaCapability<($ITransferManager)>
static readonly "PISTON_CALLBACK": $ZetaCapability<($IPistonCallback)>
static readonly "MAGNET_TRACKER_CAPABILITY": $ZetaCapability<($IMagnetTracker)>
static readonly "RUNE_COLOR": $ZetaCapability<($IRuneColorProvider)>

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $QuarkCapabilities$Type = ($QuarkCapabilities);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $QuarkCapabilities_ = $QuarkCapabilities$Type;
}}
declare module "packages/org/violetmoon/zeta/util/$VanillaWoods" {
import {$VanillaWoods$Wood, $VanillaWoods$Wood$Type} from "packages/org/violetmoon/zeta/util/$VanillaWoods$Wood"

export class $VanillaWoods {
static "OAK": $VanillaWoods$Wood
static "SPRUCE": $VanillaWoods$Wood
static "BIRCH": $VanillaWoods$Wood
static "JUNGLE": $VanillaWoods$Wood
static "ACACIA": $VanillaWoods$Wood
static "DARK_OAK": $VanillaWoods$Wood
static "MANGROVE": $VanillaWoods$Wood
static "BAMBOO": $VanillaWoods$Wood
static "CHERRY": $VanillaWoods$Wood
static "CRIMSON": $VanillaWoods$Wood
static "WARPED": $VanillaWoods$Wood
static readonly "OVERWORLD_NON_OAK": ($VanillaWoods$Wood)[]
static readonly "OVERWORLD": ($VanillaWoods$Wood)[]
static readonly "OVERWORLD_WITH_TREE": ($VanillaWoods$Wood)[]
static readonly "NETHER": ($VanillaWoods$Wood)[]
static readonly "ALL": ($VanillaWoods$Wood)[]
static readonly "ALL_WITH_LOGS": ($VanillaWoods$Wood)[]
static readonly "NON_OAK": ($VanillaWoods$Wood)[]

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $VanillaWoods$Type = ($VanillaWoods);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $VanillaWoods_ = $VanillaWoods$Type;
}}
declare module "packages/org/violetmoon/zeta/event/play/entity/$ZEntityTeleport" {
import {$IZetaPlayEvent, $IZetaPlayEvent$Type} from "packages/org/violetmoon/zeta/event/bus/$IZetaPlayEvent"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export interface $ZEntityTeleport extends $IZetaPlayEvent {

 "setTargetZ"(arg0: double): void
 "getEntity"(): $Entity
 "getTargetX"(): double
 "getTargetZ"(): double
 "getTargetY"(): double
 "setTargetX"(arg0: double): void
 "setTargetY"(arg0: double): void
}

export namespace $ZEntityTeleport {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZEntityTeleport$Type = ($ZEntityTeleport);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZEntityTeleport_ = $ZEntityTeleport$Type;
}}
declare module "packages/org/violetmoon/zeta/world/generator/multichunk/$ClusterBasedGenerator" {
import {$ClusterShape$Provider, $ClusterShape$Provider$Type} from "packages/org/violetmoon/zeta/world/generator/multichunk/$ClusterShape$Provider"
import {$BooleanSupplier, $BooleanSupplier$Type} from "packages/java/util/function/$BooleanSupplier"
import {$ClusterBasedGenerator$IGenerationContext, $ClusterBasedGenerator$IGenerationContext$Type} from "packages/org/violetmoon/zeta/world/generator/multichunk/$ClusterBasedGenerator$IGenerationContext"
import {$MultiChunkFeatureGenerator, $MultiChunkFeatureGenerator$Type} from "packages/org/violetmoon/zeta/world/generator/multichunk/$MultiChunkFeatureGenerator"
import {$ChunkGenerator, $ChunkGenerator$Type} from "packages/net/minecraft/world/level/chunk/$ChunkGenerator"
import {$DimensionConfig, $DimensionConfig$Type} from "packages/org/violetmoon/zeta/config/type/$DimensionConfig"
import {$WorldGenRegion, $WorldGenRegion$Type} from "packages/net/minecraft/server/level/$WorldGenRegion"
import {$ClusterSizeConfig, $ClusterSizeConfig$Type} from "packages/org/violetmoon/zeta/config/type/$ClusterSizeConfig"
import {$Random, $Random$Type} from "packages/java/util/$Random"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $ClusterBasedGenerator extends $MultiChunkFeatureGenerator {
readonly "shapeProvider": $ClusterShape$Provider
readonly "dimConfig": $DimensionConfig

constructor(arg0: $DimensionConfig$Type, arg1: $ClusterSizeConfig$Type, arg2: long)
constructor(arg0: $DimensionConfig$Type, arg1: $BooleanSupplier$Type, arg2: $ClusterSizeConfig$Type, arg3: long)

public "getFeatureRadius"(): integer
public "generateChunkPart"(arg0: $BlockPos$Type, arg1: $ChunkGenerator$Type, arg2: $Random$Type, arg3: $BlockPos$Type, arg4: $WorldGenRegion$Type): void
public "createContext"(arg0: $BlockPos$Type, arg1: $ChunkGenerator$Type, arg2: $Random$Type, arg3: $BlockPos$Type, arg4: $WorldGenRegion$Type): $ClusterBasedGenerator$IGenerationContext
get "featureRadius"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClusterBasedGenerator$Type = ($ClusterBasedGenerator);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClusterBasedGenerator_ = $ClusterBasedGenerator$Type;
}}
declare module "packages/org/violetmoon/quark/content/client/hax/$PseudoAccessorItemStack" {
import {$AttributeSlot, $AttributeSlot$Type} from "packages/org/violetmoon/quark/content/client/resources/$AttributeSlot"
import {$Multimap, $Multimap$Type} from "packages/com/google/common/collect/$Multimap"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Attribute, $Attribute$Type} from "packages/net/minecraft/world/entity/ai/attributes/$Attribute"
import {$AttributeModifier, $AttributeModifier$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeModifier"
import {$Pair, $Pair$Type} from "packages/com/mojang/datafixers/util/$Pair"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export interface $PseudoAccessorItemStack {

 "quark$capturePotionAttributes"(arg0: $List$Type<($Pair$Type<($Attribute$Type), ($AttributeModifier$Type)>)>): void
 "quark$getCapturedAttributes"(): $Map<($AttributeSlot), ($Multimap<($Attribute), ($AttributeModifier)>)>
}

export namespace $PseudoAccessorItemStack {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PseudoAccessorItemStack$Type = ($PseudoAccessorItemStack);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PseudoAccessorItemStack_ = $PseudoAccessorItemStack$Type;
}}
declare module "packages/org/violetmoon/zeta/event/play/entity/player/$ZRightClickBlock" {
import {$IZetaPlayEvent, $IZetaPlayEvent$Type} from "packages/org/violetmoon/zeta/event/bus/$IZetaPlayEvent"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$ZResult, $ZResult$Type} from "packages/org/violetmoon/zeta/event/bus/$ZResult"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$Resultable, $Resultable$Type} from "packages/org/violetmoon/zeta/event/bus/$Resultable"
import {$PlayerGetter, $PlayerGetter$Type} from "packages/org/violetmoon/zeta/event/bus/helpers/$PlayerGetter"
import {$Cancellable, $Cancellable$Type} from "packages/org/violetmoon/zeta/event/bus/$Cancellable"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export interface $ZRightClickBlock extends $IZetaPlayEvent, $Cancellable, $Resultable, $PlayerGetter {

 "getLevel"(): $Level
 "getHitVec"(): $BlockHitResult
 "getFace"(): $Direction
 "getHand"(): $InteractionHand
 "getItemStack"(): $ItemStack
 "getUseBlock"(): $ZResult
 "getPos"(): $BlockPos
 "setCancellationResult"(arg0: $InteractionResult$Type): void
 "cancel"(): void
 "setCanceled"(arg0: boolean): void
 "isCanceled"(): boolean
 "setResult"(arg0: $ZResult$Type): void
 "getResult"(): $ZResult
 "getPlayer"(): $Player
 "getEntity"(): $LivingEntity
}

export namespace $ZRightClickBlock {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZRightClickBlock$Type = ($ZRightClickBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZRightClickBlock_ = $ZRightClickBlock$Type;
}}
declare module "packages/org/violetmoon/quark/content/building/block/$VariantChestBlock" {
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$BooleanSupplier, $BooleanSupplier$Type} from "packages/java/util/function/$BooleanSupplier"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$ChestType, $ChestType$Type} from "packages/net/minecraft/world/level/block/state/properties/$ChestType"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$FluidState, $FluidState$Type} from "packages/net/minecraft/world/level/material/$FluidState"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$ToolAction, $ToolAction$Type} from "packages/net/minecraftforge/common/$ToolAction"
import {$IForgeBlock, $IForgeBlock$Type} from "packages/net/minecraftforge/common/extensions/$IForgeBlock"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$DirectionProperty, $DirectionProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$DirectionProperty"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$CreativeModeTab, $CreativeModeTab$Type} from "packages/net/minecraft/world/item/$CreativeModeTab"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$ChestBlock, $ChestBlock$Type} from "packages/net/minecraft/world/level/block/$ChestBlock"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$IZetaBlock, $IZetaBlock$Type} from "packages/org/violetmoon/zeta/block/$IZetaBlock"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$UseOnContext, $UseOnContext$Type} from "packages/net/minecraft/world/item/context/$UseOnContext"
import {$EnumProperty, $EnumProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$EnumProperty"
import {$SoundType, $SoundType$Type} from "packages/net/minecraft/world/level/block/$SoundType"
import {$IPlantable, $IPlantable$Type} from "packages/net/minecraftforge/common/$IPlantable"
import {$IZetaBlockExtensions, $IZetaBlockExtensions$Type} from "packages/org/violetmoon/zeta/block/ext/$IZetaBlockExtensions"
import {$VariantChestsModule$IVariantChest, $VariantChestsModule$IVariantChest$Type} from "packages/org/violetmoon/quark/content/building/module/$VariantChestsModule$IVariantChest"
import {$ResourceKey, $ResourceKey$Type} from "packages/net/minecraft/resources/$ResourceKey"
import {$ItemLike, $ItemLike$Type} from "packages/net/minecraft/world/level/$ItemLike"
import {$BlockAndTintGetter, $BlockAndTintGetter$Type} from "packages/net/minecraft/world/level/$BlockAndTintGetter"

export class $VariantChestBlock extends $ChestBlock implements $IZetaBlock, $VariantChestsModule$IVariantChest, $IZetaBlockExtensions, $IForgeBlock {
static readonly "FACING": $DirectionProperty
static readonly "TYPE": $EnumProperty<($ChestType)>
static readonly "WATERLOGGED": $BooleanProperty
static readonly "EVENT_SET_OPEN_COUNT": integer
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(arg0: string, arg1: string, arg2: $ZetaModule$Type, arg3: $Supplier$Type<($BlockEntityType$Type<(any)>)>, arg4: $BlockBehaviour$Properties$Type)
constructor(arg0: string, arg1: $ZetaModule$Type, arg2: $Supplier$Type<($BlockEntityType$Type<(any)>)>, arg3: $BlockBehaviour$Properties$Type)

public "getModule"(): $ZetaModule
public "isFlammableZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): boolean
public "canSustainPlant"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type, arg4: $IPlantable$Type): boolean
public "isLadder"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "isConduitFrame"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): boolean
public "doesConditionApply"(): boolean
public "setCondition"(arg0: $BooleanSupplier$Type): $VariantChestBlock
public "getEnchantPowerBonus"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type): float
public "shouldDisplayFluidOverlay"(arg0: $BlockState$Type, arg1: $BlockAndTintGetter$Type, arg2: $BlockPos$Type, arg3: $FluidState$Type): boolean
public "getToolModifiedState"(arg0: $BlockState$Type, arg1: $UseOnContext$Type, arg2: $ToolAction$Type, arg3: boolean): $BlockState
public "getBeaconColorMultiplier"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): (float)[]
public "makesOpenTrapdoorAboveClimbable"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockState$Type): boolean
public "getSoundType"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): $SoundType
public "isScaffolding"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "getLightEmission"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type): integer
public "getFlammabilityZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "isFlammable"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): boolean
public "canStickTo"(arg0: $BlockState$Type, arg1: $BlockState$Type): boolean
public "getFireSpreadSpeed"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "getFlammability"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "isStickyBlock"(arg0: $BlockState$Type): boolean
public "newBlockEntity"(arg0: $BlockPos$Type, arg1: $BlockState$Type): $BlockEntity
public "collisionExtendsVertically"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): boolean
public "getTexturePath"(): string
public "getBlock"(): $Block
public "getFireSpreadSpeedZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "setCreativeTab"(arg0: $ResourceKey$Type<($CreativeModeTab$Type)>): $Block
public "setCreativeTab"(arg0: $ResourceKey$Type<($CreativeModeTab$Type)>, arg1: $ItemLike$Type, arg2: boolean): $Block
public "getTextureFolder"(): string
public "isConduitFrameZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): boolean
public "isLadderZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "isStickyBlockZeta"(arg0: $BlockState$Type): boolean
public "isScaffoldingZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "canStickToZeta"(arg0: $BlockState$Type, arg1: $BlockState$Type): boolean
public "getSoundTypeZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): $SoundType
public "makesOpenTrapdoorAboveClimbableZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockState$Type): boolean
public "canSustainPlantZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type, arg4: string): boolean
public "getToolModifiedStateZeta"(arg0: $BlockState$Type, arg1: $UseOnContext$Type, arg2: string, arg3: boolean): $BlockState
public "collisionExtendsVerticallyZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): boolean
public "shouldDisplayFluidOverlayZeta"(arg0: $BlockState$Type, arg1: $BlockAndTintGetter$Type, arg2: $BlockPos$Type, arg3: $FluidState$Type): boolean
public "getEnchantPowerBonusZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type): float
public "getBeaconColorMultiplierZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): (float)[]
public "getLightEmissionZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type): integer
public "isEnabled"(): boolean
public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
get "module"(): $ZetaModule
set "condition"(value: $BooleanSupplier$Type)
get "texturePath"(): string
get "block"(): $Block
set "creativeTab"(value: $ResourceKey$Type<($CreativeModeTab$Type)>)
get "textureFolder"(): string
get "enabled"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $VariantChestBlock$Type = ($VariantChestBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $VariantChestBlock_ = $VariantChestBlock$Type;
}}
declare module "packages/org/violetmoon/quark/content/building/block/$BambooMatCarpetBlock" {
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$BambooMatBlock, $BambooMatBlock$Type} from "packages/org/violetmoon/quark/content/building/block/$BambooMatBlock"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$CollisionContext, $CollisionContext$Type} from "packages/net/minecraft/world/phys/shapes/$CollisionContext"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $BambooMatCarpetBlock extends $BambooMatBlock {
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(arg0: string, arg1: $ZetaModule$Type)

public "updateShape"(arg0: $BlockState$Type, arg1: $Direction$Type, arg2: $BlockState$Type, arg3: $LevelAccessor$Type, arg4: $BlockPos$Type, arg5: $BlockPos$Type): $BlockState
public "canSurvive"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type): boolean
public "getShape"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $CollisionContext$Type): $VoxelShape
public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BambooMatCarpetBlock$Type = ($BambooMatCarpetBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BambooMatCarpetBlock_ = $BambooMatCarpetBlock$Type;
}}
declare module "packages/org/violetmoon/zeta/advancement/$ManualTrigger$Instance" {
import {$AbstractCriterionTriggerInstance, $AbstractCriterionTriggerInstance$Type} from "packages/net/minecraft/advancements/critereon/$AbstractCriterionTriggerInstance"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$ContextAwarePredicate, $ContextAwarePredicate$Type} from "packages/net/minecraft/advancements/critereon/$ContextAwarePredicate"

export class $ManualTrigger$Instance extends $AbstractCriterionTriggerInstance {

constructor(arg0: $ResourceLocation$Type, arg1: $ContextAwarePredicate$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ManualTrigger$Instance$Type = ($ManualTrigger$Instance);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ManualTrigger$Instance_ = $ManualTrigger$Instance$Type;
}}
declare module "packages/org/violetmoon/zeta/client/config/screen/$ZetaScreen" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$ZetaClient, $ZetaClient$Type} from "packages/org/violetmoon/zeta/client/$ZetaClient"
import {$List, $List$Type} from "packages/java/util/$List"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $ZetaScreen extends $Screen {
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering

constructor(arg0: $ZetaClient$Type, arg1: $Component$Type, arg2: $Screen$Type)
constructor(arg0: $ZetaClient$Type, arg1: $Screen$Type)

public "returnToParent"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZetaScreen$Type = ($ZetaScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZetaScreen_ = $ZetaScreen$Type;
}}
declare module "packages/org/violetmoon/quark/content/world/block/$GlowShroomRingBlock" {
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$Fluid, $Fluid$Type} from "packages/net/minecraft/world/level/material/$Fluid"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$SimpleWaterloggedBlock, $SimpleWaterloggedBlock$Type} from "packages/net/minecraft/world/level/block/$SimpleWaterloggedBlock"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$Mirror, $Mirror$Type} from "packages/net/minecraft/world/level/block/$Mirror"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$FluidState, $FluidState$Type} from "packages/net/minecraft/world/level/material/$FluidState"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$ZetaBlock, $ZetaBlock$Type} from "packages/org/violetmoon/zeta/block/$ZetaBlock"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"
import {$DirectionProperty, $DirectionProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$DirectionProperty"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$CollisionContext, $CollisionContext$Type} from "packages/net/minecraft/world/phys/shapes/$CollisionContext"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$Rotation, $Rotation$Type} from "packages/net/minecraft/world/level/block/$Rotation"

export class $GlowShroomRingBlock extends $ZetaBlock implements $SimpleWaterloggedBlock {
static readonly "FACING": $DirectionProperty
static readonly "WATERLOGGED": $BooleanProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(arg0: $ZetaModule$Type)

public "getStateForPlacement"(arg0: $BlockPlaceContext$Type): $BlockState
public "updateShape"(arg0: $BlockState$Type, arg1: $Direction$Type, arg2: $BlockState$Type, arg3: $LevelAccessor$Type, arg4: $BlockPos$Type, arg5: $BlockPos$Type): $BlockState
public "getFluidState"(arg0: $BlockState$Type): $FluidState
public "rotate"(arg0: $BlockState$Type, arg1: $Rotation$Type): $BlockState
public "mirror"(arg0: $BlockState$Type, arg1: $Mirror$Type): $BlockState
public "canSurvive"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type): boolean
public "getShape"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $CollisionContext$Type): $VoxelShape
public "getPickupSound"(): $Optional<($SoundEvent)>
public "canPlaceLiquid"(arg0: $BlockGetter$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: $Fluid$Type): boolean
public "placeLiquid"(arg0: $LevelAccessor$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: $FluidState$Type): boolean
public "pickupBlock"(arg0: $LevelAccessor$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type): $ItemStack
public "getPickupSound"(arg0: $BlockState$Type): $Optional<($SoundEvent)>
public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
get "pickupSound"(): $Optional<($SoundEvent)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GlowShroomRingBlock$Type = ($GlowShroomRingBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GlowShroomRingBlock_ = $GlowShroomRingBlock$Type;
}}
declare module "packages/org/violetmoon/quark/base/network/message/$InventoryTransferMessage" {
import {$IZetaMessage, $IZetaMessage$Type} from "packages/org/violetmoon/zeta/network/$IZetaMessage"
import {$IZetaNetworkEventContext, $IZetaNetworkEventContext$Type} from "packages/org/violetmoon/zeta/network/$IZetaNetworkEventContext"

export class $InventoryTransferMessage implements $IZetaMessage {
 "smart": boolean
 "restock": boolean

constructor()
constructor(arg0: boolean, arg1: boolean)

public "receive"(arg0: $IZetaNetworkEventContext$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $InventoryTransferMessage$Type = ($InventoryTransferMessage);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $InventoryTransferMessage_ = $InventoryTransferMessage$Type;
}}
declare module "packages/org/violetmoon/quark/content/building/module/$GlassItemFrameModule" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$GlassItemFrame, $GlassItemFrame$Type} from "packages/org/violetmoon/quark/content/building/entity/$GlassItemFrame"
import {$ZRegister, $ZRegister$Type} from "packages/org/violetmoon/zeta/event/load/$ZRegister"
import {$ZClientSetup, $ZClientSetup$Type} from "packages/org/violetmoon/zeta/client/event/load/$ZClientSetup"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $GlassItemFrameModule extends $ZetaModule {
static "glassItemFramesUpdateMaps": boolean
static "glassItemFramesUpdateMapsEveryTick": boolean
static "glassFrame": $Item
static "glowingGlassFrame": $Item
static "glassFrameEntity": $EntityType<($GlassItemFrame)>
static "itemRenderScale": double
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "register"(arg0: $ZRegister$Type): void
public "clientSetup"(arg0: $ZClientSetup$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GlassItemFrameModule$Type = ($GlassItemFrameModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GlassItemFrameModule_ = $GlassItemFrameModule$Type;
}}
declare module "packages/org/violetmoon/zetaimplforge/event/play/entity/living/$ForgeZLivingDeath" {
import {$LivingDeathEvent, $LivingDeathEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingDeathEvent"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$ZLivingDeath, $ZLivingDeath$Type} from "packages/org/violetmoon/zeta/event/play/entity/living/$ZLivingDeath"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $ForgeZLivingDeath implements $ZLivingDeath {

constructor(arg0: $LivingDeathEvent$Type)

public "getSource"(): $DamageSource
public "getEntity"(): $Entity
get "source"(): $DamageSource
get "entity"(): $Entity
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ForgeZLivingDeath$Type = ($ForgeZLivingDeath);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ForgeZLivingDeath_ = $ForgeZLivingDeath$Type;
}}
declare module "packages/org/violetmoon/quark/content/mobs/client/render/entity/$SoulBeadRenderer" {
import {$EntityRendererProvider$Context, $EntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRendererProvider$Context"
import {$EntityRenderer, $EntityRenderer$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRenderer"
import {$Frustum, $Frustum$Type} from "packages/net/minecraft/client/renderer/culling/$Frustum"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$SoulBead, $SoulBead$Type} from "packages/org/violetmoon/quark/content/mobs/entity/$SoulBead"

export class $SoulBeadRenderer extends $EntityRenderer<($SoulBead)> {
 "shadowRadius": float

constructor(arg0: $EntityRendererProvider$Context$Type)

public "shouldRender"(arg0: $SoulBead$Type, arg1: $Frustum$Type, arg2: double, arg3: double, arg4: double): boolean
public "getTextureLocation"(arg0: $SoulBead$Type): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SoulBeadRenderer$Type = ($SoulBeadRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SoulBeadRenderer_ = $SoulBeadRenderer$Type;
}}
declare module "packages/org/violetmoon/quark/api/event/$QuarkModuleEvent" {
import {$ListenerList, $ListenerList$Type} from "packages/net/minecraftforge/eventbus/$ListenerList"
import {$Event, $Event$Type} from "packages/net/minecraftforge/eventbus/api/$Event"

export class $QuarkModuleEvent extends $Event {
readonly "eventName": string

constructor()
constructor(arg0: string)

public "isCancelable"(): boolean
public "getListenerList"(): $ListenerList
public "hasResult"(): boolean
get "cancelable"(): boolean
get "listenerList"(): $ListenerList
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $QuarkModuleEvent$Type = ($QuarkModuleEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $QuarkModuleEvent_ = $QuarkModuleEvent$Type;
}}
declare module "packages/org/violetmoon/quark/content/automation/module/$ChuteModule" {
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$ChuteBlockEntity, $ChuteBlockEntity$Type} from "packages/org/violetmoon/quark/content/automation/block/be/$ChuteBlockEntity"
import {$ZRegister, $ZRegister$Type} from "packages/org/violetmoon/zeta/event/load/$ZRegister"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $ChuteModule extends $ZetaModule {
static "blockEntityType": $BlockEntityType<($ChuteBlockEntity)>
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "register"(arg0: $ZRegister$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ChuteModule$Type = ($ChuteModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ChuteModule_ = $ChuteModule$Type;
}}
declare module "packages/org/violetmoon/quark/base/handler/$WoodSetHandler" {
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$QuarkBoat, $QuarkBoat$Type} from "packages/org/violetmoon/quark/base/item/boat/$QuarkBoat"
import {$ZCommonSetup, $ZCommonSetup$Type} from "packages/org/violetmoon/zeta/event/load/$ZCommonSetup"
import {$MapColor, $MapColor$Type} from "packages/net/minecraft/world/level/material/$MapColor"
import {$Stream, $Stream$Type} from "packages/java/util/stream/$Stream"
import {$WoodSetHandler$QuarkBoatType, $WoodSetHandler$QuarkBoatType$Type} from "packages/org/violetmoon/quark/base/handler/$WoodSetHandler$QuarkBoatType"
import {$ZRegister, $ZRegister$Type} from "packages/org/violetmoon/zeta/event/load/$ZRegister"
import {$QuarkChestBoat, $QuarkChestBoat$Type} from "packages/org/violetmoon/quark/base/item/boat/$QuarkChestBoat"
import {$WoodSetHandler$WoodSet, $WoodSetHandler$WoodSet$Type} from "packages/org/violetmoon/quark/base/handler/$WoodSetHandler$WoodSet"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $WoodSetHandler {
static "quarkBoatEntityType": $EntityType<($QuarkBoat)>
static "quarkChestBoatEntityType": $EntityType<($QuarkChestBoat)>

constructor()

public static "register"(arg0: $ZRegister$Type): void
public static "setup"(arg0: $ZCommonSetup$Type): void
public static "addWoodSet"(arg0: $ZRegister$Type, arg1: $ZetaModule$Type, arg2: string, arg3: $MapColor$Type, arg4: $MapColor$Type, arg5: boolean): $WoodSetHandler$WoodSet
public static "addQuarkBoatType"(arg0: string, arg1: $WoodSetHandler$QuarkBoatType$Type): void
public static "getQuarkBoatType"(arg0: string): $WoodSetHandler$QuarkBoatType
public static "makeSignWork"(arg0: $Block$Type, arg1: $Block$Type, arg2: $Block$Type, arg3: $Block$Type): void
public static "boatTypes"(): $Stream<(string)>
set "up"(value: $ZCommonSetup$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WoodSetHandler$Type = ($WoodSetHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WoodSetHandler_ = $WoodSetHandler$Type;
}}
declare module "packages/org/violetmoon/quark/content/client/tooltip/$EnchantedBookTooltips" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ZGatherTooltipComponents, $ZGatherTooltipComponents$Type} from "packages/org/violetmoon/zeta/client/event/play/$ZGatherTooltipComponents"

export class $EnchantedBookTooltips {
static readonly "TABLE_ONLY_DISPLAY": string

constructor()

public static "getTestItems"(): $List<($ItemStack)>
public static "reloaded"(): void
public static "makeTooltip"(arg0: $ZGatherTooltipComponents$Type): void
get "testItems"(): $List<($ItemStack)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EnchantedBookTooltips$Type = ($EnchantedBookTooltips);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EnchantedBookTooltips_ = $EnchantedBookTooltips$Type;
}}
declare module "packages/org/violetmoon/zeta/block/$ZetaWallBlock" {
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$WallSide, $WallSide$Type} from "packages/net/minecraft/world/level/block/state/properties/$WallSide"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$WallBlock, $WallBlock$Type} from "packages/net/minecraft/world/level/block/$WallBlock"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$FluidState, $FluidState$Type} from "packages/net/minecraft/world/level/material/$FluidState"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$ToolAction, $ToolAction$Type} from "packages/net/minecraftforge/common/$ToolAction"
import {$IForgeBlock, $IForgeBlock$Type} from "packages/net/minecraftforge/common/extensions/$IForgeBlock"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$CreativeModeTab, $CreativeModeTab$Type} from "packages/net/minecraft/world/item/$CreativeModeTab"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$IZetaBlock, $IZetaBlock$Type} from "packages/org/violetmoon/zeta/block/$IZetaBlock"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$UseOnContext, $UseOnContext$Type} from "packages/net/minecraft/world/item/context/$UseOnContext"
import {$EnumProperty, $EnumProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$EnumProperty"
import {$IZetaBlockColorProvider, $IZetaBlockColorProvider$Type} from "packages/org/violetmoon/zeta/registry/$IZetaBlockColorProvider"
import {$SoundType, $SoundType$Type} from "packages/net/minecraft/world/level/block/$SoundType"
import {$IPlantable, $IPlantable$Type} from "packages/net/minecraftforge/common/$IPlantable"
import {$IZetaBlockExtensions, $IZetaBlockExtensions$Type} from "packages/org/violetmoon/zeta/block/ext/$IZetaBlockExtensions"
import {$ResourceKey, $ResourceKey$Type} from "packages/net/minecraft/resources/$ResourceKey"
import {$ItemLike, $ItemLike$Type} from "packages/net/minecraft/world/level/$ItemLike"
import {$BlockAndTintGetter, $BlockAndTintGetter$Type} from "packages/net/minecraft/world/level/$BlockAndTintGetter"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $ZetaWallBlock extends $WallBlock implements $IZetaBlock, $IZetaBlockColorProvider, $IZetaBlockExtensions, $IForgeBlock {
static readonly "UP": $BooleanProperty
static readonly "EAST_WALL": $EnumProperty<($WallSide)>
static readonly "NORTH_WALL": $EnumProperty<($WallSide)>
static readonly "SOUTH_WALL": $EnumProperty<($WallSide)>
static readonly "WEST_WALL": $EnumProperty<($WallSide)>
static readonly "WATERLOGGED": $BooleanProperty
 "shapeByIndex": $Map<($BlockState), ($VoxelShape)>
 "collisionShapeByIndex": $Map<($BlockState), ($VoxelShape)>
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(arg0: $IZetaBlock$Type, arg1: $ResourceKey$Type<($CreativeModeTab$Type)>)

public "getModule"(): $ZetaModule
public "canSustainPlant"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type, arg4: $IPlantable$Type): boolean
public "isLadder"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "isConduitFrame"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): boolean
public "doesConditionApply"(): boolean
public "getEnchantPowerBonus"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type): float
public "shouldDisplayFluidOverlay"(arg0: $BlockState$Type, arg1: $BlockAndTintGetter$Type, arg2: $BlockPos$Type, arg3: $FluidState$Type): boolean
public "getToolModifiedState"(arg0: $BlockState$Type, arg1: $UseOnContext$Type, arg2: $ToolAction$Type, arg3: boolean): $BlockState
public "getBeaconColorMultiplier"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): (float)[]
public "makesOpenTrapdoorAboveClimbable"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockState$Type): boolean
public "getSoundType"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): $SoundType
public "isScaffolding"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "getLightEmission"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type): integer
public "getBlockColorProviderName"(): string
public "getItemColorProviderName"(): string
public "getBeaconColorMultiplierZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): (float)[]
public "isFlammable"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): boolean
public "canStickTo"(arg0: $BlockState$Type, arg1: $BlockState$Type): boolean
public "getFireSpreadSpeed"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "getFlammability"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "isStickyBlock"(arg0: $BlockState$Type): boolean
public "collisionExtendsVertically"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): boolean
public "getBlock"(): $Block
public "getFireSpreadSpeedZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "getFlammabilityZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "setCreativeTab"(arg0: $ResourceKey$Type<($CreativeModeTab$Type)>): $Block
public "setCreativeTab"(arg0: $ResourceKey$Type<($CreativeModeTab$Type)>, arg1: $ItemLike$Type, arg2: boolean): $Block
public "isConduitFrameZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): boolean
public "isLadderZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "isStickyBlockZeta"(arg0: $BlockState$Type): boolean
public "isScaffoldingZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "canStickToZeta"(arg0: $BlockState$Type, arg1: $BlockState$Type): boolean
public "isFlammableZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): boolean
public "getSoundTypeZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): $SoundType
public "makesOpenTrapdoorAboveClimbableZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockState$Type): boolean
public "canSustainPlantZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type, arg4: string): boolean
public "getToolModifiedStateZeta"(arg0: $BlockState$Type, arg1: $UseOnContext$Type, arg2: string, arg3: boolean): $BlockState
public "collisionExtendsVerticallyZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): boolean
public "shouldDisplayFluidOverlayZeta"(arg0: $BlockState$Type, arg1: $BlockAndTintGetter$Type, arg2: $BlockPos$Type, arg3: $FluidState$Type): boolean
public "getEnchantPowerBonusZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type): float
public "getLightEmissionZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type): integer
public "isEnabled"(): boolean
public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
get "module"(): $ZetaModule
get "blockColorProviderName"(): string
get "itemColorProviderName"(): string
get "block"(): $Block
set "creativeTab"(value: $ResourceKey$Type<($CreativeModeTab$Type)>)
get "enabled"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZetaWallBlock$Type = ($ZetaWallBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZetaWallBlock_ = $ZetaWallBlock$Type;
}}
declare module "packages/org/violetmoon/zeta/event/bus/helpers/$PlayerGetter" {
import {$LivingGetter, $LivingGetter$Type} from "packages/org/violetmoon/zeta/event/bus/helpers/$LivingGetter"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export interface $PlayerGetter extends $LivingGetter {

 "getPlayer"(): $Player
 "getEntity"(): $LivingEntity

(): $Player
}

export namespace $PlayerGetter {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PlayerGetter$Type = ($PlayerGetter);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PlayerGetter_ = $PlayerGetter$Type;
}}
declare module "packages/org/violetmoon/quark/addons/oddities/module/$MatrixEnchantingModule" {
import {$ZGatherHints, $ZGatherHints$Type} from "packages/org/violetmoon/zeta/event/play/loading/$ZGatherHints"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$ZClientSetup, $ZClientSetup$Type} from "packages/org/violetmoon/zeta/client/event/load/$ZClientSetup"
import {$MenuType, $MenuType$Type} from "packages/net/minecraft/world/inventory/$MenuType"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$ZPlayerInteract$RightClickBlock, $ZPlayerInteract$RightClickBlock$Type} from "packages/org/violetmoon/zeta/event/play/entity/player/$ZPlayerInteract$RightClickBlock"
import {$DyeColor, $DyeColor$Type} from "packages/net/minecraft/world/item/$DyeColor"
import {$CustomInfluence, $CustomInfluence$Type} from "packages/org/violetmoon/quark/addons/oddities/util/$CustomInfluence"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$List, $List$Type} from "packages/java/util/$List"
import {$MatrixEnchantingMenu, $MatrixEnchantingMenu$Type} from "packages/org/violetmoon/quark/addons/oddities/inventory/$MatrixEnchantingMenu"
import {$ZRegister, $ZRegister$Type} from "packages/org/violetmoon/zeta/event/load/$ZRegister"
import {$ZBlock$EntityPlace, $ZBlock$EntityPlace$Type} from "packages/org/violetmoon/zeta/event/play/$ZBlock$EntityPlace"
import {$MatrixEnchantingTableBlockEntity, $MatrixEnchantingTableBlockEntity$Type} from "packages/org/violetmoon/quark/addons/oddities/block/be/$MatrixEnchantingTableBlockEntity"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$Influence, $Influence$Type} from "packages/org/violetmoon/quark/addons/oddities/util/$Influence"
import {$ManualTrigger, $ManualTrigger$Type} from "packages/org/violetmoon/zeta/advancement/$ManualTrigger"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZConfigChanged, $ZConfigChanged$Type} from "packages/org/violetmoon/zeta/event/load/$ZConfigChanged"

export class $MatrixEnchantingModule extends $ZetaModule {
static "blockEntityType": $BlockEntityType<($MatrixEnchantingTableBlockEntity)>
static "menuType": $MenuType<($MatrixEnchantingMenu)>
static "maxBookshelves": integer
static "piecePriceScale": integer
static "bookEnchantability": integer
static "baseMaxPieceCount": integer
static "baseMaxPieceCountBook": integer
static "minLevelCutoff": integer
static "chargePerLapis": integer
static "minLevelScaleFactor": double
static "minLevelScaleFactorBook": double
static "dupeMultiplier": double
static "incompatibleMultiplier": double
static "allowBooks": boolean
static "allowTreasures": boolean
static "treasureWhitelist": $List<(string)>
static "showTooltip": boolean
static "normalizeRarity": boolean
static "allowUnderwaterEnchanting": boolean
static "allowShortBlockEnchanting": boolean
static "soulCandlesInvert": boolean
static "disallowedEnchantments": $List<(string)>
static "allowInfluencing": boolean
static "candleInfluencingFailed": boolean
static "influenceMax": integer
static "influencePower": double
static "automaticallyConvert": boolean
static "candleInfluences": $Map<($DyeColor), ($Influence)>
static "customInfluences": $Map<($BlockState), ($CustomInfluence)>
static "matrixEnchanter": $Block
static "influenceTrigger": $ManualTrigger
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "register"(arg0: $ZRegister$Type): void
public "clientSetup"(arg0: $ZClientSetup$Type): void
public "onBlockPlaced"(arg0: $ZBlock$EntityPlace$Type): void
public "addAdditionalHints"(arg0: $ZGatherHints$Type): void
public "configChanged"(arg0: $ZConfigChanged$Type): void
public "onRightClick"(arg0: $ZPlayerInteract$RightClickBlock$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MatrixEnchantingModule$Type = ($MatrixEnchantingModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MatrixEnchantingModule_ = $MatrixEnchantingModule$Type;
}}
declare module "packages/org/violetmoon/quark/content/building/module/$StoolsModule" {
import {$ZRightClickBlock, $ZRightClickBlock$Type} from "packages/org/violetmoon/zeta/event/play/entity/player/$ZRightClickBlock"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$ZCommonSetup, $ZCommonSetup$Type} from "packages/org/violetmoon/zeta/event/load/$ZCommonSetup"
import {$Stool, $Stool$Type} from "packages/org/violetmoon/quark/content/building/entity/$Stool"
import {$ZRegister, $ZRegister$Type} from "packages/org/violetmoon/zeta/event/load/$ZRegister"
import {$ZClientSetup, $ZClientSetup$Type} from "packages/org/violetmoon/zeta/client/event/load/$ZClientSetup"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $StoolsModule extends $ZetaModule {
static "stoolEntity": $EntityType<($Stool)>
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "register"(arg0: $ZRegister$Type): void
public "setup"(arg0: $ZCommonSetup$Type): void
public "clientSetup"(arg0: $ZClientSetup$Type): void
public "itemUsed"(arg0: $ZRightClickBlock$Type): void
set "up"(value: $ZCommonSetup$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $StoolsModule$Type = ($StoolsModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $StoolsModule_ = $StoolsModule$Type;
}}
declare module "packages/org/violetmoon/quark/content/tweaks/block/$DirtyGlassBlock" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$ZetaGlassBlock, $ZetaGlassBlock$Type} from "packages/org/violetmoon/zeta/block/$ZetaGlassBlock"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $DirtyGlassBlock extends $ZetaGlassBlock {
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(arg0: string, arg1: $ZetaModule$Type, arg2: $BlockBehaviour$Properties$Type)

public "getBeaconColorMultiplierZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): (float)[]
public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DirtyGlassBlock$Type = ($DirtyGlassBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DirtyGlassBlock_ = $DirtyGlassBlock$Type;
}}
declare module "packages/org/violetmoon/quark/mixin/mixins/accessor/$AccessorLivingEntity" {
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"

export interface $AccessorLivingEntity {

 "quark$lastHurtByPlayerTime"(): integer
 "quark$lastHurtByPlayer"(): $Player
}

export namespace $AccessorLivingEntity {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AccessorLivingEntity$Type = ($AccessorLivingEntity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AccessorLivingEntity_ = $AccessorLivingEntity$Type;
}}
declare module "packages/org/violetmoon/zeta/client/event/play/$ZScreen$MouseButtonPressed$Pre" {
import {$ZScreen$MouseButtonPressed, $ZScreen$MouseButtonPressed$Type} from "packages/org/violetmoon/zeta/client/event/play/$ZScreen$MouseButtonPressed"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$Cancellable, $Cancellable$Type} from "packages/org/violetmoon/zeta/event/bus/$Cancellable"

export interface $ZScreen$MouseButtonPressed$Pre extends $ZScreen$MouseButtonPressed, $Cancellable {

 "getMouseX"(): double
 "getMouseY"(): double
 "getButton"(): integer
 "cancel"(): void
 "setCanceled"(arg0: boolean): void
 "isCanceled"(): boolean
 "getScreen"(): $Screen
}

export namespace $ZScreen$MouseButtonPressed$Pre {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZScreen$MouseButtonPressed$Pre$Type = ($ZScreen$MouseButtonPressed$Pre);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZScreen$MouseButtonPressed$Pre_ = $ZScreen$MouseButtonPressed$Pre$Type;
}}
declare module "packages/org/violetmoon/zeta/block/$ZetaBushBlock" {
import {$BooleanSupplier, $BooleanSupplier$Type} from "packages/java/util/function/$BooleanSupplier"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$FluidState, $FluidState$Type} from "packages/net/minecraft/world/level/material/$FluidState"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$ToolAction, $ToolAction$Type} from "packages/net/minecraftforge/common/$ToolAction"
import {$IForgeBlock, $IForgeBlock$Type} from "packages/net/minecraftforge/common/extensions/$IForgeBlock"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$CreativeModeTab, $CreativeModeTab$Type} from "packages/net/minecraft/world/item/$CreativeModeTab"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$IZetaBlock, $IZetaBlock$Type} from "packages/org/violetmoon/zeta/block/$IZetaBlock"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$UseOnContext, $UseOnContext$Type} from "packages/net/minecraft/world/item/context/$UseOnContext"
import {$SoundType, $SoundType$Type} from "packages/net/minecraft/world/level/block/$SoundType"
import {$IPlantable, $IPlantable$Type} from "packages/net/minecraftforge/common/$IPlantable"
import {$IZetaBlockExtensions, $IZetaBlockExtensions$Type} from "packages/org/violetmoon/zeta/block/ext/$IZetaBlockExtensions"
import {$ResourceKey, $ResourceKey$Type} from "packages/net/minecraft/resources/$ResourceKey"
import {$ItemLike, $ItemLike$Type} from "packages/net/minecraft/world/level/$ItemLike"
import {$BushBlock, $BushBlock$Type} from "packages/net/minecraft/world/level/block/$BushBlock"
import {$BlockAndTintGetter, $BlockAndTintGetter$Type} from "packages/net/minecraft/world/level/$BlockAndTintGetter"

export class $ZetaBushBlock extends $BushBlock implements $IZetaBlock, $IZetaBlockExtensions, $IForgeBlock {
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(arg0: string, arg1: $ZetaModule$Type, arg2: $ResourceKey$Type<($CreativeModeTab$Type)>, arg3: $BlockBehaviour$Properties$Type)

public "getModule"(): $ZetaModule
public "canSustainPlant"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type, arg4: $IPlantable$Type): boolean
public "isLadder"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "isConduitFrame"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): boolean
public "doesConditionApply"(): boolean
public "setCondition"(arg0: $BooleanSupplier$Type): $ZetaBushBlock
public "getEnchantPowerBonus"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type): float
public "shouldDisplayFluidOverlay"(arg0: $BlockState$Type, arg1: $BlockAndTintGetter$Type, arg2: $BlockPos$Type, arg3: $FluidState$Type): boolean
public "getToolModifiedState"(arg0: $BlockState$Type, arg1: $UseOnContext$Type, arg2: $ToolAction$Type, arg3: boolean): $BlockState
public "getBeaconColorMultiplier"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): (float)[]
public "makesOpenTrapdoorAboveClimbable"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockState$Type): boolean
public "getSoundType"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): $SoundType
public "isScaffolding"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "getLightEmission"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type): integer
public "isFlammable"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): boolean
public "canStickTo"(arg0: $BlockState$Type, arg1: $BlockState$Type): boolean
public "getFireSpreadSpeed"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "getFlammability"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "isStickyBlock"(arg0: $BlockState$Type): boolean
public "collisionExtendsVertically"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): boolean
public "getBlock"(): $Block
public "getFireSpreadSpeedZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "getFlammabilityZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "setCreativeTab"(arg0: $ResourceKey$Type<($CreativeModeTab$Type)>): $Block
public "setCreativeTab"(arg0: $ResourceKey$Type<($CreativeModeTab$Type)>, arg1: $ItemLike$Type, arg2: boolean): $Block
public "isConduitFrameZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): boolean
public "isLadderZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "isStickyBlockZeta"(arg0: $BlockState$Type): boolean
public "isScaffoldingZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "canStickToZeta"(arg0: $BlockState$Type, arg1: $BlockState$Type): boolean
public "isFlammableZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): boolean
public "getSoundTypeZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): $SoundType
public "makesOpenTrapdoorAboveClimbableZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockState$Type): boolean
public "canSustainPlantZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type, arg4: string): boolean
public "getToolModifiedStateZeta"(arg0: $BlockState$Type, arg1: $UseOnContext$Type, arg2: string, arg3: boolean): $BlockState
public "collisionExtendsVerticallyZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): boolean
public "shouldDisplayFluidOverlayZeta"(arg0: $BlockState$Type, arg1: $BlockAndTintGetter$Type, arg2: $BlockPos$Type, arg3: $FluidState$Type): boolean
public "getEnchantPowerBonusZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type): float
public "getBeaconColorMultiplierZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): (float)[]
public "getLightEmissionZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type): integer
public "isEnabled"(): boolean
public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
get "module"(): $ZetaModule
set "condition"(value: $BooleanSupplier$Type)
get "block"(): $Block
set "creativeTab"(value: $ResourceKey$Type<($CreativeModeTab$Type)>)
get "enabled"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZetaBushBlock$Type = ($ZetaBushBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZetaBushBlock_ = $ZetaBushBlock$Type;
}}
declare module "packages/org/violetmoon/quark/base/$Quark" {
import {$ILootrIntegration, $ILootrIntegration$Type} from "packages/org/violetmoon/quark/integration/lootr/$ILootrIntegration"
import {$IClaimIntegration, $IClaimIntegration$Type} from "packages/org/violetmoon/quark/integration/claim/$IClaimIntegration"
import {$Logger, $Logger$Type} from "packages/org/apache/logging/log4j/$Logger"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ResourceKey, $ResourceKey$Type} from "packages/net/minecraft/resources/$ResourceKey"
import {$AbstractUndergroundBiomeHandler, $AbstractUndergroundBiomeHandler$Type} from "packages/org/violetmoon/quark/integration/terrablender/$AbstractUndergroundBiomeHandler"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$CommonProxy, $CommonProxy$Type} from "packages/org/violetmoon/quark/base/proxy/$CommonProxy"

export class $Quark {
static readonly "MOD_ID": string
static readonly "ODDITIES_ID": string
static "instance": $Quark
static "proxy": $CommonProxy
static readonly "LOG": $Logger
static readonly "ZETA": $Zeta
static readonly "FLAN_INTEGRATION": $IClaimIntegration
static readonly "LOOTR_INTEGRATION": $ILootrIntegration
static readonly "TERRABLENDER_INTEGRATION": $AbstractUndergroundBiomeHandler

constructor()

public static "asResource"(arg0: string): $ResourceLocation
public static "asResourceKey"<T>(arg0: $ResourceKey$Type<(any)>, arg1: string): $ResourceKey<(T)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Quark$Type = ($Quark);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Quark_ = $Quark$Type;
}}
declare module "packages/org/violetmoon/quark/content/tools/module/$TorchArrowModule" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$ZRegister, $ZRegister$Type} from "packages/org/violetmoon/zeta/event/load/$ZRegister"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$TorchArrow, $TorchArrow$Type} from "packages/org/violetmoon/quark/content/tools/entity/$TorchArrow"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $TorchArrowModule extends $ZetaModule {
static "extinguishOnMiss": boolean
static "torchArrowType": $EntityType<($TorchArrow)>
static "torch_arrow": $Item
static readonly "ignoreMultishot": $TagKey<($Item)>
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "register"(arg0: $ZRegister$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TorchArrowModule$Type = ($TorchArrowModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TorchArrowModule_ = $TorchArrowModule$Type;
}}
declare module "packages/org/violetmoon/quark/content/building/block/$CutVineBlock" {
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$IZetaBlockColorProvider, $IZetaBlockColorProvider$Type} from "packages/org/violetmoon/zeta/registry/$IZetaBlockColorProvider"
import {$ZetaVineBlock, $ZetaVineBlock$Type} from "packages/org/violetmoon/zeta/block/$ZetaVineBlock"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $CutVineBlock extends $ZetaVineBlock implements $IZetaBlockColorProvider {
static readonly "UP": $BooleanProperty
static readonly "NORTH": $BooleanProperty
static readonly "EAST": $BooleanProperty
static readonly "SOUTH": $BooleanProperty
static readonly "WEST": $BooleanProperty
static readonly "PROPERTY_BY_DIRECTION": $Map<($Direction), ($BooleanProperty)>
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(arg0: $ZetaModule$Type)

public "getCloneItemStack"(arg0: $BlockGetter$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type): $ItemStack
public "getBlockColorProviderName"(): string
public "getItemColorProviderName"(): string
public "canSupportAtFace"(arg0: $BlockGetter$Type, arg1: $BlockPos$Type, arg2: $Direction$Type): boolean
public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
get "blockColorProviderName"(): string
get "itemColorProviderName"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CutVineBlock$Type = ($CutVineBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CutVineBlock_ = $CutVineBlock$Type;
}}
declare module "packages/org/violetmoon/zeta/mod/$ZetaMod" {
import {$ZetaModProxy, $ZetaModProxy$Type} from "packages/org/violetmoon/zeta/mod/$ZetaModProxy"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"

export class $ZetaMod {
static "ZETA": $Zeta
static "proxy": $ZetaModProxy

constructor()

public static "start"(arg0: $Zeta$Type, arg1: $ZetaModProxy$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZetaMod$Type = ($ZetaMod);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZetaMod_ = $ZetaMod$Type;
}}
declare module "packages/org/violetmoon/quark/integration/jei/$BackpackRecipeTransferHandler" {
import {$CraftingRecipe, $CraftingRecipe$Type} from "packages/net/minecraft/world/item/crafting/$CraftingRecipe"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$RecipeType, $RecipeType$Type} from "packages/mezz/jei/api/recipe/$RecipeType"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$IRecipeTransferHandler, $IRecipeTransferHandler$Type} from "packages/mezz/jei/api/recipe/transfer/$IRecipeTransferHandler"
import {$IRecipeTransferHandlerHelper, $IRecipeTransferHandlerHelper$Type} from "packages/mezz/jei/api/recipe/transfer/$IRecipeTransferHandlerHelper"
import {$MenuType, $MenuType$Type} from "packages/net/minecraft/world/inventory/$MenuType"
import {$BackpackMenu, $BackpackMenu$Type} from "packages/org/violetmoon/quark/addons/oddities/inventory/$BackpackMenu"
import {$IRecipeTransferError, $IRecipeTransferError$Type} from "packages/mezz/jei/api/recipe/transfer/$IRecipeTransferError"
import {$IRecipeSlotsView, $IRecipeSlotsView$Type} from "packages/mezz/jei/api/gui/ingredient/$IRecipeSlotsView"

export class $BackpackRecipeTransferHandler implements $IRecipeTransferHandler<($BackpackMenu), ($CraftingRecipe)> {

constructor(arg0: $IRecipeTransferHandlerHelper$Type)

public "getRecipeType"(): $RecipeType<($CraftingRecipe)>
public "getMenuType"(): $Optional<($MenuType<($BackpackMenu)>)>
public "getContainerClass"(): $Class<(any)>
public "transferRecipe"(arg0: $BackpackMenu$Type, arg1: $CraftingRecipe$Type, arg2: $IRecipeSlotsView$Type, arg3: $Player$Type, arg4: boolean, arg5: boolean): $IRecipeTransferError
get "recipeType"(): $RecipeType<($CraftingRecipe)>
get "menuType"(): $Optional<($MenuType<($BackpackMenu)>)>
get "containerClass"(): $Class<(any)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BackpackRecipeTransferHandler$Type = ($BackpackRecipeTransferHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BackpackRecipeTransferHandler_ = $BackpackRecipeTransferHandler$Type;
}}
declare module "packages/org/violetmoon/quark/content/tools/entity/$TorchArrow" {
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$AbstractArrow, $AbstractArrow$Type} from "packages/net/minecraft/world/entity/projectile/$AbstractArrow"
import {$IntOpenHashSet, $IntOpenHashSet$Type} from "packages/it/unimi/dsi/fastutil/ints/$IntOpenHashSet"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$AbstractArrow$Pickup, $AbstractArrow$Pickup$Type} from "packages/net/minecraft/world/entity/projectile/$AbstractArrow$Pickup"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $TorchArrow extends $AbstractArrow {
 "pickup": $AbstractArrow$Pickup
 "shakeTime": integer
 "piercingIgnoreEntityIds": $IntOpenHashSet
 "ownerUUID": $UUID
 "cachedOwner": $Entity
 "leftOwner": boolean
 "hasBeenShot": boolean
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(arg0: $Level$Type, arg1: $LivingEntity$Type)
constructor(arg0: $Level$Type, arg1: double, arg2: double, arg3: double)
constructor(arg0: $EntityType$Type<($TorchArrow$Type)>, arg1: $Level$Type)

public "tick"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TorchArrow$Type = ($TorchArrow);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TorchArrow_ = $TorchArrow$Type;
}}
declare module "packages/org/violetmoon/quark/base/config/type/$RGBColorConfig" {
import {$ConfigFlagManager, $ConfigFlagManager$Type} from "packages/org/violetmoon/zeta/config/$ConfigFlagManager"
import {$ClientDefinitionExt, $ClientDefinitionExt$Type} from "packages/org/violetmoon/zeta/client/config/definition/$ClientDefinitionExt"
import {$SectionDefinition, $SectionDefinition$Type} from "packages/org/violetmoon/zeta/config/$SectionDefinition"
import {$IConfigType, $IConfigType$Type} from "packages/org/violetmoon/zeta/config/type/$IConfigType"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$IConfigDefinitionProvider, $IConfigDefinitionProvider$Type} from "packages/org/violetmoon/zeta/client/config/definition/$IConfigDefinitionProvider"

export class $RGBColorConfig implements $IConfigType, $IConfigDefinitionProvider {
 "r": double
 "g": double
 "b": double


public "equals"(arg0: any): boolean
public "hashCode"(): integer
public "getElement"(arg0: integer): double
public "setElement"(arg0: integer, arg1: double): void
public static "forColor"(arg0: double, arg1: double, arg2: double): $RGBColorConfig
public "onReload"(arg0: $ZetaModule$Type, arg1: $ConfigFlagManager$Type): void
public "getClientConfigDefinition"(arg0: $SectionDefinition$Type): $ClientDefinitionExt<($SectionDefinition)>
public "getColor"(): integer
get "color"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RGBColorConfig$Type = ($RGBColorConfig);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RGBColorConfig_ = $RGBColorConfig$Type;
}}
declare module "packages/org/violetmoon/zeta/client/config/definition/$DoubleClientDefinition" {
import {$AbstractWidget, $AbstractWidget$Type} from "packages/net/minecraft/client/gui/components/$AbstractWidget"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$ChangeSet, $ChangeSet$Type} from "packages/org/violetmoon/zeta/config/$ChangeSet"
import {$ZetaClient, $ZetaClient$Type} from "packages/org/violetmoon/zeta/client/$ZetaClient"
import {$ValueDefinition, $ValueDefinition$Type} from "packages/org/violetmoon/zeta/config/$ValueDefinition"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$ClientDefinitionExt, $ClientDefinitionExt$Type} from "packages/org/violetmoon/zeta/client/config/definition/$ClientDefinitionExt"

export class $DoubleClientDefinition implements $ClientDefinitionExt<($ValueDefinition<(double)>)> {

constructor()

public "addWidgets"(arg0: $ZetaClient$Type, arg1: $Screen$Type, arg2: $ChangeSet$Type, arg3: $ValueDefinition$Type<(double)>, arg4: $Consumer$Type<($AbstractWidget$Type)>): void
public "getSubtitle"(arg0: $ChangeSet$Type, arg1: $ValueDefinition$Type<(double)>): string
public "truncate"(arg0: string): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DoubleClientDefinition$Type = ($DoubleClientDefinition);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DoubleClientDefinition_ = $DoubleClientDefinition$Type;
}}
declare module "packages/org/violetmoon/zeta/block/$IZetaBlock" {
import {$BooleanSupplier, $BooleanSupplier$Type} from "packages/java/util/function/$BooleanSupplier"
import {$CreativeModeTab, $CreativeModeTab$Type} from "packages/net/minecraft/world/item/$CreativeModeTab"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$FluidState, $FluidState$Type} from "packages/net/minecraft/world/level/material/$FluidState"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$UseOnContext, $UseOnContext$Type} from "packages/net/minecraft/world/item/context/$UseOnContext"
import {$SoundType, $SoundType$Type} from "packages/net/minecraft/world/level/block/$SoundType"
import {$IZetaBlockExtensions, $IZetaBlockExtensions$Type} from "packages/org/violetmoon/zeta/block/ext/$IZetaBlockExtensions"
import {$ResourceKey, $ResourceKey$Type} from "packages/net/minecraft/resources/$ResourceKey"
import {$ItemLike, $ItemLike$Type} from "packages/net/minecraft/world/level/$ItemLike"
import {$IDisableable, $IDisableable$Type} from "packages/org/violetmoon/zeta/module/$IDisableable"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockAndTintGetter, $BlockAndTintGetter$Type} from "packages/net/minecraft/world/level/$BlockAndTintGetter"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export interface $IZetaBlock extends $IZetaBlockExtensions, $IDisableable<($IZetaBlock)> {

 "getBlock"(): $Block
 "getFireSpreadSpeedZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
 "getFlammabilityZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
 "setCreativeTab"(arg0: $ResourceKey$Type<($CreativeModeTab$Type)>): $Block
 "setCreativeTab"(arg0: $ResourceKey$Type<($CreativeModeTab$Type)>, arg1: $ItemLike$Type, arg2: boolean): $Block
 "isConduitFrameZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): boolean
 "isLadderZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
 "isStickyBlockZeta"(arg0: $BlockState$Type): boolean
 "isScaffoldingZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
 "canStickToZeta"(arg0: $BlockState$Type, arg1: $BlockState$Type): boolean
 "isFlammableZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): boolean
 "getSoundTypeZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): $SoundType
 "makesOpenTrapdoorAboveClimbableZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockState$Type): boolean
 "canSustainPlantZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type, arg4: string): boolean
 "getToolModifiedStateZeta"(arg0: $BlockState$Type, arg1: $UseOnContext$Type, arg2: string, arg3: boolean): $BlockState
 "collisionExtendsVerticallyZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): boolean
 "shouldDisplayFluidOverlayZeta"(arg0: $BlockState$Type, arg1: $BlockAndTintGetter$Type, arg2: $BlockPos$Type, arg3: $FluidState$Type): boolean
 "getEnchantPowerBonusZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type): float
 "getBeaconColorMultiplierZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): (float)[]
 "getLightEmissionZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type): integer
 "getModule"(): $ZetaModule
 "isEnabled"(): boolean
 "doesConditionApply"(): boolean
 "setCondition"(arg0: $BooleanSupplier$Type): $IZetaBlock
}

export namespace $IZetaBlock {
function isEnabled(arg0: $Item$Type): boolean
function isEnabled(arg0: $Block$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IZetaBlock$Type = ($IZetaBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IZetaBlock_ = $IZetaBlock$Type;
}}
declare module "packages/org/violetmoon/quark/content/mobs/entity/$SoulBead" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$ClientGamePacketListener, $ClientGamePacketListener$Type} from "packages/net/minecraft/network/protocol/game/$ClientGamePacketListener"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$Packet, $Packet$Type} from "packages/net/minecraft/network/protocol/$Packet"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $SoulBead extends $Entity {
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(arg0: $EntityType$Type<(any)>, arg1: $Level$Type)

public "setTarget"(arg0: integer, arg1: integer): void
public "tick"(): void
public "m_7380_"(arg0: $CompoundTag$Type): void
public "getAddEntityPacket"(): $Packet<($ClientGamePacketListener)>
get "addEntityPacket"(): $Packet<($ClientGamePacketListener)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SoulBead$Type = ($SoulBead);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SoulBead_ = $SoulBead$Type;
}}
declare module "packages/org/violetmoon/quark/content/automation/block/$GravisandBlock" {
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$ZetaBlock, $ZetaBlock$Type} from "packages/org/violetmoon/zeta/block/$ZetaBlock"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $GravisandBlock extends $ZetaBlock {
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(arg0: string, arg1: $ZetaModule$Type, arg2: $BlockBehaviour$Properties$Type)

public "neighborChanged"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type, arg3: $Block$Type, arg4: $BlockPos$Type, arg5: boolean): void
public "onPlace"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type, arg3: $BlockState$Type, arg4: boolean): void
public "hasAnalogOutputSignal"(arg0: $BlockState$Type): boolean
public "getAnalogOutputSignal"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type): integer
public "tick"(arg0: $BlockState$Type, arg1: $ServerLevel$Type, arg2: $BlockPos$Type, arg3: $RandomSource$Type): void
public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GravisandBlock$Type = ($GravisandBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GravisandBlock_ = $GravisandBlock$Type;
}}
declare module "packages/org/violetmoon/zeta/client/event/play/$ZScreen$KeyPressed$Pre" {
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$ZScreen$KeyPressed, $ZScreen$KeyPressed$Type} from "packages/org/violetmoon/zeta/client/event/play/$ZScreen$KeyPressed"

export interface $ZScreen$KeyPressed$Pre extends $ZScreen$KeyPressed {

 "getModifiers"(): integer
 "getKeyCode"(): integer
 "getScanCode"(): integer
 "getScreen"(): $Screen
 "cancel"(): void
 "setCanceled"(arg0: boolean): void
 "isCanceled"(): boolean
}

export namespace $ZScreen$KeyPressed$Pre {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZScreen$KeyPressed$Pre$Type = ($ZScreen$KeyPressed$Pre);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZScreen$KeyPressed$Pre_ = $ZScreen$KeyPressed$Pre$Type;
}}
declare module "packages/org/violetmoon/zeta/network/$ZetaNetworkHandler" {
import {$IZetaMessage, $IZetaMessage$Type} from "packages/org/violetmoon/zeta/network/$IZetaMessage"
import {$Pair, $Pair$Type} from "packages/org/apache/commons/lang3/tuple/$Pair"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$Packet, $Packet$Type} from "packages/net/minecraft/network/protocol/$Packet"
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$Iterable, $Iterable$Type} from "packages/java/lang/$Iterable"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$ZetaNetworkDirection, $ZetaNetworkDirection$Type} from "packages/org/violetmoon/zeta/network/$ZetaNetworkDirection"
import {$List, $List$Type} from "packages/java/util/$List"
import {$MinecraftServer, $MinecraftServer$Type} from "packages/net/minecraft/server/$MinecraftServer"
import {$ZetaMessageSerializer, $ZetaMessageSerializer$Type} from "packages/org/violetmoon/zeta/network/$ZetaMessageSerializer"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ZetaHandshakeMessage, $ZetaHandshakeMessage$Type} from "packages/org/violetmoon/zeta/network/$ZetaHandshakeMessage"

export class $ZetaNetworkHandler {
 "serializer": $ZetaMessageSerializer

constructor(arg0: $Zeta$Type, arg1: integer)

public "register"<T extends $IZetaMessage>(arg0: $Class$Type<(T)>, arg1: $ZetaNetworkDirection$Type): void
public "sendToAllPlayers"(arg0: $IZetaMessage$Type, arg1: $MinecraftServer$Type): void
public "wrapInVanilla"(arg0: $IZetaMessage$Type, arg1: $ZetaNetworkDirection$Type): $Packet<(any)>
public "registerLogin"<T extends $ZetaHandshakeMessage>(arg0: $Class$Type<(T)>, arg1: $ZetaNetworkDirection$Type, arg2: integer, arg3: boolean, arg4: $Function$Type<(boolean), ($List$Type<($Pair$Type<(string), (T)>)>)>): void
public "sendToPlayer"(arg0: $IZetaMessage$Type, arg1: $ServerPlayer$Type): void
public "getSerializer"(): $ZetaMessageSerializer
public "sendToPlayers"(arg0: $IZetaMessage$Type, arg1: $Iterable$Type<($ServerPlayer$Type)>): void
public "sendToServer"(arg0: $IZetaMessage$Type): void
get "serializer"(): $ZetaMessageSerializer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZetaNetworkHandler$Type = ($ZetaNetworkHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZetaNetworkHandler_ = $ZetaNetworkHandler$Type;
}}
declare module "packages/org/violetmoon/zeta/event/play/$ZBonemeal" {
import {$IZetaPlayEvent, $IZetaPlayEvent$Type} from "packages/org/violetmoon/zeta/event/bus/$IZetaPlayEvent"
import {$ZResult, $ZResult$Type} from "packages/org/violetmoon/zeta/event/bus/$ZResult"
import {$Resultable, $Resultable$Type} from "packages/org/violetmoon/zeta/event/bus/$Resultable"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export interface $ZBonemeal extends $IZetaPlayEvent, $Resultable {

 "getStack"(): $ItemStack
 "getLevel"(): $Level
 "getBlock"(): $BlockState
 "getPos"(): $BlockPos
 "setResult"(arg0: $ZResult$Type): void
 "getResult"(): $ZResult
}

export namespace $ZBonemeal {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZBonemeal$Type = ($ZBonemeal);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZBonemeal_ = $ZBonemeal$Type;
}}
declare module "packages/org/violetmoon/quark/base/config/type/$ConvulsionMatrixConfig" {
import {$ConvulsionMatrixConfig$Params, $ConvulsionMatrixConfig$Params$Type} from "packages/org/violetmoon/quark/base/config/type/$ConvulsionMatrixConfig$Params"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ConfigFlagManager, $ConfigFlagManager$Type} from "packages/org/violetmoon/zeta/config/$ConfigFlagManager"
import {$ClientDefinitionExt, $ClientDefinitionExt$Type} from "packages/org/violetmoon/zeta/client/config/definition/$ClientDefinitionExt"
import {$SectionDefinition, $SectionDefinition$Type} from "packages/org/violetmoon/zeta/config/$SectionDefinition"
import {$IConfigType, $IConfigType$Type} from "packages/org/violetmoon/zeta/config/type/$IConfigType"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$IConfigDefinitionProvider, $IConfigDefinitionProvider$Type} from "packages/org/violetmoon/zeta/client/config/definition/$IConfigDefinitionProvider"

export class $ConvulsionMatrixConfig implements $IConfigType, $IConfigDefinitionProvider {
 "r": $List<(double)>
 "g": $List<(double)>
 "b": $List<(double)>
readonly "params": $ConvulsionMatrixConfig$Params
 "colorMatrix": (double)[]

constructor(arg0: $ConvulsionMatrixConfig$Params$Type)

public "equals"(arg0: any): boolean
public "hashCode"(): integer
public "onReload"(arg0: $ZetaModule$Type, arg1: $ConfigFlagManager$Type): void
public "getClientConfigDefinition"(arg0: $SectionDefinition$Type): $ClientDefinitionExt<($SectionDefinition)>
public "convolve"(arg0: integer): integer
public static "convolve"(arg0: (double)[], arg1: integer): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ConvulsionMatrixConfig$Type = ($ConvulsionMatrixConfig);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ConvulsionMatrixConfig_ = $ConvulsionMatrixConfig$Type;
}}
declare module "packages/org/violetmoon/zeta/client/config/$ClientConfigManager" {
import {$Definition, $Definition$Type} from "packages/org/violetmoon/zeta/config/$Definition"
import {$ZetaClient, $ZetaClient$Type} from "packages/org/violetmoon/zeta/client/$ZetaClient"
import {$ClientDefinitionExt, $ClientDefinitionExt$Type} from "packages/org/violetmoon/zeta/client/config/definition/$ClientDefinitionExt"
import {$ZConfigChanged, $ZConfigChanged$Type} from "packages/org/violetmoon/zeta/event/load/$ZConfigChanged"

export class $ClientConfigManager {

constructor(arg0: $ZetaClient$Type)

public "configChanged"(arg0: $ZConfigChanged$Type): void
public "getExt"<D extends $Definition>(arg0: D): $ClientDefinitionExt<(D)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientConfigManager$Type = ($ClientConfigManager);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientConfigManager_ = $ClientConfigManager$Type;
}}
declare module "packages/org/violetmoon/quark/base/client/config/$QButton" {
import {$Button, $Button$Type} from "packages/net/minecraft/client/gui/components/$Button"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$Button$OnPress, $Button$OnPress$Type} from "packages/net/minecraft/client/gui/components/$Button$OnPress"

export class $QButton extends $Button {
static readonly "SMALL_WIDTH": integer
static readonly "DEFAULT_WIDTH": integer
static readonly "DEFAULT_HEIGHT": integer
 "onPress": $Button$OnPress
static readonly "WIDGETS_LOCATION": $ResourceLocation
static readonly "ACCESSIBILITY_TEXTURE": $ResourceLocation
 "height": integer
 "x": integer
 "y": integer
 "active": boolean
 "visible": boolean
static readonly "UNSET_FG_COLOR": integer

constructor(arg0: integer, arg1: integer)

public "m_87963_"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
public "getFGColor"(): integer
public static "click"(arg0: $Button$Type): void
get "fGColor"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $QButton$Type = ($QButton);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $QButton_ = $QButton$Type;
}}
declare module "packages/org/violetmoon/quark/content/mobs/client/model/$CrabModel" {
import {$VertexConsumer, $VertexConsumer$Type} from "packages/com/mojang/blaze3d/vertex/$VertexConsumer"
import {$Crab, $Crab$Type} from "packages/org/violetmoon/quark/content/mobs/entity/$Crab"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$EntityModel, $EntityModel$Type} from "packages/net/minecraft/client/model/$EntityModel"
import {$ModelPart, $ModelPart$Type} from "packages/net/minecraft/client/model/geom/$ModelPart"
import {$LayerDefinition, $LayerDefinition$Type} from "packages/net/minecraft/client/model/geom/builders/$LayerDefinition"

export class $CrabModel extends $EntityModel<($Crab)> {
 "group": $ModelPart
 "body": $ModelPart
 "rightClaw": $ModelPart
 "leftClaw": $ModelPart
 "rightLeg1": $ModelPart
 "rightLeg2": $ModelPart
 "rightLeg3": $ModelPart
 "rightLeg4": $ModelPart
 "leftLeg1": $ModelPart
 "leftLeg2": $ModelPart
 "leftLeg3": $ModelPart
 "leftLeg4": $ModelPart
 "rightEye": $ModelPart
 "leftEye": $ModelPart
 "attackTime": float
 "riding": boolean
 "young": boolean

constructor(arg0: $ModelPart$Type)

public "setRotateAngle"(arg0: $ModelPart$Type, arg1: float, arg2: float, arg3: float): void
public "setupAnim"(arg0: $Crab$Type, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float): void
public static "createBodyLayer"(): $LayerDefinition
public "renderToBuffer"(arg0: $PoseStack$Type, arg1: $VertexConsumer$Type, arg2: integer, arg3: integer, arg4: float, arg5: float, arg6: float, arg7: float): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CrabModel$Type = ($CrabModel);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CrabModel_ = $CrabModel$Type;
}}
declare module "packages/org/violetmoon/quark/integration/claim/$FlanIntegration" {
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$IClaimIntegration, $IClaimIntegration$Type} from "packages/org/violetmoon/quark/integration/claim/$IClaimIntegration"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $FlanIntegration implements $IClaimIntegration {

constructor()

public "canReplace"(arg0: $Player$Type, arg1: $BlockPos$Type): boolean
public "canPlace"(arg0: $Player$Type, arg1: $BlockPos$Type): boolean
public "canInteract"(arg0: $Player$Type, arg1: $BlockPos$Type): boolean
public "canBreak"(arg0: $Player$Type, arg1: $BlockPos$Type): boolean
public "canAttack"(arg0: $Player$Type, arg1: $Entity$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FlanIntegration$Type = ($FlanIntegration);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FlanIntegration_ = $FlanIntegration$Type;
}}
declare module "packages/org/violetmoon/zeta/config/type/$IConfigType" {
import {$ConfigFlagManager, $ConfigFlagManager$Type} from "packages/org/violetmoon/zeta/config/$ConfigFlagManager"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export interface $IConfigType {

 "onReload"(arg0: $ZetaModule$Type, arg1: $ConfigFlagManager$Type): void
}

export namespace $IConfigType {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IConfigType$Type = ($IConfigType);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IConfigType_ = $IConfigType$Type;
}}
declare module "packages/org/violetmoon/quark/content/world/feature/$OffsetFancyFoliagePlacer" {
import {$FancyFoliagePlacer, $FancyFoliagePlacer$Type} from "packages/net/minecraft/world/level/levelgen/feature/foliageplacers/$FancyFoliagePlacer"
import {$FoliagePlacerType, $FoliagePlacerType$Type} from "packages/net/minecraft/world/level/levelgen/feature/foliageplacers/$FoliagePlacerType"
import {$IntProvider, $IntProvider$Type} from "packages/net/minecraft/util/valueproviders/$IntProvider"
import {$Codec, $Codec$Type} from "packages/com/mojang/serialization/$Codec"

export class $OffsetFancyFoliagePlacer extends $FancyFoliagePlacer {
static readonly "CODEC": $Codec<($OffsetFancyFoliagePlacer)>
static readonly "TYPE": $FoliagePlacerType<($OffsetFancyFoliagePlacer)>

constructor(arg0: $IntProvider$Type, arg1: $IntProvider$Type, arg2: integer)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $OffsetFancyFoliagePlacer$Type = ($OffsetFancyFoliagePlacer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $OffsetFancyFoliagePlacer_ = $OffsetFancyFoliagePlacer$Type;
}}
declare module "packages/org/violetmoon/zetaimplforge/event/load/$ForgeZLoadComplete" {
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$ZLoadComplete, $ZLoadComplete$Type} from "packages/org/violetmoon/zeta/event/load/$ZLoadComplete"
import {$Runnable, $Runnable$Type} from "packages/java/lang/$Runnable"
import {$FMLLoadCompleteEvent, $FMLLoadCompleteEvent$Type} from "packages/net/minecraftforge/fml/event/lifecycle/$FMLLoadCompleteEvent"

export class $ForgeZLoadComplete extends $Record implements $ZLoadComplete {

constructor(e: $FMLLoadCompleteEvent$Type)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "e"(): $FMLLoadCompleteEvent
public "enqueueWork"(arg0: $Runnable$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ForgeZLoadComplete$Type = ($ForgeZLoadComplete);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ForgeZLoadComplete_ = $ForgeZLoadComplete$Type;
}}
declare module "packages/org/violetmoon/zeta/advancement/$MutableAdvancement" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$IMutableAdvancement, $IMutableAdvancement$Type} from "packages/org/violetmoon/zeta/api/$IMutableAdvancement"
import {$Criterion, $Criterion$Type} from "packages/net/minecraft/advancements/$Criterion"
import {$Advancement, $Advancement$Type} from "packages/net/minecraft/advancements/$Advancement"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $MutableAdvancement implements $IMutableAdvancement {
 "criteria": $Map<(string), ($Criterion)>
 "requirements": $List<($List<(string)>)>

constructor(arg0: $Advancement$Type)

public "commit"(): void
public "addRequiredCriterion"(arg0: string, arg1: $Criterion$Type): void
public "getCriterion"(arg0: string): $Criterion
public "addOrCriterion"(arg0: string, arg1: $Criterion$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MutableAdvancement$Type = ($MutableAdvancement);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MutableAdvancement_ = $MutableAdvancement$Type;
}}
declare module "packages/org/violetmoon/quark/base/capability/$CapabilityHandler" {
import {$ZAttachCapabilities$ItemStackCaps, $ZAttachCapabilities$ItemStackCaps$Type} from "packages/org/violetmoon/zeta/event/play/loading/$ZAttachCapabilities$ItemStackCaps"
import {$ZAttachCapabilities$BlockEntityCaps, $ZAttachCapabilities$BlockEntityCaps$Type} from "packages/org/violetmoon/zeta/event/play/loading/$ZAttachCapabilities$BlockEntityCaps"
import {$ZAttachCapabilities$LevelCaps, $ZAttachCapabilities$LevelCaps$Type} from "packages/org/violetmoon/zeta/event/play/loading/$ZAttachCapabilities$LevelCaps"

export class $CapabilityHandler {

constructor()

public static "attachItemCapabilities"(arg0: $ZAttachCapabilities$ItemStackCaps$Type): void
public static "attachTileCapabilities"(arg0: $ZAttachCapabilities$BlockEntityCaps$Type): void
public static "attachLevelCapabilities"(arg0: $ZAttachCapabilities$LevelCaps$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CapabilityHandler$Type = ($CapabilityHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CapabilityHandler_ = $CapabilityHandler$Type;
}}
declare module "packages/org/violetmoon/zeta/client/event/load/$ZAddModelLayers" {
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$IZetaLoadEvent, $IZetaLoadEvent$Type} from "packages/org/violetmoon/zeta/event/bus/$IZetaLoadEvent"
import {$LivingEntityRenderer, $LivingEntityRenderer$Type} from "packages/net/minecraft/client/renderer/entity/$LivingEntityRenderer"
import {$EntityModelSet, $EntityModelSet$Type} from "packages/net/minecraft/client/model/geom/$EntityModelSet"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export interface $ZAddModelLayers extends $IZetaLoadEvent {

 "getEntityModels"(): $EntityModelSet
 "getRenderer"<T extends $LivingEntity, R extends $LivingEntityRenderer<(T), (any)>>(arg0: $EntityType$Type<(any)>): R
}

export namespace $ZAddModelLayers {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZAddModelLayers$Type = ($ZAddModelLayers);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZAddModelLayers_ = $ZAddModelLayers$Type;
}}
declare module "packages/org/violetmoon/quark/content/building/block/$RainbowLampBlock" {
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$ZetaGlassBlock, $ZetaGlassBlock$Type} from "packages/org/violetmoon/zeta/block/$ZetaGlassBlock"
import {$MapColor, $MapColor$Type} from "packages/net/minecraft/world/level/material/$MapColor"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"

export class $RainbowLampBlock extends $ZetaGlassBlock {
readonly "colorComponents": (float)[]
static readonly "LIT": $BooleanProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(arg0: string, arg1: integer, arg2: $ZetaModule$Type, arg3: $MapColor$Type)

public "getStateForPlacement"(arg0: $BlockPlaceContext$Type): $BlockState
public "getBeaconColorMultiplierZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): (float)[]
public "neighborChanged"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type, arg3: $Block$Type, arg4: $BlockPos$Type, arg5: boolean): void
public "tick"(arg0: $BlockState$Type, arg1: $ServerLevel$Type, arg2: $BlockPos$Type, arg3: $RandomSource$Type): void
public "getDescriptionId"(): string
public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
get "descriptionId"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RainbowLampBlock$Type = ($RainbowLampBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RainbowLampBlock_ = $RainbowLampBlock$Type;
}}
declare module "packages/org/violetmoon/quark/addons/oddities/capability/$MagnetTracker" {
import {$Vec3i, $Vec3i$Type} from "packages/net/minecraft/core/$Vec3i"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$IMagnetTracker, $IMagnetTracker$Type} from "packages/org/violetmoon/quark/api/$IMagnetTracker"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $MagnetTracker implements $IMagnetTracker {

constructor(arg0: $Level$Type)

public "getNetForce"(arg0: $BlockPos$Type): $Vec3i
public "actOnForces"(arg0: $BlockPos$Type): void
public "clear"(): void
public "getTrackedPositions"(): $Collection<($BlockPos)>
public "applyForce"(arg0: $BlockPos$Type, arg1: integer, arg2: boolean, arg3: $Direction$Type, arg4: integer, arg5: $BlockPos$Type): void
get "trackedPositions"(): $Collection<($BlockPos)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MagnetTracker$Type = ($MagnetTracker);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MagnetTracker_ = $MagnetTracker$Type;
}}
declare module "packages/org/violetmoon/quark/content/world/config/$AirStoneClusterConfig" {
import {$BigStoneClusterConfig, $BigStoneClusterConfig$Type} from "packages/org/violetmoon/quark/content/world/config/$BigStoneClusterConfig"
import {$DimensionConfig, $DimensionConfig$Type} from "packages/org/violetmoon/zeta/config/type/$DimensionConfig"
import {$IBiomeConfig, $IBiomeConfig$Type} from "packages/org/violetmoon/zeta/config/type/$IBiomeConfig"
import {$AirStoneClusterConfig$Builder, $AirStoneClusterConfig$Builder$Type} from "packages/org/violetmoon/quark/content/world/config/$AirStoneClusterConfig$Builder"

export class $AirStoneClusterConfig extends $BigStoneClusterConfig {
 "generateInAir": boolean
 "enabled": boolean
 "dimensions": $DimensionConfig
 "biomes": $IBiomeConfig
 "rarity": integer
 "minYLevel": integer
 "maxYLevel": integer
 "horizontalSize": integer
 "verticalSize": integer
 "horizontalVariation": integer
 "verticalVariation": integer

constructor(arg0: $AirStoneClusterConfig$Builder$Type<(any)>)

public static "airStoneBuilder"<B extends $AirStoneClusterConfig$Builder<(B)>>(): $AirStoneClusterConfig$Builder<(B)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AirStoneClusterConfig$Type = ($AirStoneClusterConfig);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AirStoneClusterConfig_ = $AirStoneClusterConfig$Type;
}}
declare module "packages/org/violetmoon/quark/content/mobs/entity/$Toretoise" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$WalkAnimationState, $WalkAnimationState$Type} from "packages/net/minecraft/world/entity/$WalkAnimationState"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$MobSpawnType, $MobSpawnType$Type} from "packages/net/minecraft/world/entity/$MobSpawnType"
import {$PathNavigation, $PathNavigation$Type} from "packages/net/minecraft/world/entity/ai/navigation/$PathNavigation"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$AttributeMap, $AttributeMap$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeMap"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$Animal, $Animal$Type} from "packages/net/minecraft/world/entity/animal/$Animal"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$ServerLevelAccessor, $ServerLevelAccessor$Type} from "packages/net/minecraft/world/level/$ServerLevelAccessor"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$LevelRenderer, $LevelRenderer$Type} from "packages/net/minecraft/client/renderer/$LevelRenderer"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"
import {$DifficultyInstance, $DifficultyInstance$Type} from "packages/net/minecraft/world/$DifficultyInstance"
import {$GoalSelector, $GoalSelector$Type} from "packages/net/minecraft/world/entity/ai/goal/$GoalSelector"
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$AttributeSupplier$Builder, $AttributeSupplier$Builder$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeSupplier$Builder"
import {$SpawnGroupData, $SpawnGroupData$Type} from "packages/net/minecraft/world/entity/$SpawnGroupData"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$LootParams$Builder, $LootParams$Builder$Type} from "packages/net/minecraft/world/level/storage/loot/$LootParams$Builder"
import {$AgeableMob, $AgeableMob$Type} from "packages/net/minecraft/world/entity/$AgeableMob"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $Toretoise extends $Animal {
static readonly "ORE_TYPES": integer
static readonly "ANGERY_TIME": integer
 "rideTime": integer
 "angeryTicks": integer
static readonly "BABY_START_AGE": integer
 "entityJs$builder": any
static readonly "MAX_WEARING_ARMOR_CHANCE": float
static readonly "MAX_PICKUP_LOOT_CHANCE": float
static readonly "MAX_ENCHANTED_ARMOR_CHANCE": float
static readonly "MAX_ENCHANTED_WEAPON_CHANCE": float
static readonly "LEASH_TAG": string
static readonly "DEFAULT_EQUIPMENT_DROP_CHANCE": float
static readonly "PRESERVE_ITEM_DROP_CHANCE": integer
static readonly "UPDATE_GOAL_SELECTOR_EVERY_N_TICKS": integer
 "ambientSoundTime": integer
 "navigation": $PathNavigation
readonly "goalSelector": $GoalSelector
readonly "targetSelector": $GoalSelector
 "leashInfoTag": $CompoundTag
static readonly "HAND_SLOTS": integer
static readonly "ARMOR_SLOTS": integer
static readonly "EQUIPMENT_SLOT_OFFSET": integer
static readonly "ARMOR_SLOT_OFFSET": integer
static readonly "SWING_DURATION": integer
static readonly "PLAYER_HURT_EXPERIENCE_TIME": integer
static readonly "MIN_MOVEMENT_DISTANCE": double
static readonly "DEFAULT_BASE_GRAVITY": double
static readonly "DEATH_DURATION": integer
static readonly "USE_ITEM_INTERVAL": integer
static readonly "EXTRA_RENDER_CULLING_SIZE_WITH_BIG_HAT": float
 "attributes": $AttributeMap
readonly "activeEffects": $Map<($MobEffect), ($MobEffectInstance)>
 "swinging": boolean
 "swingingArm": $InteractionHand
 "swingTime": integer
 "removeArrowTime": integer
 "removeStingerTime": integer
 "hurtTime": integer
 "hurtDuration": integer
 "deathTime": integer
 "oAttackAnim": float
 "attackAnim": float
 "attackStrengthTicker": integer
readonly "walkAnimation": $WalkAnimationState
readonly "invulnerableDuration": integer
readonly "timeOffs": float
readonly "rotA": float
 "yBodyRot": float
 "yBodyRotO": float
 "yHeadRot": float
 "yHeadRotO": float
 "dead": boolean
 "jumping": boolean
 "xxa": float
 "yya": float
 "zza": float
 "effectsDirty": boolean
 "noJumpDelay": integer
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(arg0: $EntityType$Type<(any)>, arg1: $Level$Type)

public "isPushedByFluid"(): boolean
public "canBreatheUnderwater"(): boolean
public static "prepareAttributes"(): $AttributeSupplier$Builder
public "tick"(): void
public "readAdditionalSaveData"(arg0: $CompoundTag$Type): void
public "addAdditionalSaveData"(arg0: $CompoundTag$Type): void
public "attack"(arg0: $DamageSource$Type, arg1: float): boolean
public "causeFallDamage"(arg0: float, arg1: float, arg2: $DamageSource$Type): boolean
public "getVoicePitch"(): float
public "getEatingSound"(arg0: $ItemStack$Type): $SoundEvent
public static "spawnPredicate"(arg0: $EntityType$Type<(any)>, arg1: $ServerLevelAccessor$Type, arg2: $MobSpawnType$Type, arg3: $BlockPos$Type, arg4: $RandomSource$Type): boolean
public "removeWhenFarAway"(arg0: double): boolean
public "checkSpawnRules"(arg0: $LevelAccessor$Type, arg1: $MobSpawnType$Type): boolean
public "canBeLeashed"(arg0: $Player$Type): boolean
public "getBreedOffspring"(arg0: $ServerLevel$Type, arg1: $AgeableMob$Type): $Toretoise
public "finalizeSpawn"(arg0: $ServerLevelAccessor$Type, arg1: $DifficultyInstance$Type, arg2: $MobSpawnType$Type, arg3: $SpawnGroupData$Type, arg4: $CompoundTag$Type): $SpawnGroupData
public "dropOre"(arg0: integer, arg1: $LootParams$Builder$Type): void
public "getOreType"(): integer
public "canBreed"(): boolean
public "isFood"(arg0: $ItemStack$Type): boolean
public "setInLove"(arg0: $Player$Type): void
public "setInLoveTime"(arg0: integer): void
public "lithiumOnEquipmentChanged"(): void
public "tdv$getDynamicLightX"(): double
public "tdv$getDynamicLightZ"(): double
public "tdv$getDynamicLightWorld"(): $Level
public "tdv$shouldUpdateDynamicLight"(): boolean
public "tdv$resetDynamicLight"(): void
public "tdv$getDynamicLightY"(): double
public "tdv$lambdynlights$scheduleTrackedChunksRebuild"(arg0: $LevelRenderer$Type): void
public "tdv$lambdynlights$updateDynamicLight"(arg0: $LevelRenderer$Type): boolean
public "getCachedFeetBlockState"(): $BlockState
get "pushedByFluid"(): boolean
get "voicePitch"(): float
get "oreType"(): integer
set "inLove"(value: $Player$Type)
set "inLoveTime"(value: integer)
get "cachedFeetBlockState"(): $BlockState
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Toretoise$Type = ($Toretoise);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Toretoise_ = $Toretoise$Type;
}}
declare module "packages/org/violetmoon/zeta/world/generator/multichunk/$ClusterBasedGenerator$IGenerationContext" {
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export interface $ClusterBasedGenerator$IGenerationContext {

 "consume"(arg0: $BlockPos$Type): void
 "canPlaceAt"(arg0: $BlockPos$Type): boolean
}

export namespace $ClusterBasedGenerator$IGenerationContext {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClusterBasedGenerator$IGenerationContext$Type = ($ClusterBasedGenerator$IGenerationContext);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClusterBasedGenerator$IGenerationContext_ = $ClusterBasedGenerator$IGenerationContext$Type;
}}
declare module "packages/org/violetmoon/quark/api/$IMagneticEntity" {
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export interface $IMagneticEntity {

 "moveByMagnet"(arg0: $Entity$Type, arg1: $Vec3$Type, arg2: $BlockEntity$Type): void
}

export namespace $IMagneticEntity {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IMagneticEntity$Type = ($IMagneticEntity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IMagneticEntity_ = $IMagneticEntity$Type;
}}
declare module "packages/org/violetmoon/quark/content/tools/module/$EndermoshMusicDiscModule" {
import {$QuarkMusicDiscItem, $QuarkMusicDiscItem$Type} from "packages/org/violetmoon/quark/base/item/$QuarkMusicDiscItem"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$ZRegister, $ZRegister$Type} from "packages/org/violetmoon/zeta/event/load/$ZRegister"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ZLootTableLoad, $ZLootTableLoad$Type} from "packages/org/violetmoon/zeta/event/play/loading/$ZLootTableLoad"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $EndermoshMusicDiscModule extends $ZetaModule {
 "endermosh": $QuarkMusicDiscItem
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "register"(arg0: $ZRegister$Type): void
public "onLootTableLoad"(arg0: $ZLootTableLoad$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EndermoshMusicDiscModule$Type = ($EndermoshMusicDiscModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EndermoshMusicDiscModule_ = $EndermoshMusicDiscModule$Type;
}}
declare module "packages/org/violetmoon/quark/integration/lootr/$LootrVariantTrappedChestBlock" {
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$ChestType, $ChestType$Type} from "packages/net/minecraft/world/level/block/state/properties/$ChestType"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$VariantTrappedChestBlock, $VariantTrappedChestBlock$Type} from "packages/org/violetmoon/quark/content/building/block/$VariantTrappedChestBlock"
import {$IZetaBlockItemProvider, $IZetaBlockItemProvider$Type} from "packages/org/violetmoon/zeta/registry/$IZetaBlockItemProvider"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$DirectionProperty, $DirectionProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$DirectionProperty"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$CollisionContext, $CollisionContext$Type} from "packages/net/minecraft/world/phys/shapes/$CollisionContext"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$BlockItem, $BlockItem$Type} from "packages/net/minecraft/world/item/$BlockItem"
import {$EnumProperty, $EnumProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$EnumProperty"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$MenuProvider, $MenuProvider$Type} from "packages/net/minecraft/world/$MenuProvider"
import {$BlockEntityTicker, $BlockEntityTicker$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityTicker"

export class $LootrVariantTrappedChestBlock extends $VariantTrappedChestBlock implements $IZetaBlockItemProvider {
static readonly "FACING": $DirectionProperty
static readonly "TYPE": $EnumProperty<($ChestType)>
static readonly "WATERLOGGED": $BooleanProperty
static readonly "EVENT_SET_OPEN_COUNT": integer
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(arg0: string, arg1: $ZetaModule$Type, arg2: $Supplier$Type<($BlockEntityType$Type<(any)>)>, arg3: $BlockBehaviour$Properties$Type)

public "getTicker"<T extends $BlockEntity>(arg0: $Level$Type, arg1: $BlockState$Type, arg2: $BlockEntityType$Type<(T)>): $BlockEntityTicker<(T)>
public "provideItemBlock"(arg0: $Block$Type, arg1: $Item$Properties$Type): $BlockItem
public "getExplosionResistance"(): float
public "updateShape"(arg0: $BlockState$Type, arg1: $Direction$Type, arg2: $BlockState$Type, arg3: $LevelAccessor$Type, arg4: $BlockPos$Type, arg5: $BlockPos$Type): $BlockState
public "use"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type, arg3: $Player$Type, arg4: $InteractionHand$Type, arg5: $BlockHitResult$Type): $InteractionResult
public "isSignalSource"(arg0: $BlockState$Type): boolean
public "getMenuProvider"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type): $MenuProvider
public "getShape"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $CollisionContext$Type): $VoxelShape
public "getSignal"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "getDirectSignal"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "newBlockEntity"(arg0: $BlockPos$Type, arg1: $BlockState$Type): $BlockEntity
public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
get "explosionResistance"(): float
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LootrVariantTrappedChestBlock$Type = ($LootrVariantTrappedChestBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LootrVariantTrappedChestBlock_ = $LootrVariantTrappedChestBlock$Type;
}}
declare module "packages/org/violetmoon/zeta/util/$VanillaWoods$Wood" {
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$SoundType, $SoundType$Type} from "packages/net/minecraft/world/level/block/$SoundType"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"

export class $VanillaWoods$Wood extends $Record {

constructor(name: string, log: $Block$Type, wood: $Block$Type, planks: $Block$Type, leaf: $Block$Type, fence: $Block$Type, nether: boolean, soundWood: $SoundType$Type, soundPlanks: $SoundType$Type)

public "name"(): string
public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "log"(): $Block
public "fence"(): $Block
public "soundWood"(): $SoundType
public "soundPlanks"(): $SoundType
public "wood"(): $Block
public "nether"(): boolean
public "planks"(): $Block
public "leaf"(): $Block
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $VanillaWoods$Wood$Type = ($VanillaWoods$Wood);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $VanillaWoods$Wood_ = $VanillaWoods$Wood$Type;
}}
declare module "packages/org/violetmoon/zeta/event/play/entity/living/$ZLivingChangeTarget" {
import {$IZetaPlayEvent, $IZetaPlayEvent$Type} from "packages/org/violetmoon/zeta/event/bus/$IZetaPlayEvent"
import {$LivingGetter, $LivingGetter$Type} from "packages/org/violetmoon/zeta/event/bus/helpers/$LivingGetter"
import {$LivingChangeTargetEvent$ILivingTargetType, $LivingChangeTargetEvent$ILivingTargetType$Type} from "packages/net/minecraftforge/event/entity/living/$LivingChangeTargetEvent$ILivingTargetType"
import {$Cancellable, $Cancellable$Type} from "packages/org/violetmoon/zeta/event/bus/$Cancellable"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export interface $ZLivingChangeTarget extends $IZetaPlayEvent, $Cancellable, $LivingGetter {

 "getTargetType"(): $LivingChangeTargetEvent$ILivingTargetType
 "getNewTarget"(): $LivingEntity
 "cancel"(): void
 "setCanceled"(arg0: boolean): void
 "isCanceled"(): boolean
 "getEntity"(): $LivingEntity
}

export namespace $ZLivingChangeTarget {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZLivingChangeTarget$Type = ($ZLivingChangeTarget);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZLivingChangeTarget_ = $ZLivingChangeTarget$Type;
}}
declare module "packages/org/violetmoon/zetaimplforge/event/play/entity/$ForgeZEntityJoinLevel" {
import {$EntityJoinLevelEvent, $EntityJoinLevelEvent$Type} from "packages/net/minecraftforge/event/entity/$EntityJoinLevelEvent"
import {$ZEntityJoinLevel, $ZEntityJoinLevel$Type} from "packages/org/violetmoon/zeta/event/play/entity/$ZEntityJoinLevel"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $ForgeZEntityJoinLevel implements $ZEntityJoinLevel {

constructor(arg0: $EntityJoinLevelEvent$Type)

public "setCanceled"(arg0: boolean): void
public "isCanceled"(): boolean
public "getEntity"(): $Entity
public "cancel"(): void
set "canceled"(value: boolean)
get "canceled"(): boolean
get "entity"(): $Entity
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ForgeZEntityJoinLevel$Type = ($ForgeZEntityJoinLevel);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ForgeZEntityJoinLevel_ = $ForgeZEntityJoinLevel$Type;
}}
declare module "packages/org/violetmoon/quark/content/building/module/$SoulSandstoneModule" {
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$ZRegister, $ZRegister$Type} from "packages/org/violetmoon/zeta/event/load/$ZRegister"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $SoulSandstoneModule extends $ZetaModule {
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "register"(arg0: $ZRegister$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SoulSandstoneModule$Type = ($SoulSandstoneModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SoulSandstoneModule_ = $SoulSandstoneModule$Type;
}}
declare module "packages/org/violetmoon/quark/content/building/module/$VariantFurnacesModule" {
import {$VariantFurnaceBlockEntity, $VariantFurnaceBlockEntity$Type} from "packages/org/violetmoon/quark/content/building/block/be/$VariantFurnaceBlockEntity"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$ZRegister, $ZRegister$Type} from "packages/org/violetmoon/zeta/event/load/$ZRegister"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $VariantFurnacesModule extends $ZetaModule {
static "blockEntityType": $BlockEntityType<($VariantFurnaceBlockEntity)>
static "deepslateFurnace": $Block
static "blackstoneFurnace": $Block
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "register"(arg0: $ZRegister$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $VariantFurnacesModule$Type = ($VariantFurnacesModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $VariantFurnacesModule_ = $VariantFurnacesModule$Type;
}}
declare module "packages/org/violetmoon/zeta/block/$ZetaGlassBlock" {
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$CollisionContext, $CollisionContext$Type} from "packages/net/minecraft/world/phys/shapes/$CollisionContext"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$FluidState, $FluidState$Type} from "packages/net/minecraft/world/level/material/$FluidState"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$ZetaBlock, $ZetaBlock$Type} from "packages/org/violetmoon/zeta/block/$ZetaBlock"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockAndTintGetter, $BlockAndTintGetter$Type} from "packages/net/minecraft/world/level/$BlockAndTintGetter"

export class $ZetaGlassBlock extends $ZetaBlock {
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(arg0: string, arg1: $ZetaModule$Type, arg2: boolean, arg3: $BlockBehaviour$Properties$Type)

public "propagatesSkylightDown"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type): boolean
public "shouldDisplayFluidOverlay"(arg0: $BlockState$Type, arg1: $BlockAndTintGetter$Type, arg2: $BlockPos$Type, arg3: $FluidState$Type): boolean
public "skipRendering"(arg0: $BlockState$Type, arg1: $BlockState$Type, arg2: $Direction$Type): boolean
public "getShadeBrightness"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type): float
public "getVisualShape"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $CollisionContext$Type): $VoxelShape
public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZetaGlassBlock$Type = ($ZetaGlassBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZetaGlassBlock_ = $ZetaGlassBlock$Type;
}}
declare module "packages/org/violetmoon/quark/content/mobs/client/render/entity/$ToretoiseRenderer" {
import {$RenderLayer, $RenderLayer$Type} from "packages/net/minecraft/client/renderer/entity/layers/$RenderLayer"
import {$EntityRendererProvider$Context, $EntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRendererProvider$Context"
import {$List, $List$Type} from "packages/java/util/$List"
import {$EntityModel, $EntityModel$Type} from "packages/net/minecraft/client/model/$EntityModel"
import {$Toretoise, $Toretoise$Type} from "packages/org/violetmoon/quark/content/mobs/entity/$Toretoise"
import {$ToretoiseModel, $ToretoiseModel$Type} from "packages/org/violetmoon/quark/content/mobs/client/model/$ToretoiseModel"
import {$MobRenderer, $MobRenderer$Type} from "packages/net/minecraft/client/renderer/entity/$MobRenderer"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $ToretoiseRenderer extends $MobRenderer<($Toretoise), ($ToretoiseModel)> {
static readonly "LEASH_RENDER_STEPS": integer
 "model": M
 "layers": $List<($RenderLayer<(T), (M)>)>
 "shadowRadius": float

constructor(arg0: $EntityRendererProvider$Context$Type)

public "getTextureLocation"(arg0: $Toretoise$Type): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ToretoiseRenderer$Type = ($ToretoiseRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ToretoiseRenderer_ = $ToretoiseRenderer$Type;
}}
declare module "packages/org/violetmoon/zeta/config/type/$EntitySpawnConfig" {
import {$IBiomeConfig, $IBiomeConfig$Type} from "packages/org/violetmoon/zeta/config/type/$IBiomeConfig"
import {$ConfigFlagManager, $ConfigFlagManager$Type} from "packages/org/violetmoon/zeta/config/$ConfigFlagManager"
import {$IConfigType, $IConfigType$Type} from "packages/org/violetmoon/zeta/config/type/$IConfigType"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $EntitySpawnConfig implements $IConfigType {
 "spawnWeight": integer
 "minGroupSize": integer
 "maxGroupSize": integer
 "biomes": $IBiomeConfig

constructor(arg0: integer, arg1: integer, arg2: integer, arg3: $IBiomeConfig$Type)

public "isEnabled"(): boolean
public "onReload"(arg0: $ZetaModule$Type, arg1: $ConfigFlagManager$Type): void
get "enabled"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EntitySpawnConfig$Type = ($EntitySpawnConfig);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EntitySpawnConfig_ = $EntitySpawnConfig$Type;
}}
declare module "packages/org/violetmoon/zetaimplforge/event/play/entity/$ForgeZEntityConstruct" {
import {$EntityEvent$EntityConstructing, $EntityEvent$EntityConstructing$Type} from "packages/net/minecraftforge/event/entity/$EntityEvent$EntityConstructing"
import {$ZEntityConstruct, $ZEntityConstruct$Type} from "packages/org/violetmoon/zeta/event/play/entity/$ZEntityConstruct"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $ForgeZEntityConstruct implements $ZEntityConstruct {

constructor(arg0: $EntityEvent$EntityConstructing$Type)

public "getEntity"(): $Entity
get "entity"(): $Entity
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ForgeZEntityConstruct$Type = ($ForgeZEntityConstruct);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ForgeZEntityConstruct_ = $ForgeZEntityConstruct$Type;
}}
declare module "packages/org/violetmoon/quark/content/tweaks/module/$ReplaceScaffoldingModule" {
import {$ZRightClickBlock, $ZRightClickBlock$Type} from "packages/org/violetmoon/zeta/event/play/entity/player/$ZRightClickBlock"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $ReplaceScaffoldingModule extends $ZetaModule {
 "maxBounces": integer
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "onInteract"(arg0: $ZRightClickBlock$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ReplaceScaffoldingModule$Type = ($ReplaceScaffoldingModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ReplaceScaffoldingModule_ = $ReplaceScaffoldingModule$Type;
}}
declare module "packages/org/violetmoon/quark/base/util/$InventoryIIH" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$Ingredient, $Ingredient$Type} from "packages/net/minecraft/world/item/crafting/$Ingredient"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$BlockContainerJS, $BlockContainerJS$Type} from "packages/dev/latvian/mods/kubejs/level/$BlockContainerJS"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$IItemHandlerModifiable, $IItemHandlerModifiable$Type} from "packages/net/minecraftforge/items/$IItemHandlerModifiable"
import {$IItemHandler, $IItemHandler$Type} from "packages/net/minecraftforge/items/$IItemHandler"

export class $InventoryIIH implements $IItemHandlerModifiable {

constructor(arg0: $ItemStack$Type)

public "getSlots"(): integer
public "getStackInSlot"(arg0: integer): $ItemStack
public "insertItem"(arg0: integer, arg1: $ItemStack$Type, arg2: boolean): $ItemStack
public "setStackInSlot"(arg0: integer, arg1: $ItemStack$Type): void
public "getSlotLimit"(arg0: integer): integer
public "extractItem"(arg0: integer, arg1: integer, arg2: boolean): $ItemStack
public "isItemValid"(arg0: integer, arg1: $ItemStack$Type): boolean
public "kjs$self"(): $IItemHandler
public "getBlock"(level: $Level$Type): $BlockContainerJS
public "getSlots"(): integer
public "getStackInSlot"(i: integer): $ItemStack
public "insertItem"(i: integer, itemStack: $ItemStack$Type, b: boolean): $ItemStack
public "isMutable"(): boolean
public "extractItem"(i: integer, i1: integer, b: boolean): $ItemStack
public "isItemValid"(i: integer, itemStack: $ItemStack$Type): boolean
public "setStackInSlot"(slot: integer, stack: $ItemStack$Type): void
public "getSlotLimit"(i: integer): integer
public "insertItem"(stack: $ItemStack$Type, simulate: boolean): $ItemStack
public "setChanged"(): void
public "asContainer"(): $Container
public "countNonEmpty"(ingredient: $Ingredient$Type): integer
public "countNonEmpty"(): integer
public "getAllItems"(): $List<($ItemStack)>
public "getHeight"(): integer
public "find"(ingredient: $Ingredient$Type): integer
public "find"(): integer
public "getWidth"(): integer
public "clear"(): void
public "clear"(ingredient: $Ingredient$Type): void
public "count"(ingredient: $Ingredient$Type): integer
public "count"(): integer
public "isEmpty"(): boolean
get "slots"(): integer
get "slots"(): integer
get "mutable"(): boolean
get "allItems"(): $List<($ItemStack)>
get "height"(): integer
get "width"(): integer
get "empty"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $InventoryIIH$Type = ($InventoryIIH);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $InventoryIIH_ = $InventoryIIH$Type;
}}
declare module "packages/org/violetmoon/zeta/event/play/$ZAnvilUpdate" {
import {$IZetaPlayEvent, $IZetaPlayEvent$Type} from "packages/org/violetmoon/zeta/event/bus/$IZetaPlayEvent"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export interface $ZAnvilUpdate extends $IZetaPlayEvent {

 "getName"(): string
 "getMaterialCost"(): integer
 "getRight"(): $ItemStack
 "getLeft"(): $ItemStack
 "setOutput"(arg0: $ItemStack$Type): void
 "setCost"(arg0: integer): void
 "setMaterialCost"(arg0: integer): void
 "getPlayer"(): $Player
 "getOutput"(): $ItemStack
}

export namespace $ZAnvilUpdate {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZAnvilUpdate$Type = ($ZAnvilUpdate);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZAnvilUpdate_ = $ZAnvilUpdate$Type;
}}
declare module "packages/org/violetmoon/zeta/event/play/$ZBlock$BlockToolModification" {
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$ToolAction, $ToolAction$Type} from "packages/net/minecraftforge/common/$ToolAction"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$ZBlock, $ZBlock$Type} from "packages/org/violetmoon/zeta/event/play/$ZBlock"

export interface $ZBlock$BlockToolModification extends $ZBlock {

 "getToolAction"(): $ToolAction
 "setFinalState"(arg0: $BlockState$Type): void
 "getState"(): $BlockState
 "getLevel"(): $LevelAccessor
 "getPos"(): $BlockPos
}

export namespace $ZBlock$BlockToolModification {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZBlock$BlockToolModification$Type = ($ZBlock$BlockToolModification);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZBlock$BlockToolModification_ = $ZBlock$BlockToolModification$Type;
}}
declare module "packages/org/violetmoon/zeta/event/play/entity/living/$ZSleepingLocationCheck" {
import {$IZetaPlayEvent, $IZetaPlayEvent$Type} from "packages/org/violetmoon/zeta/event/bus/$IZetaPlayEvent"
import {$LivingGetter, $LivingGetter$Type} from "packages/org/violetmoon/zeta/event/bus/helpers/$LivingGetter"
import {$ZResult, $ZResult$Type} from "packages/org/violetmoon/zeta/event/bus/$ZResult"
import {$Resultable, $Resultable$Type} from "packages/org/violetmoon/zeta/event/bus/$Resultable"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export interface $ZSleepingLocationCheck extends $IZetaPlayEvent, $LivingGetter, $Resultable {

 "getSleepingLocation"(): $BlockPos
 "getEntity"(): $LivingEntity
 "setResult"(arg0: $ZResult$Type): void
 "getResult"(): $ZResult
}

export namespace $ZSleepingLocationCheck {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZSleepingLocationCheck$Type = ($ZSleepingLocationCheck);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZSleepingLocationCheck_ = $ZSleepingLocationCheck$Type;
}}
declare module "packages/org/violetmoon/zeta/registry/$IZetaBlockItemProvider" {
import {$BlockItem, $BlockItem$Type} from "packages/net/minecraft/world/item/$BlockItem"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"

export interface $IZetaBlockItemProvider {

 "provideItemBlock"(arg0: $Block$Type, arg1: $Item$Properties$Type): $BlockItem

(arg0: $Block$Type, arg1: $Item$Properties$Type): $BlockItem
}

export namespace $IZetaBlockItemProvider {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IZetaBlockItemProvider$Type = ($IZetaBlockItemProvider);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IZetaBlockItemProvider_ = $IZetaBlockItemProvider$Type;
}}
declare module "packages/org/violetmoon/quark/content/client/module/$MicrocraftingHelperModule" {
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $MicrocraftingHelperModule extends $ZetaModule {
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MicrocraftingHelperModule$Type = ($MicrocraftingHelperModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MicrocraftingHelperModule_ = $MicrocraftingHelperModule$Type;
}}
declare module "packages/org/violetmoon/quark/content/tweaks/client/item/$ClockTimePropertyFunction" {
import {$ClientLevel, $ClientLevel$Type} from "packages/net/minecraft/client/multiplayer/$ClientLevel"
import {$ItemPropertyFunction, $ItemPropertyFunction$Type} from "packages/net/minecraft/client/renderer/item/$ItemPropertyFunction"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $ClockTimePropertyFunction implements $ItemPropertyFunction {

constructor()

public "call"(arg0: $ItemStack$Type, arg1: $ClientLevel$Type, arg2: $LivingEntity$Type, arg3: integer): float
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClockTimePropertyFunction$Type = ($ClockTimePropertyFunction);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClockTimePropertyFunction_ = $ClockTimePropertyFunction$Type;
}}
declare module "packages/org/violetmoon/quark/content/world/gen/$SpiralSpireGenerator" {
import {$MultiChunkFeatureGenerator, $MultiChunkFeatureGenerator$Type} from "packages/org/violetmoon/zeta/world/generator/multichunk/$MultiChunkFeatureGenerator"
import {$ChunkGenerator, $ChunkGenerator$Type} from "packages/net/minecraft/world/level/chunk/$ChunkGenerator"
import {$DimensionConfig, $DimensionConfig$Type} from "packages/org/violetmoon/zeta/config/type/$DimensionConfig"
import {$WorldGenRegion, $WorldGenRegion$Type} from "packages/net/minecraft/server/level/$WorldGenRegion"
import {$Random, $Random$Type} from "packages/java/util/$Random"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $SpiralSpireGenerator extends $MultiChunkFeatureGenerator {
readonly "dimConfig": $DimensionConfig

constructor(arg0: $DimensionConfig$Type)

public "getSourcesInChunk"(arg0: $WorldGenRegion$Type, arg1: $Random$Type, arg2: $ChunkGenerator$Type, arg3: $BlockPos$Type): ($BlockPos)[]
public "getFeatureRadius"(): integer
public "generateChunkPart"(arg0: $BlockPos$Type, arg1: $ChunkGenerator$Type, arg2: $Random$Type, arg3: $BlockPos$Type, arg4: $WorldGenRegion$Type): void
public "makeSpike"(arg0: $WorldGenRegion$Type, arg1: $ChunkGenerator$Type, arg2: $Random$Type, arg3: $BlockPos$Type): void
get "featureRadius"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SpiralSpireGenerator$Type = ($SpiralSpireGenerator);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SpiralSpireGenerator_ = $SpiralSpireGenerator$Type;
}}
declare module "packages/org/violetmoon/quark/integration/jei/$InfluenceCategory" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$IRecipeLayoutBuilder, $IRecipeLayoutBuilder$Type} from "packages/mezz/jei/api/gui/builder/$IRecipeLayoutBuilder"
import {$RecipeType, $RecipeType$Type} from "packages/mezz/jei/api/recipe/$RecipeType"
import {$InfluenceEntry, $InfluenceEntry$Type} from "packages/org/violetmoon/quark/integration/jei/$InfluenceEntry"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$IRecipeSlotsView, $IRecipeSlotsView$Type} from "packages/mezz/jei/api/gui/ingredient/$IRecipeSlotsView"
import {$IRecipeCategory, $IRecipeCategory$Type} from "packages/mezz/jei/api/recipe/category/$IRecipeCategory"
import {$List, $List$Type} from "packages/java/util/$List"
import {$IDrawable, $IDrawable$Type} from "packages/mezz/jei/api/gui/drawable/$IDrawable"
import {$IFocusGroup, $IFocusGroup$Type} from "packages/mezz/jei/api/recipe/$IFocusGroup"
import {$InputConstants$Key, $InputConstants$Key$Type} from "packages/com/mojang/blaze3d/platform/$InputConstants$Key"
import {$IGuiHelper, $IGuiHelper$Type} from "packages/mezz/jei/api/helpers/$IGuiHelper"

export class $InfluenceCategory implements $IRecipeCategory<($InfluenceEntry)> {
static readonly "UID": $ResourceLocation
static readonly "TEXTURE": $ResourceLocation

constructor(arg0: $IGuiHelper$Type)

public "getRecipeType"(): $RecipeType<($InfluenceEntry)>
public "getIcon"(): $IDrawable
public "getTitle"(): $Component
public "setRecipe"(arg0: $IRecipeLayoutBuilder$Type, arg1: $InfluenceEntry$Type, arg2: $IFocusGroup$Type): void
public "getBackground"(): $IDrawable
public "draw"(arg0: $InfluenceEntry$Type, arg1: $IRecipeSlotsView$Type, arg2: $GuiGraphics$Type, arg3: double, arg4: double): void
public "getWidth"(): integer
public "getHeight"(): integer
public "isHandled"(arg0: $InfluenceEntry$Type): boolean
public "handleInput"(arg0: $InfluenceEntry$Type, arg1: double, arg2: double, arg3: $InputConstants$Key$Type): boolean
public "getTooltipStrings"(arg0: $InfluenceEntry$Type, arg1: $IRecipeSlotsView$Type, arg2: double, arg3: double): $List<($Component)>
public "getRegistryName"(arg0: $InfluenceEntry$Type): $ResourceLocation
get "recipeType"(): $RecipeType<($InfluenceEntry)>
get "icon"(): $IDrawable
get "title"(): $Component
get "background"(): $IDrawable
get "width"(): integer
get "height"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $InfluenceCategory$Type = ($InfluenceCategory);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $InfluenceCategory_ = $InfluenceCategory$Type;
}}
declare module "packages/org/violetmoon/quark/addons/oddities/block/be/$MagnetizedBlockBlockEntity" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $MagnetizedBlockBlockEntity extends $BlockEntity {
 "blockState": $BlockState

constructor(arg0: $BlockPos$Type, arg1: $BlockState$Type)
constructor(arg0: $BlockPos$Type, arg1: $BlockState$Type, arg2: $BlockState$Type, arg3: $CompoundTag$Type, arg4: $Direction$Type)

public static "tick"(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: $MagnetizedBlockBlockEntity$Type): void
public "tick"(): void
public "clearMagnetTileEntity"(): void
public "getProgress"(arg0: float): float
public "getFacing"(): $Direction
public "getCollisionShape"(arg0: $BlockGetter$Type, arg1: $BlockPos$Type): $VoxelShape
public "getMagnetState"(): $BlockState
public "load"(arg0: $CompoundTag$Type): void
public "getOffsetX"(arg0: float): float
public "getOffsetZ"(arg0: float): float
public "getOffsetY"(arg0: float): float
public "getSubTile"(arg0: $BlockPos$Type): $BlockEntity
public "finalizeContents"(arg0: $BlockState$Type): void
public "getLastTicked"(): long
public "getUpdateTag"(): $CompoundTag
get "facing"(): $Direction
get "magnetState"(): $BlockState
get "lastTicked"(): long
get "updateTag"(): $CompoundTag
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MagnetizedBlockBlockEntity$Type = ($MagnetizedBlockBlockEntity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MagnetizedBlockBlockEntity_ = $MagnetizedBlockBlockEntity$Type;
}}
declare module "packages/org/violetmoon/quark/content/building/module/$SturdyStoneModule" {
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$ZRegister, $ZRegister$Type} from "packages/org/violetmoon/zeta/event/load/$ZRegister"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $SturdyStoneModule extends $ZetaModule {
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "register"(arg0: $ZRegister$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SturdyStoneModule$Type = ($SturdyStoneModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SturdyStoneModule_ = $SturdyStoneModule$Type;
}}
declare module "packages/org/violetmoon/zeta/event/play/entity/living/$ZLivingConversion$Post" {
import {$ZLivingConversion, $ZLivingConversion$Type} from "packages/org/violetmoon/zeta/event/play/entity/living/$ZLivingConversion"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export interface $ZLivingConversion$Post extends $ZLivingConversion {

 "getOutcome"(): $LivingEntity
 "cancel"(): void
 "setCanceled"(arg0: boolean): void
 "isCanceled"(): boolean
 "getEntity"(): $LivingEntity
}

export namespace $ZLivingConversion$Post {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZLivingConversion$Post$Type = ($ZLivingConversion$Post);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZLivingConversion$Post_ = $ZLivingConversion$Post$Type;
}}
declare module "packages/org/violetmoon/zeta/network/message/$S2CUpdateFlag" {
import {$IZetaMessage, $IZetaMessage$Type} from "packages/org/violetmoon/zeta/network/$IZetaMessage"
import {$IZetaNetworkEventContext, $IZetaNetworkEventContext$Type} from "packages/org/violetmoon/zeta/network/$IZetaNetworkEventContext"
import {$BitSet, $BitSet$Type} from "packages/java/util/$BitSet"

export class $S2CUpdateFlag implements $IZetaMessage {
 "flags": $BitSet
 "expectedLength": integer
 "expectedHash": integer

constructor()

public "receive"(arg0: $IZetaNetworkEventContext$Type): boolean
public static "createPacket"(): $S2CUpdateFlag
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $S2CUpdateFlag$Type = ($S2CUpdateFlag);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $S2CUpdateFlag_ = $S2CUpdateFlag$Type;
}}
declare module "packages/org/violetmoon/zeta/client/config/definition/$IntegerClientDefinition" {
import {$AbstractWidget, $AbstractWidget$Type} from "packages/net/minecraft/client/gui/components/$AbstractWidget"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$ChangeSet, $ChangeSet$Type} from "packages/org/violetmoon/zeta/config/$ChangeSet"
import {$ZetaClient, $ZetaClient$Type} from "packages/org/violetmoon/zeta/client/$ZetaClient"
import {$ValueDefinition, $ValueDefinition$Type} from "packages/org/violetmoon/zeta/config/$ValueDefinition"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$ClientDefinitionExt, $ClientDefinitionExt$Type} from "packages/org/violetmoon/zeta/client/config/definition/$ClientDefinitionExt"

export class $IntegerClientDefinition implements $ClientDefinitionExt<($ValueDefinition<(integer)>)> {

constructor()

public "addWidgets"(arg0: $ZetaClient$Type, arg1: $Screen$Type, arg2: $ChangeSet$Type, arg3: $ValueDefinition$Type<(integer)>, arg4: $Consumer$Type<($AbstractWidget$Type)>): void
public "getSubtitle"(arg0: $ChangeSet$Type, arg1: $ValueDefinition$Type<(integer)>): string
public "truncate"(arg0: string): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IntegerClientDefinition$Type = ($IntegerClientDefinition);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IntegerClientDefinition_ = $IntegerClientDefinition$Type;
}}
declare module "packages/org/violetmoon/zeta/event/load/$ZGatherAdvancementModifiers" {
import {$BooleanSupplier, $BooleanSupplier$Type} from "packages/java/util/function/$BooleanSupplier"
import {$IAdvancementModifierDelegate, $IAdvancementModifierDelegate$Type} from "packages/org/violetmoon/zeta/api/$IAdvancementModifierDelegate"
import {$BucketItem, $BucketItem$Type} from "packages/net/minecraft/world/item/$BucketItem"
import {$IAdvancementModifier, $IAdvancementModifier$Type} from "packages/org/violetmoon/zeta/api/$IAdvancementModifier"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$IZetaLoadEvent, $IZetaLoadEvent$Type} from "packages/org/violetmoon/zeta/event/bus/$IZetaLoadEvent"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$Biome, $Biome$Type} from "packages/net/minecraft/world/level/biome/$Biome"
import {$ResourceKey, $ResourceKey$Type} from "packages/net/minecraft/resources/$ResourceKey"
import {$ItemLike, $ItemLike$Type} from "packages/net/minecraft/world/level/$ItemLike"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"

export interface $ZGatherAdvancementModifiers extends $IZetaLoadEvent {

 "register"(arg0: $IAdvancementModifier$Type): void
 "getDelegate"(): $IAdvancementModifierDelegate
 "createMonsterHunterMod"(arg0: $Set$Type<($EntityType$Type<(any)>)>): $IAdvancementModifier
 "createFuriousCocktailMod"(arg0: $BooleanSupplier$Type, arg1: $Set$Type<($MobEffect$Type)>): $IAdvancementModifier
 "createAdventuringTimeMod"(arg0: $Set$Type<($ResourceKey$Type<($Biome$Type)>)>): $IAdvancementModifier
 "createFishyBusinessMod"(arg0: $Set$Type<($ItemLike$Type)>): $IAdvancementModifier
 "createASeedyPlaceMod"(arg0: $Set$Type<($Block$Type)>): $IAdvancementModifier
 "createWaxOnWaxOffMod"(arg0: $Set$Type<($Block$Type)>, arg1: $Set$Type<($Block$Type)>): $IAdvancementModifier
 "createTacticalFishingMod"(arg0: $Set$Type<($BucketItem$Type)>): $IAdvancementModifier
 "createGlowAndBeholdMod"(arg0: $Set$Type<($Block$Type)>): $IAdvancementModifier
 "createBalancedDietMod"(arg0: $Set$Type<($ItemLike$Type)>): $IAdvancementModifier
 "createTwoByTwoMod"(arg0: $Set$Type<($EntityType$Type<(any)>)>): $IAdvancementModifier
}

export namespace $ZGatherAdvancementModifiers {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZGatherAdvancementModifiers$Type = ($ZGatherAdvancementModifiers);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZGatherAdvancementModifiers_ = $ZGatherAdvancementModifiers$Type;
}}
declare module "packages/org/violetmoon/quark/content/automation/block/$EnderWatcherBlock" {
import {$IntegerProperty, $IntegerProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$IntegerProperty"
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$EntityBlock, $EntityBlock$Type} from "packages/net/minecraft/world/level/block/$EntityBlock"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$ZetaBlock, $ZetaBlock$Type} from "packages/org/violetmoon/zeta/block/$ZetaBlock"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$BlockEntityTicker, $BlockEntityTicker$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityTicker"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$GameEventListener, $GameEventListener$Type} from "packages/net/minecraft/world/level/gameevent/$GameEventListener"

export class $EnderWatcherBlock extends $ZetaBlock implements $EntityBlock {
static readonly "WATCHED": $BooleanProperty
static readonly "POWER": $IntegerProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(arg0: $ZetaModule$Type)

public "getTicker"<T extends $BlockEntity>(arg0: $Level$Type, arg1: $BlockState$Type, arg2: $BlockEntityType$Type<(T)>): $BlockEntityTicker<(T)>
public "isSignalSource"(arg0: $BlockState$Type): boolean
public "getSignal"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "newBlockEntity"(arg0: $BlockPos$Type, arg1: $BlockState$Type): $BlockEntity
public "getListener"<T extends $BlockEntity>(arg0: $ServerLevel$Type, arg1: T): $GameEventListener
public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EnderWatcherBlock$Type = ($EnderWatcherBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EnderWatcherBlock_ = $EnderWatcherBlock$Type;
}}
declare module "packages/org/violetmoon/quark/base/item/$QuarkMusicDiscItem" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$BooleanSupplier, $BooleanSupplier$Type} from "packages/java/util/function/$BooleanSupplier"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$CreativeModeTab, $CreativeModeTab$Type} from "packages/net/minecraft/world/item/$CreativeModeTab"
import {$RecordItem, $RecordItem$Type} from "packages/net/minecraft/world/item/$RecordItem"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$IZetaItem, $IZetaItem$Type} from "packages/org/violetmoon/zeta/item/$IZetaItem"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$ResourceKey, $ResourceKey$Type} from "packages/net/minecraft/resources/$ResourceKey"
import {$ItemLike, $ItemLike$Type} from "packages/net/minecraft/world/level/$ItemLike"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $QuarkMusicDiscItem extends $RecordItem implements $IZetaItem {
readonly "isAmbient": boolean
readonly "soundSupplier": $Supplier<($SoundEvent)>
/**
 * 
 * @deprecated
 */
static readonly "BY_NAME": $Map<($SoundEvent), ($RecordItem)>
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: integer, arg1: $Supplier$Type<($SoundEvent$Type)>, arg2: string, arg3: $ZetaModule$Type, arg4: integer)

public "getModule"(): $ZetaModule
public "doesConditionApply"(): boolean
public "setCondition"(arg0: $BooleanSupplier$Type): $QuarkMusicDiscItem
public "getItem"(): $Item
public "setCreativeTab"(arg0: $ResourceKey$Type<($CreativeModeTab$Type)>): $Item
public "setCreativeTab"(arg0: $ResourceKey$Type<($CreativeModeTab$Type)>, arg1: $ItemLike$Type, arg2: boolean): $Item
public "isEnabled"(): boolean
public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
get "module"(): $ZetaModule
set "condition"(value: $BooleanSupplier$Type)
get "item"(): $Item
set "creativeTab"(value: $ResourceKey$Type<($CreativeModeTab$Type)>)
get "enabled"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $QuarkMusicDiscItem$Type = ($QuarkMusicDiscItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $QuarkMusicDiscItem_ = $QuarkMusicDiscItem$Type;
}}
declare module "packages/org/violetmoon/zetaimplforge/client/event/load/$ForgeZClientSetup" {
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$FMLClientSetupEvent, $FMLClientSetupEvent$Type} from "packages/net/minecraftforge/fml/event/lifecycle/$FMLClientSetupEvent"
import {$ZClientSetup, $ZClientSetup$Type} from "packages/org/violetmoon/zeta/client/event/load/$ZClientSetup"
import {$Runnable, $Runnable$Type} from "packages/java/lang/$Runnable"

export class $ForgeZClientSetup extends $Record implements $ZClientSetup {

constructor(e: $FMLClientSetupEvent$Type)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "e"(): $FMLClientSetupEvent
public "enqueueWork"(arg0: $Runnable$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ForgeZClientSetup$Type = ($ForgeZClientSetup);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ForgeZClientSetup_ = $ForgeZClientSetup$Type;
}}
declare module "packages/org/violetmoon/quark/content/tools/client/render/$QuarkBeaconBlockEntityRenderer" {
import {$BeaconRedirectionModule$ExtendedBeamSegment, $BeaconRedirectionModule$ExtendedBeamSegment$Type} from "packages/org/violetmoon/quark/content/tools/module/$BeaconRedirectionModule$ExtendedBeamSegment"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$BeaconBlockEntity, $BeaconBlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BeaconBlockEntity"

export class $QuarkBeaconBlockEntityRenderer {

constructor()

public static "renderBeamSegment"(arg0: $PoseStack$Type, arg1: $MultiBufferSource$Type, arg2: $ResourceLocation$Type, arg3: $BeaconRedirectionModule$ExtendedBeamSegment$Type, arg4: float, arg5: float, arg6: long, arg7: float, arg8: float): void
public static "render"(arg0: $BeaconBlockEntity$Type, arg1: float, arg2: $PoseStack$Type, arg3: $MultiBufferSource$Type, arg4: integer, arg5: integer): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $QuarkBeaconBlockEntityRenderer$Type = ($QuarkBeaconBlockEntityRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $QuarkBeaconBlockEntityRenderer_ = $QuarkBeaconBlockEntityRenderer$Type;
}}
declare module "packages/org/violetmoon/zetaimplforge/client/event/play/$ForgeZInputUpdate" {
import {$MovementInputUpdateEvent, $MovementInputUpdateEvent$Type} from "packages/net/minecraftforge/client/event/$MovementInputUpdateEvent"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$ZInputUpdate, $ZInputUpdate$Type} from "packages/org/violetmoon/zeta/client/event/play/$ZInputUpdate"
import {$Input, $Input$Type} from "packages/net/minecraft/client/player/$Input"

export class $ForgeZInputUpdate extends $Record implements $ZInputUpdate {

constructor(e: $MovementInputUpdateEvent$Type)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "e"(): $MovementInputUpdateEvent
public "getInput"(): $Input
public "getEntity"(): $Player
get "input"(): $Input
get "entity"(): $Player
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ForgeZInputUpdate$Type = ($ForgeZInputUpdate);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ForgeZInputUpdate_ = $ForgeZInputUpdate$Type;
}}
declare module "packages/org/violetmoon/quark/content/building/module/$VerticalPlanksModule" {
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$ZetaBlock, $ZetaBlock$Type} from "packages/org/violetmoon/zeta/block/$ZetaBlock"
import {$ZRegister, $ZRegister$Type} from "packages/org/violetmoon/zeta/event/load/$ZRegister"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $VerticalPlanksModule extends $ZetaModule {
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public static "add"(arg0: string, arg1: $Block$Type, arg2: $ZetaModule$Type): $ZetaBlock
public "register"(arg0: $ZRegister$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $VerticalPlanksModule$Type = ($VerticalPlanksModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $VerticalPlanksModule_ = $VerticalPlanksModule$Type;
}}
declare module "packages/org/violetmoon/zeta/client/config/screen/$AbstractInputScreen" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$ValueDefinition, $ValueDefinition$Type} from "packages/org/violetmoon/zeta/config/$ValueDefinition"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$ChangeSet, $ChangeSet$Type} from "packages/org/violetmoon/zeta/config/$ChangeSet"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$ZetaClient, $ZetaClient$Type} from "packages/org/violetmoon/zeta/client/$ZetaClient"
import {$ZetaScreen, $ZetaScreen$Type} from "packages/org/violetmoon/zeta/client/config/screen/$ZetaScreen"
import {$List, $List$Type} from "packages/java/util/$List"

export class $AbstractInputScreen<T> extends $ZetaScreen {
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering

constructor(arg0: $ZetaClient$Type, arg1: $Screen$Type, arg2: $ChangeSet$Type, arg3: $ValueDefinition$Type<(T)>)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AbstractInputScreen$Type<T> = ($AbstractInputScreen<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AbstractInputScreen_<T> = $AbstractInputScreen$Type<(T)>;
}}
declare module "packages/org/violetmoon/quark/content/tweaks/module/$NoDurabilityOnCosmeticsModule" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$ZAnvilRepair, $ZAnvilRepair$Type} from "packages/org/violetmoon/zeta/event/play/$ZAnvilRepair"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$ZCommonSetup, $ZCommonSetup$Type} from "packages/org/violetmoon/zeta/event/load/$ZCommonSetup"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $NoDurabilityOnCosmeticsModule extends $ZetaModule {
static "cosmeticTag": $TagKey<($Item)>
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "setup"(arg0: $ZCommonSetup$Type): void
public "onAnvilUse"(arg0: $ZAnvilRepair$Type): void
set "up"(value: $ZCommonSetup$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $NoDurabilityOnCosmeticsModule$Type = ($NoDurabilityOnCosmeticsModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $NoDurabilityOnCosmeticsModule_ = $NoDurabilityOnCosmeticsModule$Type;
}}
declare module "packages/org/violetmoon/quark/content/building/block/$QuarkVerticalSlabBlock" {
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$FluidState, $FluidState$Type} from "packages/net/minecraft/world/level/material/$FluidState"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$ToolAction, $ToolAction$Type} from "packages/net/minecraftforge/common/$ToolAction"
import {$IForgeBlock, $IForgeBlock$Type} from "packages/net/minecraftforge/common/extensions/$IForgeBlock"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$CreativeModeTab, $CreativeModeTab$Type} from "packages/net/minecraft/world/item/$CreativeModeTab"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$IZetaBlock, $IZetaBlock$Type} from "packages/org/violetmoon/zeta/block/$IZetaBlock"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$UseOnContext, $UseOnContext$Type} from "packages/net/minecraft/world/item/context/$UseOnContext"
import {$VerticalSlabBlock, $VerticalSlabBlock$Type} from "packages/org/violetmoon/quark/content/building/block/$VerticalSlabBlock"
import {$EnumProperty, $EnumProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$EnumProperty"
import {$VerticalSlabBlock$VerticalSlabType, $VerticalSlabBlock$VerticalSlabType$Type} from "packages/org/violetmoon/quark/content/building/block/$VerticalSlabBlock$VerticalSlabType"
import {$SoundType, $SoundType$Type} from "packages/net/minecraft/world/level/block/$SoundType"
import {$IPlantable, $IPlantable$Type} from "packages/net/minecraftforge/common/$IPlantable"
import {$IZetaBlockExtensions, $IZetaBlockExtensions$Type} from "packages/org/violetmoon/zeta/block/ext/$IZetaBlockExtensions"
import {$ResourceKey, $ResourceKey$Type} from "packages/net/minecraft/resources/$ResourceKey"
import {$ItemLike, $ItemLike$Type} from "packages/net/minecraft/world/level/$ItemLike"
import {$BlockAndTintGetter, $BlockAndTintGetter$Type} from "packages/net/minecraft/world/level/$BlockAndTintGetter"

export class $QuarkVerticalSlabBlock extends $VerticalSlabBlock implements $IZetaBlock, $IZetaBlockExtensions, $IForgeBlock {
static readonly "TYPE": $EnumProperty<($VerticalSlabBlock$VerticalSlabType)>
static readonly "WATERLOGGED": $BooleanProperty
readonly "parent": $Supplier<($Block)>
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(arg0: $Block$Type, arg1: $ZetaModule$Type)

public "getModule"(): $ZetaModule
public "canSustainPlant"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type, arg4: $IPlantable$Type): boolean
public "isLadder"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "isConduitFrame"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): boolean
public "doesConditionApply"(): boolean
public "getEnchantPowerBonus"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type): float
public "shouldDisplayFluidOverlay"(arg0: $BlockState$Type, arg1: $BlockAndTintGetter$Type, arg2: $BlockPos$Type, arg3: $FluidState$Type): boolean
public "getToolModifiedState"(arg0: $BlockState$Type, arg1: $UseOnContext$Type, arg2: $ToolAction$Type, arg3: boolean): $BlockState
public "getBeaconColorMultiplier"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): (float)[]
public "makesOpenTrapdoorAboveClimbable"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockState$Type): boolean
public "getSoundType"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): $SoundType
public "isScaffolding"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "getLightEmission"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type): integer
public "isFlammable"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): boolean
public "canStickTo"(arg0: $BlockState$Type, arg1: $BlockState$Type): boolean
public "getFireSpreadSpeed"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "getFlammability"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "isStickyBlock"(arg0: $BlockState$Type): boolean
public "collisionExtendsVertically"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): boolean
public "getBlock"(): $Block
public "getFireSpreadSpeedZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "getFlammabilityZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "setCreativeTab"(arg0: $ResourceKey$Type<($CreativeModeTab$Type)>): $Block
public "setCreativeTab"(arg0: $ResourceKey$Type<($CreativeModeTab$Type)>, arg1: $ItemLike$Type, arg2: boolean): $Block
public "isFlammableZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): boolean
public "isEnabled"(): boolean
public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
get "module"(): $ZetaModule
get "block"(): $Block
set "creativeTab"(value: $ResourceKey$Type<($CreativeModeTab$Type)>)
get "enabled"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $QuarkVerticalSlabBlock$Type = ($QuarkVerticalSlabBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $QuarkVerticalSlabBlock_ = $QuarkVerticalSlabBlock$Type;
}}
declare module "packages/org/violetmoon/zeta/util/$Hint" {
import {$Annotation, $Annotation$Type} from "packages/java/lang/annotation/$Annotation"
import {$Class, $Class$Type} from "packages/java/lang/$Class"

export interface $Hint extends $Annotation {

 "value"(): string
 "key"(): string
 "negate"(): boolean
 "content"(): (string)[]
 "equals"(arg0: any): boolean
 "toString"(): string
 "hashCode"(): integer
 "annotationType"(): $Class<(any)>
}

export namespace $Hint {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Hint$Type = ($Hint);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Hint_ = $Hint$Type;
}}
declare module "packages/org/violetmoon/quark/content/mobs/client/render/entity/$ForgottenRenderer" {
import {$RenderLayer, $RenderLayer$Type} from "packages/net/minecraft/client/renderer/entity/layers/$RenderLayer"
import {$EntityRendererProvider$Context, $EntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRendererProvider$Context"
import {$SkeletonRenderer, $SkeletonRenderer$Type} from "packages/net/minecraft/client/renderer/entity/$SkeletonRenderer"
import {$AbstractSkeleton, $AbstractSkeleton$Type} from "packages/net/minecraft/world/entity/monster/$AbstractSkeleton"
import {$List, $List$Type} from "packages/java/util/$List"
import {$EntityModel, $EntityModel$Type} from "packages/net/minecraft/client/model/$EntityModel"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $ForgottenRenderer extends $SkeletonRenderer {
static readonly "LEASH_RENDER_STEPS": integer
 "model": M
 "layers": $List<($RenderLayer<(T), (M)>)>
 "shadowRadius": float

constructor(arg0: $EntityRendererProvider$Context$Type)

public "getTextureLocation"(arg0: $AbstractSkeleton$Type): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ForgottenRenderer$Type = ($ForgottenRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ForgottenRenderer_ = $ForgottenRenderer$Type;
}}
declare module "packages/org/violetmoon/quark/content/tools/entity/rang/$AbstractPickarang" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Packet, $Packet$Type} from "packages/net/minecraft/network/protocol/$Packet"
import {$Projectile, $Projectile$Type} from "packages/net/minecraft/world/entity/projectile/$Projectile"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$SoundSource, $SoundSource$Type} from "packages/net/minecraft/sounds/$SoundSource"
import {$ClientGamePacketListener, $ClientGamePacketListener$Type} from "packages/net/minecraft/network/protocol/game/$ClientGamePacketListener"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$PickarangType, $PickarangType$Type} from "packages/org/violetmoon/quark/content/tools/config/$PickarangType"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $AbstractPickarang<T extends $AbstractPickarang<(T)>> extends $Projectile {
 "ownerUUID": $UUID
 "cachedOwner": $Entity
 "leftOwner": boolean
 "hasBeenShot": boolean
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(arg0: $EntityType$Type<(any)>, arg1: $Level$Type)
constructor(arg0: $EntityType$Type<(any)>, arg1: $Level$Type, arg2: $LivingEntity$Type)

public "getStack"(): $ItemStack
public "shoot"(arg0: $Entity$Type, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float): void
public "isPushedByFluid"(): boolean
public "getPiercingModifier"(): integer
public "getEfficiencyModifier"(): integer
public "tick"(): void
public "getSoundSource"(): $SoundSource
public "m_7378_"(arg0: $CompoundTag$Type): void
public "m_7380_"(arg0: $CompoundTag$Type): void
public "hasDrag"(): boolean
public "lerpMotion"(arg0: double, arg1: double, arg2: double): void
public "isReturning"(): boolean
public "getAddEntityPacket"(): $Packet<($ClientGamePacketListener)>
public "setStack"(arg0: $ItemStack$Type): void
public "shoot"(arg0: double, arg1: double, arg2: double, arg3: float, arg4: float): void
public "shouldRenderAtSqrDistance"(arg0: double): boolean
public "getPickarangType"(): $PickarangType<(T)>
public "spark"(): void
public "setThrowData"(arg0: integer, arg1: $ItemStack$Type): void
public "getThrower"(): $LivingEntity
public "clank"(): void
public "addHit"(arg0: $Entity$Type): void
public "addHit"(): void
public "postHit"(): void
public "getPassengersRidingOffset"(): double
get "stack"(): $ItemStack
get "pushedByFluid"(): boolean
get "piercingModifier"(): integer
get "efficiencyModifier"(): integer
get "soundSource"(): $SoundSource
get "returning"(): boolean
get "addEntityPacket"(): $Packet<($ClientGamePacketListener)>
set "stack"(value: $ItemStack$Type)
get "pickarangType"(): $PickarangType<(T)>
get "thrower"(): $LivingEntity
get "passengersRidingOffset"(): double
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AbstractPickarang$Type<T> = ($AbstractPickarang<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AbstractPickarang_<T> = $AbstractPickarang$Type<(T)>;
}}
declare module "packages/org/violetmoon/quark/content/tools/module/$PickarangModule" {
import {$AbstractPickarang, $AbstractPickarang$Type} from "packages/org/violetmoon/quark/content/tools/entity/rang/$AbstractPickarang"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$Pickarang, $Pickarang$Type} from "packages/org/violetmoon/quark/content/tools/entity/rang/$Pickarang"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Flamerang, $Flamerang$Type} from "packages/org/violetmoon/quark/content/tools/entity/rang/$Flamerang"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$PickarangType, $PickarangType$Type} from "packages/org/violetmoon/quark/content/tools/config/$PickarangType"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$ZRegister, $ZRegister$Type} from "packages/org/violetmoon/zeta/event/load/$ZRegister"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ManualTrigger, $ManualTrigger$Type} from "packages/org/violetmoon/zeta/advancement/$ManualTrigger"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZConfigChanged, $ZConfigChanged$Type} from "packages/org/violetmoon/zeta/event/load/$ZConfigChanged"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $PickarangModule extends $ZetaModule {
static "pickarangType": $PickarangType<($Pickarang)>
static "flamerangType": $PickarangType<($Flamerang)>
static "enableFlamerang": boolean
static "neverUseHeartOfDiamond": boolean
static "pickarang": $Item
static "flamerang": $Item
static readonly "pickarangImmuneTag": $TagKey<($Block)>
static "throwPickarangTrigger": $ManualTrigger
static "useFlamerangTrigger": $ManualTrigger
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "register"(arg0: $ZRegister$Type): void
public "configChanged"(arg0: $ZConfigChanged$Type): void
public static "createDamageSource"(arg0: $Player$Type): $DamageSource
public static "setActivePickarang"(arg0: $AbstractPickarang$Type<(any)>): void
public static "getIsFireResistant"(arg0: boolean, arg1: $Entity$Type): boolean
set "activePickarang"(value: $AbstractPickarang$Type<(any)>)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PickarangModule$Type = ($PickarangModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PickarangModule_ = $PickarangModule$Type;
}}
declare module "packages/org/violetmoon/zeta/registry/$CreativeTabManager$AppendsUniquely" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ItemLike, $ItemLike$Type} from "packages/net/minecraft/world/level/$ItemLike"

export interface $CreativeTabManager$AppendsUniquely extends $ItemLike {

 "appendItemsToCreativeTab"(): $List<($ItemStack)>
 "asItem"(): $Item
}

export namespace $CreativeTabManager$AppendsUniquely {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CreativeTabManager$AppendsUniquely$Type = ($CreativeTabManager$AppendsUniquely);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CreativeTabManager$AppendsUniquely_ = $CreativeTabManager$AppendsUniquely$Type;
}}
declare module "packages/org/violetmoon/quark/integration/terrablender/$VanillaUndergroundBiomeHandler" {
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Biome, $Biome$Type} from "packages/net/minecraft/world/level/biome/$Biome"
import {$OverworldBiomeBuilder, $OverworldBiomeBuilder$Type} from "packages/net/minecraft/world/level/biome/$OverworldBiomeBuilder"
import {$Pair, $Pair$Type} from "packages/com/mojang/datafixers/util/$Pair"
import {$Climate$ParameterPoint, $Climate$ParameterPoint$Type} from "packages/net/minecraft/world/level/biome/$Climate$ParameterPoint"
import {$ResourceKey, $ResourceKey$Type} from "packages/net/minecraft/resources/$ResourceKey"
import {$AbstractUndergroundBiomeHandler, $AbstractUndergroundBiomeHandler$Type} from "packages/org/violetmoon/quark/integration/terrablender/$AbstractUndergroundBiomeHandler"

export class $VanillaUndergroundBiomeHandler extends $AbstractUndergroundBiomeHandler {

constructor()

public "modifyVanillaOverworldPreset"(arg0: $OverworldBiomeBuilder$Type, arg1: $Consumer$Type<($Pair$Type<($Climate$ParameterPoint$Type), ($ResourceKey$Type<($Biome$Type)>)>)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $VanillaUndergroundBiomeHandler$Type = ($VanillaUndergroundBiomeHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $VanillaUndergroundBiomeHandler_ = $VanillaUndergroundBiomeHandler$Type;
}}
declare module "packages/org/violetmoon/zeta/event/play/$ZBlock$EntityPlace" {
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$ZBlock, $ZBlock$Type} from "packages/org/violetmoon/zeta/event/play/$ZBlock"

export interface $ZBlock$EntityPlace extends $ZBlock {

 "getPlacedBlock"(): $BlockState
 "getState"(): $BlockState
 "getLevel"(): $LevelAccessor
 "getPos"(): $BlockPos
}

export namespace $ZBlock$EntityPlace {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZBlock$EntityPlace$Type = ($ZBlock$EntityPlace);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZBlock$EntityPlace_ = $ZBlock$EntityPlace$Type;
}}
declare module "packages/org/violetmoon/zeta/block/$ZetaDoorBlock" {
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$BooleanSupplier, $BooleanSupplier$Type} from "packages/java/util/function/$BooleanSupplier"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$FluidState, $FluidState$Type} from "packages/net/minecraft/world/level/material/$FluidState"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$DoorHingeSide, $DoorHingeSide$Type} from "packages/net/minecraft/world/level/block/state/properties/$DoorHingeSide"
import {$ToolAction, $ToolAction$Type} from "packages/net/minecraftforge/common/$ToolAction"
import {$DoubleBlockHalf, $DoubleBlockHalf$Type} from "packages/net/minecraft/world/level/block/state/properties/$DoubleBlockHalf"
import {$IZetaBlockItemProvider, $IZetaBlockItemProvider$Type} from "packages/org/violetmoon/zeta/registry/$IZetaBlockItemProvider"
import {$IForgeBlock, $IForgeBlock$Type} from "packages/net/minecraftforge/common/extensions/$IForgeBlock"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$DirectionProperty, $DirectionProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$DirectionProperty"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$CreativeModeTab, $CreativeModeTab$Type} from "packages/net/minecraft/world/item/$CreativeModeTab"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$IZetaBlock, $IZetaBlock$Type} from "packages/org/violetmoon/zeta/block/$IZetaBlock"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$BlockItem, $BlockItem$Type} from "packages/net/minecraft/world/item/$BlockItem"
import {$UseOnContext, $UseOnContext$Type} from "packages/net/minecraft/world/item/context/$UseOnContext"
import {$EnumProperty, $EnumProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$EnumProperty"
import {$DoorBlock, $DoorBlock$Type} from "packages/net/minecraft/world/level/block/$DoorBlock"
import {$SoundType, $SoundType$Type} from "packages/net/minecraft/world/level/block/$SoundType"
import {$IPlantable, $IPlantable$Type} from "packages/net/minecraftforge/common/$IPlantable"
import {$IZetaBlockExtensions, $IZetaBlockExtensions$Type} from "packages/org/violetmoon/zeta/block/ext/$IZetaBlockExtensions"
import {$ResourceKey, $ResourceKey$Type} from "packages/net/minecraft/resources/$ResourceKey"
import {$ItemLike, $ItemLike$Type} from "packages/net/minecraft/world/level/$ItemLike"
import {$BlockAndTintGetter, $BlockAndTintGetter$Type} from "packages/net/minecraft/world/level/$BlockAndTintGetter"
import {$BlockSetType, $BlockSetType$Type} from "packages/net/minecraft/world/level/block/state/properties/$BlockSetType"

export class $ZetaDoorBlock extends $DoorBlock implements $IZetaBlock, $IZetaBlockItemProvider, $IZetaBlockExtensions, $IForgeBlock {
static readonly "FACING": $DirectionProperty
static readonly "OPEN": $BooleanProperty
static readonly "HINGE": $EnumProperty<($DoorHingeSide)>
static readonly "POWERED": $BooleanProperty
static readonly "HALF": $EnumProperty<($DoubleBlockHalf)>
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(arg0: $BlockSetType$Type, arg1: string, arg2: $ZetaModule$Type, arg3: $BlockBehaviour$Properties$Type)

public "getModule"(): $ZetaModule
public "provideItemBlock"(arg0: $Block$Type, arg1: $Item$Properties$Type): $BlockItem
public "canSustainPlant"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type, arg4: $IPlantable$Type): boolean
public "isLadder"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "isConduitFrame"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): boolean
public "doesConditionApply"(): boolean
public "setCondition"(arg0: $BooleanSupplier$Type): $ZetaDoorBlock
public "getEnchantPowerBonus"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type): float
public "shouldDisplayFluidOverlay"(arg0: $BlockState$Type, arg1: $BlockAndTintGetter$Type, arg2: $BlockPos$Type, arg3: $FluidState$Type): boolean
public "getToolModifiedState"(arg0: $BlockState$Type, arg1: $UseOnContext$Type, arg2: $ToolAction$Type, arg3: boolean): $BlockState
public "getBeaconColorMultiplier"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): (float)[]
public "makesOpenTrapdoorAboveClimbable"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockState$Type): boolean
public "getSoundType"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): $SoundType
public "isScaffolding"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "getLightEmission"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type): integer
public "isFlammable"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): boolean
public "canStickTo"(arg0: $BlockState$Type, arg1: $BlockState$Type): boolean
public "getFireSpreadSpeed"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "getFlammability"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "isStickyBlock"(arg0: $BlockState$Type): boolean
public "collisionExtendsVertically"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): boolean
public "getBlock"(): $Block
public "getFireSpreadSpeedZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "getFlammabilityZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "setCreativeTab"(arg0: $ResourceKey$Type<($CreativeModeTab$Type)>): $Block
public "setCreativeTab"(arg0: $ResourceKey$Type<($CreativeModeTab$Type)>, arg1: $ItemLike$Type, arg2: boolean): $Block
public "isConduitFrameZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): boolean
public "isLadderZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "isStickyBlockZeta"(arg0: $BlockState$Type): boolean
public "isScaffoldingZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "canStickToZeta"(arg0: $BlockState$Type, arg1: $BlockState$Type): boolean
public "isFlammableZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): boolean
public "getSoundTypeZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): $SoundType
public "makesOpenTrapdoorAboveClimbableZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockState$Type): boolean
public "canSustainPlantZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type, arg4: string): boolean
public "getToolModifiedStateZeta"(arg0: $BlockState$Type, arg1: $UseOnContext$Type, arg2: string, arg3: boolean): $BlockState
public "collisionExtendsVerticallyZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): boolean
public "shouldDisplayFluidOverlayZeta"(arg0: $BlockState$Type, arg1: $BlockAndTintGetter$Type, arg2: $BlockPos$Type, arg3: $FluidState$Type): boolean
public "getEnchantPowerBonusZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type): float
public "getBeaconColorMultiplierZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): (float)[]
public "getLightEmissionZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type): integer
public "isEnabled"(): boolean
public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
get "module"(): $ZetaModule
set "condition"(value: $BooleanSupplier$Type)
get "block"(): $Block
set "creativeTab"(value: $ResourceKey$Type<($CreativeModeTab$Type)>)
get "enabled"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZetaDoorBlock$Type = ($ZetaDoorBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZetaDoorBlock_ = $ZetaDoorBlock$Type;
}}
declare module "packages/org/violetmoon/zetaimplforge/event/play/entity/living/$ForgeZSleepingLocationCheck" {
import {$ZSleepingLocationCheck, $ZSleepingLocationCheck$Type} from "packages/org/violetmoon/zeta/event/play/entity/living/$ZSleepingLocationCheck"
import {$ZResult, $ZResult$Type} from "packages/org/violetmoon/zeta/event/bus/$ZResult"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$SleepingLocationCheckEvent, $SleepingLocationCheckEvent$Type} from "packages/net/minecraftforge/event/entity/player/$SleepingLocationCheckEvent"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $ForgeZSleepingLocationCheck implements $ZSleepingLocationCheck {

constructor(arg0: $SleepingLocationCheckEvent$Type)

public "setResult"(arg0: $ZResult$Type): void
public "getResult"(): $ZResult
public "getSleepingLocation"(): $BlockPos
public "getEntity"(): $LivingEntity
set "result"(value: $ZResult$Type)
get "result"(): $ZResult
get "sleepingLocation"(): $BlockPos
get "entity"(): $LivingEntity
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ForgeZSleepingLocationCheck$Type = ($ForgeZSleepingLocationCheck);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ForgeZSleepingLocationCheck_ = $ForgeZSleepingLocationCheck$Type;
}}
declare module "packages/org/violetmoon/quark/content/mobs/client/render/entity/$ShibaRenderer" {
import {$RenderLayer, $RenderLayer$Type} from "packages/net/minecraft/client/renderer/entity/layers/$RenderLayer"
import {$EntityRendererProvider$Context, $EntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRendererProvider$Context"
import {$List, $List$Type} from "packages/java/util/$List"
import {$EntityModel, $EntityModel$Type} from "packages/net/minecraft/client/model/$EntityModel"
import {$Shiba, $Shiba$Type} from "packages/org/violetmoon/quark/content/mobs/entity/$Shiba"
import {$MobRenderer, $MobRenderer$Type} from "packages/net/minecraft/client/renderer/entity/$MobRenderer"
import {$ShibaModel, $ShibaModel$Type} from "packages/org/violetmoon/quark/content/mobs/client/model/$ShibaModel"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $ShibaRenderer extends $MobRenderer<($Shiba), ($ShibaModel)> {
static readonly "LEASH_RENDER_STEPS": integer
 "model": M
 "layers": $List<($RenderLayer<(T), (M)>)>
 "shadowRadius": float

constructor(arg0: $EntityRendererProvider$Context$Type)

public "getTextureLocation"(arg0: $Shiba$Type): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ShibaRenderer$Type = ($ShibaRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ShibaRenderer_ = $ShibaRenderer$Type;
}}
declare module "packages/org/violetmoon/quark/content/tools/item/$SlimeInABucketItem" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$UseOnContext, $UseOnContext$Type} from "packages/net/minecraft/world/item/context/$UseOnContext"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$ZetaItem, $ZetaItem$Type} from "packages/org/violetmoon/zeta/item/$ZetaItem"

export class $SlimeInABucketItem extends $ZetaItem {
static readonly "TAG_ENTITY_DATA": string
static readonly "TAG_EXCITED": string
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $ZetaModule$Type)

public "useOn"(arg0: $UseOnContext$Type): $InteractionResult
public "inventoryTick"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $Entity$Type, arg3: integer, arg4: boolean): void
public "getName"(arg0: $ItemStack$Type): $Component
public static "isSlimeChunk"(arg0: $ServerLevel$Type, arg1: integer, arg2: integer): boolean
public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SlimeInABucketItem$Type = ($SlimeInABucketItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SlimeInABucketItem_ = $SlimeInABucketItem$Type;
}}
declare module "packages/org/violetmoon/quark/content/world/config/$AirStoneClusterConfig$Builder" {
import {$BigStoneClusterConfig$Builder, $BigStoneClusterConfig$Builder$Type} from "packages/org/violetmoon/quark/content/world/config/$BigStoneClusterConfig$Builder"

export class $AirStoneClusterConfig$Builder<B extends $AirStoneClusterConfig$Builder<(B)>> extends $BigStoneClusterConfig$Builder<(B)> {

constructor()

public "generateInAir"(arg0: boolean): B
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AirStoneClusterConfig$Builder$Type<B> = ($AirStoneClusterConfig$Builder<(B)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AirStoneClusterConfig$Builder_<B> = $AirStoneClusterConfig$Builder$Type<(B)>;
}}
declare module "packages/org/violetmoon/quark/content/mobs/client/model/$WraithModel" {
import {$VertexConsumer, $VertexConsumer$Type} from "packages/com/mojang/blaze3d/vertex/$VertexConsumer"
import {$Wraith, $Wraith$Type} from "packages/org/violetmoon/quark/content/mobs/entity/$Wraith"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$EntityModel, $EntityModel$Type} from "packages/net/minecraft/client/model/$EntityModel"
import {$ModelPart, $ModelPart$Type} from "packages/net/minecraft/client/model/geom/$ModelPart"
import {$LayerDefinition, $LayerDefinition$Type} from "packages/net/minecraft/client/model/geom/builders/$LayerDefinition"

export class $WraithModel extends $EntityModel<($Wraith)> {
readonly "main": $ModelPart
readonly "body": $ModelPart
readonly "arms": $ModelPart
 "attackTime": float
 "riding": boolean
 "young": boolean

constructor(arg0: $ModelPart$Type)

public "setupAnim"(arg0: $Wraith$Type, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float): void
public static "createBodyLayer"(): $LayerDefinition
public "renderToBuffer"(arg0: $PoseStack$Type, arg1: $VertexConsumer$Type, arg2: integer, arg3: integer, arg4: float, arg5: float, arg6: float, arg7: float): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WraithModel$Type = ($WraithModel);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WraithModel_ = $WraithModel$Type;
}}
declare module "packages/org/violetmoon/quark/content/world/undergroundstyle/base/$UndergroundStyle" {
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$UndergroundStyleGenerator$Context, $UndergroundStyleGenerator$Context$Type} from "packages/org/violetmoon/quark/content/world/undergroundstyle/base/$UndergroundStyleGenerator$Context"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $UndergroundStyle {

constructor()

public "fill"(arg0: $UndergroundStyleGenerator$Context$Type, arg1: $BlockPos$Type): void
public "canReplace"(arg0: $BlockState$Type): boolean
public "isInside"(arg0: $BlockState$Type): boolean
public "isWall"(arg0: $LevelAccessor$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type): boolean
public "fillInside"(arg0: $UndergroundStyleGenerator$Context$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type): void
public "isFloor"(arg0: $LevelAccessor$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type): boolean
public "fillCeiling"(arg0: $UndergroundStyleGenerator$Context$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type): void
public "fillFloor"(arg0: $UndergroundStyleGenerator$Context$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type): void
public "fillWall"(arg0: $UndergroundStyleGenerator$Context$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type): void
public "isCeiling"(arg0: $LevelAccessor$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type): boolean
public "isBorder"(arg0: $LevelAccessor$Type, arg1: $BlockPos$Type): boolean
public "getBorderSide"(arg0: $LevelAccessor$Type, arg1: $BlockPos$Type): $Direction
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $UndergroundStyle$Type = ($UndergroundStyle);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $UndergroundStyle_ = $UndergroundStyle$Type;
}}
declare module "packages/org/violetmoon/zeta/event/bus/helpers/$LivingGetter" {
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export interface $LivingGetter {

 "getEntity"(): $LivingEntity

(): $LivingEntity
}

export namespace $LivingGetter {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LivingGetter$Type = ($LivingGetter);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LivingGetter_ = $LivingGetter$Type;
}}
declare module "packages/org/violetmoon/quark/content/world/config/$BigStoneClusterConfig" {
import {$DimensionConfig, $DimensionConfig$Type} from "packages/org/violetmoon/zeta/config/type/$DimensionConfig"
import {$IBiomeConfig, $IBiomeConfig$Type} from "packages/org/violetmoon/zeta/config/type/$IBiomeConfig"
import {$ClusterSizeConfig, $ClusterSizeConfig$Type} from "packages/org/violetmoon/zeta/config/type/$ClusterSizeConfig"
import {$BigStoneClusterConfig$Builder, $BigStoneClusterConfig$Builder$Type} from "packages/org/violetmoon/quark/content/world/config/$BigStoneClusterConfig$Builder"

export class $BigStoneClusterConfig extends $ClusterSizeConfig {
 "enabled": boolean
 "dimensions": $DimensionConfig
 "biomes": $IBiomeConfig
 "rarity": integer
 "minYLevel": integer
 "maxYLevel": integer
 "horizontalSize": integer
 "verticalSize": integer
 "horizontalVariation": integer
 "verticalVariation": integer

constructor(arg0: $BigStoneClusterConfig$Builder$Type<(any)>)

public static "stoneBuilder"<B extends $BigStoneClusterConfig$Builder<(B)>>(): $BigStoneClusterConfig$Builder<(B)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BigStoneClusterConfig$Type = ($BigStoneClusterConfig);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BigStoneClusterConfig_ = $BigStoneClusterConfig$Type;
}}
declare module "packages/org/violetmoon/quark/api/$IRuneColorProvider" {
import {$RuneColor, $RuneColor$Type} from "packages/org/violetmoon/quark/content/tools/base/$RuneColor"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export interface $IRuneColorProvider {

 "getRuneColor"(arg0: $ItemStack$Type): $RuneColor

(arg0: $ItemStack$Type): $RuneColor
}

export namespace $IRuneColorProvider {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IRuneColorProvider$Type = ($IRuneColorProvider);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IRuneColorProvider_ = $IRuneColorProvider$Type;
}}
declare module "packages/org/violetmoon/zeta/config/type/$BiomeTagConfig" {
import {$Holder, $Holder$Type} from "packages/net/minecraft/core/$Holder"
import {$IBiomeConfig, $IBiomeConfig$Type} from "packages/org/violetmoon/zeta/config/type/$IBiomeConfig"
import {$ConfigFlagManager, $ConfigFlagManager$Type} from "packages/org/violetmoon/zeta/config/$ConfigFlagManager"
import {$Biome, $Biome$Type} from "packages/net/minecraft/world/level/biome/$Biome"
import {$IConfigType, $IConfigType$Type} from "packages/org/violetmoon/zeta/config/type/$IConfigType"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $BiomeTagConfig implements $IBiomeConfig, $IConfigType {


public "canSpawn"(arg0: $Holder$Type<($Biome$Type)>): boolean
public "onReload"(arg0: $ZetaModule$Type, arg1: $ConfigFlagManager$Type): void
public "updateTypes"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BiomeTagConfig$Type = ($BiomeTagConfig);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BiomeTagConfig_ = $BiomeTagConfig$Type;
}}
declare module "packages/org/violetmoon/quark/content/mobs/client/model/$FoxhoundModel" {
import {$Foxhound, $Foxhound$Type} from "packages/org/violetmoon/quark/content/mobs/entity/$Foxhound"
import {$AgeableListModel, $AgeableListModel$Type} from "packages/net/minecraft/client/model/$AgeableListModel"
import {$ModelPart, $ModelPart$Type} from "packages/net/minecraft/client/model/geom/$ModelPart"
import {$LayerDefinition, $LayerDefinition$Type} from "packages/net/minecraft/client/model/geom/builders/$LayerDefinition"

export class $FoxhoundModel extends $AgeableListModel<($Foxhound)> {
readonly "head": $ModelPart
readonly "rightFrontLeg": $ModelPart
readonly "leftFrontLeg": $ModelPart
readonly "rightBackLeg": $ModelPart
readonly "leftBackLeg": $ModelPart
readonly "body": $ModelPart
readonly "snout": $ModelPart
readonly "rightEar": $ModelPart
readonly "leftEar": $ModelPart
readonly "tail": $ModelPart
readonly "fluff": $ModelPart
readonly "scaleHead": boolean
readonly "babyYHeadOffset": float
readonly "babyZHeadOffset": float
readonly "babyHeadScale": float
readonly "babyBodyScale": float
readonly "bodyYOffset": float
 "attackTime": float
 "riding": boolean
 "young": boolean

constructor(arg0: $ModelPart$Type)

public "setupAnim"(arg0: $Foxhound$Type, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float): void
public static "createBodyLayer"(): $LayerDefinition
public "prepareMobModel"(arg0: $Foxhound$Type, arg1: float, arg2: float, arg3: float): void
public "setAngle"(arg0: $ModelPart$Type, arg1: float, arg2: float, arg3: float): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FoxhoundModel$Type = ($FoxhoundModel);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FoxhoundModel_ = $FoxhoundModel$Type;
}}
declare module "packages/org/violetmoon/zeta/event/bus/$PlayEvent" {
import {$Annotation, $Annotation$Type} from "packages/java/lang/annotation/$Annotation"
import {$Class, $Class$Type} from "packages/java/lang/$Class"

export interface $PlayEvent extends $Annotation {

 "equals"(arg0: any): boolean
 "toString"(): string
 "hashCode"(): integer
 "annotationType"(): $Class<(any)>
}

export namespace $PlayEvent {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PlayEvent$Type = ($PlayEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PlayEvent_ = $PlayEvent$Type;
}}
declare module "packages/org/violetmoon/quark/content/mobs/client/layer/shiba/$ShibaMouthItemLayer" {
import {$RenderLayer, $RenderLayer$Type} from "packages/net/minecraft/client/renderer/entity/layers/$RenderLayer"
import {$RenderLayerParent, $RenderLayerParent$Type} from "packages/net/minecraft/client/renderer/entity/$RenderLayerParent"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$Shiba, $Shiba$Type} from "packages/org/violetmoon/quark/content/mobs/entity/$Shiba"
import {$ShibaModel, $ShibaModel$Type} from "packages/org/violetmoon/quark/content/mobs/client/model/$ShibaModel"
import {$ItemInHandRenderer, $ItemInHandRenderer$Type} from "packages/net/minecraft/client/renderer/$ItemInHandRenderer"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"

export class $ShibaMouthItemLayer extends $RenderLayer<($Shiba), ($ShibaModel)> {

constructor(arg0: $RenderLayerParent$Type<($Shiba$Type), ($ShibaModel$Type)>, arg1: $ItemInHandRenderer$Type)

public "render"(arg0: $PoseStack$Type, arg1: $MultiBufferSource$Type, arg2: integer, arg3: $Shiba$Type, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: float): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ShibaMouthItemLayer$Type = ($ShibaMouthItemLayer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ShibaMouthItemLayer_ = $ShibaMouthItemLayer$Type;
}}
declare module "packages/org/violetmoon/quark/addons/oddities/client/screen/$CrateScreen" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$CrateMenu, $CrateMenu$Type} from "packages/org/violetmoon/quark/addons/oddities/inventory/$CrateMenu"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$AbstractContainerScreen, $AbstractContainerScreen$Type} from "packages/net/minecraft/client/gui/screens/inventory/$AbstractContainerScreen"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$IQuarkButtonAllowed, $IQuarkButtonAllowed$Type} from "packages/org/violetmoon/quark/api/$IQuarkButtonAllowed"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"
import {$Rect2i, $Rect2i$Type} from "packages/net/minecraft/client/renderer/$Rect2i"

export class $CrateScreen extends $AbstractContainerScreen<($CrateMenu)> implements $IQuarkButtonAllowed {
static readonly "INVENTORY_LOCATION": $ResourceLocation
static readonly "SLOT_ITEM_BLIT_OFFSET": integer
 "imageWidth": integer
 "hoveredSlot": $Slot
 "leftPos": integer
 "topPos": integer
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering

constructor(arg0: $CrateMenu$Type, arg1: $Inventory$Type, arg2: $Component$Type)

public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
public "mouseReleased"(arg0: double, arg1: double, arg2: integer): boolean
public "mouseClicked"(arg0: double, arg1: double, arg2: integer): boolean
public "mouseScrolled"(arg0: double, arg1: double, arg2: double): boolean
public "mouseDragged"(arg0: double, arg1: double, arg2: integer, arg3: double, arg4: double): boolean
public "getExtraAreas"(): $List<($Rect2i)>
get "extraAreas"(): $List<($Rect2i)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CrateScreen$Type = ($CrateScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CrateScreen_ = $CrateScreen$Type;
}}
declare module "packages/org/violetmoon/quark/content/tweaks/module/$UtilityRecipesModule" {
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ZFurnaceFuelBurnTime, $ZFurnaceFuelBurnTime$Type} from "packages/org/violetmoon/zeta/event/play/$ZFurnaceFuelBurnTime"
import {$ZLevelTick, $ZLevelTick$Type} from "packages/org/violetmoon/zeta/event/play/$ZLevelTick"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZConfigChanged, $ZConfigChanged$Type} from "packages/org/violetmoon/zeta/event/load/$ZConfigChanged"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $UtilityRecipesModule extends $ZetaModule {
static "dyeAnyWool": boolean
static "betterStoneToolCrafting": boolean
static "enableDispenser": boolean
static "enableRepeater": boolean
static "enableMinecarts": boolean
static "enableChestBoats": boolean
static "logsToChests": boolean
static "coralToDye": boolean
static "bentRecipes": boolean
static "compostableToxins": boolean
static "effectiveDragonBreath": boolean
static "torchesBurn": boolean
static "boneMealUtility": boolean
static "charcoalToBlackDye": boolean
static "easyHopper": boolean
static "easySticks": boolean
static "smeltRawOreBlocks": boolean
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "worldTick"(arg0: $ZLevelTick$Type): void
public "configChanged"(arg0: $ZConfigChanged$Type): void
public "torchBurnTime"(arg0: $ZFurnaceFuelBurnTime$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $UtilityRecipesModule$Type = ($UtilityRecipesModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $UtilityRecipesModule_ = $UtilityRecipesModule$Type;
}}
declare module "packages/org/violetmoon/quark/base/client/handler/$InventoryButtonHandler" {
import {$BooleanSupplier, $BooleanSupplier$Type} from "packages/java/util/function/$BooleanSupplier"
import {$ZScreen$Init$Post, $ZScreen$Init$Post$Type} from "packages/org/violetmoon/zeta/client/event/play/$ZScreen$Init$Post"
import {$InventoryButtonHandler$ButtonProvider, $InventoryButtonHandler$ButtonProvider$Type} from "packages/org/violetmoon/quark/base/client/handler/$InventoryButtonHandler$ButtonProvider"
import {$Button, $Button$Type} from "packages/net/minecraft/client/gui/components/$Button"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$ZScreen$MouseButtonPressed$Pre, $ZScreen$MouseButtonPressed$Pre$Type} from "packages/org/violetmoon/zeta/client/event/play/$ZScreen$MouseButtonPressed$Pre"
import {$ZKeyMapping, $ZKeyMapping$Type} from "packages/org/violetmoon/zeta/client/event/load/$ZKeyMapping"
import {$ZScreen$KeyPressed$Pre, $ZScreen$KeyPressed$Pre$Type} from "packages/org/violetmoon/zeta/client/event/play/$ZScreen$KeyPressed$Pre"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$AbstractContainerScreen, $AbstractContainerScreen$Type} from "packages/net/minecraft/client/gui/screens/inventory/$AbstractContainerScreen"
import {$KeyMapping, $KeyMapping$Type} from "packages/net/minecraft/client/$KeyMapping"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$InventoryButtonHandler$ButtonTargetType, $InventoryButtonHandler$ButtonTargetType$Type} from "packages/org/violetmoon/quark/base/client/handler/$InventoryButtonHandler$ButtonTargetType"

export class $InventoryButtonHandler {

constructor()

public static "initGui"(arg0: $ZScreen$Init$Post$Type): void
public static "mouseInputEvent"(arg0: $ZScreen$MouseButtonPressed$Pre$Type): void
public static "keyboardInputEvent"(arg0: $ZScreen$KeyPressed$Pre$Type): void
public static "addButtonProvider"(arg0: $ZetaModule$Type, arg1: $InventoryButtonHandler$ButtonTargetType$Type, arg2: integer, arg3: $KeyMapping$Type, arg4: $Consumer$Type<($AbstractContainerScreen$Type<(any)>)>, arg5: $InventoryButtonHandler$ButtonProvider$Type, arg6: $BooleanSupplier$Type): void
public static "addButtonProvider"(arg0: $ZKeyMapping$Type, arg1: $ZetaModule$Type, arg2: $InventoryButtonHandler$ButtonTargetType$Type, arg3: integer, arg4: string, arg5: $Consumer$Type<($AbstractContainerScreen$Type<(any)>)>, arg6: $InventoryButtonHandler$ButtonProvider$Type, arg7: $BooleanSupplier$Type): void
public static "addButtonProvider"(arg0: $ZetaModule$Type, arg1: $InventoryButtonHandler$ButtonTargetType$Type, arg2: integer, arg3: $InventoryButtonHandler$ButtonProvider$Type, arg4: $BooleanSupplier$Type): void
public static "getActiveButtons"(arg0: $InventoryButtonHandler$ButtonTargetType$Type): $Collection<($Button)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $InventoryButtonHandler$Type = ($InventoryButtonHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $InventoryButtonHandler_ = $InventoryButtonHandler$Type;
}}
declare module "packages/org/violetmoon/zeta/util/$RegisterDynamicUtil" {
import {$WritableRegistry, $WritableRegistry$Type} from "packages/net/minecraft/core/$WritableRegistry"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ResourceKey, $ResourceKey$Type} from "packages/net/minecraft/resources/$ResourceKey"
import {$RegistryOps$RegistryInfoLookup, $RegistryOps$RegistryInfoLookup$Type} from "packages/net/minecraft/resources/$RegistryOps$RegistryInfoLookup"

export class $RegisterDynamicUtil {

constructor()

public static "signup"(arg0: $Zeta$Type): void
public static "onRegisterDynamic"<E>(arg0: $RegistryOps$RegistryInfoLookup$Type, arg1: $ResourceKey$Type<(any)>, arg2: $WritableRegistry$Type<(E)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RegisterDynamicUtil$Type = ($RegisterDynamicUtil);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RegisterDynamicUtil_ = $RegisterDynamicUtil$Type;
}}
declare module "packages/org/violetmoon/zeta/api/$IIndirectConnector" {
import {$Pair, $Pair$Type} from "packages/org/apache/commons/lang3/tuple/$Pair"
import {$IConditionalSticky, $IConditionalSticky$Type} from "packages/org/violetmoon/zeta/api/$IConditionalSticky"
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$List, $List$Type} from "packages/java/util/$List"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export interface $IIndirectConnector {

 "isEnabled"(): boolean
 "getStickyCondition"(): $IConditionalSticky
 "canConnectIndirectly"(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $BlockPos$Type, arg3: $BlockState$Type, arg4: $BlockState$Type): boolean

(): boolean
}

export namespace $IIndirectConnector {
const INDIRECT_STICKY_BLOCKS: $List<($Pair<($Predicate<($BlockState)>), ($IIndirectConnector)>)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IIndirectConnector$Type = ($IIndirectConnector);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IIndirectConnector_ = $IIndirectConnector$Type;
}}
declare module "packages/org/violetmoon/zeta/event/play/$ZLevelTick$End" {
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ZLevelTick, $ZLevelTick$Type} from "packages/org/violetmoon/zeta/event/play/$ZLevelTick"

export interface $ZLevelTick$End extends $ZLevelTick {

 "getLevel"(): $Level

(): $Level
}

export namespace $ZLevelTick$End {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZLevelTick$End$Type = ($ZLevelTick$End);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZLevelTick$End_ = $ZLevelTick$End$Type;
}}
declare module "packages/org/violetmoon/quark/content/building/module/$HollowLogsModule" {
import {$ZCommonSetup, $ZCommonSetup$Type} from "packages/org/violetmoon/zeta/event/load/$ZCommonSetup"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$ZPlayerTick$Start, $ZPlayerTick$Start$Type} from "packages/org/violetmoon/zeta/event/play/entity/player/$ZPlayerTick$Start"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$ZRegister, $ZRegister$Type} from "packages/org/violetmoon/zeta/event/load/$ZRegister"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ManualTrigger, $ManualTrigger$Type} from "packages/org/violetmoon/zeta/advancement/$ManualTrigger"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZConfigChanged, $ZConfigChanged$Type} from "packages/org/violetmoon/zeta/event/load/$ZConfigChanged"

export class $HollowLogsModule extends $ZetaModule {
static "crawlTrigger": $ManualTrigger
static "enableAutoCrawl": boolean
static "hollowLogsTag": $TagKey<($Block)>
static "staticEnabled": boolean
static "logMap": $Map<($Block), ($Block)>
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "register"(arg0: $ZRegister$Type): void
public "setup"(arg0: $ZCommonSetup$Type): void
public "playerTick"(arg0: $ZPlayerTick$Start$Type): void
public "configChanged"(arg0: $ZConfigChanged$Type): void
set "up"(value: $ZCommonSetup$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $HollowLogsModule$Type = ($HollowLogsModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $HollowLogsModule_ = $HollowLogsModule$Type;
}}
declare module "packages/org/violetmoon/quark/content/tools/client/render/entity/$PickarangRenderer" {
import {$EntityRendererProvider$Context, $EntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRendererProvider$Context"
import {$AbstractPickarang, $AbstractPickarang$Type} from "packages/org/violetmoon/quark/content/tools/entity/rang/$AbstractPickarang"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$EntityRenderer, $EntityRenderer$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRenderer"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $PickarangRenderer extends $EntityRenderer<($AbstractPickarang<(any)>)> {
 "shadowRadius": float

constructor(arg0: $EntityRendererProvider$Context$Type)

public "render"(arg0: $AbstractPickarang$Type<(any)>, arg1: float, arg2: float, arg3: $PoseStack$Type, arg4: $MultiBufferSource$Type, arg5: integer): void
public "getTextureLocation"(arg0: $AbstractPickarang$Type<(any)>): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PickarangRenderer$Type = ($PickarangRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PickarangRenderer_ = $PickarangRenderer$Type;
}}
declare module "packages/org/violetmoon/quark/content/client/tooltip/$MapTooltips" {
import {$ZGatherTooltipComponents, $ZGatherTooltipComponents$Type} from "packages/org/violetmoon/zeta/client/event/play/$ZGatherTooltipComponents"

export class $MapTooltips {

constructor()

public static "makeTooltip"(arg0: $ZGatherTooltipComponents$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MapTooltips$Type = ($MapTooltips);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MapTooltips_ = $MapTooltips$Type;
}}
declare module "packages/org/violetmoon/quark/content/building/module/$JapanesePaletteModule" {
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$ZRegister, $ZRegister$Type} from "packages/org/violetmoon/zeta/event/load/$ZRegister"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $JapanesePaletteModule extends $ZetaModule {
static "enablePaperBlocks": boolean
static "enableBambooMats": boolean
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "register"(arg0: $ZRegister$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $JapanesePaletteModule$Type = ($JapanesePaletteModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $JapanesePaletteModule_ = $JapanesePaletteModule$Type;
}}
declare module "packages/org/violetmoon/quark/addons/oddities/client/render/be/$MagnetizedBlockRenderer" {
import {$BlockEntityRendererProvider$Context, $BlockEntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/blockentity/$BlockEntityRendererProvider$Context"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$MagnetizedBlockBlockEntity, $MagnetizedBlockBlockEntity$Type} from "packages/org/violetmoon/quark/addons/oddities/block/be/$MagnetizedBlockBlockEntity"
import {$BlockEntityRenderer, $BlockEntityRenderer$Type} from "packages/net/minecraft/client/renderer/blockentity/$BlockEntityRenderer"

export class $MagnetizedBlockRenderer implements $BlockEntityRenderer<($MagnetizedBlockBlockEntity)> {

constructor(arg0: $BlockEntityRendererProvider$Context$Type)

public "render"(arg0: $MagnetizedBlockBlockEntity$Type, arg1: float, arg2: $PoseStack$Type, arg3: $MultiBufferSource$Type, arg4: integer, arg5: integer): void
public "shouldRender"(arg0: $MagnetizedBlockBlockEntity$Type, arg1: $Vec3$Type): boolean
public "shouldRenderOffScreen"(arg0: $MagnetizedBlockBlockEntity$Type): boolean
public "getViewDistance"(): integer
get "viewDistance"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MagnetizedBlockRenderer$Type = ($MagnetizedBlockRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MagnetizedBlockRenderer_ = $MagnetizedBlockRenderer$Type;
}}
declare module "packages/org/violetmoon/quark/content/tweaks/client/emote/$EmoteHandler" {
import {$Minecraft, $Minecraft$Type} from "packages/net/minecraft/client/$Minecraft"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$EmoteBase, $EmoteBase$Type} from "packages/org/violetmoon/quark/content/tweaks/client/emote/$EmoteBase"
import {$EmoteDescriptor, $EmoteDescriptor$Type} from "packages/org/violetmoon/quark/content/tweaks/client/emote/$EmoteDescriptor"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $EmoteHandler {
static readonly "CUSTOM_EMOTE_NAMESPACE": string
static readonly "CUSTOM_PREFIX": string
static readonly "emoteMap": $Map<(string), ($EmoteDescriptor)>

constructor()

public static "addCustomEmote"(arg0: string): void
public static "addEmote"(arg0: string, arg1: $Class$Type<(any)>): void
public static "addEmote"(arg0: string): void
public static "clearEmotes"(): void
public static "getPlayerEmote"(arg0: $Player$Type): $EmoteBase
public static "putEmote"(arg0: $Entity$Type, arg1: string, arg2: integer): void
public static "onRenderTick"(arg0: $Minecraft$Type): void
public static "preRender"(arg0: $PoseStack$Type, arg1: $Player$Type): void
public static "postRender"(arg0: $PoseStack$Type, arg1: $Player$Type): void
public static "updateEmotes"(arg0: $Entity$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EmoteHandler$Type = ($EmoteHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EmoteHandler_ = $EmoteHandler$Type;
}}
declare module "packages/org/violetmoon/quark/content/tools/module/$SlimeInABucketModule" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$ZRegister, $ZRegister$Type} from "packages/org/violetmoon/zeta/event/load/$ZRegister"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZPlayerInteract$EntityInteract, $ZPlayerInteract$EntityInteract$Type} from "packages/org/violetmoon/zeta/event/play/entity/player/$ZPlayerInteract$EntityInteract"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $SlimeInABucketModule extends $ZetaModule {
static "slime_in_a_bucket": $Item
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "register"(arg0: $ZRegister$Type): void
public "entityInteract"(arg0: $ZPlayerInteract$EntityInteract$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SlimeInABucketModule$Type = ($SlimeInABucketModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SlimeInABucketModule_ = $SlimeInABucketModule$Type;
}}
declare module "packages/org/violetmoon/zeta/event/play/entity/player/$ZPlayerInteract$EntityInteract" {
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$ZPlayerInteract, $ZPlayerInteract$Type} from "packages/org/violetmoon/zeta/event/play/entity/player/$ZPlayerInteract"

export interface $ZPlayerInteract$EntityInteract extends $ZPlayerInteract {

 "getTarget"(): $Entity
 "getLevel"(): $Level
 "getHand"(): $InteractionHand
 "getEntity"(): $Player
 "getPos"(): $BlockPos
 "setCancellationResult"(arg0: $InteractionResult$Type): void
 "cancel"(): void
 "setCanceled"(arg0: boolean): void
 "isCanceled"(): boolean
}

export namespace $ZPlayerInteract$EntityInteract {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZPlayerInteract$EntityInteract$Type = ($ZPlayerInteract$EntityInteract);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZPlayerInteract$EntityInteract_ = $ZPlayerInteract$EntityInteract$Type;
}}
declare module "packages/org/violetmoon/quark/content/tools/module/$AmbientDiscsModule" {
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$ZRegister, $ZRegister$Type} from "packages/org/violetmoon/zeta/event/load/$ZRegister"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ZLivingDeath, $ZLivingDeath$Type} from "packages/org/violetmoon/zeta/event/play/entity/living/$ZLivingDeath"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $AmbientDiscsModule extends $ZetaModule {
static "dropOnSpiderKill": boolean
static "volume": double
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "register"(arg0: $ZRegister$Type): void
public "onMobDeath"(arg0: $ZLivingDeath$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AmbientDiscsModule$Type = ($AmbientDiscsModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AmbientDiscsModule_ = $AmbientDiscsModule$Type;
}}
declare module "packages/org/violetmoon/quark/api/$ITrowelable" {
import {$UseOnContext, $UseOnContext$Type} from "packages/net/minecraft/world/item/context/$UseOnContext"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export interface $ITrowelable {

 "canBeTroweled"(arg0: $ItemStack$Type, arg1: $UseOnContext$Type): boolean
}

export namespace $ITrowelable {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ITrowelable$Type = ($ITrowelable);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ITrowelable_ = $ITrowelable$Type;
}}
declare module "packages/org/violetmoon/zeta/client/key/$SortedPredicatedKeyBinding" {
import {$KeyMapping, $KeyMapping$Type} from "packages/net/minecraft/client/$KeyMapping"
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$SortedKeyBinding, $SortedKeyBinding$Type} from "packages/org/violetmoon/zeta/client/key/$SortedKeyBinding"
import {$InputConstants$Type, $InputConstants$Type$Type} from "packages/com/mojang/blaze3d/platform/$InputConstants$Type"
import {$InputConstants$Key, $InputConstants$Key$Type} from "packages/com/mojang/blaze3d/platform/$InputConstants$Key"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $SortedPredicatedKeyBinding extends $SortedKeyBinding {
static readonly "ALL": $Map<(string), ($KeyMapping)>
static readonly "CATEGORY_MOVEMENT": string
static readonly "CATEGORY_MISC": string
static readonly "CATEGORY_MULTIPLAYER": string
static readonly "CATEGORY_GAMEPLAY": string
static readonly "CATEGORY_INVENTORY": string
static readonly "CATEGORY_INTERFACE": string
static readonly "CATEGORY_CREATIVE": string
 "key": $InputConstants$Key
 "clickCount": integer

constructor(arg0: string, arg1: $InputConstants$Type$Type, arg2: integer, arg3: string, arg4: integer, arg5: $Predicate$Type<($InputConstants$Key$Type)>)

public "setKey"(arg0: $InputConstants$Key$Type): void
set "key"(value: $InputConstants$Key$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SortedPredicatedKeyBinding$Type = ($SortedPredicatedKeyBinding);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SortedPredicatedKeyBinding_ = $SortedPredicatedKeyBinding$Type;
}}
declare module "packages/org/violetmoon/quark/addons/oddities/block/be/$MatrixEnchantingTableBlockEntity" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$EnchantmentMatrix, $EnchantmentMatrix$Type} from "packages/org/violetmoon/quark/addons/oddities/inventory/$EnchantmentMatrix"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$AbstractEnchantingTableBlockEntity, $AbstractEnchantingTableBlockEntity$Type} from "packages/org/violetmoon/quark/addons/oddities/block/be/$AbstractEnchantingTableBlockEntity"
import {$IEnchantmentInfluencer, $IEnchantmentInfluencer$Type} from "packages/org/violetmoon/quark/api/$IEnchantmentInfluencer"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$Enchantment, $Enchantment$Type} from "packages/net/minecraft/world/item/enchantment/$Enchantment"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$List, $List$Type} from "packages/java/util/$List"
import {$AbstractContainerMenu, $AbstractContainerMenu$Type} from "packages/net/minecraft/world/inventory/$AbstractContainerMenu"
import {$MenuProvider, $MenuProvider$Type} from "packages/net/minecraft/world/$MenuProvider"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $MatrixEnchantingTableBlockEntity extends $AbstractEnchantingTableBlockEntity implements $MenuProvider {
static readonly "CANDLES": $List<($Block)>
static readonly "OPER_ADD": integer
static readonly "OPER_PLACE": integer
static readonly "OPER_REMOVE": integer
static readonly "OPER_ROTATE": integer
static readonly "OPER_MERGE": integer
static readonly "TAG_STACK_MATRIX": string
 "matrix": $EnchantmentMatrix
 "clientMatrixDirty": boolean
readonly "influences": $Map<($Enchantment), (integer)>
 "bookshelfPower": integer
 "enchantability": integer
 "charge": integer
 "tickCount": integer
 "pageFlip": float
 "pageFlipPrev": float
 "flipT": float
 "flipA": float
 "bookSpread": float
 "bookSpreadPrev": float
 "bookRotation": float
 "bookRotationPrev": float
 "tRot": float
 "blockState": $BlockState

constructor(arg0: $BlockPos$Type, arg1: $BlockState$Type)

public static "tick"(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: $MatrixEnchantingTableBlockEntity$Type): void
public "tick"(): void
public "getDisplayName"(): $Component
public static "getInfluencerFromBlock"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type): $IEnchantmentInfluencer
public "writeSharedNBT"(arg0: $CompoundTag$Type): void
public "readSharedNBT"(arg0: $CompoundTag$Type): void
public "createMenu"(arg0: integer, arg1: $Inventory$Type, arg2: $Player$Type): $AbstractContainerMenu
public "updateEnchantPower"(): void
public "isMatrixInfluenced"(): boolean
public static "isShortBlock"(arg0: $Level$Type, arg1: $BlockPos$Type): boolean
public "onOperation"(arg0: $Player$Type, arg1: integer, arg2: integer, arg3: integer, arg4: integer): void
public "setChanged"(): void
public static "stillValidBlockEntity"(arg0: $BlockEntity$Type, arg1: $Player$Type, arg2: integer): boolean
public static "stillValidBlockEntity"(arg0: $BlockEntity$Type, arg1: $Player$Type): boolean
public static "tryClear"(arg0: any): void
get "displayName"(): $Component
get "matrixInfluenced"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MatrixEnchantingTableBlockEntity$Type = ($MatrixEnchantingTableBlockEntity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MatrixEnchantingTableBlockEntity_ = $MatrixEnchantingTableBlockEntity$Type;
}}
declare module "packages/org/violetmoon/zeta/advancement/modifier/$WaxModifier" {
import {$AdvancementModifier, $AdvancementModifier$Type} from "packages/org/violetmoon/zeta/advancement/$AdvancementModifier"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$IMutableAdvancement, $IMutableAdvancement$Type} from "packages/org/violetmoon/zeta/api/$IMutableAdvancement"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $WaxModifier extends $AdvancementModifier {
readonly "module": $ZetaModule

constructor(arg0: $ZetaModule$Type, arg1: $Set$Type<($Block$Type)>, arg2: $Set$Type<($Block$Type)>)

public "apply"(arg0: $ResourceLocation$Type, arg1: $IMutableAdvancement$Type): boolean
public "getTargets"(): $Set<($ResourceLocation)>
get "targets"(): $Set<($ResourceLocation)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WaxModifier$Type = ($WaxModifier);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WaxModifier_ = $WaxModifier$Type;
}}
declare module "packages/org/violetmoon/quark/addons/oddities/block/$MovingMagnetizedBlock" {
import {$EntityBlock, $EntityBlock$Type} from "packages/net/minecraft/world/level/block/$EntityBlock"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Mirror, $Mirror$Type} from "packages/net/minecraft/world/level/block/$Mirror"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$PathComputationType, $PathComputationType$Type} from "packages/net/minecraft/world/level/pathfinder/$PathComputationType"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$List, $List$Type} from "packages/java/util/$List"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$ZetaBlock, $ZetaBlock$Type} from "packages/org/violetmoon/zeta/block/$ZetaBlock"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$DirectionProperty, $DirectionProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$DirectionProperty"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$CollisionContext, $CollisionContext$Type} from "packages/net/minecraft/world/phys/shapes/$CollisionContext"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$LootParams$Builder, $LootParams$Builder$Type} from "packages/net/minecraft/world/level/storage/loot/$LootParams$Builder"
import {$Rotation, $Rotation$Type} from "packages/net/minecraft/world/level/block/$Rotation"
import {$BlockEntityTicker, $BlockEntityTicker$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityTicker"
import {$GameEventListener, $GameEventListener$Type} from "packages/net/minecraft/world/level/gameevent/$GameEventListener"
import {$RenderShape, $RenderShape$Type} from "packages/net/minecraft/world/level/block/$RenderShape"

export class $MovingMagnetizedBlock extends $ZetaBlock implements $EntityBlock {
static readonly "FACING": $DirectionProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(arg0: $ZetaModule$Type)

public "getTicker"<T extends $BlockEntity>(arg0: $Level$Type, arg1: $BlockState$Type, arg2: $BlockEntityType$Type<(T)>): $BlockEntityTicker<(T)>
public "getCloneItemStack"(arg0: $BlockGetter$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type): $ItemStack
public "isPathfindable"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $PathComputationType$Type): boolean
public "use"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type, arg3: $Player$Type, arg4: $InteractionHand$Type, arg5: $BlockHitResult$Type): $InteractionResult
public "getRenderShape"(arg0: $BlockState$Type): $RenderShape
public "useShapeForLightOcclusion"(arg0: $BlockState$Type): boolean
public "onRemove"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type, arg3: $BlockState$Type, arg4: boolean): void
public "rotate"(arg0: $BlockState$Type, arg1: $Rotation$Type): $BlockState
public "mirror"(arg0: $BlockState$Type, arg1: $Mirror$Type): $BlockState
public "getDrops"(arg0: $BlockState$Type, arg1: $LootParams$Builder$Type): $List<($ItemStack)>
public "getCollisionShape"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $CollisionContext$Type): $VoxelShape
public "getShape"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $CollisionContext$Type): $VoxelShape
public "newBlockEntity"(arg0: $BlockPos$Type, arg1: $BlockState$Type): $BlockEntity
public "getListener"<T extends $BlockEntity>(arg0: $ServerLevel$Type, arg1: T): $GameEventListener
public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MovingMagnetizedBlock$Type = ($MovingMagnetizedBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MovingMagnetizedBlock_ = $MovingMagnetizedBlock$Type;
}}
declare module "packages/org/violetmoon/quark/content/tweaks/module/$HorsesSwimModule" {
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ZLivingTick, $ZLivingTick$Type} from "packages/org/violetmoon/zeta/event/play/entity/living/$ZLivingTick"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $HorsesSwimModule extends $ZetaModule {
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "tick"(arg0: $ZLivingTick$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $HorsesSwimModule$Type = ($HorsesSwimModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $HorsesSwimModule_ = $HorsesSwimModule$Type;
}}
declare module "packages/org/violetmoon/quark/content/world/module/$SpiralSpiresModule" {
import {$ZGatherHints, $ZGatherHints$Type} from "packages/org/violetmoon/zeta/event/play/loading/$ZGatherHints"
import {$ZCommonSetup, $ZCommonSetup$Type} from "packages/org/violetmoon/zeta/event/load/$ZCommonSetup"
import {$CompoundBiomeConfig, $CompoundBiomeConfig$Type} from "packages/org/violetmoon/zeta/config/type/$CompoundBiomeConfig"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$DimensionConfig, $DimensionConfig$Type} from "packages/org/violetmoon/zeta/config/type/$DimensionConfig"
import {$ZRegister, $ZRegister$Type} from "packages/org/violetmoon/zeta/event/load/$ZRegister"
import {$ZEntityTeleport, $ZEntityTeleport$Type} from "packages/org/violetmoon/zeta/event/play/entity/$ZEntityTeleport"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ManualTrigger, $ManualTrigger$Type} from "packages/org/violetmoon/zeta/advancement/$ManualTrigger"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"

export class $SpiralSpiresModule extends $ZetaModule {
static "dimensions": $DimensionConfig
static "biomes": $CompoundBiomeConfig
static "rarity": integer
static "radius": integer
static "enableMyaliteViaducts": boolean
static "myaliteConduitDistance": integer
static "renewableMyalite": boolean
static "useViaductTrigger": $ManualTrigger
static "dusky_myalite": $Block
static "myalite_crystal": $Block
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "register"(arg0: $ZRegister$Type): void
public "setup"(arg0: $ZCommonSetup$Type): void
public "addAdditionalHints"(arg0: $ZGatherHints$Type): void
public "onTeleport"(arg0: $ZEntityTeleport$Type): void
set "up"(value: $ZCommonSetup$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SpiralSpiresModule$Type = ($SpiralSpiresModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SpiralSpiresModule_ = $SpiralSpiresModule$Type;
}}
declare module "packages/org/violetmoon/quark/content/experimental/module/$OverlayShaderModule" {
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $OverlayShaderModule extends $ZetaModule {
 "shader": string
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $OverlayShaderModule$Type = ($OverlayShaderModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $OverlayShaderModule_ = $OverlayShaderModule$Type;
}}
declare module "packages/org/violetmoon/zetaimplforge/event/play/loading/$ForgeZLootTableLoad" {
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$LootTableLoadEvent, $LootTableLoadEvent$Type} from "packages/net/minecraftforge/event/$LootTableLoadEvent"
import {$LootPoolEntryContainer, $LootPoolEntryContainer$Type} from "packages/net/minecraft/world/level/storage/loot/entries/$LootPoolEntryContainer"
import {$ZLootTableLoad, $ZLootTableLoad$Type} from "packages/org/violetmoon/zeta/event/play/loading/$ZLootTableLoad"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$LootTable, $LootTable$Type} from "packages/net/minecraft/world/level/storage/loot/$LootTable"

export class $ForgeZLootTableLoad extends $Record implements $ZLootTableLoad {

constructor(e: $LootTableLoadEvent$Type)

public "getName"(): $ResourceLocation
public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "e"(): $LootTableLoadEvent
public "getTable"(): $LootTable
public "setCanceled"(arg0: boolean): void
public "isCanceled"(): boolean
public "setTable"(arg0: $LootTable$Type): void
public "add"(arg0: $LootPoolEntryContainer$Type): void
public "cancel"(): void
get "name"(): $ResourceLocation
get "table"(): $LootTable
set "canceled"(value: boolean)
get "canceled"(): boolean
set "table"(value: $LootTable$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ForgeZLootTableLoad$Type = ($ForgeZLootTableLoad);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ForgeZLootTableLoad_ = $ForgeZLootTableLoad$Type;
}}
declare module "packages/org/violetmoon/quark/content/tools/block/$CloudBlock" {
import {$EntityBlock, $EntityBlock$Type} from "packages/net/minecraft/world/level/block/$EntityBlock"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$PushReaction, $PushReaction$Type} from "packages/net/minecraft/world/level/material/$PushReaction"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$ZetaBlock, $ZetaBlock$Type} from "packages/org/violetmoon/zeta/block/$ZetaBlock"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$BlockEntityTicker, $BlockEntityTicker$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityTicker"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$GameEventListener, $GameEventListener$Type} from "packages/net/minecraft/world/level/gameevent/$GameEventListener"

export class $CloudBlock extends $ZetaBlock implements $EntityBlock {
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(arg0: $ZetaModule$Type)

public "getTicker"<T extends $BlockEntity>(arg0: $Level$Type, arg1: $BlockState$Type, arg2: $BlockEntityType$Type<(T)>): $BlockEntityTicker<(T)>
public "getCloneItemStack"(arg0: $BlockGetter$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type): $ItemStack
public "getPistonPushReaction"(arg0: $BlockState$Type): $PushReaction
public "use"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type, arg3: $Player$Type, arg4: $InteractionHand$Type, arg5: $BlockHitResult$Type): $InteractionResult
public "newBlockEntity"(arg0: $BlockPos$Type, arg1: $BlockState$Type): $BlockEntity
public "getListener"<T extends $BlockEntity>(arg0: $ServerLevel$Type, arg1: T): $GameEventListener
public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CloudBlock$Type = ($CloudBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CloudBlock_ = $CloudBlock$Type;
}}
declare module "packages/org/violetmoon/quark/base/item/boat/$QuarkBoatItem" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$InteractionResultHolder, $InteractionResultHolder$Type} from "packages/net/minecraft/world/$InteractionResultHolder"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$ZetaItem, $ZetaItem$Type} from "packages/org/violetmoon/zeta/item/$ZetaItem"

export class $QuarkBoatItem extends $ZetaItem {
readonly "type": string
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: string, arg1: $ZetaModule$Type, arg2: boolean)

public "use"(arg0: $Level$Type, arg1: $Player$Type, arg2: $InteractionHand$Type): $InteractionResultHolder<($ItemStack)>
public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $QuarkBoatItem$Type = ($QuarkBoatItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $QuarkBoatItem_ = $QuarkBoatItem$Type;
}}
declare module "packages/org/violetmoon/quark/content/building/module/$LeafCarpetModule" {
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ZRegister, $ZRegister$Type} from "packages/org/violetmoon/zeta/event/load/$ZRegister"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ZLoadComplete, $ZLoadComplete$Type} from "packages/org/violetmoon/zeta/event/load/$ZLoadComplete"
import {$LeafCarpetBlock, $LeafCarpetBlock$Type} from "packages/org/violetmoon/quark/content/building/block/$LeafCarpetBlock"
import {$ZRegister$Post, $ZRegister$Post$Type} from "packages/org/violetmoon/zeta/event/load/$ZRegister$Post"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $LeafCarpetModule extends $ZetaModule {
static "carpets": $List<($LeafCarpetBlock)>
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "register"(arg0: $ZRegister$Type): void
public "postRegister"(arg0: $ZRegister$Post$Type): void
public "loadComplete"(arg0: $ZLoadComplete$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LeafCarpetModule$Type = ($LeafCarpetModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LeafCarpetModule_ = $LeafCarpetModule$Type;
}}
declare module "packages/org/violetmoon/quark/content/building/block/$SoulFurnaceBlock" {
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$VariantFurnaceBlock, $VariantFurnaceBlock$Type} from "packages/org/violetmoon/quark/content/building/block/$VariantFurnaceBlock"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"
import {$DirectionProperty, $DirectionProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$DirectionProperty"

export class $SoulFurnaceBlock extends $VariantFurnaceBlock {
static readonly "SOUL": $BooleanProperty
static readonly "FACING": $DirectionProperty
static readonly "LIT": $BooleanProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(arg0: string, arg1: $ZetaModule$Type, arg2: $BlockBehaviour$Properties$Type)

public "getStateForPlacement"(arg0: $BlockPlaceContext$Type): $BlockState
public "updateShape"(arg0: $BlockState$Type, arg1: $Direction$Type, arg2: $BlockState$Type, arg3: $LevelAccessor$Type, arg4: $BlockPos$Type, arg5: $BlockPos$Type): $BlockState
public "animateTick"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type, arg3: $RandomSource$Type): void
public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SoulFurnaceBlock$Type = ($SoulFurnaceBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SoulFurnaceBlock_ = $SoulFurnaceBlock$Type;
}}
declare module "packages/org/violetmoon/quark/integration/jei/$QuarkJeiPlugin" {
import {$IGuiHandlerRegistration, $IGuiHandlerRegistration$Type} from "packages/mezz/jei/api/registration/$IGuiHandlerRegistration"
import {$IJeiConfigManager, $IJeiConfigManager$Type} from "packages/mezz/jei/api/runtime/config/$IJeiConfigManager"
import {$IAdvancedRegistration, $IAdvancedRegistration$Type} from "packages/mezz/jei/api/registration/$IAdvancedRegistration"
import {$IVanillaCategoryExtensionRegistration, $IVanillaCategoryExtensionRegistration$Type} from "packages/mezz/jei/api/registration/$IVanillaCategoryExtensionRegistration"
import {$RecipeType, $RecipeType$Type} from "packages/mezz/jei/api/recipe/$RecipeType"
import {$InfluenceEntry, $InfluenceEntry$Type} from "packages/org/violetmoon/quark/integration/jei/$InfluenceEntry"
import {$IRecipeTransferRegistration, $IRecipeTransferRegistration$Type} from "packages/mezz/jei/api/registration/$IRecipeTransferRegistration"
import {$IRecipeRegistration, $IRecipeRegistration$Type} from "packages/mezz/jei/api/registration/$IRecipeRegistration"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$IJeiRuntime, $IJeiRuntime$Type} from "packages/mezz/jei/api/runtime/$IJeiRuntime"
import {$IRecipeCatalystRegistration, $IRecipeCatalystRegistration$Type} from "packages/mezz/jei/api/registration/$IRecipeCatalystRegistration"
import {$IModPlugin, $IModPlugin$Type} from "packages/mezz/jei/api/$IModPlugin"
import {$IRuntimeRegistration, $IRuntimeRegistration$Type} from "packages/mezz/jei/api/registration/$IRuntimeRegistration"
import {$IRecipeCategoryRegistration, $IRecipeCategoryRegistration$Type} from "packages/mezz/jei/api/registration/$IRecipeCategoryRegistration"
import {$IModIngredientRegistration, $IModIngredientRegistration$Type} from "packages/mezz/jei/api/registration/$IModIngredientRegistration"
import {$ISubtypeRegistration, $ISubtypeRegistration$Type} from "packages/mezz/jei/api/registration/$ISubtypeRegistration"
import {$IPlatformFluidHelper, $IPlatformFluidHelper$Type} from "packages/mezz/jei/api/helpers/$IPlatformFluidHelper"

export class $QuarkJeiPlugin implements $IModPlugin {
static readonly "INFLUENCING": $RecipeType<($InfluenceEntry)>

constructor()

public "registerItemSubtypes"(arg0: $ISubtypeRegistration$Type): void
public "registerVanillaCategoryExtensions"(arg0: $IVanillaCategoryExtensionRegistration$Type): void
public "registerGuiHandlers"(arg0: $IGuiHandlerRegistration$Type): void
public "registerRecipeTransferHandlers"(arg0: $IRecipeTransferRegistration$Type): void
public "registerRecipeCatalysts"(arg0: $IRecipeCatalystRegistration$Type): void
public "getPluginUid"(): $ResourceLocation
public "registerRecipes"(arg0: $IRecipeRegistration$Type): void
public "onRuntimeAvailable"(arg0: $IJeiRuntime$Type): void
public "registerCategories"(arg0: $IRecipeCategoryRegistration$Type): void
public "registerFluidSubtypes"<T>(arg0: $ISubtypeRegistration$Type, arg1: $IPlatformFluidHelper$Type<(T)>): void
public "onConfigManagerAvailable"(arg0: $IJeiConfigManager$Type): void
public "onRuntimeUnavailable"(): void
public "registerIngredients"(arg0: $IModIngredientRegistration$Type): void
public "registerAdvanced"(arg0: $IAdvancedRegistration$Type): void
public "registerRuntime"(arg0: $IRuntimeRegistration$Type): void
get "pluginUid"(): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $QuarkJeiPlugin$Type = ($QuarkJeiPlugin);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $QuarkJeiPlugin_ = $QuarkJeiPlugin$Type;
}}
declare module "packages/org/violetmoon/quark/addons/oddities/block/be/$PipeBlockEntity$ConnectionType" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$PipeBlockEntity, $PipeBlockEntity$Type} from "packages/org/violetmoon/quark/addons/oddities/block/be/$PipeBlockEntity"

export class $PipeBlockEntity$ConnectionType extends $Enum<($PipeBlockEntity$ConnectionType)> {
static readonly "NONE": $PipeBlockEntity$ConnectionType
static readonly "PIPE": $PipeBlockEntity$ConnectionType
static readonly "OPENING": $PipeBlockEntity$ConnectionType
static readonly "TERMINAL": $PipeBlockEntity$ConnectionType
static readonly "TERMINAL_OFFSET": $PipeBlockEntity$ConnectionType
readonly "isSolid": boolean
readonly "allowsItems": boolean
readonly "isFlared": boolean


public static "values"(): ($PipeBlockEntity$ConnectionType)[]
public static "valueOf"(arg0: string): $PipeBlockEntity$ConnectionType
public "getFlareShift"(arg0: $PipeBlockEntity$Type): double
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PipeBlockEntity$ConnectionType$Type = (("pipe") | ("none") | ("terminal") | ("opening") | ("terminal_offset")) | ($PipeBlockEntity$ConnectionType);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PipeBlockEntity$ConnectionType_ = $PipeBlockEntity$ConnectionType$Type;
}}
declare module "packages/org/violetmoon/quark/content/world/block/$ChorusVegetationBlock" {
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$IForgeShearable, $IForgeShearable$Type} from "packages/net/minecraftforge/common/$IForgeShearable"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$PathComputationType, $PathComputationType$Type} from "packages/net/minecraft/world/level/pathfinder/$PathComputationType"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$List, $List$Type} from "packages/java/util/$List"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$ZetaBlock, $ZetaBlock$Type} from "packages/org/violetmoon/zeta/block/$ZetaBlock"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$CollisionContext, $CollisionContext$Type} from "packages/net/minecraft/world/phys/shapes/$CollisionContext"
import {$BonemealableBlock, $BonemealableBlock$Type} from "packages/net/minecraft/world/level/block/$BonemealableBlock"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"

export class $ChorusVegetationBlock extends $ZetaBlock implements $BonemealableBlock, $IForgeShearable {
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(arg0: string, arg1: $ZetaModule$Type, arg2: boolean)

public "isPathfindable"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $PathComputationType$Type): boolean
public "neighborChanged"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type, arg3: $Block$Type, arg4: $BlockPos$Type, arg5: boolean): void
public "updateShape"(arg0: $BlockState$Type, arg1: $Direction$Type, arg2: $BlockState$Type, arg3: $LevelAccessor$Type, arg4: $BlockPos$Type, arg5: $BlockPos$Type): $BlockState
public "canSurvive"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type): boolean
public "randomTick"(arg0: $BlockState$Type, arg1: $ServerLevel$Type, arg2: $BlockPos$Type, arg3: $RandomSource$Type): void
public "getShape"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $CollisionContext$Type): $VoxelShape
public "entityInside"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): void
public "animateTick"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type, arg3: $RandomSource$Type): void
public "isValidBonemealTarget"(arg0: $LevelReader$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: boolean): boolean
public "isBonemealSuccess"(arg0: $Level$Type, arg1: $RandomSource$Type, arg2: $BlockPos$Type, arg3: $BlockState$Type): boolean
public "performBonemeal"(arg0: $ServerLevel$Type, arg1: $RandomSource$Type, arg2: $BlockPos$Type, arg3: $BlockState$Type): void
public "isShearable"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $BlockPos$Type): boolean
public "onSheared"(arg0: $Player$Type, arg1: $ItemStack$Type, arg2: $Level$Type, arg3: $BlockPos$Type, arg4: integer): $List<($ItemStack)>
public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ChorusVegetationBlock$Type = ($ChorusVegetationBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ChorusVegetationBlock_ = $ChorusVegetationBlock$Type;
}}
declare module "packages/org/violetmoon/zeta/recipe/$IZetaCondition$IContext" {
import {$Holder, $Holder$Type} from "packages/net/minecraft/core/$Holder"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$ResourceKey, $ResourceKey$Type} from "packages/net/minecraft/resources/$ResourceKey"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export interface $IZetaCondition$IContext {

 "getTag"<T>(arg0: $TagKey$Type<(T)>): $Collection<($Holder<(T)>)>
 "getAllTags"<T>(arg0: $ResourceKey$Type<(any)>): $Map<($ResourceLocation), ($Collection<($Holder<(T)>)>)>

(arg0: $TagKey$Type<(T)>): $Collection<($Holder<(T)>)>
}

export namespace $IZetaCondition$IContext {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IZetaCondition$IContext$Type = ($IZetaCondition$IContext);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IZetaCondition$IContext_ = $IZetaCondition$IContext$Type;
}}
declare module "packages/org/violetmoon/quark/content/automation/block/be/$FeedingTroughBlockEntity$FeedResult" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $FeedingTroughBlockEntity$FeedResult extends $Enum<($FeedingTroughBlockEntity$FeedResult)> {
static readonly "FED": $FeedingTroughBlockEntity$FeedResult
static readonly "SECS": $FeedingTroughBlockEntity$FeedResult
static readonly "NONE": $FeedingTroughBlockEntity$FeedResult


public static "values"(): ($FeedingTroughBlockEntity$FeedResult)[]
public static "valueOf"(arg0: string): $FeedingTroughBlockEntity$FeedResult
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FeedingTroughBlockEntity$FeedResult$Type = (("fed") | ("secs") | ("none")) | ($FeedingTroughBlockEntity$FeedResult);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FeedingTroughBlockEntity$FeedResult_ = $FeedingTroughBlockEntity$FeedResult$Type;
}}
declare module "packages/org/violetmoon/zeta/block/ext/$CustomWeatheringCopper" {
import {$WeatheringCopper, $WeatheringCopper$Type} from "packages/net/minecraft/world/level/block/$WeatheringCopper"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$WeatheringCopper$WeatherState, $WeatheringCopper$WeatherState$Type} from "packages/net/minecraft/world/level/block/$WeatheringCopper$WeatherState"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"

export interface $CustomWeatheringCopper extends $WeatheringCopper {

 "getFirst"(arg0: $BlockState$Type): $BlockState
 "getPrevious"(arg0: $BlockState$Type): $Optional<($BlockState)>
 "getChanceModifier"(): float
 "getNext"(arg0: $BlockState$Type): $Optional<($BlockState)>
 "onRandomTick"(arg0: $BlockState$Type, arg1: $ServerLevel$Type, arg2: $BlockPos$Type, arg3: $RandomSource$Type): void
 "getAge"(): $WeatheringCopper$WeatherState
 "applyChangeOverTime"(arg0: $BlockState$Type, arg1: $ServerLevel$Type, arg2: $BlockPos$Type, arg3: $RandomSource$Type): void

(arg0: $BlockState$Type): $BlockState
}

export namespace $CustomWeatheringCopper {
function getNext(arg0: $Block$Type): $Optional<($Block)>
function getPrevious(arg0: $Block$Type): $Optional<($Block)>
function getFirst(arg0: $Block$Type): $Block
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CustomWeatheringCopper$Type = ($CustomWeatheringCopper);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CustomWeatheringCopper_ = $CustomWeatheringCopper$Type;
}}
declare module "packages/org/violetmoon/zetaimplforge/client/event/play/$ForgeZRenderPlayer" {
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$RenderPlayerEvent, $RenderPlayerEvent$Type} from "packages/net/minecraftforge/client/event/$RenderPlayerEvent"
import {$PlayerRenderer, $PlayerRenderer$Type} from "packages/net/minecraft/client/renderer/entity/player/$PlayerRenderer"
import {$ZRenderPlayer, $ZRenderPlayer$Type} from "packages/org/violetmoon/zeta/client/event/play/$ZRenderPlayer"

export class $ForgeZRenderPlayer implements $ZRenderPlayer {

constructor(arg0: $RenderPlayerEvent$Type)

public "getPartialTick"(): float
public "getPoseStack"(): $PoseStack
public "getMultiBufferSource"(): $MultiBufferSource
public "getEntity"(): $Player
public "getPackedLight"(): integer
public "getRenderer"(): $PlayerRenderer
get "partialTick"(): float
get "poseStack"(): $PoseStack
get "multiBufferSource"(): $MultiBufferSource
get "entity"(): $Player
get "packedLight"(): integer
get "renderer"(): $PlayerRenderer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ForgeZRenderPlayer$Type = ($ForgeZRenderPlayer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ForgeZRenderPlayer_ = $ForgeZRenderPlayer$Type;
}}
declare module "packages/org/violetmoon/zeta/network/$ZetaNetworkDirection" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $ZetaNetworkDirection extends $Enum<($ZetaNetworkDirection)> {
static readonly "PLAY_TO_SERVER": $ZetaNetworkDirection
static readonly "PLAY_TO_CLIENT": $ZetaNetworkDirection
static readonly "LOGIN_TO_SERVER": $ZetaNetworkDirection
static readonly "LOGIN_TO_CLIENT": $ZetaNetworkDirection


public static "values"(): ($ZetaNetworkDirection)[]
public static "valueOf"(arg0: string): $ZetaNetworkDirection
public "isLogin"(): boolean
get "login"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZetaNetworkDirection$Type = (("play_to_server") | ("login_to_client") | ("play_to_client") | ("login_to_server")) | ($ZetaNetworkDirection);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZetaNetworkDirection_ = $ZetaNetworkDirection$Type;
}}
declare module "packages/org/violetmoon/quark/content/mobs/ai/$FetchArrowGoal" {
import {$Goal, $Goal$Type} from "packages/net/minecraft/world/entity/ai/goal/$Goal"
import {$Shiba, $Shiba$Type} from "packages/org/violetmoon/quark/content/mobs/entity/$Shiba"

export class $FetchArrowGoal extends $Goal {

constructor(arg0: $Shiba$Type)

public "canUse"(): boolean
public "canContinueToUse"(): boolean
public "tick"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FetchArrowGoal$Type = ($FetchArrowGoal);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FetchArrowGoal_ = $FetchArrowGoal$Type;
}}
declare module "packages/org/violetmoon/zeta/client/event/play/$ZInputUpdate" {
import {$IZetaPlayEvent, $IZetaPlayEvent$Type} from "packages/org/violetmoon/zeta/event/bus/$IZetaPlayEvent"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$Input, $Input$Type} from "packages/net/minecraft/client/player/$Input"

export interface $ZInputUpdate extends $IZetaPlayEvent {

 "getInput"(): $Input
 "getEntity"(): $Player
}

export namespace $ZInputUpdate {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZInputUpdate$Type = ($ZInputUpdate);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZInputUpdate_ = $ZInputUpdate$Type;
}}
declare module "packages/org/violetmoon/quark/content/automation/module/$GravisandModule" {
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Gravisand, $Gravisand$Type} from "packages/org/violetmoon/quark/content/automation/entity/$Gravisand"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$ZRegister, $ZRegister$Type} from "packages/org/violetmoon/zeta/event/load/$ZRegister"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $GravisandModule extends $ZetaModule {
static "gravisandType": $EntityType<($Gravisand)>
static "gravisand": $Block
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "register"(arg0: $ZRegister$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GravisandModule$Type = ($GravisandModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GravisandModule_ = $GravisandModule$Type;
}}
declare module "packages/org/violetmoon/quark/addons/oddities/inventory/slot/$CachedItemHandlerSlot" {
import {$AbstractContainerMenu, $AbstractContainerMenu$Type} from "packages/net/minecraft/world/inventory/$AbstractContainerMenu"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$IItemHandler, $IItemHandler$Type} from "packages/net/minecraftforge/items/$IItemHandler"
import {$SlotItemHandler, $SlotItemHandler$Type} from "packages/net/minecraftforge/items/$SlotItemHandler"

export class $CachedItemHandlerSlot extends $SlotItemHandler {
readonly "container": $Container
 "index": integer
 "x": integer
 "y": integer

constructor(arg0: $IItemHandler$Type, arg1: integer, arg2: integer, arg3: integer)

public static "cache"(arg0: $AbstractContainerMenu$Type): void
public static "applyCache"(arg0: $AbstractContainerMenu$Type): void
public "remove"(arg0: integer): $ItemStack
public "getItem"(): $ItemStack
public "set"(arg0: $ItemStack$Type): void
get "item"(): $ItemStack
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CachedItemHandlerSlot$Type = ($CachedItemHandlerSlot);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CachedItemHandlerSlot_ = $CachedItemHandlerSlot$Type;
}}
declare module "packages/org/violetmoon/quark/content/tweaks/module/$ReacharoundPlacingModule" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$ZCommonSetup, $ZCommonSetup$Type} from "packages/org/violetmoon/zeta/event/load/$ZCommonSetup"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ZRightClickItem, $ZRightClickItem$Type} from "packages/org/violetmoon/zeta/event/play/entity/player/$ZRightClickItem"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $ReacharoundPlacingModule extends $ZetaModule {
static readonly "OVERLAY_HORIZONTAL": $ResourceLocation
static readonly "OVERLAY_VERTICAL": $ResourceLocation
 "leniency": double
 "whitelist": $List<(string)>
 "blacklist": $List<(string)>
static "reacharoundTag": $TagKey<($Item)>
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "setup"(arg0: $ZCommonSetup$Type): void
public "onRightClick"(arg0: $ZRightClickItem$Type): void
set "up"(value: $ZCommonSetup$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ReacharoundPlacingModule$Type = ($ReacharoundPlacingModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ReacharoundPlacingModule_ = $ReacharoundPlacingModule$Type;
}}
declare module "packages/org/violetmoon/quark/content/building/client/render/entity/$StoolEntityRenderer" {
import {$EntityRendererProvider$Context, $EntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRendererProvider$Context"
import {$EntityRenderer, $EntityRenderer$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRenderer"
import {$Stool, $Stool$Type} from "packages/org/violetmoon/quark/content/building/entity/$Stool"
import {$Frustum, $Frustum$Type} from "packages/net/minecraft/client/renderer/culling/$Frustum"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $StoolEntityRenderer extends $EntityRenderer<($Stool)> {
 "shadowRadius": float

constructor(arg0: $EntityRendererProvider$Context$Type)

public "shouldRender"(arg0: $Stool$Type, arg1: $Frustum$Type, arg2: double, arg3: double, arg4: double): boolean
public "getTextureLocation"(arg0: $Stool$Type): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $StoolEntityRenderer$Type = ($StoolEntityRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $StoolEntityRenderer_ = $StoolEntityRenderer$Type;
}}
declare module "packages/org/violetmoon/zetaimplforge/block/$IForgeBlockBlockExtensions" {
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$FluidState, $FluidState$Type} from "packages/net/minecraft/world/level/material/$FluidState"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$UseOnContext, $UseOnContext$Type} from "packages/net/minecraft/world/item/context/$UseOnContext"
import {$SoundType, $SoundType$Type} from "packages/net/minecraft/world/level/block/$SoundType"
import {$IZetaBlockExtensions, $IZetaBlockExtensions$Type} from "packages/org/violetmoon/zeta/block/ext/$IZetaBlockExtensions"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockAndTintGetter, $BlockAndTintGetter$Type} from "packages/net/minecraft/world/level/$BlockAndTintGetter"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $IForgeBlockBlockExtensions implements $IZetaBlockExtensions {
static readonly "INSTANCE": $IForgeBlockBlockExtensions

constructor()

public "isConduitFrameZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): boolean
public "isLadderZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "isStickyBlockZeta"(arg0: $BlockState$Type): boolean
public "isScaffoldingZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "canStickToZeta"(arg0: $BlockState$Type, arg1: $BlockState$Type): boolean
public "isFlammableZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): boolean
public "getSoundTypeZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): $SoundType
public "makesOpenTrapdoorAboveClimbableZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockState$Type): boolean
public "canSustainPlantZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type, arg4: string): boolean
public "getFireSpreadSpeedZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "getToolModifiedStateZeta"(arg0: $BlockState$Type, arg1: $UseOnContext$Type, arg2: string, arg3: boolean): $BlockState
public "collisionExtendsVerticallyZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): boolean
public "shouldDisplayFluidOverlayZeta"(arg0: $BlockState$Type, arg1: $BlockAndTintGetter$Type, arg2: $BlockPos$Type, arg3: $FluidState$Type): boolean
public "getEnchantPowerBonusZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type): float
public "getBeaconColorMultiplierZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): (float)[]
public "getFlammabilityZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "getLightEmissionZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IForgeBlockBlockExtensions$Type = ($IForgeBlockBlockExtensions);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IForgeBlockBlockExtensions_ = $IForgeBlockBlockExtensions$Type;
}}
declare module "packages/org/violetmoon/zeta/config/$ZetaGeneralConfig" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$ZConfigChanged, $ZConfigChanged$Type} from "packages/org/violetmoon/zeta/event/load/$ZConfigChanged"

export class $ZetaGeneralConfig {
static readonly "INSTANCE": $ZetaGeneralConfig
static "useAntiOverlap": boolean
static "usePistonLogicRepl": boolean
static "pistonPushLimit": integer
static "hideDisabledContent": boolean
static "enableJeiItemInfo": boolean
static "suppressedInfo": $List<(string)>
static "enableAdvancementModification": boolean
static "enableModdedAdvancements": boolean
static "enableWorldgenWatchdog": boolean
static "useFastWorldgen": boolean
static "enableCreativeVerboseLogging": boolean
static "forceCreativeTabAppends": boolean


public static "configChanged"(arg0: $ZConfigChanged$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZetaGeneralConfig$Type = ($ZetaGeneralConfig);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZetaGeneralConfig_ = $ZetaGeneralConfig$Type;
}}
declare module "packages/org/violetmoon/zeta/item/$ZetaArrowItem$Impl$ArrowCreator" {
import {$AbstractArrow, $AbstractArrow$Type} from "packages/net/minecraft/world/entity/projectile/$AbstractArrow"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export interface $ZetaArrowItem$Impl$ArrowCreator {

 "createArrow"(arg0: $Level$Type, arg1: $ItemStack$Type, arg2: $LivingEntity$Type): $AbstractArrow

(arg0: $Level$Type, arg1: $ItemStack$Type, arg2: $LivingEntity$Type): $AbstractArrow
}

export namespace $ZetaArrowItem$Impl$ArrowCreator {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZetaArrowItem$Impl$ArrowCreator$Type = ($ZetaArrowItem$Impl$ArrowCreator);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZetaArrowItem$Impl$ArrowCreator_ = $ZetaArrowItem$Impl$ArrowCreator$Type;
}}
declare module "packages/org/violetmoon/zeta/block/$ZetaWallHangingSignBlock" {
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$BooleanSupplier, $BooleanSupplier$Type} from "packages/java/util/function/$BooleanSupplier"
import {$WoodType, $WoodType$Type} from "packages/net/minecraft/world/level/block/state/properties/$WoodType"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$FluidState, $FluidState$Type} from "packages/net/minecraft/world/level/material/$FluidState"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$ToolAction, $ToolAction$Type} from "packages/net/minecraftforge/common/$ToolAction"
import {$IForgeBlock, $IForgeBlock$Type} from "packages/net/minecraftforge/common/extensions/$IForgeBlock"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$DirectionProperty, $DirectionProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$DirectionProperty"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$CreativeModeTab, $CreativeModeTab$Type} from "packages/net/minecraft/world/item/$CreativeModeTab"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$WallHangingSignBlock, $WallHangingSignBlock$Type} from "packages/net/minecraft/world/level/block/$WallHangingSignBlock"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$IZetaBlock, $IZetaBlock$Type} from "packages/org/violetmoon/zeta/block/$IZetaBlock"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$UseOnContext, $UseOnContext$Type} from "packages/net/minecraft/world/item/context/$UseOnContext"
import {$SoundType, $SoundType$Type} from "packages/net/minecraft/world/level/block/$SoundType"
import {$IPlantable, $IPlantable$Type} from "packages/net/minecraftforge/common/$IPlantable"
import {$IZetaBlockExtensions, $IZetaBlockExtensions$Type} from "packages/org/violetmoon/zeta/block/ext/$IZetaBlockExtensions"
import {$ResourceKey, $ResourceKey$Type} from "packages/net/minecraft/resources/$ResourceKey"
import {$ItemLike, $ItemLike$Type} from "packages/net/minecraft/world/level/$ItemLike"
import {$BlockAndTintGetter, $BlockAndTintGetter$Type} from "packages/net/minecraft/world/level/$BlockAndTintGetter"

export class $ZetaWallHangingSignBlock extends $WallHangingSignBlock implements $IZetaBlock, $IZetaBlockExtensions, $IForgeBlock {
static readonly "FACING": $DirectionProperty
static readonly "PLANK_NORTHSOUTH": $VoxelShape
static readonly "PLANK_EASTWEST": $VoxelShape
static readonly "SHAPE_NORTHSOUTH": $VoxelShape
static readonly "SHAPE_EASTWEST": $VoxelShape
static readonly "WATERLOGGED": $BooleanProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(arg0: string, arg1: $ZetaModule$Type, arg2: $WoodType$Type, arg3: $BlockBehaviour$Properties$Type)

public "getModule"(): $ZetaModule
public "canSustainPlant"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type, arg4: $IPlantable$Type): boolean
public "isLadder"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "isConduitFrame"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): boolean
public "doesConditionApply"(): boolean
public "setCondition"(arg0: $BooleanSupplier$Type): $ZetaWallHangingSignBlock
public "getEnchantPowerBonus"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type): float
public "shouldDisplayFluidOverlay"(arg0: $BlockState$Type, arg1: $BlockAndTintGetter$Type, arg2: $BlockPos$Type, arg3: $FluidState$Type): boolean
public "getToolModifiedState"(arg0: $BlockState$Type, arg1: $UseOnContext$Type, arg2: $ToolAction$Type, arg3: boolean): $BlockState
public "getBeaconColorMultiplier"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): (float)[]
public "makesOpenTrapdoorAboveClimbable"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockState$Type): boolean
public "getSoundType"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): $SoundType
public "isScaffolding"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "getLightEmission"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type): integer
public "isFlammable"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): boolean
public "canStickTo"(arg0: $BlockState$Type, arg1: $BlockState$Type): boolean
public "getFireSpreadSpeed"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "getFlammability"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "isStickyBlock"(arg0: $BlockState$Type): boolean
public "collisionExtendsVertically"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): boolean
public "getBlock"(): $Block
public "getFireSpreadSpeedZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "getFlammabilityZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "setCreativeTab"(arg0: $ResourceKey$Type<($CreativeModeTab$Type)>): $Block
public "setCreativeTab"(arg0: $ResourceKey$Type<($CreativeModeTab$Type)>, arg1: $ItemLike$Type, arg2: boolean): $Block
public "isConduitFrameZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): boolean
public "isLadderZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "isStickyBlockZeta"(arg0: $BlockState$Type): boolean
public "isScaffoldingZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "canStickToZeta"(arg0: $BlockState$Type, arg1: $BlockState$Type): boolean
public "isFlammableZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): boolean
public "getSoundTypeZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): $SoundType
public "makesOpenTrapdoorAboveClimbableZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockState$Type): boolean
public "canSustainPlantZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type, arg4: string): boolean
public "getToolModifiedStateZeta"(arg0: $BlockState$Type, arg1: $UseOnContext$Type, arg2: string, arg3: boolean): $BlockState
public "collisionExtendsVerticallyZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): boolean
public "shouldDisplayFluidOverlayZeta"(arg0: $BlockState$Type, arg1: $BlockAndTintGetter$Type, arg2: $BlockPos$Type, arg3: $FluidState$Type): boolean
public "getEnchantPowerBonusZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type): float
public "getBeaconColorMultiplierZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): (float)[]
public "getLightEmissionZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type): integer
public "isEnabled"(): boolean
public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
get "module"(): $ZetaModule
set "condition"(value: $BooleanSupplier$Type)
get "block"(): $Block
set "creativeTab"(value: $ResourceKey$Type<($CreativeModeTab$Type)>)
get "enabled"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZetaWallHangingSignBlock$Type = ($ZetaWallHangingSignBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZetaWallHangingSignBlock_ = $ZetaWallHangingSignBlock$Type;
}}
declare module "packages/org/violetmoon/quark/content/tools/module/$BeaconRedirectionModule$ExtendedBeamSegment" {
import {$Vec3i, $Vec3i$Type} from "packages/net/minecraft/core/$Vec3i"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$BeaconBlockEntity$BeaconBeamSection, $BeaconBlockEntity$BeaconBeamSection$Type} from "packages/net/minecraft/world/level/block/entity/$BeaconBlockEntity$BeaconBeamSection"

export class $BeaconRedirectionModule$ExtendedBeamSegment extends $BeaconBlockEntity$BeaconBeamSection {
readonly "dir": $Direction
readonly "offset": $Vec3i
readonly "alpha": float
 "height": integer

constructor(arg0: $Direction$Type, arg1: $Vec3i$Type, arg2: (float)[], arg3: float)

public "isTurn"(): boolean
public "setHeight"(arg0: integer): void
public "m_58719_"(): void
public "makeTurn"(): void
get "turn"(): boolean
set "height"(value: integer)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BeaconRedirectionModule$ExtendedBeamSegment$Type = ($BeaconRedirectionModule$ExtendedBeamSegment);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BeaconRedirectionModule$ExtendedBeamSegment_ = $BeaconRedirectionModule$ExtendedBeamSegment$Type;
}}
declare module "packages/org/violetmoon/quark/content/building/module/$CelebratoryLampsModule" {
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$ZRegister, $ZRegister$Type} from "packages/org/violetmoon/zeta/event/load/$ZRegister"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $CelebratoryLampsModule extends $ZetaModule {
static "lightLevel": integer
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "register"(arg0: $ZRegister$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CelebratoryLampsModule$Type = ($CelebratoryLampsModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CelebratoryLampsModule_ = $CelebratoryLampsModule$Type;
}}
declare module "packages/org/violetmoon/quark/addons/oddities/client/screen/$BackpackInventoryScreen" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$InventoryMenu, $InventoryMenu$Type} from "packages/net/minecraft/world/inventory/$InventoryMenu"
import {$InventoryScreen, $InventoryScreen$Type} from "packages/net/minecraft/client/gui/screens/inventory/$InventoryScreen"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$IQuarkButtonAllowed, $IQuarkButtonAllowed$Type} from "packages/org/violetmoon/quark/api/$IQuarkButtonAllowed"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"

export class $BackpackInventoryScreen extends $InventoryScreen implements $IQuarkButtonAllowed {
 "xMouse": float
 "yMouse": float
static readonly "INVENTORY_LOCATION": $ResourceLocation
static readonly "SLOT_ITEM_BLIT_OFFSET": integer
 "imageWidth": integer
 "hoveredSlot": $Slot
 "leftPos": integer
 "topPos": integer
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering

constructor(arg0: $InventoryMenu$Type, arg1: $Inventory$Type, arg2: $Component$Type)

public "m_7856_"(): void
public "removed"(): void
public "containerTick"(): void
public static "setBackpackContainer"(arg0: $Player$Type, arg1: $InventoryMenu$Type): $Player
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BackpackInventoryScreen$Type = ($BackpackInventoryScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BackpackInventoryScreen_ = $BackpackInventoryScreen$Type;
}}
declare module "packages/org/violetmoon/zeta/util/handler/$FuelHandler$ICustomWoodFuelValue" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $FuelHandler$ICustomWoodFuelValue {

 "getBurnTimeInTicksWhenWooden"(): integer

(): integer
}

export namespace $FuelHandler$ICustomWoodFuelValue {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FuelHandler$ICustomWoodFuelValue$Type = ($FuelHandler$ICustomWoodFuelValue);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FuelHandler$ICustomWoodFuelValue_ = $FuelHandler$ICustomWoodFuelValue$Type;
}}
declare module "packages/org/violetmoon/zetaimplforge/event/play/$ForgeZPlayNoteBlock" {
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$ZPlayNoteBlock, $ZPlayNoteBlock$Type} from "packages/org/violetmoon/zeta/event/play/$ZPlayNoteBlock"
import {$NoteBlockInstrument, $NoteBlockInstrument$Type} from "packages/net/minecraft/world/level/block/state/properties/$NoteBlockInstrument"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$NoteBlockEvent$Play, $NoteBlockEvent$Play$Type} from "packages/net/minecraftforge/event/level/$NoteBlockEvent$Play"

export class $ForgeZPlayNoteBlock extends $Record implements $ZPlayNoteBlock {

constructor(e: $NoteBlockEvent$Play$Type)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "e"(): $NoteBlockEvent$Play
public "getState"(): $BlockState
public "getLevel"(): $LevelAccessor
public "setCanceled"(arg0: boolean): void
public "isCanceled"(): boolean
public "getPos"(): $BlockPos
public "getInstrument"(): $NoteBlockInstrument
public "getVanillaNoteId"(): integer
public "cancel"(): void
get "state"(): $BlockState
get "level"(): $LevelAccessor
set "canceled"(value: boolean)
get "canceled"(): boolean
get "pos"(): $BlockPos
get "instrument"(): $NoteBlockInstrument
get "vanillaNoteId"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ForgeZPlayNoteBlock$Type = ($ForgeZPlayNoteBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ForgeZPlayNoteBlock_ = $ForgeZPlayNoteBlock$Type;
}}
declare module "packages/org/violetmoon/quark/addons/oddities/client/render/be/$PipeRenderer" {
import {$BlockEntityRendererProvider$Context, $BlockEntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/blockentity/$BlockEntityRendererProvider$Context"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$PipeBlockEntity, $PipeBlockEntity$Type} from "packages/org/violetmoon/quark/addons/oddities/block/be/$PipeBlockEntity"
import {$BlockEntityRenderer, $BlockEntityRenderer$Type} from "packages/net/minecraft/client/renderer/blockentity/$BlockEntityRenderer"

export class $PipeRenderer implements $BlockEntityRenderer<($PipeBlockEntity)> {

constructor(arg0: $BlockEntityRendererProvider$Context$Type)

public "render"(arg0: $PipeBlockEntity$Type, arg1: float, arg2: $PoseStack$Type, arg3: $MultiBufferSource$Type, arg4: integer, arg5: integer): void
public "shouldRender"(arg0: $PipeBlockEntity$Type, arg1: $Vec3$Type): boolean
public "shouldRenderOffScreen"(arg0: $PipeBlockEntity$Type): boolean
public "getViewDistance"(): integer
get "viewDistance"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PipeRenderer$Type = ($PipeRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PipeRenderer_ = $PipeRenderer$Type;
}}
declare module "packages/org/violetmoon/quark/api/event/$ModuleStateChangedEvent" {
import {$ListenerList, $ListenerList$Type} from "packages/net/minecraftforge/eventbus/$ListenerList"
import {$QuarkModuleEvent, $QuarkModuleEvent$Type} from "packages/org/violetmoon/quark/api/event/$QuarkModuleEvent"

export class $ModuleStateChangedEvent extends $QuarkModuleEvent {
readonly "enabled": boolean
readonly "eventName": string

constructor()
constructor(arg0: string, arg1: boolean)

public "isCancelable"(): boolean
public "getListenerList"(): $ListenerList
get "cancelable"(): boolean
get "listenerList"(): $ListenerList
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModuleStateChangedEvent$Type = ($ModuleStateChangedEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModuleStateChangedEvent_ = $ModuleStateChangedEvent$Type;
}}
declare module "packages/org/violetmoon/quark/addons/oddities/util/$TinyPotatoInfo" {
import {$RuneColor, $RuneColor$Type} from "packages/org/violetmoon/quark/content/tools/base/$RuneColor"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Record, $Record$Type} from "packages/java/lang/$Record"

export class $TinyPotatoInfo extends $Record {

constructor(runeColor: $RuneColor$Type, enchanted: boolean, name: string)

public "name"(): string
public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public static "fromString"(arg0: string): $TinyPotatoInfo
public "runeColor"(): $RuneColor
public static "fromComponent"(arg0: $Component$Type): $TinyPotatoInfo
public "enchanted"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TinyPotatoInfo$Type = ($TinyPotatoInfo);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TinyPotatoInfo_ = $TinyPotatoInfo$Type;
}}
declare module "packages/org/violetmoon/quark/addons/oddities/capability/$Force" {
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$Vec3i, $Vec3i$Type} from "packages/net/minecraft/core/$Vec3i"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $Force extends $Record {

constructor(magnitude: integer, pushing: boolean, direction: $Direction$Type, distance: integer, origin: $BlockPos$Type)

public "add"(arg0: $Vec3i$Type): $Vec3i
public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "distance"(): integer
public "magnitude"(): integer
public "direction"(): $Direction
public "origin"(): $BlockPos
public "pushing"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Force$Type = ($Force);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Force_ = $Force$Type;
}}
declare module "packages/org/violetmoon/quark/content/building/module/$RainbowLampsModule" {
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$ZCommonSetup, $ZCommonSetup$Type} from "packages/org/violetmoon/zeta/event/load/$ZCommonSetup"
import {$ZRegister, $ZRegister$Type} from "packages/org/violetmoon/zeta/event/load/$ZRegister"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $RainbowLampsModule extends $ZetaModule {
static "lightLevel": integer
static "useCorundum": boolean
static "lampTag": $TagKey<($Block)>
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "register"(arg0: $ZRegister$Type): void
public "setup"(arg0: $ZCommonSetup$Type): void
public static "isCorundum"(): boolean
set "up"(value: $ZCommonSetup$Type)
get "corundum"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RainbowLampsModule$Type = ($RainbowLampsModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RainbowLampsModule_ = $RainbowLampsModule$Type;
}}
declare module "packages/org/violetmoon/quark/content/tweaks/module/$SlabsToBlocksModule" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$ZRecipeCrawl$Visit$Shaped, $ZRecipeCrawl$Visit$Shaped$Type} from "packages/org/violetmoon/zeta/event/play/$ZRecipeCrawl$Visit$Shaped"
import {$ZRecipeCrawl$Reset, $ZRecipeCrawl$Reset$Type} from "packages/org/violetmoon/zeta/event/play/$ZRecipeCrawl$Reset"
import {$ZRegister, $ZRegister$Type} from "packages/org/violetmoon/zeta/event/load/$ZRegister"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $SlabsToBlocksModule extends $ZetaModule {
static "recipes": $Map<($Item), ($Item)>
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "register"(arg0: $ZRegister$Type): void
public "onReset"(arg0: $ZRecipeCrawl$Reset$Type): void
public "onVisitShaped"(arg0: $ZRecipeCrawl$Visit$Shaped$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SlabsToBlocksModule$Type = ($SlabsToBlocksModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SlabsToBlocksModule_ = $SlabsToBlocksModule$Type;
}}
declare module "packages/org/violetmoon/zeta/client/$TopLayerTooltipHandler" {
import {$List, $List$Type} from "packages/java/util/$List"
import {$ZRenderTick, $ZRenderTick$Type} from "packages/org/violetmoon/zeta/client/event/play/$ZRenderTick"

/**
 * 
 * @deprecated
 */
export class $TopLayerTooltipHandler {

constructor()

public "renderTick"(arg0: $ZRenderTick$Type): void
public "setTooltip"(arg0: $List$Type<(string)>, arg1: integer, arg2: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TopLayerTooltipHandler$Type = ($TopLayerTooltipHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TopLayerTooltipHandler_ = $TopLayerTooltipHandler$Type;
}}
declare module "packages/org/violetmoon/quark/content/tweaks/module/$CoralOnCactusModule" {
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZConfigChanged, $ZConfigChanged$Type} from "packages/org/violetmoon/zeta/event/load/$ZConfigChanged"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $CoralOnCactusModule extends $ZetaModule {
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "configChanged"(arg0: $ZConfigChanged$Type): void
public static "scanForWater"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: boolean): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CoralOnCactusModule$Type = ($CoralOnCactusModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CoralOnCactusModule_ = $CoralOnCactusModule$Type;
}}
declare module "packages/org/violetmoon/zeta/event/play/loading/$ZVillagerTrades" {
import {$IZetaPlayEvent, $IZetaPlayEvent$Type} from "packages/org/violetmoon/zeta/event/bus/$IZetaPlayEvent"
import {$List, $List$Type} from "packages/java/util/$List"
import {$VillagerTrades$ItemListing, $VillagerTrades$ItemListing$Type} from "packages/net/minecraft/world/entity/npc/$VillagerTrades$ItemListing"
import {$Int2ObjectMap, $Int2ObjectMap$Type} from "packages/it/unimi/dsi/fastutil/ints/$Int2ObjectMap"
import {$VillagerProfession, $VillagerProfession$Type} from "packages/net/minecraft/world/entity/npc/$VillagerProfession"

export interface $ZVillagerTrades extends $IZetaPlayEvent {

 "getType"(): $VillagerProfession
 "getTrades"(): $Int2ObjectMap<($List<($VillagerTrades$ItemListing)>)>
}

export namespace $ZVillagerTrades {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZVillagerTrades$Type = ($ZVillagerTrades);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZVillagerTrades_ = $ZVillagerTrades$Type;
}}
declare module "packages/org/violetmoon/quark/content/automation/inventory/$CrafterMenu" {
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ContainerLevelAccess, $ContainerLevelAccess$Type} from "packages/net/minecraft/world/inventory/$ContainerLevelAccess"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$AbstractContainerMenu, $AbstractContainerMenu$Type} from "packages/net/minecraft/world/inventory/$AbstractContainerMenu"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$CraftingContainer, $CraftingContainer$Type} from "packages/net/minecraft/world/inventory/$CraftingContainer"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"
import {$ContainerData, $ContainerData$Type} from "packages/net/minecraft/world/inventory/$ContainerData"
import {$ResultContainer, $ResultContainer$Type} from "packages/net/minecraft/world/inventory/$ResultContainer"

export class $CrafterMenu extends $AbstractContainerMenu {
readonly "crafter": $Container
readonly "delegate": $ContainerData
static readonly "SLOT_CLICKED_OUTSIDE": integer
static readonly "QUICKCRAFT_TYPE_CHARITABLE": integer
static readonly "QUICKCRAFT_TYPE_GREEDY": integer
static readonly "QUICKCRAFT_TYPE_CLONE": integer
static readonly "QUICKCRAFT_HEADER_START": integer
static readonly "QUICKCRAFT_HEADER_CONTINUE": integer
static readonly "QUICKCRAFT_HEADER_END": integer
static readonly "CARRIED_SLOT_SIZE": integer
readonly "lastSlots": $NonNullList<($ItemStack)>
readonly "slots": $NonNullList<($Slot)>
 "remoteSlots": $NonNullList<($ItemStack)>
 "containerId": integer

constructor(arg0: integer, arg1: $Inventory$Type)
constructor(arg0: integer, arg1: $Inventory$Type, arg2: $Function$Type<($CrafterMenu$Type), ($CraftingContainer$Type)>, arg3: $ResultContainer$Type, arg4: $ContainerData$Type, arg5: $ContainerLevelAccess$Type)

public static "fromNetwork"(arg0: integer, arg1: $Inventory$Type, arg2: $FriendlyByteBuf$Type): $CrafterMenu
public "stillValid"(arg0: $Player$Type): boolean
public "clickMenuButton"(arg0: $Player$Type, arg1: integer): boolean
public "quickMoveStack"(arg0: $Player$Type, arg1: integer): $ItemStack
public "slotsChanged"(arg0: $Container$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CrafterMenu$Type = ($CrafterMenu);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CrafterMenu_ = $CrafterMenu$Type;
}}
declare module "packages/org/violetmoon/zeta/util/$SimpleInventoryBlockEntity" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$LazyOptional, $LazyOptional$Type} from "packages/net/minecraftforge/common/util/$LazyOptional"
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$Ingredient, $Ingredient$Type} from "packages/net/minecraft/world/item/crafting/$Ingredient"
import {$WorldlyContainer, $WorldlyContainer$Type} from "packages/net/minecraft/world/$WorldlyContainer"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$BlockContainerJS, $BlockContainerJS$Type} from "packages/dev/latvian/mods/kubejs/level/$BlockContainerJS"
import {$Capability, $Capability$Type} from "packages/net/minecraftforge/common/capabilities/$Capability"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$ZetaBlockEntity, $ZetaBlockEntity$Type} from "packages/org/violetmoon/zeta/block/be/$ZetaBlockEntity"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $SimpleInventoryBlockEntity extends $ZetaBlockEntity implements $WorldlyContainer {
 "blockState": $BlockState

constructor(arg0: $BlockEntityType$Type<(any)>, arg1: $BlockPos$Type, arg2: $BlockState$Type)

public "getItem"(arg0: integer): $ItemStack
public "removeItemNoUpdate"(arg0: integer): $ItemStack
public "isAutomationEnabled"(): boolean
public "canTakeItemThroughFace"(arg0: integer, arg1: $ItemStack$Type, arg2: $Direction$Type): boolean
public "getSlotsForFace"(arg0: $Direction$Type): (integer)[]
public "canPlaceItemThroughFace"(arg0: integer, arg1: $ItemStack$Type, arg2: $Direction$Type): boolean
public "writeSharedNBT"(arg0: $CompoundTag$Type): void
public "inventoryChanged"(arg0: integer): void
public "readSharedNBT"(arg0: $CompoundTag$Type): void
public "getCapability"<T>(arg0: $Capability$Type<(T)>, arg1: $Direction$Type): $LazyOptional<(T)>
public "removeItem"(arg0: integer, arg1: integer): $ItemStack
public "clearContent"(): void
public "isEmpty"(): boolean
public "startOpen"(arg0: $Player$Type): void
public "getMaxStackSize"(): integer
public "stillValid"(arg0: $Player$Type): boolean
public "stopOpen"(arg0: $Player$Type): void
public "canPlaceItem"(arg0: integer, arg1: $ItemStack$Type): boolean
public "setItem"(arg0: integer, arg1: $ItemStack$Type): void
public "kjs$self"(): $Container
public "setChanged"(): void
public "getBlock"(level: $Level$Type): $BlockContainerJS
public "getContainerSize"(): integer
public static "stillValidBlockEntity"(arg0: $BlockEntity$Type, arg1: $Player$Type, arg2: integer): boolean
public "countItem"(arg0: $Item$Type): integer
public "canTakeItem"(arg0: $Container$Type, arg1: integer, arg2: $ItemStack$Type): boolean
public "hasAnyMatching"(arg0: $Predicate$Type<($ItemStack$Type)>): boolean
public "getSlots"(): integer
public "getStackInSlot"(slot: integer): $ItemStack
public "insertItem"(slot: integer, stack: $ItemStack$Type, simulate: boolean): $ItemStack
public static "stillValidBlockEntity"(arg0: $BlockEntity$Type, arg1: $Player$Type): boolean
public "isMutable"(): boolean
public "hasAnyOf"(arg0: $Set$Type<($Item$Type)>): boolean
public "setChanged"(): void
public "asContainer"(): $Container
public "getHeight"(): integer
public "extractItem"(slot: integer, amount: integer, simulate: boolean): $ItemStack
public "isItemValid"(slot: integer, stack: $ItemStack$Type): boolean
public "getWidth"(): integer
public "setStackInSlot"(slot: integer, stack: $ItemStack$Type): void
public "getSlotLimit"(slot: integer): integer
public "clear"(): void
public static "tryClear"(arg0: any): void
public "insertItem"(stack: $ItemStack$Type, simulate: boolean): $ItemStack
public "countNonEmpty"(ingredient: $Ingredient$Type): integer
public "countNonEmpty"(): integer
public "getAllItems"(): $List<($ItemStack)>
public "find"(ingredient: $Ingredient$Type): integer
public "find"(): integer
public "clear"(ingredient: $Ingredient$Type): void
public "count"(ingredient: $Ingredient$Type): integer
public "count"(): integer
public "isEmpty"(): boolean
get "automationEnabled"(): boolean
get "empty"(): boolean
get "maxStackSize"(): integer
get "containerSize"(): integer
get "slots"(): integer
get "mutable"(): boolean
get "height"(): integer
get "width"(): integer
get "allItems"(): $List<($ItemStack)>
get "empty"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SimpleInventoryBlockEntity$Type = ($SimpleInventoryBlockEntity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SimpleInventoryBlockEntity_ = $SimpleInventoryBlockEntity$Type;
}}
declare module "packages/org/violetmoon/zeta/item/$ZetaBlockItem" {
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$IForgeItem, $IForgeItem$Type} from "packages/net/minecraftforge/common/extensions/$IForgeItem"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$RecipeType, $RecipeType$Type} from "packages/net/minecraft/world/item/crafting/$RecipeType"
import {$ToolAction, $ToolAction$Type} from "packages/net/minecraftforge/common/$ToolAction"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$IZetaItemExtensions, $IZetaItemExtensions$Type} from "packages/org/violetmoon/zeta/item/ext/$IZetaItemExtensions"
import {$EnderMan, $EnderMan$Type} from "packages/net/minecraft/world/entity/monster/$EnderMan"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$UseOnContext, $UseOnContext$Type} from "packages/net/minecraft/world/item/context/$UseOnContext"
import {$BlockItem, $BlockItem$Type} from "packages/net/minecraft/world/item/$BlockItem"
import {$Enchantment, $Enchantment$Type} from "packages/net/minecraft/world/item/enchantment/$Enchantment"
import {$AdditionalItemPlacement, $AdditionalItemPlacement$Type} from "packages/net/mehvahdjukaar/moonlight/api/item/additional_placements/$AdditionalItemPlacement"
import {$ItemEntity, $ItemEntity$Type} from "packages/net/minecraft/world/entity/item/$ItemEntity"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $ZetaBlockItem extends $BlockItem implements $IZetaItemExtensions, $IForgeItem {
static readonly "BLOCK_ENTITY_TAG": string
static readonly "BLOCK_STATE_TAG": string
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Block$Type, arg1: $Item$Properties$Type)

public "getEnchantmentLevel"(arg0: $ItemStack$Type, arg1: $Enchantment$Type): integer
public "canPerformAction"(arg0: $ItemStack$Type, arg1: $ToolAction$Type): boolean
public "canElytraFly"(arg0: $ItemStack$Type, arg1: $LivingEntity$Type): boolean
public "shouldCauseReequipAnimation"(arg0: $ItemStack$Type, arg1: $ItemStack$Type, arg2: boolean): boolean
public "getEnchantmentValue"(arg0: $ItemStack$Type): integer
public "getDefaultTooltipHideFlags"(arg0: $ItemStack$Type): integer
public "canApplyAtEnchantingTable"(arg0: $ItemStack$Type, arg1: $Enchantment$Type): boolean
public "isRepairable"(arg0: $ItemStack$Type): boolean
public "getMaxDamage"(arg0: $ItemStack$Type): integer
public "onItemUseFirst"(arg0: $ItemStack$Type, arg1: $UseOnContext$Type): $InteractionResult
public "isBookEnchantable"(arg0: $ItemStack$Type, arg1: $ItemStack$Type): boolean
public "getArmorTexture"(arg0: $ItemStack$Type, arg1: $Entity$Type, arg2: $EquipmentSlot$Type, arg3: string): string
public "doesSneakBypassUse"(arg0: $ItemStack$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $Player$Type): boolean
public "canEquip"(arg0: $ItemStack$Type, arg1: $EquipmentSlot$Type, arg2: $Entity$Type): boolean
public "damageItem"(arg0: $ItemStack$Type, arg1: integer, arg2: $LivingEntity$Type, arg3: $Consumer$Type<(any)>): integer
public "getBurnTime"(arg0: $ItemStack$Type, arg1: $RecipeType$Type<(any)>): integer
public "isEnderMask"(arg0: $ItemStack$Type, arg1: $Player$Type, arg2: $EnderMan$Type): boolean
public "getAllEnchantments"(arg0: $ItemStack$Type): $Map<(any), (any)>
public "onEntityItemUpdate"(arg0: $ItemStack$Type, arg1: $ItemEntity$Type): boolean
public "isRepairableZeta"(arg0: $ItemStack$Type): boolean
public "onItemUseFirstZeta"(arg0: $ItemStack$Type, arg1: $UseOnContext$Type): $InteractionResult
public "getBurnTimeZeta"(arg0: $ItemStack$Type, arg1: $RecipeType$Type<(any)>): integer
public "damageItemZeta"<T extends $LivingEntity>(arg0: $ItemStack$Type, arg1: integer, arg2: T, arg3: $Consumer$Type<(T)>): integer
public "isEnderMaskZeta"(arg0: $ItemStack$Type, arg1: $Player$Type, arg2: $EnderMan$Type): boolean
public "canEquipZeta"(arg0: $ItemStack$Type, arg1: $EquipmentSlot$Type, arg2: $Entity$Type): boolean
public "canElytraFlyZeta"(arg0: $ItemStack$Type, arg1: $LivingEntity$Type): boolean
public "canShearZeta"(arg0: $ItemStack$Type): boolean
public "getMaxDamageZeta"(arg0: $ItemStack$Type): integer
public "getEnchantmentLevelZeta"(arg0: $ItemStack$Type, arg1: $Enchantment$Type): integer
public "getAllEnchantmentsZeta"(arg0: $ItemStack$Type): $Map<($Enchantment), (integer)>
public "getEnchantmentValueZeta"(arg0: $ItemStack$Type): integer
public "shouldCauseReequipAnimationZeta"(arg0: $ItemStack$Type, arg1: $ItemStack$Type, arg2: boolean): boolean
public "getArmorTextureZeta"(arg0: $ItemStack$Type, arg1: $Entity$Type, arg2: $EquipmentSlot$Type, arg3: string): string
public "canApplyAtEnchantingTableZeta"(arg0: $ItemStack$Type, arg1: $Enchantment$Type): boolean
public "doesSneakBypassUseZeta"(arg0: $ItemStack$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $Player$Type): boolean
public "getDefaultTooltipHideFlagsZeta"(arg0: $ItemStack$Type): integer
public "onEntityItemUpdateZeta"(arg0: $ItemStack$Type, arg1: $ItemEntity$Type): boolean
public "isBookEnchantableZeta"(arg0: $ItemStack$Type, arg1: $ItemStack$Type): boolean
public "moonlight$addAdditionalBehavior"(arg0: $AdditionalItemPlacement$Type): void
public "moonlight$getAdditionalBehavior"(): $AdditionalItemPlacement
public "moonlight$getClientAnimationExtension"(): any
public "moonlight$setClientAnimationExtension"(arg0: any): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZetaBlockItem$Type = ($ZetaBlockItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZetaBlockItem_ = $ZetaBlockItem$Type;
}}
declare module "packages/org/violetmoon/quark/content/tools/module/$ParrotEggsModule" {
import {$ZCommonSetup, $ZCommonSetup$Type} from "packages/org/violetmoon/zeta/event/load/$ZCommonSetup"
import {$ZClientSetup, $ZClientSetup$Type} from "packages/org/violetmoon/zeta/client/event/load/$ZClientSetup"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ZRegister, $ZRegister$Type} from "packages/org/violetmoon/zeta/event/load/$ZRegister"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ParrotEgg, $ParrotEgg$Type} from "packages/org/violetmoon/quark/content/tools/entity/$ParrotEgg"
import {$ManualTrigger, $ManualTrigger$Type} from "packages/org/violetmoon/zeta/advancement/$ManualTrigger"
import {$ZLivingTick, $ZLivingTick$Type} from "packages/org/violetmoon/zeta/event/play/entity/living/$ZLivingTick"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZConfigChanged, $ZConfigChanged$Type} from "packages/org/violetmoon/zeta/event/load/$ZConfigChanged"
import {$ZPlayerInteract$EntityInteract, $ZPlayerInteract$EntityInteract$Type} from "packages/org/violetmoon/zeta/event/play/entity/player/$ZPlayerInteract$EntityInteract"

export class $ParrotEggsModule extends $ZetaModule {
static "parrotEggType": $EntityType<($ParrotEgg)>
static "feedTag": $TagKey<($Item)>
static "parrotEggs": $List<($Item)>
static "chance": double
static "eggTime": integer
static "enableKotobirb": boolean
static "throwParrotEggTrigger": $ManualTrigger
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "register"(arg0: $ZRegister$Type): void
public "setup"(arg0: $ZCommonSetup$Type): void
public "clientSetup"(arg0: $ZClientSetup$Type): void
public "configChanged"(arg0: $ZConfigChanged$Type): void
public "entityInteract"(arg0: $ZPlayerInteract$EntityInteract$Type): void
public "entityUpdate"(arg0: $ZLivingTick$Type): void
set "up"(value: $ZCommonSetup$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ParrotEggsModule$Type = ($ParrotEggsModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ParrotEggsModule_ = $ParrotEggsModule$Type;
}}
declare module "packages/org/violetmoon/quark/api/$IQuarkButtonAllowed" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $IQuarkButtonAllowed {

}

export namespace $IQuarkButtonAllowed {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IQuarkButtonAllowed$Type = ($IQuarkButtonAllowed);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IQuarkButtonAllowed_ = $IQuarkButtonAllowed$Type;
}}
declare module "packages/org/violetmoon/quark/base/network/message/$SetLockProfileMessage" {
import {$IZetaMessage, $IZetaMessage$Type} from "packages/org/violetmoon/zeta/network/$IZetaMessage"
import {$LockRotationModule$LockProfile, $LockRotationModule$LockProfile$Type} from "packages/org/violetmoon/quark/content/tweaks/module/$LockRotationModule$LockProfile"
import {$IZetaNetworkEventContext, $IZetaNetworkEventContext$Type} from "packages/org/violetmoon/zeta/network/$IZetaNetworkEventContext"

export class $SetLockProfileMessage implements $IZetaMessage {
 "profile": $LockRotationModule$LockProfile

constructor()
constructor(arg0: $LockRotationModule$LockProfile$Type)

public "receive"(arg0: $IZetaNetworkEventContext$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SetLockProfileMessage$Type = ($SetLockProfileMessage);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SetLockProfileMessage_ = $SetLockProfileMessage$Type;
}}
declare module "packages/org/violetmoon/quark/addons/oddities/client/screen/$MatrixEnchantingPieceList" {
import {$MatrixEnchantingScreen, $MatrixEnchantingScreen$Type} from "packages/org/violetmoon/quark/addons/oddities/client/screen/$MatrixEnchantingScreen"
import {$MatrixEnchantingPieceList$PieceEntry, $MatrixEnchantingPieceList$PieceEntry$Type} from "packages/org/violetmoon/quark/addons/oddities/client/screen/$MatrixEnchantingPieceList$PieceEntry"
import {$ObjectSelectionList, $ObjectSelectionList$Type} from "packages/net/minecraft/client/gui/components/$ObjectSelectionList"
import {$AbstractSelectionList$Entry, $AbstractSelectionList$Entry$Type} from "packages/net/minecraft/client/gui/components/$AbstractSelectionList$Entry"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $MatrixEnchantingPieceList extends $ObjectSelectionList<($MatrixEnchantingPieceList$PieceEntry)> {
 "scrolling": boolean
 "hovered": E

constructor(arg0: $MatrixEnchantingScreen$Type, arg1: integer, arg2: integer, arg3: integer, arg4: integer, arg5: integer)

public "refresh"(): void
public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
public "getRowWidth"(): integer
get "rowWidth"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MatrixEnchantingPieceList$Type = ($MatrixEnchantingPieceList);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MatrixEnchantingPieceList_ = $MatrixEnchantingPieceList$Type;
}}
declare module "packages/org/violetmoon/zeta/block/$ZetaTrapdoorBlock" {
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$BooleanSupplier, $BooleanSupplier$Type} from "packages/java/util/function/$BooleanSupplier"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$TrapDoorBlock, $TrapDoorBlock$Type} from "packages/net/minecraft/world/level/block/$TrapDoorBlock"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$FluidState, $FluidState$Type} from "packages/net/minecraft/world/level/material/$FluidState"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$ToolAction, $ToolAction$Type} from "packages/net/minecraftforge/common/$ToolAction"
import {$IForgeBlock, $IForgeBlock$Type} from "packages/net/minecraftforge/common/extensions/$IForgeBlock"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$DirectionProperty, $DirectionProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$DirectionProperty"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$Half, $Half$Type} from "packages/net/minecraft/world/level/block/state/properties/$Half"
import {$CreativeModeTab, $CreativeModeTab$Type} from "packages/net/minecraft/world/item/$CreativeModeTab"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$IZetaBlock, $IZetaBlock$Type} from "packages/org/violetmoon/zeta/block/$IZetaBlock"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$UseOnContext, $UseOnContext$Type} from "packages/net/minecraft/world/item/context/$UseOnContext"
import {$EnumProperty, $EnumProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$EnumProperty"
import {$SoundType, $SoundType$Type} from "packages/net/minecraft/world/level/block/$SoundType"
import {$IPlantable, $IPlantable$Type} from "packages/net/minecraftforge/common/$IPlantable"
import {$IZetaBlockExtensions, $IZetaBlockExtensions$Type} from "packages/org/violetmoon/zeta/block/ext/$IZetaBlockExtensions"
import {$ResourceKey, $ResourceKey$Type} from "packages/net/minecraft/resources/$ResourceKey"
import {$ItemLike, $ItemLike$Type} from "packages/net/minecraft/world/level/$ItemLike"
import {$BlockAndTintGetter, $BlockAndTintGetter$Type} from "packages/net/minecraft/world/level/$BlockAndTintGetter"
import {$BlockSetType, $BlockSetType$Type} from "packages/net/minecraft/world/level/block/state/properties/$BlockSetType"

export class $ZetaTrapdoorBlock extends $TrapDoorBlock implements $IZetaBlock, $IZetaBlockExtensions, $IForgeBlock {
static readonly "OPEN": $BooleanProperty
static readonly "HALF": $EnumProperty<($Half)>
static readonly "POWERED": $BooleanProperty
static readonly "WATERLOGGED": $BooleanProperty
readonly "type": $BlockSetType
static readonly "FACING": $DirectionProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(arg0: $BlockSetType$Type, arg1: string, arg2: $ZetaModule$Type, arg3: $BlockBehaviour$Properties$Type)

public "getModule"(): $ZetaModule
public "isLadderZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "canSustainPlant"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type, arg4: $IPlantable$Type): boolean
public "isLadder"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "isConduitFrame"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): boolean
public "doesConditionApply"(): boolean
public "setCondition"(arg0: $BooleanSupplier$Type): $ZetaTrapdoorBlock
public "getEnchantPowerBonus"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type): float
public "shouldDisplayFluidOverlay"(arg0: $BlockState$Type, arg1: $BlockAndTintGetter$Type, arg2: $BlockPos$Type, arg3: $FluidState$Type): boolean
public "getToolModifiedState"(arg0: $BlockState$Type, arg1: $UseOnContext$Type, arg2: $ToolAction$Type, arg3: boolean): $BlockState
public "getBeaconColorMultiplier"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): (float)[]
public "makesOpenTrapdoorAboveClimbable"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockState$Type): boolean
public "getSoundType"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): $SoundType
public "isScaffolding"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "getLightEmission"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type): integer
public "isFlammable"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): boolean
public "canStickTo"(arg0: $BlockState$Type, arg1: $BlockState$Type): boolean
public "getFireSpreadSpeed"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "getFlammability"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "isStickyBlock"(arg0: $BlockState$Type): boolean
public "collisionExtendsVertically"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): boolean
public "getBlock"(): $Block
public "getFireSpreadSpeedZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "getFlammabilityZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "setCreativeTab"(arg0: $ResourceKey$Type<($CreativeModeTab$Type)>): $Block
public "setCreativeTab"(arg0: $ResourceKey$Type<($CreativeModeTab$Type)>, arg1: $ItemLike$Type, arg2: boolean): $Block
public "isConduitFrameZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): boolean
public "isStickyBlockZeta"(arg0: $BlockState$Type): boolean
public "isScaffoldingZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "canStickToZeta"(arg0: $BlockState$Type, arg1: $BlockState$Type): boolean
public "isFlammableZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): boolean
public "getSoundTypeZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): $SoundType
public "makesOpenTrapdoorAboveClimbableZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockState$Type): boolean
public "canSustainPlantZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type, arg4: string): boolean
public "getToolModifiedStateZeta"(arg0: $BlockState$Type, arg1: $UseOnContext$Type, arg2: string, arg3: boolean): $BlockState
public "collisionExtendsVerticallyZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): boolean
public "shouldDisplayFluidOverlayZeta"(arg0: $BlockState$Type, arg1: $BlockAndTintGetter$Type, arg2: $BlockPos$Type, arg3: $FluidState$Type): boolean
public "getEnchantPowerBonusZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type): float
public "getBeaconColorMultiplierZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): (float)[]
public "getLightEmissionZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type): integer
public "isEnabled"(): boolean
public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
get "module"(): $ZetaModule
set "condition"(value: $BooleanSupplier$Type)
get "block"(): $Block
set "creativeTab"(value: $ResourceKey$Type<($CreativeModeTab$Type)>)
get "enabled"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZetaTrapdoorBlock$Type = ($ZetaTrapdoorBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZetaTrapdoorBlock_ = $ZetaTrapdoorBlock$Type;
}}
declare module "packages/org/violetmoon/quark/content/automation/client/screen/$CrafterScreen" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$AbstractContainerScreen, $AbstractContainerScreen$Type} from "packages/net/minecraft/client/gui/screens/inventory/$AbstractContainerScreen"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$List, $List$Type} from "packages/java/util/$List"
import {$CrafterMenu, $CrafterMenu$Type} from "packages/org/violetmoon/quark/content/automation/inventory/$CrafterMenu"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"

export class $CrafterScreen extends $AbstractContainerScreen<($CrafterMenu)> {
static readonly "INVENTORY_LOCATION": $ResourceLocation
static readonly "SLOT_ITEM_BLIT_OFFSET": integer
 "imageWidth": integer
 "hoveredSlot": $Slot
 "leftPos": integer
 "topPos": integer
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering

constructor(arg0: $CrafterMenu$Type, arg1: $Inventory$Type, arg2: $Component$Type)

public "m_7856_"(): void
public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
public "mouseClicked"(arg0: double, arg1: double, arg2: integer): boolean
public "isBlocked"(arg0: $Slot$Type): boolean
public "m_7286_"(arg0: $GuiGraphics$Type, arg1: float, arg2: integer, arg3: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CrafterScreen$Type = ($CrafterScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CrafterScreen_ = $CrafterScreen$Type;
}}
declare module "packages/org/violetmoon/quark/content/world/block/$GlowLichenGrowthBlock" {
import {$ZetaBushBlock, $ZetaBushBlock$Type} from "packages/org/violetmoon/zeta/block/$ZetaBushBlock"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$CollisionContext, $CollisionContext$Type} from "packages/net/minecraft/world/phys/shapes/$CollisionContext"
import {$BonemealableBlock, $BonemealableBlock$Type} from "packages/net/minecraft/world/level/block/$BonemealableBlock"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $GlowLichenGrowthBlock extends $ZetaBushBlock implements $BonemealableBlock {
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(arg0: $ZetaModule$Type)

public "getShape"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $CollisionContext$Type): $VoxelShape
public "animateTick"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type, arg3: $RandomSource$Type): void
public "isValidBonemealTarget"(arg0: $LevelReader$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: boolean): boolean
public "isBonemealSuccess"(arg0: $Level$Type, arg1: $RandomSource$Type, arg2: $BlockPos$Type, arg3: $BlockState$Type): boolean
public "performBonemeal"(arg0: $ServerLevel$Type, arg1: $RandomSource$Type, arg2: $BlockPos$Type, arg3: $BlockState$Type): void
public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GlowLichenGrowthBlock$Type = ($GlowLichenGrowthBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GlowLichenGrowthBlock_ = $GlowLichenGrowthBlock$Type;
}}
declare module "packages/org/violetmoon/zeta/event/play/entity/$ZEntityInteract" {
import {$IZetaPlayEvent, $IZetaPlayEvent$Type} from "packages/org/violetmoon/zeta/event/bus/$IZetaPlayEvent"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export interface $ZEntityInteract extends $IZetaPlayEvent {

 "getTarget"(): $Entity
 "getLevel"(): $Level
 "getHand"(): $InteractionHand
 "getEntity"(): $Player
 "getItemStack"(): $ItemStack
}

export namespace $ZEntityInteract {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZEntityInteract$Type = ($ZEntityInteract);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZEntityInteract_ = $ZEntityInteract$Type;
}}
declare module "packages/org/violetmoon/zeta/config/type/$ClusterSizeConfig" {
import {$DimensionConfig, $DimensionConfig$Type} from "packages/org/violetmoon/zeta/config/type/$DimensionConfig"
import {$IBiomeConfig, $IBiomeConfig$Type} from "packages/org/violetmoon/zeta/config/type/$IBiomeConfig"
import {$ClusterSizeConfig$Builder, $ClusterSizeConfig$Builder$Type} from "packages/org/violetmoon/zeta/config/type/$ClusterSizeConfig$Builder"
import {$ConfigFlagManager, $ConfigFlagManager$Type} from "packages/org/violetmoon/zeta/config/$ConfigFlagManager"
import {$IConfigType, $IConfigType$Type} from "packages/org/violetmoon/zeta/config/type/$IConfigType"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $ClusterSizeConfig implements $IConfigType {
 "dimensions": $DimensionConfig
 "biomes": $IBiomeConfig
 "rarity": integer
 "minYLevel": integer
 "maxYLevel": integer
 "horizontalSize": integer
 "verticalSize": integer
 "horizontalVariation": integer
 "verticalVariation": integer

constructor(arg0: $ClusterSizeConfig$Builder$Type<(any)>)

public static "builder"<B extends $ClusterSizeConfig$Builder<(B)>>(): $ClusterSizeConfig$Builder<(B)>
public "onReload"(arg0: $ZetaModule$Type, arg1: $ConfigFlagManager$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClusterSizeConfig$Type = ($ClusterSizeConfig);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClusterSizeConfig_ = $ClusterSizeConfig$Type;
}}
declare module "packages/org/violetmoon/quark/content/tweaks/client/emote/$EmoteState" {
import {$HumanoidModel, $HumanoidModel$Type} from "packages/net/minecraft/client/model/$HumanoidModel"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$EmoteBase, $EmoteBase$Type} from "packages/org/violetmoon/quark/content/tweaks/client/emote/$EmoteBase"

export class $EmoteState {

constructor(arg0: $EmoteBase$Type)

public "load"(arg0: $HumanoidModel$Type<(any)>): void
public "save"(arg0: $HumanoidModel$Type<(any)>): void
public "rotateAndOffset"(arg0: $PoseStack$Type, arg1: $Player$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EmoteState$Type = ($EmoteState);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EmoteState_ = $EmoteState$Type;
}}
declare module "packages/org/violetmoon/quark/content/tweaks/module/$MoreBannerLayersModule" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZConfigChanged, $ZConfigChanged$Type} from "packages/org/violetmoon/zeta/event/load/$ZConfigChanged"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $MoreBannerLayersModule extends $ZetaModule {
static "layerLimit": integer
static readonly "banners": $TagKey<($Item)>
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public static "getLimit"(arg0: integer): integer
public "configChanged"(arg0: $ZConfigChanged$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MoreBannerLayersModule$Type = ($MoreBannerLayersModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MoreBannerLayersModule_ = $MoreBannerLayersModule$Type;
}}
declare module "packages/org/violetmoon/zeta/client/event/play/$ZRenderTick" {
import {$IZetaPlayEvent, $IZetaPlayEvent$Type} from "packages/org/violetmoon/zeta/event/bus/$IZetaPlayEvent"

export interface $ZRenderTick extends $IZetaPlayEvent {

 "isEndPhase"(): boolean
 "isStartPhase"(): boolean
 "getRenderTickTime"(): float
}

export namespace $ZRenderTick {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZRenderTick$Type = ($ZRenderTick);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZRenderTick_ = $ZRenderTick$Type;
}}
declare module "packages/org/violetmoon/quark/content/tools/item/$SeedPouchItem" {
import {$CreativeTabManager$AppendsUniquely, $CreativeTabManager$AppendsUniquely$Type} from "packages/org/violetmoon/zeta/registry/$CreativeTabManager$AppendsUniquely"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$SeedPouchItem$PouchContents, $SeedPouchItem$PouchContents$Type} from "packages/org/violetmoon/quark/content/tools/item/$SeedPouchItem$PouchContents"
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$ClickAction, $ClickAction$Type} from "packages/net/minecraft/world/inventory/$ClickAction"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$TooltipComponent, $TooltipComponent$Type} from "packages/net/minecraft/world/inventory/tooltip/$TooltipComponent"
import {$IUsageTickerOverride, $IUsageTickerOverride$Type} from "packages/org/violetmoon/quark/api/$IUsageTickerOverride"
import {$UseOnContext, $UseOnContext$Type} from "packages/net/minecraft/world/item/context/$UseOnContext"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$SlotAccess, $SlotAccess$Type} from "packages/net/minecraft/world/entity/$SlotAccess"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$ITrowelable, $ITrowelable$Type} from "packages/org/violetmoon/quark/api/$ITrowelable"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$ZetaItem, $ZetaItem$Type} from "packages/org/violetmoon/zeta/item/$ZetaItem"

export class $SeedPouchItem extends $ZetaItem implements $IUsageTickerOverride, $ITrowelable, $CreativeTabManager$AppendsUniquely {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $ZetaModule$Type)

public static "getCount"(arg0: $ItemStack$Type): integer
public static "getContents"(arg0: $ItemStack$Type): $SeedPouchItem$PouchContents
public "useOn"(arg0: $UseOnContext$Type): $InteractionResult
public "overrideStackedOnOther"(arg0: $ItemStack$Type, arg1: $Slot$Type, arg2: $ClickAction$Type, arg3: $Player$Type): boolean
public "overrideOtherStackedOnMe"(arg0: $ItemStack$Type, arg1: $ItemStack$Type, arg2: $Slot$Type, arg3: $ClickAction$Type, arg4: $Player$Type, arg5: $SlotAccess$Type): boolean
public "getBarColor"(arg0: $ItemStack$Type): integer
public "isBarVisible"(arg0: $ItemStack$Type): boolean
public "getBarWidth"(arg0: $ItemStack$Type): integer
public "getName"(arg0: $ItemStack$Type): $Component
public "getTooltipImage"(arg0: $ItemStack$Type): $Optional<($TooltipComponent)>
public "isEnchantable"(arg0: $ItemStack$Type): boolean
public static "mutateContents"<T>(arg0: $ItemStack$Type, arg1: $Function$Type<($SeedPouchItem$PouchContents$Type), (T)>): T
public "appendItemsToCreativeTab"(): $List<($ItemStack)>
public "getUsageTickerCountForItem"(arg0: $ItemStack$Type, arg1: $Predicate$Type<($ItemStack$Type)>): integer
public "getUsageTickerItem"(arg0: $ItemStack$Type): $ItemStack
public "shouldUsageTickerCheckMatchSize"(arg0: $ItemStack$Type): boolean
public "canBeTroweled"(arg0: $ItemStack$Type, arg1: $UseOnContext$Type): boolean
public "asItem"(): $Item
public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SeedPouchItem$Type = ($SeedPouchItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SeedPouchItem_ = $SeedPouchItem$Type;
}}
declare module "packages/org/violetmoon/zetaimplforge/event/play/entity/living/$ForgeZBabyEntitySpawn" {
import {$BabyEntitySpawnEvent, $BabyEntitySpawnEvent$Type} from "packages/net/minecraftforge/event/entity/living/$BabyEntitySpawnEvent"
import {$Mob, $Mob$Type} from "packages/net/minecraft/world/entity/$Mob"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$AgeableMob, $AgeableMob$Type} from "packages/net/minecraft/world/entity/$AgeableMob"
import {$ZBabyEntitySpawn, $ZBabyEntitySpawn$Type} from "packages/org/violetmoon/zeta/event/play/entity/living/$ZBabyEntitySpawn"

export class $ForgeZBabyEntitySpawn implements $ZBabyEntitySpawn {

constructor(arg0: $BabyEntitySpawnEvent$Type)

public "getChild"(): $AgeableMob
public "getParentB"(): $Mob
public "getCausedByPlayer"(): $Player
public "getParentA"(): $Mob
public "setChild"(arg0: $AgeableMob$Type): void
get "child"(): $AgeableMob
get "parentB"(): $Mob
get "causedByPlayer"(): $Player
get "parentA"(): $Mob
set "child"(value: $AgeableMob$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ForgeZBabyEntitySpawn$Type = ($ForgeZBabyEntitySpawn);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ForgeZBabyEntitySpawn_ = $ForgeZBabyEntitySpawn$Type;
}}
declare module "packages/org/violetmoon/zeta/event/play/$ZRecipeCrawl" {
import {$IZetaPlayEvent, $IZetaPlayEvent$Type} from "packages/org/violetmoon/zeta/event/bus/$IZetaPlayEvent"

export class $ZRecipeCrawl implements $IZetaPlayEvent {

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZRecipeCrawl$Type = ($ZRecipeCrawl);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZRecipeCrawl_ = $ZRecipeCrawl$Type;
}}
declare module "packages/org/violetmoon/quark/addons/oddities/entity/$TotemOfHoldingEntity" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Packet, $Packet$Type} from "packages/net/minecraft/network/protocol/$Packet"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ClientGamePacketListener, $ClientGamePacketListener$Type} from "packages/net/minecraft/network/protocol/game/$ClientGamePacketListener"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $TotemOfHoldingEntity extends $Entity {
static readonly "DEATH_TIME": integer
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(arg0: $EntityType$Type<(any)>, arg1: $Level$Type)

public "setOwner"(arg0: $Player$Type): void
public "isPickable"(): boolean
public "addItem"(arg0: $ItemStack$Type): void
public "tick"(): void
public "m_7378_"(arg0: $CompoundTag$Type): void
public "skipAttackInteraction"(arg0: $Entity$Type): boolean
public "getAddEntityPacket"(): $Packet<($ClientGamePacketListener)>
public "addCurios"(arg0: $ItemStack$Type): void
public "getDeathTicks"(): integer
public "isDying"(): boolean
set "owner"(value: $Player$Type)
get "pickable"(): boolean
get "addEntityPacket"(): $Packet<($ClientGamePacketListener)>
get "deathTicks"(): integer
get "dying"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TotemOfHoldingEntity$Type = ($TotemOfHoldingEntity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TotemOfHoldingEntity_ = $TotemOfHoldingEntity$Type;
}}
declare module "packages/org/violetmoon/zetaimplforge/event/play/$ForgeZFurnaceFuelBurnTime" {
import {$FurnaceFuelBurnTimeEvent, $FurnaceFuelBurnTimeEvent$Type} from "packages/net/minecraftforge/event/furnace/$FurnaceFuelBurnTimeEvent"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ZFurnaceFuelBurnTime, $ZFurnaceFuelBurnTime$Type} from "packages/org/violetmoon/zeta/event/play/$ZFurnaceFuelBurnTime"

export class $ForgeZFurnaceFuelBurnTime implements $ZFurnaceFuelBurnTime {

constructor(arg0: $FurnaceFuelBurnTimeEvent$Type)

public "setBurnTime"(arg0: integer): void
public "getItemStack"(): $ItemStack
set "burnTime"(value: integer)
get "itemStack"(): $ItemStack
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ForgeZFurnaceFuelBurnTime$Type = ($ForgeZFurnaceFuelBurnTime);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ForgeZFurnaceFuelBurnTime_ = $ForgeZFurnaceFuelBurnTime$Type;
}}
declare module "packages/org/violetmoon/zeta/block/$ZetaBlockWrapper" {
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$MapColor, $MapColor$Type} from "packages/net/minecraft/world/level/material/$MapColor"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$PushReaction, $PushReaction$Type} from "packages/net/minecraft/world/level/material/$PushReaction"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$FluidState, $FluidState$Type} from "packages/net/minecraft/world/level/material/$FluidState"
import {$TreeConfiguration, $TreeConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$TreeConfiguration"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Mob, $Mob$Type} from "packages/net/minecraft/world/entity/$Mob"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$ToolAction, $ToolAction$Type} from "packages/net/minecraftforge/common/$ToolAction"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$IForgeBlock, $IForgeBlock$Type} from "packages/net/minecraftforge/common/extensions/$IForgeBlock"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$SpawnPlacements$Type, $SpawnPlacements$Type$Type} from "packages/net/minecraft/world/entity/$SpawnPlacements$Type"
import {$CreativeModeTab, $CreativeModeTab$Type} from "packages/net/minecraft/world/item/$CreativeModeTab"
import {$SignalGetter, $SignalGetter$Type} from "packages/net/minecraft/world/level/$SignalGetter"
import {$BlockPathTypes, $BlockPathTypes$Type} from "packages/net/minecraft/world/level/pathfinder/$BlockPathTypes"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$BiConsumer, $BiConsumer$Type} from "packages/java/util/function/$BiConsumer"
import {$IZetaBlock, $IZetaBlock$Type} from "packages/org/violetmoon/zeta/block/$IZetaBlock"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$UseOnContext, $UseOnContext$Type} from "packages/net/minecraft/world/item/context/$UseOnContext"
import {$HitResult, $HitResult$Type} from "packages/net/minecraft/world/phys/$HitResult"
import {$SoundType, $SoundType$Type} from "packages/net/minecraft/world/level/block/$SoundType"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$IPlantable, $IPlantable$Type} from "packages/net/minecraftforge/common/$IPlantable"
import {$IZetaBlockExtensions, $IZetaBlockExtensions$Type} from "packages/org/violetmoon/zeta/block/ext/$IZetaBlockExtensions"
import {$Rotation, $Rotation$Type} from "packages/net/minecraft/world/level/block/$Rotation"
import {$ResourceKey, $ResourceKey$Type} from "packages/net/minecraft/resources/$ResourceKey"
import {$ItemLike, $ItemLike$Type} from "packages/net/minecraft/world/level/$ItemLike"
import {$Explosion, $Explosion$Type} from "packages/net/minecraft/world/level/$Explosion"
import {$BlockAndTintGetter, $BlockAndTintGetter$Type} from "packages/net/minecraft/world/level/$BlockAndTintGetter"

export class $ZetaBlockWrapper implements $IZetaBlock, $ItemLike, $IZetaBlockExtensions, $IForgeBlock {

constructor(arg0: $Block$Type, arg1: $ZetaModule$Type)

public "getModule"(): $ZetaModule
public "getBlock"(): $Block
public "asItem"(): $Item
public "canSustainPlant"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type, arg4: $IPlantable$Type): boolean
public "isLadder"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "isConduitFrame"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): boolean
public "doesConditionApply"(): boolean
public "getEnchantPowerBonus"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type): float
public "shouldDisplayFluidOverlay"(arg0: $BlockState$Type, arg1: $BlockAndTintGetter$Type, arg2: $BlockPos$Type, arg3: $FluidState$Type): boolean
public "getToolModifiedState"(arg0: $BlockState$Type, arg1: $UseOnContext$Type, arg2: $ToolAction$Type, arg3: boolean): $BlockState
public "getBeaconColorMultiplier"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): (float)[]
public "makesOpenTrapdoorAboveClimbable"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockState$Type): boolean
public "getSoundType"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): $SoundType
public "isScaffolding"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "getLightEmission"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type): integer
public "isFlammable"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): boolean
public "canStickTo"(arg0: $BlockState$Type, arg1: $BlockState$Type): boolean
public "getFireSpreadSpeed"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "getFlammability"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "isStickyBlock"(arg0: $BlockState$Type): boolean
public "collisionExtendsVertically"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): boolean
public "getFireSpreadSpeedZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "getFlammabilityZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "setCreativeTab"(arg0: $ResourceKey$Type<($CreativeModeTab$Type)>): $Block
public "setCreativeTab"(arg0: $ResourceKey$Type<($CreativeModeTab$Type)>, arg1: $ItemLike$Type, arg2: boolean): $Block
public "isConduitFrameZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): boolean
public "isLadderZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "isStickyBlockZeta"(arg0: $BlockState$Type): boolean
public "isScaffoldingZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "canStickToZeta"(arg0: $BlockState$Type, arg1: $BlockState$Type): boolean
public "isFlammableZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): boolean
public "getSoundTypeZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): $SoundType
public "makesOpenTrapdoorAboveClimbableZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockState$Type): boolean
public "canSustainPlantZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type, arg4: string): boolean
public "getToolModifiedStateZeta"(arg0: $BlockState$Type, arg1: $UseOnContext$Type, arg2: string, arg3: boolean): $BlockState
public "collisionExtendsVerticallyZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): boolean
public "shouldDisplayFluidOverlayZeta"(arg0: $BlockState$Type, arg1: $BlockAndTintGetter$Type, arg2: $BlockPos$Type, arg3: $FluidState$Type): boolean
public "getEnchantPowerBonusZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type): float
public "getBeaconColorMultiplierZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): (float)[]
public "getLightEmissionZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type): integer
public "rotate"(arg0: $BlockState$Type, arg1: $LevelAccessor$Type, arg2: $BlockPos$Type, arg3: $Rotation$Type): $BlockState
public "isSlimeBlock"(arg0: $BlockState$Type): boolean
public "addLandingEffects"(arg0: $BlockState$Type, arg1: $ServerLevel$Type, arg2: $BlockPos$Type, arg3: $BlockState$Type, arg4: $LivingEntity$Type, arg5: integer): boolean
public "isPortalFrame"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type): boolean
public "getExpDrop"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $RandomSource$Type, arg3: $BlockPos$Type, arg4: integer, arg5: integer): integer
public "getBlockPathType"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Mob$Type): $BlockPathTypes
public "hidesNeighborFace"(arg0: $BlockGetter$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: $BlockState$Type, arg4: $Direction$Type): boolean
public "isBurning"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type): boolean
public "canHarvestBlock"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Player$Type): boolean
public "isFertile"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type): boolean
public "onTreeGrow"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BiConsumer$Type<($BlockPos$Type), ($BlockState$Type)>, arg3: $RandomSource$Type, arg4: $BlockPos$Type, arg5: $TreeConfiguration$Type): boolean
public "isValidSpawn"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $SpawnPlacements$Type$Type, arg4: $EntityType$Type<(any)>): boolean
public "onNeighborChange"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): void
public "getWeakChanges"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type): boolean
public "getRespawnPosition"(arg0: $BlockState$Type, arg1: $EntityType$Type<(any)>, arg2: $LevelReader$Type, arg3: $BlockPos$Type, arg4: float, arg5: $LivingEntity$Type): $Optional<($Vec3)>
public "getExplosionResistance"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Explosion$Type): float
public "canDropFromExplosion"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Explosion$Type): boolean
public "getPistonPushReaction"(arg0: $BlockState$Type): $PushReaction
public "getAdjacentBlockPathType"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Mob$Type, arg4: $BlockPathTypes$Type): $BlockPathTypes
public "getStateAtViewpoint"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Vec3$Type): $BlockState
public "onDestroyedByPlayer"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type, arg3: $Player$Type, arg4: boolean, arg5: $FluidState$Type): boolean
public "supportsExternalFaceHiding"(arg0: $BlockState$Type): boolean
public "getFriction"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): float
public "isBed"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): boolean
public "setBedOccupied"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type, arg4: boolean): void
public "getBedDirection"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type): $Direction
public "getCloneItemStack"(arg0: $BlockState$Type, arg1: $HitResult$Type, arg2: $BlockGetter$Type, arg3: $BlockPos$Type, arg4: $Player$Type): $ItemStack
public "addRunningEffects"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): boolean
public "onBlockStateChange"(arg0: $LevelReader$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: $BlockState$Type): void
public "shouldCheckWeakPower"(arg0: $BlockState$Type, arg1: $SignalGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): boolean
public "isFireSource"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): boolean
public "canEntityDestroy"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): boolean
public "onBlockExploded"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type, arg3: $Explosion$Type): void
public "onCaughtFire"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type, arg3: $Direction$Type, arg4: $LivingEntity$Type): void
public "canConnectRedstone"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): boolean
public "canBeHydrated"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $FluidState$Type, arg4: $BlockPos$Type): boolean
public "getMapColor"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $MapColor$Type): $MapColor
public "getAppearance"(arg0: $BlockState$Type, arg1: $BlockAndTintGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type, arg4: $BlockState$Type, arg5: $BlockPos$Type): $BlockState
public "isEnabled"(): boolean
public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
get "module"(): $ZetaModule
get "block"(): $Block
set "creativeTab"(value: $ResourceKey$Type<($CreativeModeTab$Type)>)
get "enabled"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZetaBlockWrapper$Type = ($ZetaBlockWrapper);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZetaBlockWrapper_ = $ZetaBlockWrapper$Type;
}}
declare module "packages/org/violetmoon/zeta/client/event/play/$ZCustomizeDebugText" {
import {$IZetaPlayEvent, $IZetaPlayEvent$Type} from "packages/org/violetmoon/zeta/event/bus/$IZetaPlayEvent"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Window, $Window$Type} from "packages/com/mojang/blaze3d/platform/$Window"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

/**
 * 
 * @deprecated
 */
export interface $ZCustomizeDebugText extends $IZetaPlayEvent {

/**
 * 
 * @deprecated
 */
 "getPartialTick"(): float
/**
 * 
 * @deprecated
 */
 "getRight"(): $List<(string)>
/**
 * 
 * @deprecated
 */
 "getLeft"(): $List<(string)>
/**
 * 
 * @deprecated
 */
 "getWindow"(): $Window
/**
 * 
 * @deprecated
 */
 "getGuiGraphics"(): $GuiGraphics
}

export namespace $ZCustomizeDebugText {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZCustomizeDebugText$Type = ($ZCustomizeDebugText);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZCustomizeDebugText_ = $ZCustomizeDebugText$Type;
}}
declare module "packages/org/violetmoon/quark/content/tools/module/$SeedPouchModule" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$ZEntityItemPickup, $ZEntityItemPickup$Type} from "packages/org/violetmoon/zeta/event/play/entity/$ZEntityItemPickup"
import {$ZRegister, $ZRegister$Type} from "packages/org/violetmoon/zeta/event/load/$ZRegister"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $SeedPouchModule extends $ZetaModule {
static "seed_pouch": $Item
static readonly "seedPouchHoldableTag": $TagKey<($Item)>
static readonly "seedPouchFertilizersTag": $TagKey<($Item)>
static "maxItems": integer
static "showAllVariantsInCreative": boolean
static "shiftRange": integer
static "allowFertilizer": boolean
static "fertilizerShiftRange": integer
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "register"(arg0: $ZRegister$Type): void
public "onItemPickup"(arg0: $ZEntityItemPickup$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SeedPouchModule$Type = ($SeedPouchModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SeedPouchModule_ = $SeedPouchModule$Type;
}}
declare module "packages/org/violetmoon/quark/content/mobs/item/$SoulBeadItem" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$InteractionResultHolder, $InteractionResultHolder$Type} from "packages/net/minecraft/world/$InteractionResultHolder"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$ZetaItem, $ZetaItem$Type} from "packages/org/violetmoon/zeta/item/$ZetaItem"

export class $SoulBeadItem extends $ZetaItem {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $ZetaModule$Type)

public "use"(arg0: $Level$Type, arg1: $Player$Type, arg2: $InteractionHand$Type): $InteractionResultHolder<($ItemStack)>
public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SoulBeadItem$Type = ($SoulBeadItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SoulBeadItem_ = $SoulBeadItem$Type;
}}
declare module "packages/org/violetmoon/quark/content/management/module/$QuickArmorSwappingModule" {
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZPlayerInteract$EntityInteractSpecific, $ZPlayerInteract$EntityInteractSpecific$Type} from "packages/org/violetmoon/zeta/event/play/entity/player/$ZPlayerInteract$EntityInteractSpecific"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $QuickArmorSwappingModule extends $ZetaModule {
static "swapOffHand": boolean
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "onEntityInteractSpecific"(arg0: $ZPlayerInteract$EntityInteractSpecific$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $QuickArmorSwappingModule$Type = ($QuickArmorSwappingModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $QuickArmorSwappingModule_ = $QuickArmorSwappingModule$Type;
}}
declare module "packages/org/violetmoon/quark/content/tweaks/module/$PoisonPotatoUsageModule" {
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$ZRegister, $ZRegister$Type} from "packages/org/violetmoon/zeta/event/load/$ZRegister"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ManualTrigger, $ManualTrigger$Type} from "packages/org/violetmoon/zeta/advancement/$ManualTrigger"
import {$ZLivingTick, $ZLivingTick$Type} from "packages/org/violetmoon/zeta/event/play/entity/living/$ZLivingTick"
import {$ZEntityInteract, $ZEntityInteract$Type} from "packages/org/violetmoon/zeta/event/play/entity/$ZEntityInteract"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $PoisonPotatoUsageModule extends $ZetaModule {
static "chance": double
static "poisonEffect": boolean
static "poisonBabyTrigger": $ManualTrigger
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "register"(arg0: $ZRegister$Type): void
public "onEntityUpdate"(arg0: $ZLivingTick$Type): void
public "onInteract"(arg0: $ZEntityInteract$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PoisonPotatoUsageModule$Type = ($PoisonPotatoUsageModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PoisonPotatoUsageModule_ = $PoisonPotatoUsageModule$Type;
}}
declare module "packages/org/violetmoon/quark/content/tweaks/client/emote/$EmoteSound" {
import {$EmoteTemplate, $EmoteTemplate$Type} from "packages/org/violetmoon/quark/content/tweaks/client/emote/$EmoteTemplate"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$TickableSoundInstance, $TickableSoundInstance$Type} from "packages/net/minecraft/client/resources/sounds/$TickableSoundInstance"
import {$List, $List$Type} from "packages/java/util/$List"
import {$AbstractSoundInstance, $AbstractSoundInstance$Type} from "packages/net/minecraft/client/resources/sounds/$AbstractSoundInstance"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $EmoteSound extends $AbstractSoundInstance implements $TickableSoundInstance {

constructor(arg0: $Player$Type, arg1: $EmoteTemplate$Type, arg2: $ResourceLocation$Type, arg3: float, arg4: float, arg5: boolean, arg6: boolean)

public static "add"(arg0: $List$Type<($EmoteSound$Type)>, arg1: $List$Type<($EmoteSound$Type)>, arg2: $Player$Type, arg3: $EmoteTemplate$Type, arg4: $ResourceLocation$Type, arg5: float, arg6: float, arg7: boolean, arg8: boolean): void
public "tick"(): void
public "isStopped"(): boolean
public static "endAll"(arg0: $List$Type<($EmoteSound$Type)>): void
public static "endSection"(arg0: $List$Type<($EmoteSound$Type)>): void
public static "createUnseededRandom"(): $RandomSource
get "stopped"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EmoteSound$Type = ($EmoteSound);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EmoteSound_ = $EmoteSound$Type;
}}
declare module "packages/org/violetmoon/quark/content/management/client/screen/$HeldShulkerBoxScreen" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$AbstractContainerScreen, $AbstractContainerScreen$Type} from "packages/net/minecraft/client/gui/screens/inventory/$AbstractContainerScreen"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$IQuarkButtonAllowed, $IQuarkButtonAllowed$Type} from "packages/org/violetmoon/quark/api/$IQuarkButtonAllowed"
import {$List, $List$Type} from "packages/java/util/$List"
import {$HeldShulkerBoxMenu, $HeldShulkerBoxMenu$Type} from "packages/org/violetmoon/quark/content/management/inventory/$HeldShulkerBoxMenu"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"

export class $HeldShulkerBoxScreen extends $AbstractContainerScreen<($HeldShulkerBoxMenu)> implements $IQuarkButtonAllowed {
static readonly "INVENTORY_LOCATION": $ResourceLocation
static readonly "SLOT_ITEM_BLIT_OFFSET": integer
 "imageWidth": integer
 "hoveredSlot": $Slot
 "leftPos": integer
 "topPos": integer
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering

constructor(arg0: $HeldShulkerBoxMenu$Type, arg1: $Inventory$Type, arg2: $Component$Type)

public "onClose"(): void
public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $HeldShulkerBoxScreen$Type = ($HeldShulkerBoxScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $HeldShulkerBoxScreen_ = $HeldShulkerBoxScreen$Type;
}}
declare module "packages/org/violetmoon/quark/content/tools/module/$PathfinderMapsModule" {
import {$ZWandererTrades, $ZWandererTrades$Type} from "packages/org/violetmoon/zeta/event/play/loading/$ZWandererTrades"
import {$ZVillagerTrades, $ZVillagerTrades$Type} from "packages/org/violetmoon/zeta/event/play/loading/$ZVillagerTrades"
import {$LootItemFunctionType, $LootItemFunctionType$Type} from "packages/net/minecraft/world/level/storage/loot/functions/$LootItemFunctionType"
import {$PathfinderMapsModule$TradeInfo, $PathfinderMapsModule$TradeInfo$Type} from "packages/org/violetmoon/quark/content/tools/module/$PathfinderMapsModule$TradeInfo"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$LootItemConditionType, $LootItemConditionType$Type} from "packages/net/minecraft/world/level/storage/loot/predicates/$LootItemConditionType"
import {$ZPlayerTick$Start, $ZPlayerTick$Start$Type} from "packages/org/violetmoon/zeta/event/play/entity/player/$ZPlayerTick$Start"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ZRegister, $ZRegister$Type} from "packages/org/violetmoon/zeta/event/load/$ZRegister"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ManualTrigger, $ManualTrigger$Type} from "packages/org/violetmoon/zeta/advancement/$ManualTrigger"
import {$ZLivingTick, $ZLivingTick$Type} from "packages/org/violetmoon/zeta/event/play/entity/living/$ZLivingTick"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZConfigChanged, $ZConfigChanged$Type} from "packages/org/violetmoon/zeta/event/load/$ZConfigChanged"

export class $PathfinderMapsModule extends $ZetaModule {
static readonly "TAG_IS_PATHFINDER": string
static "builtinTrades": $List<($PathfinderMapsModule$TradeInfo)>
static "customTrades": $List<($PathfinderMapsModule$TradeInfo)>
static "tradeList": $List<($PathfinderMapsModule$TradeInfo)>
static "pathfinderMapType": $LootItemFunctionType
static "inBiomeConditionType": $LootItemConditionType
static "pathfinderMapTrigger": $ManualTrigger
static "pathfinders_quill": $Item
static "applyDefaultTrades": boolean
static "pathfindersQuillSpeed": integer
static "multiThreaded": boolean
static "allowRetrying": boolean
static "searchRadius": integer
static "xpFromTrade": integer
static "addToCartographer": boolean
static "addToWanderingTraderForced": boolean
static "addToWanderingTraderGeneric": boolean
static "addToWanderingTraderRare": boolean
static "drawHud": boolean
static "hudOnTop": boolean
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "register"(arg0: $ZRegister$Type): void
public "onWandererTradesLoaded"(arg0: $ZWandererTrades$Type): void
public "onTradesLoaded"(arg0: $ZVillagerTrades$Type): void
public "playerTick"(arg0: $ZPlayerTick$Start$Type): void
public "configChanged"(arg0: $ZConfigChanged$Type): void
public "livingTick"(arg0: $ZLivingTick$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PathfinderMapsModule$Type = ($PathfinderMapsModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PathfinderMapsModule_ = $PathfinderMapsModule$Type;
}}
declare module "packages/org/violetmoon/quark/content/world/module/$BigStoneClustersModule" {
import {$BigStoneClusterConfig, $BigStoneClusterConfig$Type} from "packages/org/violetmoon/quark/content/world/config/$BigStoneClusterConfig"
import {$BiPredicate, $BiPredicate$Type} from "packages/java/util/function/$BiPredicate"
import {$ZGatherHints, $ZGatherHints$Type} from "packages/org/violetmoon/zeta/event/play/loading/$ZGatherHints"
import {$ZCommonSetup, $ZCommonSetup$Type} from "packages/org/violetmoon/zeta/event/load/$ZCommonSetup"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$AirStoneClusterConfig, $AirStoneClusterConfig$Type} from "packages/org/violetmoon/quark/content/world/config/$AirStoneClusterConfig"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZConfigChanged, $ZConfigChanged$Type} from "packages/org/violetmoon/zeta/event/load/$ZConfigChanged"

export class $BigStoneClustersModule extends $ZetaModule {
static "calcite": $BigStoneClusterConfig
static "limestone": $BigStoneClusterConfig
static "jasper": $BigStoneClusterConfig
static "shale": $BigStoneClusterConfig
static "myalite": $AirStoneClusterConfig
static "blocksToReplace": $List<(string)>
static "blockReplacePredicate": $BiPredicate<($Level), ($Block)>
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "setup"(arg0: $ZCommonSetup$Type): void
public "addAdditionalHints"(arg0: $ZGatherHints$Type): void
public "configChanged"(arg0: $ZConfigChanged$Type): void
set "up"(value: $ZCommonSetup$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BigStoneClustersModule$Type = ($BigStoneClustersModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BigStoneClustersModule_ = $BigStoneClustersModule$Type;
}}
declare module "packages/org/violetmoon/quark/content/mobs/item/$DiamondHeartItem" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$UseOnContext, $UseOnContext$Type} from "packages/net/minecraft/world/item/context/$UseOnContext"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Rarity, $Rarity$Type} from "packages/net/minecraft/world/item/$Rarity"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$ZetaItem, $ZetaItem$Type} from "packages/org/violetmoon/zeta/item/$ZetaItem"

export class $DiamondHeartItem extends $ZetaItem {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: string, arg1: $ZetaModule$Type, arg2: $Item$Properties$Type)

public "useOn"(arg0: $UseOnContext$Type): $InteractionResult
public "isFoil"(arg0: $ItemStack$Type): boolean
public "getRarity"(arg0: $ItemStack$Type): $Rarity
public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DiamondHeartItem$Type = ($DiamondHeartItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DiamondHeartItem_ = $DiamondHeartItem$Type;
}}
declare module "packages/org/violetmoon/quark/api/event/$UsageTickerEvent$GetCount" {
import {$ListenerList, $ListenerList$Type} from "packages/net/minecraftforge/eventbus/$ListenerList"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$UsageTickerEvent, $UsageTickerEvent$Type} from "packages/org/violetmoon/quark/api/event/$UsageTickerEvent"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$UsageTickerEvent$Pass, $UsageTickerEvent$Pass$Type} from "packages/org/violetmoon/quark/api/event/$UsageTickerEvent$Pass"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export class $UsageTickerEvent$GetCount extends $UsageTickerEvent {
readonly "slot": $EquipmentSlot
readonly "currentStack": $ItemStack
readonly "currentRealStack": $ItemStack
readonly "currentCount": integer
readonly "pass": $UsageTickerEvent$Pass
readonly "player": $Player

constructor()
constructor(arg0: $EquipmentSlot$Type, arg1: $ItemStack$Type, arg2: $ItemStack$Type, arg3: integer, arg4: boolean, arg5: $Player$Type)

public "getResultCount"(): integer
public "setResultCount"(arg0: integer): void
public "getListenerList"(): $ListenerList
get "resultCount"(): integer
set "resultCount"(value: integer)
get "listenerList"(): $ListenerList
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $UsageTickerEvent$GetCount$Type = ($UsageTickerEvent$GetCount);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $UsageTickerEvent$GetCount_ = $UsageTickerEvent$GetCount$Type;
}}
declare module "packages/org/violetmoon/quark/content/client/module/$BucketsShowInhabitantsModule" {
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $BucketsShowInhabitantsModule extends $ZetaModule {
 "showAxolotls": boolean
 "showCrabs": boolean
 "showTropicalFish": boolean
 "showShinySlime": boolean
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BucketsShowInhabitantsModule$Type = ($BucketsShowInhabitantsModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BucketsShowInhabitantsModule_ = $BucketsShowInhabitantsModule$Type;
}}
declare module "packages/org/violetmoon/quark/addons/oddities/block/$TinyPotatoBlock" {
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$Fluid, $Fluid$Type} from "packages/net/minecraft/world/level/material/$Fluid"
import {$EntityBlock, $EntityBlock$Type} from "packages/net/minecraft/world/level/block/$EntityBlock"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$SimpleWaterloggedBlock, $SimpleWaterloggedBlock$Type} from "packages/net/minecraft/world/level/block/$SimpleWaterloggedBlock"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$FluidState, $FluidState$Type} from "packages/net/minecraft/world/level/material/$FluidState"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$IZetaBlockItemProvider, $IZetaBlockItemProvider$Type} from "packages/org/violetmoon/zeta/registry/$IZetaBlockItemProvider"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$ZetaBlock, $ZetaBlock$Type} from "packages/org/violetmoon/zeta/block/$ZetaBlock"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"
import {$DirectionProperty, $DirectionProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$DirectionProperty"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$CollisionContext, $CollisionContext$Type} from "packages/net/minecraft/world/phys/shapes/$CollisionContext"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$BlockItem, $BlockItem$Type} from "packages/net/minecraft/world/item/$BlockItem"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$BlockEntityTicker, $BlockEntityTicker$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityTicker"
import {$GameEventListener, $GameEventListener$Type} from "packages/net/minecraft/world/level/gameevent/$GameEventListener"
import {$RenderShape, $RenderShape$Type} from "packages/net/minecraft/world/level/block/$RenderShape"

export class $TinyPotatoBlock extends $ZetaBlock implements $SimpleWaterloggedBlock, $EntityBlock, $IZetaBlockItemProvider {
static readonly "HORIZONTAL_FACING": $DirectionProperty
static readonly "WATERLOGGED": $BooleanProperty
static readonly "ANGRY": string
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(arg0: $ZetaModule$Type)

public "getTicker"<T extends $BlockEntity>(arg0: $Level$Type, arg1: $BlockState$Type, arg2: $BlockEntityType$Type<(T)>): $BlockEntityTicker<(T)>
public "provideItemBlock"(arg0: $Block$Type, arg1: $Item$Properties$Type): $BlockItem
public "getStateForPlacement"(arg0: $BlockPlaceContext$Type): $BlockState
public "setPlacedBy"(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: $LivingEntity$Type, arg4: $ItemStack$Type): void
public "getCloneItemStack"(arg0: $BlockGetter$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type): $ItemStack
public static "isAngry"(arg0: $ItemStack$Type): boolean
public "updateShape"(arg0: $BlockState$Type, arg1: $Direction$Type, arg2: $BlockState$Type, arg3: $LevelAccessor$Type, arg4: $BlockPos$Type, arg5: $BlockPos$Type): $BlockState
public "triggerEvent"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type, arg3: integer, arg4: integer): boolean
public "use"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type, arg3: $Player$Type, arg4: $InteractionHand$Type, arg5: $BlockHitResult$Type): $InteractionResult
public "getRenderShape"(arg0: $BlockState$Type): $RenderShape
public "hasAnalogOutputSignal"(arg0: $BlockState$Type): boolean
public "onRemove"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type, arg3: $BlockState$Type, arg4: boolean): void
public "getFluidState"(arg0: $BlockState$Type): $FluidState
public "getAnalogOutputSignal"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type): integer
public "getShape"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $CollisionContext$Type): $VoxelShape
public "newBlockEntity"(arg0: $BlockPos$Type, arg1: $BlockState$Type): $BlockEntity
public "getPickupSound"(): $Optional<($SoundEvent)>
public "canPlaceLiquid"(arg0: $BlockGetter$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: $Fluid$Type): boolean
public "placeLiquid"(arg0: $LevelAccessor$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: $FluidState$Type): boolean
public "pickupBlock"(arg0: $LevelAccessor$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type): $ItemStack
public "getListener"<T extends $BlockEntity>(arg0: $ServerLevel$Type, arg1: T): $GameEventListener
public "getPickupSound"(arg0: $BlockState$Type): $Optional<($SoundEvent)>
public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
get "pickupSound"(): $Optional<($SoundEvent)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TinyPotatoBlock$Type = ($TinyPotatoBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TinyPotatoBlock_ = $TinyPotatoBlock$Type;
}}
declare module "packages/org/violetmoon/quark/content/building/block/$VerticalSlabBlock" {
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$Fluid, $Fluid$Type} from "packages/net/minecraft/world/level/material/$Fluid"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$SimpleWaterloggedBlock, $SimpleWaterloggedBlock$Type} from "packages/net/minecraft/world/level/block/$SimpleWaterloggedBlock"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$Mirror, $Mirror$Type} from "packages/net/minecraft/world/level/block/$Mirror"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$FuelHandler$ICustomWoodFuelValue, $FuelHandler$ICustomWoodFuelValue$Type} from "packages/org/violetmoon/zeta/util/handler/$FuelHandler$ICustomWoodFuelValue"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$FluidState, $FluidState$Type} from "packages/net/minecraft/world/level/material/$FluidState"
import {$PathComputationType, $PathComputationType$Type} from "packages/net/minecraft/world/level/pathfinder/$PathComputationType"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$ToolAction, $ToolAction$Type} from "packages/net/minecraftforge/common/$ToolAction"
import {$IForgeBlock, $IForgeBlock$Type} from "packages/net/minecraftforge/common/extensions/$IForgeBlock"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$CollisionContext, $CollisionContext$Type} from "packages/net/minecraft/world/phys/shapes/$CollisionContext"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$UseOnContext, $UseOnContext$Type} from "packages/net/minecraft/world/item/context/$UseOnContext"
import {$EnumProperty, $EnumProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$EnumProperty"
import {$IZetaBlockColorProvider, $IZetaBlockColorProvider$Type} from "packages/org/violetmoon/zeta/registry/$IZetaBlockColorProvider"
import {$VerticalSlabBlock$VerticalSlabType, $VerticalSlabBlock$VerticalSlabType$Type} from "packages/org/violetmoon/quark/content/building/block/$VerticalSlabBlock$VerticalSlabType"
import {$SoundType, $SoundType$Type} from "packages/net/minecraft/world/level/block/$SoundType"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$IPlantable, $IPlantable$Type} from "packages/net/minecraftforge/common/$IPlantable"
import {$IZetaBlockExtensions, $IZetaBlockExtensions$Type} from "packages/org/violetmoon/zeta/block/ext/$IZetaBlockExtensions"
import {$Rotation, $Rotation$Type} from "packages/net/minecraft/world/level/block/$Rotation"
import {$BlockAndTintGetter, $BlockAndTintGetter$Type} from "packages/net/minecraft/world/level/$BlockAndTintGetter"

export class $VerticalSlabBlock extends $Block implements $SimpleWaterloggedBlock, $IZetaBlockColorProvider, $IZetaBlockExtensions, $FuelHandler$ICustomWoodFuelValue, $IForgeBlock {
static readonly "TYPE": $EnumProperty<($VerticalSlabBlock$VerticalSlabType)>
static readonly "WATERLOGGED": $BooleanProperty
readonly "parent": $Supplier<($Block)>
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(arg0: $Supplier$Type<($Block$Type)>, arg1: $BlockBehaviour$Properties$Type)

public "isFlammableZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): boolean
public "getStateForPlacement"(arg0: $BlockPlaceContext$Type): $BlockState
public "canSustainPlant"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type, arg4: $IPlantable$Type): boolean
public "isLadder"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "isConduitFrame"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): boolean
public "getBurnTimeInTicksWhenWooden"(): integer
public "getEnchantPowerBonus"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type): float
public "shouldDisplayFluidOverlay"(arg0: $BlockState$Type, arg1: $BlockAndTintGetter$Type, arg2: $BlockPos$Type, arg3: $FluidState$Type): boolean
public "getToolModifiedState"(arg0: $BlockState$Type, arg1: $UseOnContext$Type, arg2: $ToolAction$Type, arg3: boolean): $BlockState
public "getBeaconColorMultiplier"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): (float)[]
public "makesOpenTrapdoorAboveClimbable"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockState$Type): boolean
public "getSoundType"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): $SoundType
public "isScaffolding"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "getLightEmission"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type): integer
public "getBlockColorProviderName"(): string
public "getItemColorProviderName"(): string
public "getFlammabilityZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "isFlammable"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): boolean
public "canStickTo"(arg0: $BlockState$Type, arg1: $BlockState$Type): boolean
public "getFireSpreadSpeed"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "getFlammability"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "isStickyBlock"(arg0: $BlockState$Type): boolean
public "isPathfindable"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $PathComputationType$Type): boolean
public "updateShape"(arg0: $BlockState$Type, arg1: $Direction$Type, arg2: $BlockState$Type, arg3: $LevelAccessor$Type, arg4: $BlockPos$Type, arg5: $BlockPos$Type): $BlockState
public "useShapeForLightOcclusion"(arg0: $BlockState$Type): boolean
public "getFluidState"(arg0: $BlockState$Type): $FluidState
public "canBeReplaced"(arg0: $BlockState$Type, arg1: $BlockPlaceContext$Type): boolean
public "rotate"(arg0: $BlockState$Type, arg1: $Rotation$Type): $BlockState
public "mirror"(arg0: $BlockState$Type, arg1: $Mirror$Type): $BlockState
public "getShape"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $CollisionContext$Type): $VoxelShape
public "canPlaceLiquid"(arg0: $BlockGetter$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: $Fluid$Type): boolean
public "placeLiquid"(arg0: $LevelAccessor$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: $FluidState$Type): boolean
public "collisionExtendsVertically"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): boolean
public "getPickupSound"(): $Optional<($SoundEvent)>
public "pickupBlock"(arg0: $LevelAccessor$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type): $ItemStack
public "isConduitFrameZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): boolean
public "isLadderZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "isStickyBlockZeta"(arg0: $BlockState$Type): boolean
public "isScaffoldingZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "canStickToZeta"(arg0: $BlockState$Type, arg1: $BlockState$Type): boolean
public "getSoundTypeZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): $SoundType
public "makesOpenTrapdoorAboveClimbableZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockState$Type): boolean
public "canSustainPlantZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type, arg4: string): boolean
public "getFireSpreadSpeedZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "getToolModifiedStateZeta"(arg0: $BlockState$Type, arg1: $UseOnContext$Type, arg2: string, arg3: boolean): $BlockState
public "collisionExtendsVerticallyZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): boolean
public "shouldDisplayFluidOverlayZeta"(arg0: $BlockState$Type, arg1: $BlockAndTintGetter$Type, arg2: $BlockPos$Type, arg3: $FluidState$Type): boolean
public "getEnchantPowerBonusZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type): float
public "getBeaconColorMultiplierZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): (float)[]
public "getLightEmissionZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type): integer
public "getPickupSound"(arg0: $BlockState$Type): $Optional<($SoundEvent)>
get "burnTimeInTicksWhenWooden"(): integer
get "blockColorProviderName"(): string
get "itemColorProviderName"(): string
get "pickupSound"(): $Optional<($SoundEvent)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $VerticalSlabBlock$Type = ($VerticalSlabBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $VerticalSlabBlock_ = $VerticalSlabBlock$Type;
}}
declare module "packages/org/violetmoon/quark/addons/oddities/block/pipe/$CopperPipeBlock" {
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$Fluid, $Fluid$Type} from "packages/net/minecraft/world/level/material/$Fluid"
import {$BasePipeBlock, $BasePipeBlock$Type} from "packages/org/violetmoon/quark/addons/oddities/block/pipe/$BasePipeBlock"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$SimpleWaterloggedBlock, $SimpleWaterloggedBlock$Type} from "packages/net/minecraft/world/level/block/$SimpleWaterloggedBlock"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$FluidState, $FluidState$Type} from "packages/net/minecraft/world/level/material/$FluidState"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$CollisionContext, $CollisionContext$Type} from "packages/net/minecraft/world/phys/shapes/$CollisionContext"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"

export class $CopperPipeBlock extends $BasePipeBlock implements $SimpleWaterloggedBlock {
static readonly "WATERLOGGED": $BooleanProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(arg0: $ZetaModule$Type)

public "updateShape"(arg0: $BlockState$Type, arg1: $Direction$Type, arg2: $BlockState$Type, arg3: $LevelAccessor$Type, arg4: $BlockPos$Type, arg5: $BlockPos$Type): $BlockState
public "use"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type, arg3: $Player$Type, arg4: $InteractionHand$Type, arg5: $BlockHitResult$Type): $InteractionResult
public "getFluidState"(arg0: $BlockState$Type): $FluidState
public "getShape"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $CollisionContext$Type): $VoxelShape
public "getDefaultPipeState"(): $BlockState
public "getPickupSound"(): $Optional<($SoundEvent)>
public "canPlaceLiquid"(arg0: $BlockGetter$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: $Fluid$Type): boolean
public "placeLiquid"(arg0: $LevelAccessor$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: $FluidState$Type): boolean
public "pickupBlock"(arg0: $LevelAccessor$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type): $ItemStack
public "getPickupSound"(arg0: $BlockState$Type): $Optional<($SoundEvent)>
public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
get "defaultPipeState"(): $BlockState
get "pickupSound"(): $Optional<($SoundEvent)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CopperPipeBlock$Type = ($CopperPipeBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CopperPipeBlock_ = $CopperPipeBlock$Type;
}}
declare module "packages/org/violetmoon/quark/addons/oddities/block/be/$MagnetBlockEntity" {
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $MagnetBlockEntity extends $BlockEntity {
 "blockState": $BlockState

constructor(arg0: $BlockPos$Type, arg1: $BlockState$Type)

public static "tick"(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: $MagnetBlockEntity$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MagnetBlockEntity$Type = ($MagnetBlockEntity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MagnetBlockEntity_ = $MagnetBlockEntity$Type;
}}
declare module "packages/org/violetmoon/quark/content/tools/item/$PathfindersQuillItem" {
import {$CreativeTabManager$AppendsUniquely, $CreativeTabManager$AppendsUniquely$Type} from "packages/org/violetmoon/zeta/registry/$CreativeTabManager$AppendsUniquely"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$InteractionResultHolder, $InteractionResultHolder$Type} from "packages/net/minecraft/world/$InteractionResultHolder"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$ZetaItem, $ZetaItem$Type} from "packages/org/violetmoon/zeta/item/$ZetaItem"

export class $PathfindersQuillItem extends $ZetaItem implements $CreativeTabManager$AppendsUniquely {
static readonly "TAG_BIOME": string
static readonly "TAG_COLOR": string
static readonly "TAG_UNDERGROUND": string
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $ZetaModule$Type, arg1: $Item$Properties$Type)
constructor(arg0: $ZetaModule$Type)

public "getTarget"(arg0: $ItemStack$Type): $ResourceLocation
public "createMap"(arg0: $ServerLevel$Type, arg1: $BlockPos$Type, arg2: $ResourceLocation$Type, arg3: $ItemStack$Type): $ItemStack
public static "setBiome"(arg0: $ItemStack$Type, arg1: string, arg2: integer, arg3: boolean): void
public static "getSearchingComponent"(): $MutableComponent
public "use"(arg0: $Level$Type, arg1: $Player$Type, arg2: $InteractionHand$Type): $InteractionResultHolder<($ItemStack)>
public "inventoryTick"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $Entity$Type, arg3: integer, arg4: boolean): void
public "appendHoverText"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
public static "forBiome"(arg0: string, arg1: integer): $ItemStack
public "shouldCauseReequipAnimationZeta"(arg0: $ItemStack$Type, arg1: $ItemStack$Type, arg2: boolean): boolean
public static "getOverlayColor"(arg0: $ItemStack$Type): integer
public static "getActiveQuill"(arg0: $Player$Type): $ItemStack
public static "getTargetBiome"(arg0: $ItemStack$Type): $ResourceLocation
public "appendItemsToCreativeTab"(): $List<($ItemStack)>
public "asItem"(): $Item
public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
get "searchingComponent"(): $MutableComponent
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PathfindersQuillItem$Type = ($PathfindersQuillItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PathfindersQuillItem_ = $PathfindersQuillItem$Type;
}}
declare module "packages/org/violetmoon/quark/base/network/message/oddities/$ScrollCrateMessage" {
import {$IZetaMessage, $IZetaMessage$Type} from "packages/org/violetmoon/zeta/network/$IZetaMessage"
import {$IZetaNetworkEventContext, $IZetaNetworkEventContext$Type} from "packages/org/violetmoon/zeta/network/$IZetaNetworkEventContext"

export class $ScrollCrateMessage implements $IZetaMessage {
 "down": boolean

constructor()
constructor(arg0: boolean)

public "receive"(arg0: $IZetaNetworkEventContext$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ScrollCrateMessage$Type = ($ScrollCrateMessage);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ScrollCrateMessage_ = $ScrollCrateMessage$Type;
}}
declare module "packages/org/violetmoon/quark/content/tools/item/$TrowelItem" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$IUsageTickerOverride, $IUsageTickerOverride$Type} from "packages/org/violetmoon/quark/api/$IUsageTickerOverride"
import {$UseOnContext, $UseOnContext$Type} from "packages/net/minecraft/world/item/context/$UseOnContext"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$ZetaItem, $ZetaItem$Type} from "packages/org/violetmoon/zeta/item/$ZetaItem"

export class $TrowelItem extends $ZetaItem implements $IUsageTickerOverride {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $ZetaModule$Type)

public "getMaxDamageZeta"(arg0: $ItemStack$Type): integer
public "useOn"(arg0: $UseOnContext$Type): $InteractionResult
public "canBeDepleted"(): boolean
public "getUsageTickerItem"(arg0: $ItemStack$Type): $ItemStack
public static "getLastStack"(arg0: $ItemStack$Type): $ItemStack
public "getUsageTickerCountForItem"(arg0: $ItemStack$Type, arg1: $Predicate$Type<($ItemStack$Type)>): integer
public "shouldUsageTickerCheckMatchSize"(arg0: $ItemStack$Type): boolean
public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TrowelItem$Type = ($TrowelItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TrowelItem_ = $TrowelItem$Type;
}}
declare module "packages/org/violetmoon/quark/addons/oddities/client/particle/$MagnetParticle" {
import {$ClientLevel, $ClientLevel$Type} from "packages/net/minecraft/client/multiplayer/$ClientLevel"
import {$ParticleRenderType, $ParticleRenderType$Type} from "packages/net/minecraft/client/particle/$ParticleRenderType"
import {$VertexConsumer, $VertexConsumer$Type} from "packages/com/mojang/blaze3d/vertex/$VertexConsumer"
import {$Camera, $Camera$Type} from "packages/net/minecraft/client/$Camera"
import {$TextureSheetParticle, $TextureSheetParticle$Type} from "packages/net/minecraft/client/particle/$TextureSheetParticle"

export class $MagnetParticle extends $TextureSheetParticle {
 "x": double
 "y": double
 "z": double
 "xd": double
 "yd": double
 "zd": double
 "age": integer
 "rCol": float
 "gCol": float
 "bCol": float

constructor(arg0: $ClientLevel$Type, arg1: double, arg2: double, arg3: double, arg4: double, arg5: double, arg6: double)

public "m_6355_"(arg0: float): integer
public "move"(arg0: double, arg1: double, arg2: double): void
public "getQuadSize"(arg0: float): float
public "getRenderType"(): $ParticleRenderType
public "tick"(): void
public "render"(arg0: $VertexConsumer$Type, arg1: $Camera$Type, arg2: float): void
get "renderType"(): $ParticleRenderType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MagnetParticle$Type = ($MagnetParticle);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MagnetParticle_ = $MagnetParticle$Type;
}}
declare module "packages/org/violetmoon/quark/content/tools/item/$BottledCloudItem" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$InteractionResultHolder, $InteractionResultHolder$Type} from "packages/net/minecraft/world/$InteractionResultHolder"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$ZetaItem, $ZetaItem$Type} from "packages/org/violetmoon/zeta/item/$ZetaItem"

export class $BottledCloudItem extends $ZetaItem {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $ZetaModule$Type)

public "use"(arg0: $Level$Type, arg1: $Player$Type, arg2: $InteractionHand$Type): $InteractionResultHolder<($ItemStack)>
public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BottledCloudItem$Type = ($BottledCloudItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BottledCloudItem_ = $BottledCloudItem$Type;
}}
declare module "packages/org/violetmoon/zeta/event/play/$ZRecipeCrawl$Visit$Shaped" {
import {$RegistryAccess, $RegistryAccess$Type} from "packages/net/minecraft/core/$RegistryAccess"
import {$ShapedRecipe, $ShapedRecipe$Type} from "packages/net/minecraft/world/item/crafting/$ShapedRecipe"
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$Ingredient, $Ingredient$Type} from "packages/net/minecraft/world/item/crafting/$Ingredient"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Recipe, $Recipe$Type} from "packages/net/minecraft/world/item/crafting/$Recipe"
import {$ZRecipeCrawl$Visit, $ZRecipeCrawl$Visit$Type} from "packages/org/violetmoon/zeta/event/play/$ZRecipeCrawl$Visit"

export class $ZRecipeCrawl$Visit$Shaped extends $ZRecipeCrawl$Visit<($ShapedRecipe)> {
readonly "recipe": T
readonly "recipeID": $ResourceLocation
readonly "output": $ItemStack
readonly "ingredients": $NonNullList<($Ingredient)>

constructor(arg0: $ShapedRecipe$Type, arg1: $RegistryAccess$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZRecipeCrawl$Visit$Shaped$Type = ($ZRecipeCrawl$Visit$Shaped);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZRecipeCrawl$Visit$Shaped_ = $ZRecipeCrawl$Visit$Shaped$Type;
}}
declare module "packages/org/violetmoon/zeta/event/load/$ZEntityAttributeCreation" {
import {$AttributeSupplier, $AttributeSupplier$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeSupplier"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$IZetaLoadEvent, $IZetaLoadEvent$Type} from "packages/org/violetmoon/zeta/event/bus/$IZetaLoadEvent"

export interface $ZEntityAttributeCreation extends $IZetaLoadEvent {

 "put"(arg0: $EntityType$Type<(any)>, arg1: $AttributeSupplier$Type): void

(arg0: $EntityType$Type<(any)>, arg1: $AttributeSupplier$Type): void
}

export namespace $ZEntityAttributeCreation {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZEntityAttributeCreation$Type = ($ZEntityAttributeCreation);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZEntityAttributeCreation_ = $ZEntityAttributeCreation$Type;
}}
declare module "packages/org/violetmoon/quark/content/world/undergroundstyle/base/$UndergroundStyleGenerator" {
import {$ClusterShape$Provider, $ClusterShape$Provider$Type} from "packages/org/violetmoon/zeta/world/generator/multichunk/$ClusterShape$Provider"
import {$ClusterBasedGenerator$IGenerationContext, $ClusterBasedGenerator$IGenerationContext$Type} from "packages/org/violetmoon/zeta/world/generator/multichunk/$ClusterBasedGenerator$IGenerationContext"
import {$ChunkGenerator, $ChunkGenerator$Type} from "packages/net/minecraft/world/level/chunk/$ChunkGenerator"
import {$DimensionConfig, $DimensionConfig$Type} from "packages/org/violetmoon/zeta/config/type/$DimensionConfig"
import {$UndergroundStyleConfig, $UndergroundStyleConfig$Type} from "packages/org/violetmoon/quark/content/world/undergroundstyle/base/$UndergroundStyleConfig"
import {$WorldGenRegion, $WorldGenRegion$Type} from "packages/net/minecraft/server/level/$WorldGenRegion"
import {$Random, $Random$Type} from "packages/java/util/$Random"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$ClusterBasedGenerator, $ClusterBasedGenerator$Type} from "packages/org/violetmoon/zeta/world/generator/multichunk/$ClusterBasedGenerator"

export class $UndergroundStyleGenerator extends $ClusterBasedGenerator {
readonly "info": $UndergroundStyleConfig
readonly "shapeProvider": $ClusterShape$Provider
readonly "dimConfig": $DimensionConfig

constructor(arg0: $UndergroundStyleConfig$Type, arg1: string)

public "toString"(): string
public "getSourcesInChunk"(arg0: $WorldGenRegion$Type, arg1: $Random$Type, arg2: $ChunkGenerator$Type, arg3: $BlockPos$Type): ($BlockPos)[]
public "getFeatureRadius"(): integer
public "createContext"(arg0: $BlockPos$Type, arg1: $ChunkGenerator$Type, arg2: $Random$Type, arg3: $BlockPos$Type, arg4: $WorldGenRegion$Type): $ClusterBasedGenerator$IGenerationContext
get "featureRadius"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $UndergroundStyleGenerator$Type = ($UndergroundStyleGenerator);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $UndergroundStyleGenerator_ = $UndergroundStyleGenerator$Type;
}}
declare module "packages/org/violetmoon/quark/base/client/handler/$ClientUtil" {
import {$Font, $Font$Type} from "packages/net/minecraft/client/gui/$Font"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$ZConfigChanged, $ZConfigChanged$Type} from "packages/org/violetmoon/zeta/event/load/$ZConfigChanged"
import {$ZScreen$KeyPressed$Pre, $ZScreen$KeyPressed$Pre$Type} from "packages/org/violetmoon/zeta/client/event/play/$ZScreen$KeyPressed$Pre"

export class $ClientUtil {
static readonly "GENERAL_ICONS": $ResourceLocation

constructor()

public static "handleQuarkConfigChange"(arg0: $ZConfigChanged$Type): void
public static "onKeystroke"(arg0: $ZScreen$KeyPressed$Pre$Type): void
public static "getGuiTextColor"(arg0: string, arg1: integer): integer
public static "getGuiTextColor"(arg0: string): integer
public static "drawChatBubble"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: $Font$Type, arg4: string, arg5: float, arg6: boolean): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientUtil$Type = ($ClientUtil);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientUtil_ = $ClientUtil$Type;
}}
declare module "packages/org/violetmoon/quark/base/network/message/$ShareItemC2SMessage" {
import {$IZetaMessage, $IZetaMessage$Type} from "packages/org/violetmoon/zeta/network/$IZetaMessage"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$IZetaNetworkEventContext, $IZetaNetworkEventContext$Type} from "packages/org/violetmoon/zeta/network/$IZetaNetworkEventContext"

export class $ShareItemC2SMessage implements $IZetaMessage {
 "toShare": $ItemStack

constructor()
constructor(arg0: $ItemStack$Type)

public "receive"(arg0: $IZetaNetworkEventContext$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ShareItemC2SMessage$Type = ($ShareItemC2SMessage);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ShareItemC2SMessage_ = $ShareItemC2SMessage$Type;
}}
declare module "packages/org/violetmoon/zeta/event/load/$ZRegister$Post" {
import {$IZetaLoadEvent, $IZetaLoadEvent$Type} from "packages/org/violetmoon/zeta/event/bus/$IZetaLoadEvent"

export class $ZRegister$Post implements $IZetaLoadEvent {

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZRegister$Post$Type = ($ZRegister$Post);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZRegister$Post_ = $ZRegister$Post$Type;
}}
declare module "packages/org/violetmoon/zeta/block/$ZetaLeavesBlock" {
import {$IntegerProperty, $IntegerProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$IntegerProperty"
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$MapColor, $MapColor$Type} from "packages/net/minecraft/world/level/material/$MapColor"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$FluidState, $FluidState$Type} from "packages/net/minecraft/world/level/material/$FluidState"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$ToolAction, $ToolAction$Type} from "packages/net/minecraftforge/common/$ToolAction"
import {$IForgeBlock, $IForgeBlock$Type} from "packages/net/minecraftforge/common/extensions/$IForgeBlock"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$CreativeModeTab, $CreativeModeTab$Type} from "packages/net/minecraft/world/item/$CreativeModeTab"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$LeavesBlock, $LeavesBlock$Type} from "packages/net/minecraft/world/level/block/$LeavesBlock"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$IZetaBlock, $IZetaBlock$Type} from "packages/org/violetmoon/zeta/block/$IZetaBlock"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$UseOnContext, $UseOnContext$Type} from "packages/net/minecraft/world/item/context/$UseOnContext"
import {$SoundType, $SoundType$Type} from "packages/net/minecraft/world/level/block/$SoundType"
import {$IPlantable, $IPlantable$Type} from "packages/net/minecraftforge/common/$IPlantable"
import {$IZetaBlockExtensions, $IZetaBlockExtensions$Type} from "packages/org/violetmoon/zeta/block/ext/$IZetaBlockExtensions"
import {$ResourceKey, $ResourceKey$Type} from "packages/net/minecraft/resources/$ResourceKey"
import {$ItemLike, $ItemLike$Type} from "packages/net/minecraft/world/level/$ItemLike"
import {$BlockAndTintGetter, $BlockAndTintGetter$Type} from "packages/net/minecraft/world/level/$BlockAndTintGetter"

export class $ZetaLeavesBlock extends $LeavesBlock implements $IZetaBlock, $IZetaBlockExtensions, $IForgeBlock {
static readonly "DECAY_DISTANCE": integer
static readonly "DISTANCE": $IntegerProperty
static readonly "PERSISTENT": $BooleanProperty
static readonly "WATERLOGGED": $BooleanProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(arg0: string, arg1: $ZetaModule$Type, arg2: $MapColor$Type)

public "getModule"(): $ZetaModule
public "canSustainPlant"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type, arg4: $IPlantable$Type): boolean
public "isLadder"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "isConduitFrame"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): boolean
public "doesConditionApply"(): boolean
public "getEnchantPowerBonus"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type): float
public "shouldDisplayFluidOverlay"(arg0: $BlockState$Type, arg1: $BlockAndTintGetter$Type, arg2: $BlockPos$Type, arg3: $FluidState$Type): boolean
public "getToolModifiedState"(arg0: $BlockState$Type, arg1: $UseOnContext$Type, arg2: $ToolAction$Type, arg3: boolean): $BlockState
public "getBeaconColorMultiplier"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): (float)[]
public "makesOpenTrapdoorAboveClimbable"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockState$Type): boolean
public "getSoundType"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): $SoundType
public "isScaffolding"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "getLightEmission"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type): integer
public "isFlammable"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): boolean
public "canStickTo"(arg0: $BlockState$Type, arg1: $BlockState$Type): boolean
public "getFireSpreadSpeed"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "getFlammability"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "isStickyBlock"(arg0: $BlockState$Type): boolean
public "collisionExtendsVertically"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): boolean
public "getBlock"(): $Block
public "getFireSpreadSpeedZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "getFlammabilityZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "setCreativeTab"(arg0: $ResourceKey$Type<($CreativeModeTab$Type)>): $Block
public "setCreativeTab"(arg0: $ResourceKey$Type<($CreativeModeTab$Type)>, arg1: $ItemLike$Type, arg2: boolean): $Block
public "isConduitFrameZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): boolean
public "isLadderZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "isStickyBlockZeta"(arg0: $BlockState$Type): boolean
public "isScaffoldingZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "canStickToZeta"(arg0: $BlockState$Type, arg1: $BlockState$Type): boolean
public "isFlammableZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): boolean
public "getSoundTypeZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): $SoundType
public "makesOpenTrapdoorAboveClimbableZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockState$Type): boolean
public "canSustainPlantZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type, arg4: string): boolean
public "getToolModifiedStateZeta"(arg0: $BlockState$Type, arg1: $UseOnContext$Type, arg2: string, arg3: boolean): $BlockState
public "collisionExtendsVerticallyZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): boolean
public "shouldDisplayFluidOverlayZeta"(arg0: $BlockState$Type, arg1: $BlockAndTintGetter$Type, arg2: $BlockPos$Type, arg3: $FluidState$Type): boolean
public "getEnchantPowerBonusZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type): float
public "getBeaconColorMultiplierZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): (float)[]
public "getLightEmissionZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type): integer
public "onNeighborChange"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): void
public "isEnabled"(): boolean
public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
get "module"(): $ZetaModule
get "block"(): $Block
set "creativeTab"(value: $ResourceKey$Type<($CreativeModeTab$Type)>)
get "enabled"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZetaLeavesBlock$Type = ($ZetaLeavesBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZetaLeavesBlock_ = $ZetaLeavesBlock$Type;
}}
declare module "packages/org/violetmoon/quark/content/world/feature/$MultiFoliageStraightTrunkPlacer" {
import {$BiConsumer, $BiConsumer$Type} from "packages/java/util/function/$BiConsumer"
import {$LevelSimulatedReader, $LevelSimulatedReader$Type} from "packages/net/minecraft/world/level/$LevelSimulatedReader"
import {$List, $List$Type} from "packages/java/util/$List"
import {$FoliagePlacer$FoliageAttachment, $FoliagePlacer$FoliageAttachment$Type} from "packages/net/minecraft/world/level/levelgen/feature/foliageplacers/$FoliagePlacer$FoliageAttachment"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$TrunkPlacerType, $TrunkPlacerType$Type} from "packages/net/minecraft/world/level/levelgen/feature/trunkplacers/$TrunkPlacerType"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$TrunkPlacer, $TrunkPlacer$Type} from "packages/net/minecraft/world/level/levelgen/feature/trunkplacers/$TrunkPlacer"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Codec, $Codec$Type} from "packages/com/mojang/serialization/$Codec"
import {$TreeConfiguration, $TreeConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$TreeConfiguration"

export class $MultiFoliageStraightTrunkPlacer extends $TrunkPlacer {
static readonly "CODEC": $Codec<($MultiFoliageStraightTrunkPlacer)>
static readonly "TYPE": $TrunkPlacerType<($MultiFoliageStraightTrunkPlacer)>
static readonly "MAX_HEIGHT": integer

constructor(arg0: integer, arg1: integer, arg2: integer, arg3: integer, arg4: integer)

public "placeTrunk"(arg0: $LevelSimulatedReader$Type, arg1: $BiConsumer$Type<($BlockPos$Type), ($BlockState$Type)>, arg2: $RandomSource$Type, arg3: integer, arg4: $BlockPos$Type, arg5: $TreeConfiguration$Type): $List<($FoliagePlacer$FoliageAttachment)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MultiFoliageStraightTrunkPlacer$Type = ($MultiFoliageStraightTrunkPlacer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MultiFoliageStraightTrunkPlacer_ = $MultiFoliageStraightTrunkPlacer$Type;
}}
declare module "packages/org/violetmoon/quark/addons/oddities/module/$TinyPotatoModule" {
import {$TinyPotatoBlockEntity, $TinyPotatoBlockEntity$Type} from "packages/org/violetmoon/quark/addons/oddities/block/be/$TinyPotatoBlockEntity"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$ZRegister, $ZRegister$Type} from "packages/org/violetmoon/zeta/event/load/$ZRegister"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$ManualTrigger, $ManualTrigger$Type} from "packages/org/violetmoon/zeta/advancement/$ManualTrigger"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $TinyPotatoModule extends $ZetaModule {
static "blockEntityType": $BlockEntityType<($TinyPotatoBlockEntity)>
static "patPotatoTrigger": $ManualTrigger
static "tiny_potato": $Block
static "neverUseHeartOfDiamond": boolean
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "register"(arg0: $ZRegister$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TinyPotatoModule$Type = ($TinyPotatoModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TinyPotatoModule_ = $TinyPotatoModule$Type;
}}
declare module "packages/org/violetmoon/quark/content/tweaks/module/$MagmaKeepsConcretePowderModule" {
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZConfigChanged, $ZConfigChanged$Type} from "packages/org/violetmoon/zeta/event/load/$ZConfigChanged"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $MagmaKeepsConcretePowderModule extends $ZetaModule {
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "configChanged"(arg0: $ZConfigChanged$Type): void
public static "preventSolidify"(arg0: $BlockGetter$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MagmaKeepsConcretePowderModule$Type = ($MagmaKeepsConcretePowderModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MagmaKeepsConcretePowderModule_ = $MagmaKeepsConcretePowderModule$Type;
}}
declare module "packages/org/violetmoon/quark/addons/oddities/block/pipe/$EncasedPipeBlock" {
import {$BasePipeBlock, $BasePipeBlock$Type} from "packages/org/violetmoon/quark/addons/oddities/block/pipe/$BasePipeBlock"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$CollisionContext, $CollisionContext$Type} from "packages/net/minecraft/world/phys/shapes/$CollisionContext"
import {$PipeBlockEntity$ConnectionType, $PipeBlockEntity$ConnectionType$Type} from "packages/org/violetmoon/quark/addons/oddities/block/be/$PipeBlockEntity$ConnectionType"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$FluidState, $FluidState$Type} from "packages/net/minecraft/world/level/material/$FluidState"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockAndTintGetter, $BlockAndTintGetter$Type} from "packages/net/minecraft/world/level/$BlockAndTintGetter"

export class $EncasedPipeBlock extends $BasePipeBlock {
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(arg0: $ZetaModule$Type)

public "propagatesSkylightDown"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type): boolean
public "shouldDisplayFluidOverlay"(arg0: $BlockState$Type, arg1: $BlockAndTintGetter$Type, arg2: $BlockPos$Type, arg3: $FluidState$Type): boolean
public "skipRendering"(arg0: $BlockState$Type, arg1: $BlockState$Type, arg2: $Direction$Type): boolean
public "getShadeBrightness"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type): float
public "getVisualShape"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $CollisionContext$Type): $VoxelShape
public "allowsFullConnection"(arg0: $PipeBlockEntity$ConnectionType$Type): boolean
public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EncasedPipeBlock$Type = ($EncasedPipeBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EncasedPipeBlock_ = $EncasedPipeBlock$Type;
}}
declare module "packages/org/violetmoon/zeta/event/play/entity/player/$ZPlayer$Clone" {
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$ZPlayer, $ZPlayer$Type} from "packages/org/violetmoon/zeta/event/play/entity/player/$ZPlayer"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export interface $ZPlayer$Clone extends $ZPlayer {

 "getOriginal"(): $Player
 "getPlayer"(): $Player
 "getEntity"(): $LivingEntity
}

export namespace $ZPlayer$Clone {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZPlayer$Clone$Type = ($ZPlayer$Clone);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZPlayer$Clone_ = $ZPlayer$Clone$Type;
}}
declare module "packages/org/violetmoon/zeta/module/$ZetaCategory" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"

export class $ZetaCategory {
readonly "name": string
readonly "icon": $Supplier<($ItemStack)>
readonly "requiredMod": string

constructor(arg0: string, arg1: $Item$Type)
constructor(arg0: string, arg1: $Item$Type, arg2: string)
constructor(arg0: string, arg1: $Supplier$Type<($ItemStack$Type)>, arg2: string)

public "toString"(): string
public "isAddon"(): boolean
public "requiredModsLoaded"(arg0: $Zeta$Type): boolean
public static "unknownCategory"(arg0: string): $ZetaCategory
get "addon"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZetaCategory$Type = ($ZetaCategory);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZetaCategory_ = $ZetaCategory$Type;
}}
declare module "packages/org/violetmoon/zeta/config/$IZetaConfigInternals" {
import {$ValueDefinition, $ValueDefinition$Type} from "packages/org/violetmoon/zeta/config/$ValueDefinition"

export interface $IZetaConfigInternals {

 "get"<T>(arg0: $ValueDefinition$Type<(T)>): T
 "flush"(): void
 "set"<T>(arg0: $ValueDefinition$Type<(T)>, arg1: T): void
 "debounceTime"(): long
}

export namespace $IZetaConfigInternals {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IZetaConfigInternals$Type = ($IZetaConfigInternals);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IZetaConfigInternals_ = $IZetaConfigInternals$Type;
}}
declare module "packages/org/violetmoon/zeta/event/play/entity/player/$ZRightClickItem" {
import {$IZetaPlayEvent, $IZetaPlayEvent$Type} from "packages/org/violetmoon/zeta/event/bus/$IZetaPlayEvent"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$Cancellable, $Cancellable$Type} from "packages/org/violetmoon/zeta/event/bus/$Cancellable"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export interface $ZRightClickItem extends $IZetaPlayEvent, $Cancellable {

 "getLevel"(): $Level
 "getHand"(): $InteractionHand
 "getEntity"(): $Player
 "getItemStack"(): $ItemStack
 "setCancellationResult"(arg0: $InteractionResult$Type): void
 "cancel"(): void
 "setCanceled"(arg0: boolean): void
 "isCanceled"(): boolean
}

export namespace $ZRightClickItem {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZRightClickItem$Type = ($ZRightClickItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZRightClickItem_ = $ZRightClickItem$Type;
}}
declare module "packages/org/violetmoon/zeta/item/$ZetaMobBucketItem" {
import {$MobBucketItem, $MobBucketItem$Type} from "packages/net/minecraft/world/item/$MobBucketItem"
import {$BooleanSupplier, $BooleanSupplier$Type} from "packages/java/util/function/$BooleanSupplier"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$CreativeModeTab, $CreativeModeTab$Type} from "packages/net/minecraft/world/item/$CreativeModeTab"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$IZetaItem, $IZetaItem$Type} from "packages/org/violetmoon/zeta/item/$IZetaItem"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$ResourceKey, $ResourceKey$Type} from "packages/net/minecraft/resources/$ResourceKey"
import {$ItemLike, $ItemLike$Type} from "packages/net/minecraft/world/level/$ItemLike"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $ZetaMobBucketItem extends $MobBucketItem implements $IZetaItem {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Supplier$Type<(any)>, arg1: $Supplier$Type<(any)>, arg2: $Supplier$Type<(any)>, arg3: string, arg4: $ZetaModule$Type)

public "getModule"(): $ZetaModule
public "doesConditionApply"(): boolean
public "setCondition"(arg0: $BooleanSupplier$Type): $ZetaMobBucketItem
public "getItem"(): $Item
public "setCreativeTab"(arg0: $ResourceKey$Type<($CreativeModeTab$Type)>): $Item
public "setCreativeTab"(arg0: $ResourceKey$Type<($CreativeModeTab$Type)>, arg1: $ItemLike$Type, arg2: boolean): $Item
public "isEnabled"(): boolean
public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
get "module"(): $ZetaModule
set "condition"(value: $BooleanSupplier$Type)
get "item"(): $Item
set "creativeTab"(value: $ResourceKey$Type<($CreativeModeTab$Type)>)
get "enabled"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZetaMobBucketItem$Type = ($ZetaMobBucketItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZetaMobBucketItem_ = $ZetaMobBucketItem$Type;
}}
declare module "packages/org/violetmoon/quark/base/network/message/oddities/$HandleBackpackMessage" {
import {$IZetaMessage, $IZetaMessage$Type} from "packages/org/violetmoon/zeta/network/$IZetaMessage"
import {$IZetaNetworkEventContext, $IZetaNetworkEventContext$Type} from "packages/org/violetmoon/zeta/network/$IZetaNetworkEventContext"

export class $HandleBackpackMessage implements $IZetaMessage {
 "open": boolean

constructor()
constructor(arg0: boolean)

public "receive"(arg0: $IZetaNetworkEventContext$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $HandleBackpackMessage$Type = ($HandleBackpackMessage);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $HandleBackpackMessage_ = $HandleBackpackMessage$Type;
}}
declare module "packages/org/violetmoon/quark/content/world/gen/$MonsterBoxGenerator" {
import {$ChunkGenerator, $ChunkGenerator$Type} from "packages/net/minecraft/world/level/chunk/$ChunkGenerator"
import {$Generator, $Generator$Type} from "packages/org/violetmoon/zeta/world/generator/$Generator"
import {$DimensionConfig, $DimensionConfig$Type} from "packages/org/violetmoon/zeta/config/type/$DimensionConfig"
import {$WorldGenRegion, $WorldGenRegion$Type} from "packages/net/minecraft/server/level/$WorldGenRegion"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $MonsterBoxGenerator extends $Generator {
readonly "dimConfig": $DimensionConfig

constructor(arg0: $DimensionConfig$Type)

public "generateChunk"(arg0: $WorldGenRegion$Type, arg1: $ChunkGenerator$Type, arg2: $RandomSource$Type, arg3: $BlockPos$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MonsterBoxGenerator$Type = ($MonsterBoxGenerator);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MonsterBoxGenerator_ = $MonsterBoxGenerator$Type;
}}
declare module "packages/org/violetmoon/quark/content/mobs/entity/$Crab" {
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$WalkAnimationState, $WalkAnimationState$Type} from "packages/net/minecraft/world/entity/$WalkAnimationState"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$IEntityAdditionalSpawnData, $IEntityAdditionalSpawnData$Type} from "packages/net/minecraftforge/entity/$IEntityAdditionalSpawnData"
import {$AttributeMap, $AttributeMap$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeMap"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$Animal, $Animal$Type} from "packages/net/minecraft/world/entity/animal/$Animal"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$FluidType, $FluidType$Type} from "packages/net/minecraftforge/fluids/$FluidType"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$Packet, $Packet$Type} from "packages/net/minecraft/network/protocol/$Packet"
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Pose, $Pose$Type} from "packages/net/minecraft/world/entity/$Pose"
import {$AttributeSupplier$Builder, $AttributeSupplier$Builder$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeSupplier$Builder"
import {$MobType, $MobType$Type} from "packages/net/minecraft/world/entity/$MobType"
import {$AgeableMob, $AgeableMob$Type} from "packages/net/minecraft/world/entity/$AgeableMob"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$MobSpawnType, $MobSpawnType$Type} from "packages/net/minecraft/world/entity/$MobSpawnType"
import {$PathNavigation, $PathNavigation$Type} from "packages/net/minecraft/world/entity/ai/navigation/$PathNavigation"
import {$EntityDataAccessor, $EntityDataAccessor$Type} from "packages/net/minecraft/network/syncher/$EntityDataAccessor"
import {$Bucketable, $Bucketable$Type} from "packages/net/minecraft/world/entity/animal/$Bucketable"
import {$ClientGamePacketListener, $ClientGamePacketListener$Type} from "packages/net/minecraft/network/protocol/game/$ClientGamePacketListener"
import {$Mob, $Mob$Type} from "packages/net/minecraft/world/entity/$Mob"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$LevelRenderer, $LevelRenderer$Type} from "packages/net/minecraft/client/renderer/$LevelRenderer"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"
import {$GoalSelector, $GoalSelector$Type} from "packages/net/minecraft/world/entity/ai/goal/$GoalSelector"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$DynamicGameEventListener, $DynamicGameEventListener$Type} from "packages/net/minecraft/world/level/gameevent/$DynamicGameEventListener"
import {$LightningBolt, $LightningBolt$Type} from "packages/net/minecraft/world/entity/$LightningBolt"
import {$BiConsumer, $BiConsumer$Type} from "packages/java/util/function/$BiConsumer"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $Crab extends $Animal implements $IEntityAdditionalSpawnData, $Bucketable {
static readonly "COLORS": integer
static readonly "CRAB_LOOT_TABLE": $ResourceLocation
static readonly "BABY_START_AGE": integer
 "entityJs$builder": any
static readonly "MAX_WEARING_ARMOR_CHANCE": float
static readonly "MAX_PICKUP_LOOT_CHANCE": float
static readonly "MAX_ENCHANTED_ARMOR_CHANCE": float
static readonly "MAX_ENCHANTED_WEAPON_CHANCE": float
static readonly "LEASH_TAG": string
static readonly "DEFAULT_EQUIPMENT_DROP_CHANCE": float
static readonly "PRESERVE_ITEM_DROP_CHANCE": integer
static readonly "UPDATE_GOAL_SELECTOR_EVERY_N_TICKS": integer
 "ambientSoundTime": integer
 "navigation": $PathNavigation
readonly "goalSelector": $GoalSelector
readonly "targetSelector": $GoalSelector
 "leashInfoTag": $CompoundTag
static readonly "HAND_SLOTS": integer
static readonly "ARMOR_SLOTS": integer
static readonly "EQUIPMENT_SLOT_OFFSET": integer
static readonly "ARMOR_SLOT_OFFSET": integer
static readonly "SWING_DURATION": integer
static readonly "PLAYER_HURT_EXPERIENCE_TIME": integer
static readonly "MIN_MOVEMENT_DISTANCE": double
static readonly "DEFAULT_BASE_GRAVITY": double
static readonly "DEATH_DURATION": integer
static readonly "USE_ITEM_INTERVAL": integer
static readonly "EXTRA_RENDER_CULLING_SIZE_WITH_BIG_HAT": float
 "attributes": $AttributeMap
readonly "activeEffects": $Map<($MobEffect), ($MobEffectInstance)>
 "swinging": boolean
 "swingingArm": $InteractionHand
 "swingTime": integer
 "removeArrowTime": integer
 "removeStingerTime": integer
 "hurtTime": integer
 "hurtDuration": integer
 "deathTime": integer
 "oAttackAnim": float
 "attackAnim": float
 "attackStrengthTicker": integer
readonly "walkAnimation": $WalkAnimationState
readonly "invulnerableDuration": integer
readonly "timeOffs": float
readonly "rotA": float
 "yBodyRot": float
 "yBodyRotO": float
 "yHeadRot": float
 "yHeadRotO": float
 "dead": boolean
 "jumping": boolean
 "xxa": float
 "yya": float
 "zza": float
 "effectsDirty": boolean
 "noJumpDelay": integer
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(arg0: $EntityType$Type<(any)>, arg1: $Level$Type)
constructor(arg0: $EntityType$Type<(any)>, arg1: $Level$Type, arg2: float)

public "getVariant"(): integer
public "getDimensions"(arg0: $Pose$Type): $EntityDimensions
public "canBreatheUnderwater"(): boolean
public "fireImmune"(): boolean
public static "prepareAttributes"(): $AttributeSupplier$Builder
public "tick"(): void
public "readAdditionalSaveData"(arg0: $CompoundTag$Type): void
public "addAdditionalSaveData"(arg0: $CompoundTag$Type): void
public "isInvulnerableTo"(arg0: $DamageSource$Type): boolean
public "getMobType"(): $MobType
public "push"(arg0: $Entity$Type): void
public "getDismountLocationForPassenger"(arg0: $LivingEntity$Type): $Vec3
public "onSyncedDataUpdated"(arg0: $EntityDataAccessor$Type<(any)>): void
public "getWalkTargetValue"(arg0: $BlockPos$Type, arg1: $LevelReader$Type): float
public static "spawnPredicate"(arg0: $EntityType$Type<(any)>, arg1: $LevelAccessor$Type, arg2: $MobSpawnType$Type, arg3: $BlockPos$Type, arg4: $RandomSource$Type): boolean
public "updateDynamicGameEventListener"(arg0: $BiConsumer$Type<($DynamicGameEventListener$Type<(any)>), ($ServerLevel$Type)>): void
public "thunderHit"(arg0: $ServerLevel$Type, arg1: $LightningBolt$Type): void
public "getAddEntityPacket"(): $Packet<($ClientGamePacketListener)>
public "requiresCustomPersistence"(): boolean
public "mobInteract"(arg0: $Player$Type, arg1: $InteractionHand$Type): $InteractionResult
public "writeSpawnData"(arg0: $FriendlyByteBuf$Type): void
public "readSpawnData"(arg0: $FriendlyByteBuf$Type): void
public "loadFromBucketTag"(arg0: $CompoundTag$Type): void
public "getBucketItemStack"(): $ItemStack
public "fromBucket"(): boolean
public "saveToBucketTag"(arg0: $ItemStack$Type): void
public "getPickupSound"(): $SoundEvent
public "setFromBucket"(arg0: boolean): void
public "getBreedOffspring"(arg0: $ServerLevel$Type, arg1: $AgeableMob$Type): $AgeableMob
public "isFood"(arg0: $ItemStack$Type): boolean
public "getStepHeight"(): float
public "isPushedByFluid"(arg0: $FluidType$Type): boolean
public "getPassengersRidingOffset"(): double
public "getSizeModifier"(): float
public "shouldStopRaving"(): boolean
public "setRaving"(arg0: boolean): void
public "isRaving"(): boolean
public "party"(arg0: $BlockPos$Type, arg1: boolean): void
public static "bucketMobPickup"<T extends ($LivingEntity) & ($Bucketable)>(arg0: $Player$Type, arg1: $InteractionHand$Type, arg2: T): $Optional<($InteractionResult)>
/**
 * 
 * @deprecated
 */
public static "loadDefaultDataFromBucketTag"(arg0: $Mob$Type, arg1: $CompoundTag$Type): void
/**
 * 
 * @deprecated
 */
public static "saveDefaultDataToBucketTag"(arg0: $Mob$Type, arg1: $ItemStack$Type): void
public "lithiumOnEquipmentChanged"(): void
public "tdv$getDynamicLightX"(): double
public "tdv$getDynamicLightZ"(): double
public "tdv$getDynamicLightWorld"(): $Level
public "tdv$shouldUpdateDynamicLight"(): boolean
public "tdv$resetDynamicLight"(): void
public "tdv$getDynamicLightY"(): double
public "tdv$lambdynlights$scheduleTrackedChunksRebuild"(arg0: $LevelRenderer$Type): void
public "tdv$lambdynlights$updateDynamicLight"(arg0: $LevelRenderer$Type): boolean
public "getCachedFeetBlockState"(): $BlockState
get "variant"(): integer
get "mobType"(): $MobType
get "addEntityPacket"(): $Packet<($ClientGamePacketListener)>
get "bucketItemStack"(): $ItemStack
get "pickupSound"(): $SoundEvent
get "stepHeight"(): float
get "passengersRidingOffset"(): double
get "sizeModifier"(): float
set "raving"(value: boolean)
get "raving"(): boolean
get "cachedFeetBlockState"(): $BlockState
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Crab$Type = ($Crab);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Crab_ = $Crab$Type;
}}
declare module "packages/org/violetmoon/zeta/module/$ZetaLoadModule" {
import {$Annotation, $Annotation$Type} from "packages/java/lang/annotation/$Annotation"
import {$Class, $Class$Type} from "packages/java/lang/$Class"

export interface $ZetaLoadModule extends $Annotation {

 "name"(): string
 "description"(): string
 "category"(): string
 "loadPhase"(): integer
 "clientReplacement"(): boolean
 "antiOverlap"(): (string)[]
 "enabledByDefault"(): boolean
 "equals"(arg0: any): boolean
 "toString"(): string
 "hashCode"(): integer
 "annotationType"(): $Class<(any)>
}

export namespace $ZetaLoadModule {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZetaLoadModule$Type = ($ZetaLoadModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZetaLoadModule_ = $ZetaLoadModule$Type;
}}
declare module "packages/org/violetmoon/quark/content/mobs/ai/$SleepGoal" {
import {$Goal, $Goal$Type} from "packages/net/minecraft/world/entity/ai/goal/$Goal"
import {$Foxhound, $Foxhound$Type} from "packages/org/violetmoon/quark/content/mobs/entity/$Foxhound"

export class $SleepGoal extends $Goal {

constructor(arg0: $Foxhound$Type)

public "setSleeping"(arg0: boolean): void
public "canUse"(): boolean
public "canContinueToUse"(): boolean
public "start"(): void
public "stop"(): void
set "sleeping"(value: boolean)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SleepGoal$Type = ($SleepGoal);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SleepGoal_ = $SleepGoal$Type;
}}
declare module "packages/org/violetmoon/zeta/client/config/widget/$ScrollableWidgetList$WidgetWrapper" {
import {$AbstractWidget, $AbstractWidget$Type} from "packages/net/minecraft/client/gui/components/$AbstractWidget"

export class $ScrollableWidgetList$WidgetWrapper {
readonly "widget": $AbstractWidget
readonly "relativeX": integer
readonly "relativeY": integer
 "wasOnScreen": boolean

constructor(arg0: $AbstractWidget$Type)

public "updatePosition"(arg0: integer, arg1: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ScrollableWidgetList$WidgetWrapper$Type = ($ScrollableWidgetList$WidgetWrapper);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ScrollableWidgetList$WidgetWrapper_ = $ScrollableWidgetList$WidgetWrapper$Type;
}}
declare module "packages/org/violetmoon/quark/content/tweaks/ai/$WantLoveGoal" {
import {$Goal, $Goal$Type} from "packages/net/minecraft/world/entity/ai/goal/$Goal"
import {$TamableAnimal, $TamableAnimal$Type} from "packages/net/minecraft/world/entity/$TamableAnimal"

export class $WantLoveGoal extends $Goal {
readonly "leapUpMotion": float

constructor(arg0: $TamableAnimal$Type, arg1: float)

public static "canPet"(arg0: $TamableAnimal$Type): boolean
public static "setPetTime"(arg0: $TamableAnimal$Type): void
public static "needsPets"(arg0: $TamableAnimal$Type): boolean
public static "timeSinceLastPet"(arg0: $TamableAnimal$Type): long
public "canUse"(): boolean
public "canContinueToUse"(): boolean
public "start"(): void
set "petTime"(value: $TamableAnimal$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WantLoveGoal$Type = ($WantLoveGoal);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WantLoveGoal_ = $WantLoveGoal$Type;
}}
declare module "packages/org/violetmoon/zeta/module/$TentativeModule" {
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$ZetaLoadModuleAnnotationData, $ZetaLoadModuleAnnotationData$Type} from "packages/org/violetmoon/zeta/module/$ZetaLoadModuleAnnotationData"
import {$ZetaSide, $ZetaSide$Type} from "packages/org/violetmoon/zeta/util/$ZetaSide"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"

export class $TentativeModule extends $Record {

constructor(clazz: $Class$Type<(any)>, keyClass: $Class$Type<(any)>, category: $ZetaCategory$Type, displayName: string, lowercaseName: string, description: string, antiOverlap: $Set$Type<(string)>, enabledByDefault: boolean, clientReplacement: boolean, loadPhase: integer)

public "clazz"(): $Class<(any)>
public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public static "from"(arg0: $ZetaLoadModuleAnnotationData$Type, arg1: $Function$Type<(string), ($ZetaCategory$Type)>): $TentativeModule
public "displayName"(): string
public "replaceWith"(arg0: $TentativeModule$Type): $TentativeModule
public "description"(): string
public "keyClass"(): $Class<(any)>
public "category"(): $ZetaCategory
public "loadPhase"(): integer
public "clientReplacement"(): boolean
public "antiOverlap"(): $Set<(string)>
public "appliesTo"(arg0: $ZetaSide$Type): boolean
public "enabledByDefault"(): boolean
public "lowercaseName"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TentativeModule$Type = ($TentativeModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TentativeModule_ = $TentativeModule$Type;
}}
declare module "packages/org/violetmoon/quark/addons/oddities/module/$CrateModule" {
import {$CrateBlockEntity, $CrateBlockEntity$Type} from "packages/org/violetmoon/quark/addons/oddities/block/be/$CrateBlockEntity"
import {$CrateMenu, $CrateMenu$Type} from "packages/org/violetmoon/quark/addons/oddities/inventory/$CrateMenu"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$ZRegister, $ZRegister$Type} from "packages/org/violetmoon/zeta/event/load/$ZRegister"
import {$MenuType, $MenuType$Type} from "packages/net/minecraft/world/inventory/$MenuType"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $CrateModule extends $ZetaModule {
static "blockEntityType": $BlockEntityType<($CrateBlockEntity)>
static "menuType": $MenuType<($CrateMenu)>
static "crate": $Block
static "maxItems": integer
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "register"(arg0: $ZRegister$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CrateModule$Type = ($CrateModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CrateModule_ = $CrateModule$Type;
}}
declare module "packages/org/violetmoon/quark/content/mobs/module/$ForgottenModule" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$Forgotten, $Forgotten$Type} from "packages/org/violetmoon/quark/content/mobs/entity/$Forgotten"
import {$ZMobSpawnEvent$CheckSpawn$Lowest, $ZMobSpawnEvent$CheckSpawn$Lowest$Type} from "packages/org/violetmoon/zeta/event/play/entity/living/$ZMobSpawnEvent$CheckSpawn$Lowest"
import {$ZRegister, $ZRegister$Type} from "packages/org/violetmoon/zeta/event/load/$ZRegister"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZEntityAttributeCreation, $ZEntityAttributeCreation$Type} from "packages/org/violetmoon/zeta/event/load/$ZEntityAttributeCreation"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $ForgottenModule extends $ZetaModule {
static "forgottenType": $EntityType<($Forgotten)>
static "forgotten_hat": $Item
 "forgottenSpawnRate": double
 "maxHeightForSpawn": integer
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "register"(arg0: $ZRegister$Type): void
public "entityAttrs"(arg0: $ZEntityAttributeCreation$Type): void
public "onSkeletonSpawn"(arg0: $ZMobSpawnEvent$CheckSpawn$Lowest$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ForgottenModule$Type = ($ForgottenModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ForgottenModule_ = $ForgottenModule$Type;
}}
declare module "packages/org/violetmoon/zeta/util/$ItemNBTHelper" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$ListTag, $ListTag$Type} from "packages/net/minecraft/nbt/$ListTag"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export class $ItemNBTHelper {

constructor()

public static "getBoolean"(arg0: $ItemStack$Type, arg1: string, arg2: boolean): boolean
public static "getByte"(arg0: $ItemStack$Type, arg1: string, arg2: byte): byte
public static "getShort"(arg0: $ItemStack$Type, arg1: string, arg2: short): short
public static "getInt"(arg0: $ItemStack$Type, arg1: string, arg2: integer): integer
public static "getLong"(arg0: $ItemStack$Type, arg1: string, arg2: long): long
public static "getFloat"(arg0: $ItemStack$Type, arg1: string, arg2: float): float
public static "getDouble"(arg0: $ItemStack$Type, arg1: string, arg2: double): double
public static "setBoolean"(arg0: $ItemStack$Type, arg1: string, arg2: boolean): void
public static "setByte"(arg0: $ItemStack$Type, arg1: string, arg2: byte): void
public static "setShort"(arg0: $ItemStack$Type, arg1: string, arg2: short): void
public static "setInt"(arg0: $ItemStack$Type, arg1: string, arg2: integer): void
public static "setLong"(arg0: $ItemStack$Type, arg1: string, arg2: long): void
public static "setFloat"(arg0: $ItemStack$Type, arg1: string, arg2: float): void
public static "setDouble"(arg0: $ItemStack$Type, arg1: string, arg2: double): void
public static "getString"(arg0: $ItemStack$Type, arg1: string, arg2: string): string
public static "getList"(arg0: $ItemStack$Type, arg1: string, arg2: integer, arg3: boolean): $ListTag
public static "getCompound"(arg0: $ItemStack$Type, arg1: string, arg2: boolean): $CompoundTag
public static "verifyExistence"(arg0: $ItemStack$Type, arg1: string): boolean
public static "setString"(arg0: $ItemStack$Type, arg1: string, arg2: string): void
public static "setList"(arg0: $ItemStack$Type, arg1: string, arg2: $ListTag$Type): void
public static "setCompound"(arg0: $ItemStack$Type, arg1: string, arg2: $CompoundTag$Type): void
/**
 * 
 * @deprecated
 */
public static "verifyExistance"(arg0: $ItemStack$Type, arg1: string): boolean
/**
 * 
 * @deprecated
 */
public static "injectNBT"(arg0: $ItemStack$Type, arg1: $CompoundTag$Type): void
/**
 * 
 * @deprecated
 */
public static "detectNBT"(arg0: $ItemStack$Type): boolean
/**
 * 
 * @deprecated
 */
public static "initNBT"(arg0: $ItemStack$Type): void
/**
 * 
 * @deprecated
 */
public static "getNBT"(arg0: $ItemStack$Type): $CompoundTag
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ItemNBTHelper$Type = ($ItemNBTHelper);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ItemNBTHelper_ = $ItemNBTHelper$Type;
}}
declare module "packages/org/violetmoon/zetaimplforge/client/event/load/$ForgeZAddItemColorHandlers" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$ForgeZAddItemColorHandlers$Post, $ForgeZAddItemColorHandlers$Post$Type} from "packages/org/violetmoon/zetaimplforge/client/event/load/$ForgeZAddItemColorHandlers$Post"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$ZAddItemColorHandlers, $ZAddItemColorHandlers$Type} from "packages/org/violetmoon/zeta/client/event/load/$ZAddItemColorHandlers"
import {$RegisterColorHandlersEvent$Item, $RegisterColorHandlersEvent$Item$Type} from "packages/net/minecraftforge/client/event/$RegisterColorHandlersEvent$Item"
import {$ItemLike, $ItemLike$Type} from "packages/net/minecraft/world/level/$ItemLike"
import {$ItemColor, $ItemColor$Type} from "packages/net/minecraft/client/color/item/$ItemColor"
import {$ItemColors, $ItemColors$Type} from "packages/net/minecraft/client/color/item/$ItemColors"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $ForgeZAddItemColorHandlers implements $ZAddItemColorHandlers {

constructor(arg0: $RegisterColorHandlersEvent$Item$Type)
constructor(arg0: $RegisterColorHandlersEvent$Item$Type, arg1: $Map$Type<(string), ($Function$Type<($Item$Type), ($ItemColor$Type)>)>)

public "register"(arg0: $ItemColor$Type, ...arg1: ($ItemLike$Type)[]): void
public "getItemColors"(): $ItemColors
public "makePostEvent"(): $ForgeZAddItemColorHandlers$Post
public "registerNamed"(arg0: $Function$Type<($Item$Type), ($ItemColor$Type)>, ...arg1: (string)[]): void
get "itemColors"(): $ItemColors
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ForgeZAddItemColorHandlers$Type = ($ForgeZAddItemColorHandlers);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ForgeZAddItemColorHandlers_ = $ForgeZAddItemColorHandlers$Type;
}}
declare module "packages/org/violetmoon/zeta/client/event/play/$ZScreen" {
import {$IZetaPlayEvent, $IZetaPlayEvent$Type} from "packages/org/violetmoon/zeta/event/bus/$IZetaPlayEvent"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"

export interface $ZScreen extends $IZetaPlayEvent {

 "getScreen"(): $Screen

(): $Screen
}

export namespace $ZScreen {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZScreen$Type = ($ZScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZScreen_ = $ZScreen$Type;
}}
declare module "packages/org/violetmoon/quark/base/capability/$QuarkForgeCapabilities" {
import {$ICustomSorting, $ICustomSorting$Type} from "packages/org/violetmoon/quark/api/$ICustomSorting"
import {$IPistonCallback, $IPistonCallback$Type} from "packages/org/violetmoon/quark/api/$IPistonCallback"
import {$ITransferManager, $ITransferManager$Type} from "packages/org/violetmoon/quark/api/$ITransferManager"
import {$IRuneColorProvider, $IRuneColorProvider$Type} from "packages/org/violetmoon/quark/api/$IRuneColorProvider"
import {$IMagnetTracker, $IMagnetTracker$Type} from "packages/org/violetmoon/quark/api/$IMagnetTracker"
import {$Capability, $Capability$Type} from "packages/net/minecraftforge/common/capabilities/$Capability"

export class $QuarkForgeCapabilities {
static readonly "SORTING": $Capability<($ICustomSorting)>
static readonly "TRANSFER": $Capability<($ITransferManager)>
static readonly "PISTON_CALLBACK": $Capability<($IPistonCallback)>
static readonly "MAGNET_TRACKER_CAPABILITY": $Capability<($IMagnetTracker)>
static readonly "RUNE_COLOR": $Capability<($IRuneColorProvider)>

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $QuarkForgeCapabilities$Type = ($QuarkForgeCapabilities);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $QuarkForgeCapabilities_ = $QuarkForgeCapabilities$Type;
}}
declare module "packages/org/violetmoon/quark/content/tweaks/module/$GoldToolsHaveFortuneModule" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$ListTag, $ListTag$Type} from "packages/net/minecraft/nbt/$ListTag"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Tier, $Tier$Type} from "packages/net/minecraft/world/item/$Tier"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$Enchantment, $Enchantment$Type} from "packages/net/minecraft/world/item/enchantment/$Enchantment"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$ZConfigChanged, $ZConfigChanged$Type} from "packages/org/violetmoon/zeta/event/load/$ZConfigChanged"

export class $GoldToolsHaveFortuneModule extends $ZetaModule {
static "fortuneLevel": integer
static "harvestLevel": integer
static "displayBakedEnchantmentsInTooltip": boolean
static "italicTooltip": boolean
static "bakedEnchantments": $List<(string)>
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public static "getActualEnchantmentLevel"(arg0: $Enchantment$Type, arg1: $ItemStack$Type, arg2: integer): integer
public static "addEnchantmentsIfMissing"(arg0: $ItemStack$Type, arg1: $Map$Type<($Enchantment$Type), (integer)>): void
public "configChanged"(arg0: $ZConfigChanged$Type): void
public static "hideSmallerEnchantments"(arg0: $ItemStack$Type, arg1: $ListTag$Type): $ListTag
public static "shouldShowEnchantments"(arg0: $ItemStack$Type): boolean
public static "fakeEnchantmentTooltip"(arg0: $ItemStack$Type, arg1: $List$Type<($Component$Type)>): void
public static "getEffectiveTier"(arg0: $Tier$Type): $Tier
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GoldToolsHaveFortuneModule$Type = ($GoldToolsHaveFortuneModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GoldToolsHaveFortuneModule_ = $GoldToolsHaveFortuneModule$Type;
}}
declare module "packages/org/violetmoon/zeta/block/$ZetaBlock$Constructor" {
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export interface $ZetaBlock$Constructor<T extends $Block> {

 "make"(arg0: string, arg1: $ZetaModule$Type, arg2: $BlockBehaviour$Properties$Type): T

(arg0: string, arg1: $ZetaModule$Type, arg2: $BlockBehaviour$Properties$Type): T
}

export namespace $ZetaBlock$Constructor {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZetaBlock$Constructor$Type<T> = ($ZetaBlock$Constructor<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZetaBlock$Constructor_<T> = $ZetaBlock$Constructor$Type<(T)>;
}}
declare module "packages/org/violetmoon/quark/base/network/message/$UpdateTridentMessage" {
import {$IZetaMessage, $IZetaMessage$Type} from "packages/org/violetmoon/zeta/network/$IZetaMessage"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$IZetaNetworkEventContext, $IZetaNetworkEventContext$Type} from "packages/org/violetmoon/zeta/network/$IZetaNetworkEventContext"

export class $UpdateTridentMessage implements $IZetaMessage {
 "tridentID": integer
 "stack": $ItemStack

constructor()
constructor(arg0: integer, arg1: $ItemStack$Type)

public "receive"(arg0: $IZetaNetworkEventContext$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $UpdateTridentMessage$Type = ($UpdateTridentMessage);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $UpdateTridentMessage_ = $UpdateTridentMessage$Type;
}}
declare module "packages/org/violetmoon/quark/content/tweaks/client/emote/$CustomEmoteIconResourcePack" {
import {$PackResources$ResourceOutput, $PackResources$ResourceOutput$Type} from "packages/net/minecraft/server/packs/$PackResources$ResourceOutput"
import {$PackType, $PackType$Type} from "packages/net/minecraft/server/packs/$PackType"
import {$AbstractPackResources, $AbstractPackResources$Type} from "packages/net/minecraft/server/packs/$AbstractPackResources"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$InputStream, $InputStream$Type} from "packages/java/io/$InputStream"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$IoSupplier, $IoSupplier$Type} from "packages/net/minecraft/server/packs/resources/$IoSupplier"

export class $CustomEmoteIconResourcePack extends $AbstractPackResources {

constructor()

public "isHidden"(): boolean
public "getResources"(arg0: $PackType$Type, arg1: string, arg2: string, arg3: $Predicate$Type<($ResourceLocation$Type)>): $Collection<($ResourceLocation)>
public "close"(): void
public "getResource"(arg0: $PackType$Type, arg1: $ResourceLocation$Type): $IoSupplier<($InputStream)>
public "listResources"(arg0: $PackType$Type, arg1: string, arg2: string, arg3: $PackResources$ResourceOutput$Type): void
public "getRootResource"(...arg0: (string)[]): $IoSupplier<($InputStream)>
public "getNamespaces"(arg0: $PackType$Type): $Set<(string)>
get "hidden"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CustomEmoteIconResourcePack$Type = ($CustomEmoteIconResourcePack);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CustomEmoteIconResourcePack_ = $CustomEmoteIconResourcePack$Type;
}}
declare module "packages/org/violetmoon/zeta/piston/$ZetaPistonStructureResolver" {
import {$PistonStructureResolver, $PistonStructureResolver$Type} from "packages/net/minecraft/world/level/block/piston/$PistonStructureResolver"
import {$List, $List$Type} from "packages/java/util/$List"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $ZetaPistonStructureResolver extends $PistonStructureResolver {
static readonly "MAX_PUSH_DEPTH": integer

constructor(arg0: $PistonStructureResolver$Type)

public "resolve"(): boolean
public "getToDestroy"(): $List<($BlockPos)>
public "getToPush"(): $List<($BlockPos)>
get "toDestroy"(): $List<($BlockPos)>
get "toPush"(): $List<($BlockPos)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZetaPistonStructureResolver$Type = ($ZetaPistonStructureResolver);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZetaPistonStructureResolver_ = $ZetaPistonStructureResolver$Type;
}}
declare module "packages/org/violetmoon/quark/content/building/module/$VariantBookshelvesModule" {
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$ZRegister, $ZRegister$Type} from "packages/org/violetmoon/zeta/event/load/$ZRegister"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZConfigChanged, $ZConfigChanged$Type} from "packages/org/violetmoon/zeta/event/load/$ZConfigChanged"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $VariantBookshelvesModule extends $ZetaModule {
static "changeNames": boolean
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "register"(arg0: $ZRegister$Type): void
public "configChanged"(arg0: $ZConfigChanged$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $VariantBookshelvesModule$Type = ($VariantBookshelvesModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $VariantBookshelvesModule_ = $VariantBookshelvesModule$Type;
}}
declare module "packages/org/violetmoon/quark/addons/oddities/client/render/entity/$TotemOfHoldingRenderer" {
import {$EntityRendererProvider$Context, $EntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRendererProvider$Context"
import {$TotemOfHoldingEntity, $TotemOfHoldingEntity$Type} from "packages/org/violetmoon/quark/addons/oddities/entity/$TotemOfHoldingEntity"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$EntityRenderer, $EntityRenderer$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRenderer"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $TotemOfHoldingRenderer extends $EntityRenderer<($TotemOfHoldingEntity)> {
 "shadowRadius": float

constructor(arg0: $EntityRendererProvider$Context$Type)

public "render"(arg0: $TotemOfHoldingEntity$Type, arg1: float, arg2: float, arg3: $PoseStack$Type, arg4: $MultiBufferSource$Type, arg5: integer): void
public "getTextureLocation"(arg0: $TotemOfHoldingEntity$Type): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TotemOfHoldingRenderer$Type = ($TotemOfHoldingRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TotemOfHoldingRenderer_ = $TotemOfHoldingRenderer$Type;
}}
declare module "packages/org/violetmoon/quark/content/world/gen/$ObsidianSpikeGenerator" {
import {$ChunkGenerator, $ChunkGenerator$Type} from "packages/net/minecraft/world/level/chunk/$ChunkGenerator"
import {$Generator, $Generator$Type} from "packages/org/violetmoon/zeta/world/generator/$Generator"
import {$DimensionConfig, $DimensionConfig$Type} from "packages/org/violetmoon/zeta/config/type/$DimensionConfig"
import {$WorldGenRegion, $WorldGenRegion$Type} from "packages/net/minecraft/server/level/$WorldGenRegion"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $ObsidianSpikeGenerator extends $Generator {
readonly "dimConfig": $DimensionConfig

constructor(arg0: $DimensionConfig$Type)

public "generateChunk"(arg0: $WorldGenRegion$Type, arg1: $ChunkGenerator$Type, arg2: $RandomSource$Type, arg3: $BlockPos$Type): void
public static "placeSpikeAt"(arg0: $WorldGenRegion$Type, arg1: $BlockPos$Type, arg2: $RandomSource$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ObsidianSpikeGenerator$Type = ($ObsidianSpikeGenerator);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ObsidianSpikeGenerator_ = $ObsidianSpikeGenerator$Type;
}}
declare module "packages/org/violetmoon/quark/content/world/config/$BlossomTreeConfig" {
import {$DimensionConfig, $DimensionConfig$Type} from "packages/org/violetmoon/zeta/config/type/$DimensionConfig"
import {$ConfigFlagManager, $ConfigFlagManager$Type} from "packages/org/violetmoon/zeta/config/$ConfigFlagManager"
import {$CompoundBiomeConfig, $CompoundBiomeConfig$Type} from "packages/org/violetmoon/zeta/config/type/$CompoundBiomeConfig"
import {$Biome, $Biome$Type} from "packages/net/minecraft/world/level/biome/$Biome"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"
import {$IConfigType, $IConfigType$Type} from "packages/org/violetmoon/zeta/config/type/$IConfigType"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $BlossomTreeConfig implements $IConfigType {
 "dimensions": $DimensionConfig
 "biomeConfig": $CompoundBiomeConfig
 "rarity": integer

constructor(arg0: integer, arg1: $TagKey$Type<($Biome$Type)>)

public "onReload"(arg0: $ZetaModule$Type, arg1: $ConfigFlagManager$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BlossomTreeConfig$Type = ($BlossomTreeConfig);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BlossomTreeConfig_ = $BlossomTreeConfig$Type;
}}
declare module "packages/org/violetmoon/quark/content/client/module/$GreenerGrassModule" {
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ConvulsionMatrixConfig, $ConvulsionMatrixConfig$Type} from "packages/org/violetmoon/quark/base/config/type/$ConvulsionMatrixConfig"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $GreenerGrassModule extends $ZetaModule {
static "affectLeaves": boolean
static "affectWater": boolean
static "blockList": $List<(string)>
static "leavesList": $List<(string)>
static "colorMatrix": $ConvulsionMatrixConfig
static "waterMatrix": $ConvulsionMatrixConfig
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "getWaterColor"(arg0: integer): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GreenerGrassModule$Type = ($GreenerGrassModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GreenerGrassModule_ = $GreenerGrassModule$Type;
}}
declare module "packages/org/violetmoon/zeta/client/event/play/$ZEarlyRender" {
import {$IZetaPlayEvent, $IZetaPlayEvent$Type} from "packages/org/violetmoon/zeta/event/bus/$IZetaPlayEvent"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export interface $ZEarlyRender extends $IZetaPlayEvent {

 "guiGraphics"(): $GuiGraphics

(): $GuiGraphics
}

export namespace $ZEarlyRender {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZEarlyRender$Type = ($ZEarlyRender);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZEarlyRender_ = $ZEarlyRender$Type;
}}
declare module "packages/org/violetmoon/quark/content/world/module/$NoMoreLavaPocketsModule" {
import {$SpringConfiguration, $SpringConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$SpringConfiguration"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZConfigChanged, $ZConfigChanged$Type} from "packages/org/violetmoon/zeta/event/load/$ZConfigChanged"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $NoMoreLavaPocketsModule extends $ZetaModule {
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "configChanged"(arg0: $ZConfigChanged$Type): void
public static "shouldDisable"(arg0: $SpringConfiguration$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $NoMoreLavaPocketsModule$Type = ($NoMoreLavaPocketsModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $NoMoreLavaPocketsModule_ = $NoMoreLavaPocketsModule$Type;
}}
declare module "packages/org/violetmoon/zeta/module/$ModuleFinder" {
import {$Stream, $Stream$Type} from "packages/java/util/stream/$Stream"
import {$ZetaLoadModuleAnnotationData, $ZetaLoadModuleAnnotationData$Type} from "packages/org/violetmoon/zeta/module/$ZetaLoadModuleAnnotationData"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"

export interface $ModuleFinder extends $Supplier<($Stream<($ZetaLoadModuleAnnotationData)>)> {

 "and"(arg0: $ModuleFinder$Type): $ModuleFinder
 "get"(): $Stream<($ZetaLoadModuleAnnotationData)>

(arg0: $ModuleFinder$Type): $ModuleFinder
}

export namespace $ModuleFinder {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ModuleFinder$Type = ($ModuleFinder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ModuleFinder_ = $ModuleFinder$Type;
}}
declare module "packages/org/violetmoon/quark/content/tools/entity/$SkullPike" {
import {$ClientGamePacketListener, $ClientGamePacketListener$Type} from "packages/net/minecraft/network/protocol/game/$ClientGamePacketListener"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$Packet, $Packet$Type} from "packages/net/minecraft/network/protocol/$Packet"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $SkullPike extends $Entity {
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(arg0: $EntityType$Type<(any)>, arg1: $Level$Type)

public "isVisible"(arg0: $Entity$Type): boolean
public "tick"(): void
public "getAddEntityPacket"(): $Packet<($ClientGamePacketListener)>
get "addEntityPacket"(): $Packet<($ClientGamePacketListener)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SkullPike$Type = ($SkullPike);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SkullPike_ = $SkullPike$Type;
}}
declare module "packages/org/violetmoon/quark/content/building/block/$MyalitePillarBlock" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$ZetaPillarBlock, $ZetaPillarBlock$Type} from "packages/org/violetmoon/zeta/block/$ZetaPillarBlock"
import {$EnumProperty, $EnumProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$EnumProperty"
import {$IZetaBlockColorProvider, $IZetaBlockColorProvider$Type} from "packages/org/violetmoon/zeta/registry/$IZetaBlockColorProvider"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction$Axis, $Direction$Axis$Type} from "packages/net/minecraft/core/$Direction$Axis"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $MyalitePillarBlock extends $ZetaPillarBlock implements $IZetaBlockColorProvider {
static readonly "AXIS": $EnumProperty<($Direction$Axis)>
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(arg0: string, arg1: $ZetaModule$Type, arg2: $BlockBehaviour$Properties$Type)

public "getBlockColorProviderName"(): string
public "getItemColorProviderName"(): string
public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
get "blockColorProviderName"(): string
get "itemColorProviderName"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MyalitePillarBlock$Type = ($MyalitePillarBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MyalitePillarBlock_ = $MyalitePillarBlock$Type;
}}
declare module "packages/org/violetmoon/quark/content/tools/entity/rang/$Flamerang" {
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$AbstractPickarang, $AbstractPickarang$Type} from "packages/org/violetmoon/quark/content/tools/entity/rang/$AbstractPickarang"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$PickarangType, $PickarangType$Type} from "packages/org/violetmoon/quark/content/tools/config/$PickarangType"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $Flamerang extends $AbstractPickarang<($Flamerang)> {
 "ownerUUID": $UUID
 "cachedOwner": $Entity
 "leftOwner": boolean
 "hasBeenShot": boolean
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(arg0: $EntityType$Type<($Flamerang$Type)>, arg1: $Level$Type)
constructor(arg0: $EntityType$Type<($Flamerang$Type)>, arg1: $Level$Type, arg2: $Player$Type)

public "getPickarangType"(): $PickarangType<($Flamerang)>
get "pickarangType"(): $PickarangType<($Flamerang)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Flamerang$Type = ($Flamerang);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Flamerang_ = $Flamerang$Type;
}}
declare module "packages/org/violetmoon/zeta/event/play/$ZFurnaceFuelBurnTime" {
import {$IZetaPlayEvent, $IZetaPlayEvent$Type} from "packages/org/violetmoon/zeta/event/bus/$IZetaPlayEvent"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export interface $ZFurnaceFuelBurnTime extends $IZetaPlayEvent {

 "setBurnTime"(arg0: integer): void
 "getItemStack"(): $ItemStack
}

export namespace $ZFurnaceFuelBurnTime {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZFurnaceFuelBurnTime$Type = ($ZFurnaceFuelBurnTime);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZFurnaceFuelBurnTime_ = $ZFurnaceFuelBurnTime$Type;
}}
declare module "packages/org/violetmoon/zeta/api/$IAdvancementModifier" {
import {$BooleanSupplier, $BooleanSupplier$Type} from "packages/java/util/function/$BooleanSupplier"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$IMutableAdvancement, $IMutableAdvancement$Type} from "packages/org/violetmoon/zeta/api/$IMutableAdvancement"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export interface $IAdvancementModifier {

 "apply"(arg0: $ResourceLocation$Type, arg1: $IMutableAdvancement$Type): boolean
 "isActive"(): boolean
 "setCondition"(arg0: $BooleanSupplier$Type): $IAdvancementModifier
 "getTargets"(): $Set<($ResourceLocation)>
}

export namespace $IAdvancementModifier {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IAdvancementModifier$Type = ($IAdvancementModifier);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IAdvancementModifier_ = $IAdvancementModifier$Type;
}}
declare module "packages/org/violetmoon/quark/addons/oddities/inventory/$EnchantmentMatrix" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$Enchantment, $Enchantment$Type} from "packages/net/minecraft/world/item/enchantment/$Enchantment"
import {$EnchantmentMatrix$Piece, $EnchantmentMatrix$Piece$Type} from "packages/org/violetmoon/quark/addons/oddities/inventory/$EnchantmentMatrix$Piece"
import {$List, $List$Type} from "packages/java/util/$List"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $EnchantmentMatrix {
static readonly "MATRIX_WIDTH": integer
static readonly "MATRIX_HEIGHT": integer
readonly "totalValue": $Map<($Enchantment), (integer)>
readonly "pieces": $Map<(integer), ($EnchantmentMatrix$Piece)>
 "benchedPieces": $List<(integer)>
 "placedPieces": $List<(integer)>
 "matrix": ((integer)[])[]
 "count": integer
 "typeCount": integer
readonly "book": boolean
readonly "target": $ItemStack
readonly "rng": $RandomSource

constructor(arg0: $ItemStack$Type, arg1: $RandomSource$Type)

public "remove"(arg0: integer): boolean
public static "getValue"(arg0: $Enchantment$Type, arg1: integer): integer
public "merge"(arg0: integer, arg1: integer): boolean
public "rotate"(arg0: integer): boolean
public "place"(arg0: integer, arg1: integer, arg2: integer): boolean
public "readFromNBT"(arg0: $CompoundTag$Type): void
public "canPlace"(arg0: $EnchantmentMatrix$Piece$Type, arg1: integer, arg2: integer): boolean
public "getMinXpLevel"(arg0: integer): integer
public static "getMaxXP"(arg0: $Enchantment$Type, arg1: integer): integer
public "getNewPiecePrice"(): integer
public "isInfluenced"(): boolean
public "validateXp"(arg0: $Player$Type, arg1: integer): boolean
public "generatePiece"(arg0: $Map$Type<($Enchantment$Type), (integer)>, arg1: integer, arg2: boolean, arg3: boolean): boolean
public "canGeneratePiece"(arg0: $Map$Type<($Enchantment$Type), (integer)>, arg1: integer, arg2: integer): boolean
public "writeToNBT"(arg0: $CompoundTag$Type): void
get "newPiecePrice"(): integer
get "influenced"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EnchantmentMatrix$Type = ($EnchantmentMatrix);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EnchantmentMatrix_ = $EnchantmentMatrix$Type;
}}
declare module "packages/org/violetmoon/zeta/event/play/entity/living/$ZLivingDeath" {
import {$IZetaPlayEvent, $IZetaPlayEvent$Type} from "packages/org/violetmoon/zeta/event/bus/$IZetaPlayEvent"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export interface $ZLivingDeath extends $IZetaPlayEvent {

 "getSource"(): $DamageSource
 "getEntity"(): $Entity
}

export namespace $ZLivingDeath {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZLivingDeath$Type = ($ZLivingDeath);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZLivingDeath_ = $ZLivingDeath$Type;
}}
declare module "packages/org/violetmoon/quark/base/network/message/experimental/$PlaceVariantUpdateMessage" {
import {$IZetaMessage, $IZetaMessage$Type} from "packages/org/violetmoon/zeta/network/$IZetaMessage"
import {$IZetaNetworkEventContext, $IZetaNetworkEventContext$Type} from "packages/org/violetmoon/zeta/network/$IZetaNetworkEventContext"

export class $PlaceVariantUpdateMessage implements $IZetaMessage {
 "variant": string

constructor()
constructor(arg0: string)

public "receive"(arg0: $IZetaNetworkEventContext$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PlaceVariantUpdateMessage$Type = ($PlaceVariantUpdateMessage);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PlaceVariantUpdateMessage_ = $PlaceVariantUpdateMessage$Type;
}}
declare module "packages/org/violetmoon/zeta/world/$WorldGenHandler" {
import {$FeaturePlaceContext, $FeaturePlaceContext$Type} from "packages/net/minecraft/world/level/levelgen/feature/$FeaturePlaceContext"
import {$Holder, $Holder$Type} from "packages/net/minecraft/core/$Holder"
import {$GenerationStep$Decoration, $GenerationStep$Decoration$Type} from "packages/net/minecraft/world/level/levelgen/$GenerationStep$Decoration"
import {$PlacedFeature, $PlacedFeature$Type} from "packages/net/minecraft/world/level/levelgen/placement/$PlacedFeature"
import {$SortedSet, $SortedSet$Type} from "packages/java/util/$SortedSet"
import {$Generator, $Generator$Type} from "packages/org/violetmoon/zeta/world/generator/$Generator"
import {$WeightedGenerator, $WeightedGenerator$Type} from "packages/org/violetmoon/zeta/world/$WeightedGenerator"
import {$ZRegister, $ZRegister$Type} from "packages/org/violetmoon/zeta/event/load/$ZRegister"
import {$NoneFeatureConfiguration, $NoneFeatureConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$NoneFeatureConfiguration"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $WorldGenHandler {
static readonly "defers": $Map<($GenerationStep$Decoration), ($Holder<($PlacedFeature)>)>
static readonly "generators": $Map<($GenerationStep$Decoration), ($SortedSet<($WeightedGenerator)>)>

constructor()

public static "register"(arg0: $ZRegister$Type): void
public static "addGenerator"(arg0: $ZetaModule$Type, arg1: $Generator$Type, arg2: $GenerationStep$Decoration$Type, arg3: integer): void
public static "generateChunk"(arg0: $FeaturePlaceContext$Type<($NoneFeatureConfiguration$Type)>, arg1: $GenerationStep$Decoration$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WorldGenHandler$Type = ($WorldGenHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WorldGenHandler_ = $WorldGenHandler$Type;
}}
declare module "packages/org/violetmoon/quark/content/world/item/$AncientFruitItem" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$ZetaItem, $ZetaItem$Type} from "packages/org/violetmoon/zeta/item/$ZetaItem"

export class $AncientFruitItem extends $ZetaItem {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $ZetaModule$Type)

public "finishUsingItem"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $LivingEntity$Type): $ItemStack
public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AncientFruitItem$Type = ($AncientFruitItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AncientFruitItem_ = $AncientFruitItem$Type;
}}
declare module "packages/org/violetmoon/quark/content/tweaks/module/$HoeHarvestingModule" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$ZCommonSetup, $ZCommonSetup$Type} from "packages/org/violetmoon/zeta/event/load/$ZCommonSetup"
import {$ZBlock$Break, $ZBlock$Break$Type} from "packages/org/violetmoon/zeta/event/play/$ZBlock$Break"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $HoeHarvestingModule extends $ZetaModule {
static "regularHoeRadius": integer
static "highTierHoeRadius": integer
static "bigHarvestingHoesTag": $TagKey<($Item)>
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "setup"(arg0: $ZCommonSetup$Type): void
public static "getRange"(arg0: $ItemStack$Type): integer
public static "isHoe"(arg0: $ItemStack$Type): boolean
public static "isHarvestableMaterial"(arg0: $BlockState$Type): boolean
public "onBlockBroken"(arg0: $ZBlock$Break$Type): void
set "up"(value: $ZCommonSetup$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $HoeHarvestingModule$Type = ($HoeHarvestingModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $HoeHarvestingModule_ = $HoeHarvestingModule$Type;
}}
declare module "packages/org/violetmoon/zeta/event/play/entity/$ZEntityMobGriefing" {
import {$IZetaPlayEvent, $IZetaPlayEvent$Type} from "packages/org/violetmoon/zeta/event/bus/$IZetaPlayEvent"
import {$ZResult, $ZResult$Type} from "packages/org/violetmoon/zeta/event/bus/$ZResult"
import {$Resultable, $Resultable$Type} from "packages/org/violetmoon/zeta/event/bus/$Resultable"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export interface $ZEntityMobGriefing extends $IZetaPlayEvent, $Resultable {

 "getEntity"(): $Entity
 "setResult"(arg0: $ZResult$Type): void
 "getResult"(): $ZResult
}

export namespace $ZEntityMobGriefing {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZEntityMobGriefing$Type = ($ZEntityMobGriefing);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZEntityMobGriefing_ = $ZEntityMobGriefing$Type;
}}
declare module "packages/org/violetmoon/quark/content/tweaks/module/$LockRotationModule" {
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$ZPlayer$LoggedOut, $ZPlayer$LoggedOut$Type} from "packages/org/violetmoon/zeta/event/play/entity/player/$ZPlayer$LoggedOut"
import {$LockRotationModule$LockProfile, $LockRotationModule$LockProfile$Type} from "packages/org/violetmoon/quark/content/tweaks/module/$LockRotationModule$LockProfile"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$ZPlayer$Clone, $ZPlayer$Clone$Type} from "packages/org/violetmoon/zeta/event/play/entity/player/$ZPlayer$Clone"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZConfigChanged, $ZConfigChanged$Type} from "packages/org/violetmoon/zeta/event/load/$ZConfigChanged"

export class $LockRotationModule extends $ZetaModule {
static "renderLikeCrossHair": boolean
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "onPlayerLogoff"(arg0: $ZPlayer$LoggedOut$Type): void
public static "setProfile"(arg0: $Player$Type, arg1: $LockRotationModule$LockProfile$Type): void
public static "getRotatedState"(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: $Direction$Type, arg4: integer): $BlockState
public "configChanged"(arg0: $ZConfigChanged$Type): void
public "respawn"(arg0: $ZPlayer$Clone$Type): void
public static "fixBlockRotation"(arg0: $BlockState$Type, arg1: $BlockPlaceContext$Type): $BlockState
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LockRotationModule$Type = ($LockRotationModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LockRotationModule_ = $LockRotationModule$Type;
}}
declare module "packages/org/violetmoon/zetaimplforge/event/play/$ForgeZLevelTick" {
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$TickEvent$LevelTickEvent, $TickEvent$LevelTickEvent$Type} from "packages/net/minecraftforge/event/$TickEvent$LevelTickEvent"
import {$ZLevelTick, $ZLevelTick$Type} from "packages/org/violetmoon/zeta/event/play/$ZLevelTick"

export class $ForgeZLevelTick implements $ZLevelTick {

constructor(arg0: $TickEvent$LevelTickEvent$Type)

public "getLevel"(): $Level
get "level"(): $Level
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ForgeZLevelTick$Type = ($ForgeZLevelTick);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ForgeZLevelTick_ = $ForgeZLevelTick$Type;
}}
declare module "packages/org/violetmoon/quark/content/world/module/$FairyRingsModule" {
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$ZCommonSetup, $ZCommonSetup$Type} from "packages/org/violetmoon/zeta/event/load/$ZCommonSetup"
import {$DimensionConfig, $DimensionConfig$Type} from "packages/org/violetmoon/zeta/config/type/$DimensionConfig"
import {$List, $List$Type} from "packages/java/util/$List"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZConfigChanged, $ZConfigChanged$Type} from "packages/org/violetmoon/zeta/event/load/$ZConfigChanged"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $FairyRingsModule extends $ZetaModule {
static "forestChance": double
static "plainsChance": double
static "dimensions": $DimensionConfig
static "oresRaw": $List<(string)>
static "ores": $List<($BlockState)>
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "setup"(arg0: $ZCommonSetup$Type): void
public "configChanged"(arg0: $ZConfigChanged$Type): void
set "up"(value: $ZCommonSetup$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FairyRingsModule$Type = ($FairyRingsModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FairyRingsModule_ = $FairyRingsModule$Type;
}}
declare module "packages/org/violetmoon/quark/content/automation/block/$CrafterBlock$PowerState" {
import {$StringRepresentable$EnumCodec, $StringRepresentable$EnumCodec$Type} from "packages/net/minecraft/util/$StringRepresentable$EnumCodec"
import {$StringRepresentable, $StringRepresentable$Type} from "packages/net/minecraft/util/$StringRepresentable"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$Keyable, $Keyable$Type} from "packages/com/mojang/serialization/$Keyable"
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"

export class $CrafterBlock$PowerState extends $Enum<($CrafterBlock$PowerState)> implements $StringRepresentable {
static readonly "OFF": $CrafterBlock$PowerState
static readonly "TRIGGERED": $CrafterBlock$PowerState
static readonly "ON": $CrafterBlock$PowerState


public "toString"(): string
public static "values"(): ($CrafterBlock$PowerState)[]
public static "valueOf"(arg0: string): $CrafterBlock$PowerState
public "getSerializedName"(): string
public "powered"(): boolean
public static "fromEnumWithMapping"<E extends ($Enum<(E)>) & ($StringRepresentable)>(arg0: $Supplier$Type<((E)[])>, arg1: $Function$Type<(string), (string)>): $StringRepresentable$EnumCodec<(E)>
public static "keys"(arg0: ($StringRepresentable$Type)[]): $Keyable
public static "fromEnum"<E extends ($Enum<(E)>) & ($StringRepresentable)>(arg0: $Supplier$Type<((E)[])>): $StringRepresentable$EnumCodec<(E)>
get "serializedName"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CrafterBlock$PowerState$Type = (("triggered") | ("off") | ("on")) | ($CrafterBlock$PowerState);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CrafterBlock$PowerState_ = $CrafterBlock$PowerState$Type;
}}
declare module "packages/org/violetmoon/zeta/block/$ZetaFenceGateBlock" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$WoodType, $WoodType$Type} from "packages/net/minecraft/world/level/block/state/properties/$WoodType"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$FluidState, $FluidState$Type} from "packages/net/minecraft/world/level/material/$FluidState"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$ToolAction, $ToolAction$Type} from "packages/net/minecraftforge/common/$ToolAction"
import {$IForgeBlock, $IForgeBlock$Type} from "packages/net/minecraftforge/common/extensions/$IForgeBlock"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$DirectionProperty, $DirectionProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$DirectionProperty"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$CreativeModeTab, $CreativeModeTab$Type} from "packages/net/minecraft/world/item/$CreativeModeTab"
import {$FenceGateBlock, $FenceGateBlock$Type} from "packages/net/minecraft/world/level/block/$FenceGateBlock"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$IZetaBlock, $IZetaBlock$Type} from "packages/org/violetmoon/zeta/block/$IZetaBlock"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$UseOnContext, $UseOnContext$Type} from "packages/net/minecraft/world/item/context/$UseOnContext"
import {$SoundType, $SoundType$Type} from "packages/net/minecraft/world/level/block/$SoundType"
import {$IPlantable, $IPlantable$Type} from "packages/net/minecraftforge/common/$IPlantable"
import {$IZetaBlockExtensions, $IZetaBlockExtensions$Type} from "packages/org/violetmoon/zeta/block/ext/$IZetaBlockExtensions"
import {$ResourceKey, $ResourceKey$Type} from "packages/net/minecraft/resources/$ResourceKey"
import {$ItemLike, $ItemLike$Type} from "packages/net/minecraft/world/level/$ItemLike"
import {$BlockAndTintGetter, $BlockAndTintGetter$Type} from "packages/net/minecraft/world/level/$BlockAndTintGetter"

export class $ZetaFenceGateBlock extends $FenceGateBlock implements $IZetaBlock, $IZetaBlockExtensions, $IForgeBlock {
static readonly "OPEN": $BooleanProperty
static readonly "POWERED": $BooleanProperty
static readonly "IN_WALL": $BooleanProperty
static readonly "FACING": $DirectionProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(arg0: string, arg1: $ZetaModule$Type, arg2: $SoundEvent$Type, arg3: $SoundEvent$Type, arg4: $BlockBehaviour$Properties$Type)
constructor(arg0: string, arg1: $ZetaModule$Type, arg2: $WoodType$Type, arg3: $BlockBehaviour$Properties$Type)
/**
 * 
 * @deprecated
 */
constructor(arg0: string, arg1: $ZetaModule$Type, arg2: $BlockBehaviour$Properties$Type)

public "getModule"(): $ZetaModule
public "canSustainPlant"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type, arg4: $IPlantable$Type): boolean
public "isLadder"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "isConduitFrame"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): boolean
public "doesConditionApply"(): boolean
public "getEnchantPowerBonus"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type): float
public "shouldDisplayFluidOverlay"(arg0: $BlockState$Type, arg1: $BlockAndTintGetter$Type, arg2: $BlockPos$Type, arg3: $FluidState$Type): boolean
public "getToolModifiedState"(arg0: $BlockState$Type, arg1: $UseOnContext$Type, arg2: $ToolAction$Type, arg3: boolean): $BlockState
public "getBeaconColorMultiplier"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): (float)[]
public "makesOpenTrapdoorAboveClimbable"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockState$Type): boolean
public "getSoundType"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): $SoundType
public "isScaffolding"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "getLightEmission"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type): integer
public "isFlammable"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): boolean
public "canStickTo"(arg0: $BlockState$Type, arg1: $BlockState$Type): boolean
public "getFireSpreadSpeed"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "getFlammability"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "isStickyBlock"(arg0: $BlockState$Type): boolean
public "collisionExtendsVertically"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): boolean
public "getBlock"(): $Block
public "getFireSpreadSpeedZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "getFlammabilityZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "setCreativeTab"(arg0: $ResourceKey$Type<($CreativeModeTab$Type)>): $Block
public "setCreativeTab"(arg0: $ResourceKey$Type<($CreativeModeTab$Type)>, arg1: $ItemLike$Type, arg2: boolean): $Block
public "isConduitFrameZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): boolean
public "isLadderZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "isStickyBlockZeta"(arg0: $BlockState$Type): boolean
public "isScaffoldingZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "canStickToZeta"(arg0: $BlockState$Type, arg1: $BlockState$Type): boolean
public "isFlammableZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): boolean
public "getSoundTypeZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): $SoundType
public "makesOpenTrapdoorAboveClimbableZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockState$Type): boolean
public "canSustainPlantZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type, arg4: string): boolean
public "getToolModifiedStateZeta"(arg0: $BlockState$Type, arg1: $UseOnContext$Type, arg2: string, arg3: boolean): $BlockState
public "collisionExtendsVerticallyZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): boolean
public "shouldDisplayFluidOverlayZeta"(arg0: $BlockState$Type, arg1: $BlockAndTintGetter$Type, arg2: $BlockPos$Type, arg3: $FluidState$Type): boolean
public "getEnchantPowerBonusZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type): float
public "getBeaconColorMultiplierZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): (float)[]
public "getLightEmissionZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type): integer
public "isEnabled"(): boolean
public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
get "module"(): $ZetaModule
get "block"(): $Block
set "creativeTab"(value: $ResourceKey$Type<($CreativeModeTab$Type)>)
get "enabled"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZetaFenceGateBlock$Type = ($ZetaFenceGateBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZetaFenceGateBlock_ = $ZetaFenceGateBlock$Type;
}}
declare module "packages/org/violetmoon/zeta/client/event/play/$ZHighlightBlock" {
import {$IZetaPlayEvent, $IZetaPlayEvent$Type} from "packages/org/violetmoon/zeta/event/bus/$IZetaPlayEvent"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$Camera, $Camera$Type} from "packages/net/minecraft/client/$Camera"
import {$Cancellable, $Cancellable$Type} from "packages/org/violetmoon/zeta/event/bus/$Cancellable"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"

export interface $ZHighlightBlock extends $IZetaPlayEvent, $Cancellable {

 "getPoseStack"(): $PoseStack
 "getMultiBufferSource"(): $MultiBufferSource
 "getCamera"(): $Camera
 "cancel"(): void
 "setCanceled"(arg0: boolean): void
 "isCanceled"(): boolean
}

export namespace $ZHighlightBlock {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZHighlightBlock$Type = ($ZHighlightBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZHighlightBlock_ = $ZHighlightBlock$Type;
}}
declare module "packages/org/violetmoon/quark/content/client/module/$LongRangePickBlockModule" {
import {$HitResult, $HitResult$Type} from "packages/net/minecraft/world/phys/$HitResult"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $LongRangePickBlockModule extends $ZetaModule {
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "transformHitResult"(arg0: $HitResult$Type): $HitResult
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LongRangePickBlockModule$Type = ($LongRangePickBlockModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LongRangePickBlockModule_ = $LongRangePickBlockModule$Type;
}}
declare module "packages/org/violetmoon/quark/content/world/gen/$FallenLogGenerator" {
import {$ChunkGenerator, $ChunkGenerator$Type} from "packages/net/minecraft/world/level/chunk/$ChunkGenerator"
import {$Generator, $Generator$Type} from "packages/org/violetmoon/zeta/world/generator/$Generator"
import {$DimensionConfig, $DimensionConfig$Type} from "packages/org/violetmoon/zeta/config/type/$DimensionConfig"
import {$WorldGenRegion, $WorldGenRegion$Type} from "packages/net/minecraft/server/level/$WorldGenRegion"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $FallenLogGenerator extends $Generator {
readonly "dimConfig": $DimensionConfig

constructor(arg0: $DimensionConfig$Type)

public "generateChunk"(arg0: $WorldGenRegion$Type, arg1: $ChunkGenerator$Type, arg2: $RandomSource$Type, arg3: $BlockPos$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FallenLogGenerator$Type = ($FallenLogGenerator);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FallenLogGenerator_ = $FallenLogGenerator$Type;
}}
declare module "packages/org/violetmoon/quark/content/building/module/$VariantLaddersModule" {
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ZRegister, $ZRegister$Type} from "packages/org/violetmoon/zeta/event/load/$ZRegister"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ZLoadComplete, $ZLoadComplete$Type} from "packages/org/violetmoon/zeta/event/load/$ZLoadComplete"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZConfigChanged, $ZConfigChanged$Type} from "packages/org/violetmoon/zeta/event/load/$ZConfigChanged"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $VariantLaddersModule extends $ZetaModule {
static "changeNames": boolean
static "variantLadders": $List<($Block)>
static "moduleEnabled": boolean
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "register"(arg0: $ZRegister$Type): void
public "loadComplete"(arg0: $ZLoadComplete$Type): void
public "configChanged"(arg0: $ZConfigChanged$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $VariantLaddersModule$Type = ($VariantLaddersModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $VariantLaddersModule_ = $VariantLaddersModule$Type;
}}
declare module "packages/org/violetmoon/zetaimplforge/event/play/$ForgeZServerTick" {
import {$ZServerTick, $ZServerTick$Type} from "packages/org/violetmoon/zeta/event/play/$ZServerTick"
import {$TickEvent$ServerTickEvent, $TickEvent$ServerTickEvent$Type} from "packages/net/minecraftforge/event/$TickEvent$ServerTickEvent"
import {$MinecraftServer, $MinecraftServer$Type} from "packages/net/minecraft/server/$MinecraftServer"

export class $ForgeZServerTick implements $ZServerTick {

constructor(arg0: $TickEvent$ServerTickEvent$Type)

public "getServer"(): $MinecraftServer
get "server"(): $MinecraftServer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ForgeZServerTick$Type = ($ForgeZServerTick);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ForgeZServerTick_ = $ForgeZServerTick$Type;
}}
declare module "packages/org/violetmoon/quark/content/building/block/$PaperLanternBlock" {
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$CollisionContext, $CollisionContext$Type} from "packages/net/minecraft/world/phys/shapes/$CollisionContext"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$ZetaBlock, $ZetaBlock$Type} from "packages/org/violetmoon/zeta/block/$ZetaBlock"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $PaperLanternBlock extends $ZetaBlock {
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(arg0: string, arg1: $ZetaModule$Type)

public "getFireSpreadSpeedZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "getFlammabilityZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "getShape"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $CollisionContext$Type): $VoxelShape
public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PaperLanternBlock$Type = ($PaperLanternBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PaperLanternBlock_ = $PaperLanternBlock$Type;
}}
declare module "packages/org/violetmoon/zeta/module/$ZetaModuleManager" {
import {$ModuleFinder, $ModuleFinder$Type} from "packages/org/violetmoon/zeta/module/$ModuleFinder"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$Iterable, $Iterable$Type} from "packages/java/lang/$Iterable"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"

export class $ZetaModuleManager {

constructor(arg0: $Zeta$Type)

public "get"<M extends $ZetaModule>(arg0: $Class$Type<(M)>): M
public "load"(arg0: $ModuleFinder$Type): void
public "isEnabled"(arg0: $Class$Type<(any)>): boolean
public "getOptional"<M extends $ZetaModule>(arg0: $Class$Type<(M)>): $Optional<(M)>
public "initCategories"(arg0: $Iterable$Type<($ZetaCategory$Type)>): void
public "getCategory"(arg0: string): $ZetaCategory
public "getInhabitedCategories"(): $List<($ZetaCategory)>
public "isEnabledOrOverlapping"(arg0: $Class$Type<(any)>): boolean
public "getCategories"(): $Collection<($ZetaCategory)>
public "modulesInCategory"(arg0: $ZetaCategory$Type): $List<($ZetaModule)>
public "getModules"(): $Collection<($ZetaModule)>
get "inhabitedCategories"(): $List<($ZetaCategory)>
get "categories"(): $Collection<($ZetaCategory)>
get "modules"(): $Collection<($ZetaModule)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZetaModuleManager$Type = ($ZetaModuleManager);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZetaModuleManager_ = $ZetaModuleManager$Type;
}}
declare module "packages/org/violetmoon/zeta/advancement/$AdvancementModifier" {
import {$BooleanSupplier, $BooleanSupplier$Type} from "packages/java/util/function/$BooleanSupplier"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$IMutableAdvancement, $IMutableAdvancement$Type} from "packages/org/violetmoon/zeta/api/$IMutableAdvancement"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$IAdvancementModifier, $IAdvancementModifier$Type} from "packages/org/violetmoon/zeta/api/$IAdvancementModifier"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $AdvancementModifier implements $IAdvancementModifier {
readonly "module": $ZetaModule


public "isActive"(): boolean
public "setCondition"(arg0: $BooleanSupplier$Type): $AdvancementModifier
public "apply"(arg0: $ResourceLocation$Type, arg1: $IMutableAdvancement$Type): boolean
public "getTargets"(): $Set<($ResourceLocation)>
get "active"(): boolean
set "condition"(value: $BooleanSupplier$Type)
get "targets"(): $Set<($ResourceLocation)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AdvancementModifier$Type = ($AdvancementModifier);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AdvancementModifier_ = $AdvancementModifier$Type;
}}
declare module "packages/org/violetmoon/zeta/event/play/entity/player/$ZPlayerInteract$RightClickBlock" {
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$ZPlayerInteract, $ZPlayerInteract$Type} from "packages/org/violetmoon/zeta/event/play/entity/player/$ZPlayerInteract"

export interface $ZPlayerInteract$RightClickBlock extends $ZPlayerInteract {

 "getLevel"(): $Level
 "getHand"(): $InteractionHand
 "getEntity"(): $Player
 "getPos"(): $BlockPos
 "setCancellationResult"(arg0: $InteractionResult$Type): void
 "cancel"(): void
 "setCanceled"(arg0: boolean): void
 "isCanceled"(): boolean
}

export namespace $ZPlayerInteract$RightClickBlock {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZPlayerInteract$RightClickBlock$Type = ($ZPlayerInteract$RightClickBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZPlayerInteract$RightClickBlock_ = $ZPlayerInteract$RightClickBlock$Type;
}}
declare module "packages/org/violetmoon/zeta/advancement/modifier/$FuriousCocktailModifier" {
import {$BooleanSupplier, $BooleanSupplier$Type} from "packages/java/util/function/$BooleanSupplier"
import {$AdvancementModifier, $AdvancementModifier$Type} from "packages/org/violetmoon/zeta/advancement/$AdvancementModifier"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$IMutableAdvancement, $IMutableAdvancement$Type} from "packages/org/violetmoon/zeta/api/$IMutableAdvancement"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $FuriousCocktailModifier extends $AdvancementModifier {
readonly "module": $ZetaModule

constructor(arg0: $ZetaModule$Type, arg1: $BooleanSupplier$Type, arg2: $Set$Type<($MobEffect$Type)>)

public "apply"(arg0: $ResourceLocation$Type, arg1: $IMutableAdvancement$Type): boolean
public "getTargets"(): $Set<($ResourceLocation)>
get "targets"(): $Set<($ResourceLocation)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FuriousCocktailModifier$Type = ($FuriousCocktailModifier);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FuriousCocktailModifier_ = $FuriousCocktailModifier$Type;
}}
declare module "packages/org/violetmoon/zeta/item/$ZetaArrowItem" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$BooleanSupplier, $BooleanSupplier$Type} from "packages/java/util/function/$BooleanSupplier"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$CreativeModeTab, $CreativeModeTab$Type} from "packages/net/minecraft/world/item/$CreativeModeTab"
import {$ArrowItem, $ArrowItem$Type} from "packages/net/minecraft/world/item/$ArrowItem"
import {$IZetaItem, $IZetaItem$Type} from "packages/org/violetmoon/zeta/item/$IZetaItem"
import {$ResourceKey, $ResourceKey$Type} from "packages/net/minecraft/resources/$ResourceKey"
import {$ItemLike, $ItemLike$Type} from "packages/net/minecraft/world/level/$ItemLike"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $ZetaArrowItem extends $ArrowItem implements $IZetaItem {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: string, arg1: $ZetaModule$Type)

public "getModule"(): $ZetaModule
public "doesConditionApply"(): boolean
public "setCondition"(arg0: $BooleanSupplier$Type): $ZetaArrowItem
public "getItem"(): $Item
public "setCreativeTab"(arg0: $ResourceKey$Type<($CreativeModeTab$Type)>): $Item
public "setCreativeTab"(arg0: $ResourceKey$Type<($CreativeModeTab$Type)>, arg1: $ItemLike$Type, arg2: boolean): $Item
public "isEnabled"(): boolean
public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
get "module"(): $ZetaModule
set "condition"(value: $BooleanSupplier$Type)
get "item"(): $Item
set "creativeTab"(value: $ResourceKey$Type<($CreativeModeTab$Type)>)
get "enabled"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZetaArrowItem$Type = ($ZetaArrowItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZetaArrowItem_ = $ZetaArrowItem$Type;
}}
declare module "packages/org/violetmoon/zeta/advancement/modifier/$AdventuringTimeModifier" {
import {$AdvancementModifier, $AdvancementModifier$Type} from "packages/org/violetmoon/zeta/advancement/$AdvancementModifier"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$IMutableAdvancement, $IMutableAdvancement$Type} from "packages/org/violetmoon/zeta/api/$IMutableAdvancement"
import {$Biome, $Biome$Type} from "packages/net/minecraft/world/level/biome/$Biome"
import {$ResourceKey, $ResourceKey$Type} from "packages/net/minecraft/resources/$ResourceKey"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $AdventuringTimeModifier extends $AdvancementModifier {
readonly "module": $ZetaModule

constructor(arg0: $ZetaModule$Type, arg1: $Set$Type<($ResourceKey$Type<($Biome$Type)>)>)

public "apply"(arg0: $ResourceLocation$Type, arg1: $IMutableAdvancement$Type): boolean
public "getTargets"(): $Set<($ResourceLocation)>
get "targets"(): $Set<($ResourceLocation)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AdventuringTimeModifier$Type = ($AdventuringTimeModifier);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AdventuringTimeModifier_ = $AdventuringTimeModifier$Type;
}}
declare module "packages/org/violetmoon/quark/base/network/$QuarkNetwork" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $QuarkNetwork {
static readonly "PROTOCOL_VERSION": integer

constructor()

public static "init"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $QuarkNetwork$Type = ($QuarkNetwork);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $QuarkNetwork_ = $QuarkNetwork$Type;
}}
declare module "packages/org/violetmoon/zeta/config/type/$DimensionConfig" {
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$ConfigFlagManager, $ConfigFlagManager$Type} from "packages/org/violetmoon/zeta/config/$ConfigFlagManager"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$IConfigType, $IConfigType$Type} from "packages/org/violetmoon/zeta/config/type/$IConfigType"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $DimensionConfig implements $IConfigType {

constructor(arg0: boolean, ...arg1: (string)[])

public static "end"(arg0: boolean): $DimensionConfig
public static "all"(): $DimensionConfig
public static "overworld"(arg0: boolean): $DimensionConfig
public static "nether"(arg0: boolean): $DimensionConfig
public "canSpawnHere"(arg0: $LevelAccessor$Type): boolean
public "canSpawnHere"(arg0: $ResourceLocation$Type): boolean
public "onReload"(arg0: $ZetaModule$Type, arg1: $ConfigFlagManager$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DimensionConfig$Type = ($DimensionConfig);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DimensionConfig_ = $DimensionConfig$Type;
}}
declare module "packages/org/violetmoon/quark/content/building/block/$SturdyStoneBlock" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$ZetaBlock, $ZetaBlock$Type} from "packages/org/violetmoon/zeta/block/$ZetaBlock"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$PushReaction, $PushReaction$Type} from "packages/net/minecraft/world/level/material/$PushReaction"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $SturdyStoneBlock extends $ZetaBlock {
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(arg0: $ZetaModule$Type)

public "getPistonPushReaction"(arg0: $BlockState$Type): $PushReaction
public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SturdyStoneBlock$Type = ($SturdyStoneBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SturdyStoneBlock_ = $SturdyStoneBlock$Type;
}}
declare module "packages/org/violetmoon/zeta/event/play/$ZLevelTick" {
import {$IZetaPlayEvent, $IZetaPlayEvent$Type} from "packages/org/violetmoon/zeta/event/bus/$IZetaPlayEvent"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"

export interface $ZLevelTick extends $IZetaPlayEvent {

 "getLevel"(): $Level

(): $Level
}

export namespace $ZLevelTick {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZLevelTick$Type = ($ZLevelTick);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZLevelTick_ = $ZLevelTick$Type;
}}
declare module "packages/org/violetmoon/zetaimplforge/event/load/$ForgeZAddReloadListener" {
import {$RegistryAccess, $RegistryAccess$Type} from "packages/net/minecraft/core/$RegistryAccess"
import {$PreparableReloadListener, $PreparableReloadListener$Type} from "packages/net/minecraft/server/packs/resources/$PreparableReloadListener"
import {$AddReloadListenerEvent, $AddReloadListenerEvent$Type} from "packages/net/minecraftforge/event/$AddReloadListenerEvent"
import {$ZAddReloadListener, $ZAddReloadListener$Type} from "packages/org/violetmoon/zeta/event/load/$ZAddReloadListener"
import {$ReloadableServerResources, $ReloadableServerResources$Type} from "packages/net/minecraft/server/$ReloadableServerResources"

export class $ForgeZAddReloadListener implements $ZAddReloadListener {

constructor(arg0: $AddReloadListenerEvent$Type)

public "getRegistryAccess"(): $RegistryAccess
public "getServerResources"(): $ReloadableServerResources
public "addListener"(arg0: $PreparableReloadListener$Type): void
get "registryAccess"(): $RegistryAccess
get "serverResources"(): $ReloadableServerResources
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ForgeZAddReloadListener$Type = ($ForgeZAddReloadListener);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ForgeZAddReloadListener_ = $ForgeZAddReloadListener$Type;
}}
declare module "packages/org/violetmoon/quark/content/tweaks/module/$VexesDieWithTheirMastersModule" {
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ZLivingTick, $ZLivingTick$Type} from "packages/org/violetmoon/zeta/event/play/entity/living/$ZLivingTick"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $VexesDieWithTheirMastersModule extends $ZetaModule {
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "checkWhetherAlreadyDead"(arg0: $ZLivingTick$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $VexesDieWithTheirMastersModule$Type = ($VexesDieWithTheirMastersModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $VexesDieWithTheirMastersModule_ = $VexesDieWithTheirMastersModule$Type;
}}
declare module "packages/org/violetmoon/zetaimplforge/registry/$ForgeZetaRegistry" {
import {$ForgeZeta, $ForgeZeta$Type} from "packages/org/violetmoon/zetaimplforge/$ForgeZeta"
import {$ZetaRegistry, $ZetaRegistry$Type} from "packages/org/violetmoon/zeta/registry/$ZetaRegistry"

export class $ForgeZetaRegistry extends $ZetaRegistry {

constructor(arg0: $ForgeZeta$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ForgeZetaRegistry$Type = ($ForgeZetaRegistry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ForgeZetaRegistry_ = $ForgeZetaRegistry$Type;
}}
declare module "packages/org/violetmoon/zeta/registry/$BrewingRegistry" {
import {$Ingredient, $Ingredient$Type} from "packages/net/minecraft/world/item/crafting/$Ingredient"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"
import {$Potion, $Potion$Type} from "packages/net/minecraft/world/item/alchemy/$Potion"

export class $BrewingRegistry {

constructor(arg0: $Zeta$Type)

public "isEnabled"(arg0: $Potion$Type): boolean
public "addPotionMix"(arg0: string, arg1: $Supplier$Type<($Ingredient$Type)>, arg2: $MobEffect$Type, arg3: $MobEffect$Type, arg4: integer, arg5: integer, arg6: integer): void
public "addPotionMix"(arg0: string, arg1: $Supplier$Type<($Ingredient$Type)>, arg2: $Potion$Type, arg3: $Potion$Type, arg4: $Potion$Type): void
public "addPotionMix"(arg0: string, arg1: $Supplier$Type<($Ingredient$Type)>, arg2: $MobEffect$Type): void
public "addPotionMix"(arg0: string, arg1: $Supplier$Type<($Ingredient$Type)>, arg2: $MobEffect$Type, arg3: integer, arg4: integer, arg5: integer): void
public "addPotionMix"(arg0: string, arg1: $Supplier$Type<($Ingredient$Type)>, arg2: $MobEffect$Type, arg3: $MobEffect$Type): void
public "addNegation"(arg0: string, arg1: $Potion$Type, arg2: $Potion$Type, arg3: $Potion$Type, arg4: $Potion$Type, arg5: $Potion$Type, arg6: $Potion$Type): void
public static "spiderEye"(): $Ingredient
public static "redstone"(): $Ingredient
public static "glowstone"(): $Ingredient
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BrewingRegistry$Type = ($BrewingRegistry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BrewingRegistry_ = $BrewingRegistry$Type;
}}
declare module "packages/org/violetmoon/quark/content/mobs/client/layer/forgotten/$ForgottenClothingLayer" {
import {$RenderLayer, $RenderLayer$Type} from "packages/net/minecraft/client/renderer/entity/layers/$RenderLayer"
import {$Mob, $Mob$Type} from "packages/net/minecraft/world/entity/$Mob"
import {$RenderLayerParent, $RenderLayerParent$Type} from "packages/net/minecraft/client/renderer/entity/$RenderLayerParent"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$EntityModelSet, $EntityModelSet$Type} from "packages/net/minecraft/client/model/geom/$EntityModelSet"
import {$EntityModel, $EntityModel$Type} from "packages/net/minecraft/client/model/$EntityModel"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$RangedAttackMob, $RangedAttackMob$Type} from "packages/net/minecraft/world/entity/monster/$RangedAttackMob"

export class $ForgottenClothingLayer<T extends ($Mob) & ($RangedAttackMob), M extends $EntityModel<(T)>> extends $RenderLayer<(T), (M)> {

constructor(arg0: $RenderLayerParent$Type<(T), (M)>, arg1: $EntityModelSet$Type)

public "render"(arg0: $PoseStack$Type, arg1: $MultiBufferSource$Type, arg2: integer, arg3: T, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: float): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ForgottenClothingLayer$Type<T, M> = ($ForgottenClothingLayer<(T), (M)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ForgottenClothingLayer_<T, M> = $ForgottenClothingLayer$Type<(T), (M)>;
}}
declare module "packages/org/violetmoon/zeta/client/config/screen/$AbstractSectionInputScreen" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$ChangeSet, $ChangeSet$Type} from "packages/org/violetmoon/zeta/config/$ChangeSet"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$ZetaClient, $ZetaClient$Type} from "packages/org/violetmoon/zeta/client/$ZetaClient"
import {$ZetaScreen, $ZetaScreen$Type} from "packages/org/violetmoon/zeta/client/config/screen/$ZetaScreen"
import {$List, $List$Type} from "packages/java/util/$List"
import {$SectionDefinition, $SectionDefinition$Type} from "packages/org/violetmoon/zeta/config/$SectionDefinition"

export class $AbstractSectionInputScreen extends $ZetaScreen {
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering

constructor(arg0: $ZetaClient$Type, arg1: $Screen$Type, arg2: $ChangeSet$Type, arg3: $SectionDefinition$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AbstractSectionInputScreen$Type = ($AbstractSectionInputScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AbstractSectionInputScreen_ = $AbstractSectionInputScreen$Type;
}}
declare module "packages/org/violetmoon/quark/content/tweaks/module/$MapWashingModule" {
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$ZCommonSetup, $ZCommonSetup$Type} from "packages/org/violetmoon/zeta/event/load/$ZCommonSetup"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $MapWashingModule extends $ZetaModule {
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "setup"(arg0: $ZCommonSetup$Type): void
set "up"(value: $ZCommonSetup$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MapWashingModule$Type = ($MapWashingModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MapWashingModule_ = $MapWashingModule$Type;
}}
declare module "packages/org/violetmoon/zeta/client/event/load/$ZAddItemColorHandlers$Post" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$ZAddItemColorHandlers, $ZAddItemColorHandlers$Type} from "packages/org/violetmoon/zeta/client/event/load/$ZAddItemColorHandlers"
import {$ItemLike, $ItemLike$Type} from "packages/net/minecraft/world/level/$ItemLike"
import {$ItemColor, $ItemColor$Type} from "packages/net/minecraft/client/color/item/$ItemColor"
import {$ItemColors, $ItemColors$Type} from "packages/net/minecraft/client/color/item/$ItemColors"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export interface $ZAddItemColorHandlers$Post extends $ZAddItemColorHandlers {

 "getNamedItemColors"(): $Map<(string), ($Function<($Item), ($ItemColor)>)>
 "register"(arg0: $ItemColor$Type, ...arg1: ($ItemLike$Type)[]): void
 "getItemColors"(): $ItemColors
 "makePostEvent"(): $ZAddItemColorHandlers$Post
 "registerNamed"(arg0: $Function$Type<($Item$Type), ($ItemColor$Type)>, ...arg1: (string)[]): void
}

export namespace $ZAddItemColorHandlers$Post {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZAddItemColorHandlers$Post$Type = ($ZAddItemColorHandlers$Post);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZAddItemColorHandlers$Post_ = $ZAddItemColorHandlers$Post$Type;
}}
declare module "packages/org/violetmoon/quark/content/mobs/client/layer/$StonelingLichenLayer" {
import {$RenderLayer, $RenderLayer$Type} from "packages/net/minecraft/client/renderer/entity/layers/$RenderLayer"
import {$RenderLayerParent, $RenderLayerParent$Type} from "packages/net/minecraft/client/renderer/entity/$RenderLayerParent"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$StonelingModel, $StonelingModel$Type} from "packages/org/violetmoon/quark/content/mobs/client/model/$StonelingModel"
import {$Stoneling, $Stoneling$Type} from "packages/org/violetmoon/quark/content/mobs/entity/$Stoneling"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"

export class $StonelingLichenLayer extends $RenderLayer<($Stoneling), ($StonelingModel)> {

constructor(arg0: $RenderLayerParent$Type<($Stoneling$Type), ($StonelingModel$Type)>)

public "render"(arg0: $PoseStack$Type, arg1: $MultiBufferSource$Type, arg2: integer, arg3: $Stoneling$Type, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: float): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $StonelingLichenLayer$Type = ($StonelingLichenLayer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $StonelingLichenLayer_ = $StonelingLichenLayer$Type;
}}
declare module "packages/org/violetmoon/quark/content/building/module/$MoreStoneVariantsModule" {
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$ZGatherAdditionalFlags, $ZGatherAdditionalFlags$Type} from "packages/org/violetmoon/zeta/event/play/loading/$ZGatherAdditionalFlags"
import {$ZRegister, $ZRegister$Type} from "packages/org/violetmoon/zeta/event/load/$ZRegister"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $MoreStoneVariantsModule extends $ZetaModule {
 "enableBricks": boolean
 "enableChiseledBricks": boolean
 "enablePillar": boolean
static "instance": $MoreStoneVariantsModule
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "register"(arg0: $ZRegister$Type): void
public "expandVanillaStone"(arg0: $ZRegister$Type, arg1: $ZetaModule$Type, arg2: $Block$Type, arg3: string): $Block
public "moreFlags"(arg0: $ZGatherAdditionalFlags$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MoreStoneVariantsModule$Type = ($MoreStoneVariantsModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MoreStoneVariantsModule_ = $MoreStoneVariantsModule$Type;
}}
declare module "packages/org/violetmoon/zeta/event/load/$ZAddReloadListener" {
import {$RegistryAccess, $RegistryAccess$Type} from "packages/net/minecraft/core/$RegistryAccess"
import {$PreparableReloadListener, $PreparableReloadListener$Type} from "packages/net/minecraft/server/packs/resources/$PreparableReloadListener"
import {$IZetaLoadEvent, $IZetaLoadEvent$Type} from "packages/org/violetmoon/zeta/event/bus/$IZetaLoadEvent"
import {$ReloadableServerResources, $ReloadableServerResources$Type} from "packages/net/minecraft/server/$ReloadableServerResources"

export interface $ZAddReloadListener extends $IZetaLoadEvent {

 "getRegistryAccess"(): $RegistryAccess
 "getServerResources"(): $ReloadableServerResources
 "addListener"(arg0: $PreparableReloadListener$Type): void
}

export namespace $ZAddReloadListener {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZAddReloadListener$Type = ($ZAddReloadListener);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZAddReloadListener_ = $ZAddReloadListener$Type;
}}
declare module "packages/org/violetmoon/quark/base/network/message/experimental/$PlaceVariantRestoreMessage" {
import {$IZetaMessage, $IZetaMessage$Type} from "packages/org/violetmoon/zeta/network/$IZetaMessage"
import {$IZetaNetworkEventContext, $IZetaNetworkEventContext$Type} from "packages/org/violetmoon/zeta/network/$IZetaNetworkEventContext"

export class $PlaceVariantRestoreMessage implements $IZetaMessage {
 "variant": string

constructor()
constructor(arg0: string)

public "receive"(arg0: $IZetaNetworkEventContext$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PlaceVariantRestoreMessage$Type = ($PlaceVariantRestoreMessage);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PlaceVariantRestoreMessage_ = $PlaceVariantRestoreMessage$Type;
}}
declare module "packages/org/violetmoon/quark/content/world/block/$BlossomLeavesBlock" {
import {$IntegerProperty, $IntegerProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$IntegerProperty"
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$MapColor, $MapColor$Type} from "packages/net/minecraft/world/level/material/$MapColor"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$ZetaLeavesBlock, $ZetaLeavesBlock$Type} from "packages/org/violetmoon/zeta/block/$ZetaLeavesBlock"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $BlossomLeavesBlock extends $ZetaLeavesBlock {
static readonly "DECAY_DISTANCE": integer
static readonly "DISTANCE": $IntegerProperty
static readonly "PERSISTENT": $BooleanProperty
static readonly "WATERLOGGED": $BooleanProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(arg0: string, arg1: $ZetaModule$Type, arg2: $MapColor$Type)

public "animateTick"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type, arg3: $RandomSource$Type): void
public "onNeighborChange"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): void
public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BlossomLeavesBlock$Type = ($BlossomLeavesBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BlossomLeavesBlock_ = $BlossomLeavesBlock$Type;
}}
declare module "packages/org/violetmoon/quark/content/client/module/$CameraModule" {
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $CameraModule extends $ZetaModule {
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CameraModule$Type = ($CameraModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CameraModule_ = $CameraModule$Type;
}}
declare module "packages/org/violetmoon/zeta/client/event/load/$ZAddBlockColorHandlers" {
import {$BlockColors, $BlockColors$Type} from "packages/net/minecraft/client/color/block/$BlockColors"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$IZetaLoadEvent, $IZetaLoadEvent$Type} from "packages/org/violetmoon/zeta/event/bus/$IZetaLoadEvent"
import {$BlockColor, $BlockColor$Type} from "packages/net/minecraft/client/color/block/$BlockColor"
import {$ZAddBlockColorHandlers$Post, $ZAddBlockColorHandlers$Post$Type} from "packages/org/violetmoon/zeta/client/event/load/$ZAddBlockColorHandlers$Post"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"

export interface $ZAddBlockColorHandlers extends $IZetaLoadEvent {

 "register"(arg0: $BlockColor$Type, ...arg1: ($Block$Type)[]): void
 "getBlockColors"(): $BlockColors
 "makePostEvent"(): $ZAddBlockColorHandlers$Post
 "registerNamed"(arg0: $Function$Type<($Block$Type), ($BlockColor$Type)>, ...arg1: (string)[]): void
}

export namespace $ZAddBlockColorHandlers {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZAddBlockColorHandlers$Type = ($ZAddBlockColorHandlers);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZAddBlockColorHandlers_ = $ZAddBlockColorHandlers$Type;
}}
declare module "packages/org/violetmoon/quark/addons/oddities/block/$MagnetBlock" {
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$EntityBlock, $EntityBlock$Type} from "packages/net/minecraft/world/level/block/$EntityBlock"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Mirror, $Mirror$Type} from "packages/net/minecraft/world/level/block/$Mirror"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ZetaBlock, $ZetaBlock$Type} from "packages/org/violetmoon/zeta/block/$ZetaBlock"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"
import {$DirectionProperty, $DirectionProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$DirectionProperty"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Rotation, $Rotation$Type} from "packages/net/minecraft/world/level/block/$Rotation"
import {$BlockEntityTicker, $BlockEntityTicker$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityTicker"
import {$GameEventListener, $GameEventListener$Type} from "packages/net/minecraft/world/level/gameevent/$GameEventListener"

export class $MagnetBlock extends $ZetaBlock implements $EntityBlock {
static readonly "FACING": $DirectionProperty
static readonly "POWERED": $BooleanProperty
static readonly "WAXED": $BooleanProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(arg0: $ZetaModule$Type)

public "getTicker"<T extends $BlockEntity>(arg0: $Level$Type, arg1: $BlockState$Type, arg2: $BlockEntityType$Type<(T)>): $BlockEntityTicker<(T)>
public "getStateForPlacement"(arg0: $BlockPlaceContext$Type): $BlockState
public "appendHoverText"(arg0: $ItemStack$Type, arg1: $BlockGetter$Type, arg2: $List$Type<($Component$Type)>, arg3: $TooltipFlag$Type): void
public "neighborChanged"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type, arg3: $Block$Type, arg4: $BlockPos$Type, arg5: boolean): void
public "triggerEvent"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type, arg3: integer, arg4: integer): boolean
public "rotate"(arg0: $BlockState$Type, arg1: $Rotation$Type): $BlockState
public "mirror"(arg0: $BlockState$Type, arg1: $Mirror$Type): $BlockState
public "newBlockEntity"(arg0: $BlockPos$Type, arg1: $BlockState$Type): $BlockEntity
public "getListener"<T extends $BlockEntity>(arg0: $ServerLevel$Type, arg1: T): $GameEventListener
public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MagnetBlock$Type = ($MagnetBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MagnetBlock_ = $MagnetBlock$Type;
}}
declare module "packages/org/violetmoon/zeta/event/play/$ZRecipeCrawl$Reset" {
import {$ZRecipeCrawl, $ZRecipeCrawl$Type} from "packages/org/violetmoon/zeta/event/play/$ZRecipeCrawl"

export class $ZRecipeCrawl$Reset extends $ZRecipeCrawl {

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZRecipeCrawl$Reset$Type = ($ZRecipeCrawl$Reset);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZRecipeCrawl$Reset_ = $ZRecipeCrawl$Reset$Type;
}}
declare module "packages/org/violetmoon/quark/content/tweaks/client/screen/$NotButton" {
import {$Runnable, $Runnable$Type} from "packages/java/lang/$Runnable"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $NotButton {

constructor(arg0: integer, arg1: integer, arg2: integer, arg3: integer, arg4: any, arg5: $Runnable$Type)

public "draw"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: boolean): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $NotButton$Type = ($NotButton);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $NotButton_ = $NotButton$Type;
}}
declare module "packages/org/violetmoon/quark/content/tools/client/render/be/$CloudRenderer" {
import {$BlockEntityRendererProvider$Context, $BlockEntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/blockentity/$BlockEntityRendererProvider$Context"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$CloudBlockEntity, $CloudBlockEntity$Type} from "packages/org/violetmoon/quark/content/tools/block/be/$CloudBlockEntity"
import {$BlockEntityRenderer, $BlockEntityRenderer$Type} from "packages/net/minecraft/client/renderer/blockentity/$BlockEntityRenderer"

export class $CloudRenderer implements $BlockEntityRenderer<($CloudBlockEntity)> {

constructor(arg0: $BlockEntityRendererProvider$Context$Type)

public "render"(arg0: $CloudBlockEntity$Type, arg1: float, arg2: $PoseStack$Type, arg3: $MultiBufferSource$Type, arg4: integer, arg5: integer): void
public "shouldRender"(arg0: $CloudBlockEntity$Type, arg1: $Vec3$Type): boolean
public "shouldRenderOffScreen"(arg0: $CloudBlockEntity$Type): boolean
public "getViewDistance"(): integer
get "viewDistance"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CloudRenderer$Type = ($CloudRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CloudRenderer_ = $CloudRenderer$Type;
}}
declare module "packages/org/violetmoon/zeta/api/$ConditionalMixinManager" {
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"

export class $ConditionalMixinManager {

constructor()

public static "shouldApply"(arg0: $Zeta$Type, arg1: string, arg2: string): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ConditionalMixinManager$Type = ($ConditionalMixinManager);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ConditionalMixinManager_ = $ConditionalMixinManager$Type;
}}
declare module "packages/org/violetmoon/zeta/event/play/loading/$ZGatherHints" {
import {$RegistryAccess, $RegistryAccess$Type} from "packages/net/minecraft/core/$RegistryAccess"
import {$IZetaPlayEvent, $IZetaPlayEvent$Type} from "packages/org/violetmoon/zeta/event/bus/$IZetaPlayEvent"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$ConfigFlagManager, $ConfigFlagManager$Type} from "packages/org/violetmoon/zeta/config/$ConfigFlagManager"
import {$ItemLike, $ItemLike$Type} from "packages/net/minecraft/world/level/$ItemLike"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export interface $ZGatherHints extends $IZetaPlayEvent {

 "accept"(arg0: $ItemLike$Type, arg1: $Component$Type): void
 "gatherHintsFromModule"(arg0: $ZetaModule$Type, arg1: $ConfigFlagManager$Type): void
 "hintItem"(arg0: $Zeta$Type, arg1: $ItemLike$Type, ...arg2: (any)[]): void
 "hintItem"(arg0: $Zeta$Type, arg1: $ItemLike$Type, arg2: string, ...arg3: (any)[]): void
 "getRegistryAccess"(): $RegistryAccess
}

export namespace $ZGatherHints {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZGatherHints$Type = ($ZGatherHints);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZGatherHints_ = $ZGatherHints$Type;
}}
declare module "packages/org/violetmoon/zeta/world/$WeightedGenerator" {
import {$Comparable, $Comparable$Type} from "packages/java/lang/$Comparable"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$Generator, $Generator$Type} from "packages/org/violetmoon/zeta/world/generator/$Generator"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $WeightedGenerator extends $Record implements $Comparable<($WeightedGenerator)> {

constructor(module: $ZetaModule$Type, generator: $Generator$Type, weight: integer)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "compareTo"(arg0: $WeightedGenerator$Type): integer
public "module"(): $ZetaModule
public "generator"(): $Generator
public "weight"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WeightedGenerator$Type = ($WeightedGenerator);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WeightedGenerator_ = $WeightedGenerator$Type;
}}
declare module "packages/org/violetmoon/zeta/event/play/$ZAnvilUpdate$Lowest" {
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$ZAnvilUpdate, $ZAnvilUpdate$Type} from "packages/org/violetmoon/zeta/event/play/$ZAnvilUpdate"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export interface $ZAnvilUpdate$Lowest extends $ZAnvilUpdate {

 "getName"(): string
 "getMaterialCost"(): integer
 "getRight"(): $ItemStack
 "getLeft"(): $ItemStack
 "setOutput"(arg0: $ItemStack$Type): void
 "setCost"(arg0: integer): void
 "setMaterialCost"(arg0: integer): void
 "getPlayer"(): $Player
 "getOutput"(): $ItemStack
}

export namespace $ZAnvilUpdate$Lowest {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZAnvilUpdate$Lowest$Type = ($ZAnvilUpdate$Lowest);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZAnvilUpdate$Lowest_ = $ZAnvilUpdate$Lowest$Type;
}}
declare module "packages/org/violetmoon/quark/base/client/render/$QuarkBoatRenderer$BoatModelTuple" {
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$BoatModel, $BoatModel$Type} from "packages/net/minecraft/client/model/$BoatModel"

export class $QuarkBoatRenderer$BoatModelTuple extends $Record {


public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "model"(): $BoatModel
public "resloc"(): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $QuarkBoatRenderer$BoatModelTuple$Type = ($QuarkBoatRenderer$BoatModelTuple);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $QuarkBoatRenderer$BoatModelTuple_ = $QuarkBoatRenderer$BoatModelTuple$Type;
}}
declare module "packages/org/violetmoon/quark/integration/lootr/$LootrIntegration" {
import {$ILootrIntegration, $ILootrIntegration$Type} from "packages/org/violetmoon/quark/integration/lootr/$ILootrIntegration"
import {$BooleanSupplier, $BooleanSupplier$Type} from "packages/java/util/function/$BooleanSupplier"
import {$LootrVariantTrappedChestBlockEntity, $LootrVariantTrappedChestBlockEntity$Type} from "packages/org/violetmoon/quark/integration/lootr/$LootrVariantTrappedChestBlockEntity"
import {$List, $List$Type} from "packages/java/util/$List"
import {$LootrVariantChestBlockEntity, $LootrVariantChestBlockEntity$Type} from "packages/org/violetmoon/quark/integration/lootr/$LootrVariantChestBlockEntity"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $LootrIntegration implements $ILootrIntegration {
 "chestTEType": $BlockEntityType<($LootrVariantChestBlockEntity)>
 "trappedChestTEType": $BlockEntityType<($LootrVariantTrappedChestBlockEntity)>
readonly "chestMappings": $Map<($Block), ($Block)>
readonly "lootrRegularChests": $List<($Block)>
readonly "lootrTrappedChests": $List<($Block)>

constructor()

public "postRegister"(): void
public "makeChestBlocks"(arg0: $ZetaModule$Type, arg1: string, arg2: $Block$Type, arg3: $BooleanSupplier$Type, arg4: $Block$Type, arg5: $Block$Type): void
public "chestTE"(): $BlockEntityType<(any)>
public "trappedChestTE"(): $BlockEntityType<(any)>
public "lootrVariant"(arg0: $Block$Type): $Block
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LootrIntegration$Type = ($LootrIntegration);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LootrIntegration_ = $LootrIntegration$Type;
}}
declare module "packages/org/violetmoon/quark/base/network/message/$HarvestMessage" {
import {$IZetaMessage, $IZetaMessage$Type} from "packages/org/violetmoon/zeta/network/$IZetaMessage"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$IZetaNetworkEventContext, $IZetaNetworkEventContext$Type} from "packages/org/violetmoon/zeta/network/$IZetaNetworkEventContext"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $HarvestMessage implements $IZetaMessage {
 "pos": $BlockPos
 "hand": $InteractionHand

constructor()
constructor(arg0: $BlockPos$Type, arg1: $InteractionHand$Type)

public "receive"(arg0: $IZetaNetworkEventContext$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $HarvestMessage$Type = ($HarvestMessage);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $HarvestMessage_ = $HarvestMessage$Type;
}}
declare module "packages/org/violetmoon/quark/mixin/mixins/accessor/$AccessorServerGamePacketListener" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $AccessorServerGamePacketListener {

 "setAboveGroundTickCount"(arg0: integer): void

(arg0: integer): void
}

export namespace $AccessorServerGamePacketListener {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AccessorServerGamePacketListener$Type = ($AccessorServerGamePacketListener);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AccessorServerGamePacketListener_ = $AccessorServerGamePacketListener$Type;
}}
declare module "packages/org/violetmoon/quark/content/tools/item/$ParrotEggItem" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$InteractionResultHolder, $InteractionResultHolder$Type} from "packages/net/minecraft/world/$InteractionResultHolder"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$ZetaItem, $ZetaItem$Type} from "packages/org/violetmoon/zeta/item/$ZetaItem"

export class $ParrotEggItem extends $ZetaItem {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: string, arg1: integer, arg2: $ZetaModule$Type)

public "use"(arg0: $Level$Type, arg1: $Player$Type, arg2: $InteractionHand$Type): $InteractionResultHolder<($ItemStack)>
public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ParrotEggItem$Type = ($ParrotEggItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ParrotEggItem_ = $ParrotEggItem$Type;
}}
declare module "packages/org/violetmoon/zeta/event/play/entity/living/$ZLivingConversion" {
import {$IZetaPlayEvent, $IZetaPlayEvent$Type} from "packages/org/violetmoon/zeta/event/bus/$IZetaPlayEvent"
import {$LivingGetter, $LivingGetter$Type} from "packages/org/violetmoon/zeta/event/bus/helpers/$LivingGetter"
import {$Cancellable, $Cancellable$Type} from "packages/org/violetmoon/zeta/event/bus/$Cancellable"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export interface $ZLivingConversion extends $IZetaPlayEvent, $Cancellable, $LivingGetter {

 "cancel"(): void
 "setCanceled"(arg0: boolean): void
 "isCanceled"(): boolean
 "getEntity"(): $LivingEntity
}

export namespace $ZLivingConversion {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZLivingConversion$Type = ($ZLivingConversion);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZLivingConversion_ = $ZLivingConversion$Type;
}}
declare module "packages/org/violetmoon/zeta/config/$SectionDefinition$Builder" {
import {$Definition$Builder, $Definition$Builder$Type} from "packages/org/violetmoon/zeta/config/$Definition$Builder"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$ValueDefinition$Builder, $ValueDefinition$Builder$Type} from "packages/org/violetmoon/zeta/config/$ValueDefinition$Builder"
import {$ValueDefinition, $ValueDefinition$Type} from "packages/org/violetmoon/zeta/config/$ValueDefinition"
import {$SectionDefinition, $SectionDefinition$Type} from "packages/org/violetmoon/zeta/config/$SectionDefinition"

export class $SectionDefinition$Builder extends $Definition$Builder<($SectionDefinition$Builder), ($SectionDefinition)> {

constructor()

public "addValue"<T>(arg0: $Consumer$Type<($ValueDefinition$Builder$Type<(T)>)>): $ValueDefinition<(T)>
public "addValue"(arg0: $ValueDefinition$Type<(any)>): $SectionDefinition$Builder
public "addSubsection"(arg0: $SectionDefinition$Type): $SectionDefinition$Builder
public "addSubsection"(arg0: $Consumer$Type<($SectionDefinition$Builder$Type)>): $SectionDefinition
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SectionDefinition$Builder$Type = ($SectionDefinition$Builder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SectionDefinition$Builder_ = $SectionDefinition$Builder$Type;
}}
declare module "packages/org/violetmoon/quark/content/tweaks/module/$ZombieVillagersOnNormalModule" {
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$ZLivingConversion$Pre, $ZLivingConversion$Pre$Type} from "packages/org/violetmoon/zeta/event/play/entity/living/$ZLivingConversion$Pre"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $ZombieVillagersOnNormalModule extends $ZetaModule {
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "onConversion"(arg0: $ZLivingConversion$Pre$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZombieVillagersOnNormalModule$Type = ($ZombieVillagersOnNormalModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZombieVillagersOnNormalModule_ = $ZombieVillagersOnNormalModule$Type;
}}
declare module "packages/org/violetmoon/quark/addons/oddities/module/$BackpackModule" {
import {$ZCommonSetup, $ZCommonSetup$Type} from "packages/org/violetmoon/zeta/event/load/$ZCommonSetup"
import {$ZLivingDrops, $ZLivingDrops$Type} from "packages/org/violetmoon/zeta/event/play/entity/living/$ZLivingDrops"
import {$MenuType, $MenuType$Type} from "packages/net/minecraft/world/inventory/$MenuType"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"
import {$ZPlayerInteract$EntityInteractSpecific, $ZPlayerInteract$EntityInteractSpecific$Type} from "packages/org/violetmoon/zeta/event/play/entity/player/$ZPlayerInteract$EntityInteractSpecific"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$ZRegister, $ZRegister$Type} from "packages/org/violetmoon/zeta/event/load/$ZRegister"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$BackpackMenu, $BackpackMenu$Type} from "packages/org/violetmoon/quark/addons/oddities/inventory/$BackpackMenu"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $BackpackModule extends $ZetaModule {
static "superOpMode": boolean
static "enableRavagerHide": boolean
static "itemsInBackpackTick": boolean
static "baseRavagerHideDrop": integer
static "extraChancePerLooting": double
static "allowArmorStandUnloading": boolean
static "backpack": $Item
static "ravager_hide": $Item
static "bonded_ravager_hide": $Block
static "backpackBlockedTag": $TagKey<($Item)>
static "menyType": $MenuType<($BackpackMenu)>
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "register"(arg0: $ZRegister$Type): void
public "setup"(arg0: $ZCommonSetup$Type): void
public "onDrops"(arg0: $ZLivingDrops$Type): void
public static "isEntityWearingBackpack"(arg0: $Entity$Type): boolean
public static "isEntityWearingBackpack"(arg0: $Entity$Type, arg1: $ItemStack$Type): boolean
public "onArmorStandInteract"(arg0: $ZPlayerInteract$EntityInteractSpecific$Type): void
public static "requestBackpack"(): void
set "up"(value: $ZCommonSetup$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BackpackModule$Type = ($BackpackModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BackpackModule_ = $BackpackModule$Type;
}}
declare module "packages/org/violetmoon/zeta/event/load/$ZRegister" {
import {$CraftingExtensionsRegistry, $CraftingExtensionsRegistry$Type} from "packages/org/violetmoon/zeta/registry/$CraftingExtensionsRegistry"
import {$IZetaLoadEvent, $IZetaLoadEvent$Type} from "packages/org/violetmoon/zeta/event/bus/$IZetaLoadEvent"
import {$RenderLayerRegistry, $RenderLayerRegistry$Type} from "packages/org/violetmoon/zeta/registry/$RenderLayerRegistry"
import {$BrewingRegistry, $BrewingRegistry$Type} from "packages/org/violetmoon/zeta/registry/$BrewingRegistry"
import {$ZetaRegistry, $ZetaRegistry$Type} from "packages/org/violetmoon/zeta/registry/$ZetaRegistry"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$VariantRegistry, $VariantRegistry$Type} from "packages/org/violetmoon/zeta/registry/$VariantRegistry"
import {$AdvancementModifierRegistry, $AdvancementModifierRegistry$Type} from "packages/org/violetmoon/zeta/advancement/$AdvancementModifierRegistry"

export class $ZRegister implements $IZetaLoadEvent {
readonly "zeta": $Zeta

constructor(arg0: $Zeta$Type)

public "getCraftingExtensionsRegistry"(): $CraftingExtensionsRegistry
public "getRenderLayerRegistry"(): $RenderLayerRegistry
public "getAdvancementModifierRegistry"(): $AdvancementModifierRegistry
public "getBrewingRegistry"(): $BrewingRegistry
public "getVariantRegistry"(): $VariantRegistry
public "getRegistry"(): $ZetaRegistry
get "craftingExtensionsRegistry"(): $CraftingExtensionsRegistry
get "renderLayerRegistry"(): $RenderLayerRegistry
get "advancementModifierRegistry"(): $AdvancementModifierRegistry
get "brewingRegistry"(): $BrewingRegistry
get "variantRegistry"(): $VariantRegistry
get "registry"(): $ZetaRegistry
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZRegister$Type = ($ZRegister);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZRegister_ = $ZRegister$Type;
}}
declare module "packages/org/violetmoon/zeta/mod/$ZetaModProxy" {
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"

export class $ZetaModProxy {

constructor()

public "registerEvents"(arg0: $Zeta$Type): void
public "setClientZeta"(arg0: any): void
set "clientZeta"(value: any)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZetaModProxy$Type = ($ZetaModProxy);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZetaModProxy_ = $ZetaModProxy$Type;
}}
declare module "packages/org/violetmoon/quark/content/tweaks/module/$DragonScalesModule" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$ZRegister, $ZRegister$Type} from "packages/org/violetmoon/zeta/event/load/$ZRegister"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ZLivingTick, $ZLivingTick$Type} from "packages/org/violetmoon/zeta/event/play/entity/living/$ZLivingTick"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $DragonScalesModule extends $ZetaModule {
static "dragon_scale": $Item
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "register"(arg0: $ZRegister$Type): void
public "onEntityTick"(arg0: $ZLivingTick$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DragonScalesModule$Type = ($DragonScalesModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DragonScalesModule_ = $DragonScalesModule$Type;
}}
declare module "packages/org/violetmoon/zeta/event/play/entity/living/$ZBabyEntitySpawn" {
import {$IZetaPlayEvent, $IZetaPlayEvent$Type} from "packages/org/violetmoon/zeta/event/bus/$IZetaPlayEvent"
import {$Mob, $Mob$Type} from "packages/net/minecraft/world/entity/$Mob"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$AgeableMob, $AgeableMob$Type} from "packages/net/minecraft/world/entity/$AgeableMob"

export interface $ZBabyEntitySpawn extends $IZetaPlayEvent {

 "getChild"(): $AgeableMob
 "getParentB"(): $Mob
 "getCausedByPlayer"(): $Player
 "getParentA"(): $Mob
 "setChild"(arg0: $AgeableMob$Type): void
}

export namespace $ZBabyEntitySpawn {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZBabyEntitySpawn$Type = ($ZBabyEntitySpawn);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZBabyEntitySpawn_ = $ZBabyEntitySpawn$Type;
}}
declare module "packages/org/violetmoon/quark/addons/oddities/client/screen/$MatrixEnchantingPieceList$PieceEntry" {
import {$ObjectSelectionList$Entry, $ObjectSelectionList$Entry$Type} from "packages/net/minecraft/client/gui/components/$ObjectSelectionList$Entry"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $MatrixEnchantingPieceList$PieceEntry extends $ObjectSelectionList$Entry<($MatrixEnchantingPieceList$PieceEntry)> {


public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: integer, arg4: integer, arg5: integer, arg6: integer, arg7: integer, arg8: boolean, arg9: float): void
public "mouseClicked"(arg0: double, arg1: double, arg2: integer): boolean
public "getNarration"(): $Component
get "narration"(): $Component
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MatrixEnchantingPieceList$PieceEntry$Type = ($MatrixEnchantingPieceList$PieceEntry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MatrixEnchantingPieceList$PieceEntry_ = $MatrixEnchantingPieceList$PieceEntry$Type;
}}
declare module "packages/org/violetmoon/zeta/config/$FlagCondition" {
import {$BooleanSupplier, $BooleanSupplier$Type} from "packages/java/util/function/$BooleanSupplier"
import {$IZetaCondition$IContext, $IZetaCondition$IContext$Type} from "packages/org/violetmoon/zeta/recipe/$IZetaCondition$IContext"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$ConfigFlagManager, $ConfigFlagManager$Type} from "packages/org/violetmoon/zeta/config/$ConfigFlagManager"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$IZetaCondition, $IZetaCondition$Type} from "packages/org/violetmoon/zeta/recipe/$IZetaCondition"

export class $FlagCondition extends $Record implements $IZetaCondition {

constructor(cfm: $ConfigFlagManager$Type, flag: string, loc: $ResourceLocation$Type, extraCondition: $BooleanSupplier$Type)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "test"(arg0: $IZetaCondition$IContext$Type): boolean
public "loc"(): $ResourceLocation
public "flag"(): string
public "getID"(): $ResourceLocation
public "cfm"(): $ConfigFlagManager
public "extraCondition"(): $BooleanSupplier
get "iD"(): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FlagCondition$Type = ($FlagCondition);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FlagCondition_ = $FlagCondition$Type;
}}
declare module "packages/org/violetmoon/quark/content/client/resources/$AttributeIconEntry" {
import {$AttributeSlot, $AttributeSlot$Type} from "packages/org/violetmoon/quark/content/client/resources/$AttributeSlot"
import {$AttributeIconEntry$CompareType, $AttributeIconEntry$CompareType$Type} from "packages/org/violetmoon/quark/content/client/resources/$AttributeIconEntry$CompareType"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$AttributeDisplayType, $AttributeDisplayType$Type} from "packages/org/violetmoon/quark/content/client/resources/$AttributeDisplayType"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $AttributeIconEntry extends $Record {

constructor(displayTypes: $Map$Type<($AttributeSlot$Type), ($AttributeDisplayType$Type)>, texture: $ResourceLocation$Type, comparison: $AttributeIconEntry$CompareType$Type)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "comparison"(): $AttributeIconEntry$CompareType
public "displayTypes"(): $Map<($AttributeSlot), ($AttributeDisplayType)>
public "texture"(): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AttributeIconEntry$Type = ($AttributeIconEntry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AttributeIconEntry_ = $AttributeIconEntry$Type;
}}
declare module "packages/org/violetmoon/quark/content/tweaks/module/$DoubleDoorOpeningModule" {
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$ZCommonSetup, $ZCommonSetup$Type} from "packages/org/violetmoon/zeta/event/load/$ZCommonSetup"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $DoubleDoorOpeningModule extends $ZetaModule {
static "enableDoors": boolean
static "enableFenceGates": boolean
static "nonDoubleDoorTag": $TagKey<($Block)>
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "setup"(arg0: $ZCommonSetup$Type): void
public "openBlock"(arg0: $Level$Type, arg1: $Player$Type, arg2: $BlockPos$Type): boolean
set "up"(value: $ZCommonSetup$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DoubleDoorOpeningModule$Type = ($DoubleDoorOpeningModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DoubleDoorOpeningModule_ = $DoubleDoorOpeningModule$Type;
}}
declare module "packages/org/violetmoon/quark/base/client/render/$QuarkArmorModel" {
import {$VertexConsumer, $VertexConsumer$Type} from "packages/com/mojang/blaze3d/vertex/$VertexConsumer"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$HumanoidModel, $HumanoidModel$Type} from "packages/net/minecraft/client/model/$HumanoidModel"
import {$HumanoidModel$ArmPose, $HumanoidModel$ArmPose$Type} from "packages/net/minecraft/client/model/$HumanoidModel$ArmPose"
import {$PartDefinition, $PartDefinition$Type} from "packages/net/minecraft/client/model/geom/builders/$PartDefinition"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$ModelPart, $ModelPart$Type} from "packages/net/minecraft/client/model/geom/$ModelPart"
import {$LayerDefinition, $LayerDefinition$Type} from "packages/net/minecraft/client/model/geom/builders/$LayerDefinition"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $QuarkArmorModel extends $HumanoidModel<($LivingEntity)> {
static readonly "OVERLAY_SCALE": float
static readonly "HAT_OVERLAY_SCALE": float
static readonly "LEGGINGS_OVERLAY_SCALE": float
static readonly "TOOT_HORN_XROT_BASE": float
static readonly "TOOT_HORN_YROT_BASE": float
readonly "head": $ModelPart
readonly "hat": $ModelPart
readonly "body": $ModelPart
readonly "rightArm": $ModelPart
readonly "leftArm": $ModelPart
readonly "rightLeg": $ModelPart
readonly "leftLeg": $ModelPart
 "leftArmPose": $HumanoidModel$ArmPose
 "rightArmPose": $HumanoidModel$ArmPose
 "crouching": boolean
 "swimAmount": float
readonly "scaleHead": boolean
readonly "babyYHeadOffset": float
readonly "babyZHeadOffset": float
readonly "babyHeadScale": float
readonly "babyBodyScale": float
readonly "bodyYOffset": float
 "attackTime": float
 "riding": boolean
 "young": boolean

constructor(arg0: $ModelPart$Type, arg1: $EquipmentSlot$Type)

public static "createLayer"(arg0: integer, arg1: integer, arg2: $Consumer$Type<($PartDefinition$Type)>): $LayerDefinition
public "setupAnim"(arg0: $LivingEntity$Type, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float): void
public "renderToBuffer"(arg0: $PoseStack$Type, arg1: $VertexConsumer$Type, arg2: integer, arg3: integer, arg4: float, arg5: float, arg6: float, arg7: float): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $QuarkArmorModel$Type = ($QuarkArmorModel);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $QuarkArmorModel_ = $QuarkArmorModel$Type;
}}
declare module "packages/org/violetmoon/quark/content/tools/item/$AbacusItem" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$UseOnContext, $UseOnContext$Type} from "packages/net/minecraft/world/item/context/$UseOnContext"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$ZetaItem, $ZetaItem$Type} from "packages/org/violetmoon/zeta/item/$ZetaItem"

export class $AbacusItem extends $ZetaItem {
static readonly "TAG_POS_X": string
static readonly "TAG_POS_Y": string
static readonly "TAG_POS_Z": string
static "MAX_COUNT": integer
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $ZetaModule$Type)

public static "getCount"(arg0: $ItemStack$Type, arg1: $BlockPos$Type, arg2: $Level$Type): integer
public "useOn"(arg0: $UseOnContext$Type): $InteractionResult
public static "getBlockPos"(arg0: $ItemStack$Type): $BlockPos
public static "setBlockPos"(arg0: $ItemStack$Type, arg1: $BlockPos$Type): void
public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AbacusItem$Type = ($AbacusItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AbacusItem_ = $AbacusItem$Type;
}}
declare module "packages/org/violetmoon/quark/content/tweaks/module/$LockRotationModule$LockProfile" {
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$Field, $Field$Type} from "packages/java/lang/reflect/$Field"

export class $LockRotationModule$LockProfile extends $Record {

constructor(facing: $Direction$Type, half: integer)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "half"(): integer
public static "readProfile"(arg0: $FriendlyByteBuf$Type, arg1: $Field$Type): $LockRotationModule$LockProfile
public static "writeProfile"(arg0: $FriendlyByteBuf$Type, arg1: $Field$Type, arg2: $LockRotationModule$LockProfile$Type): void
public "facing"(): $Direction
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LockRotationModule$LockProfile$Type = ($LockRotationModule$LockProfile);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LockRotationModule$LockProfile_ = $LockRotationModule$LockProfile$Type;
}}
declare module "packages/org/violetmoon/zeta/advancement/$AdvancementModifierRegistry" {
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ZAddReloadListener, $ZAddReloadListener$Type} from "packages/org/violetmoon/zeta/event/load/$ZAddReloadListener"
import {$IAdvancementModifier, $IAdvancementModifier$Type} from "packages/org/violetmoon/zeta/api/$IAdvancementModifier"
import {$ManualTrigger, $ManualTrigger$Type} from "packages/org/violetmoon/zeta/advancement/$ManualTrigger"

export class $AdvancementModifierRegistry {

constructor(arg0: $Zeta$Type)

public "registerManualTrigger"(arg0: string): $ManualTrigger
public "addListeners"(arg0: $ZAddReloadListener$Type): void
public "addModifier"(arg0: $IAdvancementModifier$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AdvancementModifierRegistry$Type = ($AdvancementModifierRegistry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AdvancementModifierRegistry_ = $AdvancementModifierRegistry$Type;
}}
declare module "packages/org/violetmoon/zeta/config/type/$ClusterSizeConfig$Builder" {
import {$DimensionConfig, $DimensionConfig$Type} from "packages/org/violetmoon/zeta/config/type/$DimensionConfig"
import {$IBiomeConfig, $IBiomeConfig$Type} from "packages/org/violetmoon/zeta/config/type/$IBiomeConfig"
import {$Biome, $Biome$Type} from "packages/net/minecraft/world/level/biome/$Biome"
import {$ClusterSizeConfig, $ClusterSizeConfig$Type} from "packages/org/violetmoon/zeta/config/type/$ClusterSizeConfig"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"

export class $ClusterSizeConfig$Builder<B extends $ClusterSizeConfig$Builder<(B)>> {

constructor()

public "dimensions"(arg0: $DimensionConfig$Type): B
public "build"(): $ClusterSizeConfig
public "verticalSize"(arg0: integer): B
public "horizontalSize"(arg0: integer): B
public "biomes"(arg0: $IBiomeConfig$Type): B
public "verticalVariation"(arg0: integer): B
public "maxYLevel"(arg0: integer): B
public "minYLevel"(arg0: integer): B
public "biomeDeny"(...arg0: ($TagKey$Type<($Biome$Type)>)[]): B
public "biomeAllow"(...arg0: ($TagKey$Type<($Biome$Type)>)[]): B
public "horizontalVariation"(arg0: integer): B
public "rarity"(arg0: integer): B
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClusterSizeConfig$Builder$Type<B> = ($ClusterSizeConfig$Builder<(B)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClusterSizeConfig$Builder_<B> = $ClusterSizeConfig$Builder$Type<(B)>;
}}
declare module "packages/org/violetmoon/zeta/registry/$IZetaItemPropertiesFiller" {
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"

export interface $IZetaItemPropertiesFiller {

 "fillItemProperties"(arg0: $Item$Properties$Type): void

(arg0: $Item$Properties$Type): void
}

export namespace $IZetaItemPropertiesFiller {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IZetaItemPropertiesFiller$Type = ($IZetaItemPropertiesFiller);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IZetaItemPropertiesFiller_ = $IZetaItemPropertiesFiller$Type;
}}
declare module "packages/org/violetmoon/zetaimplforge/client/event/play/$ForgeZRenderTick" {
import {$TickEvent$RenderTickEvent, $TickEvent$RenderTickEvent$Type} from "packages/net/minecraftforge/event/$TickEvent$RenderTickEvent"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$ZRenderTick, $ZRenderTick$Type} from "packages/org/violetmoon/zeta/client/event/play/$ZRenderTick"

export class $ForgeZRenderTick extends $Record implements $ZRenderTick {

constructor(e: $TickEvent$RenderTickEvent$Type)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "e"(): $TickEvent$RenderTickEvent
public "isEndPhase"(): boolean
public "getRenderTickTime"(): float
public "isStartPhase"(): boolean
get "endPhase"(): boolean
get "renderTickTime"(): float
get "startPhase"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ForgeZRenderTick$Type = ($ForgeZRenderTick);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ForgeZRenderTick_ = $ForgeZRenderTick$Type;
}}
declare module "packages/org/violetmoon/quark/content/client/resources/$AttributeIconEntry$CompareType" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$ChatFormatting, $ChatFormatting$Type} from "packages/net/minecraft/$ChatFormatting"

export class $AttributeIconEntry$CompareType extends $Enum<($AttributeIconEntry$CompareType)> {
static readonly "NO_COMPARE": $AttributeIconEntry$CompareType
static readonly "LOWER_BETTER": $AttributeIconEntry$CompareType
static readonly "HIGHER_BETTER": $AttributeIconEntry$CompareType


public static "values"(): ($AttributeIconEntry$CompareType)[]
public static "valueOf"(arg0: string): $AttributeIconEntry$CompareType
public "getColor"(arg0: double, arg1: double): $ChatFormatting
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AttributeIconEntry$CompareType$Type = (("no_compare") | ("higher_better") | ("lower_better")) | ($AttributeIconEntry$CompareType);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AttributeIconEntry$CompareType_ = $AttributeIconEntry$CompareType$Type;
}}
declare module "packages/org/violetmoon/quark/content/building/module/$IndustrialPaletteModule" {
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$ZRegister, $ZRegister$Type} from "packages/org/violetmoon/zeta/event/load/$ZRegister"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $IndustrialPaletteModule extends $ZetaModule {
static "enableIronPlates": boolean
static "enableIronLadder": boolean
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "register"(arg0: $ZRegister$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IndustrialPaletteModule$Type = ($IndustrialPaletteModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IndustrialPaletteModule_ = $IndustrialPaletteModule$Type;
}}
declare module "packages/org/violetmoon/quark/content/experimental/module/$SpawnerReplacerModule" {
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$List, $List$Type} from "packages/java/util/$List"
import {$SpawnerBlockEntity, $SpawnerBlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$SpawnerBlockEntity"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZConfigChanged, $ZConfigChanged$Type} from "packages/org/violetmoon/zeta/event/load/$ZConfigChanged"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $SpawnerReplacerModule extends $ZetaModule {
static "replaceMobs": $List<(string)>
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "configChanged"(arg0: $ZConfigChanged$Type): void
public static "spawnerUpdate"(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: $SpawnerBlockEntity$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SpawnerReplacerModule$Type = ($SpawnerReplacerModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SpawnerReplacerModule_ = $SpawnerReplacerModule$Type;
}}
declare module "packages/org/violetmoon/zeta/item/$IZetaItem" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$BooleanSupplier, $BooleanSupplier$Type} from "packages/java/util/function/$BooleanSupplier"
import {$CreativeModeTab, $CreativeModeTab$Type} from "packages/net/minecraft/world/item/$CreativeModeTab"
import {$ResourceKey, $ResourceKey$Type} from "packages/net/minecraft/resources/$ResourceKey"
import {$ItemLike, $ItemLike$Type} from "packages/net/minecraft/world/level/$ItemLike"
import {$IDisableable, $IDisableable$Type} from "packages/org/violetmoon/zeta/module/$IDisableable"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export interface $IZetaItem extends $IDisableable<($IZetaItem)> {

 "getItem"(): $Item
 "setCreativeTab"(arg0: $ResourceKey$Type<($CreativeModeTab$Type)>): $Item
 "setCreativeTab"(arg0: $ResourceKey$Type<($CreativeModeTab$Type)>, arg1: $ItemLike$Type, arg2: boolean): $Item
 "getModule"(): $ZetaModule
 "isEnabled"(): boolean
 "doesConditionApply"(): boolean
 "setCondition"(arg0: $BooleanSupplier$Type): $IZetaItem
}

export namespace $IZetaItem {
function isEnabled(arg0: $Item$Type): boolean
function isEnabled(arg0: $Block$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IZetaItem$Type = ($IZetaItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IZetaItem_ = $IZetaItem$Type;
}}
declare module "packages/org/violetmoon/quark/content/world/module/$AzaleaWoodModule" {
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$ZRegister, $ZRegister$Type} from "packages/org/violetmoon/zeta/event/load/$ZRegister"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ZAddReloadListener, $ZAddReloadListener$Type} from "packages/org/violetmoon/zeta/event/load/$ZAddReloadListener"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $AzaleaWoodModule extends $ZetaModule {
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "register"(arg0: $ZRegister$Type): void
public "onServerReload"(arg0: $ZAddReloadListener$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AzaleaWoodModule$Type = ($AzaleaWoodModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AzaleaWoodModule_ = $AzaleaWoodModule$Type;
}}
declare module "packages/org/violetmoon/zeta/client/$ZetaClient" {
import {$IZetaPlayEvent, $IZetaPlayEvent$Type} from "packages/org/violetmoon/zeta/event/bus/$IZetaPlayEvent"
import {$BlockEntityWithoutLevelRenderer, $BlockEntityWithoutLevelRenderer$Type} from "packages/net/minecraft/client/renderer/$BlockEntityWithoutLevelRenderer"
import {$IZetaMessage, $IZetaMessage$Type} from "packages/org/violetmoon/zeta/network/$IZetaMessage"
import {$BlockColor, $BlockColor$Type} from "packages/net/minecraft/client/color/block/$BlockColor"
import {$HumanoidArmorModelGetter, $HumanoidArmorModelGetter$Type} from "packages/org/violetmoon/zeta/client/$HumanoidArmorModelGetter"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$ItemColor, $ItemColor$Type} from "packages/net/minecraft/client/color/item/$ItemColor"
import {$ItemColors, $ItemColors$Type} from "packages/net/minecraft/client/color/item/$ItemColors"
import {$RegistryAccess, $RegistryAccess$Type} from "packages/net/minecraft/core/$RegistryAccess"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$TopLayerTooltipHandler, $TopLayerTooltipHandler$Type} from "packages/org/violetmoon/zeta/client/$TopLayerTooltipHandler"
import {$BlockColors, $BlockColors$Type} from "packages/net/minecraft/client/color/block/$BlockColors"
import {$IZetaLoadEvent, $IZetaLoadEvent$Type} from "packages/org/violetmoon/zeta/event/bus/$IZetaLoadEvent"
import {$IZeta, $IZeta$Type} from "packages/org/violetmoon/zeta/util/zetalist/$IZeta"
import {$ZetaEventBus, $ZetaEventBus$Type} from "packages/org/violetmoon/zeta/event/bus/$ZetaEventBus"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ClientTicker, $ClientTicker$Type} from "packages/org/violetmoon/zeta/client/$ClientTicker"
import {$ItemLike, $ItemLike$Type} from "packages/net/minecraft/world/level/$ItemLike"
import {$ClientRegistryExtension, $ClientRegistryExtension$Type} from "packages/org/violetmoon/zeta/client/$ClientRegistryExtension"
import {$ClientConfigManager, $ClientConfigManager$Type} from "packages/org/violetmoon/zeta/client/config/$ClientConfigManager"

export class $ZetaClient implements $IZeta {
readonly "zeta": $Zeta
readonly "loadBus": $ZetaEventBus<($IZetaLoadEvent)>
readonly "playBus": $ZetaEventBus<($IZetaPlayEvent)>
 "generalIcons": $ResourceLocation
readonly "ticker": $ClientTicker
readonly "clientConfigManager": $ClientConfigManager
readonly "topLayerTooltipHandler": $TopLayerTooltipHandler
readonly "clientRegistryExtension": $ClientRegistryExtension

constructor(arg0: $Zeta$Type)

public "start"(): void
public "asZeta"(): $Zeta
public "createClientTicker"(): $ClientTicker
public "getBlockColor"(arg0: $BlockColors$Type, arg1: $Block$Type): $BlockColor
public "getItemColor"(arg0: $ItemColors$Type, arg1: $ItemLike$Type): $ItemColor
public "hackilyGetCurrentClientLevelRegistryAccess"(): $RegistryAccess
public "createTopLayerTooltipHandler"(): $TopLayerTooltipHandler
public "setBlockEntityWithoutLevelRenderer"(arg0: $Item$Type, arg1: $BlockEntityWithoutLevelRenderer$Type): void
public "createClientRegistryExtension"(): $ClientRegistryExtension
public "createClientConfigManager"(): $ClientConfigManager
public "setHumanoidArmorModel"(arg0: $Item$Type, arg1: $HumanoidArmorModelGetter$Type): void
public "sendToServer"(arg0: $IZetaMessage$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZetaClient$Type = ($ZetaClient);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZetaClient_ = $ZetaClient$Type;
}}
declare module "packages/org/violetmoon/quark/integration/lootr/$LootrVariantChestBlock$Item" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$UseOnContext, $UseOnContext$Type} from "packages/net/minecraft/world/item/context/$UseOnContext"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$AdditionalItemPlacement, $AdditionalItemPlacement$Type} from "packages/net/mehvahdjukaar/moonlight/api/item/additional_placements/$AdditionalItemPlacement"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ZetaBlockItem, $ZetaBlockItem$Type} from "packages/org/violetmoon/zeta/item/$ZetaBlockItem"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $LootrVariantChestBlock$Item extends $ZetaBlockItem {
static readonly "BLOCK_ENTITY_TAG": string
static readonly "BLOCK_STATE_TAG": string
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Block$Type, arg1: $Item$Properties$Type, arg2: boolean)

public "onItemUseFirstZeta"(arg0: $ItemStack$Type, arg1: $UseOnContext$Type): $InteractionResult
public "moonlight$addAdditionalBehavior"(arg0: $AdditionalItemPlacement$Type): void
public "moonlight$getAdditionalBehavior"(): $AdditionalItemPlacement
public "moonlight$getClientAnimationExtension"(): any
public "moonlight$setClientAnimationExtension"(arg0: any): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LootrVariantChestBlock$Item$Type = ($LootrVariantChestBlock$Item);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LootrVariantChestBlock$Item_ = $LootrVariantChestBlock$Item$Type;
}}
declare module "packages/org/violetmoon/quark/addons/oddities/capability/$CrateItemHandler" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStackHandler, $ItemStackHandler$Type} from "packages/net/minecraftforge/items/$ItemStackHandler"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $CrateItemHandler extends $ItemStackHandler {
 "displayTotal": integer
 "displaySlots": integer

constructor()

public "clear"(): void
public "isEmpty"(): boolean
public "onContentsChanged"(arg0: integer): void
public "insertItem"(arg0: integer, arg1: $ItemStack$Type, arg2: boolean): $ItemStack
public "setStackInSlot"(arg0: integer, arg1: $ItemStack$Type): void
public "getSlotLimit"(arg0: integer): integer
public "extractItem"(arg0: integer, arg1: integer, arg2: boolean): $ItemStack
public "deserializeNBT"(arg0: $CompoundTag$Type): void
public "spill"(arg0: $Level$Type, arg1: $BlockPos$Type): void
public "recalculate"(): void
get "empty"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CrateItemHandler$Type = ($CrateItemHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CrateItemHandler_ = $CrateItemHandler$Type;
}}
declare module "packages/org/violetmoon/zeta/mixin/plugin/$DelegateInterfaceTarget" {
import {$Annotation, $Annotation$Type} from "packages/java/lang/annotation/$Annotation"
import {$Class, $Class$Type} from "packages/java/lang/$Class"

export interface $DelegateInterfaceTarget extends $Annotation {

 "equals"(arg0: any): boolean
 "toString"(): string
 "hashCode"(): integer
 "annotationType"(): $Class<(any)>
}

export namespace $DelegateInterfaceTarget {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DelegateInterfaceTarget$Type = ($DelegateInterfaceTarget);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DelegateInterfaceTarget_ = $DelegateInterfaceTarget$Type;
}}
declare module "packages/org/violetmoon/zeta/mixin/mixins/$AccessorPistonStructureResolver" {
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export interface $AccessorPistonStructureResolver {

 "zeta$extending"(): boolean
 "zeta$pistonPos"(): $BlockPos
 "zeta$level"(): $Level
 "zeta$startPos"(): $BlockPos
 "zeta$pistonDirection"(): $Direction
}

export namespace $AccessorPistonStructureResolver {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AccessorPistonStructureResolver$Type = ($AccessorPistonStructureResolver);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AccessorPistonStructureResolver_ = $AccessorPistonStructureResolver$Type;
}}
declare module "packages/org/violetmoon/zeta/advancement/modifier/$TwoByTwoModifier" {
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$AdvancementModifier, $AdvancementModifier$Type} from "packages/org/violetmoon/zeta/advancement/$AdvancementModifier"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$IMutableAdvancement, $IMutableAdvancement$Type} from "packages/org/violetmoon/zeta/api/$IMutableAdvancement"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $TwoByTwoModifier extends $AdvancementModifier {
readonly "module": $ZetaModule

constructor(arg0: $ZetaModule$Type, arg1: $Set$Type<($EntityType$Type<(any)>)>)

public "apply"(arg0: $ResourceLocation$Type, arg1: $IMutableAdvancement$Type): boolean
public "getTargets"(): $Set<($ResourceLocation)>
get "targets"(): $Set<($ResourceLocation)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TwoByTwoModifier$Type = ($TwoByTwoModifier);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TwoByTwoModifier_ = $TwoByTwoModifier$Type;
}}
declare module "packages/org/violetmoon/zeta/module/$ZetaModule" {
import {$ZGatherHints, $ZGatherHints$Type} from "packages/org/violetmoon/zeta/event/play/loading/$ZGatherHints"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"

export class $ZetaModule {
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "setEnabled"(arg0: $Zeta$Type, arg1: boolean): void
public "addAnnotationHints"(arg0: $ZGatherHints$Type): void
public "postConstruct"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZetaModule$Type = ($ZetaModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZetaModule_ = $ZetaModule$Type;
}}
declare module "packages/org/violetmoon/zeta/client/config/definition/$SectionClientDefinition" {
import {$AbstractWidget, $AbstractWidget$Type} from "packages/net/minecraft/client/gui/components/$AbstractWidget"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$ChangeSet, $ChangeSet$Type} from "packages/org/violetmoon/zeta/config/$ChangeSet"
import {$ZetaClient, $ZetaClient$Type} from "packages/org/violetmoon/zeta/client/$ZetaClient"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$SectionDefinition, $SectionDefinition$Type} from "packages/org/violetmoon/zeta/config/$SectionDefinition"
import {$ClientDefinitionExt, $ClientDefinitionExt$Type} from "packages/org/violetmoon/zeta/client/config/definition/$ClientDefinitionExt"

export class $SectionClientDefinition implements $ClientDefinitionExt<($SectionDefinition)> {

constructor()

public "addWidgets"(arg0: $ZetaClient$Type, arg1: $Screen$Type, arg2: $ChangeSet$Type, arg3: $SectionDefinition$Type, arg4: $Consumer$Type<($AbstractWidget$Type)>): void
public "getSubtitle"(arg0: $ChangeSet$Type, arg1: $SectionDefinition$Type): string
public "truncate"(arg0: string): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SectionClientDefinition$Type = ($SectionClientDefinition);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SectionClientDefinition_ = $SectionClientDefinition$Type;
}}
declare module "packages/org/violetmoon/zeta/config/$SyncedFlagHandler" {
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$ConfigFlagManager, $ConfigFlagManager$Type} from "packages/org/violetmoon/zeta/config/$ConfigFlagManager"
import {$BitSet, $BitSet$Type} from "packages/java/util/$BitSet"
import {$ZConfigChanged, $ZConfigChanged$Type} from "packages/org/violetmoon/zeta/event/load/$ZConfigChanged"

export class $SyncedFlagHandler {

constructor()

public static "expectedHash"(): integer
public static "expectedLength"(): integer
public static "setupFlagManager"(arg0: $ConfigFlagManager$Type): void
public static "sendFlagInfoToPlayers"(arg0: $ZConfigChanged$Type): void
public static "receiveFlagInfoFromServer"(arg0: $BitSet$Type): void
public static "receiveFlagInfoFromPlayer"(arg0: $ServerPlayer$Type, arg1: $BitSet$Type): void
public static "getFlagForPlayer"(arg0: $ServerPlayer$Type, arg1: string): boolean
public static "getFlagForServer"(arg0: string): boolean
public static "compileFlagInfo"(): $BitSet
set "upFlagManager"(value: $ConfigFlagManager$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SyncedFlagHandler$Type = ($SyncedFlagHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SyncedFlagHandler_ = $SyncedFlagHandler$Type;
}}
declare module "packages/org/violetmoon/zeta/client/event/play/$ZFirstClientTick" {
import {$IZetaLoadEvent, $IZetaLoadEvent$Type} from "packages/org/violetmoon/zeta/event/bus/$IZetaLoadEvent"

export class $ZFirstClientTick implements $IZetaLoadEvent {

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZFirstClientTick$Type = ($ZFirstClientTick);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZFirstClientTick_ = $ZFirstClientTick$Type;
}}
declare module "packages/org/violetmoon/zeta/client/event/play/$ZRenderContainerScreen" {
import {$IZetaPlayEvent, $IZetaPlayEvent$Type} from "packages/org/violetmoon/zeta/event/bus/$IZetaPlayEvent"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$AbstractContainerScreen, $AbstractContainerScreen$Type} from "packages/net/minecraft/client/gui/screens/inventory/$AbstractContainerScreen"

export interface $ZRenderContainerScreen extends $IZetaPlayEvent {

 "getMouseX"(): integer
 "getMouseY"(): integer
 "getGuiGraphics"(): $GuiGraphics
 "getContainerScreen"(): $AbstractContainerScreen<(any)>
}

export namespace $ZRenderContainerScreen {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZRenderContainerScreen$Type = ($ZRenderContainerScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZRenderContainerScreen_ = $ZRenderContainerScreen$Type;
}}
declare module "packages/org/violetmoon/quark/content/building/entity/$GlassItemFrame$SignAttachment" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $GlassItemFrame$SignAttachment extends $Enum<($GlassItemFrame$SignAttachment)> {
static readonly "NOT_ATTACHED": $GlassItemFrame$SignAttachment
static readonly "STANDING_IN_FRONT": $GlassItemFrame$SignAttachment
static readonly "STANDING_BEHIND": $GlassItemFrame$SignAttachment
static readonly "WALL_SIGN": $GlassItemFrame$SignAttachment
static readonly "HANGING_FROM_WALL": $GlassItemFrame$SignAttachment
static readonly "HANGING_IN_FRONT": $GlassItemFrame$SignAttachment
static readonly "HANGING_BEHIND": $GlassItemFrame$SignAttachment


public static "values"(): ($GlassItemFrame$SignAttachment)[]
public static "valueOf"(arg0: string): $GlassItemFrame$SignAttachment
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GlassItemFrame$SignAttachment$Type = (("standing_in_front") | ("hanging_from_wall") | ("standing_behind") | ("not_attached") | ("hanging_behind") | ("hanging_in_front") | ("wall_sign")) | ($GlassItemFrame$SignAttachment);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GlassItemFrame$SignAttachment_ = $GlassItemFrame$SignAttachment$Type;
}}
declare module "packages/org/violetmoon/quark/addons/oddities/block/$MatrixEnchantingTableBlock" {
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$MutableComponent, $MutableComponent$Type} from "packages/net/minecraft/network/chat/$MutableComponent"
import {$FluidState, $FluidState$Type} from "packages/net/minecraft/world/level/material/$FluidState"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$ToolAction, $ToolAction$Type} from "packages/net/minecraftforge/common/$ToolAction"
import {$List, $List$Type} from "packages/java/util/$List"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$IForgeBlock, $IForgeBlock$Type} from "packages/net/minecraftforge/common/extensions/$IForgeBlock"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$CreativeModeTab, $CreativeModeTab$Type} from "packages/net/minecraft/world/item/$CreativeModeTab"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$EnchantmentTableBlock, $EnchantmentTableBlock$Type} from "packages/net/minecraft/world/level/block/$EnchantmentTableBlock"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$IZetaBlock, $IZetaBlock$Type} from "packages/org/violetmoon/zeta/block/$IZetaBlock"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$UseOnContext, $UseOnContext$Type} from "packages/net/minecraft/world/item/context/$UseOnContext"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$SoundType, $SoundType$Type} from "packages/net/minecraft/world/level/block/$SoundType"
import {$IPlantable, $IPlantable$Type} from "packages/net/minecraftforge/common/$IPlantable"
import {$IZetaBlockExtensions, $IZetaBlockExtensions$Type} from "packages/org/violetmoon/zeta/block/ext/$IZetaBlockExtensions"
import {$BlockEntityTicker, $BlockEntityTicker$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityTicker"
import {$ResourceKey, $ResourceKey$Type} from "packages/net/minecraft/resources/$ResourceKey"
import {$ItemLike, $ItemLike$Type} from "packages/net/minecraft/world/level/$ItemLike"
import {$BlockAndTintGetter, $BlockAndTintGetter$Type} from "packages/net/minecraft/world/level/$BlockAndTintGetter"

export class $MatrixEnchantingTableBlock extends $EnchantmentTableBlock implements $IZetaBlock, $IZetaBlockExtensions, $IForgeBlock {
static readonly "BOOKSHELF_OFFSETS": $List<($BlockPos)>
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(arg0: $ZetaModule$Type)

public "getModule"(): $ZetaModule
public "getTicker"<T extends $BlockEntity>(arg0: $Level$Type, arg1: $BlockState$Type, arg2: $BlockEntityType$Type<(T)>): $BlockEntityTicker<(T)>
public "setPlacedBy"(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: $LivingEntity$Type, arg4: $ItemStack$Type): void
public "getName"(): $MutableComponent
public "canSustainPlant"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type, arg4: $IPlantable$Type): boolean
public "isLadder"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "isConduitFrame"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): boolean
public "doesConditionApply"(): boolean
public "getEnchantPowerBonus"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type): float
public "shouldDisplayFluidOverlay"(arg0: $BlockState$Type, arg1: $BlockAndTintGetter$Type, arg2: $BlockPos$Type, arg3: $FluidState$Type): boolean
public "getToolModifiedState"(arg0: $BlockState$Type, arg1: $UseOnContext$Type, arg2: $ToolAction$Type, arg3: boolean): $BlockState
public "getBeaconColorMultiplier"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): (float)[]
public "makesOpenTrapdoorAboveClimbable"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockState$Type): boolean
public "getSoundType"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): $SoundType
public "isScaffolding"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "getLightEmission"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type): integer
public "isFlammable"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): boolean
public "canStickTo"(arg0: $BlockState$Type, arg1: $BlockState$Type): boolean
public "getFireSpreadSpeed"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "getFlammability"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "isStickyBlock"(arg0: $BlockState$Type): boolean
public "use"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type, arg3: $Player$Type, arg4: $InteractionHand$Type, arg5: $BlockHitResult$Type): $InteractionResult
public "onRemove"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type, arg3: $BlockState$Type, arg4: boolean): void
public "animateTick"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type, arg3: $RandomSource$Type): void
public "newBlockEntity"(arg0: $BlockPos$Type, arg1: $BlockState$Type): $BlockEntity
public "collisionExtendsVertically"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): boolean
public "getBlock"(): $Block
public "getFireSpreadSpeedZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "getFlammabilityZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "setCreativeTab"(arg0: $ResourceKey$Type<($CreativeModeTab$Type)>): $Block
public "setCreativeTab"(arg0: $ResourceKey$Type<($CreativeModeTab$Type)>, arg1: $ItemLike$Type, arg2: boolean): $Block
public "isConduitFrameZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): boolean
public "isLadderZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "isStickyBlockZeta"(arg0: $BlockState$Type): boolean
public "isScaffoldingZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "canStickToZeta"(arg0: $BlockState$Type, arg1: $BlockState$Type): boolean
public "isFlammableZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): boolean
public "getSoundTypeZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): $SoundType
public "makesOpenTrapdoorAboveClimbableZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockState$Type): boolean
public "canSustainPlantZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type, arg4: string): boolean
public "getToolModifiedStateZeta"(arg0: $BlockState$Type, arg1: $UseOnContext$Type, arg2: string, arg3: boolean): $BlockState
public "collisionExtendsVerticallyZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): boolean
public "shouldDisplayFluidOverlayZeta"(arg0: $BlockState$Type, arg1: $BlockAndTintGetter$Type, arg2: $BlockPos$Type, arg3: $FluidState$Type): boolean
public "getEnchantPowerBonusZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type): float
public "getBeaconColorMultiplierZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): (float)[]
public "getLightEmissionZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type): integer
public "isEnabled"(): boolean
public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
get "module"(): $ZetaModule
get "name"(): $MutableComponent
get "block"(): $Block
set "creativeTab"(value: $ResourceKey$Type<($CreativeModeTab$Type)>)
get "enabled"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MatrixEnchantingTableBlock$Type = ($MatrixEnchantingTableBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MatrixEnchantingTableBlock_ = $MatrixEnchantingTableBlock$Type;
}}
declare module "packages/org/violetmoon/quark/content/client/tooltip/$ShulkerBoxTooltips" {
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$ZGatherTooltipComponents, $ZGatherTooltipComponents$Type} from "packages/org/violetmoon/zeta/client/event/play/$ZGatherTooltipComponents"

export class $ShulkerBoxTooltips {
static readonly "WIDGET_RESOURCE": $ResourceLocation

constructor()

public static "makeTooltip"(arg0: $ZGatherTooltipComponents$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ShulkerBoxTooltips$Type = ($ShulkerBoxTooltips);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ShulkerBoxTooltips_ = $ShulkerBoxTooltips$Type;
}}
declare module "packages/org/violetmoon/quark/content/experimental/module/$NarratorReadoutModule" {
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $NarratorReadoutModule extends $ZetaModule {
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $NarratorReadoutModule$Type = ($NarratorReadoutModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $NarratorReadoutModule_ = $NarratorReadoutModule$Type;
}}
declare module "packages/org/violetmoon/quark/content/building/item/$QuarkItemFrameItem" {
import {$TriFunction, $TriFunction$Type} from "packages/org/violetmoon/quark/base/util/$TriFunction"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$UseOnContext, $UseOnContext$Type} from "packages/net/minecraft/world/item/context/$UseOnContext"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$ZetaItem, $ZetaItem$Type} from "packages/org/violetmoon/zeta/item/$ZetaItem"

export class $QuarkItemFrameItem extends $ZetaItem {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: string, arg1: $ZetaModule$Type, arg2: $TriFunction$Type<(any), ($Level$Type), ($BlockPos$Type), ($Direction$Type)>)

public "useOn"(arg0: $UseOnContext$Type): $InteractionResult
public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $QuarkItemFrameItem$Type = ($QuarkItemFrameItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $QuarkItemFrameItem_ = $QuarkItemFrameItem$Type;
}}
declare module "packages/org/violetmoon/zeta/event/play/entity/living/$ZLivingDrops" {
import {$IZetaPlayEvent, $IZetaPlayEvent$Type} from "packages/org/violetmoon/zeta/event/bus/$IZetaPlayEvent"
import {$LivingGetter, $LivingGetter$Type} from "packages/org/violetmoon/zeta/event/bus/helpers/$LivingGetter"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$Cancellable, $Cancellable$Type} from "packages/org/violetmoon/zeta/event/bus/$Cancellable"
import {$ItemEntity, $ItemEntity$Type} from "packages/net/minecraft/world/entity/item/$ItemEntity"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export interface $ZLivingDrops extends $IZetaPlayEvent, $Cancellable, $LivingGetter {

 "getSource"(): $DamageSource
 "isRecentlyHit"(): boolean
 "getDrops"(): $Collection<($ItemEntity)>
 "getLootingLevel"(): integer
 "cancel"(): void
 "setCanceled"(arg0: boolean): void
 "isCanceled"(): boolean
 "getEntity"(): $LivingEntity
}

export namespace $ZLivingDrops {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZLivingDrops$Type = ($ZLivingDrops);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZLivingDrops_ = $ZLivingDrops$Type;
}}
declare module "packages/org/violetmoon/quark/content/world/block/$MonsterBoxBlock" {
import {$EntityBlock, $EntityBlock$Type} from "packages/net/minecraft/world/level/block/$EntityBlock"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$PathComputationType, $PathComputationType$Type} from "packages/net/minecraft/world/level/pathfinder/$PathComputationType"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$ZetaBlock, $ZetaBlock$Type} from "packages/org/violetmoon/zeta/block/$ZetaBlock"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$BlockEntityTicker, $BlockEntityTicker$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityTicker"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$GameEventListener, $GameEventListener$Type} from "packages/net/minecraft/world/level/gameevent/$GameEventListener"

export class $MonsterBoxBlock extends $ZetaBlock implements $EntityBlock {
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(arg0: $ZetaModule$Type)

public "getTicker"<T extends $BlockEntity>(arg0: $Level$Type, arg1: $BlockState$Type, arg2: $BlockEntityType$Type<(T)>): $BlockEntityTicker<(T)>
public "isPathfindable"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $PathComputationType$Type): boolean
public "newBlockEntity"(arg0: $BlockPos$Type, arg1: $BlockState$Type): $BlockEntity
public "getListener"<T extends $BlockEntity>(arg0: $ServerLevel$Type, arg1: T): $GameEventListener
public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MonsterBoxBlock$Type = ($MonsterBoxBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MonsterBoxBlock_ = $MonsterBoxBlock$Type;
}}
declare module "packages/org/violetmoon/quark/base/client/config/$QuarkConfigHomeScreen" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$ZetaConfigHomeScreen, $ZetaConfigHomeScreen$Type} from "packages/org/violetmoon/zeta/client/config/screen/$ZetaConfigHomeScreen"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$List, $List$Type} from "packages/java/util/$List"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $QuarkConfigHomeScreen extends $ZetaConfigHomeScreen {
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering

constructor(arg0: $Screen$Type)

public "renderBackground"(arg0: $GuiGraphics$Type): void
public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $QuarkConfigHomeScreen$Type = ($QuarkConfigHomeScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $QuarkConfigHomeScreen_ = $QuarkConfigHomeScreen$Type;
}}
declare module "packages/org/violetmoon/quark/content/building/module/$ShearVinesModule" {
import {$ZRightClickBlock, $ZRightClickBlock$Type} from "packages/org/violetmoon/zeta/event/play/entity/player/$ZRightClickBlock"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$ZRegister, $ZRegister$Type} from "packages/org/violetmoon/zeta/event/load/$ZRegister"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $ShearVinesModule extends $ZetaModule {
static "cut_vine": $Block
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "register"(arg0: $ZRegister$Type): void
public "onRightClick"(arg0: $ZRightClickBlock$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ShearVinesModule$Type = ($ShearVinesModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ShearVinesModule_ = $ShearVinesModule$Type;
}}
declare module "packages/org/violetmoon/quark/content/building/module/$MorePottedPlantsModule" {
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$ZRegister, $ZRegister$Type} from "packages/org/violetmoon/zeta/event/load/$ZRegister"
import {$ZClientSetup, $ZClientSetup$Type} from "packages/org/violetmoon/zeta/client/event/load/$ZClientSetup"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $MorePottedPlantsModule extends $ZetaModule {
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "register"(arg0: $ZRegister$Type): void
public "clientSetup"(arg0: $ZClientSetup$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MorePottedPlantsModule$Type = ($MorePottedPlantsModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MorePottedPlantsModule_ = $MorePottedPlantsModule$Type;
}}
declare module "packages/org/violetmoon/quark/content/building/block/be/$VariantChestBlockEntity" {
import {$ChestBlockEntity, $ChestBlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$ChestBlockEntity"
import {$LithiumStackList, $LithiumStackList$Type} from "packages/me/jellysquid/mods/lithium/common/hopper/$LithiumStackList"
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$InventoryChangeTracker, $InventoryChangeTracker$Type} from "packages/me/jellysquid/mods/lithium/common/block/entity/inventory_change_tracking/$InventoryChangeTracker"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$InventoryChangeListener, $InventoryChangeListener$Type} from "packages/me/jellysquid/mods/lithium/common/block/entity/inventory_change_tracking/$InventoryChangeListener"
import {$LockCode, $LockCode$Type} from "packages/net/minecraft/world/$LockCode"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$AABB, $AABB$Type} from "packages/net/minecraft/world/phys/$AABB"

export class $VariantChestBlockEntity extends $ChestBlockEntity {
 "items": $NonNullList<($ItemStack)>
static readonly "LOOT_TABLE_TAG": string
static readonly "LOOT_TABLE_SEED_TAG": string
 "lootTable": $ResourceLocation
 "lootTableSeed": long
 "lockKey": $LockCode
 "blockState": $BlockState

constructor(arg0: $BlockPos$Type, arg1: $BlockState$Type)

public "getRenderBoundingBox"(): $AABB
public "stopForwardingMajorInventoryChanges"(arg0: $InventoryChangeListener$Type): void
public "emitFirstComparatorAdded"(): void
public "forwardMajorInventoryChanges"(arg0: $InventoryChangeListener$Type): void
public "emitContentModified"(): void
public "emitStackListReplaced"(): void
public "forwardContentChangeOnce"(arg0: $InventoryChangeListener$Type, arg1: $LithiumStackList$Type, arg2: $InventoryChangeTracker$Type): void
public "emitRemoved"(): void
public "setChanged"(): void
public static "stillValidBlockEntity"(arg0: $BlockEntity$Type, arg1: $Player$Type, arg2: integer): boolean
public static "stillValidBlockEntity"(arg0: $BlockEntity$Type, arg1: $Player$Type): boolean
public static "tryClear"(arg0: any): void
get "renderBoundingBox"(): $AABB
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $VariantChestBlockEntity$Type = ($VariantChestBlockEntity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $VariantChestBlockEntity_ = $VariantChestBlockEntity$Type;
}}
declare module "packages/org/violetmoon/quark/addons/oddities/inventory/$CrateMenu" {
import {$CrateBlockEntity, $CrateBlockEntity$Type} from "packages/org/violetmoon/quark/addons/oddities/block/be/$CrateBlockEntity"
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$AbstractContainerMenu, $AbstractContainerMenu$Type} from "packages/net/minecraft/world/inventory/$AbstractContainerMenu"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"
import {$ContainerData, $ContainerData$Type} from "packages/net/minecraft/world/inventory/$ContainerData"

export class $CrateMenu extends $AbstractContainerMenu {
readonly "crate": $CrateBlockEntity
readonly "playerInv": $Inventory
static readonly "numRows": integer
static readonly "numCols": integer
static readonly "displayedSlots": integer
readonly "totalSlots": integer
 "scroll": integer
static readonly "SLOT_CLICKED_OUTSIDE": integer
static readonly "QUICKCRAFT_TYPE_CHARITABLE": integer
static readonly "QUICKCRAFT_TYPE_GREEDY": integer
static readonly "QUICKCRAFT_TYPE_CLONE": integer
static readonly "QUICKCRAFT_HEADER_START": integer
static readonly "QUICKCRAFT_HEADER_CONTINUE": integer
static readonly "QUICKCRAFT_HEADER_END": integer
static readonly "CARRIED_SLOT_SIZE": integer
readonly "lastSlots": $NonNullList<($ItemStack)>
readonly "slots": $NonNullList<($Slot)>
 "remoteSlots": $NonNullList<($ItemStack)>
 "containerId": integer

constructor(arg0: integer, arg1: $Inventory$Type, arg2: $CrateBlockEntity$Type)
constructor(arg0: integer, arg1: $Inventory$Type, arg2: $CrateBlockEntity$Type, arg3: $ContainerData$Type)

public static "fromNetwork"(arg0: integer, arg1: $Inventory$Type, arg2: $FriendlyByteBuf$Type): $CrateMenu
public "getTotal"(): integer
public "stillValid"(arg0: $Player$Type): boolean
public "removed"(arg0: $Player$Type): void
public "scroll"(arg0: boolean, arg1: boolean): void
public "quickMoveStack"(arg0: $Player$Type, arg1: integer): $ItemStack
public "m_38903_"(arg0: $ItemStack$Type, arg1: integer, arg2: integer, arg3: boolean): boolean
public "getStackCount"(): integer
get "total"(): integer
get "stackCount"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CrateMenu$Type = ($CrateMenu);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CrateMenu_ = $CrateMenu$Type;
}}
declare module "packages/org/violetmoon/zeta/world/generator/$OreGenerator" {
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$BooleanSupplier, $BooleanSupplier$Type} from "packages/java/util/function/$BooleanSupplier"
import {$ChunkGenerator, $ChunkGenerator$Type} from "packages/net/minecraft/world/level/chunk/$ChunkGenerator"
import {$Generator, $Generator$Type} from "packages/org/violetmoon/zeta/world/generator/$Generator"
import {$OrePocketConfig, $OrePocketConfig$Type} from "packages/org/violetmoon/zeta/config/type/$OrePocketConfig"
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$DimensionConfig, $DimensionConfig$Type} from "packages/org/violetmoon/zeta/config/type/$DimensionConfig"
import {$WorldGenRegion, $WorldGenRegion$Type} from "packages/net/minecraft/server/level/$WorldGenRegion"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $OreGenerator extends $Generator {
static readonly "STONE_MATCHER": $Predicate<($BlockState)>
static readonly "NETHERRACK_MATCHER": $Predicate<($BlockState)>
static readonly "ENDSTONE_MATCHER": $Predicate<($BlockState)>
static readonly "ALL_DIMS_STONE_MATCHER": $Predicate<($BlockState)>
readonly "dimConfig": $DimensionConfig

constructor(arg0: $DimensionConfig$Type, arg1: $OrePocketConfig$Type, arg2: $BlockState$Type, arg3: $Predicate$Type<($BlockState$Type)>, arg4: $BooleanSupplier$Type)

public "place"(arg0: $LevelAccessor$Type, arg1: $RandomSource$Type, arg2: $BlockPos$Type): boolean
public "generateChunk"(arg0: $WorldGenRegion$Type, arg1: $ChunkGenerator$Type, arg2: $RandomSource$Type, arg3: $BlockPos$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $OreGenerator$Type = ($OreGenerator);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $OreGenerator_ = $OreGenerator$Type;
}}
declare module "packages/org/violetmoon/zetaimplforge/item/$IForgeItemItemExtensions" {
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$IZetaItemExtensions, $IZetaItemExtensions$Type} from "packages/org/violetmoon/zeta/item/ext/$IZetaItemExtensions"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$EnderMan, $EnderMan$Type} from "packages/net/minecraft/world/entity/monster/$EnderMan"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$UseOnContext, $UseOnContext$Type} from "packages/net/minecraft/world/item/context/$UseOnContext"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$RecipeType, $RecipeType$Type} from "packages/net/minecraft/world/item/crafting/$RecipeType"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$Enchantment, $Enchantment$Type} from "packages/net/minecraft/world/item/enchantment/$Enchantment"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$ItemEntity, $ItemEntity$Type} from "packages/net/minecraft/world/entity/item/$ItemEntity"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $IForgeItemItemExtensions implements $IZetaItemExtensions {
static readonly "INSTANCE": $IForgeItemItemExtensions

constructor()

public "isRepairableZeta"(arg0: $ItemStack$Type): boolean
public "onItemUseFirstZeta"(arg0: $ItemStack$Type, arg1: $UseOnContext$Type): $InteractionResult
public "getBurnTimeZeta"(arg0: $ItemStack$Type, arg1: $RecipeType$Type<(any)>): integer
public "damageItemZeta"<T extends $LivingEntity>(arg0: $ItemStack$Type, arg1: integer, arg2: T, arg3: $Consumer$Type<(T)>): integer
public "isEnderMaskZeta"(arg0: $ItemStack$Type, arg1: $Player$Type, arg2: $EnderMan$Type): boolean
public "canEquipZeta"(arg0: $ItemStack$Type, arg1: $EquipmentSlot$Type, arg2: $Entity$Type): boolean
public "canElytraFlyZeta"(arg0: $ItemStack$Type, arg1: $LivingEntity$Type): boolean
public "canShearZeta"(arg0: $ItemStack$Type): boolean
public "getMaxDamageZeta"(arg0: $ItemStack$Type): integer
public "getEnchantmentLevelZeta"(arg0: $ItemStack$Type, arg1: $Enchantment$Type): integer
public "getAllEnchantmentsZeta"(arg0: $ItemStack$Type): $Map<($Enchantment), (integer)>
public "getEnchantmentValueZeta"(arg0: $ItemStack$Type): integer
public "shouldCauseReequipAnimationZeta"(arg0: $ItemStack$Type, arg1: $ItemStack$Type, arg2: boolean): boolean
public "getArmorTextureZeta"(arg0: $ItemStack$Type, arg1: $Entity$Type, arg2: $EquipmentSlot$Type, arg3: string): string
public "canApplyAtEnchantingTableZeta"(arg0: $ItemStack$Type, arg1: $Enchantment$Type): boolean
public "doesSneakBypassUseZeta"(arg0: $ItemStack$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $Player$Type): boolean
public "getDefaultTooltipHideFlagsZeta"(arg0: $ItemStack$Type): integer
public "onEntityItemUpdateZeta"(arg0: $ItemStack$Type, arg1: $ItemEntity$Type): boolean
public "isBookEnchantableZeta"(arg0: $ItemStack$Type, arg1: $ItemStack$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IForgeItemItemExtensions$Type = ($IForgeItemItemExtensions);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IForgeItemItemExtensions_ = $IForgeItemItemExtensions$Type;
}}
declare module "packages/org/violetmoon/zeta/event/play/loading/$ZAttachCapabilities" {
import {$IZetaPlayEvent, $IZetaPlayEvent$Type} from "packages/org/violetmoon/zeta/event/bus/$IZetaPlayEvent"
import {$ZetaCapability, $ZetaCapability$Type} from "packages/org/violetmoon/zeta/capability/$ZetaCapability"
import {$ICapabilityProvider, $ICapabilityProvider$Type} from "packages/net/minecraftforge/common/capabilities/$ICapabilityProvider"
import {$ZetaCapabilityManager, $ZetaCapabilityManager$Type} from "packages/org/violetmoon/zeta/capability/$ZetaCapabilityManager"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export interface $ZAttachCapabilities<T> extends $IZetaPlayEvent {

 "getObject"(): T
/**
 * 
 * @deprecated
 */
 "addCapabilityForgeApi"(arg0: $ResourceLocation$Type, arg1: $ICapabilityProvider$Type): void
 "getCapabilityManager"(): $ZetaCapabilityManager
 "addCapability"<C>(arg0: $ResourceLocation$Type, arg1: $ZetaCapability$Type<(C)>, arg2: C): void
}

export namespace $ZAttachCapabilities {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZAttachCapabilities$Type<T> = ($ZAttachCapabilities<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZAttachCapabilities_<T> = $ZAttachCapabilities$Type<(T)>;
}}
declare module "packages/org/violetmoon/zeta/event/play/entity/living/$ZBabyEntitySpawn$Lowest" {
import {$Mob, $Mob$Type} from "packages/net/minecraft/world/entity/$Mob"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$AgeableMob, $AgeableMob$Type} from "packages/net/minecraft/world/entity/$AgeableMob"
import {$ZBabyEntitySpawn, $ZBabyEntitySpawn$Type} from "packages/org/violetmoon/zeta/event/play/entity/living/$ZBabyEntitySpawn"

export interface $ZBabyEntitySpawn$Lowest extends $ZBabyEntitySpawn {

 "getChild"(): $AgeableMob
 "getParentB"(): $Mob
 "getCausedByPlayer"(): $Player
 "getParentA"(): $Mob
 "setChild"(arg0: $AgeableMob$Type): void
}

export namespace $ZBabyEntitySpawn$Lowest {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZBabyEntitySpawn$Lowest$Type = ($ZBabyEntitySpawn$Lowest);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZBabyEntitySpawn$Lowest_ = $ZBabyEntitySpawn$Lowest$Type;
}}
declare module "packages/org/violetmoon/quark/content/mobs/entity/$Forgotten" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$WalkAnimationState, $WalkAnimationState$Type} from "packages/net/minecraft/world/entity/$WalkAnimationState"
import {$MobSpawnType, $MobSpawnType$Type} from "packages/net/minecraft/world/entity/$MobSpawnType"
import {$PathNavigation, $PathNavigation$Type} from "packages/net/minecraft/world/entity/ai/navigation/$PathNavigation"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$EntityDataAccessor, $EntityDataAccessor$Type} from "packages/net/minecraft/network/syncher/$EntityDataAccessor"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$AttributeMap, $AttributeMap$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeMap"
import {$ClientGamePacketListener, $ClientGamePacketListener$Type} from "packages/net/minecraft/network/protocol/game/$ClientGamePacketListener"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$ServerLevelAccessor, $ServerLevelAccessor$Type} from "packages/net/minecraft/world/level/$ServerLevelAccessor"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$LevelRenderer, $LevelRenderer$Type} from "packages/net/minecraft/client/renderer/$LevelRenderer"
import {$Skeleton, $Skeleton$Type} from "packages/net/minecraft/world/entity/monster/$Skeleton"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"
import {$DifficultyInstance, $DifficultyInstance$Type} from "packages/net/minecraft/world/$DifficultyInstance"
import {$GoalSelector, $GoalSelector$Type} from "packages/net/minecraft/world/entity/ai/goal/$GoalSelector"
import {$Packet, $Packet$Type} from "packages/net/minecraft/network/protocol/$Packet"
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$AttributeSupplier$Builder, $AttributeSupplier$Builder$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeSupplier$Builder"
import {$SpawnGroupData, $SpawnGroupData$Type} from "packages/net/minecraft/world/entity/$SpawnGroupData"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $Forgotten extends $Skeleton {
static readonly "SHEATHED_ITEM": $EntityDataAccessor<($ItemStack)>
static readonly "FORGOTTEN_LOOT_TABLE": $ResourceLocation
static readonly "CONVERSION_TAG": string
 "entityJs$builder": any
static readonly "MAX_WEARING_ARMOR_CHANCE": float
static readonly "MAX_PICKUP_LOOT_CHANCE": float
static readonly "MAX_ENCHANTED_ARMOR_CHANCE": float
static readonly "MAX_ENCHANTED_WEAPON_CHANCE": float
static readonly "LEASH_TAG": string
static readonly "DEFAULT_EQUIPMENT_DROP_CHANCE": float
static readonly "PRESERVE_ITEM_DROP_CHANCE": integer
static readonly "UPDATE_GOAL_SELECTOR_EVERY_N_TICKS": integer
 "ambientSoundTime": integer
 "navigation": $PathNavigation
readonly "goalSelector": $GoalSelector
readonly "targetSelector": $GoalSelector
 "leashInfoTag": $CompoundTag
static readonly "HAND_SLOTS": integer
static readonly "ARMOR_SLOTS": integer
static readonly "EQUIPMENT_SLOT_OFFSET": integer
static readonly "ARMOR_SLOT_OFFSET": integer
static readonly "SWING_DURATION": integer
static readonly "PLAYER_HURT_EXPERIENCE_TIME": integer
static readonly "MIN_MOVEMENT_DISTANCE": double
static readonly "DEFAULT_BASE_GRAVITY": double
static readonly "DEATH_DURATION": integer
static readonly "USE_ITEM_INTERVAL": integer
static readonly "EXTRA_RENDER_CULLING_SIZE_WITH_BIG_HAT": float
 "attributes": $AttributeMap
readonly "activeEffects": $Map<($MobEffect), ($MobEffectInstance)>
 "swinging": boolean
 "swingingArm": $InteractionHand
 "swingTime": integer
 "removeArrowTime": integer
 "removeStingerTime": integer
 "hurtTime": integer
 "hurtDuration": integer
 "deathTime": integer
 "oAttackAnim": float
 "attackAnim": float
 "attackStrengthTicker": integer
readonly "walkAnimation": $WalkAnimationState
readonly "invulnerableDuration": integer
readonly "timeOffs": float
readonly "rotA": float
 "yBodyRot": float
 "yBodyRotO": float
 "yHeadRot": float
 "yHeadRotO": float
 "dead": boolean
 "jumping": boolean
 "xxa": float
 "yya": float
 "zza": float
 "effectsDirty": boolean
 "noJumpDelay": integer
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(arg0: $EntityType$Type<(any)>, arg1: $Level$Type)

public "prepareEquipment"(): void
public static "registerAttributes"(): $AttributeSupplier$Builder
public "tick"(): void
public "readAdditionalSaveData"(arg0: $CompoundTag$Type): void
public "addAdditionalSaveData"(arg0: $CompoundTag$Type): void
public "getAddEntityPacket"(): $Packet<($ClientGamePacketListener)>
public "canPickUpLoot"(): boolean
public "finalizeSpawn"(arg0: $ServerLevelAccessor$Type, arg1: $DifficultyInstance$Type, arg2: $MobSpawnType$Type, arg3: $SpawnGroupData$Type, arg4: $CompoundTag$Type): $SpawnGroupData
public "lithiumOnEquipmentChanged"(): void
public "tdv$getDynamicLightX"(): double
public "tdv$getDynamicLightZ"(): double
public "tdv$getDynamicLightWorld"(): $Level
public "tdv$shouldUpdateDynamicLight"(): boolean
public "tdv$resetDynamicLight"(): void
public "tdv$getDynamicLightY"(): double
public "tdv$lambdynlights$scheduleTrackedChunksRebuild"(arg0: $LevelRenderer$Type): void
public "tdv$lambdynlights$updateDynamicLight"(arg0: $LevelRenderer$Type): boolean
public "getCachedFeetBlockState"(): $BlockState
get "addEntityPacket"(): $Packet<($ClientGamePacketListener)>
get "cachedFeetBlockState"(): $BlockState
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Forgotten$Type = ($Forgotten);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Forgotten_ = $Forgotten$Type;
}}
declare module "packages/org/violetmoon/quark/content/client/resources/$AttributeSlot" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"

export class $AttributeSlot extends $Enum<($AttributeSlot)> {
static readonly "MAINHAND": $AttributeSlot
static readonly "OFFHAND": $AttributeSlot
static readonly "FEET": $AttributeSlot
static readonly "LEGS": $AttributeSlot
static readonly "CHEST": $AttributeSlot
static readonly "HEAD": $AttributeSlot
static readonly "POTION": $AttributeSlot


public static "values"(): ($AttributeSlot)[]
public static "valueOf"(arg0: string): $AttributeSlot
public static "fromCanonicalSlot"(arg0: $EquipmentSlot$Type): $AttributeSlot
public "getTranslationKey"(): string
public "hasCanonicalSlot"(): boolean
public "getCanonicalSlot"(): $EquipmentSlot
get "translationKey"(): string
get "canonicalSlot"(): $EquipmentSlot
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AttributeSlot$Type = (("mainhand") | ("head") | ("feet") | ("chest") | ("potion") | ("legs") | ("offhand")) | ($AttributeSlot);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AttributeSlot_ = $AttributeSlot$Type;
}}
declare module "packages/org/violetmoon/zeta/config/type/$ConditionalEntitySpawnConfig" {
import {$EntitySpawnConfig, $EntitySpawnConfig$Type} from "packages/org/violetmoon/zeta/config/type/$EntitySpawnConfig"
import {$BiomeTagConfig, $BiomeTagConfig$Type} from "packages/org/violetmoon/zeta/config/type/$BiomeTagConfig"
import {$IBiomeConfig, $IBiomeConfig$Type} from "packages/org/violetmoon/zeta/config/type/$IBiomeConfig"
import {$ConfigFlagManager, $ConfigFlagManager$Type} from "packages/org/violetmoon/zeta/config/$ConfigFlagManager"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $ConditionalEntitySpawnConfig extends $EntitySpawnConfig {
 "enabled": boolean
readonly "flag": string
 "spawnWeight": integer
 "minGroupSize": integer
 "maxGroupSize": integer
 "biomes": $IBiomeConfig

constructor(arg0: string, arg1: integer, arg2: integer, arg3: integer, arg4: $BiomeTagConfig$Type)

public "isEnabled"(): boolean
public "onReload"(arg0: $ZetaModule$Type, arg1: $ConfigFlagManager$Type): void
get "enabled"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ConditionalEntitySpawnConfig$Type = ($ConditionalEntitySpawnConfig);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ConditionalEntitySpawnConfig_ = $ConditionalEntitySpawnConfig$Type;
}}
declare module "packages/org/violetmoon/zeta/event/play/$ZRecipeCrawl$Visit" {
import {$RegistryAccess, $RegistryAccess$Type} from "packages/net/minecraft/core/$RegistryAccess"
import {$ZRecipeCrawl, $ZRecipeCrawl$Type} from "packages/org/violetmoon/zeta/event/play/$ZRecipeCrawl"
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$Ingredient, $Ingredient$Type} from "packages/net/minecraft/world/item/crafting/$Ingredient"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Recipe, $Recipe$Type} from "packages/net/minecraft/world/item/crafting/$Recipe"

export class $ZRecipeCrawl$Visit<T extends $Recipe<(any)>> extends $ZRecipeCrawl {
readonly "recipe": T
readonly "recipeID": $ResourceLocation
readonly "output": $ItemStack
readonly "ingredients": $NonNullList<($Ingredient)>

constructor(arg0: T, arg1: $RegistryAccess$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZRecipeCrawl$Visit$Type<T> = ($ZRecipeCrawl$Visit<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZRecipeCrawl$Visit_<T> = $ZRecipeCrawl$Visit$Type<(T)>;
}}
declare module "packages/org/violetmoon/quark/content/mobs/ai/$RunAndPoofGoal" {
import {$Goal, $Goal$Type} from "packages/net/minecraft/world/entity/ai/goal/$Goal"
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$Stoneling, $Stoneling$Type} from "packages/org/violetmoon/quark/content/mobs/entity/$Stoneling"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $RunAndPoofGoal<T extends $Entity> extends $Goal {

constructor(arg0: $Stoneling$Type, arg1: $Class$Type<(T)>, arg2: float, arg3: double, arg4: double)
constructor(arg0: $Stoneling$Type, arg1: $Class$Type<(T)>, arg2: $Predicate$Type<(T)>, arg3: float, arg4: double, arg5: double)

public "canUse"(): boolean
public "canContinueToUse"(): boolean
public "start"(): void
public "stop"(): void
public "tick"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RunAndPoofGoal$Type<T> = ($RunAndPoofGoal<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RunAndPoofGoal_<T> = $RunAndPoofGoal$Type<(T)>;
}}
declare module "packages/org/violetmoon/zetaimplforge/event/play/entity/player/$ForgeZPlayerInteract" {
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$PlayerInteractEvent, $PlayerInteractEvent$Type} from "packages/net/minecraftforge/event/entity/player/$PlayerInteractEvent"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$ZPlayerInteract, $ZPlayerInteract$Type} from "packages/org/violetmoon/zeta/event/play/entity/player/$ZPlayerInteract"

export class $ForgeZPlayerInteract implements $ZPlayerInteract {

constructor(arg0: $PlayerInteractEvent$Type)

public "getLevel"(): $Level
public "setCanceled"(arg0: boolean): void
public "isCanceled"(): boolean
public "getHand"(): $InteractionHand
public "getEntity"(): $Player
public "getPos"(): $BlockPos
public "setCancellationResult"(arg0: $InteractionResult$Type): void
public "cancel"(): void
get "level"(): $Level
set "canceled"(value: boolean)
get "canceled"(): boolean
get "hand"(): $InteractionHand
get "entity"(): $Player
get "pos"(): $BlockPos
set "cancellationResult"(value: $InteractionResult$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ForgeZPlayerInteract$Type = ($ForgeZPlayerInteract);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ForgeZPlayerInteract_ = $ForgeZPlayerInteract$Type;
}}
declare module "packages/org/violetmoon/quark/mixin/mixins/$IZetaItemExtensionsMixin" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $IZetaItemExtensionsMixin {

}

export namespace $IZetaItemExtensionsMixin {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IZetaItemExtensionsMixin$Type = ($IZetaItemExtensionsMixin);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IZetaItemExtensionsMixin_ = $IZetaItemExtensionsMixin$Type;
}}
declare module "packages/org/violetmoon/zeta/client/key/$PredicatedKeyBinding" {
import {$KeyMapping, $KeyMapping$Type} from "packages/net/minecraft/client/$KeyMapping"
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$InputConstants$Type, $InputConstants$Type$Type} from "packages/com/mojang/blaze3d/platform/$InputConstants$Type"
import {$InputConstants$Key, $InputConstants$Key$Type} from "packages/com/mojang/blaze3d/platform/$InputConstants$Key"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $PredicatedKeyBinding extends $KeyMapping {
static readonly "ALL": $Map<(string), ($KeyMapping)>
static readonly "CATEGORY_MOVEMENT": string
static readonly "CATEGORY_MISC": string
static readonly "CATEGORY_MULTIPLAYER": string
static readonly "CATEGORY_GAMEPLAY": string
static readonly "CATEGORY_INVENTORY": string
static readonly "CATEGORY_INTERFACE": string
static readonly "CATEGORY_CREATIVE": string
 "key": $InputConstants$Key
 "clickCount": integer

constructor(arg0: string, arg1: $InputConstants$Type$Type, arg2: integer, arg3: string, arg4: $Predicate$Type<($InputConstants$Key$Type)>)

public "setKey"(arg0: $InputConstants$Key$Type): void
set "key"(value: $InputConstants$Key$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PredicatedKeyBinding$Type = ($PredicatedKeyBinding);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PredicatedKeyBinding_ = $PredicatedKeyBinding$Type;
}}
declare module "packages/org/violetmoon/quark/base/client/config/$SocialButton" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Button, $Button$Type} from "packages/net/minecraft/client/gui/components/$Button"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$Button$OnPress, $Button$OnPress$Type} from "packages/net/minecraft/client/gui/components/$Button$OnPress"

export class $SocialButton extends $Button {
static readonly "SOCIAL_ICONS": $ResourceLocation
static readonly "SMALL_WIDTH": integer
static readonly "DEFAULT_WIDTH": integer
static readonly "DEFAULT_HEIGHT": integer
 "onPress": $Button$OnPress
static readonly "WIDGETS_LOCATION": $ResourceLocation
static readonly "ACCESSIBILITY_TEXTURE": $ResourceLocation
 "height": integer
 "x": integer
 "y": integer
 "active": boolean
 "visible": boolean
static readonly "UNSET_FG_COLOR": integer

constructor(arg0: integer, arg1: integer, arg2: $Component$Type, arg3: integer, arg4: integer, arg5: $Button$OnPress$Type)
constructor(arg0: integer, arg1: integer, arg2: $Component$Type, arg3: integer, arg4: integer, arg5: string)

public "m_87963_"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
public "getFGColor"(): integer
get "fGColor"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SocialButton$Type = ($SocialButton);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SocialButton_ = $SocialButton$Type;
}}
declare module "packages/org/violetmoon/quark/api/event/$GatherToolClassesEvent" {
import {$ListenerList, $ListenerList$Type} from "packages/net/minecraftforge/eventbus/$ListenerList"
import {$Event, $Event$Type} from "packages/net/minecraftforge/eventbus/api/$Event"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export class $GatherToolClassesEvent extends $Event {
readonly "stack": $ItemStack
readonly "classes": $Set<(string)>

constructor()
constructor(arg0: $ItemStack$Type, arg1: $Set$Type<(string)>)

public "isCancelable"(): boolean
public "getListenerList"(): $ListenerList
public "hasResult"(): boolean
get "cancelable"(): boolean
get "listenerList"(): $ListenerList
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GatherToolClassesEvent$Type = ($GatherToolClassesEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GatherToolClassesEvent_ = $GatherToolClassesEvent$Type;
}}
declare module "packages/org/violetmoon/quark/mixin/mixins/accessor/$AccessorAbstractArrow" {
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export interface $AccessorAbstractArrow {

 "quark$getPickupItem"(): $ItemStack

(): $ItemStack
}

export namespace $AccessorAbstractArrow {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AccessorAbstractArrow$Type = ($AccessorAbstractArrow);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AccessorAbstractArrow_ = $AccessorAbstractArrow$Type;
}}
declare module "packages/org/violetmoon/quark/content/client/module/$WoolShutsUpMinecartsModule" {
import {$AbstractMinecart, $AbstractMinecart$Type} from "packages/net/minecraft/world/entity/vehicle/$AbstractMinecart"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZConfigChanged, $ZConfigChanged$Type} from "packages/org/violetmoon/zeta/event/load/$ZConfigChanged"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $WoolShutsUpMinecartsModule extends $ZetaModule {
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public static "canPlay"(arg0: $AbstractMinecart$Type): boolean
public "configChanged"(arg0: $ZConfigChanged$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WoolShutsUpMinecartsModule$Type = ($WoolShutsUpMinecartsModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WoolShutsUpMinecartsModule_ = $WoolShutsUpMinecartsModule$Type;
}}
declare module "packages/org/violetmoon/zetaimplforge/config/$TerribleForgeConfigHackery" {
import {$ForgeConfigSpec, $ForgeConfigSpec$Type} from "packages/net/minecraftforge/common/$ForgeConfigSpec"

export class $TerribleForgeConfigHackery {

constructor()

public static "registerAndLoadConfigEarlierThanUsual"(arg0: $ForgeConfigSpec$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TerribleForgeConfigHackery$Type = ($TerribleForgeConfigHackery);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TerribleForgeConfigHackery_ = $TerribleForgeConfigHackery$Type;
}}
declare module "packages/org/violetmoon/zeta/event/play/entity/living/$ZLivingTick" {
import {$IZetaPlayEvent, $IZetaPlayEvent$Type} from "packages/org/violetmoon/zeta/event/bus/$IZetaPlayEvent"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export interface $ZLivingTick extends $IZetaPlayEvent {

 "getEntity"(): $LivingEntity

(): $LivingEntity
}

export namespace $ZLivingTick {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZLivingTick$Type = ($ZLivingTick);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZLivingTick_ = $ZLivingTick$Type;
}}
declare module "packages/org/violetmoon/quark/content/building/block/$VerticalSlabBlock$VerticalSlabType" {
import {$StringRepresentable$EnumCodec, $StringRepresentable$EnumCodec$Type} from "packages/net/minecraft/util/$StringRepresentable$EnumCodec"
import {$StringRepresentable, $StringRepresentable$Type} from "packages/net/minecraft/util/$StringRepresentable"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$Keyable, $Keyable$Type} from "packages/com/mojang/serialization/$Keyable"
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"

export class $VerticalSlabBlock$VerticalSlabType extends $Enum<($VerticalSlabBlock$VerticalSlabType)> implements $StringRepresentable {
static readonly "NORTH": $VerticalSlabBlock$VerticalSlabType
static readonly "SOUTH": $VerticalSlabBlock$VerticalSlabType
static readonly "WEST": $VerticalSlabBlock$VerticalSlabType
static readonly "EAST": $VerticalSlabBlock$VerticalSlabType
static readonly "DOUBLE": $VerticalSlabBlock$VerticalSlabType
readonly "direction": $Direction
readonly "shape": $VoxelShape


public "toString"(): string
public static "values"(): ($VerticalSlabBlock$VerticalSlabType)[]
public static "valueOf"(arg0: string): $VerticalSlabBlock$VerticalSlabType
public static "fromDirection"(arg0: $Direction$Type): $VerticalSlabBlock$VerticalSlabType
public "getSerializedName"(): string
public static "fromEnumWithMapping"<E extends ($Enum<(E)>) & ($StringRepresentable)>(arg0: $Supplier$Type<((E)[])>, arg1: $Function$Type<(string), (string)>): $StringRepresentable$EnumCodec<(E)>
public static "keys"(arg0: ($StringRepresentable$Type)[]): $Keyable
public static "fromEnum"<E extends ($Enum<(E)>) & ($StringRepresentable)>(arg0: $Supplier$Type<((E)[])>): $StringRepresentable$EnumCodec<(E)>
get "serializedName"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $VerticalSlabBlock$VerticalSlabType$Type = (("east") | ("south") | ("double") | ("north") | ("west")) | ($VerticalSlabBlock$VerticalSlabType);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $VerticalSlabBlock$VerticalSlabType_ = $VerticalSlabBlock$VerticalSlabType$Type;
}}
declare module "packages/org/violetmoon/zetaimplforge/client/event/play/$ForgeZScreen" {
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$ZScreen, $ZScreen$Type} from "packages/org/violetmoon/zeta/client/event/play/$ZScreen"
import {$ScreenEvent, $ScreenEvent$Type} from "packages/net/minecraftforge/client/event/$ScreenEvent"

export class $ForgeZScreen implements $ZScreen {

constructor(arg0: $ScreenEvent$Type)

public "getScreen"(): $Screen
get "screen"(): $Screen
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ForgeZScreen$Type = ($ForgeZScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ForgeZScreen_ = $ForgeZScreen$Type;
}}
declare module "packages/org/violetmoon/quark/base/network/message/$ChangeHotbarMessage" {
import {$IZetaMessage, $IZetaMessage$Type} from "packages/org/violetmoon/zeta/network/$IZetaMessage"
import {$Container, $Container$Type} from "packages/net/minecraft/world/$Container"
import {$IZetaNetworkEventContext, $IZetaNetworkEventContext$Type} from "packages/org/violetmoon/zeta/network/$IZetaNetworkEventContext"

export class $ChangeHotbarMessage implements $IZetaMessage {
 "bar": integer

constructor()
constructor(arg0: integer)

public "swap"(arg0: $Container$Type, arg1: integer, arg2: integer): void
public "receive"(arg0: $IZetaNetworkEventContext$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ChangeHotbarMessage$Type = ($ChangeHotbarMessage);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ChangeHotbarMessage_ = $ChangeHotbarMessage$Type;
}}
declare module "packages/org/violetmoon/quark/content/world/block/be/$MonsterBoxBlockEntity" {
import {$ZetaBlockEntity, $ZetaBlockEntity$Type} from "packages/org/violetmoon/zeta/block/be/$ZetaBlockEntity"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $MonsterBoxBlockEntity extends $ZetaBlockEntity {
 "blockState": $BlockState

constructor(arg0: $BlockPos$Type, arg1: $BlockState$Type)

public static "tick"(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: $MonsterBoxBlockEntity$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MonsterBoxBlockEntity$Type = ($MonsterBoxBlockEntity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MonsterBoxBlockEntity_ = $MonsterBoxBlockEntity$Type;
}}
declare module "packages/org/violetmoon/zetaimplforge/client/event/play/$ForgeZEarlyRender" {
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$ZEarlyRender, $ZEarlyRender$Type} from "packages/org/violetmoon/zeta/client/event/play/$ZEarlyRender"

export class $ForgeZEarlyRender implements $ZEarlyRender {

constructor()

public "guiGraphics"(): $GuiGraphics
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ForgeZEarlyRender$Type = ($ForgeZEarlyRender);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ForgeZEarlyRender_ = $ForgeZEarlyRender$Type;
}}
declare module "packages/org/violetmoon/zeta/event/play/loading/$ZAttachCapabilities$BlockEntityCaps" {
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$ZetaCapability, $ZetaCapability$Type} from "packages/org/violetmoon/zeta/capability/$ZetaCapability"
import {$ICapabilityProvider, $ICapabilityProvider$Type} from "packages/net/minecraftforge/common/capabilities/$ICapabilityProvider"
import {$ZAttachCapabilities, $ZAttachCapabilities$Type} from "packages/org/violetmoon/zeta/event/play/loading/$ZAttachCapabilities"
import {$ZetaCapabilityManager, $ZetaCapabilityManager$Type} from "packages/org/violetmoon/zeta/capability/$ZetaCapabilityManager"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export interface $ZAttachCapabilities$BlockEntityCaps extends $ZAttachCapabilities<($BlockEntity)> {

 "getObject"(): $BlockEntity
/**
 * 
 * @deprecated
 */
 "addCapabilityForgeApi"(arg0: $ResourceLocation$Type, arg1: $ICapabilityProvider$Type): void
 "getCapabilityManager"(): $ZetaCapabilityManager
 "addCapability"<C>(arg0: $ResourceLocation$Type, arg1: $ZetaCapability$Type<(C)>, arg2: C): void
}

export namespace $ZAttachCapabilities$BlockEntityCaps {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZAttachCapabilities$BlockEntityCaps$Type = ($ZAttachCapabilities$BlockEntityCaps);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZAttachCapabilities$BlockEntityCaps_ = $ZAttachCapabilities$BlockEntityCaps$Type;
}}
declare module "packages/org/violetmoon/zeta/advancement/modifier/$ASeedyPlaceModifier" {
import {$AdvancementModifier, $AdvancementModifier$Type} from "packages/org/violetmoon/zeta/advancement/$AdvancementModifier"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$IMutableAdvancement, $IMutableAdvancement$Type} from "packages/org/violetmoon/zeta/api/$IMutableAdvancement"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $ASeedyPlaceModifier extends $AdvancementModifier {
readonly "module": $ZetaModule

constructor(arg0: $ZetaModule$Type, arg1: $Set$Type<($Block$Type)>)

public "apply"(arg0: $ResourceLocation$Type, arg1: $IMutableAdvancement$Type): boolean
public "getTargets"(): $Set<($ResourceLocation)>
get "targets"(): $Set<($ResourceLocation)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ASeedyPlaceModifier$Type = ($ASeedyPlaceModifier);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ASeedyPlaceModifier_ = $ASeedyPlaceModifier$Type;
}}
declare module "packages/org/violetmoon/quark/content/tools/module/$AncientTomesModule" {
import {$MerchantOffer, $MerchantOffer$Type} from "packages/net/minecraft/world/item/trading/$MerchantOffer"
import {$ZAnvilUpdate$Highest, $ZAnvilUpdate$Highest$Type} from "packages/org/violetmoon/zeta/event/play/$ZAnvilUpdate$Highest"
import {$ZVillagerTrades, $ZVillagerTrades$Type} from "packages/org/violetmoon/zeta/event/play/loading/$ZVillagerTrades"
import {$ZAttachCapabilities$ItemStackCaps, $ZAttachCapabilities$ItemStackCaps$Type} from "packages/org/violetmoon/zeta/event/play/loading/$ZAttachCapabilities$ItemStackCaps"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Iterable, $Iterable$Type} from "packages/java/lang/$Iterable"
import {$MerchantMenu, $MerchantMenu$Type} from "packages/net/minecraft/world/inventory/$MerchantMenu"
import {$ZAnvilRepair, $ZAnvilRepair$Type} from "packages/org/violetmoon/zeta/event/play/$ZAnvilRepair"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ZPlayer$BreakSpeed, $ZPlayer$BreakSpeed$Type} from "packages/org/violetmoon/zeta/event/play/entity/player/$ZPlayer$BreakSpeed"
import {$ManualTrigger, $ManualTrigger$Type} from "packages/org/violetmoon/zeta/advancement/$ManualTrigger"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$MerchantContainer, $MerchantContainer$Type} from "packages/net/minecraft/world/inventory/$MerchantContainer"
import {$ZCommonSetup, $ZCommonSetup$Type} from "packages/org/violetmoon/zeta/event/load/$ZCommonSetup"
import {$LootItemFunctionType, $LootItemFunctionType$Type} from "packages/net/minecraft/world/level/storage/loot/functions/$LootItemFunctionType"
import {$ZLootTableLoad, $ZLootTableLoad$Type} from "packages/org/violetmoon/zeta/event/play/loading/$ZLootTableLoad"
import {$Rarity, $Rarity$Type} from "packages/net/minecraft/world/item/$Rarity"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Enchantment, $Enchantment$Type} from "packages/net/minecraft/world/item/enchantment/$Enchantment"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$ZRegister, $ZRegister$Type} from "packages/org/violetmoon/zeta/event/load/$ZRegister"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ZConfigChanged, $ZConfigChanged$Type} from "packages/org/violetmoon/zeta/event/load/$ZConfigChanged"

export class $AncientTomesModule extends $ZetaModule {
static "lootTables": $List<(string)>
static "itemQuality": integer
static "normalUpgradeCost": integer
static "limitBreakUpgradeCost": integer
static "tomeEnchantType": $LootItemFunctionType
static "enchantNames": $List<(string)>
static "overleveledBooksGlowRainbow": boolean
static "deepslateTweak": boolean
static "deepslateTweakNeedsHaste2": boolean
static "librariansExchangeAncientTomes": boolean
static "curseGear": boolean
static "combineWithBooks": boolean
static "sanityCheck": boolean
static "ancient_tome": $Item
static readonly "validEnchants": $List<($Enchantment)>
static "overlevelTrigger": $ManualTrigger
static "instamineDeepslateTrigger": $ManualTrigger
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "register"(arg0: $ZRegister$Type): void
public "setup"(arg0: $ZCommonSetup$Type): void
public "onAnvilUse"(arg0: $ZAnvilRepair$Type): void
public "setupCursesList"(): void
public static "getTomeEnchantment"(arg0: $ItemStack$Type): $Enchantment
public "onGetSpeed"(arg0: $ZPlayer$BreakSpeed$Type): void
public static "matchWildcardEnchantedBook"(arg0: $MerchantOffer$Type, arg1: $ItemStack$Type, arg2: $ItemStack$Type): boolean
public static "moveVillagerItems"(arg0: $MerchantMenu$Type, arg1: $MerchantContainer$Type, arg2: $MerchantOffer$Type): void
public "onAnvilUpdate"(arg0: $ZAnvilUpdate$Highest$Type): void
public "onTradesLoaded"(arg0: $ZVillagerTrades$Type): void
public static "shiftRarity"(arg0: $ItemStack$Type, arg1: $Rarity$Type): $Rarity
public "configChanged"(arg0: $ZConfigChanged$Type): void
public static "isInitialized"(): boolean
public "onLootTableLoad"(arg0: $ZLootTableLoad$Type): void
public "attachRuneCapability"(arg0: $ZAttachCapabilities$ItemStackCaps$Type): void
public static "initializeEnchantmentList"(arg0: $Iterable$Type<(string)>, arg1: $List$Type<($Enchantment$Type)>): void
set "up"(value: $ZCommonSetup$Type)
get "initialized"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AncientTomesModule$Type = ($AncientTomesModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AncientTomesModule_ = $AncientTomesModule$Type;
}}
declare module "packages/org/violetmoon/zetaimplforge/network/$ForgeZetaNetworkHandler" {
import {$IZetaMessage, $IZetaMessage$Type} from "packages/org/violetmoon/zeta/network/$IZetaMessage"
import {$Pair, $Pair$Type} from "packages/org/apache/commons/lang3/tuple/$Pair"
import {$ServerPlayer, $ServerPlayer$Type} from "packages/net/minecraft/server/level/$ServerPlayer"
import {$Packet, $Packet$Type} from "packages/net/minecraft/network/protocol/$Packet"
import {$NetworkDirection, $NetworkDirection$Type} from "packages/net/minecraftforge/network/$NetworkDirection"
import {$ForgeZeta, $ForgeZeta$Type} from "packages/org/violetmoon/zetaimplforge/$ForgeZeta"
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$ZetaNetworkHandler, $ZetaNetworkHandler$Type} from "packages/org/violetmoon/zeta/network/$ZetaNetworkHandler"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$ZetaNetworkDirection, $ZetaNetworkDirection$Type} from "packages/org/violetmoon/zeta/network/$ZetaNetworkDirection"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ZetaMessageSerializer, $ZetaMessageSerializer$Type} from "packages/org/violetmoon/zeta/network/$ZetaMessageSerializer"
import {$ZetaHandshakeMessage, $ZetaHandshakeMessage$Type} from "packages/org/violetmoon/zeta/network/$ZetaHandshakeMessage"

export class $ForgeZetaNetworkHandler extends $ZetaNetworkHandler {
 "serializer": $ZetaMessageSerializer

constructor(arg0: $ForgeZeta$Type, arg1: integer)

public "register"<T extends $IZetaMessage>(arg0: $Class$Type<(T)>, arg1: $ZetaNetworkDirection$Type): void
public "wrapInVanilla"(arg0: $IZetaMessage$Type, arg1: $ZetaNetworkDirection$Type): $Packet<(any)>
public "registerLogin"<T extends $ZetaHandshakeMessage>(arg0: $Class$Type<(T)>, arg1: $ZetaNetworkDirection$Type, arg2: integer, arg3: boolean, arg4: $Function$Type<(boolean), ($List$Type<($Pair$Type<(string), (T)>)>)>): void
public "sendToPlayer"(arg0: $IZetaMessage$Type, arg1: $ServerPlayer$Type): void
public static "toForge"(arg0: $ZetaNetworkDirection$Type): $NetworkDirection
public static "fromForge"(arg0: $NetworkDirection$Type): $ZetaNetworkDirection
public "sendToServer"(arg0: $IZetaMessage$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ForgeZetaNetworkHandler$Type = ($ForgeZetaNetworkHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ForgeZetaNetworkHandler_ = $ForgeZetaNetworkHandler$Type;
}}
declare module "packages/org/violetmoon/quark/content/building/block/$MudBrickLatticeBlock" {
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$Fluid, $Fluid$Type} from "packages/net/minecraft/world/level/material/$Fluid"
import {$ZetaGlassBlock, $ZetaGlassBlock$Type} from "packages/org/violetmoon/zeta/block/$ZetaGlassBlock"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$SimpleWaterloggedBlock, $SimpleWaterloggedBlock$Type} from "packages/net/minecraft/world/level/block/$SimpleWaterloggedBlock"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$FluidState, $FluidState$Type} from "packages/net/minecraft/world/level/material/$FluidState"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"

export class $MudBrickLatticeBlock extends $ZetaGlassBlock implements $SimpleWaterloggedBlock {
static readonly "WATERLOGGED": $BooleanProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(arg0: $ZetaModule$Type, arg1: $BlockBehaviour$Properties$Type)

public "propagatesSkylightDown"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type): boolean
public "getStateForPlacement"(arg0: $BlockPlaceContext$Type): $BlockState
public "updateShape"(arg0: $BlockState$Type, arg1: $Direction$Type, arg2: $BlockState$Type, arg3: $LevelAccessor$Type, arg4: $BlockPos$Type, arg5: $BlockPos$Type): $BlockState
public "getFluidState"(arg0: $BlockState$Type): $FluidState
public "getPickupSound"(): $Optional<($SoundEvent)>
public "canPlaceLiquid"(arg0: $BlockGetter$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: $Fluid$Type): boolean
public "placeLiquid"(arg0: $LevelAccessor$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: $FluidState$Type): boolean
public "pickupBlock"(arg0: $LevelAccessor$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type): $ItemStack
public "getPickupSound"(arg0: $BlockState$Type): $Optional<($SoundEvent)>
public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
get "pickupSound"(): $Optional<($SoundEvent)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MudBrickLatticeBlock$Type = ($MudBrickLatticeBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MudBrickLatticeBlock_ = $MudBrickLatticeBlock$Type;
}}
declare module "packages/org/violetmoon/quark/content/mobs/entity/$Shiba" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$WalkAnimationState, $WalkAnimationState$Type} from "packages/net/minecraft/world/entity/$WalkAnimationState"
import {$PathNavigation, $PathNavigation$Type} from "packages/net/minecraft/world/entity/ai/navigation/$PathNavigation"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$AttributeMap, $AttributeMap$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeMap"
import {$ClientGamePacketListener, $ClientGamePacketListener$Type} from "packages/net/minecraft/network/protocol/game/$ClientGamePacketListener"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$DyeColor, $DyeColor$Type} from "packages/net/minecraft/world/item/$DyeColor"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$AbstractArrow, $AbstractArrow$Type} from "packages/net/minecraft/world/entity/projectile/$AbstractArrow"
import {$Animal, $Animal$Type} from "packages/net/minecraft/world/entity/animal/$Animal"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$LevelRenderer, $LevelRenderer$Type} from "packages/net/minecraft/client/renderer/$LevelRenderer"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"
import {$GoalSelector, $GoalSelector$Type} from "packages/net/minecraft/world/entity/ai/goal/$GoalSelector"
import {$Packet, $Packet$Type} from "packages/net/minecraft/network/protocol/$Packet"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$TamableAnimal, $TamableAnimal$Type} from "packages/net/minecraft/world/entity/$TamableAnimal"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$AgeableMob, $AgeableMob$Type} from "packages/net/minecraft/world/entity/$AgeableMob"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $Shiba extends $TamableAnimal {
 "currentHyperfocus": $BlockPos
static readonly "BABY_START_AGE": integer
 "entityJs$builder": any
static readonly "MAX_WEARING_ARMOR_CHANCE": float
static readonly "MAX_PICKUP_LOOT_CHANCE": float
static readonly "MAX_ENCHANTED_ARMOR_CHANCE": float
static readonly "MAX_ENCHANTED_WEAPON_CHANCE": float
static readonly "LEASH_TAG": string
static readonly "DEFAULT_EQUIPMENT_DROP_CHANCE": float
static readonly "PRESERVE_ITEM_DROP_CHANCE": integer
static readonly "UPDATE_GOAL_SELECTOR_EVERY_N_TICKS": integer
 "ambientSoundTime": integer
 "navigation": $PathNavigation
readonly "goalSelector": $GoalSelector
readonly "targetSelector": $GoalSelector
 "leashInfoTag": $CompoundTag
static readonly "HAND_SLOTS": integer
static readonly "ARMOR_SLOTS": integer
static readonly "EQUIPMENT_SLOT_OFFSET": integer
static readonly "ARMOR_SLOT_OFFSET": integer
static readonly "SWING_DURATION": integer
static readonly "PLAYER_HURT_EXPERIENCE_TIME": integer
static readonly "MIN_MOVEMENT_DISTANCE": double
static readonly "DEFAULT_BASE_GRAVITY": double
static readonly "DEATH_DURATION": integer
static readonly "USE_ITEM_INTERVAL": integer
static readonly "EXTRA_RENDER_CULLING_SIZE_WITH_BIG_HAT": float
 "attributes": $AttributeMap
readonly "activeEffects": $Map<($MobEffect), ($MobEffectInstance)>
 "swinging": boolean
 "swingingArm": $InteractionHand
 "swingTime": integer
 "removeArrowTime": integer
 "removeStingerTime": integer
 "hurtTime": integer
 "hurtDuration": integer
 "deathTime": integer
 "oAttackAnim": float
 "attackAnim": float
 "attackStrengthTicker": integer
readonly "walkAnimation": $WalkAnimationState
readonly "invulnerableDuration": integer
readonly "timeOffs": float
readonly "rotA": float
 "yBodyRot": float
 "yBodyRotO": float
 "yHeadRot": float
 "yHeadRotO": float
 "dead": boolean
 "jumping": boolean
 "xxa": float
 "yya": float
 "zza": float
 "effectsDirty": boolean
 "noJumpDelay": integer
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(arg0: $EntityType$Type<(any)>, arg1: $Level$Type)

public "tick"(): void
public "readAdditionalSaveData"(arg0: $CompoundTag$Type): void
public "addAdditionalSaveData"(arg0: $CompoundTag$Type): void
public "getAddEntityPacket"(): $Packet<($ClientGamePacketListener)>
public "getMaxSpawnClusterSize"(): integer
public "mobInteract"(arg0: $Player$Type, arg1: $InteractionHand$Type): $InteractionResult
public "setTame"(arg0: boolean): void
public "getMouthItem"(): $ItemStack
public "setMouthItem"(arg0: $ItemStack$Type): void
public "getCollarColor"(): $DyeColor
public "setCollarColor"(arg0: $DyeColor$Type): void
public "getFetching"(): $AbstractArrow
public "setFetching"(arg0: $AbstractArrow$Type): void
public "getBreedOffspring"(arg0: $ServerLevel$Type, arg1: $AgeableMob$Type): $AgeableMob
public "isFood"(arg0: $ItemStack$Type): boolean
public "canMate"(arg0: $Animal$Type): boolean
public "hasLineOfSight"(arg0: $BlockPos$Type, arg1: double): boolean
public "lithiumOnEquipmentChanged"(): void
public "tdv$getDynamicLightX"(): double
public "tdv$getDynamicLightZ"(): double
public "tdv$getDynamicLightWorld"(): $Level
public "tdv$shouldUpdateDynamicLight"(): boolean
public "tdv$resetDynamicLight"(): void
public "tdv$getDynamicLightY"(): double
public "tdv$lambdynlights$scheduleTrackedChunksRebuild"(arg0: $LevelRenderer$Type): void
public "tdv$lambdynlights$updateDynamicLight"(arg0: $LevelRenderer$Type): boolean
public "getCachedFeetBlockState"(): $BlockState
get "addEntityPacket"(): $Packet<($ClientGamePacketListener)>
get "maxSpawnClusterSize"(): integer
set "tame"(value: boolean)
get "mouthItem"(): $ItemStack
set "mouthItem"(value: $ItemStack$Type)
get "collarColor"(): $DyeColor
set "collarColor"(value: $DyeColor$Type)
get "fetching"(): $AbstractArrow
set "fetching"(value: $AbstractArrow$Type)
get "cachedFeetBlockState"(): $BlockState
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Shiba$Type = ($Shiba);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Shiba_ = $Shiba$Type;
}}
declare module "packages/org/violetmoon/zeta/util/$ZetaEffect" {
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$MobEffectCategory, $MobEffectCategory$Type} from "packages/net/minecraft/world/effect/$MobEffectCategory"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"

export class $ZetaEffect extends $MobEffect {

constructor(arg0: $Zeta$Type, arg1: string, arg2: $MobEffectCategory$Type, arg3: integer)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZetaEffect$Type = ($ZetaEffect);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZetaEffect_ = $ZetaEffect$Type;
}}
declare module "packages/org/violetmoon/quark/content/automation/module/$ObsidianPlateModule" {
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$ZRegister, $ZRegister$Type} from "packages/org/violetmoon/zeta/event/load/$ZRegister"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $ObsidianPlateModule extends $ZetaModule {
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "register"(arg0: $ZRegister$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ObsidianPlateModule$Type = ($ObsidianPlateModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ObsidianPlateModule_ = $ObsidianPlateModule$Type;
}}
declare module "packages/org/violetmoon/quark/mixin/mixins/accessor/$AccessorMerchantOffer" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $AccessorMerchantOffer {

 "quark$setRewardExp"(arg0: boolean): void

(arg0: boolean): void
}

export namespace $AccessorMerchantOffer {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AccessorMerchantOffer$Type = ($AccessorMerchantOffer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AccessorMerchantOffer_ = $AccessorMerchantOffer$Type;
}}
declare module "packages/org/violetmoon/zeta/item/ext/$IZetaItemExtensions" {
import {$IZetaItemExtensionsMixin, $IZetaItemExtensionsMixin$Type} from "packages/org/violetmoon/quark/mixin/mixins/$IZetaItemExtensionsMixin"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$EnderMan, $EnderMan$Type} from "packages/net/minecraft/world/entity/monster/$EnderMan"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$UseOnContext, $UseOnContext$Type} from "packages/net/minecraft/world/item/context/$UseOnContext"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$RecipeType, $RecipeType$Type} from "packages/net/minecraft/world/item/crafting/$RecipeType"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$Enchantment, $Enchantment$Type} from "packages/net/minecraft/world/item/enchantment/$Enchantment"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$ItemEntity, $ItemEntity$Type} from "packages/net/minecraft/world/entity/item/$ItemEntity"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export interface $IZetaItemExtensions extends $IZetaItemExtensionsMixin {

 "isRepairableZeta"(arg0: $ItemStack$Type): boolean
 "onItemUseFirstZeta"(arg0: $ItemStack$Type, arg1: $UseOnContext$Type): $InteractionResult
 "getBurnTimeZeta"(arg0: $ItemStack$Type, arg1: $RecipeType$Type<(any)>): integer
 "damageItemZeta"<T extends $LivingEntity>(arg0: $ItemStack$Type, arg1: integer, arg2: T, arg3: $Consumer$Type<(T)>): integer
 "isEnderMaskZeta"(arg0: $ItemStack$Type, arg1: $Player$Type, arg2: $EnderMan$Type): boolean
 "canEquipZeta"(arg0: $ItemStack$Type, arg1: $EquipmentSlot$Type, arg2: $Entity$Type): boolean
 "canElytraFlyZeta"(arg0: $ItemStack$Type, arg1: $LivingEntity$Type): boolean
 "canShearZeta"(arg0: $ItemStack$Type): boolean
 "getMaxDamageZeta"(arg0: $ItemStack$Type): integer
 "getEnchantmentLevelZeta"(arg0: $ItemStack$Type, arg1: $Enchantment$Type): integer
 "getAllEnchantmentsZeta"(arg0: $ItemStack$Type): $Map<($Enchantment), (integer)>
 "getEnchantmentValueZeta"(arg0: $ItemStack$Type): integer
 "shouldCauseReequipAnimationZeta"(arg0: $ItemStack$Type, arg1: $ItemStack$Type, arg2: boolean): boolean
 "getArmorTextureZeta"(arg0: $ItemStack$Type, arg1: $Entity$Type, arg2: $EquipmentSlot$Type, arg3: string): string
 "canApplyAtEnchantingTableZeta"(arg0: $ItemStack$Type, arg1: $Enchantment$Type): boolean
 "doesSneakBypassUseZeta"(arg0: $ItemStack$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $Player$Type): boolean
 "getDefaultTooltipHideFlagsZeta"(arg0: $ItemStack$Type): integer
 "onEntityItemUpdateZeta"(arg0: $ItemStack$Type, arg1: $ItemEntity$Type): boolean
 "isBookEnchantableZeta"(arg0: $ItemStack$Type, arg1: $ItemStack$Type): boolean
}

export namespace $IZetaItemExtensions {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IZetaItemExtensions$Type = ($IZetaItemExtensions);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IZetaItemExtensions_ = $IZetaItemExtensions$Type;
}}
declare module "packages/org/violetmoon/zeta/event/play/entity/living/$ZMobSpawnEvent$CheckSpawn" {
import {$Mob, $Mob$Type} from "packages/net/minecraft/world/entity/$Mob"
import {$ZMobSpawnEvent, $ZMobSpawnEvent$Type} from "packages/org/violetmoon/zeta/event/play/entity/living/$ZMobSpawnEvent"
import {$MobSpawnType, $MobSpawnType$Type} from "packages/net/minecraft/world/entity/$MobSpawnType"
import {$BaseSpawner, $BaseSpawner$Type} from "packages/net/minecraft/world/level/$BaseSpawner"
import {$ZResult, $ZResult$Type} from "packages/org/violetmoon/zeta/event/bus/$ZResult"
import {$ServerLevelAccessor, $ServerLevelAccessor$Type} from "packages/net/minecraft/world/level/$ServerLevelAccessor"

export interface $ZMobSpawnEvent$CheckSpawn extends $ZMobSpawnEvent {

 "getSpawnType"(): $MobSpawnType
 "getSpawner"(): $BaseSpawner
 "getLevel"(): $ServerLevelAccessor
 "getY"(): double
 "getZ"(): double
 "getX"(): double
 "getEntity"(): $Mob
 "setResult"(arg0: $ZResult$Type): void
 "getResult"(): $ZResult
}

export namespace $ZMobSpawnEvent$CheckSpawn {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZMobSpawnEvent$CheckSpawn$Type = ($ZMobSpawnEvent$CheckSpawn);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZMobSpawnEvent$CheckSpawn_ = $ZMobSpawnEvent$CheckSpawn$Type;
}}
declare module "packages/org/violetmoon/quark/content/tweaks/module/$EnhancedLaddersModule" {
import {$ZRightClickBlock, $ZRightClickBlock$Type} from "packages/org/violetmoon/zeta/event/play/entity/player/$ZRightClickBlock"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$ZGatherHints, $ZGatherHints$Type} from "packages/org/violetmoon/zeta/event/play/loading/$ZGatherHints"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$ZCommonSetup, $ZCommonSetup$Type} from "packages/org/violetmoon/zeta/event/load/$ZCommonSetup"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZConfigChanged, $ZConfigChanged$Type} from "packages/org/violetmoon/zeta/event/load/$ZConfigChanged"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $EnhancedLaddersModule extends $ZetaModule {
 "fallSpeed": double
static "allowFreestanding": boolean
static "allowDroppingDown": boolean
static "allowSliding": boolean
static "allowInventorySneak": boolean
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "setup"(arg0: $ZCommonSetup$Type): void
public "addAdditionalHints"(arg0: $ZGatherHints$Type): void
public "onInteract"(arg0: $ZRightClickBlock$Type): void
public "configChanged"(arg0: $ZConfigChanged$Type): void
public static "canLadderSurvive"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type): boolean
set "up"(value: $ZCommonSetup$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EnhancedLaddersModule$Type = ($EnhancedLaddersModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EnhancedLaddersModule_ = $EnhancedLaddersModule$Type;
}}
declare module "packages/org/violetmoon/zeta/event/play/loading/$ZLootTableLoad" {
import {$IZetaPlayEvent, $IZetaPlayEvent$Type} from "packages/org/violetmoon/zeta/event/bus/$IZetaPlayEvent"
import {$LootPoolEntryContainer, $LootPoolEntryContainer$Type} from "packages/net/minecraft/world/level/storage/loot/entries/$LootPoolEntryContainer"
import {$Cancellable, $Cancellable$Type} from "packages/org/violetmoon/zeta/event/bus/$Cancellable"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$LootTable, $LootTable$Type} from "packages/net/minecraft/world/level/storage/loot/$LootTable"

export interface $ZLootTableLoad extends $IZetaPlayEvent, $Cancellable {

 "getName"(): $ResourceLocation
 "add"(arg0: $LootPoolEntryContainer$Type): void
 "getTable"(): $LootTable
 "setTable"(arg0: $LootTable$Type): void
 "cancel"(): void
 "setCanceled"(arg0: boolean): void
 "isCanceled"(): boolean
}

export namespace $ZLootTableLoad {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZLootTableLoad$Type = ($ZLootTableLoad);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZLootTableLoad_ = $ZLootTableLoad$Type;
}}
declare module "packages/org/violetmoon/zeta/block/$OldMaterials" {
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"

export class $OldMaterials {

constructor()

public static "piston"(): $BlockBehaviour$Properties
public static "wood"(): $BlockBehaviour$Properties
public static "decoration"(): $BlockBehaviour$Properties
public static "wool"(): $BlockBehaviour$Properties
public static "replaceablePlant"(): $BlockBehaviour$Properties
public static "stone"(): $BlockBehaviour$Properties
public static "glass"(): $BlockBehaviour$Properties
public static "grass"(): $BlockBehaviour$Properties
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $OldMaterials$Type = ($OldMaterials);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $OldMaterials_ = $OldMaterials$Type;
}}
declare module "packages/org/violetmoon/zetaimplforge/client/event/play/$ForgeZRenderLiving" {
import {$ZRenderLiving, $ZRenderLiving$Type} from "packages/org/violetmoon/zeta/client/event/play/$ZRenderLiving"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$RenderLivingEvent, $RenderLivingEvent$Type} from "packages/net/minecraftforge/client/event/$RenderLivingEvent"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $ForgeZRenderLiving implements $ZRenderLiving {

constructor(arg0: $RenderLivingEvent$Type<(any), (any)>)

public "getPoseStack"(): $PoseStack
public "getEntity"(): $Entity
get "poseStack"(): $PoseStack
get "entity"(): $Entity
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ForgeZRenderLiving$Type = ($ForgeZRenderLiving);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ForgeZRenderLiving_ = $ForgeZRenderLiving$Type;
}}
declare module "packages/org/violetmoon/quark/base/network/message/oddities/$MatrixEnchanterOperationMessage" {
import {$IZetaMessage, $IZetaMessage$Type} from "packages/org/violetmoon/zeta/network/$IZetaMessage"
import {$IZetaNetworkEventContext, $IZetaNetworkEventContext$Type} from "packages/org/violetmoon/zeta/network/$IZetaNetworkEventContext"

export class $MatrixEnchanterOperationMessage implements $IZetaMessage {
 "operation": integer
 "arg0": integer
 "arg1": integer
 "arg2": integer

constructor()
constructor(arg0: integer, arg1: integer, arg2: integer, arg3: integer)

public "receive"(arg0: $IZetaNetworkEventContext$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MatrixEnchanterOperationMessage$Type = ($MatrixEnchanterOperationMessage);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MatrixEnchanterOperationMessage_ = $MatrixEnchanterOperationMessage$Type;
}}
declare module "packages/org/violetmoon/quark/base/handler/$WoodSetHandler$QuarkBoatType" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"

export class $WoodSetHandler$QuarkBoatType extends $Record {

constructor(name: string, boat: $Item$Type, chestBoat: $Item$Type, planks: $Block$Type)

public "name"(): string
public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "planks"(): $Block
public "chestBoat"(): $Item
public "boat"(): $Item
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WoodSetHandler$QuarkBoatType$Type = ($WoodSetHandler$QuarkBoatType);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WoodSetHandler$QuarkBoatType_ = $WoodSetHandler$QuarkBoatType$Type;
}}
declare module "packages/org/violetmoon/zeta/registry/$LateBoundHolder" {
import {$Holder$Kind, $Holder$Kind$Type} from "packages/net/minecraft/core/$Holder$Kind"
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$Registry, $Registry$Type} from "packages/net/minecraft/core/$Registry"
import {$Either, $Either$Type} from "packages/com/mojang/datafixers/util/$Either"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"
import {$Holder, $Holder$Type} from "packages/net/minecraft/core/$Holder"
import {$ITag, $ITag$Type} from "packages/net/minecraftforge/registries/tags/$ITag"
import {$HolderOwner, $HolderOwner$Type} from "packages/net/minecraft/core/$HolderOwner"
import {$Stream, $Stream$Type} from "packages/java/util/stream/$Stream"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$ResourceKey, $ResourceKey$Type} from "packages/net/minecraft/resources/$ResourceKey"

export class $LateBoundHolder<T> implements $Holder<(T)> {
readonly "key": $ResourceKey<(T)>
 "thing": T
 "registry": $Registry<(T)>

constructor(arg0: $ResourceKey$Type<(T)>)

public "isBound"(): boolean
public "canSerializeIn"(arg0: $HolderOwner$Type<(T)>): boolean
public "tags"(): $Stream<($TagKey<(T)>)>
public "is"(arg0: $ResourceKey$Type<(T)>): boolean
public "is"(arg0: $Predicate$Type<($ResourceKey$Type<(T)>)>): boolean
public "unwrap"(): $Either<($ResourceKey<(T)>), (T)>
public "kind"(): $Holder$Kind
public "is"(arg0: $ResourceLocation$Type): boolean
public "is"(arg0: $TagKey$Type<(T)>): boolean
public "value"(): T
public "unwrapKey"(): $Optional<($ResourceKey<(T)>)>
public "get"(): T
public static "direct"<T>(arg0: T): $Holder<(T)>
public "getTagKeys"(): $Stream<($TagKey<(T)>)>
public "containsTag"(arg0: $TagKey$Type<(T)>): boolean
public "containsTag"(arg0: $ITag$Type<(T)>): boolean
get "bound"(): boolean
get "tagKeys"(): $Stream<($TagKey<(T)>)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LateBoundHolder$Type<T> = ($LateBoundHolder<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LateBoundHolder_<T> = $LateBoundHolder$Type<(T)>;
}}
declare module "packages/org/violetmoon/quark/addons/oddities/client/render/be/$TinyPotatoRenderer" {
import {$TinyPotatoBlockEntity, $TinyPotatoBlockEntity$Type} from "packages/org/violetmoon/quark/addons/oddities/block/be/$TinyPotatoBlockEntity"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$BlockEntityRendererProvider$Context, $BlockEntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/blockentity/$BlockEntityRendererProvider$Context"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$BakedModel, $BakedModel$Type} from "packages/net/minecraft/client/resources/model/$BakedModel"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$BlockEntityRenderer, $BlockEntityRenderer$Type} from "packages/net/minecraft/client/renderer/blockentity/$BlockEntityRenderer"

export class $TinyPotatoRenderer implements $BlockEntityRenderer<($TinyPotatoBlockEntity)> {
static readonly "DEFAULT": string
static readonly "HALLOWEEN": string
static readonly "ANGRY": string

constructor(arg0: $BlockEntityRendererProvider$Context$Type)

public static "getModelFromDisplayName"(arg0: $Component$Type, arg1: boolean): $BakedModel
public "render"(arg0: $TinyPotatoBlockEntity$Type, arg1: float, arg2: $PoseStack$Type, arg3: $MultiBufferSource$Type, arg4: integer, arg5: integer): void
public static "isTheSpookDay"(): boolean
public "shouldRender"(arg0: $TinyPotatoBlockEntity$Type, arg1: $Vec3$Type): boolean
public "shouldRenderOffScreen"(arg0: $TinyPotatoBlockEntity$Type): boolean
public "getViewDistance"(): integer
get "theSpookDay"(): boolean
get "viewDistance"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TinyPotatoRenderer$Type = ($TinyPotatoRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TinyPotatoRenderer_ = $TinyPotatoRenderer$Type;
}}
declare module "packages/org/violetmoon/zeta/client/config/definition/$StringListClientDefinition" {
import {$AbstractWidget, $AbstractWidget$Type} from "packages/net/minecraft/client/gui/components/$AbstractWidget"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$ChangeSet, $ChangeSet$Type} from "packages/org/violetmoon/zeta/config/$ChangeSet"
import {$ZetaClient, $ZetaClient$Type} from "packages/org/violetmoon/zeta/client/$ZetaClient"
import {$ValueDefinition, $ValueDefinition$Type} from "packages/org/violetmoon/zeta/config/$ValueDefinition"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$ClientDefinitionExt, $ClientDefinitionExt$Type} from "packages/org/violetmoon/zeta/client/config/definition/$ClientDefinitionExt"

export class $StringListClientDefinition implements $ClientDefinitionExt<($ValueDefinition<($List<(string)>)>)> {

constructor()

public "addWidgets"(arg0: $ZetaClient$Type, arg1: $Screen$Type, arg2: $ChangeSet$Type, arg3: $ValueDefinition$Type<($List$Type<(string)>)>, arg4: $Consumer$Type<($AbstractWidget$Type)>): void
public "getSubtitle"(arg0: $ChangeSet$Type, arg1: $ValueDefinition$Type<($List$Type<(string)>)>): string
public "truncate"(arg0: string): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $StringListClientDefinition$Type = ($StringListClientDefinition);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $StringListClientDefinition_ = $StringListClientDefinition$Type;
}}
declare module "packages/org/violetmoon/quark/api/$IMagnetMoveAction" {
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export interface $IMagnetMoveAction {

 "onMagnetMoved"(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $Direction$Type, arg3: $BlockState$Type, arg4: $BlockEntity$Type): void
 "canMagnetMove"(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $Direction$Type, arg3: $BlockState$Type, arg4: $BlockEntity$Type): boolean

(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $Direction$Type, arg3: $BlockState$Type, arg4: $BlockEntity$Type): void
}

export namespace $IMagnetMoveAction {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IMagnetMoveAction$Type = ($IMagnetMoveAction);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IMagnetMoveAction_ = $IMagnetMoveAction$Type;
}}
declare module "packages/org/violetmoon/quark/content/mobs/client/layer/forgotten/$ForgottenEyesLayer" {
import {$EyesLayer, $EyesLayer$Type} from "packages/net/minecraft/client/renderer/entity/layers/$EyesLayer"
import {$RenderLayerParent, $RenderLayerParent$Type} from "packages/net/minecraft/client/renderer/entity/$RenderLayerParent"
import {$Skeleton, $Skeleton$Type} from "packages/net/minecraft/world/entity/monster/$Skeleton"
import {$SkeletonModel, $SkeletonModel$Type} from "packages/net/minecraft/client/model/$SkeletonModel"
import {$RenderType, $RenderType$Type} from "packages/net/minecraft/client/renderer/$RenderType"

export class $ForgottenEyesLayer<T extends $Skeleton, M extends $SkeletonModel<(T)>> extends $EyesLayer<(T), (M)> {

constructor(arg0: $RenderLayerParent$Type<(T), (M)>)

public "renderType"(): $RenderType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ForgottenEyesLayer$Type<T, M> = ($ForgottenEyesLayer<(T), (M)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ForgottenEyesLayer_<T, M> = $ForgottenEyesLayer$Type<(T), (M)>;
}}
declare module "packages/org/violetmoon/quark/content/tweaks/module/$SaferCreaturesModule" {
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$ZLivingFall, $ZLivingFall$Type} from "packages/org/violetmoon/zeta/event/play/entity/living/$ZLivingFall"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $SaferCreaturesModule extends $ZetaModule {
 "heightReduction": double
 "enableSlimeFallDamageRemoval": boolean
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "onFall"(arg0: $ZLivingFall$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SaferCreaturesModule$Type = ($SaferCreaturesModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SaferCreaturesModule_ = $SaferCreaturesModule$Type;
}}
declare module "packages/org/violetmoon/quark/api/$ISortingLockedSlots" {
import {$IQuarkButtonAllowed, $IQuarkButtonAllowed$Type} from "packages/org/violetmoon/quark/api/$IQuarkButtonAllowed"

export interface $ISortingLockedSlots extends $IQuarkButtonAllowed {

 "getSortingLockedSlots"(arg0: boolean): (integer)[]

(arg0: boolean): (integer)[]
}

export namespace $ISortingLockedSlots {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ISortingLockedSlots$Type = ($ISortingLockedSlots);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ISortingLockedSlots_ = $ISortingLockedSlots$Type;
}}
declare module "packages/org/violetmoon/quark/content/mobs/ai/$FindPlaceToSleepGoal" {
import {$MoveToBlockGoal, $MoveToBlockGoal$Type} from "packages/net/minecraft/world/entity/ai/goal/$MoveToBlockGoal"
import {$FindPlaceToSleepGoal$Target, $FindPlaceToSleepGoal$Target$Type} from "packages/org/violetmoon/quark/content/mobs/ai/$FindPlaceToSleepGoal$Target"
import {$Foxhound, $Foxhound$Type} from "packages/org/violetmoon/quark/content/mobs/entity/$Foxhound"

export class $FindPlaceToSleepGoal extends $MoveToBlockGoal {
readonly "speedModifier": double

constructor(arg0: $Foxhound$Type, arg1: double, arg2: $FindPlaceToSleepGoal$Target$Type)

public "canUse"(): boolean
public "canContinueToUse"(): boolean
public "start"(): void
public "stop"(): void
public "tick"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FindPlaceToSleepGoal$Type = ($FindPlaceToSleepGoal);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FindPlaceToSleepGoal_ = $FindPlaceToSleepGoal$Type;
}}
declare module "packages/org/violetmoon/zeta/client/event/play/$ZScreen$MouseButtonPressed" {
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$ZScreen, $ZScreen$Type} from "packages/org/violetmoon/zeta/client/event/play/$ZScreen"

export interface $ZScreen$MouseButtonPressed extends $ZScreen {

 "getMouseX"(): double
 "getMouseY"(): double
 "getButton"(): integer
 "getScreen"(): $Screen
}

export namespace $ZScreen$MouseButtonPressed {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZScreen$MouseButtonPressed$Type = ($ZScreen$MouseButtonPressed);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZScreen$MouseButtonPressed_ = $ZScreen$MouseButtonPressed$Type;
}}
declare module "packages/org/violetmoon/quark/base/proxy/$CommonProxy" {
import {$RegistryAccess, $RegistryAccess$Type} from "packages/net/minecraft/core/$RegistryAccess"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$ZRegister, $ZRegister$Type} from "packages/org/violetmoon/zeta/event/load/$ZRegister"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"

export class $CommonProxy {
static "jingleTheBells": boolean

constructor()

public "start"(): void
public "recipe"(arg0: $ZRegister$Type): void
public "clientUseItem"(arg0: $Player$Type, arg1: $Level$Type, arg2: $InteractionHand$Type, arg3: $BlockHitResult$Type): $InteractionResult
public "getVisualTime"(): float
public "isClientPlayerHoldingShift"(): boolean
public "hackilyGetCurrentClientLevelRegistryAccess"(): $RegistryAccess
get "visualTime"(): float
get "clientPlayerHoldingShift"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CommonProxy$Type = ($CommonProxy);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CommonProxy_ = $CommonProxy$Type;
}}
declare module "packages/org/violetmoon/zeta/event/play/entity/player/$ZPlayerTick" {
import {$IZetaPlayEvent, $IZetaPlayEvent$Type} from "packages/org/violetmoon/zeta/event/bus/$IZetaPlayEvent"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"

export interface $ZPlayerTick extends $IZetaPlayEvent {

 "getPlayer"(): $Player

(): $Player
}

export namespace $ZPlayerTick {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZPlayerTick$Type = ($ZPlayerTick);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZPlayerTick_ = $ZPlayerTick$Type;
}}
declare module "packages/org/violetmoon/zeta/block/$ZetaPillarBlock" {
import {$BooleanSupplier, $BooleanSupplier$Type} from "packages/java/util/function/$BooleanSupplier"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$FluidState, $FluidState$Type} from "packages/net/minecraft/world/level/material/$FluidState"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$ToolAction, $ToolAction$Type} from "packages/net/minecraftforge/common/$ToolAction"
import {$IForgeBlock, $IForgeBlock$Type} from "packages/net/minecraftforge/common/extensions/$IForgeBlock"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$CreativeModeTab, $CreativeModeTab$Type} from "packages/net/minecraft/world/item/$CreativeModeTab"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$IZetaBlock, $IZetaBlock$Type} from "packages/org/violetmoon/zeta/block/$IZetaBlock"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$UseOnContext, $UseOnContext$Type} from "packages/net/minecraft/world/item/context/$UseOnContext"
import {$RotatedPillarBlock, $RotatedPillarBlock$Type} from "packages/net/minecraft/world/level/block/$RotatedPillarBlock"
import {$EnumProperty, $EnumProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$EnumProperty"
import {$SoundType, $SoundType$Type} from "packages/net/minecraft/world/level/block/$SoundType"
import {$Direction$Axis, $Direction$Axis$Type} from "packages/net/minecraft/core/$Direction$Axis"
import {$IPlantable, $IPlantable$Type} from "packages/net/minecraftforge/common/$IPlantable"
import {$IZetaBlockExtensions, $IZetaBlockExtensions$Type} from "packages/org/violetmoon/zeta/block/ext/$IZetaBlockExtensions"
import {$ResourceKey, $ResourceKey$Type} from "packages/net/minecraft/resources/$ResourceKey"
import {$ItemLike, $ItemLike$Type} from "packages/net/minecraft/world/level/$ItemLike"
import {$BlockAndTintGetter, $BlockAndTintGetter$Type} from "packages/net/minecraft/world/level/$BlockAndTintGetter"

export class $ZetaPillarBlock extends $RotatedPillarBlock implements $IZetaBlock, $IZetaBlockExtensions, $IForgeBlock {
static readonly "AXIS": $EnumProperty<($Direction$Axis)>
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(arg0: string, arg1: $ZetaModule$Type, arg2: $BlockBehaviour$Properties$Type)

public "getModule"(): $ZetaModule
public "canSustainPlant"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type, arg4: $IPlantable$Type): boolean
public "isLadder"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "isConduitFrame"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): boolean
public "doesConditionApply"(): boolean
public "setCondition"(arg0: $BooleanSupplier$Type): $ZetaPillarBlock
public "getEnchantPowerBonus"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type): float
public "shouldDisplayFluidOverlay"(arg0: $BlockState$Type, arg1: $BlockAndTintGetter$Type, arg2: $BlockPos$Type, arg3: $FluidState$Type): boolean
public "getToolModifiedState"(arg0: $BlockState$Type, arg1: $UseOnContext$Type, arg2: $ToolAction$Type, arg3: boolean): $BlockState
public "getBeaconColorMultiplier"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): (float)[]
public "makesOpenTrapdoorAboveClimbable"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockState$Type): boolean
public "getSoundType"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): $SoundType
public "isScaffolding"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "getLightEmission"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type): integer
public "isFlammable"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): boolean
public "canStickTo"(arg0: $BlockState$Type, arg1: $BlockState$Type): boolean
public "getFireSpreadSpeed"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "getFlammability"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "isStickyBlock"(arg0: $BlockState$Type): boolean
public "collisionExtendsVertically"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): boolean
public "getBlock"(): $Block
public "getFireSpreadSpeedZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "getFlammabilityZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "setCreativeTab"(arg0: $ResourceKey$Type<($CreativeModeTab$Type)>): $Block
public "setCreativeTab"(arg0: $ResourceKey$Type<($CreativeModeTab$Type)>, arg1: $ItemLike$Type, arg2: boolean): $Block
public "isConduitFrameZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): boolean
public "isLadderZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "isStickyBlockZeta"(arg0: $BlockState$Type): boolean
public "isScaffoldingZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "canStickToZeta"(arg0: $BlockState$Type, arg1: $BlockState$Type): boolean
public "isFlammableZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): boolean
public "getSoundTypeZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): $SoundType
public "makesOpenTrapdoorAboveClimbableZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockState$Type): boolean
public "canSustainPlantZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type, arg4: string): boolean
public "getToolModifiedStateZeta"(arg0: $BlockState$Type, arg1: $UseOnContext$Type, arg2: string, arg3: boolean): $BlockState
public "collisionExtendsVerticallyZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): boolean
public "shouldDisplayFluidOverlayZeta"(arg0: $BlockState$Type, arg1: $BlockAndTintGetter$Type, arg2: $BlockPos$Type, arg3: $FluidState$Type): boolean
public "getEnchantPowerBonusZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type): float
public "getBeaconColorMultiplierZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): (float)[]
public "getLightEmissionZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type): integer
public "isEnabled"(): boolean
public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
get "module"(): $ZetaModule
set "condition"(value: $BooleanSupplier$Type)
get "block"(): $Block
set "creativeTab"(value: $ResourceKey$Type<($CreativeModeTab$Type)>)
get "enabled"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZetaPillarBlock$Type = ($ZetaPillarBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZetaPillarBlock_ = $ZetaPillarBlock$Type;
}}
declare module "packages/org/violetmoon/zeta/client/event/play/$ZRenderPlayer" {
import {$IZetaPlayEvent, $IZetaPlayEvent$Type} from "packages/org/violetmoon/zeta/event/bus/$IZetaPlayEvent"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"
import {$PlayerRenderer, $PlayerRenderer$Type} from "packages/net/minecraft/client/renderer/entity/player/$PlayerRenderer"

export interface $ZRenderPlayer extends $IZetaPlayEvent {

 "getPartialTick"(): float
 "getPoseStack"(): $PoseStack
 "getMultiBufferSource"(): $MultiBufferSource
 "getEntity"(): $Player
 "getPackedLight"(): integer
 "getRenderer"(): $PlayerRenderer
}

export namespace $ZRenderPlayer {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZRenderPlayer$Type = ($ZRenderPlayer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZRenderPlayer_ = $ZRenderPlayer$Type;
}}
declare module "packages/org/violetmoon/zetaimplforge/event/play/entity/player/$ForgeZPlayerTick" {
import {$ZPlayerTick, $ZPlayerTick$Type} from "packages/org/violetmoon/zeta/event/play/entity/player/$ZPlayerTick"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"

export class $ForgeZPlayerTick implements $ZPlayerTick {


public "getPlayer"(): $Player
get "player"(): $Player
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ForgeZPlayerTick$Type = ($ForgeZPlayerTick);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ForgeZPlayerTick_ = $ForgeZPlayerTick$Type;
}}
declare module "packages/org/violetmoon/zetaimplforge/event/play/loading/$ForgeZAttachCapabilities" {
import {$ZetaCapability, $ZetaCapability$Type} from "packages/org/violetmoon/zeta/capability/$ZetaCapability"
import {$ICapabilityProvider, $ICapabilityProvider$Type} from "packages/net/minecraftforge/common/capabilities/$ICapabilityProvider"
import {$ZAttachCapabilities, $ZAttachCapabilities$Type} from "packages/org/violetmoon/zeta/event/play/loading/$ZAttachCapabilities"
import {$AttachCapabilitiesEvent, $AttachCapabilitiesEvent$Type} from "packages/net/minecraftforge/event/$AttachCapabilitiesEvent"
import {$ZetaCapabilityManager, $ZetaCapabilityManager$Type} from "packages/org/violetmoon/zeta/capability/$ZetaCapabilityManager"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $ForgeZAttachCapabilities<T> implements $ZAttachCapabilities<(T)> {

constructor(arg0: $ZetaCapabilityManager$Type, arg1: $AttachCapabilitiesEvent$Type<(T)>)

public "getObject"(): T
/**
 * 
 * @deprecated
 */
public "addCapabilityForgeApi"(arg0: $ResourceLocation$Type, arg1: $ICapabilityProvider$Type): void
public "getCapabilityManager"(): $ZetaCapabilityManager
public "addCapability"<C>(arg0: $ResourceLocation$Type, arg1: $ZetaCapability$Type<(C)>, arg2: C): void
get "object"(): T
get "capabilityManager"(): $ZetaCapabilityManager
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ForgeZAttachCapabilities$Type<T> = ($ForgeZAttachCapabilities<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ForgeZAttachCapabilities_<T> = $ForgeZAttachCapabilities$Type<(T)>;
}}
declare module "packages/org/violetmoon/quark/content/tools/module/$TrowelModule" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$ZRegister, $ZRegister$Type} from "packages/org/violetmoon/zeta/event/load/$ZRegister"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $TrowelModule extends $ZetaModule {
static "maxDamage": integer
static readonly "blacklist": $TagKey<($Item)>
static readonly "whitelist": $TagKey<($Item)>
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "register"(arg0: $ZRegister$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TrowelModule$Type = ($TrowelModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TrowelModule_ = $TrowelModule$Type;
}}
declare module "packages/org/violetmoon/zeta/registry/$PottedPlantRegistry" {
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"

export interface $PottedPlantRegistry {

 "addPot"(arg0: $ResourceLocation$Type, arg1: $Block$Type): void

(arg0: $ResourceLocation$Type, arg1: $Block$Type): void
}

export namespace $PottedPlantRegistry {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PottedPlantRegistry$Type = ($PottedPlantRegistry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PottedPlantRegistry_ = $PottedPlantRegistry$Type;
}}
declare module "packages/org/violetmoon/zeta/event/bus/$ZetaEventBus" {
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$Logger, $Logger$Type} from "packages/org/apache/logging/log4j/$Logger"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"

export class $ZetaEventBus<E> {

constructor(arg0: $Zeta$Type, arg1: $Class$Type<(any)>, arg2: $Class$Type<(any)>, arg3: $Logger$Type)

public "fireExternal"<T extends E>(arg0: T, arg1: $Class$Type<(any)>): T
public "fire"<T extends E>(arg0: T): T
public "fire"<T extends E>(arg0: T, arg1: $Class$Type<(any)>): T
public "subscribe"(arg0: any): $ZetaEventBus<(E)>
public "unsubscribe"(arg0: any): $ZetaEventBus<(E)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZetaEventBus$Type<E> = ($ZetaEventBus<(E)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZetaEventBus_<E> = $ZetaEventBus$Type<(E)>;
}}
declare module "packages/org/violetmoon/zeta/event/bus/$IZetaPlayEvent" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $IZetaPlayEvent {

}

export namespace $IZetaPlayEvent {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IZetaPlayEvent$Type = ($IZetaPlayEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IZetaPlayEvent_ = $IZetaPlayEvent$Type;
}}
declare module "packages/org/violetmoon/quark/content/tools/module/$AbacusModule" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$ZRegister, $ZRegister$Type} from "packages/org/violetmoon/zeta/event/load/$ZRegister"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $AbacusModule extends $ZetaModule {
 "abacus": $Item
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "register"(arg0: $ZRegister$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AbacusModule$Type = ($AbacusModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AbacusModule_ = $AbacusModule$Type;
}}
declare module "packages/org/violetmoon/zeta/client/config/screen/$AbstractEditBoxInputScreen" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$ValueDefinition, $ValueDefinition$Type} from "packages/org/violetmoon/zeta/config/$ValueDefinition"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$AbstractInputScreen, $AbstractInputScreen$Type} from "packages/org/violetmoon/zeta/client/config/screen/$AbstractInputScreen"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$ChangeSet, $ChangeSet$Type} from "packages/org/violetmoon/zeta/config/$ChangeSet"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$ZetaClient, $ZetaClient$Type} from "packages/org/violetmoon/zeta/client/$ZetaClient"
import {$List, $List$Type} from "packages/java/util/$List"

export class $AbstractEditBoxInputScreen<T> extends $AbstractInputScreen<(T)> {
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering

constructor(arg0: $ZetaClient$Type, arg1: $Screen$Type, arg2: $ChangeSet$Type, arg3: $ValueDefinition$Type<(T)>)

public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AbstractEditBoxInputScreen$Type<T> = ($AbstractEditBoxInputScreen<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AbstractEditBoxInputScreen_<T> = $AbstractEditBoxInputScreen$Type<(T)>;
}}
declare module "packages/org/violetmoon/quark/content/experimental/module/$EnchantmentPredicatesModule" {
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $EnchantmentPredicatesModule extends $ZetaModule {
static "itemsToChange": $List<(string)>
static "enchantmentsToRegister": $List<(string)>
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EnchantmentPredicatesModule$Type = ($EnchantmentPredicatesModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EnchantmentPredicatesModule_ = $EnchantmentPredicatesModule$Type;
}}
declare module "packages/org/violetmoon/quark/content/management/module/$InventorySortingModule" {
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $InventorySortingModule extends $ZetaModule {
static "enablePlayerInventory": boolean
static "enablePlayerInventoryInChests": boolean
static "enableChests": boolean
static "satisfyingClick": boolean
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $InventorySortingModule$Type = ($InventorySortingModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $InventorySortingModule_ = $InventorySortingModule$Type;
}}
declare module "packages/org/violetmoon/zetaimplforge/mixin/mixins/$WeatheringCopperMixin" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $WeatheringCopperMixin {

}

export namespace $WeatheringCopperMixin {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WeatheringCopperMixin$Type = ($WeatheringCopperMixin);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WeatheringCopperMixin_ = $WeatheringCopperMixin$Type;
}}
declare module "packages/org/violetmoon/quark/content/automation/module/$FeedingTroughModule" {
import {$DispenserMenu, $DispenserMenu$Type} from "packages/net/minecraft/world/inventory/$DispenserMenu"
import {$TemptingSensor, $TemptingSensor$Type} from "packages/net/minecraft/world/entity/ai/sensing/$TemptingSensor"
import {$TemptGoal, $TemptGoal$Type} from "packages/net/minecraft/world/entity/ai/goal/$TemptGoal"
import {$ZEntityJoinLevel, $ZEntityJoinLevel$Type} from "packages/org/violetmoon/zeta/event/play/entity/$ZEntityJoinLevel"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$ZClientSetup, $ZClientSetup$Type} from "packages/org/violetmoon/zeta/client/event/load/$ZClientSetup"
import {$MenuType, $MenuType$Type} from "packages/net/minecraft/world/inventory/$MenuType"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$Animal, $Animal$Type} from "packages/net/minecraft/world/entity/animal/$Animal"
import {$ZRegister, $ZRegister$Type} from "packages/org/violetmoon/zeta/event/load/$ZRegister"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ZBabyEntitySpawn$Lowest, $ZBabyEntitySpawn$Lowest$Type} from "packages/org/violetmoon/zeta/event/play/entity/living/$ZBabyEntitySpawn$Lowest"
import {$FeedingTroughBlockEntity, $FeedingTroughBlockEntity$Type} from "packages/org/violetmoon/quark/content/automation/block/be/$FeedingTroughBlockEntity"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"

export class $FeedingTroughModule extends $ZetaModule {
static "blockEntityType": $BlockEntityType<($FeedingTroughBlockEntity)>
static "menuType": $MenuType<($DispenserMenu)>
static "cooldown": integer
static "maxAnimals": integer
static "loveChance": double
static "range": double
static "lookChance": double
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "register"(arg0: $ZRegister$Type): void
public "clientSetup"(arg0: $ZClientSetup$Type): void
public "onOrbSpawn"(arg0: $ZEntityJoinLevel$Type): void
public "onBreed"(arg0: $ZBabyEntitySpawn$Lowest$Type): void
public static "modifyTemptingSensor"(arg0: $TemptingSensor$Type, arg1: $Animal$Type, arg2: $ServerLevel$Type): $Player
public static "modifyTemptGoal"(arg0: $TemptGoal$Type, arg1: $Animal$Type, arg2: $ServerLevel$Type): $Player
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FeedingTroughModule$Type = ($FeedingTroughModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FeedingTroughModule_ = $FeedingTroughModule$Type;
}}
declare module "packages/org/violetmoon/quark/content/building/block/$HedgeBlock" {
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$FluidState, $FluidState$Type} from "packages/net/minecraft/world/level/material/$FluidState"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$ToolAction, $ToolAction$Type} from "packages/net/minecraftforge/common/$ToolAction"
import {$IForgeBlock, $IForgeBlock$Type} from "packages/net/minecraftforge/common/extensions/$IForgeBlock"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$CollisionContext, $CollisionContext$Type} from "packages/net/minecraft/world/phys/shapes/$CollisionContext"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$IZetaBlock, $IZetaBlock$Type} from "packages/org/violetmoon/zeta/block/$IZetaBlock"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$UseOnContext, $UseOnContext$Type} from "packages/net/minecraft/world/item/context/$UseOnContext"
import {$IZetaBlockColorProvider, $IZetaBlockColorProvider$Type} from "packages/org/violetmoon/zeta/registry/$IZetaBlockColorProvider"
import {$SoundType, $SoundType$Type} from "packages/net/minecraft/world/level/block/$SoundType"
import {$IPlantable, $IPlantable$Type} from "packages/net/minecraftforge/common/$IPlantable"
import {$IZetaBlockExtensions, $IZetaBlockExtensions$Type} from "packages/org/violetmoon/zeta/block/ext/$IZetaBlockExtensions"
import {$BlockAndTintGetter, $BlockAndTintGetter$Type} from "packages/net/minecraft/world/level/$BlockAndTintGetter"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$ZetaFenceBlock, $ZetaFenceBlock$Type} from "packages/org/violetmoon/zeta/block/$ZetaFenceBlock"

export class $HedgeBlock extends $ZetaFenceBlock implements $IZetaBlock, $IZetaBlockColorProvider, $IZetaBlockExtensions, $IForgeBlock {
readonly "leafState": $BlockState
static readonly "EXTEND": $BooleanProperty
static readonly "NORTH": $BooleanProperty
static readonly "EAST": $BooleanProperty
static readonly "SOUTH": $BooleanProperty
static readonly "WEST": $BooleanProperty
static readonly "WATERLOGGED": $BooleanProperty
static readonly "PROPERTY_BY_DIRECTION": $Map<($Direction), ($BooleanProperty)>
 "collisionShapeByIndex": ($VoxelShape)[]
 "shapeByIndex": ($VoxelShape)[]
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(arg0: string, arg1: $ZetaModule$Type, arg2: $Block$Type, arg3: $Block$Type)
/**
 * 
 * @deprecated
 */
constructor(arg0: $ZetaModule$Type, arg1: $Block$Type, arg2: $Block$Type)

public "getStateForPlacement"(arg0: $BlockPlaceContext$Type): $BlockState
public "canSustainPlant"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type, arg4: $IPlantable$Type): boolean
public "isLadder"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "isConduitFrame"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): boolean
public "getLeaf"(): $BlockState
public "getEnchantPowerBonus"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type): float
public "shouldDisplayFluidOverlay"(arg0: $BlockState$Type, arg1: $BlockAndTintGetter$Type, arg2: $BlockPos$Type, arg3: $FluidState$Type): boolean
public "getToolModifiedState"(arg0: $BlockState$Type, arg1: $UseOnContext$Type, arg2: $ToolAction$Type, arg3: boolean): $BlockState
public "getBeaconColorMultiplier"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): (float)[]
public "makesOpenTrapdoorAboveClimbable"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockState$Type): boolean
public "getSoundType"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): $SoundType
public "isScaffolding"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "getLightEmission"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type): integer
public "canSustainPlantZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type, arg4: string): boolean
public "getBlockColorProviderName"(): string
public "getItemColorProviderName"(): string
public "isFlammable"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): boolean
public "canStickTo"(arg0: $BlockState$Type, arg1: $BlockState$Type): boolean
public "getFireSpreadSpeed"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "getFlammability"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "isStickyBlock"(arg0: $BlockState$Type): boolean
public "updateShape"(arg0: $BlockState$Type, arg1: $Direction$Type, arg2: $BlockState$Type, arg3: $LevelAccessor$Type, arg4: $BlockPos$Type, arg5: $BlockPos$Type): $BlockState
public "getShape"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $CollisionContext$Type): $VoxelShape
public "connectsTo"(arg0: $BlockState$Type, arg1: boolean, arg2: $Direction$Type): boolean
public "collisionExtendsVertically"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): boolean
public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
get "leaf"(): $BlockState
get "blockColorProviderName"(): string
get "itemColorProviderName"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $HedgeBlock$Type = ($HedgeBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $HedgeBlock_ = $HedgeBlock$Type;
}}
declare module "packages/org/violetmoon/quark/content/tweaks/module/$EmotesModule" {
import {$File, $File$Type} from "packages/java/io/$File"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $EmotesModule extends $ZetaModule {
static readonly "EMOTE_BUTTON_WIDTH": integer
static readonly "EMOTES_PER_ROW": integer
static "enabledEmotes": $List<(string)>
static "customEmotes": $List<(string)>
static "customEmoteDebug": boolean
static "buttonShiftX": integer
static "buttonShiftY": integer
static "emotesVisible": boolean
static "emotesDir": $File
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EmotesModule$Type = ($EmotesModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EmotesModule_ = $EmotesModule$Type;
}}
declare module "packages/org/violetmoon/zeta/api/$IAdvancementModifierDelegate" {
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$BooleanSupplier, $BooleanSupplier$Type} from "packages/java/util/function/$BooleanSupplier"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$Biome, $Biome$Type} from "packages/net/minecraft/world/level/biome/$Biome"
import {$ResourceKey, $ResourceKey$Type} from "packages/net/minecraft/resources/$ResourceKey"
import {$ItemLike, $ItemLike$Type} from "packages/net/minecraft/world/level/$ItemLike"
import {$BucketItem, $BucketItem$Type} from "packages/net/minecraft/world/item/$BucketItem"
import {$IAdvancementModifier, $IAdvancementModifier$Type} from "packages/org/violetmoon/zeta/api/$IAdvancementModifier"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"

export interface $IAdvancementModifierDelegate {

 "createMonsterHunterMod"(arg0: $Set$Type<($EntityType$Type<(any)>)>): $IAdvancementModifier
 "createFuriousCocktailMod"(arg0: $BooleanSupplier$Type, arg1: $Set$Type<($MobEffect$Type)>): $IAdvancementModifier
 "createAdventuringTimeMod"(arg0: $Set$Type<($ResourceKey$Type<($Biome$Type)>)>): $IAdvancementModifier
 "createFishyBusinessMod"(arg0: $Set$Type<($ItemLike$Type)>): $IAdvancementModifier
 "createASeedyPlaceMod"(arg0: $Set$Type<($Block$Type)>): $IAdvancementModifier
 "createWaxOnWaxOffMod"(arg0: $Set$Type<($Block$Type)>, arg1: $Set$Type<($Block$Type)>): $IAdvancementModifier
 "createTacticalFishingMod"(arg0: $Set$Type<($BucketItem$Type)>): $IAdvancementModifier
 "createGlowAndBeholdMod"(arg0: $Set$Type<($Block$Type)>): $IAdvancementModifier
 "createBalancedDietMod"(arg0: $Set$Type<($ItemLike$Type)>): $IAdvancementModifier
 "createTwoByTwoMod"(arg0: $Set$Type<($EntityType$Type<(any)>)>): $IAdvancementModifier
}

export namespace $IAdvancementModifierDelegate {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IAdvancementModifierDelegate$Type = ($IAdvancementModifierDelegate);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IAdvancementModifierDelegate_ = $IAdvancementModifierDelegate$Type;
}}
declare module "packages/org/violetmoon/quark/content/experimental/config/$VariantsConfig" {
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$ConfigFlagManager, $ConfigFlagManager$Type} from "packages/org/violetmoon/zeta/config/$ConfigFlagManager"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$IConfigType, $IConfigType$Type} from "packages/org/violetmoon/zeta/config/type/$IConfigType"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $VariantsConfig implements $IConfigType {

constructor()

public "isVariant"(arg0: $Block$Type): boolean
public "onReload"(arg0: $ZetaModule$Type, arg1: $ConfigFlagManager$Type): void
public "getBlockOfVariant"(arg0: $Block$Type, arg1: string): $Block
public "isKnownVariant"(arg0: string): boolean
public "getVisibleVariants"(): $List<(string)>
public "getVariantOfBlock"(arg0: $Block$Type, arg1: $Block$Type): string
public "getOriginalBlock"(arg0: $Block$Type): $Block
public "hasVariants"(arg0: $Block$Type): boolean
public "findVariantForBlock"(arg0: $Block$Type): string
public "isOriginal"(arg0: $Block$Type): boolean
public "getAllVariants"(arg0: $Block$Type): $Collection<($Block)>
get "visibleVariants"(): $List<(string)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $VariantsConfig$Type = ($VariantsConfig);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $VariantsConfig_ = $VariantsConfig$Type;
}}
declare module "packages/org/violetmoon/zeta/config/$IConfigCallback" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $IConfigCallback {

}

export namespace $IConfigCallback {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IConfigCallback$Type = ($IConfigCallback);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IConfigCallback_ = $IConfigCallback$Type;
}}
declare module "packages/org/violetmoon/zeta/registry/$VariantRegistry" {
import {$IZetaBlock, $IZetaBlock$Type} from "packages/org/violetmoon/zeta/block/$IZetaBlock"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$CreativeModeTab, $CreativeModeTab$Type} from "packages/net/minecraft/world/item/$CreativeModeTab"
import {$List, $List$Type} from "packages/java/util/$List"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$FlowerPotBlock, $FlowerPotBlock$Type} from "packages/net/minecraft/world/level/block/$FlowerPotBlock"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ResourceKey, $ResourceKey$Type} from "packages/net/minecraft/resources/$ResourceKey"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"

export class $VariantRegistry {
readonly "slabs": $List<($Block)>
readonly "stairs": $List<($Block)>
readonly "walls": $List<($Block)>

constructor(arg0: $Zeta$Type)

public "addWall"(arg0: $IZetaBlock$Type, arg1: $ResourceKey$Type<($CreativeModeTab$Type)>): $IZetaBlock
public "addSlabAndStairs"(arg0: $IZetaBlock$Type, arg1: $ResourceKey$Type<($CreativeModeTab$Type)>): $IZetaBlock
public "addSlabStairsWall"(arg0: $IZetaBlock$Type, arg1: $ResourceKey$Type<($CreativeModeTab$Type)>): $Block
public "addFlowerPot"(arg0: $Block$Type, arg1: string, arg2: $Function$Type<($BlockBehaviour$Properties$Type), ($BlockBehaviour$Properties$Type)>): $FlowerPotBlock
public "addSlab"(arg0: $IZetaBlock$Type, arg1: $ResourceKey$Type<($CreativeModeTab$Type)>): $IZetaBlock
public "addStairs"(arg0: $IZetaBlock$Type, arg1: $ResourceKey$Type<($CreativeModeTab$Type)>): $IZetaBlock
public static "realStateCopy"(arg0: $IZetaBlock$Type): $BlockBehaviour$Properties
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $VariantRegistry$Type = ($VariantRegistry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $VariantRegistry_ = $VariantRegistry$Type;
}}
declare module "packages/org/violetmoon/quark/content/automation/module/$PistonsMoveTileEntitiesModule" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$ZLevelTick$End, $ZLevelTick$End$Type} from "packages/org/violetmoon/zeta/event/play/$ZLevelTick$End"
import {$ZGatherHints, $ZGatherHints$Type} from "packages/org/violetmoon/zeta/event/play/loading/$ZGatherHints"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$PistonStructureResolver, $PistonStructureResolver$Type} from "packages/net/minecraft/world/level/block/piston/$PistonStructureResolver"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ZRegister, $ZRegister$Type} from "packages/org/violetmoon/zeta/event/load/$ZRegister"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZConfigChanged, $ZConfigChanged$Type} from "packages/org/violetmoon/zeta/event/load/$ZConfigChanged"

export class $PistonsMoveTileEntitiesModule extends $ZetaModule {
static "enableChestsMovingTogether": boolean
static "staticEnabled": boolean
static "renderBlacklist": $List<(string)>
static "movementBlacklist": $List<(string)>
static "delayedUpdateList": $List<(string)>
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "register"(arg0: $ZRegister$Type): void
public "onWorldTick"(arg0: $ZLevelTick$End$Type): void
/**
 * 
 * @deprecated
 */
public static "getMovement"(arg0: $Level$Type, arg1: $BlockPos$Type): $BlockEntity
public "addAdditionalHints"(arg0: $ZGatherHints$Type): void
public static "setPistonBlock"(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: integer): boolean
public static "setMovingBlockEntityData"(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $CompoundTag$Type): void
public static "getMovingBlockEntityData"(arg0: $Level$Type, arg1: $BlockPos$Type): $CompoundTag
public "configChanged"(arg0: $ZConfigChanged$Type): void
public static "shouldMoveTE"(arg0: $BlockState$Type): boolean
public static "shouldMoveTE"(arg0: boolean, arg1: $BlockState$Type): boolean
public static "detachTileEntities"(arg0: $Level$Type, arg1: $PistonStructureResolver$Type, arg2: $Direction$Type, arg3: boolean): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PistonsMoveTileEntitiesModule$Type = ($PistonsMoveTileEntitiesModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PistonsMoveTileEntitiesModule_ = $PistonsMoveTileEntitiesModule$Type;
}}
declare module "packages/org/violetmoon/zetaimplforge/registry/$ForgeBrewingRegistry" {
import {$ZCommonSetup, $ZCommonSetup$Type} from "packages/org/violetmoon/zeta/event/load/$ZCommonSetup"
import {$BrewingRegistry, $BrewingRegistry$Type} from "packages/org/violetmoon/zeta/registry/$BrewingRegistry"
import {$ForgeZeta, $ForgeZeta$Type} from "packages/org/violetmoon/zetaimplforge/$ForgeZeta"
import {$Ingredient, $Ingredient$Type} from "packages/net/minecraft/world/item/crafting/$Ingredient"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$Potion, $Potion$Type} from "packages/net/minecraft/world/item/alchemy/$Potion"

export class $ForgeBrewingRegistry extends $BrewingRegistry {

constructor(arg0: $ForgeZeta$Type)

public "addBrewingRecipe"(arg0: $Potion$Type, arg1: $Supplier$Type<($Ingredient$Type)>, arg2: $Potion$Type): void
public "commonSetup"(arg0: $ZCommonSetup$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ForgeBrewingRegistry$Type = ($ForgeBrewingRegistry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ForgeBrewingRegistry_ = $ForgeBrewingRegistry$Type;
}}
declare module "packages/org/violetmoon/zetaimplforge/client/event/load/$ForgeZRegisterLayerDefinitions" {
import {$ModelLayerLocation, $ModelLayerLocation$Type} from "packages/net/minecraft/client/model/geom/$ModelLayerLocation"
import {$ZRegisterLayerDefinitions, $ZRegisterLayerDefinitions$Type} from "packages/org/violetmoon/zeta/client/event/load/$ZRegisterLayerDefinitions"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$EntityRenderersEvent$RegisterLayerDefinitions, $EntityRenderersEvent$RegisterLayerDefinitions$Type} from "packages/net/minecraftforge/client/event/$EntityRenderersEvent$RegisterLayerDefinitions"
import {$LayerDefinition, $LayerDefinition$Type} from "packages/net/minecraft/client/model/geom/builders/$LayerDefinition"

export class $ForgeZRegisterLayerDefinitions implements $ZRegisterLayerDefinitions {

constructor(arg0: $EntityRenderersEvent$RegisterLayerDefinitions$Type)

public "registerLayerDefinition"(arg0: $ModelLayerLocation$Type, arg1: $Supplier$Type<($LayerDefinition$Type)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ForgeZRegisterLayerDefinitions$Type = ($ForgeZRegisterLayerDefinitions);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ForgeZRegisterLayerDefinitions_ = $ForgeZRegisterLayerDefinitions$Type;
}}
declare module "packages/org/violetmoon/zeta/util/$RaytracingUtil" {
import {$Pair, $Pair$Type} from "packages/org/apache/commons/lang3/tuple/$Pair"
import {$ClipContext$Fluid, $ClipContext$Fluid$Type} from "packages/net/minecraft/world/level/$ClipContext$Fluid"
import {$HitResult, $HitResult$Type} from "packages/net/minecraft/world/phys/$HitResult"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$ClipContext$Block, $ClipContext$Block$Type} from "packages/net/minecraft/world/level/$ClipContext$Block"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $RaytracingUtil {

constructor()

public "getEntityParams"(arg0: $Entity$Type): $Pair<($Vec3), ($Vec3)>
public "getEntityRange"(arg0: $LivingEntity$Type): double
public "rayTrace"(arg0: $Entity$Type, arg1: $Level$Type, arg2: $Entity$Type, arg3: $ClipContext$Block$Type, arg4: $ClipContext$Fluid$Type, arg5: double): $HitResult
public "rayTrace"(arg0: $Entity$Type, arg1: $Level$Type, arg2: $Vec3$Type, arg3: $Vec3$Type, arg4: $ClipContext$Block$Type, arg5: $ClipContext$Fluid$Type): $HitResult
public "rayTrace"(arg0: $Entity$Type, arg1: $Level$Type, arg2: $Vec3$Type, arg3: $Vec3$Type, arg4: $ClipContext$Block$Type, arg5: $ClipContext$Fluid$Type, arg6: double): $HitResult
public "rayTrace"(arg0: $Entity$Type, arg1: $Level$Type, arg2: $Player$Type, arg3: $ClipContext$Block$Type, arg4: $ClipContext$Fluid$Type): $HitResult
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RaytracingUtil$Type = ($RaytracingUtil);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RaytracingUtil_ = $RaytracingUtil$Type;
}}
declare module "packages/org/violetmoon/zeta/network/$ZetaHandshakeMessage" {
import {$IZetaMessage, $IZetaMessage$Type} from "packages/org/violetmoon/zeta/network/$IZetaMessage"
import {$IntSupplier, $IntSupplier$Type} from "packages/java/util/function/$IntSupplier"
import {$IZetaNetworkEventContext, $IZetaNetworkEventContext$Type} from "packages/org/violetmoon/zeta/network/$IZetaNetworkEventContext"

export class $ZetaHandshakeMessage implements $IntSupplier, $IZetaMessage {

constructor()

public "getAsInt"(): integer
public "getLoginIndex"(): integer
public "setLoginIndex"(arg0: integer): void
public "receive"(arg0: $IZetaNetworkEventContext$Type): boolean
get "asInt"(): integer
get "loginIndex"(): integer
set "loginIndex"(value: integer)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZetaHandshakeMessage$Type = ($ZetaHandshakeMessage);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZetaHandshakeMessage_ = $ZetaHandshakeMessage$Type;
}}
declare module "packages/org/violetmoon/quark/api/event/$UsageTickerEvent" {
import {$ListenerList, $ListenerList$Type} from "packages/net/minecraftforge/eventbus/$ListenerList"
import {$Event, $Event$Type} from "packages/net/minecraftforge/eventbus/api/$Event"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$UsageTickerEvent$Pass, $UsageTickerEvent$Pass$Type} from "packages/org/violetmoon/quark/api/event/$UsageTickerEvent$Pass"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export class $UsageTickerEvent extends $Event {
readonly "slot": $EquipmentSlot
readonly "currentStack": $ItemStack
readonly "currentRealStack": $ItemStack
readonly "currentCount": integer
readonly "pass": $UsageTickerEvent$Pass
readonly "player": $Player

constructor()
constructor(arg0: $EquipmentSlot$Type, arg1: $ItemStack$Type, arg2: $ItemStack$Type, arg3: integer, arg4: boolean, arg5: $Player$Type)

public "isCancelable"(): boolean
public "getListenerList"(): $ListenerList
public "hasResult"(): boolean
get "cancelable"(): boolean
get "listenerList"(): $ListenerList
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $UsageTickerEvent$Type = ($UsageTickerEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $UsageTickerEvent_ = $UsageTickerEvent$Type;
}}
declare module "packages/org/violetmoon/quark/content/world/feature/$GlowExtrasFeature" {
import {$BonusChestFeature, $BonusChestFeature$Type} from "packages/net/minecraft/world/level/levelgen/feature/$BonusChestFeature"
import {$RandomFeatureConfiguration, $RandomFeatureConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$RandomFeatureConfiguration"
import {$SpikeConfiguration, $SpikeConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$SpikeConfiguration"
import {$LakeFeature$Configuration, $LakeFeature$Configuration$Type} from "packages/net/minecraft/world/level/levelgen/feature/$LakeFeature$Configuration"
import {$BlockColumnConfiguration, $BlockColumnConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$BlockColumnConfiguration"
import {$MultifaceGrowthConfiguration, $MultifaceGrowthConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$MultifaceGrowthConfiguration"
import {$RootSystemConfiguration, $RootSystemConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$RootSystemConfiguration"
import {$UnderwaterMagmaConfiguration, $UnderwaterMagmaConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$UnderwaterMagmaConfiguration"
import {$RandomPatchConfiguration, $RandomPatchConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$RandomPatchConfiguration"
import {$ProbabilityFeatureConfiguration, $ProbabilityFeatureConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$ProbabilityFeatureConfiguration"
import {$TreeConfiguration, $TreeConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$TreeConfiguration"
import {$TwistingVinesConfig, $TwistingVinesConfig$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$TwistingVinesConfig"
import {$FeaturePlaceContext, $FeaturePlaceContext$Type} from "packages/net/minecraft/world/level/levelgen/feature/$FeaturePlaceContext"
import {$DripstoneClusterConfiguration, $DripstoneClusterConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$DripstoneClusterConfiguration"
import {$LayerConfiguration, $LayerConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$LayerConfiguration"
import {$HugeMushroomFeatureConfiguration, $HugeMushroomFeatureConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$HugeMushroomFeatureConfiguration"
import {$ReplaceBlockConfiguration, $ReplaceBlockConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$ReplaceBlockConfiguration"
import {$List, $List$Type} from "packages/java/util/$List"
import {$BlockStateConfiguration, $BlockStateConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$BlockStateConfiguration"
import {$SimpleBlockConfiguration, $SimpleBlockConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$SimpleBlockConfiguration"
import {$HugeFungusConfiguration, $HugeFungusConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/$HugeFungusConfiguration"
import {$DiskConfiguration, $DiskConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$DiskConfiguration"
import {$SeagrassFeature, $SeagrassFeature$Type} from "packages/net/minecraft/world/level/levelgen/feature/$SeagrassFeature"
import {$ReplaceSphereConfiguration, $ReplaceSphereConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$ReplaceSphereConfiguration"
import {$PlacementModifier, $PlacementModifier$Type} from "packages/net/minecraft/world/level/levelgen/placement/$PlacementModifier"
import {$FossilFeatureConfiguration, $FossilFeatureConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/$FossilFeatureConfiguration"
import {$DeltaFeatureConfiguration, $DeltaFeatureConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$DeltaFeatureConfiguration"
import {$PointedDripstoneConfiguration, $PointedDripstoneConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$PointedDripstoneConfiguration"
import {$SpringConfiguration, $SpringConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$SpringConfiguration"
import {$BlockPileConfiguration, $BlockPileConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$BlockPileConfiguration"
import {$OreConfiguration, $OreConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$OreConfiguration"
import {$SimpleRandomFeatureConfiguration, $SimpleRandomFeatureConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$SimpleRandomFeatureConfiguration"
import {$SculkPatchConfiguration, $SculkPatchConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$SculkPatchConfiguration"
import {$NetherForestVegetationConfig, $NetherForestVegetationConfig$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$NetherForestVegetationConfig"
import {$GeodeConfiguration, $GeodeConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$GeodeConfiguration"
import {$LargeDripstoneConfiguration, $LargeDripstoneConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$LargeDripstoneConfiguration"
import {$RandomBooleanFeatureConfiguration, $RandomBooleanFeatureConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$RandomBooleanFeatureConfiguration"
import {$ColumnFeatureConfiguration, $ColumnFeatureConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$ColumnFeatureConfiguration"
import {$CountConfiguration, $CountConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$CountConfiguration"
import {$VegetationPatchConfiguration, $VegetationPatchConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$VegetationPatchConfiguration"
import {$Feature, $Feature$Type} from "packages/net/minecraft/world/level/levelgen/feature/$Feature"
import {$NoneFeatureConfiguration, $NoneFeatureConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$NoneFeatureConfiguration"
import {$EndGatewayConfiguration, $EndGatewayConfiguration$Type} from "packages/net/minecraft/world/level/levelgen/feature/configurations/$EndGatewayConfiguration"

export class $GlowExtrasFeature extends $Feature<($NoneFeatureConfiguration)> {
static readonly "NO_OP": $Feature<($NoneFeatureConfiguration)>
static readonly "TREE": $Feature<($TreeConfiguration)>
static readonly "FLOWER": $Feature<($RandomPatchConfiguration)>
static readonly "NO_BONEMEAL_FLOWER": $Feature<($RandomPatchConfiguration)>
static readonly "RANDOM_PATCH": $Feature<($RandomPatchConfiguration)>
static readonly "BLOCK_PILE": $Feature<($BlockPileConfiguration)>
static readonly "SPRING": $Feature<($SpringConfiguration)>
static readonly "CHORUS_PLANT": $Feature<($NoneFeatureConfiguration)>
static readonly "REPLACE_SINGLE_BLOCK": $Feature<($ReplaceBlockConfiguration)>
static readonly "VOID_START_PLATFORM": $Feature<($NoneFeatureConfiguration)>
static readonly "DESERT_WELL": $Feature<($NoneFeatureConfiguration)>
static readonly "FOSSIL": $Feature<($FossilFeatureConfiguration)>
static readonly "HUGE_RED_MUSHROOM": $Feature<($HugeMushroomFeatureConfiguration)>
static readonly "HUGE_BROWN_MUSHROOM": $Feature<($HugeMushroomFeatureConfiguration)>
static readonly "ICE_SPIKE": $Feature<($NoneFeatureConfiguration)>
static readonly "GLOWSTONE_BLOB": $Feature<($NoneFeatureConfiguration)>
static readonly "FREEZE_TOP_LAYER": $Feature<($NoneFeatureConfiguration)>
static readonly "VINES": $Feature<($NoneFeatureConfiguration)>
static readonly "BLOCK_COLUMN": $Feature<($BlockColumnConfiguration)>
static readonly "VEGETATION_PATCH": $Feature<($VegetationPatchConfiguration)>
static readonly "WATERLOGGED_VEGETATION_PATCH": $Feature<($VegetationPatchConfiguration)>
static readonly "ROOT_SYSTEM": $Feature<($RootSystemConfiguration)>
static readonly "MULTIFACE_GROWTH": $Feature<($MultifaceGrowthConfiguration)>
static readonly "UNDERWATER_MAGMA": $Feature<($UnderwaterMagmaConfiguration)>
static readonly "MONSTER_ROOM": $Feature<($NoneFeatureConfiguration)>
static readonly "BLUE_ICE": $Feature<($NoneFeatureConfiguration)>
static readonly "ICEBERG": $Feature<($BlockStateConfiguration)>
static readonly "FOREST_ROCK": $Feature<($BlockStateConfiguration)>
static readonly "DISK": $Feature<($DiskConfiguration)>
static readonly "LAKE": $Feature<($LakeFeature$Configuration)>
static readonly "ORE": $Feature<($OreConfiguration)>
static readonly "END_SPIKE": $Feature<($SpikeConfiguration)>
static readonly "END_ISLAND": $Feature<($NoneFeatureConfiguration)>
static readonly "END_GATEWAY": $Feature<($EndGatewayConfiguration)>
static readonly "SEAGRASS": $SeagrassFeature
static readonly "KELP": $Feature<($NoneFeatureConfiguration)>
static readonly "CORAL_TREE": $Feature<($NoneFeatureConfiguration)>
static readonly "CORAL_MUSHROOM": $Feature<($NoneFeatureConfiguration)>
static readonly "CORAL_CLAW": $Feature<($NoneFeatureConfiguration)>
static readonly "SEA_PICKLE": $Feature<($CountConfiguration)>
static readonly "SIMPLE_BLOCK": $Feature<($SimpleBlockConfiguration)>
static readonly "BAMBOO": $Feature<($ProbabilityFeatureConfiguration)>
static readonly "HUGE_FUNGUS": $Feature<($HugeFungusConfiguration)>
static readonly "NETHER_FOREST_VEGETATION": $Feature<($NetherForestVegetationConfig)>
static readonly "WEEPING_VINES": $Feature<($NoneFeatureConfiguration)>
static readonly "TWISTING_VINES": $Feature<($TwistingVinesConfig)>
static readonly "BASALT_COLUMNS": $Feature<($ColumnFeatureConfiguration)>
static readonly "DELTA_FEATURE": $Feature<($DeltaFeatureConfiguration)>
static readonly "REPLACE_BLOBS": $Feature<($ReplaceSphereConfiguration)>
static readonly "FILL_LAYER": $Feature<($LayerConfiguration)>
static readonly "BONUS_CHEST": $BonusChestFeature
static readonly "BASALT_PILLAR": $Feature<($NoneFeatureConfiguration)>
static readonly "SCATTERED_ORE": $Feature<($OreConfiguration)>
static readonly "RANDOM_SELECTOR": $Feature<($RandomFeatureConfiguration)>
static readonly "SIMPLE_RANDOM_SELECTOR": $Feature<($SimpleRandomFeatureConfiguration)>
static readonly "RANDOM_BOOLEAN_SELECTOR": $Feature<($RandomBooleanFeatureConfiguration)>
static readonly "GEODE": $Feature<($GeodeConfiguration)>
static readonly "DRIPSTONE_CLUSTER": $Feature<($DripstoneClusterConfiguration)>
static readonly "LARGE_DRIPSTONE": $Feature<($LargeDripstoneConfiguration)>
static readonly "POINTED_DRIPSTONE": $Feature<($PointedDripstoneConfiguration)>
static readonly "SCULK_PATCH": $Feature<($SculkPatchConfiguration)>

constructor()

public static "placed"(): $List<($PlacementModifier)>
public "place"(arg0: $FeaturePlaceContext$Type<($NoneFeatureConfiguration$Type)>): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GlowExtrasFeature$Type = ($GlowExtrasFeature);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GlowExtrasFeature_ = $GlowExtrasFeature$Type;
}}
declare module "packages/org/violetmoon/zeta/event/play/entity/player/$ZPlayerInteract$EntityInteractSpecific" {
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$ZPlayerInteract, $ZPlayerInteract$Type} from "packages/org/violetmoon/zeta/event/play/entity/player/$ZPlayerInteract"

export interface $ZPlayerInteract$EntityInteractSpecific extends $ZPlayerInteract {

 "getTarget"(): $Entity
 "getLevel"(): $Level
 "getHand"(): $InteractionHand
 "getEntity"(): $Player
 "getPos"(): $BlockPos
 "setCancellationResult"(arg0: $InteractionResult$Type): void
 "cancel"(): void
 "setCanceled"(arg0: boolean): void
 "isCanceled"(): boolean
}

export namespace $ZPlayerInteract$EntityInteractSpecific {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZPlayerInteract$EntityInteractSpecific$Type = ($ZPlayerInteract$EntityInteractSpecific);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZPlayerInteract$EntityInteractSpecific_ = $ZPlayerInteract$EntityInteractSpecific$Type;
}}
declare module "packages/org/violetmoon/quark/content/tweaks/module/$GrabChickensModule" {
import {$ZPlayerTick$Start, $ZPlayerTick$Start$Type} from "packages/org/violetmoon/zeta/event/play/entity/player/$ZPlayerTick$Start"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ZEntityInteract, $ZEntityInteract$Type} from "packages/org/violetmoon/zeta/event/play/entity/$ZEntityInteract"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZConfigChanged, $ZConfigChanged$Type} from "packages/org/violetmoon/zeta/event/load/$ZConfigChanged"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $GrabChickensModule extends $ZetaModule {
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "playerTick"(arg0: $ZPlayerTick$Start$Type): void
public "configChanged"(arg0: $ZConfigChanged$Type): void
public "playerInteract"(arg0: $ZEntityInteract$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GrabChickensModule$Type = ($GrabChickensModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GrabChickensModule_ = $GrabChickensModule$Type;
}}
declare module "packages/org/violetmoon/zeta/event/play/loading/$ZGatherAdditionalFlags" {
import {$IZetaPlayEvent, $IZetaPlayEvent$Type} from "packages/org/violetmoon/zeta/event/bus/$IZetaPlayEvent"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$ConfigFlagManager, $ConfigFlagManager$Type} from "packages/org/violetmoon/zeta/config/$ConfigFlagManager"

export class $ZGatherAdditionalFlags extends $Record implements $IZetaPlayEvent {

constructor(flagManager: $ConfigFlagManager$Type)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "flagManager"(): $ConfigFlagManager
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZGatherAdditionalFlags$Type = ($ZGatherAdditionalFlags);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZGatherAdditionalFlags_ = $ZGatherAdditionalFlags$Type;
}}
declare module "packages/org/violetmoon/zetaimplforge/event/play/entity/$ForgeZEntityInteract" {
import {$PlayerInteractEvent$EntityInteract, $PlayerInteractEvent$EntityInteract$Type} from "packages/net/minecraftforge/event/entity/player/$PlayerInteractEvent$EntityInteract"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ZEntityInteract, $ZEntityInteract$Type} from "packages/org/violetmoon/zeta/event/play/entity/$ZEntityInteract"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $ForgeZEntityInteract implements $ZEntityInteract {

constructor(arg0: $PlayerInteractEvent$EntityInteract$Type)

public "getTarget"(): $Entity
public "getLevel"(): $Level
public "getHand"(): $InteractionHand
public "getEntity"(): $Player
public "getItemStack"(): $ItemStack
get "target"(): $Entity
get "level"(): $Level
get "hand"(): $InteractionHand
get "entity"(): $Player
get "itemStack"(): $ItemStack
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ForgeZEntityInteract$Type = ($ForgeZEntityInteract);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ForgeZEntityInteract_ = $ForgeZEntityInteract$Type;
}}
declare module "packages/org/violetmoon/quark/addons/oddities/inventory/$MatrixEnchantingMenu" {
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$AbstractContainerMenu, $AbstractContainerMenu$Type} from "packages/net/minecraft/world/inventory/$AbstractContainerMenu"
import {$MatrixEnchantingTableBlockEntity, $MatrixEnchantingTableBlockEntity$Type} from "packages/org/violetmoon/quark/addons/oddities/block/be/$MatrixEnchantingTableBlockEntity"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"

export class $MatrixEnchantingMenu extends $AbstractContainerMenu {
readonly "enchanter": $MatrixEnchantingTableBlockEntity
static readonly "SLOT_CLICKED_OUTSIDE": integer
static readonly "QUICKCRAFT_TYPE_CHARITABLE": integer
static readonly "QUICKCRAFT_TYPE_GREEDY": integer
static readonly "QUICKCRAFT_TYPE_CLONE": integer
static readonly "QUICKCRAFT_HEADER_START": integer
static readonly "QUICKCRAFT_HEADER_CONTINUE": integer
static readonly "QUICKCRAFT_HEADER_END": integer
static readonly "CARRIED_SLOT_SIZE": integer
readonly "lastSlots": $NonNullList<($ItemStack)>
readonly "slots": $NonNullList<($Slot)>
 "remoteSlots": $NonNullList<($ItemStack)>
 "containerId": integer

constructor(arg0: integer, arg1: $Inventory$Type, arg2: $MatrixEnchantingTableBlockEntity$Type)

public static "fromNetwork"(arg0: integer, arg1: $Inventory$Type, arg2: $FriendlyByteBuf$Type): $MatrixEnchantingMenu
public "stillValid"(arg0: $Player$Type): boolean
public "quickMoveStack"(arg0: $Player$Type, arg1: integer): $ItemStack
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MatrixEnchantingMenu$Type = ($MatrixEnchantingMenu);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MatrixEnchantingMenu_ = $MatrixEnchantingMenu$Type;
}}
declare module "packages/org/violetmoon/quark/api/$IRotationLockable" {
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export interface $IRotationLockable {

 "applyRotationLock"(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: $Direction$Type, arg4: integer): $BlockState

(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: $Direction$Type, arg4: integer): $BlockState
}

export namespace $IRotationLockable {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IRotationLockable$Type = ($IRotationLockable);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IRotationLockable_ = $IRotationLockable$Type;
}}
declare module "packages/org/violetmoon/quark/content/building/block/$LeafCarpetBlock" {
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$CollisionContext, $CollisionContext$Type} from "packages/net/minecraft/world/phys/shapes/$CollisionContext"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$IZetaBlockColorProvider, $IZetaBlockColorProvider$Type} from "packages/org/violetmoon/zeta/registry/$IZetaBlockColorProvider"
import {$ZetaBlock, $ZetaBlock$Type} from "packages/org/violetmoon/zeta/block/$ZetaBlock"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"

export class $LeafCarpetBlock extends $ZetaBlock implements $IZetaBlockColorProvider {
readonly "baseState": $BlockState
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(arg0: string, arg1: $Block$Type, arg2: $ZetaModule$Type)

public "getBaseState"(): $BlockState
public "getBlockColorProviderName"(): string
public "getItemColorProviderName"(): string
public "updateShape"(arg0: $BlockState$Type, arg1: $Direction$Type, arg2: $BlockState$Type, arg3: $LevelAccessor$Type, arg4: $BlockPos$Type, arg5: $BlockPos$Type): $BlockState
public "canBeReplaced"(arg0: $BlockState$Type, arg1: $BlockPlaceContext$Type): boolean
public "canSurvive"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type): boolean
public "getCollisionShape"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $CollisionContext$Type): $VoxelShape
public "getShape"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $CollisionContext$Type): $VoxelShape
public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
get "baseState"(): $BlockState
get "blockColorProviderName"(): string
get "itemColorProviderName"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LeafCarpetBlock$Type = ($LeafCarpetBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LeafCarpetBlock_ = $LeafCarpetBlock$Type;
}}
declare module "packages/org/violetmoon/quark/addons/oddities/client/screen/$MatrixEnchantingScreen" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Button, $Button$Type} from "packages/net/minecraft/client/gui/components/$Button"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$Slot, $Slot$Type} from "packages/net/minecraft/world/inventory/$Slot"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$AbstractContainerScreen, $AbstractContainerScreen$Type} from "packages/net/minecraft/client/gui/screens/inventory/$AbstractContainerScreen"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$List, $List$Type} from "packages/java/util/$List"
import {$MatrixEnchantingMenu, $MatrixEnchantingMenu$Type} from "packages/org/violetmoon/quark/addons/oddities/inventory/$MatrixEnchantingMenu"
import {$Inventory, $Inventory$Type} from "packages/net/minecraft/world/entity/player/$Inventory"

export class $MatrixEnchantingScreen extends $AbstractContainerScreen<($MatrixEnchantingMenu)> {
static readonly "BACKGROUND": $ResourceLocation
static readonly "INVENTORY_LOCATION": $ResourceLocation
static readonly "SLOT_ITEM_BLIT_OFFSET": integer
 "imageWidth": integer
 "hoveredSlot": $Slot
 "leftPos": integer
 "topPos": integer
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering

constructor(arg0: $MatrixEnchantingMenu$Type, arg1: $Inventory$Type, arg2: $Component$Type)

public "add"(arg0: $Button$Type): void
public "remove"(arg0: integer): void
public "merge"(arg0: integer): void
public "rotate"(arg0: integer): void
public "place"(arg0: integer, arg1: integer, arg2: integer): void
public "m_7856_"(): void
public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
public "mouseReleased"(arg0: double, arg1: double, arg2: integer): boolean
public "mouseClicked"(arg0: double, arg1: double, arg2: integer): boolean
public "mouseDragged"(arg0: double, arg1: double, arg2: integer, arg3: double, arg4: double): boolean
public "mouseMoved"(arg0: double, arg1: double): void
public "m_181908_"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MatrixEnchantingScreen$Type = ($MatrixEnchantingScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MatrixEnchantingScreen_ = $MatrixEnchantingScreen$Type;
}}
declare module "packages/org/violetmoon/quark/content/building/module/$WoodenPostsModule" {
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$ZCommonSetup, $ZCommonSetup$Type} from "packages/org/violetmoon/zeta/event/load/$ZCommonSetup"
import {$ZRegister, $ZRegister$Type} from "packages/org/violetmoon/zeta/event/load/$ZRegister"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $WoodenPostsModule extends $ZetaModule {
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "register"(arg0: $ZRegister$Type): void
public "setup"(arg0: $ZCommonSetup$Type): void
public static "canHangingBlockConnect"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: boolean): boolean
set "up"(value: $ZCommonSetup$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WoodenPostsModule$Type = ($WoodenPostsModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WoodenPostsModule_ = $WoodenPostsModule$Type;
}}
declare module "packages/org/violetmoon/quark/content/tools/module/$BottledCloudModule" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$ZPlayerInteract$RightClickItem, $ZPlayerInteract$RightClickItem$Type} from "packages/org/violetmoon/zeta/event/play/entity/player/$ZPlayerInteract$RightClickItem"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$ZRegister, $ZRegister$Type} from "packages/org/violetmoon/zeta/event/load/$ZRegister"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$CloudBlockEntity, $CloudBlockEntity$Type} from "packages/org/violetmoon/quark/content/tools/block/be/$CloudBlockEntity"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $BottledCloudModule extends $ZetaModule {
static "blockEntityType": $BlockEntityType<($CloudBlockEntity)>
static "cloud": $Block
static "bottled_cloud": $Item
static "cloudLevelBottom": integer
static "cloudLevelTop": integer
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "register"(arg0: $ZRegister$Type): void
public "onRightClick"(arg0: $ZPlayerInteract$RightClickItem$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BottledCloudModule$Type = ($BottledCloudModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BottledCloudModule_ = $BottledCloudModule$Type;
}}
declare module "packages/org/violetmoon/zeta/network/$ZetaMessageSerializer$Writer" {
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$Field, $Field$Type} from "packages/java/lang/reflect/$Field"

export interface $ZetaMessageSerializer$Writer<T> {

 "write"(arg0: $FriendlyByteBuf$Type, arg1: $Field$Type, arg2: T): void

(arg0: $FriendlyByteBuf$Type, arg1: $Field$Type, arg2: T): void
}

export namespace $ZetaMessageSerializer$Writer {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZetaMessageSerializer$Writer$Type<T> = ($ZetaMessageSerializer$Writer<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZetaMessageSerializer$Writer_<T> = $ZetaMessageSerializer$Writer$Type<(T)>;
}}
declare module "packages/org/violetmoon/quark/base/handler/$WoodSetHandler$WoodSet" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$WoodType, $WoodType$Type} from "packages/net/minecraft/world/level/block/state/properties/$WoodType"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $WoodSetHandler$WoodSet {
readonly "name": string
readonly "type": $WoodType
readonly "module": $ZetaModule
 "log": $Block
 "wood": $Block
 "planks": $Block
 "strippedLog": $Block
 "strippedWood": $Block
 "slab": $Block
 "stairs": $Block
 "fence": $Block
 "fenceGate": $Block
 "door": $Block
 "trapdoor": $Block
 "button": $Block
 "pressurePlate": $Block
 "sign": $Block
 "wallSign": $Block
 "ceilingHangingSign": $Block
 "wallHangingSign": $Block
 "bookshelf": $Block
 "ladder": $Block
 "post": $Block
 "strippedPost": $Block
 "verticalPlanks": $Block
 "hollowLog": $Block
 "signItem": $Item
 "boatItem": $Item
 "chestBoatItem": $Item
 "hangingSignItem": $Item

constructor(arg0: string, arg1: $ZetaModule$Type, arg2: $WoodType$Type)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $WoodSetHandler$WoodSet$Type = ($WoodSetHandler$WoodSet);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $WoodSetHandler$WoodSet_ = $WoodSetHandler$WoodSet$Type;
}}
declare module "packages/org/violetmoon/zetaimplforge/client/event/play/$ForgeZInput" {
import {$ZInput, $ZInput$Type} from "packages/org/violetmoon/zeta/client/event/play/$ZInput"

export class $ForgeZInput implements $ZInput {

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ForgeZInput$Type = ($ForgeZInput);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ForgeZInput_ = $ForgeZInput$Type;
}}
declare module "packages/org/violetmoon/quark/content/tweaks/client/emote/$CustomEmoteDescriptor" {
import {$EmoteTemplate, $EmoteTemplate$Type} from "packages/org/violetmoon/quark/content/tweaks/client/emote/$EmoteTemplate"
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$EmoteDescriptor, $EmoteDescriptor$Type} from "packages/org/violetmoon/quark/content/tweaks/client/emote/$EmoteDescriptor"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $CustomEmoteDescriptor extends $EmoteDescriptor {
static readonly "TIER_1": $ResourceLocation
static readonly "TIER_2": $ResourceLocation
static readonly "TIER_3": $ResourceLocation
static readonly "TIER_4": $ResourceLocation
static readonly "TIER_GOD": $ResourceLocation
readonly "clazz": $Class<(any)>
readonly "index": integer
readonly "name": string
readonly "regName": string
readonly "texture": $ResourceLocation
readonly "template": $EmoteTemplate

constructor(arg0: string, arg1: string, arg2: integer)

public "getLocalizedName"(): string
public static "getSprite"(arg0: string): $ResourceLocation
public "getTranslationKey"(): string
get "localizedName"(): string
get "translationKey"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CustomEmoteDescriptor$Type = ($CustomEmoteDescriptor);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CustomEmoteDescriptor_ = $CustomEmoteDescriptor$Type;
}}
declare module "packages/org/violetmoon/quark/content/world/undergroundstyle/$PermafrostStyle" {
import {$UndergroundStyleGenerator$Context, $UndergroundStyleGenerator$Context$Type} from "packages/org/violetmoon/quark/content/world/undergroundstyle/base/$UndergroundStyleGenerator$Context"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BasicUndergroundStyle, $BasicUndergroundStyle$Type} from "packages/org/violetmoon/quark/content/world/undergroundstyle/base/$BasicUndergroundStyle"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $PermafrostStyle extends $BasicUndergroundStyle {
 "floorState": $BlockState
 "ceilingState": $BlockState
 "wallState": $BlockState
readonly "mimicInside": boolean

constructor()

public "setBlock"(arg0: $BlockState$Type): void
public "fillFloor"(arg0: $UndergroundStyleGenerator$Context$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type): void
set "block"(value: $BlockState$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PermafrostStyle$Type = ($PermafrostStyle);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PermafrostStyle_ = $PermafrostStyle$Type;
}}
declare module "packages/org/violetmoon/zeta/recipe/$IZetaIngredientSerializer" {
import {$JsonObject, $JsonObject$Type} from "packages/com/google/gson/$JsonObject"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$Ingredient, $Ingredient$Type} from "packages/net/minecraft/world/item/crafting/$Ingredient"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export interface $IZetaIngredientSerializer<T extends $Ingredient> {

 "write"(arg0: $FriendlyByteBuf$Type, arg1: T): void
 "parse"(arg0: $FriendlyByteBuf$Type): T
 "parse"(arg0: $JsonObject$Type): T
 "getID"(): $ResourceLocation
 "getZeta"(): $Zeta
}

export namespace $IZetaIngredientSerializer {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IZetaIngredientSerializer$Type<T> = ($IZetaIngredientSerializer<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IZetaIngredientSerializer_<T> = $IZetaIngredientSerializer$Type<(T)>;
}}
declare module "packages/org/violetmoon/quark/api/$ITransferManager" {
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$IItemHandler, $IItemHandler$Type} from "packages/net/minecraftforge/items/$IItemHandler"

export interface $ITransferManager {

 "getTransferItemHandler"(arg0: $Supplier$Type<($IItemHandler$Type)>): $IItemHandler
 "acceptsTransfer"(arg0: $Player$Type): boolean

(arg0: $Supplier$Type<($IItemHandler$Type)>): $IItemHandler
}

export namespace $ITransferManager {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ITransferManager$Type = ($ITransferManager);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ITransferManager_ = $ITransferManager$Type;
}}
declare module "packages/org/violetmoon/quark/base/client/config/$QButtonHandler" {
import {$ZScreen$Init$Post, $ZScreen$Init$Post$Type} from "packages/org/violetmoon/zeta/client/event/play/$ZScreen$Init$Post"

export class $QButtonHandler {

constructor()

public static "onGuiInit"(arg0: $ZScreen$Init$Post$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $QButtonHandler$Type = ($QButtonHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $QButtonHandler_ = $QButtonHandler$Type;
}}
declare module "packages/org/violetmoon/zeta/item/$ZetaSmithingTemplateItem" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$RecipeType, $RecipeType$Type} from "packages/net/minecraft/world/item/crafting/$RecipeType"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$List, $List$Type} from "packages/java/util/$List"
import {$IZetaItem, $IZetaItem$Type} from "packages/org/violetmoon/zeta/item/$IZetaItem"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$ChatFormatting, $ChatFormatting$Type} from "packages/net/minecraft/$ChatFormatting"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$CreativeModeTab, $CreativeModeTab$Type} from "packages/net/minecraft/world/item/$CreativeModeTab"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$IZetaItemExtensions, $IZetaItemExtensions$Type} from "packages/org/violetmoon/zeta/item/ext/$IZetaItemExtensions"
import {$EnderMan, $EnderMan$Type} from "packages/net/minecraft/world/entity/monster/$EnderMan"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$UseOnContext, $UseOnContext$Type} from "packages/net/minecraft/world/item/context/$UseOnContext"
import {$Enchantment, $Enchantment$Type} from "packages/net/minecraft/world/item/enchantment/$Enchantment"
import {$SmithingTemplateItem, $SmithingTemplateItem$Type} from "packages/net/minecraft/world/item/$SmithingTemplateItem"
import {$ResourceKey, $ResourceKey$Type} from "packages/net/minecraft/resources/$ResourceKey"
import {$ItemLike, $ItemLike$Type} from "packages/net/minecraft/world/level/$ItemLike"
import {$ItemEntity, $ItemEntity$Type} from "packages/net/minecraft/world/entity/item/$ItemEntity"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $ZetaSmithingTemplateItem extends $SmithingTemplateItem implements $IZetaItem, $IZetaItemExtensions {
static readonly "TITLE_FORMAT": $ChatFormatting
static readonly "DESCRIPTION_FORMAT": $ChatFormatting
static readonly "INGREDIENTS_TITLE": $Component
static readonly "APPLIES_TO_TITLE": $Component
static readonly "NETHERITE_UPGRADE": $Component
static readonly "ARMOR_TRIM_APPLIES_TO": $Component
static readonly "ARMOR_TRIM_INGREDIENTS": $Component
static readonly "ARMOR_TRIM_BASE_SLOT_DESCRIPTION": $Component
static readonly "ARMOR_TRIM_ADDITIONS_SLOT_DESCRIPTION": $Component
static readonly "NETHERITE_UPGRADE_APPLIES_TO": $Component
static readonly "NETHERITE_UPGRADE_INGREDIENTS": $Component
static readonly "NETHERITE_UPGRADE_BASE_SLOT_DESCRIPTION": $Component
static readonly "NETHERITE_UPGRADE_ADDITIONS_SLOT_DESCRIPTION": $Component
static readonly "EMPTY_SLOT_HELMET": $ResourceLocation
static readonly "EMPTY_SLOT_CHESTPLATE": $ResourceLocation
static readonly "EMPTY_SLOT_LEGGINGS": $ResourceLocation
static readonly "EMPTY_SLOT_BOOTS": $ResourceLocation
static readonly "EMPTY_SLOT_HOE": $ResourceLocation
static readonly "EMPTY_SLOT_AXE": $ResourceLocation
static readonly "EMPTY_SLOT_SWORD": $ResourceLocation
static readonly "EMPTY_SLOT_SHOVEL": $ResourceLocation
static readonly "EMPTY_SLOT_PICKAXE": $ResourceLocation
static readonly "EMPTY_SLOT_INGOT": $ResourceLocation
static readonly "EMPTY_SLOT_REDSTONE_DUST": $ResourceLocation
static readonly "EMPTY_SLOT_QUARTZ": $ResourceLocation
static readonly "EMPTY_SLOT_EMERALD": $ResourceLocation
static readonly "EMPTY_SLOT_DIAMOND": $ResourceLocation
static readonly "EMPTY_SLOT_LAPIS_LAZULI": $ResourceLocation
static readonly "EMPTY_SLOT_AMETHYST_SHARD": $ResourceLocation
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: string, arg1: $ZetaModule$Type, arg2: $Component$Type, arg3: $Component$Type, arg4: $Component$Type, arg5: $Component$Type, arg6: $Component$Type, arg7: $List$Type<($ResourceLocation$Type)>, arg8: $List$Type<($ResourceLocation$Type)>)

public "getModule"(): $ZetaModule
public "doesConditionApply"(): boolean
public "getItem"(): $Item
public "setCreativeTab"(arg0: $ResourceKey$Type<($CreativeModeTab$Type)>): $Item
public "setCreativeTab"(arg0: $ResourceKey$Type<($CreativeModeTab$Type)>, arg1: $ItemLike$Type, arg2: boolean): $Item
public "isRepairableZeta"(arg0: $ItemStack$Type): boolean
public "onItemUseFirstZeta"(arg0: $ItemStack$Type, arg1: $UseOnContext$Type): $InteractionResult
public "getBurnTimeZeta"(arg0: $ItemStack$Type, arg1: $RecipeType$Type<(any)>): integer
public "damageItemZeta"<T extends $LivingEntity>(arg0: $ItemStack$Type, arg1: integer, arg2: T, arg3: $Consumer$Type<(T)>): integer
public "isEnderMaskZeta"(arg0: $ItemStack$Type, arg1: $Player$Type, arg2: $EnderMan$Type): boolean
public "canEquipZeta"(arg0: $ItemStack$Type, arg1: $EquipmentSlot$Type, arg2: $Entity$Type): boolean
public "canElytraFlyZeta"(arg0: $ItemStack$Type, arg1: $LivingEntity$Type): boolean
public "canShearZeta"(arg0: $ItemStack$Type): boolean
public "getMaxDamageZeta"(arg0: $ItemStack$Type): integer
public "getEnchantmentLevelZeta"(arg0: $ItemStack$Type, arg1: $Enchantment$Type): integer
public "getAllEnchantmentsZeta"(arg0: $ItemStack$Type): $Map<($Enchantment), (integer)>
public "getEnchantmentValueZeta"(arg0: $ItemStack$Type): integer
public "shouldCauseReequipAnimationZeta"(arg0: $ItemStack$Type, arg1: $ItemStack$Type, arg2: boolean): boolean
public "getArmorTextureZeta"(arg0: $ItemStack$Type, arg1: $Entity$Type, arg2: $EquipmentSlot$Type, arg3: string): string
public "canApplyAtEnchantingTableZeta"(arg0: $ItemStack$Type, arg1: $Enchantment$Type): boolean
public "doesSneakBypassUseZeta"(arg0: $ItemStack$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $Player$Type): boolean
public "getDefaultTooltipHideFlagsZeta"(arg0: $ItemStack$Type): integer
public "onEntityItemUpdateZeta"(arg0: $ItemStack$Type, arg1: $ItemEntity$Type): boolean
public "isBookEnchantableZeta"(arg0: $ItemStack$Type, arg1: $ItemStack$Type): boolean
public "isEnabled"(): boolean
public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
get "module"(): $ZetaModule
get "item"(): $Item
set "creativeTab"(value: $ResourceKey$Type<($CreativeModeTab$Type)>)
get "enabled"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZetaSmithingTemplateItem$Type = ($ZetaSmithingTemplateItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZetaSmithingTemplateItem_ = $ZetaSmithingTemplateItem$Type;
}}
declare module "packages/org/violetmoon/quark/base/network/message/$SortInventoryMessage" {
import {$IZetaMessage, $IZetaMessage$Type} from "packages/org/violetmoon/zeta/network/$IZetaMessage"
import {$IZetaNetworkEventContext, $IZetaNetworkEventContext$Type} from "packages/org/violetmoon/zeta/network/$IZetaNetworkEventContext"

export class $SortInventoryMessage implements $IZetaMessage {
 "forcePlayer": boolean

constructor()
constructor(arg0: boolean)

public "receive"(arg0: $IZetaNetworkEventContext$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SortInventoryMessage$Type = ($SortInventoryMessage);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SortInventoryMessage_ = $SortInventoryMessage$Type;
}}
declare module "packages/org/violetmoon/zeta/event/play/entity/player/$ZPlayer$LoggedOut" {
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$ZPlayer, $ZPlayer$Type} from "packages/org/violetmoon/zeta/event/play/entity/player/$ZPlayer"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export interface $ZPlayer$LoggedOut extends $ZPlayer {

 "getPlayer"(): $Player
 "getEntity"(): $LivingEntity

(): $Player
}

export namespace $ZPlayer$LoggedOut {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZPlayer$LoggedOut$Type = ($ZPlayer$LoggedOut);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZPlayer$LoggedOut_ = $ZPlayer$LoggedOut$Type;
}}
declare module "packages/org/violetmoon/quark/content/tools/module/$BeaconRedirectionModule" {
import {$ZGatherHints, $ZGatherHints$Type} from "packages/org/violetmoon/zeta/event/play/loading/$ZGatherHints"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$ZRegister, $ZRegister$Type} from "packages/org/violetmoon/zeta/event/load/$ZRegister"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$BeaconBlockEntity, $BeaconBlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BeaconBlockEntity"
import {$ManualTrigger, $ManualTrigger$Type} from "packages/org/violetmoon/zeta/advancement/$ManualTrigger"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZConfigChanged, $ZConfigChanged$Type} from "packages/org/violetmoon/zeta/event/load/$ZConfigChanged"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $BeaconRedirectionModule extends $ZetaModule {
static "horizontalMoveLimit": integer
static "allowTintedGlassTransparency": boolean
static "staticEnabled": boolean
static "redirectTrigger": $ManualTrigger
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "register"(arg0: $ZRegister$Type): void
public "addAdditionalHints"(arg0: $ZGatherHints$Type): void
public "configChanged"(arg0: $ZConfigChanged$Type): void
public static "tickBeacon"(arg0: $BeaconBlockEntity$Type, arg1: integer): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BeaconRedirectionModule$Type = ($BeaconRedirectionModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BeaconRedirectionModule_ = $BeaconRedirectionModule$Type;
}}
declare module "packages/org/violetmoon/zetaimplforge/mixin/mixins/$AccessorPotionBrewing" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $AccessorPotionBrewing {

}

export namespace $AccessorPotionBrewing {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AccessorPotionBrewing$Type = ($AccessorPotionBrewing);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AccessorPotionBrewing_ = $AccessorPotionBrewing$Type;
}}
declare module "packages/org/violetmoon/zeta/api/$ICollateralMover$MoveResult" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $ICollateralMover$MoveResult extends $Enum<($ICollateralMover$MoveResult)> {
static readonly "MOVE": $ICollateralMover$MoveResult
static readonly "BREAK": $ICollateralMover$MoveResult
static readonly "SKIP": $ICollateralMover$MoveResult
static readonly "PREVENT": $ICollateralMover$MoveResult


public static "values"(): ($ICollateralMover$MoveResult)[]
public static "valueOf"(arg0: string): $ICollateralMover$MoveResult
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ICollateralMover$MoveResult$Type = (("prevent") | ("move") | ("break") | ("skip")) | ($ICollateralMover$MoveResult);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ICollateralMover$MoveResult_ = $ICollateralMover$MoveResult$Type;
}}
declare module "packages/org/violetmoon/quark/api/$ICustomSorting" {
import {$Comparator, $Comparator$Type} from "packages/java/util/$Comparator"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export interface $ICustomSorting {

 "getItemComparator"(): $Comparator<($ItemStack)>
 "getSortingCategory"(): string
}

export namespace $ICustomSorting {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ICustomSorting$Type = ($ICustomSorting);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ICustomSorting_ = $ICustomSorting$Type;
}}
declare module "packages/org/violetmoon/quark/content/world/module/$GlimmeringWealdModule" {
import {$PlacedFeature, $PlacedFeature$Type} from "packages/net/minecraft/world/level/levelgen/placement/$PlacedFeature"
import {$ZCommonSetup, $ZCommonSetup$Type} from "packages/org/violetmoon/zeta/event/load/$ZCommonSetup"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Holder, $Holder$Type} from "packages/net/minecraft/core/$Holder"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$Biome, $Biome$Type} from "packages/net/minecraft/world/level/biome/$Biome"
import {$GlowShroomsFeature, $GlowShroomsFeature$Type} from "packages/org/violetmoon/quark/content/world/feature/$GlowShroomsFeature"
import {$ZRegister, $ZRegister$Type} from "packages/org/violetmoon/zeta/event/load/$ZRegister"
import {$ResourceKey, $ResourceKey$Type} from "packages/net/minecraft/resources/$ResourceKey"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$GlowExtrasFeature, $GlowExtrasFeature$Type} from "packages/org/violetmoon/quark/content/world/feature/$GlowExtrasFeature"
import {$ZRegister$Post, $ZRegister$Post$Type} from "packages/org/violetmoon/zeta/event/load/$ZRegister$Post"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"

export class $GlimmeringWealdModule extends $ZetaModule {
static readonly "BIOME_NAME": $ResourceLocation
static readonly "BIOME_KEY": $ResourceKey<($Biome)>
static "glow_shrooms_feature": $GlowShroomsFeature
static "glow_shrooms_extra_feature": $GlowExtrasFeature
static "ore_lapis_extra": $Holder<($PlacedFeature)>
static "placed_glow_shrooms": $Holder<($PlacedFeature)>
static "placed_glow_extras": $Holder<($PlacedFeature)>
static "glow_shroom": $Block
static "glow_lichen_growth": $Block
static "glow_shroom_block": $Block
static "glow_shroom_stem": $Block
static "glow_shroom_ring": $Block
static "glowShroomFeedablesTag": $TagKey<($Item)>
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "register"(arg0: $ZRegister$Type): void
public "setup"(arg0: $ZCommonSetup$Type): void
public "postRegister"(arg0: $ZRegister$Post$Type): void
set "up"(value: $ZCommonSetup$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GlimmeringWealdModule$Type = ($GlimmeringWealdModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GlimmeringWealdModule_ = $GlimmeringWealdModule$Type;
}}
declare module "packages/org/violetmoon/quark/api/event/$UsageTickerEvent$Pass" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $UsageTickerEvent$Pass extends $Enum<($UsageTickerEvent$Pass)> {
static readonly "LOGICAL": $UsageTickerEvent$Pass
static readonly "RENDERING": $UsageTickerEvent$Pass


public static "values"(): ($UsageTickerEvent$Pass)[]
public static "valueOf"(arg0: string): $UsageTickerEvent$Pass
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $UsageTickerEvent$Pass$Type = (("rendering") | ("logical")) | ($UsageTickerEvent$Pass);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $UsageTickerEvent$Pass_ = $UsageTickerEvent$Pass$Type;
}}
declare module "packages/org/violetmoon/quark/content/tweaks/module/$ShulkerPackingModule" {
import {$ZRightClickBlock, $ZRightClickBlock$Type} from "packages/org/violetmoon/zeta/event/play/entity/player/$ZRightClickBlock"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $ShulkerPackingModule extends $ZetaModule {
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "callFedEnd"(arg0: $ZRightClickBlock$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ShulkerPackingModule$Type = ($ShulkerPackingModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ShulkerPackingModule_ = $ShulkerPackingModule$Type;
}}
declare module "packages/org/violetmoon/quark/content/tweaks/module/$SlimesToMagmaCubesModule" {
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$Slime, $Slime$Type} from "packages/net/minecraft/world/entity/monster/$Slime"
import {$ZLivingDeath, $ZLivingDeath$Type} from "packages/org/violetmoon/zeta/event/play/entity/living/$ZLivingDeath"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZConfigChanged, $ZConfigChanged$Type} from "packages/org/violetmoon/zeta/event/load/$ZConfigChanged"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $SlimesToMagmaCubesModule extends $ZetaModule {
static "staticEnabled": boolean
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "configChanged"(arg0: $ZConfigChanged$Type): void
public static "getSlimeType"(arg0: $EntityType$Type<(any)>, arg1: $Slime$Type): $EntityType<(any)>
public "onDeath"(arg0: $ZLivingDeath$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SlimesToMagmaCubesModule$Type = ($SlimesToMagmaCubesModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SlimesToMagmaCubesModule_ = $SlimesToMagmaCubesModule$Type;
}}
declare module "packages/org/violetmoon/zeta/module/$ServiceLoaderModuleFinder" {
import {$ModuleFinder, $ModuleFinder$Type} from "packages/org/violetmoon/zeta/module/$ModuleFinder"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"

export class $ServiceLoaderModuleFinder implements $ModuleFinder {

constructor(arg0: $Zeta$Type)

public "and"(arg0: $ModuleFinder$Type): $ModuleFinder
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ServiceLoaderModuleFinder$Type = ($ServiceLoaderModuleFinder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ServiceLoaderModuleFinder_ = $ServiceLoaderModuleFinder$Type;
}}
declare module "packages/org/violetmoon/zeta/config/type/$IBiomeConfig" {
import {$Holder, $Holder$Type} from "packages/net/minecraft/core/$Holder"
import {$Biome, $Biome$Type} from "packages/net/minecraft/world/level/biome/$Biome"

export interface $IBiomeConfig {

 "canSpawn"(arg0: $Holder$Type<($Biome$Type)>): boolean

(arg0: $Holder$Type<($Biome$Type)>): boolean
}

export namespace $IBiomeConfig {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IBiomeConfig$Type = ($IBiomeConfig);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IBiomeConfig_ = $IBiomeConfig$Type;
}}
declare module "packages/org/violetmoon/zeta/block/$ZetaPressurePlateBlock" {
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$BooleanSupplier, $BooleanSupplier$Type} from "packages/java/util/function/$BooleanSupplier"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$PressurePlateBlock, $PressurePlateBlock$Type} from "packages/net/minecraft/world/level/block/$PressurePlateBlock"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$FluidState, $FluidState$Type} from "packages/net/minecraft/world/level/material/$FluidState"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$ToolAction, $ToolAction$Type} from "packages/net/minecraftforge/common/$ToolAction"
import {$IForgeBlock, $IForgeBlock$Type} from "packages/net/minecraftforge/common/extensions/$IForgeBlock"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$CreativeModeTab, $CreativeModeTab$Type} from "packages/net/minecraft/world/item/$CreativeModeTab"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$PressurePlateBlock$Sensitivity, $PressurePlateBlock$Sensitivity$Type} from "packages/net/minecraft/world/level/block/$PressurePlateBlock$Sensitivity"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$IZetaBlock, $IZetaBlock$Type} from "packages/org/violetmoon/zeta/block/$IZetaBlock"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$UseOnContext, $UseOnContext$Type} from "packages/net/minecraft/world/item/context/$UseOnContext"
import {$SoundType, $SoundType$Type} from "packages/net/minecraft/world/level/block/$SoundType"
import {$IPlantable, $IPlantable$Type} from "packages/net/minecraftforge/common/$IPlantable"
import {$IZetaBlockExtensions, $IZetaBlockExtensions$Type} from "packages/org/violetmoon/zeta/block/ext/$IZetaBlockExtensions"
import {$ResourceKey, $ResourceKey$Type} from "packages/net/minecraft/resources/$ResourceKey"
import {$ItemLike, $ItemLike$Type} from "packages/net/minecraft/world/level/$ItemLike"
import {$BlockAndTintGetter, $BlockAndTintGetter$Type} from "packages/net/minecraft/world/level/$BlockAndTintGetter"
import {$BlockSetType, $BlockSetType$Type} from "packages/net/minecraft/world/level/block/state/properties/$BlockSetType"

export class $ZetaPressurePlateBlock extends $PressurePlateBlock implements $IZetaBlock, $IZetaBlockExtensions, $IForgeBlock {
static readonly "POWERED": $BooleanProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(arg0: $PressurePlateBlock$Sensitivity$Type, arg1: string, arg2: $ZetaModule$Type, arg3: $BlockBehaviour$Properties$Type, arg4: $BlockSetType$Type)

public "getModule"(): $ZetaModule
public "canSustainPlant"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type, arg4: $IPlantable$Type): boolean
public "isLadder"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "isConduitFrame"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): boolean
public "doesConditionApply"(): boolean
public "setCondition"(arg0: $BooleanSupplier$Type): $ZetaPressurePlateBlock
public "getEnchantPowerBonus"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type): float
public "shouldDisplayFluidOverlay"(arg0: $BlockState$Type, arg1: $BlockAndTintGetter$Type, arg2: $BlockPos$Type, arg3: $FluidState$Type): boolean
public "getToolModifiedState"(arg0: $BlockState$Type, arg1: $UseOnContext$Type, arg2: $ToolAction$Type, arg3: boolean): $BlockState
public "getBeaconColorMultiplier"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): (float)[]
public "makesOpenTrapdoorAboveClimbable"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockState$Type): boolean
public "getSoundType"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): $SoundType
public "isScaffolding"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "getLightEmission"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type): integer
public "isFlammable"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): boolean
public "canStickTo"(arg0: $BlockState$Type, arg1: $BlockState$Type): boolean
public "getFireSpreadSpeed"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "getFlammability"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "isStickyBlock"(arg0: $BlockState$Type): boolean
public "collisionExtendsVertically"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): boolean
public "getBlock"(): $Block
public "getFireSpreadSpeedZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "getFlammabilityZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "setCreativeTab"(arg0: $ResourceKey$Type<($CreativeModeTab$Type)>): $Block
public "setCreativeTab"(arg0: $ResourceKey$Type<($CreativeModeTab$Type)>, arg1: $ItemLike$Type, arg2: boolean): $Block
public "isConduitFrameZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): boolean
public "isLadderZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "isStickyBlockZeta"(arg0: $BlockState$Type): boolean
public "isScaffoldingZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "canStickToZeta"(arg0: $BlockState$Type, arg1: $BlockState$Type): boolean
public "isFlammableZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): boolean
public "getSoundTypeZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): $SoundType
public "makesOpenTrapdoorAboveClimbableZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockState$Type): boolean
public "canSustainPlantZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type, arg4: string): boolean
public "getToolModifiedStateZeta"(arg0: $BlockState$Type, arg1: $UseOnContext$Type, arg2: string, arg3: boolean): $BlockState
public "collisionExtendsVerticallyZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): boolean
public "shouldDisplayFluidOverlayZeta"(arg0: $BlockState$Type, arg1: $BlockAndTintGetter$Type, arg2: $BlockPos$Type, arg3: $FluidState$Type): boolean
public "getEnchantPowerBonusZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type): float
public "getBeaconColorMultiplierZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): (float)[]
public "getLightEmissionZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type): integer
public "isEnabled"(): boolean
public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
get "module"(): $ZetaModule
set "condition"(value: $BooleanSupplier$Type)
get "block"(): $Block
set "creativeTab"(value: $ResourceKey$Type<($CreativeModeTab$Type)>)
get "enabled"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZetaPressurePlateBlock$Type = ($ZetaPressurePlateBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZetaPressurePlateBlock_ = $ZetaPressurePlateBlock$Type;
}}
declare module "packages/org/violetmoon/zetaimplforge/client/event/play/$ForgeZRenderTooltip" {
import {$ZRenderTooltip, $ZRenderTooltip$Type} from "packages/org/violetmoon/zeta/client/event/play/$ZRenderTooltip"

export class $ForgeZRenderTooltip implements $ZRenderTooltip {

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ForgeZRenderTooltip$Type = ($ForgeZRenderTooltip);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ForgeZRenderTooltip_ = $ForgeZRenderTooltip$Type;
}}
declare module "packages/org/violetmoon/zeta/util/handler/$StructureBlockReplacementHandler$StructureFunction" {
import {$ServerLevelAccessor, $ServerLevelAccessor$Type} from "packages/net/minecraft/world/level/$ServerLevelAccessor"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$StructureBlockReplacementHandler$StructureHolder, $StructureBlockReplacementHandler$StructureHolder$Type} from "packages/org/violetmoon/zeta/util/handler/$StructureBlockReplacementHandler$StructureHolder"

export interface $StructureBlockReplacementHandler$StructureFunction {

 "transformBlockstate"(arg0: $ServerLevelAccessor$Type, arg1: $BlockState$Type, arg2: $StructureBlockReplacementHandler$StructureHolder$Type): $BlockState

(arg0: $ServerLevelAccessor$Type, arg1: $BlockState$Type, arg2: $StructureBlockReplacementHandler$StructureHolder$Type): $BlockState
}

export namespace $StructureBlockReplacementHandler$StructureFunction {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $StructureBlockReplacementHandler$StructureFunction$Type = ($StructureBlockReplacementHandler$StructureFunction);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $StructureBlockReplacementHandler$StructureFunction_ = $StructureBlockReplacementHandler$StructureFunction$Type;
}}
declare module "packages/org/violetmoon/zeta/event/play/entity/player/$ZPlayerDestroyItem" {
import {$IZetaPlayEvent, $IZetaPlayEvent$Type} from "packages/org/violetmoon/zeta/event/bus/$IZetaPlayEvent"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export interface $ZPlayerDestroyItem extends $IZetaPlayEvent {

 "getOriginal"(): $ItemStack
 "getHand"(): $InteractionHand
 "getEntity"(): $Player
}

export namespace $ZPlayerDestroyItem {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZPlayerDestroyItem$Type = ($ZPlayerDestroyItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZPlayerDestroyItem_ = $ZPlayerDestroyItem$Type;
}}
declare module "packages/org/violetmoon/quark/content/tweaks/client/item/$CompassAnglePropertyFunction" {
import {$ClientLevel, $ClientLevel$Type} from "packages/net/minecraft/client/multiplayer/$ClientLevel"
import {$ItemPropertyFunction, $ItemPropertyFunction$Type} from "packages/net/minecraft/client/renderer/item/$ItemPropertyFunction"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $CompassAnglePropertyFunction implements $ItemPropertyFunction {

constructor()

public "call"(arg0: $ItemStack$Type, arg1: $ClientLevel$Type, arg2: $LivingEntity$Type, arg3: integer): float
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CompassAnglePropertyFunction$Type = ($CompassAnglePropertyFunction);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CompassAnglePropertyFunction_ = $CompassAnglePropertyFunction$Type;
}}
declare module "packages/org/violetmoon/quark/content/tools/entity/rang/$Pickarang" {
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$AbstractPickarang, $AbstractPickarang$Type} from "packages/org/violetmoon/quark/content/tools/entity/rang/$AbstractPickarang"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$PickarangType, $PickarangType$Type} from "packages/org/violetmoon/quark/content/tools/config/$PickarangType"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $Pickarang extends $AbstractPickarang<($Pickarang)> {
 "ownerUUID": $UUID
 "cachedOwner": $Entity
 "leftOwner": boolean
 "hasBeenShot": boolean
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(arg0: $EntityType$Type<($Pickarang$Type)>, arg1: $Level$Type)
constructor(arg0: $EntityType$Type<($Pickarang$Type)>, arg1: $Level$Type, arg2: $LivingEntity$Type)

public "getPickarangType"(): $PickarangType<($Pickarang)>
get "pickarangType"(): $PickarangType<($Pickarang)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Pickarang$Type = ($Pickarang);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Pickarang_ = $Pickarang$Type;
}}
declare module "packages/org/violetmoon/quark/addons/oddities/module/$PipesModule" {
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$ZCommonSetup, $ZCommonSetup$Type} from "packages/org/violetmoon/zeta/event/load/$ZCommonSetup"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$ZRegister, $ZRegister$Type} from "packages/org/violetmoon/zeta/event/load/$ZRegister"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$PipeBlockEntity, $PipeBlockEntity$Type} from "packages/org/violetmoon/quark/addons/oddities/block/be/$PipeBlockEntity"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZConfigChanged, $ZConfigChanged$Type} from "packages/org/violetmoon/zeta/event/load/$ZConfigChanged"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $PipesModule extends $ZetaModule {
static "blockEntityType": $BlockEntityType<($PipeBlockEntity)>
static "maxPipeItems": integer
static "doPipesWhoosh": boolean
static "enableEncasedPipes": boolean
static "renderPipeItems": boolean
static "emitVibrations": boolean
static "pipe": $Block
static "encasedPipe": $Block
static "pipesTag": $TagKey<($Block)>
static "effectivePipeSpeed": integer
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "register"(arg0: $ZRegister$Type): void
public "setup"(arg0: $ZCommonSetup$Type): void
public "configChanged"(arg0: $ZConfigChanged$Type): void
set "up"(value: $ZCommonSetup$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PipesModule$Type = ($PipesModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PipesModule_ = $PipesModule$Type;
}}
declare module "packages/org/violetmoon/quark/content/tweaks/recipe/$ElytraDuplicationRecipe" {
import {$RegistryAccess, $RegistryAccess$Type} from "packages/net/minecraft/core/$RegistryAccess"
import {$SimpleCraftingRecipeSerializer, $SimpleCraftingRecipeSerializer$Type} from "packages/net/minecraft/world/item/crafting/$SimpleCraftingRecipeSerializer"
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$RecipeSerializer, $RecipeSerializer$Type} from "packages/net/minecraft/world/item/crafting/$RecipeSerializer"
import {$CustomRecipe, $CustomRecipe$Type} from "packages/net/minecraft/world/item/crafting/$CustomRecipe"
import {$Ingredient, $Ingredient$Type} from "packages/net/minecraft/world/item/crafting/$Ingredient"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$CraftingContainer, $CraftingContainer$Type} from "packages/net/minecraft/world/inventory/$CraftingContainer"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$CraftingBookCategory, $CraftingBookCategory$Type} from "packages/net/minecraft/world/item/crafting/$CraftingBookCategory"

export class $ElytraDuplicationRecipe extends $CustomRecipe {
static readonly "SERIALIZER": $SimpleCraftingRecipeSerializer<(any)>

constructor(arg0: $ResourceLocation$Type, arg1: $CraftingBookCategory$Type)

public "matches"(arg0: $CraftingContainer$Type, arg1: $Level$Type): boolean
public "getRemainingItems"(arg0: $CraftingContainer$Type): $NonNullList<($ItemStack)>
public "getResultItem"(arg0: $RegistryAccess$Type): $ItemStack
public "getIngredients"(): $NonNullList<($Ingredient)>
public "canCraftInDimensions"(arg0: integer, arg1: integer): boolean
public "getSerializer"(): $RecipeSerializer<(any)>
public "assemble"(arg0: $CraftingContainer$Type, arg1: $RegistryAccess$Type): $ItemStack
public "isSpecial"(): boolean
get "ingredients"(): $NonNullList<($Ingredient)>
get "serializer"(): $RecipeSerializer<(any)>
get "special"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ElytraDuplicationRecipe$Type = ($ElytraDuplicationRecipe);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ElytraDuplicationRecipe_ = $ElytraDuplicationRecipe$Type;
}}
declare module "packages/org/violetmoon/zeta/advancement/modifier/$TacticalFishingModifier" {
import {$AdvancementModifier, $AdvancementModifier$Type} from "packages/org/violetmoon/zeta/advancement/$AdvancementModifier"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$IMutableAdvancement, $IMutableAdvancement$Type} from "packages/org/violetmoon/zeta/api/$IMutableAdvancement"
import {$BucketItem, $BucketItem$Type} from "packages/net/minecraft/world/item/$BucketItem"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $TacticalFishingModifier extends $AdvancementModifier {
readonly "module": $ZetaModule

constructor(arg0: $ZetaModule$Type, arg1: $Set$Type<($BucketItem$Type)>)

public "apply"(arg0: $ResourceLocation$Type, arg1: $IMutableAdvancement$Type): boolean
public "getTargets"(): $Set<($ResourceLocation)>
get "targets"(): $Set<($ResourceLocation)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TacticalFishingModifier$Type = ($TacticalFishingModifier);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TacticalFishingModifier_ = $TacticalFishingModifier$Type;
}}
declare module "packages/org/violetmoon/zeta/client/config/definition/$StringClientDefinition" {
import {$AbstractWidget, $AbstractWidget$Type} from "packages/net/minecraft/client/gui/components/$AbstractWidget"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$ChangeSet, $ChangeSet$Type} from "packages/org/violetmoon/zeta/config/$ChangeSet"
import {$ZetaClient, $ZetaClient$Type} from "packages/org/violetmoon/zeta/client/$ZetaClient"
import {$ValueDefinition, $ValueDefinition$Type} from "packages/org/violetmoon/zeta/config/$ValueDefinition"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$ClientDefinitionExt, $ClientDefinitionExt$Type} from "packages/org/violetmoon/zeta/client/config/definition/$ClientDefinitionExt"

export class $StringClientDefinition implements $ClientDefinitionExt<($ValueDefinition<(string)>)> {

constructor()

public "addWidgets"(arg0: $ZetaClient$Type, arg1: $Screen$Type, arg2: $ChangeSet$Type, arg3: $ValueDefinition$Type<(string)>, arg4: $Consumer$Type<($AbstractWidget$Type)>): void
public "getSubtitle"(arg0: $ChangeSet$Type, arg1: $ValueDefinition$Type<(string)>): string
public "truncate"(arg0: string): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $StringClientDefinition$Type = ($StringClientDefinition);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $StringClientDefinition_ = $StringClientDefinition$Type;
}}
declare module "packages/org/violetmoon/quark/mixin/delegates/$ForgeItemDelegate" {
import {$Enchantment, $Enchantment$Type} from "packages/net/minecraft/world/item/enchantment/$Enchantment"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $ForgeItemDelegate {

constructor()

public static "getEnchantmentLevel"(arg0: integer, arg1: $ItemStack$Type, arg2: $Enchantment$Type): integer
public static "getAllEnchantments"(arg0: $Map$Type<($Enchantment$Type), (integer)>, arg1: $ItemStack$Type): $Map<($Enchantment), (integer)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ForgeItemDelegate$Type = ($ForgeItemDelegate);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ForgeItemDelegate_ = $ForgeItemDelegate$Type;
}}
declare module "packages/org/violetmoon/zeta/registry/$IZetaItemColorProvider" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $IZetaItemColorProvider {

 "getItemColorProviderName"(): string

(): string
}

export namespace $IZetaItemColorProvider {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IZetaItemColorProvider$Type = ($IZetaItemColorProvider);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IZetaItemColorProvider_ = $IZetaItemColorProvider$Type;
}}
declare module "packages/org/violetmoon/zetaimplforge/event/play/entity/player/$ForgeZRightClickItem" {
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ZRightClickItem, $ZRightClickItem$Type} from "packages/org/violetmoon/zeta/event/play/entity/player/$ZRightClickItem"
import {$PlayerInteractEvent$RightClickItem, $PlayerInteractEvent$RightClickItem$Type} from "packages/net/minecraftforge/event/entity/player/$PlayerInteractEvent$RightClickItem"

export class $ForgeZRightClickItem implements $ZRightClickItem {

constructor(arg0: $PlayerInteractEvent$RightClickItem$Type)

public "getLevel"(): $Level
public "setCanceled"(arg0: boolean): void
public "isCanceled"(): boolean
public "getHand"(): $InteractionHand
public "getEntity"(): $Player
public "getItemStack"(): $ItemStack
public "setCancellationResult"(arg0: $InteractionResult$Type): void
public "cancel"(): void
get "level"(): $Level
set "canceled"(value: boolean)
get "canceled"(): boolean
get "hand"(): $InteractionHand
get "entity"(): $Player
get "itemStack"(): $ItemStack
set "cancellationResult"(value: $InteractionResult$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ForgeZRightClickItem$Type = ($ForgeZRightClickItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ForgeZRightClickItem_ = $ForgeZRightClickItem$Type;
}}
declare module "packages/org/violetmoon/quark/content/automation/block/$ObsidianPressurePlateBlock" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$ZetaPressurePlateBlock, $ZetaPressurePlateBlock$Type} from "packages/org/violetmoon/zeta/block/$ZetaPressurePlateBlock"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $ObsidianPressurePlateBlock extends $ZetaPressurePlateBlock {
static readonly "POWERED": $BooleanProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(arg0: string, arg1: $ZetaModule$Type, arg2: $BlockBehaviour$Properties$Type)

public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ObsidianPressurePlateBlock$Type = ($ObsidianPressurePlateBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ObsidianPressurePlateBlock_ = $ObsidianPressurePlateBlock$Type;
}}
declare module "packages/org/violetmoon/quark/content/experimental/client/screen/$VariantSelectorScreen" {
import {$KeyMapping, $KeyMapping$Type} from "packages/net/minecraft/client/$KeyMapping"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$List, $List$Type} from "packages/java/util/$List"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $VariantSelectorScreen extends $Screen {
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering

constructor(arg0: $Block$Type, arg1: $KeyMapping$Type, arg2: string, arg3: $List$Type<(string)>)

public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
public "isKeyDown"(arg0: $KeyMapping$Type): boolean
public "isPauseScreen"(): boolean
public "tick"(): void
get "pauseScreen"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $VariantSelectorScreen$Type = ($VariantSelectorScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $VariantSelectorScreen_ = $VariantSelectorScreen$Type;
}}
declare module "packages/org/violetmoon/quark/addons/oddities/item/$TinyPotatoBlockItem" {
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$IRuneColorProvider, $IRuneColorProvider$Type} from "packages/org/violetmoon/quark/api/$IRuneColorProvider"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$RuneColor, $RuneColor$Type} from "packages/org/violetmoon/quark/content/tools/base/$RuneColor"
import {$AdditionalItemPlacement, $AdditionalItemPlacement$Type} from "packages/net/mehvahdjukaar/moonlight/api/item/additional_placements/$AdditionalItemPlacement"
import {$ZetaBlockItem, $ZetaBlockItem$Type} from "packages/org/violetmoon/zeta/item/$ZetaBlockItem"
import {$ItemEntity, $ItemEntity$Type} from "packages/net/minecraft/world/entity/item/$ItemEntity"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $TinyPotatoBlockItem extends $ZetaBlockItem implements $IRuneColorProvider {
static readonly "BLOCK_ENTITY_TAG": string
static readonly "BLOCK_STATE_TAG": string
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $Block$Type, arg1: $Item$Properties$Type)

public "canEquipZeta"(arg0: $ItemStack$Type, arg1: $EquipmentSlot$Type, arg2: $Entity$Type): boolean
public "getRuneColor"(arg0: $ItemStack$Type): $RuneColor
public "getDescriptionId"(arg0: $ItemStack$Type): string
public "inventoryTick"(arg0: $ItemStack$Type, arg1: $Level$Type, arg2: $Entity$Type, arg3: integer, arg4: boolean): void
public "isFoil"(arg0: $ItemStack$Type): boolean
public "onEntityItemUpdateZeta"(arg0: $ItemStack$Type, arg1: $ItemEntity$Type): boolean
public "moonlight$addAdditionalBehavior"(arg0: $AdditionalItemPlacement$Type): void
public "moonlight$getAdditionalBehavior"(): $AdditionalItemPlacement
public "moonlight$getClientAnimationExtension"(): any
public "moonlight$setClientAnimationExtension"(arg0: any): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TinyPotatoBlockItem$Type = ($TinyPotatoBlockItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TinyPotatoBlockItem_ = $TinyPotatoBlockItem$Type;
}}
declare module "packages/org/violetmoon/zeta/block/$SimpleFluidloggedBlock" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$Fluid, $Fluid$Type} from "packages/net/minecraft/world/level/material/$Fluid"
import {$BucketPickup, $BucketPickup$Type} from "packages/net/minecraft/world/level/block/$BucketPickup"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$LiquidBlockContainer, $LiquidBlockContainer$Type} from "packages/net/minecraft/world/level/block/$LiquidBlockContainer"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$FluidState, $FluidState$Type} from "packages/net/minecraft/world/level/material/$FluidState"

export interface $SimpleFluidloggedBlock extends $BucketPickup, $LiquidBlockContainer {

 "getPickupSound"(): $Optional<($SoundEvent)>
 "canPlaceLiquid"(arg0: $BlockGetter$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: $Fluid$Type): boolean
 "placeLiquid"(arg0: $LevelAccessor$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: $FluidState$Type): boolean
 "pickupBlock"(arg0: $LevelAccessor$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type): $ItemStack
 "getPickupSound"(arg0: $BlockState$Type): $Optional<($SoundEvent)>
 "withFluid"(arg0: $BlockState$Type, arg1: $Fluid$Type): $BlockState
 "fluidContained"(arg0: $BlockState$Type): $Fluid
 "acceptsFluid"(arg0: $Fluid$Type): boolean
}

export namespace $SimpleFluidloggedBlock {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SimpleFluidloggedBlock$Type = ($SimpleFluidloggedBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SimpleFluidloggedBlock_ = $SimpleFluidloggedBlock$Type;
}}
declare module "packages/org/violetmoon/quark/content/tools/config/$PickarangType" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$AbstractPickarang, $AbstractPickarang$Type} from "packages/org/violetmoon/quark/content/tools/entity/rang/$AbstractPickarang"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$ConfigFlagManager, $ConfigFlagManager$Type} from "packages/org/violetmoon/zeta/config/$ConfigFlagManager"
import {$IZetaItemExtensions, $IZetaItemExtensions$Type} from "packages/org/violetmoon/zeta/item/ext/$IZetaItemExtensions"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$PickarangType$PickarangConstructor, $PickarangType$PickarangConstructor$Type} from "packages/org/violetmoon/quark/content/tools/config/$PickarangType$PickarangConstructor"
import {$IConfigType, $IConfigType$Type} from "packages/org/violetmoon/zeta/config/type/$IConfigType"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $PickarangType<T extends $AbstractPickarang<(T)>> implements $IConfigType {
readonly "repairMaterial": $Item
readonly "pickaxeEquivalent": $Item
readonly "pickaxeEquivalentExt": $IZetaItemExtensions
 "timeout": integer
 "harvestLevel": integer
 "durability": integer
 "maxHardness": double
 "attackDamage": integer
 "cooldown": integer
 "canActAsHoe": boolean
 "canActAsShovel": boolean
 "canActAsAxe": boolean

constructor(arg0: $Item$Type, arg1: $Item$Type, arg2: integer, arg3: integer, arg4: integer, arg5: double, arg6: integer, arg7: integer)

public "getEntityType"(): $EntityType<(T)>
public "isFireResistant"(): boolean
public "setEntityType"(arg0: $EntityType$Type<(T)>, arg1: $PickarangType$PickarangConstructor$Type<(T)>): void
public "makePickarang"(arg0: $Level$Type, arg1: $Player$Type): $AbstractPickarang<(T)>
public "canActAsShovel"(arg0: boolean): $PickarangType<(T)>
public "canActAsHoe"(arg0: boolean): $PickarangType<(T)>
public "canActAsAxe"(arg0: boolean): $PickarangType<(T)>
public "onReload"(arg0: $ZetaModule$Type, arg1: $ConfigFlagManager$Type): void
get "entityType"(): $EntityType<(T)>
get "fireResistant"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PickarangType$Type<T> = ($PickarangType<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PickarangType_<T> = $PickarangType$Type<(T)>;
}}
declare module "packages/org/violetmoon/quark/content/automation/block/$CrafterBlock" {
import {$EntityBlock, $EntityBlock$Type} from "packages/net/minecraft/world/level/block/$EntityBlock"
import {$CrafterBlock$PowerState, $CrafterBlock$PowerState$Type} from "packages/org/violetmoon/quark/content/automation/block/$CrafterBlock$PowerState"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$ZetaBlock, $ZetaBlock$Type} from "packages/org/violetmoon/zeta/block/$ZetaBlock"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"
import {$DirectionProperty, $DirectionProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$DirectionProperty"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$EnumProperty, $EnumProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$EnumProperty"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$BlockEntityTicker, $BlockEntityTicker$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityTicker"
import {$GameEventListener, $GameEventListener$Type} from "packages/net/minecraft/world/level/gameevent/$GameEventListener"
import {$RenderShape, $RenderShape$Type} from "packages/net/minecraft/world/level/block/$RenderShape"

export class $CrafterBlock extends $ZetaBlock implements $EntityBlock {
static readonly "FACING": $DirectionProperty
static readonly "POWER": $EnumProperty<($CrafterBlock$PowerState)>
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(arg0: string, arg1: $ZetaModule$Type, arg2: $BlockBehaviour$Properties$Type)

public "getTicker"<T extends $BlockEntity>(arg0: $Level$Type, arg1: $BlockState$Type, arg2: $BlockEntityType$Type<(T)>): $BlockEntityTicker<(T)>
public "getStateForPlacement"(arg0: $BlockPlaceContext$Type): $BlockState
public "neighborChanged"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type, arg3: $Block$Type, arg4: $BlockPos$Type, arg5: boolean): void
public "use"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type, arg3: $Player$Type, arg4: $InteractionHand$Type, arg5: $BlockHitResult$Type): $InteractionResult
public "getRenderShape"(arg0: $BlockState$Type): $RenderShape
public "hasAnalogOutputSignal"(arg0: $BlockState$Type): boolean
public "onRemove"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type, arg3: $BlockState$Type, arg4: boolean): void
public "getAnalogOutputSignal"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type): integer
public "tick"(arg0: $BlockState$Type, arg1: $ServerLevel$Type, arg2: $BlockPos$Type, arg3: $RandomSource$Type): void
public "newBlockEntity"(arg0: $BlockPos$Type, arg1: $BlockState$Type): $BlockEntity
public "getListener"<T extends $BlockEntity>(arg0: $ServerLevel$Type, arg1: T): $GameEventListener
public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CrafterBlock$Type = ($CrafterBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CrafterBlock_ = $CrafterBlock$Type;
}}
declare module "packages/org/violetmoon/zeta/block/$ZetaCeilingHangingSignBlock" {
import {$IntegerProperty, $IntegerProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$IntegerProperty"
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$BooleanSupplier, $BooleanSupplier$Type} from "packages/java/util/function/$BooleanSupplier"
import {$WoodType, $WoodType$Type} from "packages/net/minecraft/world/level/block/state/properties/$WoodType"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$FluidState, $FluidState$Type} from "packages/net/minecraft/world/level/material/$FluidState"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$ToolAction, $ToolAction$Type} from "packages/net/minecraftforge/common/$ToolAction"
import {$IForgeBlock, $IForgeBlock$Type} from "packages/net/minecraftforge/common/extensions/$IForgeBlock"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$CreativeModeTab, $CreativeModeTab$Type} from "packages/net/minecraft/world/item/$CreativeModeTab"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$CeilingHangingSignBlock, $CeilingHangingSignBlock$Type} from "packages/net/minecraft/world/level/block/$CeilingHangingSignBlock"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$IZetaBlock, $IZetaBlock$Type} from "packages/org/violetmoon/zeta/block/$IZetaBlock"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$UseOnContext, $UseOnContext$Type} from "packages/net/minecraft/world/item/context/$UseOnContext"
import {$SoundType, $SoundType$Type} from "packages/net/minecraft/world/level/block/$SoundType"
import {$IPlantable, $IPlantable$Type} from "packages/net/minecraftforge/common/$IPlantable"
import {$IZetaBlockExtensions, $IZetaBlockExtensions$Type} from "packages/org/violetmoon/zeta/block/ext/$IZetaBlockExtensions"
import {$ResourceKey, $ResourceKey$Type} from "packages/net/minecraft/resources/$ResourceKey"
import {$ItemLike, $ItemLike$Type} from "packages/net/minecraft/world/level/$ItemLike"
import {$BlockAndTintGetter, $BlockAndTintGetter$Type} from "packages/net/minecraft/world/level/$BlockAndTintGetter"

export class $ZetaCeilingHangingSignBlock extends $CeilingHangingSignBlock implements $IZetaBlock, $IZetaBlockExtensions, $IForgeBlock {
static readonly "ROTATION": $IntegerProperty
static readonly "ATTACHED": $BooleanProperty
static readonly "WATERLOGGED": $BooleanProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(arg0: string, arg1: $ZetaModule$Type, arg2: $WoodType$Type, arg3: $BlockBehaviour$Properties$Type)

public "getModule"(): $ZetaModule
public "canSustainPlant"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type, arg4: $IPlantable$Type): boolean
public "isLadder"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "isConduitFrame"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): boolean
public "doesConditionApply"(): boolean
public "setCondition"(arg0: $BooleanSupplier$Type): $ZetaCeilingHangingSignBlock
public "getEnchantPowerBonus"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type): float
public "shouldDisplayFluidOverlay"(arg0: $BlockState$Type, arg1: $BlockAndTintGetter$Type, arg2: $BlockPos$Type, arg3: $FluidState$Type): boolean
public "getToolModifiedState"(arg0: $BlockState$Type, arg1: $UseOnContext$Type, arg2: $ToolAction$Type, arg3: boolean): $BlockState
public "getBeaconColorMultiplier"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): (float)[]
public "makesOpenTrapdoorAboveClimbable"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockState$Type): boolean
public "getSoundType"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): $SoundType
public "isScaffolding"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "getLightEmission"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type): integer
public "isFlammable"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): boolean
public "canStickTo"(arg0: $BlockState$Type, arg1: $BlockState$Type): boolean
public "getFireSpreadSpeed"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "getFlammability"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "isStickyBlock"(arg0: $BlockState$Type): boolean
public "collisionExtendsVertically"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): boolean
public "getBlock"(): $Block
public "getFireSpreadSpeedZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "getFlammabilityZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "setCreativeTab"(arg0: $ResourceKey$Type<($CreativeModeTab$Type)>): $Block
public "setCreativeTab"(arg0: $ResourceKey$Type<($CreativeModeTab$Type)>, arg1: $ItemLike$Type, arg2: boolean): $Block
public "isConduitFrameZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): boolean
public "isLadderZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "isStickyBlockZeta"(arg0: $BlockState$Type): boolean
public "isScaffoldingZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "canStickToZeta"(arg0: $BlockState$Type, arg1: $BlockState$Type): boolean
public "isFlammableZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): boolean
public "getSoundTypeZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): $SoundType
public "makesOpenTrapdoorAboveClimbableZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockState$Type): boolean
public "canSustainPlantZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type, arg4: string): boolean
public "getToolModifiedStateZeta"(arg0: $BlockState$Type, arg1: $UseOnContext$Type, arg2: string, arg3: boolean): $BlockState
public "collisionExtendsVerticallyZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): boolean
public "shouldDisplayFluidOverlayZeta"(arg0: $BlockState$Type, arg1: $BlockAndTintGetter$Type, arg2: $BlockPos$Type, arg3: $FluidState$Type): boolean
public "getEnchantPowerBonusZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type): float
public "getBeaconColorMultiplierZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): (float)[]
public "getLightEmissionZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type): integer
public "isEnabled"(): boolean
public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
get "module"(): $ZetaModule
set "condition"(value: $BooleanSupplier$Type)
get "block"(): $Block
set "creativeTab"(value: $ResourceKey$Type<($CreativeModeTab$Type)>)
get "enabled"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZetaCeilingHangingSignBlock$Type = ($ZetaCeilingHangingSignBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZetaCeilingHangingSignBlock_ = $ZetaCeilingHangingSignBlock$Type;
}}
declare module "packages/org/violetmoon/quark/content/tools/client/render/$GlintRenderTypes" {
import {$RenderStateShard$OverlayStateShard, $RenderStateShard$OverlayStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$OverlayStateShard"
import {$RenderStateShard$TexturingStateShard, $RenderStateShard$TexturingStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$TexturingStateShard"
import {$RenderStateShard$LineStateShard, $RenderStateShard$LineStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$LineStateShard"
import {$RenderStateShard$TextureStateShard, $RenderStateShard$TextureStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$TextureStateShard"
import {$RenderStateShard$EmptyTextureStateShard, $RenderStateShard$EmptyTextureStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$EmptyTextureStateShard"
import {$RenderStateShard$LightmapStateShard, $RenderStateShard$LightmapStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$LightmapStateShard"
import {$RenderStateShard$LayeringStateShard, $RenderStateShard$LayeringStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$LayeringStateShard"
import {$RenderStateShard$WriteMaskStateShard, $RenderStateShard$WriteMaskStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$WriteMaskStateShard"
import {$Runnable, $Runnable$Type} from "packages/java/lang/$Runnable"
import {$RenderType$CompositeRenderType, $RenderType$CompositeRenderType$Type} from "packages/net/minecraft/client/renderer/$RenderType$CompositeRenderType"
import {$RenderType, $RenderType$Type} from "packages/net/minecraft/client/renderer/$RenderType"
import {$RenderStateShard$OutputStateShard, $RenderStateShard$OutputStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$OutputStateShard"
import {$RenderStateShard$ColorLogicStateShard, $RenderStateShard$ColorLogicStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$ColorLogicStateShard"
import {$RuneColor, $RuneColor$Type} from "packages/org/violetmoon/quark/content/tools/base/$RuneColor"
import {$RenderStateShard$ShaderStateShard, $RenderStateShard$ShaderStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$ShaderStateShard"
import {$RenderStateShard$DepthTestStateShard, $RenderStateShard$DepthTestStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$DepthTestStateShard"
import {$DrawBuffer, $DrawBuffer$Type} from "packages/com/jozufozu/flywheel/backend/instancing/$DrawBuffer"
import {$Object2ObjectLinkedOpenHashMap, $Object2ObjectLinkedOpenHashMap$Type} from "packages/it/unimi/dsi/fastutil/objects/$Object2ObjectLinkedOpenHashMap"
import {$RenderStateShard$TransparencyStateShard, $RenderStateShard$TransparencyStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$TransparencyStateShard"
import {$BufferBuilder, $BufferBuilder$Type} from "packages/com/mojang/blaze3d/vertex/$BufferBuilder"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$RenderStateShard$CullStateShard, $RenderStateShard$CullStateShard$Type} from "packages/net/minecraft/client/renderer/$RenderStateShard$CullStateShard"

export class $GlintRenderTypes extends $RenderType {
static "glint": $Map<($RuneColor), ($RenderType)>
static "glintTranslucent": $Map<($RuneColor), ($RenderType)>
static "entityGlint": $Map<($RuneColor), ($RenderType)>
static "glintDirect": $Map<($RuneColor), ($RenderType)>
static "entityGlintDirect": $Map<($RuneColor), ($RenderType)>
static "armorGlint": $Map<($RuneColor), ($RenderType)>
static "armorEntityGlint": $Map<($RuneColor), ($RenderType)>
static readonly "BIG_BUFFER_SIZE": integer
static readonly "MEDIUM_BUFFER_SIZE": integer
static readonly "SMALL_BUFFER_SIZE": integer
static readonly "TRANSIENT_BUFFER_SIZE": integer
static readonly "LINES": $RenderType$CompositeRenderType
static readonly "LINE_STRIP": $RenderType$CompositeRenderType
 "sortOnUpload": boolean
static readonly "VIEW_SCALE_Z_EPSILON": float
static readonly "MAX_ENCHANTMENT_GLINT_SPEED_MILLIS": double
readonly "name": string
 "setupState": $Runnable
static readonly "NO_TRANSPARENCY": $RenderStateShard$TransparencyStateShard
static readonly "ADDITIVE_TRANSPARENCY": $RenderStateShard$TransparencyStateShard
static readonly "LIGHTNING_TRANSPARENCY": $RenderStateShard$TransparencyStateShard
static readonly "GLINT_TRANSPARENCY": $RenderStateShard$TransparencyStateShard
static readonly "CRUMBLING_TRANSPARENCY": $RenderStateShard$TransparencyStateShard
static readonly "TRANSLUCENT_TRANSPARENCY": $RenderStateShard$TransparencyStateShard
static readonly "NO_SHADER": $RenderStateShard$ShaderStateShard
static readonly "POSITION_COLOR_LIGHTMAP_SHADER": $RenderStateShard$ShaderStateShard
static readonly "POSITION_SHADER": $RenderStateShard$ShaderStateShard
static readonly "POSITION_COLOR_TEX_SHADER": $RenderStateShard$ShaderStateShard
static readonly "POSITION_TEX_SHADER": $RenderStateShard$ShaderStateShard
static readonly "POSITION_COLOR_TEX_LIGHTMAP_SHADER": $RenderStateShard$ShaderStateShard
static readonly "POSITION_COLOR_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_SOLID_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_CUTOUT_MIPPED_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_CUTOUT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_TRANSLUCENT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_TRANSLUCENT_MOVING_BLOCK_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_TRANSLUCENT_NO_CRUMBLING_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ARMOR_CUTOUT_NO_CULL_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_SOLID_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_CUTOUT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_CUTOUT_NO_CULL_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_CUTOUT_NO_CULL_Z_OFFSET_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ITEM_ENTITY_TRANSLUCENT_CULL_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_TRANSLUCENT_CULL_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_TRANSLUCENT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_TRANSLUCENT_EMISSIVE_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_SMOOTH_CUTOUT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_BEACON_BEAM_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_DECAL_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_NO_OUTLINE_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_SHADOW_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_ALPHA_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_EYES_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENERGY_SWIRL_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_LEASH_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_WATER_MASK_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_OUTLINE_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ARMOR_GLINT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ARMOR_ENTITY_GLINT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_GLINT_TRANSLUCENT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_GLINT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_GLINT_DIRECT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_GLINT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_ENTITY_GLINT_DIRECT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_CRUMBLING_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_TEXT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_TEXT_BACKGROUND_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_TEXT_INTENSITY_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_TEXT_SEE_THROUGH_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_TEXT_BACKGROUND_SEE_THROUGH_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_TEXT_INTENSITY_SEE_THROUGH_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_LIGHTNING_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_TRIPWIRE_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_END_PORTAL_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_END_GATEWAY_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_LINES_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_GUI_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_GUI_OVERLAY_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_GUI_TEXT_HIGHLIGHT_SHADER": $RenderStateShard$ShaderStateShard
static readonly "RENDERTYPE_GUI_GHOST_RECIPE_OVERLAY_SHADER": $RenderStateShard$ShaderStateShard
static readonly "BLOCK_SHEET_MIPPED": $RenderStateShard$TextureStateShard
static readonly "BLOCK_SHEET": $RenderStateShard$TextureStateShard
static readonly "NO_TEXTURE": $RenderStateShard$EmptyTextureStateShard
static readonly "DEFAULT_TEXTURING": $RenderStateShard$TexturingStateShard
static readonly "GLINT_TEXTURING": $RenderStateShard$TexturingStateShard
static readonly "ENTITY_GLINT_TEXTURING": $RenderStateShard$TexturingStateShard
static readonly "LIGHTMAP": $RenderStateShard$LightmapStateShard
static readonly "NO_LIGHTMAP": $RenderStateShard$LightmapStateShard
static readonly "OVERLAY": $RenderStateShard$OverlayStateShard
static readonly "NO_OVERLAY": $RenderStateShard$OverlayStateShard
static readonly "CULL": $RenderStateShard$CullStateShard
static readonly "NO_CULL": $RenderStateShard$CullStateShard
static readonly "NO_DEPTH_TEST": $RenderStateShard$DepthTestStateShard
static readonly "EQUAL_DEPTH_TEST": $RenderStateShard$DepthTestStateShard
static readonly "LEQUAL_DEPTH_TEST": $RenderStateShard$DepthTestStateShard
static readonly "GREATER_DEPTH_TEST": $RenderStateShard$DepthTestStateShard
static readonly "COLOR_DEPTH_WRITE": $RenderStateShard$WriteMaskStateShard
static readonly "COLOR_WRITE": $RenderStateShard$WriteMaskStateShard
static readonly "DEPTH_WRITE": $RenderStateShard$WriteMaskStateShard
static readonly "NO_LAYERING": $RenderStateShard$LayeringStateShard
static readonly "POLYGON_OFFSET_LAYERING": $RenderStateShard$LayeringStateShard
static readonly "VIEW_OFFSET_Z_LAYERING": $RenderStateShard$LayeringStateShard
static readonly "MAIN_TARGET": $RenderStateShard$OutputStateShard
static readonly "OUTLINE_TARGET": $RenderStateShard$OutputStateShard
static readonly "TRANSLUCENT_TARGET": $RenderStateShard$OutputStateShard
static readonly "PARTICLES_TARGET": $RenderStateShard$OutputStateShard
static readonly "WEATHER_TARGET": $RenderStateShard$OutputStateShard
static readonly "CLOUDS_TARGET": $RenderStateShard$OutputStateShard
static readonly "ITEM_ENTITY_TARGET": $RenderStateShard$OutputStateShard
static readonly "DEFAULT_LINE": $RenderStateShard$LineStateShard
static readonly "NO_COLOR_LOGIC": $RenderStateShard$ColorLogicStateShard
static readonly "OR_REVERSE_COLOR_LOGIC": $RenderStateShard$ColorLogicStateShard


public static "addGlintTypes"(arg0: $Object2ObjectLinkedOpenHashMap$Type<($RenderType$Type), ($BufferBuilder$Type)>): void
public static "getDrawBuffer"(arg0: $RenderType$Type): $DrawBuffer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $GlintRenderTypes$Type = ($GlintRenderTypes);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $GlintRenderTypes_ = $GlintRenderTypes$Type;
}}
declare module "packages/org/violetmoon/zeta/network/$ZetaModInternalNetwork" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export class $ZetaModInternalNetwork {
static readonly "PROTOCOL_VERSION": integer

constructor()

public static "init"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZetaModInternalNetwork$Type = ($ZetaModInternalNetwork);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZetaModInternalNetwork_ = $ZetaModInternalNetwork$Type;
}}
declare module "packages/org/violetmoon/zeta/event/play/$ZServerTick" {
import {$IZetaPlayEvent, $IZetaPlayEvent$Type} from "packages/org/violetmoon/zeta/event/bus/$IZetaPlayEvent"
import {$MinecraftServer, $MinecraftServer$Type} from "packages/net/minecraft/server/$MinecraftServer"

export interface $ZServerTick extends $IZetaPlayEvent {

 "getServer"(): $MinecraftServer

(): $MinecraftServer
}

export namespace $ZServerTick {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZServerTick$Type = ($ZServerTick);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZServerTick_ = $ZServerTick$Type;
}}
declare module "packages/org/violetmoon/quark/content/mobs/ai/$FavorBlockGoal" {
import {$Goal, $Goal$Type} from "packages/net/minecraft/world/entity/ai/goal/$Goal"
import {$Predicate, $Predicate$Type} from "packages/java/util/function/$Predicate"
import {$PathfinderMob, $PathfinderMob$Type} from "packages/net/minecraft/world/entity/$PathfinderMob"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"

export class $FavorBlockGoal extends $Goal {

constructor(arg0: $PathfinderMob$Type, arg1: double, arg2: $Block$Type)
constructor(arg0: $PathfinderMob$Type, arg1: double, arg2: $TagKey$Type<($Block$Type)>)
constructor(arg0: $PathfinderMob$Type, arg1: double, arg2: $Predicate$Type<($BlockState$Type)>)

public "canUse"(): boolean
public "canContinueToUse"(): boolean
public "start"(): void
public "tick"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FavorBlockGoal$Type = ($FavorBlockGoal);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FavorBlockGoal_ = $FavorBlockGoal$Type;
}}
declare module "packages/org/violetmoon/quark/base/config/$QuarkGeneralConfig$ChestOffsets" {
import {$ConfigFlagManager, $ConfigFlagManager$Type} from "packages/org/violetmoon/zeta/config/$ConfigFlagManager"
import {$IConfigType, $IConfigType$Type} from "packages/org/violetmoon/zeta/config/type/$IConfigType"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $QuarkGeneralConfig$ChestOffsets implements $IConfigType {
 "playerX": integer
 "playerY": integer
 "topX": integer
 "topY": integer
 "middleX": integer
 "middleY": integer

constructor()

public "onReload"(arg0: $ZetaModule$Type, arg1: $ConfigFlagManager$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $QuarkGeneralConfig$ChestOffsets$Type = ($QuarkGeneralConfig$ChestOffsets);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $QuarkGeneralConfig$ChestOffsets_ = $QuarkGeneralConfig$ChestOffsets$Type;
}}
declare module "packages/org/violetmoon/quark/base/config/definition/$RGBClientDefinition" {
import {$AbstractWidget, $AbstractWidget$Type} from "packages/net/minecraft/client/gui/components/$AbstractWidget"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$ChangeSet, $ChangeSet$Type} from "packages/org/violetmoon/zeta/config/$ChangeSet"
import {$ZetaClient, $ZetaClient$Type} from "packages/org/violetmoon/zeta/client/$ZetaClient"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$SectionDefinition, $SectionDefinition$Type} from "packages/org/violetmoon/zeta/config/$SectionDefinition"
import {$ClientDefinitionExt, $ClientDefinitionExt$Type} from "packages/org/violetmoon/zeta/client/config/definition/$ClientDefinitionExt"

export class $RGBClientDefinition implements $ClientDefinitionExt<($SectionDefinition)> {

constructor(arg0: $SectionDefinition$Type)

public "addWidgets"(arg0: $ZetaClient$Type, arg1: $Screen$Type, arg2: $ChangeSet$Type, arg3: $SectionDefinition$Type, arg4: $Consumer$Type<($AbstractWidget$Type)>): void
public "getSubtitle"(arg0: $ChangeSet$Type, arg1: $SectionDefinition$Type): string
public "truncate"(arg0: string): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RGBClientDefinition$Type = ($RGBClientDefinition);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RGBClientDefinition_ = $RGBClientDefinition$Type;
}}
declare module "packages/org/violetmoon/quark/content/building/block/$BambooMatBlock" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$CreativeModeTab, $CreativeModeTab$Type} from "packages/net/minecraft/world/item/$CreativeModeTab"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$ZetaBlock, $ZetaBlock$Type} from "packages/org/violetmoon/zeta/block/$ZetaBlock"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ResourceKey, $ResourceKey$Type} from "packages/net/minecraft/resources/$ResourceKey"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $BambooMatBlock extends $ZetaBlock {
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(arg0: string, arg1: $ZetaModule$Type)
constructor(arg0: string, arg1: $ZetaModule$Type, arg2: $ResourceKey$Type<($CreativeModeTab$Type)>)

public "getStateForPlacement"(arg0: $BlockPlaceContext$Type): $BlockState
public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BambooMatBlock$Type = ($BambooMatBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BambooMatBlock_ = $BambooMatBlock$Type;
}}
declare module "packages/org/violetmoon/quark/addons/oddities/inventory/$EnchantmentMatrix$EnchantmentDataWrapper" {
import {$Weight, $Weight$Type} from "packages/net/minecraft/util/random/$Weight"
import {$Enchantment, $Enchantment$Type} from "packages/net/minecraft/world/item/enchantment/$Enchantment"
import {$List, $List$Type} from "packages/java/util/$List"
import {$EnchantmentMatrix$Piece, $EnchantmentMatrix$Piece$Type} from "packages/org/violetmoon/quark/addons/oddities/inventory/$EnchantmentMatrix$Piece"
import {$EnchantmentInstance, $EnchantmentInstance$Type} from "packages/net/minecraft/world/item/enchantment/$EnchantmentInstance"
import {$WeightedEntry$Wrapper, $WeightedEntry$Wrapper$Type} from "packages/net/minecraft/util/random/$WeightedEntry$Wrapper"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $EnchantmentMatrix$EnchantmentDataWrapper extends $EnchantmentInstance {
readonly "enchantment": $Enchantment
readonly "level": integer

constructor(arg0: $Enchantment$Type, arg1: integer)

public "normalizeRarity"(arg0: $Map$Type<($Enchantment$Type), (integer)>, arg1: $List$Type<($EnchantmentMatrix$Piece$Type)>): void
public "getWeight"(): $Weight
public static "wrap"<T>(arg0: T, arg1: integer): $WeightedEntry$Wrapper<(T)>
get "weight"(): $Weight
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EnchantmentMatrix$EnchantmentDataWrapper$Type = ($EnchantmentMatrix$EnchantmentDataWrapper);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EnchantmentMatrix$EnchantmentDataWrapper_ = $EnchantmentMatrix$EnchantmentDataWrapper$Type;
}}
declare module "packages/org/violetmoon/zeta/client/$ClientTicker" {
import {$ZRenderTick, $ZRenderTick$Type} from "packages/org/violetmoon/zeta/client/event/play/$ZRenderTick"
import {$ZClientTick, $ZClientTick$Type} from "packages/org/violetmoon/zeta/client/event/play/$ZClientTick"

export class $ClientTicker {
 "ticksInGame": integer
 "partialTicks": float
 "delta": float
 "total": float

constructor()

public "onRenderTick"(arg0: $ZRenderTick$Type): void
public "endRenderTick"(): void
public "onEndClientTick"(arg0: $ZClientTick$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientTicker$Type = ($ClientTicker);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientTicker_ = $ClientTicker$Type;
}}
declare module "packages/org/violetmoon/zeta/util/zetalist/$ZetaList" {
import {$IZetaPlayEvent, $IZetaPlayEvent$Type} from "packages/org/violetmoon/zeta/event/bus/$IZetaPlayEvent"
import {$IZetaLoadEvent, $IZetaLoadEvent$Type} from "packages/org/violetmoon/zeta/event/bus/$IZetaLoadEvent"
import {$IZeta, $IZeta$Type} from "packages/org/violetmoon/zeta/util/zetalist/$IZeta"
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$Iterable, $Iterable$Type} from "packages/java/lang/$Iterable"

export class $ZetaList<T extends $IZeta> {
static "INSTANCE": $ZetaList<($Zeta)>


public "register"(arg0: T): void
public "fireEvent"<E extends $IZetaLoadEvent>(arg0: E, arg1: $Class$Type<(E)>): void
public "fireEvent"<E extends $IZetaLoadEvent>(arg0: E): void
public "fireEvent"<E extends $IZetaPlayEvent>(arg0: E, arg1: $Class$Type<(E)>): void
public "fireEvent"<E extends $IZetaPlayEvent>(arg0: E): void
public "getZetas"(): $Iterable<(T)>
get "zetas"(): $Iterable<(T)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZetaList$Type<T> = ($ZetaList<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZetaList_<T> = $ZetaList$Type<(T)>;
}}
declare module "packages/org/violetmoon/zeta/advancement/modifier/$BalancedDietModifier" {
import {$AdvancementModifier, $AdvancementModifier$Type} from "packages/org/violetmoon/zeta/advancement/$AdvancementModifier"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$IMutableAdvancement, $IMutableAdvancement$Type} from "packages/org/violetmoon/zeta/api/$IMutableAdvancement"
import {$ItemLike, $ItemLike$Type} from "packages/net/minecraft/world/level/$ItemLike"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $BalancedDietModifier extends $AdvancementModifier {
readonly "module": $ZetaModule

constructor(arg0: $ZetaModule$Type, arg1: $Set$Type<($ItemLike$Type)>)

public "apply"(arg0: $ResourceLocation$Type, arg1: $IMutableAdvancement$Type): boolean
public "getTargets"(): $Set<($ResourceLocation)>
get "targets"(): $Set<($ResourceLocation)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BalancedDietModifier$Type = ($BalancedDietModifier);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BalancedDietModifier_ = $BalancedDietModifier$Type;
}}
declare module "packages/org/violetmoon/zetaimplforge/event/play/entity/$ForgeZEntityMobGriefing" {
import {$EntityMobGriefingEvent, $EntityMobGriefingEvent$Type} from "packages/net/minecraftforge/event/entity/$EntityMobGriefingEvent"
import {$ZEntityMobGriefing, $ZEntityMobGriefing$Type} from "packages/org/violetmoon/zeta/event/play/entity/$ZEntityMobGriefing"
import {$ZResult, $ZResult$Type} from "packages/org/violetmoon/zeta/event/bus/$ZResult"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $ForgeZEntityMobGriefing implements $ZEntityMobGriefing {

constructor(arg0: $EntityMobGriefingEvent$Type)

public "setResult"(arg0: $ZResult$Type): void
public "getResult"(): $ZResult
public "getEntity"(): $Entity
set "result"(value: $ZResult$Type)
get "result"(): $ZResult
get "entity"(): $Entity
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ForgeZEntityMobGriefing$Type = ($ForgeZEntityMobGriefing);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ForgeZEntityMobGriefing_ = $ForgeZEntityMobGriefing$Type;
}}
declare module "packages/org/violetmoon/quark/addons/oddities/block/pipe/$BasePipeBlock" {
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$EntityBlock, $EntityBlock$Type} from "packages/net/minecraft/world/level/block/$EntityBlock"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$PipeBlockEntity$ConnectionType, $PipeBlockEntity$ConnectionType$Type} from "packages/org/violetmoon/quark/addons/oddities/block/be/$PipeBlockEntity$ConnectionType"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Mirror, $Mirror$Type} from "packages/net/minecraft/world/level/block/$Mirror"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$ZetaBlock, $ZetaBlock$Type} from "packages/org/violetmoon/zeta/block/$ZetaBlock"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$Rotation, $Rotation$Type} from "packages/net/minecraft/world/level/block/$Rotation"
import {$BlockEntityTicker, $BlockEntityTicker$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityTicker"
import {$GameEventListener, $GameEventListener$Type} from "packages/net/minecraft/world/level/gameevent/$GameEventListener"

export class $BasePipeBlock extends $ZetaBlock implements $EntityBlock {
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation


public "getTicker"<T extends $BlockEntity>(arg0: $Level$Type, arg1: $BlockState$Type, arg2: $BlockEntityType$Type<(T)>): $BlockEntityTicker<(T)>
public static "isConnected"(arg0: $BlockState$Type, arg1: $Direction$Type): boolean
public "getStateForPlacement"(arg0: $BlockPlaceContext$Type): $BlockState
public "setPlacedBy"(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: $LivingEntity$Type, arg4: $ItemStack$Type): void
public "neighborChanged"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type, arg3: $Block$Type, arg4: $BlockPos$Type, arg5: boolean): void
public "onPlace"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type, arg3: $BlockState$Type, arg4: boolean): void
public "updateShape"(arg0: $BlockState$Type, arg1: $Direction$Type, arg2: $BlockState$Type, arg3: $LevelAccessor$Type, arg4: $BlockPos$Type, arg5: $BlockPos$Type): $BlockState
public "use"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type, arg3: $Player$Type, arg4: $InteractionHand$Type, arg5: $BlockHitResult$Type): $InteractionResult
public "hasAnalogOutputSignal"(arg0: $BlockState$Type): boolean
public "onRemove"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type, arg3: $BlockState$Type, arg4: boolean): void
public "rotate"(arg0: $BlockState$Type, arg1: $Rotation$Type): $BlockState
public "mirror"(arg0: $BlockState$Type, arg1: $Mirror$Type): $BlockState
public "getAnalogOutputSignal"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type): integer
public "newBlockEntity"(arg0: $BlockPos$Type, arg1: $BlockState$Type): $BlockEntity
public "allowsFullConnection"(arg0: $PipeBlockEntity$ConnectionType$Type): boolean
public "getDefaultPipeState"(): $BlockState
public "refreshVisualConnections"(arg0: $Level$Type, arg1: $BlockPos$Type): void
public "getListener"<T extends $BlockEntity>(arg0: $ServerLevel$Type, arg1: T): $GameEventListener
public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
get "defaultPipeState"(): $BlockState
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BasePipeBlock$Type = ($BasePipeBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BasePipeBlock_ = $BasePipeBlock$Type;
}}
declare module "packages/org/violetmoon/quark/content/client/module/$BackButtonKeybindModule" {
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $BackButtonKeybindModule extends $ZetaModule {
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BackButtonKeybindModule$Type = ($BackButtonKeybindModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BackButtonKeybindModule_ = $BackButtonKeybindModule$Type;
}}
declare module "packages/org/violetmoon/quark/api/$IMagnetTracker" {
import {$Vec3i, $Vec3i$Type} from "packages/net/minecraft/core/$Vec3i"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export interface $IMagnetTracker {

 "getNetForce"(arg0: $BlockPos$Type): $Vec3i
 "actOnForces"(arg0: $BlockPos$Type): void
 "clear"(): void
 "getTrackedPositions"(): $Collection<($BlockPos)>
 "applyForce"(arg0: $BlockPos$Type, arg1: integer, arg2: boolean, arg3: $Direction$Type, arg4: integer, arg5: $BlockPos$Type): void
}

export namespace $IMagnetTracker {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IMagnetTracker$Type = ($IMagnetTracker);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IMagnetTracker_ = $IMagnetTracker$Type;
}}
declare module "packages/org/violetmoon/zetaimplforge/client/event/load/$ForgeZTooltipComponents" {
import {$TooltipComponent, $TooltipComponent$Type} from "packages/net/minecraft/world/inventory/tooltip/$TooltipComponent"
import {$Function, $Function$Type} from "packages/java/util/function/$Function"
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$RegisterClientTooltipComponentFactoriesEvent, $RegisterClientTooltipComponentFactoriesEvent$Type} from "packages/net/minecraftforge/client/event/$RegisterClientTooltipComponentFactoriesEvent"
import {$ClientTooltipComponent, $ClientTooltipComponent$Type} from "packages/net/minecraft/client/gui/screens/inventory/tooltip/$ClientTooltipComponent"
import {$ZTooltipComponents, $ZTooltipComponents$Type} from "packages/org/violetmoon/zeta/client/event/load/$ZTooltipComponents"

export class $ForgeZTooltipComponents extends $Record implements $ZTooltipComponents {

constructor(e: $RegisterClientTooltipComponentFactoriesEvent$Type)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "e"(): $RegisterClientTooltipComponentFactoriesEvent
public "register"<T extends $TooltipComponent>(arg0: $Class$Type<(T)>, arg1: $Function$Type<(any), (any)>): void
public "register"<T extends ($ClientTooltipComponent) & ($TooltipComponent)>(arg0: $Class$Type<(T)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ForgeZTooltipComponents$Type = ($ForgeZTooltipComponents);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ForgeZTooltipComponents_ = $ForgeZTooltipComponents$Type;
}}
declare module "packages/org/violetmoon/quark/integration/lootr/$ILootrIntegration" {
import {$BooleanSupplier, $BooleanSupplier$Type} from "packages/java/util/function/$BooleanSupplier"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export interface $ILootrIntegration {

 "postRegister"(): void
 "makeChestBlocks"(arg0: $ZetaModule$Type, arg1: string, arg2: $Block$Type, arg3: $BooleanSupplier$Type, arg4: $Block$Type, arg5: $Block$Type): void
 "chestTE"(): $BlockEntityType<(any)>
 "trappedChestTE"(): $BlockEntityType<(any)>
 "lootrVariant"(arg0: $Block$Type): $Block
}

export namespace $ILootrIntegration {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ILootrIntegration$Type = ($ILootrIntegration);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ILootrIntegration_ = $ILootrIntegration$Type;
}}
declare module "packages/org/violetmoon/quark/content/building/module/$VariantChestsModule$IVariantChest" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $VariantChestsModule$IVariantChest {

 "getTextureFolder"(): string
 "getTexturePath"(): string

(): string
}

export namespace $VariantChestsModule$IVariantChest {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $VariantChestsModule$IVariantChest$Type = ($VariantChestsModule$IVariantChest);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $VariantChestsModule$IVariantChest_ = $VariantChestsModule$IVariantChest$Type;
}}
declare module "packages/org/violetmoon/quark/content/client/tooltip/$FoodTooltips" {
import {$ZGatherTooltipComponents, $ZGatherTooltipComponents$Type} from "packages/org/violetmoon/zeta/client/event/play/$ZGatherTooltipComponents"

export class $FoodTooltips {

constructor()

public static "makeTooltip"(arg0: $ZGatherTooltipComponents$Type, arg1: boolean, arg2: boolean): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FoodTooltips$Type = ($FoodTooltips);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FoodTooltips_ = $FoodTooltips$Type;
}}
declare module "packages/org/violetmoon/quark/content/tools/item/$RuneItem" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$IRuneColorProvider, $IRuneColorProvider$Type} from "packages/org/violetmoon/quark/api/$IRuneColorProvider"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$RuneColor, $RuneColor$Type} from "packages/org/violetmoon/quark/content/tools/base/$RuneColor"
import {$ZetaSmithingTemplateItem, $ZetaSmithingTemplateItem$Type} from "packages/org/violetmoon/zeta/item/$ZetaSmithingTemplateItem"
import {$ChatFormatting, $ChatFormatting$Type} from "packages/net/minecraft/$ChatFormatting"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $RuneItem extends $ZetaSmithingTemplateItem implements $IRuneColorProvider {
static readonly "TITLE_FORMAT": $ChatFormatting
static readonly "DESCRIPTION_FORMAT": $ChatFormatting
static readonly "INGREDIENTS_TITLE": $Component
static readonly "APPLIES_TO_TITLE": $Component
static readonly "NETHERITE_UPGRADE": $Component
static readonly "ARMOR_TRIM_APPLIES_TO": $Component
static readonly "ARMOR_TRIM_INGREDIENTS": $Component
static readonly "ARMOR_TRIM_BASE_SLOT_DESCRIPTION": $Component
static readonly "ARMOR_TRIM_ADDITIONS_SLOT_DESCRIPTION": $Component
static readonly "NETHERITE_UPGRADE_APPLIES_TO": $Component
static readonly "NETHERITE_UPGRADE_INGREDIENTS": $Component
static readonly "NETHERITE_UPGRADE_BASE_SLOT_DESCRIPTION": $Component
static readonly "NETHERITE_UPGRADE_ADDITIONS_SLOT_DESCRIPTION": $Component
static readonly "EMPTY_SLOT_HELMET": $ResourceLocation
static readonly "EMPTY_SLOT_CHESTPLATE": $ResourceLocation
static readonly "EMPTY_SLOT_LEGGINGS": $ResourceLocation
static readonly "EMPTY_SLOT_BOOTS": $ResourceLocation
static readonly "EMPTY_SLOT_HOE": $ResourceLocation
static readonly "EMPTY_SLOT_AXE": $ResourceLocation
static readonly "EMPTY_SLOT_SWORD": $ResourceLocation
static readonly "EMPTY_SLOT_SHOVEL": $ResourceLocation
static readonly "EMPTY_SLOT_PICKAXE": $ResourceLocation
static readonly "EMPTY_SLOT_INGOT": $ResourceLocation
static readonly "EMPTY_SLOT_REDSTONE_DUST": $ResourceLocation
static readonly "EMPTY_SLOT_QUARTZ": $ResourceLocation
static readonly "EMPTY_SLOT_EMERALD": $ResourceLocation
static readonly "EMPTY_SLOT_DIAMOND": $ResourceLocation
static readonly "EMPTY_SLOT_LAPIS_LAZULI": $ResourceLocation
static readonly "EMPTY_SLOT_AMETHYST_SHARD": $ResourceLocation
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: string, arg1: $ZetaModule$Type)

public "getRuneColor"(arg0: $ItemStack$Type): $RuneColor
public "isFoil"(arg0: $ItemStack$Type): boolean
public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RuneItem$Type = ($RuneItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RuneItem_ = $RuneItem$Type;
}}
declare module "packages/org/violetmoon/quark/content/tweaks/module/$MoreNoteBlockSoundsModule" {
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$ZPlayNoteBlock, $ZPlayNoteBlock$Type} from "packages/org/violetmoon/zeta/event/play/$ZPlayNoteBlock"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $MoreNoteBlockSoundsModule extends $ZetaModule {
static "enableAmethystSound": boolean
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "noteBlockPlayed"(arg0: $ZPlayNoteBlock$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MoreNoteBlockSoundsModule$Type = ($MoreNoteBlockSoundsModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MoreNoteBlockSoundsModule_ = $MoreNoteBlockSoundsModule$Type;
}}
declare module "packages/org/violetmoon/quark/content/world/module/$ChorusVegetationModule" {
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$ZCommonSetup, $ZCommonSetup$Type} from "packages/org/violetmoon/zeta/event/load/$ZCommonSetup"
import {$ZRegister, $ZRegister$Type} from "packages/org/violetmoon/zeta/event/load/$ZRegister"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $ChorusVegetationModule extends $ZetaModule {
static "rarity": integer
static "radius": integer
static "chunkAttempts": integer
static "highlandsChance": double
static "midlandsChance": double
static "otherEndBiomesChance": double
static "passiveTeleportChance": double
static "endermiteSpawnChance": double
static "teleportDuplicationChance": double
static "chorus_weeds": $Block
static "chorus_twist": $Block
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "register"(arg0: $ZRegister$Type): void
public "setup"(arg0: $ZCommonSetup$Type): void
set "up"(value: $ZCommonSetup$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ChorusVegetationModule$Type = ($ChorusVegetationModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ChorusVegetationModule_ = $ChorusVegetationModule$Type;
}}
declare module "packages/org/violetmoon/quark/content/mobs/entity/$Wraith" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$WalkAnimationState, $WalkAnimationState$Type} from "packages/net/minecraft/world/entity/$WalkAnimationState"
import {$Zombie, $Zombie$Type} from "packages/net/minecraft/world/entity/monster/$Zombie"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$MobSpawnType, $MobSpawnType$Type} from "packages/net/minecraft/world/entity/$MobSpawnType"
import {$PathNavigation, $PathNavigation$Type} from "packages/net/minecraft/world/entity/ai/navigation/$PathNavigation"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$EntityDataAccessor, $EntityDataAccessor$Type} from "packages/net/minecraft/network/syncher/$EntityDataAccessor"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$AttributeMap, $AttributeMap$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeMap"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$ServerLevelAccessor, $ServerLevelAccessor$Type} from "packages/net/minecraft/world/level/$ServerLevelAccessor"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$LevelRenderer, $LevelRenderer$Type} from "packages/net/minecraft/client/renderer/$LevelRenderer"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$DifficultyInstance, $DifficultyInstance$Type} from "packages/net/minecraft/world/$DifficultyInstance"
import {$GoalSelector, $GoalSelector$Type} from "packages/net/minecraft/world/entity/ai/goal/$GoalSelector"
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$AttributeSupplier$Builder, $AttributeSupplier$Builder$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeSupplier$Builder"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$SpawnGroupData, $SpawnGroupData$Type} from "packages/net/minecraft/world/entity/$SpawnGroupData"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $Wraith extends $Zombie {
static readonly "LOOT_TABLE": $ResourceLocation
static readonly "ZOMBIE_LEADER_CHANCE": float
static readonly "REINFORCEMENT_ATTEMPTS": integer
static readonly "REINFORCEMENT_RANGE_MAX": integer
static readonly "REINFORCEMENT_RANGE_MIN": integer
 "entityJs$builder": any
static readonly "MAX_WEARING_ARMOR_CHANCE": float
static readonly "MAX_PICKUP_LOOT_CHANCE": float
static readonly "MAX_ENCHANTED_ARMOR_CHANCE": float
static readonly "MAX_ENCHANTED_WEAPON_CHANCE": float
static readonly "LEASH_TAG": string
static readonly "DEFAULT_EQUIPMENT_DROP_CHANCE": float
static readonly "PRESERVE_ITEM_DROP_CHANCE": integer
static readonly "UPDATE_GOAL_SELECTOR_EVERY_N_TICKS": integer
 "ambientSoundTime": integer
 "navigation": $PathNavigation
readonly "goalSelector": $GoalSelector
readonly "targetSelector": $GoalSelector
 "leashInfoTag": $CompoundTag
static readonly "HAND_SLOTS": integer
static readonly "ARMOR_SLOTS": integer
static readonly "EQUIPMENT_SLOT_OFFSET": integer
static readonly "ARMOR_SLOT_OFFSET": integer
static readonly "SWING_DURATION": integer
static readonly "PLAYER_HURT_EXPERIENCE_TIME": integer
static readonly "MIN_MOVEMENT_DISTANCE": double
static readonly "DEFAULT_BASE_GRAVITY": double
static readonly "DEATH_DURATION": integer
static readonly "USE_ITEM_INTERVAL": integer
static readonly "EXTRA_RENDER_CULLING_SIZE_WITH_BIG_HAT": float
 "attributes": $AttributeMap
readonly "activeEffects": $Map<($MobEffect), ($MobEffectInstance)>
 "swinging": boolean
 "swingingArm": $InteractionHand
 "swingTime": integer
 "removeArrowTime": integer
 "removeStingerTime": integer
 "hurtTime": integer
 "hurtDuration": integer
 "deathTime": integer
 "oAttackAnim": float
 "attackAnim": float
 "attackStrengthTicker": integer
readonly "walkAnimation": $WalkAnimationState
readonly "invulnerableDuration": integer
readonly "timeOffs": float
readonly "rotA": float
 "yBodyRot": float
 "yBodyRotO": float
 "yHeadRot": float
 "yHeadRotO": float
 "dead": boolean
 "jumping": boolean
 "xxa": float
 "yya": float
 "zza": float
 "effectsDirty": boolean
 "noJumpDelay": integer
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(arg0: $EntityType$Type<(any)>, arg1: $Level$Type)

public "isBaby"(): boolean
public static "registerAttributes"(): $AttributeSupplier$Builder
public "tick"(): void
public "readAdditionalSaveData"(arg0: $CompoundTag$Type): void
public "addAdditionalSaveData"(arg0: $CompoundTag$Type): void
public "attack"(arg0: $DamageSource$Type, arg1: float): boolean
public "causeFallDamage"(arg0: float, arg1: float, arg2: $DamageSource$Type): boolean
public "getVoicePitch"(): float
public "doHurtTarget"(arg0: $Entity$Type): boolean
public "getWalkTargetValue"(arg0: $BlockPos$Type, arg1: $LevelReader$Type): float
public "finalizeSpawn"(arg0: $ServerLevelAccessor$Type, arg1: $DifficultyInstance$Type, arg2: $MobSpawnType$Type, arg3: $SpawnGroupData$Type, arg4: $CompoundTag$Type): $SpawnGroupData
public "setBaby"(arg0: boolean): void
public "getSound"(arg0: $EntityDataAccessor$Type<(string)>): $SoundEvent
public "setTarget"(arg0: $LivingEntity$Type): void
public "lithiumOnEquipmentChanged"(): void
public "tdv$getDynamicLightX"(): double
public "tdv$getDynamicLightZ"(): double
public "tdv$getDynamicLightWorld"(): $Level
public "tdv$shouldUpdateDynamicLight"(): boolean
public "tdv$resetDynamicLight"(): void
public "tdv$getDynamicLightY"(): double
public "tdv$lambdynlights$scheduleTrackedChunksRebuild"(arg0: $LevelRenderer$Type): void
public "tdv$lambdynlights$updateDynamicLight"(arg0: $LevelRenderer$Type): boolean
public "getCachedFeetBlockState"(): $BlockState
get "baby"(): boolean
get "voicePitch"(): float
set "baby"(value: boolean)
set "target"(value: $LivingEntity$Type)
get "cachedFeetBlockState"(): $BlockState
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Wraith$Type = ($Wraith);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Wraith_ = $Wraith$Type;
}}
declare module "packages/org/violetmoon/quark/content/building/module/$FramedGlassModule" {
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$ZRegister, $ZRegister$Type} from "packages/org/violetmoon/zeta/event/load/$ZRegister"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $FramedGlassModule extends $ZetaModule {
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "register"(arg0: $ZRegister$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FramedGlassModule$Type = ($FramedGlassModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FramedGlassModule_ = $FramedGlassModule$Type;
}}
declare module "packages/org/violetmoon/quark/mixin/mixins/accessor/$AccessorTemptingSensor" {
import {$Ingredient, $Ingredient$Type} from "packages/net/minecraft/world/item/crafting/$Ingredient"

export interface $AccessorTemptingSensor {

 "quark$getTemptations"(): $Ingredient

(): $Ingredient
}

export namespace $AccessorTemptingSensor {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AccessorTemptingSensor$Type = ($AccessorTemptingSensor);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AccessorTemptingSensor_ = $AccessorTemptingSensor$Type;
}}
declare module "packages/org/violetmoon/zeta/block/be/$ZetaBlockEntity" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Connection, $Connection$Type} from "packages/net/minecraft/network/$Connection"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$ClientboundBlockEntityDataPacket, $ClientboundBlockEntityDataPacket$Type} from "packages/net/minecraft/network/protocol/game/$ClientboundBlockEntityDataPacket"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $ZetaBlockEntity extends $BlockEntity {
 "blockState": $BlockState

constructor(arg0: $BlockEntityType$Type<(any)>, arg1: $BlockPos$Type, arg2: $BlockState$Type)

public "sync"(): void
public "writeSharedNBT"(arg0: $CompoundTag$Type): void
public "readSharedNBT"(arg0: $CompoundTag$Type): void
public "load"(arg0: $CompoundTag$Type): void
public "getUpdateTag"(): $CompoundTag
public "onDataPacket"(arg0: $Connection$Type, arg1: $ClientboundBlockEntityDataPacket$Type): void
get "updateTag"(): $CompoundTag
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZetaBlockEntity$Type = ($ZetaBlockEntity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZetaBlockEntity_ = $ZetaBlockEntity$Type;
}}
declare module "packages/org/violetmoon/zeta/client/event/load/$ZRegisterLayerDefinitions" {
import {$IZetaLoadEvent, $IZetaLoadEvent$Type} from "packages/org/violetmoon/zeta/event/bus/$IZetaLoadEvent"
import {$ModelLayerLocation, $ModelLayerLocation$Type} from "packages/net/minecraft/client/model/geom/$ModelLayerLocation"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$LayerDefinition, $LayerDefinition$Type} from "packages/net/minecraft/client/model/geom/builders/$LayerDefinition"

export interface $ZRegisterLayerDefinitions extends $IZetaLoadEvent {

 "registerLayerDefinition"(arg0: $ModelLayerLocation$Type, arg1: $Supplier$Type<($LayerDefinition$Type)>): void

(arg0: $ModelLayerLocation$Type, arg1: $Supplier$Type<($LayerDefinition$Type)>): void
}

export namespace $ZRegisterLayerDefinitions {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZRegisterLayerDefinitions$Type = ($ZRegisterLayerDefinitions);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZRegisterLayerDefinitions_ = $ZRegisterLayerDefinitions$Type;
}}
declare module "packages/org/violetmoon/zetaimplforge/event/play/entity/living/$ForgeZMobSpawnEvent" {
import {$MobSpawnEvent, $MobSpawnEvent$Type} from "packages/net/minecraftforge/event/entity/living/$MobSpawnEvent"
import {$Mob, $Mob$Type} from "packages/net/minecraft/world/entity/$Mob"
import {$ZMobSpawnEvent, $ZMobSpawnEvent$Type} from "packages/org/violetmoon/zeta/event/play/entity/living/$ZMobSpawnEvent"
import {$ZResult, $ZResult$Type} from "packages/org/violetmoon/zeta/event/bus/$ZResult"
import {$ServerLevelAccessor, $ServerLevelAccessor$Type} from "packages/net/minecraft/world/level/$ServerLevelAccessor"

export class $ForgeZMobSpawnEvent implements $ZMobSpawnEvent {

constructor(arg0: $MobSpawnEvent$Type)

public "setResult"(arg0: $ZResult$Type): void
public "getLevel"(): $ServerLevelAccessor
public "getResult"(): $ZResult
public "getY"(): double
public "getZ"(): double
public "getX"(): double
public "getEntity"(): $Mob
set "result"(value: $ZResult$Type)
get "level"(): $ServerLevelAccessor
get "result"(): $ZResult
get "y"(): double
get "z"(): double
get "x"(): double
get "entity"(): $Mob
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ForgeZMobSpawnEvent$Type = ($ForgeZMobSpawnEvent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ForgeZMobSpawnEvent_ = $ForgeZMobSpawnEvent$Type;
}}
declare module "packages/org/violetmoon/zeta/world/$EntitySpawnHandler" {
import {$EntitySpawnConfig, $EntitySpawnConfig$Type} from "packages/org/violetmoon/zeta/config/type/$EntitySpawnConfig"
import {$SpawnPlacements$Type, $SpawnPlacements$Type$Type} from "packages/net/minecraft/world/entity/$SpawnPlacements$Type"
import {$BooleanSupplier, $BooleanSupplier$Type} from "packages/java/util/function/$BooleanSupplier"
import {$Heightmap$Types, $Heightmap$Types$Type} from "packages/net/minecraft/world/level/levelgen/$Heightmap$Types"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Mob, $Mob$Type} from "packages/net/minecraft/world/entity/$Mob"
import {$EntitySpawnHandler$TrackedSpawnConfig, $EntitySpawnHandler$TrackedSpawnConfig$Type} from "packages/org/violetmoon/zeta/world/$EntitySpawnHandler$TrackedSpawnConfig"
import {$List, $List$Type} from "packages/java/util/$List"
import {$SpawnPlacements$SpawnPredicate, $SpawnPlacements$SpawnPredicate$Type} from "packages/net/minecraft/world/entity/$SpawnPlacements$SpawnPredicate"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$MobCategory, $MobCategory$Type} from "packages/net/minecraft/world/entity/$MobCategory"
import {$ZConfigChanged, $ZConfigChanged$Type} from "packages/org/violetmoon/zeta/event/load/$ZConfigChanged"

export class $EntitySpawnHandler {
 "trackedSpawnConfigs": $List<($EntitySpawnHandler$TrackedSpawnConfig)>

constructor(arg0: $Zeta$Type)

public "refresh"(arg0: $ZConfigChanged$Type): void
public "addEgg"(arg0: $ZetaModule$Type, arg1: $EntityType$Type<(any)>, arg2: integer, arg3: integer, arg4: $EntitySpawnConfig$Type): void
public "addEgg"(arg0: $EntityType$Type<(any)>, arg1: integer, arg2: integer, arg3: $ZetaModule$Type, arg4: $BooleanSupplier$Type): void
public "registerSpawn"<T extends $Mob>(arg0: $EntityType$Type<(T)>, arg1: $MobCategory$Type, arg2: $SpawnPlacements$Type$Type, arg3: $Heightmap$Types$Type, arg4: $SpawnPlacements$SpawnPredicate$Type<(T)>, arg5: $EntitySpawnConfig$Type): void
public "track"<T extends $Mob>(arg0: $EntityType$Type<(T)>, arg1: $MobCategory$Type, arg2: $EntitySpawnConfig$Type, arg3: boolean): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EntitySpawnHandler$Type = ($EntitySpawnHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EntitySpawnHandler_ = $EntitySpawnHandler$Type;
}}
declare module "packages/org/violetmoon/quark/content/building/block/$VariantTrappedChestBlock" {
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$ChestType, $ChestType$Type} from "packages/net/minecraft/world/level/block/state/properties/$ChestType"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$FluidState, $FluidState$Type} from "packages/net/minecraft/world/level/material/$FluidState"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$ToolAction, $ToolAction$Type} from "packages/net/minecraftforge/common/$ToolAction"
import {$IForgeBlock, $IForgeBlock$Type} from "packages/net/minecraftforge/common/extensions/$IForgeBlock"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$DirectionProperty, $DirectionProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$DirectionProperty"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$CreativeModeTab, $CreativeModeTab$Type} from "packages/net/minecraft/world/item/$CreativeModeTab"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$ChestBlock, $ChestBlock$Type} from "packages/net/minecraft/world/level/block/$ChestBlock"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$IZetaBlock, $IZetaBlock$Type} from "packages/org/violetmoon/zeta/block/$IZetaBlock"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$UseOnContext, $UseOnContext$Type} from "packages/net/minecraft/world/item/context/$UseOnContext"
import {$EnumProperty, $EnumProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$EnumProperty"
import {$SoundType, $SoundType$Type} from "packages/net/minecraft/world/level/block/$SoundType"
import {$IPlantable, $IPlantable$Type} from "packages/net/minecraftforge/common/$IPlantable"
import {$IZetaBlockExtensions, $IZetaBlockExtensions$Type} from "packages/org/violetmoon/zeta/block/ext/$IZetaBlockExtensions"
import {$VariantChestsModule$IVariantChest, $VariantChestsModule$IVariantChest$Type} from "packages/org/violetmoon/quark/content/building/module/$VariantChestsModule$IVariantChest"
import {$ResourceKey, $ResourceKey$Type} from "packages/net/minecraft/resources/$ResourceKey"
import {$ItemLike, $ItemLike$Type} from "packages/net/minecraft/world/level/$ItemLike"
import {$BlockAndTintGetter, $BlockAndTintGetter$Type} from "packages/net/minecraft/world/level/$BlockAndTintGetter"

export class $VariantTrappedChestBlock extends $ChestBlock implements $IZetaBlock, $VariantChestsModule$IVariantChest, $IZetaBlockExtensions, $IForgeBlock {
static readonly "FACING": $DirectionProperty
static readonly "TYPE": $EnumProperty<($ChestType)>
static readonly "WATERLOGGED": $BooleanProperty
static readonly "EVENT_SET_OPEN_COUNT": integer
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(arg0: string, arg1: string, arg2: $ZetaModule$Type, arg3: $Supplier$Type<($BlockEntityType$Type<(any)>)>, arg4: $BlockBehaviour$Properties$Type)
constructor(arg0: string, arg1: $ZetaModule$Type, arg2: $Supplier$Type<($BlockEntityType$Type<(any)>)>, arg3: $BlockBehaviour$Properties$Type)

public "getModule"(): $ZetaModule
public "isFlammableZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): boolean
public "canSustainPlant"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type, arg4: $IPlantable$Type): boolean
public "isLadder"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "isConduitFrame"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): boolean
public "doesConditionApply"(): boolean
public "getEnchantPowerBonus"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type): float
public "shouldDisplayFluidOverlay"(arg0: $BlockState$Type, arg1: $BlockAndTintGetter$Type, arg2: $BlockPos$Type, arg3: $FluidState$Type): boolean
public "getToolModifiedState"(arg0: $BlockState$Type, arg1: $UseOnContext$Type, arg2: $ToolAction$Type, arg3: boolean): $BlockState
public "getBeaconColorMultiplier"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): (float)[]
public "makesOpenTrapdoorAboveClimbable"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockState$Type): boolean
public "getSoundType"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): $SoundType
public "isScaffolding"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "getLightEmission"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type): integer
public "getFlammabilityZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "isFlammable"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): boolean
public "canStickTo"(arg0: $BlockState$Type, arg1: $BlockState$Type): boolean
public "getFireSpreadSpeed"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "getFlammability"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "isStickyBlock"(arg0: $BlockState$Type): boolean
public "isSignalSource"(arg0: $BlockState$Type): boolean
public "getSignal"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "getDirectSignal"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "newBlockEntity"(arg0: $BlockPos$Type, arg1: $BlockState$Type): $BlockEntity
public "collisionExtendsVertically"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): boolean
public "getTexturePath"(): string
public "getBlock"(): $Block
public "getFireSpreadSpeedZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "setCreativeTab"(arg0: $ResourceKey$Type<($CreativeModeTab$Type)>): $Block
public "setCreativeTab"(arg0: $ResourceKey$Type<($CreativeModeTab$Type)>, arg1: $ItemLike$Type, arg2: boolean): $Block
public "getTextureFolder"(): string
public "isConduitFrameZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): boolean
public "isLadderZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "isStickyBlockZeta"(arg0: $BlockState$Type): boolean
public "isScaffoldingZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "canStickToZeta"(arg0: $BlockState$Type, arg1: $BlockState$Type): boolean
public "getSoundTypeZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): $SoundType
public "makesOpenTrapdoorAboveClimbableZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockState$Type): boolean
public "canSustainPlantZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type, arg4: string): boolean
public "getToolModifiedStateZeta"(arg0: $BlockState$Type, arg1: $UseOnContext$Type, arg2: string, arg3: boolean): $BlockState
public "collisionExtendsVerticallyZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): boolean
public "shouldDisplayFluidOverlayZeta"(arg0: $BlockState$Type, arg1: $BlockAndTintGetter$Type, arg2: $BlockPos$Type, arg3: $FluidState$Type): boolean
public "getEnchantPowerBonusZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type): float
public "getBeaconColorMultiplierZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): (float)[]
public "getLightEmissionZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type): integer
public "isEnabled"(): boolean
public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
get "module"(): $ZetaModule
get "texturePath"(): string
get "block"(): $Block
set "creativeTab"(value: $ResourceKey$Type<($CreativeModeTab$Type)>)
get "textureFolder"(): string
get "enabled"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $VariantTrappedChestBlock$Type = ($VariantTrappedChestBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $VariantTrappedChestBlock_ = $VariantTrappedChestBlock$Type;
}}
declare module "packages/org/violetmoon/quark/content/building/recipe/$MixedExclusionRecipe$Serializer" {
import {$MixedExclusionRecipe, $MixedExclusionRecipe$Type} from "packages/org/violetmoon/quark/content/building/recipe/$MixedExclusionRecipe"
import {$JsonObject, $JsonObject$Type} from "packages/com/google/gson/$JsonObject"
import {$RecipeSerializer, $RecipeSerializer$Type} from "packages/net/minecraft/world/item/crafting/$RecipeSerializer"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$ICondition$IContext, $ICondition$IContext$Type} from "packages/net/minecraftforge/common/crafting/conditions/$ICondition$IContext"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Recipe, $Recipe$Type} from "packages/net/minecraft/world/item/crafting/$Recipe"

export class $MixedExclusionRecipe$Serializer implements $RecipeSerializer<($MixedExclusionRecipe)> {


public "fromJson"(arg0: $ResourceLocation$Type, arg1: $JsonObject$Type): $MixedExclusionRecipe
public "fromNetwork"(arg0: $ResourceLocation$Type, arg1: $FriendlyByteBuf$Type): $MixedExclusionRecipe
public "toNetwork"(arg0: $FriendlyByteBuf$Type, arg1: $MixedExclusionRecipe$Type): void
public static "register"<S extends $RecipeSerializer<(T)>, T extends $Recipe<(any)>>(arg0: string, arg1: S): S
public "fromJson"(arg0: $ResourceLocation$Type, arg1: $JsonObject$Type, arg2: $ICondition$IContext$Type): $MixedExclusionRecipe
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MixedExclusionRecipe$Serializer$Type = ($MixedExclusionRecipe$Serializer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MixedExclusionRecipe$Serializer_ = $MixedExclusionRecipe$Serializer$Type;
}}
declare module "packages/org/violetmoon/quark/content/automation/module/$DispensersPlaceBlocksModule" {
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$ZCommonSetup, $ZCommonSetup$Type} from "packages/org/violetmoon/zeta/event/load/$ZCommonSetup"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $DispensersPlaceBlocksModule extends $ZetaModule {
static "blacklist": $List<(string)>
static "wrapExistingBehaviors": boolean
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "setup"(arg0: $ZCommonSetup$Type): void
set "up"(value: $ZCommonSetup$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DispensersPlaceBlocksModule$Type = ($DispensersPlaceBlocksModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DispensersPlaceBlocksModule_ = $DispensersPlaceBlocksModule$Type;
}}
declare module "packages/org/violetmoon/zeta/item/$ZetaDoubleHighBlockItem" {
import {$BooleanSupplier, $BooleanSupplier$Type} from "packages/java/util/function/$BooleanSupplier"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$CreativeModeTab, $CreativeModeTab$Type} from "packages/net/minecraft/world/item/$CreativeModeTab"
import {$Item$Properties, $Item$Properties$Type} from "packages/net/minecraft/world/item/$Item$Properties"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$IZetaBlock, $IZetaBlock$Type} from "packages/org/violetmoon/zeta/block/$IZetaBlock"
import {$DoubleHighBlockItem, $DoubleHighBlockItem$Type} from "packages/net/minecraft/world/item/$DoubleHighBlockItem"
import {$AdditionalItemPlacement, $AdditionalItemPlacement$Type} from "packages/net/mehvahdjukaar/moonlight/api/item/additional_placements/$AdditionalItemPlacement"
import {$IZetaItem, $IZetaItem$Type} from "packages/org/violetmoon/zeta/item/$IZetaItem"
import {$ResourceKey, $ResourceKey$Type} from "packages/net/minecraft/resources/$ResourceKey"
import {$ItemLike, $ItemLike$Type} from "packages/net/minecraft/world/level/$ItemLike"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $ZetaDoubleHighBlockItem extends $DoubleHighBlockItem implements $IZetaItem {
static readonly "BLOCK_ENTITY_TAG": string
static readonly "BLOCK_STATE_TAG": string
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $IZetaBlock$Type, arg1: $Item$Properties$Type)

public "getModule"(): $ZetaModule
public "doesConditionApply"(): boolean
public "setCondition"(arg0: $BooleanSupplier$Type): $ZetaDoubleHighBlockItem
public "getItem"(): $Item
public "setCreativeTab"(arg0: $ResourceKey$Type<($CreativeModeTab$Type)>): $Item
public "setCreativeTab"(arg0: $ResourceKey$Type<($CreativeModeTab$Type)>, arg1: $ItemLike$Type, arg2: boolean): $Item
public "isEnabled"(): boolean
public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
public "moonlight$addAdditionalBehavior"(arg0: $AdditionalItemPlacement$Type): void
public "moonlight$getAdditionalBehavior"(): $AdditionalItemPlacement
public "moonlight$getClientAnimationExtension"(): any
public "moonlight$setClientAnimationExtension"(arg0: any): void
get "module"(): $ZetaModule
set "condition"(value: $BooleanSupplier$Type)
get "item"(): $Item
set "creativeTab"(value: $ResourceKey$Type<($CreativeModeTab$Type)>)
get "enabled"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZetaDoubleHighBlockItem$Type = ($ZetaDoubleHighBlockItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZetaDoubleHighBlockItem_ = $ZetaDoubleHighBlockItem$Type;
}}
declare module "packages/org/violetmoon/zeta/util/$ZetaSide" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $ZetaSide extends $Enum<($ZetaSide)> {
static readonly "CLIENT": $ZetaSide
static readonly "SERVER": $ZetaSide


public static "values"(): ($ZetaSide)[]
public static "valueOf"(arg0: string): $ZetaSide
public static "fromClient"(arg0: boolean): $ZetaSide
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZetaSide$Type = (("server") | ("client")) | ($ZetaSide);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZetaSide_ = $ZetaSide$Type;
}}
declare module "packages/org/violetmoon/zeta/util/$NameChanger" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"

export class $NameChanger {

constructor()

public "changeBlock"(arg0: $Block$Type, arg1: string, arg2: boolean): void
public "changeItem"(arg0: $Item$Type, arg1: string, arg2: boolean): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $NameChanger$Type = ($NameChanger);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $NameChanger_ = $NameChanger$Type;
}}
declare module "packages/org/violetmoon/quark/content/tweaks/client/emote/$TemplateSourcedEmote" {
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$HumanoidModel, $HumanoidModel$Type} from "packages/net/minecraft/client/model/$HumanoidModel"
import {$EmoteBase, $EmoteBase$Type} from "packages/org/violetmoon/quark/content/tweaks/client/emote/$EmoteBase"
import {$EmoteDescriptor, $EmoteDescriptor$Type} from "packages/org/violetmoon/quark/content/tweaks/client/emote/$EmoteDescriptor"
import {$Timeline, $Timeline$Type} from "packages/aurelienribon/tweenengine/$Timeline"

export class $TemplateSourcedEmote extends $EmoteBase {
static readonly "PI_F": float
readonly "desc": $EmoteDescriptor
 "timeDone": float
 "totalTime": float
 "animatedTime": float

constructor(arg0: $EmoteDescriptor$Type, arg1: $Player$Type, arg2: $HumanoidModel$Type<(any)>, arg3: $HumanoidModel$Type<(any)>, arg4: $HumanoidModel$Type<(any)>)

public "shouldLoadTimelineOnLaunch"(): boolean
public "getTimeline"(arg0: $Player$Type, arg1: $HumanoidModel$Type<(any)>): $Timeline
public "usesBodyPart"(arg0: integer): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $TemplateSourcedEmote$Type = ($TemplateSourcedEmote);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $TemplateSourcedEmote_ = $TemplateSourcedEmote$Type;
}}
declare module "packages/org/violetmoon/zeta/event/play/$ZRecipeCrawl$Digest" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$Multimap, $Multimap$Type} from "packages/com/google/common/collect/$Multimap"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$ZRecipeCrawl, $ZRecipeCrawl$Type} from "packages/org/violetmoon/zeta/event/play/$ZRecipeCrawl"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export class $ZRecipeCrawl$Digest extends $ZRecipeCrawl {

constructor(arg0: $Multimap$Type<($Item$Type), ($ItemStack$Type)>, arg1: $Multimap$Type<($Item$Type), ($ItemStack$Type)>)

public "get"(arg0: $Item$Type, arg1: boolean): $Collection<($ItemStack)>
public "has"(arg0: $Item$Type, arg1: boolean): boolean
public "recursivelyFindCraftedItems"(arg0: $Collection$Type<($Item$Type)>, arg1: $Collection$Type<($Item$Type)>, arg2: $Collection$Type<($Item$Type)>, arg3: $Consumer$Type<($Item$Type)>): void
public "recursivelyFindCraftedItemsFromStrings"(arg0: $Collection$Type<(string)>, arg1: $Collection$Type<(string)>, arg2: $Collection$Type<(string)>, arg3: $Consumer$Type<($Item$Type)>): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZRecipeCrawl$Digest$Type = ($ZRecipeCrawl$Digest);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZRecipeCrawl$Digest_ = $ZRecipeCrawl$Digest$Type;
}}
declare module "packages/org/violetmoon/quark/content/mobs/client/render/entity/$FoxhoundRenderer" {
import {$RenderLayer, $RenderLayer$Type} from "packages/net/minecraft/client/renderer/entity/layers/$RenderLayer"
import {$EntityRendererProvider$Context, $EntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/entity/$EntityRendererProvider$Context"
import {$List, $List$Type} from "packages/java/util/$List"
import {$Foxhound, $Foxhound$Type} from "packages/org/violetmoon/quark/content/mobs/entity/$Foxhound"
import {$EntityModel, $EntityModel$Type} from "packages/net/minecraft/client/model/$EntityModel"
import {$MobRenderer, $MobRenderer$Type} from "packages/net/minecraft/client/renderer/entity/$MobRenderer"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$FoxhoundModel, $FoxhoundModel$Type} from "packages/org/violetmoon/quark/content/mobs/client/model/$FoxhoundModel"

export class $FoxhoundRenderer extends $MobRenderer<($Foxhound), ($FoxhoundModel)> {
static readonly "LEASH_RENDER_STEPS": integer
 "model": M
 "layers": $List<($RenderLayer<(T), (M)>)>
 "shadowRadius": float

constructor(arg0: $EntityRendererProvider$Context$Type)

public "getTextureLocation"(arg0: $Foxhound$Type): $ResourceLocation
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FoxhoundRenderer$Type = ($FoxhoundRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FoxhoundRenderer_ = $FoxhoundRenderer$Type;
}}
declare module "packages/org/violetmoon/quark/content/building/block/$VariantLadderBlock" {
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$BooleanSupplier, $BooleanSupplier$Type} from "packages/java/util/function/$BooleanSupplier"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$FluidState, $FluidState$Type} from "packages/net/minecraft/world/level/material/$FluidState"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$ToolAction, $ToolAction$Type} from "packages/net/minecraftforge/common/$ToolAction"
import {$IForgeBlock, $IForgeBlock$Type} from "packages/net/minecraftforge/common/extensions/$IForgeBlock"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$DirectionProperty, $DirectionProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$DirectionProperty"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$CreativeModeTab, $CreativeModeTab$Type} from "packages/net/minecraft/world/item/$CreativeModeTab"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$IZetaBlock, $IZetaBlock$Type} from "packages/org/violetmoon/zeta/block/$IZetaBlock"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$UseOnContext, $UseOnContext$Type} from "packages/net/minecraft/world/item/context/$UseOnContext"
import {$SoundType, $SoundType$Type} from "packages/net/minecraft/world/level/block/$SoundType"
import {$IPlantable, $IPlantable$Type} from "packages/net/minecraftforge/common/$IPlantable"
import {$IZetaBlockExtensions, $IZetaBlockExtensions$Type} from "packages/org/violetmoon/zeta/block/ext/$IZetaBlockExtensions"
import {$LadderBlock, $LadderBlock$Type} from "packages/net/minecraft/world/level/block/$LadderBlock"
import {$ResourceKey, $ResourceKey$Type} from "packages/net/minecraft/resources/$ResourceKey"
import {$ItemLike, $ItemLike$Type} from "packages/net/minecraft/world/level/$ItemLike"
import {$BlockAndTintGetter, $BlockAndTintGetter$Type} from "packages/net/minecraft/world/level/$BlockAndTintGetter"

export class $VariantLadderBlock extends $LadderBlock implements $IZetaBlock, $IZetaBlockExtensions, $IForgeBlock {
static readonly "FACING": $DirectionProperty
static readonly "WATERLOGGED": $BooleanProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(arg0: string, arg1: $ZetaModule$Type, arg2: $BlockBehaviour$Properties$Type, arg3: boolean)

public "getModule"(): $ZetaModule
public "canSustainPlant"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type, arg4: $IPlantable$Type): boolean
public "isLadder"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "isConduitFrame"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): boolean
public "doesConditionApply"(): boolean
public "setCondition"(arg0: $BooleanSupplier$Type): $VariantLadderBlock
public "getEnchantPowerBonus"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type): float
public "shouldDisplayFluidOverlay"(arg0: $BlockState$Type, arg1: $BlockAndTintGetter$Type, arg2: $BlockPos$Type, arg3: $FluidState$Type): boolean
public "getToolModifiedState"(arg0: $BlockState$Type, arg1: $UseOnContext$Type, arg2: $ToolAction$Type, arg3: boolean): $BlockState
public "getBeaconColorMultiplier"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): (float)[]
public "makesOpenTrapdoorAboveClimbable"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockState$Type): boolean
public "getSoundType"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): $SoundType
public "isScaffolding"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "getLightEmission"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type): integer
public "isFlammable"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): boolean
public "canStickTo"(arg0: $BlockState$Type, arg1: $BlockState$Type): boolean
public "getFireSpreadSpeed"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "getFlammability"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "isStickyBlock"(arg0: $BlockState$Type): boolean
public "collisionExtendsVertically"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): boolean
public "getBlock"(): $Block
public "getFireSpreadSpeedZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "getFlammabilityZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "setCreativeTab"(arg0: $ResourceKey$Type<($CreativeModeTab$Type)>): $Block
public "setCreativeTab"(arg0: $ResourceKey$Type<($CreativeModeTab$Type)>, arg1: $ItemLike$Type, arg2: boolean): $Block
public "isConduitFrameZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): boolean
public "isLadderZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "isStickyBlockZeta"(arg0: $BlockState$Type): boolean
public "isScaffoldingZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "canStickToZeta"(arg0: $BlockState$Type, arg1: $BlockState$Type): boolean
public "isFlammableZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): boolean
public "getSoundTypeZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): $SoundType
public "makesOpenTrapdoorAboveClimbableZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockState$Type): boolean
public "canSustainPlantZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type, arg4: string): boolean
public "getToolModifiedStateZeta"(arg0: $BlockState$Type, arg1: $UseOnContext$Type, arg2: string, arg3: boolean): $BlockState
public "collisionExtendsVerticallyZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): boolean
public "shouldDisplayFluidOverlayZeta"(arg0: $BlockState$Type, arg1: $BlockAndTintGetter$Type, arg2: $BlockPos$Type, arg3: $FluidState$Type): boolean
public "getEnchantPowerBonusZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type): float
public "getBeaconColorMultiplierZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): (float)[]
public "getLightEmissionZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type): integer
public "isEnabled"(): boolean
public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
get "module"(): $ZetaModule
set "condition"(value: $BooleanSupplier$Type)
get "block"(): $Block
set "creativeTab"(value: $ResourceKey$Type<($CreativeModeTab$Type)>)
get "enabled"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $VariantLadderBlock$Type = ($VariantLadderBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $VariantLadderBlock_ = $VariantLadderBlock$Type;
}}
declare module "packages/org/violetmoon/zeta/event/bus/$ZResult" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $ZResult extends $Enum<($ZResult)> {
static readonly "DENY": $ZResult
static readonly "DEFAULT": $ZResult
static readonly "ALLOW": $ZResult


public static "values"(): ($ZResult)[]
public static "valueOf"(arg0: string): $ZResult
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZResult$Type = (("allow") | ("deny") | ("default")) | ($ZResult);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZResult_ = $ZResult$Type;
}}
declare module "packages/org/violetmoon/zeta/item/$ZetaArrowItem$Impl" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$AbstractArrow, $AbstractArrow$Type} from "packages/net/minecraft/world/entity/projectile/$AbstractArrow"
import {$ZetaArrowItem, $ZetaArrowItem$Type} from "packages/org/violetmoon/zeta/item/$ZetaArrowItem"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$ZetaArrowItem$Impl$ArrowCreator, $ZetaArrowItem$Impl$ArrowCreator$Type} from "packages/org/violetmoon/zeta/item/$ZetaArrowItem$Impl$ArrowCreator"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $ZetaArrowItem$Impl extends $ZetaArrowItem {
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: string, arg1: $ZetaModule$Type, arg2: $ZetaArrowItem$Impl$ArrowCreator$Type)

public "createArrow"(arg0: $Level$Type, arg1: $ItemStack$Type, arg2: $LivingEntity$Type): $AbstractArrow
public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZetaArrowItem$Impl$Type = ($ZetaArrowItem$Impl);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZetaArrowItem$Impl_ = $ZetaArrowItem$Impl$Type;
}}
declare module "packages/org/violetmoon/quark/content/mobs/module/$ToretoiseModule" {
import {$EntitySpawnConfig, $EntitySpawnConfig$Type} from "packages/org/violetmoon/zeta/config/type/$EntitySpawnConfig"
import {$Toretoise, $Toretoise$Type} from "packages/org/violetmoon/quark/content/mobs/entity/$Toretoise"
import {$ZClientSetup, $ZClientSetup$Type} from "packages/org/violetmoon/zeta/client/event/load/$ZClientSetup"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$DimensionConfig, $DimensionConfig$Type} from "packages/org/violetmoon/zeta/config/type/$DimensionConfig"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ZRegister, $ZRegister$Type} from "packages/org/violetmoon/zeta/event/load/$ZRegister"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ManualTrigger, $ManualTrigger$Type} from "packages/org/violetmoon/zeta/advancement/$ManualTrigger"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZEntityAttributeCreation, $ZEntityAttributeCreation$Type} from "packages/org/violetmoon/zeta/event/load/$ZEntityAttributeCreation"

export class $ToretoiseModule extends $ZetaModule {
static "toretoiseType": $EntityType<($Toretoise)>
static "maxYLevel": integer
static "cooldownTicks": integer
static "foods": $List<(string)>
static "allowToretoiseToRegrow": boolean
static "regrowChance": integer
static "dimensions": $DimensionConfig
static "spawnConfig": $EntitySpawnConfig
static "mineToretoiseTrigger": $ManualTrigger
static "mineFedToretoiseTrigger": $ManualTrigger
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "register"(arg0: $ZRegister$Type): void
public "clientSetup"(arg0: $ZClientSetup$Type): void
public "entityAttrs"(arg0: $ZEntityAttributeCreation$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ToretoiseModule$Type = ($ToretoiseModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ToretoiseModule_ = $ToretoiseModule$Type;
}}
declare module "packages/org/violetmoon/quark/content/world/undergroundstyle/base/$UndergroundStyleConfig$Builder" {
import {$UndergroundStyle, $UndergroundStyle$Type} from "packages/org/violetmoon/quark/content/world/undergroundstyle/base/$UndergroundStyle"
import {$ClusterSizeConfig$Builder, $ClusterSizeConfig$Builder$Type} from "packages/org/violetmoon/zeta/config/type/$ClusterSizeConfig$Builder"

export class $UndergroundStyleConfig$Builder<B extends $UndergroundStyleConfig$Builder<(B)>> extends $ClusterSizeConfig$Builder<(B)> {

constructor()

public "style"(arg0: $UndergroundStyle$Type): $UndergroundStyleConfig$Builder<(B)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $UndergroundStyleConfig$Builder$Type<B> = ($UndergroundStyleConfig$Builder<(B)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $UndergroundStyleConfig$Builder_<B> = $UndergroundStyleConfig$Builder$Type<(B)>;
}}
declare module "packages/org/violetmoon/quark/content/building/module/$MidoriModule" {
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$ZRegister, $ZRegister$Type} from "packages/org/violetmoon/zeta/event/load/$ZRegister"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ZLoadComplete, $ZLoadComplete$Type} from "packages/org/violetmoon/zeta/event/load/$ZLoadComplete"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $MidoriModule extends $ZetaModule {
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "register"(arg0: $ZRegister$Type): void
public "loadComplete"(arg0: $ZLoadComplete$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MidoriModule$Type = ($MidoriModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MidoriModule_ = $MidoriModule$Type;
}}
declare module "packages/org/violetmoon/quark/content/tweaks/client/emote/$EmoteBase" {
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$HumanoidModel, $HumanoidModel$Type} from "packages/net/minecraft/client/model/$HumanoidModel"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$EmoteDescriptor, $EmoteDescriptor$Type} from "packages/org/violetmoon/quark/content/tweaks/client/emote/$EmoteDescriptor"
import {$Timeline, $Timeline$Type} from "packages/aurelienribon/tweenengine/$Timeline"

export class $EmoteBase {
static readonly "PI_F": float
readonly "desc": $EmoteDescriptor
 "timeDone": float
 "totalTime": float
 "animatedTime": float

constructor(arg0: $EmoteDescriptor$Type, arg1: $Player$Type, arg2: $HumanoidModel$Type<(any)>, arg3: $HumanoidModel$Type<(any)>, arg4: $HumanoidModel$Type<(any)>)

public "update"(): void
public "isDone"(): boolean
public "startAllTimelines"(): void
public "rotateAndOffset"(arg0: $PoseStack$Type): void
public "getTimeline"(arg0: $Player$Type, arg1: $HumanoidModel$Type<(any)>): $Timeline
public "usesBodyPart"(arg0: integer): boolean
get "done"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EmoteBase$Type = ($EmoteBase);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EmoteBase_ = $EmoteBase$Type;
}}
declare module "packages/org/violetmoon/quark/content/automation/module/$RedstoneRandomizerModule" {
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$ZRegister, $ZRegister$Type} from "packages/org/violetmoon/zeta/event/load/$ZRegister"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $RedstoneRandomizerModule extends $ZetaModule {
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "register"(arg0: $ZRegister$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RedstoneRandomizerModule$Type = ($RedstoneRandomizerModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RedstoneRandomizerModule_ = $RedstoneRandomizerModule$Type;
}}
declare module "packages/org/violetmoon/zetaimplforge/event/play/entity/living/$ForgeZAnimalTame" {
import {$AnimalTameEvent, $AnimalTameEvent$Type} from "packages/net/minecraftforge/event/entity/living/$AnimalTameEvent"
import {$ZAnimalTame, $ZAnimalTame$Type} from "packages/org/violetmoon/zeta/event/play/entity/living/$ZAnimalTame"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$Animal, $Animal$Type} from "packages/net/minecraft/world/entity/animal/$Animal"

export class $ForgeZAnimalTame implements $ZAnimalTame {

constructor(arg0: $AnimalTameEvent$Type)

public "getAnimal"(): $Animal
public "getTamer"(): $Player
get "animal"(): $Animal
get "tamer"(): $Player
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ForgeZAnimalTame$Type = ($ForgeZAnimalTame);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ForgeZAnimalTame_ = $ForgeZAnimalTame$Type;
}}
declare module "packages/org/violetmoon/quark/content/tweaks/client/emote/$EmoteDescriptor" {
import {$EmoteTemplate, $EmoteTemplate$Type} from "packages/org/violetmoon/quark/content/tweaks/client/emote/$EmoteTemplate"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$HumanoidModel, $HumanoidModel$Type} from "packages/net/minecraft/client/model/$HumanoidModel"
import {$Class, $Class$Type} from "packages/java/lang/$Class"
import {$EmoteBase, $EmoteBase$Type} from "packages/org/violetmoon/quark/content/tweaks/client/emote/$EmoteBase"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $EmoteDescriptor {
static readonly "TIER_1": $ResourceLocation
static readonly "TIER_2": $ResourceLocation
static readonly "TIER_3": $ResourceLocation
static readonly "TIER_4": $ResourceLocation
static readonly "TIER_GOD": $ResourceLocation
readonly "clazz": $Class<(any)>
readonly "index": integer
readonly "name": string
readonly "regName": string
readonly "texture": $ResourceLocation
readonly "template": $EmoteTemplate

constructor(arg0: $Class$Type<(any)>, arg1: string, arg2: string, arg3: integer)
constructor(arg0: $Class$Type<(any)>, arg1: string, arg2: string, arg3: integer, arg4: $ResourceLocation$Type, arg5: $EmoteTemplate$Type)

public "toString"(): string
public "getLocalizedName"(): string
public "instantiate"(arg0: $Player$Type, arg1: $HumanoidModel$Type<(any)>, arg2: $HumanoidModel$Type<(any)>, arg3: $HumanoidModel$Type<(any)>): $EmoteBase
public "getTierTexture"(): $ResourceLocation
public "getTranslationKey"(): string
public "getTier"(): integer
public "getRegistryName"(): string
public "updateTier"(arg0: $EmoteTemplate$Type): void
get "localizedName"(): string
get "tierTexture"(): $ResourceLocation
get "translationKey"(): string
get "tier"(): integer
get "registryName"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $EmoteDescriptor$Type = ($EmoteDescriptor);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $EmoteDescriptor_ = $EmoteDescriptor$Type;
}}
declare module "packages/org/violetmoon/quark/content/world/gen/$BigStoneClusterGenerator" {
import {$ClusterShape$Provider, $ClusterShape$Provider$Type} from "packages/org/violetmoon/zeta/world/generator/multichunk/$ClusterShape$Provider"
import {$BigStoneClusterConfig, $BigStoneClusterConfig$Type} from "packages/org/violetmoon/quark/content/world/config/$BigStoneClusterConfig"
import {$BooleanSupplier, $BooleanSupplier$Type} from "packages/java/util/function/$BooleanSupplier"
import {$ClusterBasedGenerator$IGenerationContext, $ClusterBasedGenerator$IGenerationContext$Type} from "packages/org/violetmoon/zeta/world/generator/multichunk/$ClusterBasedGenerator$IGenerationContext"
import {$ChunkGenerator, $ChunkGenerator$Type} from "packages/net/minecraft/world/level/chunk/$ChunkGenerator"
import {$DimensionConfig, $DimensionConfig$Type} from "packages/org/violetmoon/zeta/config/type/$DimensionConfig"
import {$WorldGenRegion, $WorldGenRegion$Type} from "packages/net/minecraft/server/level/$WorldGenRegion"
import {$Random, $Random$Type} from "packages/java/util/$Random"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$ClusterBasedGenerator, $ClusterBasedGenerator$Type} from "packages/org/violetmoon/zeta/world/generator/multichunk/$ClusterBasedGenerator"

export class $BigStoneClusterGenerator extends $ClusterBasedGenerator {
readonly "shapeProvider": $ClusterShape$Provider
readonly "dimConfig": $DimensionConfig

constructor(arg0: $BigStoneClusterConfig$Type, arg1: $BlockState$Type, arg2: $BooleanSupplier$Type)

public "toString"(): string
public "getSourcesInChunk"(arg0: $WorldGenRegion$Type, arg1: $Random$Type, arg2: $ChunkGenerator$Type, arg3: $BlockPos$Type): ($BlockPos)[]
public "createContext"(arg0: $BlockPos$Type, arg1: $ChunkGenerator$Type, arg2: $Random$Type, arg3: $BlockPos$Type, arg4: $WorldGenRegion$Type): $ClusterBasedGenerator$IGenerationContext
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BigStoneClusterGenerator$Type = ($BigStoneClusterGenerator);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BigStoneClusterGenerator_ = $BigStoneClusterGenerator$Type;
}}
declare module "packages/org/violetmoon/quark/base/handler/$QuarkSounds" {
import {$SoundEvent, $SoundEvent$Type} from "packages/net/minecraft/sounds/$SoundEvent"
import {$ZRegister, $ZRegister$Type} from "packages/org/violetmoon/zeta/event/load/$ZRegister"

export class $QuarkSounds {
static readonly "ENTITY_SHIBA_EAT_ARROW": $SoundEvent
static readonly "ENTITY_SHIBA_WHINE": $SoundEvent
static readonly "ENTITY_SHIBA_STEP": $SoundEvent
static readonly "ENTITY_SHIBA_AMBIENT": $SoundEvent
static readonly "ENTITY_SHIBA_PANT": $SoundEvent
static readonly "ENTITY_SHIBA_HURT": $SoundEvent
static readonly "ENTITY_SHIBA_DEATH": $SoundEvent
static readonly "ENTITY_STONELING_MEEP": $SoundEvent
static readonly "ENTITY_STONELING_PURR": $SoundEvent
static readonly "ENTITY_STONELING_GIVE": $SoundEvent
static readonly "ENTITY_STONELING_TAKE": $SoundEvent
static readonly "ENTITY_STONELING_EAT": $SoundEvent
static readonly "ENTITY_STONELING_DIE": $SoundEvent
static readonly "ENTITY_STONELING_CRY": $SoundEvent
static readonly "ENTITY_STONELING_MICHAEL": $SoundEvent
static readonly "ENTITY_PICKARANG_THROW": $SoundEvent
static readonly "ENTITY_PICKARANG_CLANK": $SoundEvent
static readonly "ENTITY_PICKARANG_SPARK": $SoundEvent
static readonly "ENTITY_PICKARANG_PICKUP": $SoundEvent
static readonly "ENTITY_FOXHOUND_IDLE": $SoundEvent
static readonly "ENTITY_FOXHOUND_DIE": $SoundEvent
static readonly "ENTITY_FOXHOUND_GROWL": $SoundEvent
static readonly "ENTITY_FOXHOUND_HURT": $SoundEvent
static readonly "ENTITY_FOXHOUND_PANT": $SoundEvent
static readonly "ENTITY_FOXHOUND_SHAKE": $SoundEvent
static readonly "ENTITY_FOXHOUND_WHINE": $SoundEvent
static readonly "ENTITY_FOXHOUND_EAT": $SoundEvent
static readonly "ENTITY_FOXHOUND_CRACKLE": $SoundEvent
static readonly "ENTITY_CRAB_DIE": $SoundEvent
static readonly "ENTITY_CRAB_HURT": $SoundEvent
static readonly "ENTITY_CRAB_IDLE": $SoundEvent
static readonly "ENTITY_TORETOISE_DIE": $SoundEvent
static readonly "ENTITY_TORETOISE_HURT": $SoundEvent
static readonly "ENTITY_TORETOISE_IDLE": $SoundEvent
static readonly "ENTITY_TORETOISE_ANGRY": $SoundEvent
static readonly "ENTITY_TORETOISE_HARVEST": $SoundEvent
static readonly "ENTITY_TORETOISE_EAT_SATIATED": $SoundEvent
static readonly "ENTITY_TORETOISE_EAT": $SoundEvent
static readonly "ENTITY_TORETOISE_REGROW": $SoundEvent
static readonly "ENTITY_PARROT_EGG": $SoundEvent
static readonly "ENTITY_SOUL_BEAD_IDLE": $SoundEvent
static readonly "BLOCK_MONSTER_BOX_GROWL": $SoundEvent
static readonly "BLOCK_PIPE_SHOOT": $SoundEvent
static readonly "BLOCK_PIPE_PICKUP": $SoundEvent
static readonly "BLOCK_PIPE_SHOOT_LENNY": $SoundEvent
static readonly "BLOCK_PIPE_PICKUP_LENNY": $SoundEvent
static readonly "BLOCK_POTATO_DO_IT": $SoundEvent
static readonly "BLOCK_POTATO_SODA": $SoundEvent
static readonly "BLOCK_POTATO_KINGBDOGZ": $SoundEvent
static readonly "BLOCK_POTATO_YUNG": $SoundEvent
static readonly "BLOCK_POTATO_HURT": $SoundEvent
static readonly "ITEM_CAMERA_SHUTTER": $SoundEvent
static readonly "ITEM_SOUL_POWDER_SPAWN": $SoundEvent
static readonly "BUCKET_FILL_CRAB": $SoundEvent
static readonly "BUCKET_EMPTY_CRAB": $SoundEvent
static readonly "PET_DEVICE": $SoundEvent
static readonly "PET_NEKO": $SoundEvent
static readonly "PET_SLIME": $SoundEvent
static readonly "PET_WIRE": $SoundEvent
static readonly "AMBIENT_DRIPS": $SoundEvent
static readonly "AMBIENT_OCEAN": $SoundEvent
static readonly "AMBIENT_RAIN": $SoundEvent
static readonly "AMBIENT_WIND": $SoundEvent
static readonly "AMBIENT_FIRE": $SoundEvent
static readonly "AMBIENT_CLOCK": $SoundEvent
static readonly "AMBIENT_CRICKETS": $SoundEvent
static readonly "AMBIENT_CHATTER": $SoundEvent
static readonly "MUSIC_ENDERMOSH": $SoundEvent
static readonly "MUSIC_GLIMMERING_WEALD": $SoundEvent

constructor()

public static "start"(arg0: $ZRegister$Type): void
public static "register"(arg0: string): $SoundEvent
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $QuarkSounds$Type = ($QuarkSounds);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $QuarkSounds_ = $QuarkSounds$Type;
}}
declare module "packages/org/violetmoon/zeta/recipe/$ZetaDyeRecipe" {
import {$RegistryAccess, $RegistryAccess$Type} from "packages/net/minecraft/core/$RegistryAccess"
import {$RecipeSerializer, $RecipeSerializer$Type} from "packages/net/minecraft/world/item/crafting/$RecipeSerializer"
import {$CustomRecipe, $CustomRecipe$Type} from "packages/net/minecraft/world/item/crafting/$CustomRecipe"
import {$DyeablesRegistry, $DyeablesRegistry$Type} from "packages/org/violetmoon/zeta/registry/$DyeablesRegistry"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$CraftingContainer, $CraftingContainer$Type} from "packages/net/minecraft/world/inventory/$CraftingContainer"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$CraftingBookCategory, $CraftingBookCategory$Type} from "packages/net/minecraft/world/item/crafting/$CraftingBookCategory"

export class $ZetaDyeRecipe extends $CustomRecipe {

constructor(arg0: $ResourceLocation$Type, arg1: $CraftingBookCategory$Type, arg2: $DyeablesRegistry$Type)

public "matches"(arg0: $CraftingContainer$Type, arg1: $Level$Type): boolean
public "canCraftInDimensions"(arg0: integer, arg1: integer): boolean
public "getSerializer"(): $RecipeSerializer<(any)>
public "assemble"(arg0: $CraftingContainer$Type, arg1: $RegistryAccess$Type): $ItemStack
get "serializer"(): $RecipeSerializer<(any)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZetaDyeRecipe$Type = ($ZetaDyeRecipe);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZetaDyeRecipe_ = $ZetaDyeRecipe$Type;
}}
declare module "packages/org/violetmoon/zeta/client/event/load/$ZClientSetup" {
import {$IZetaLoadEvent, $IZetaLoadEvent$Type} from "packages/org/violetmoon/zeta/event/bus/$IZetaLoadEvent"
import {$Runnable, $Runnable$Type} from "packages/java/lang/$Runnable"

export interface $ZClientSetup extends $IZetaLoadEvent {

 "enqueueWork"(arg0: $Runnable$Type): void

(arg0: $Runnable$Type): void
}

export namespace $ZClientSetup {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZClientSetup$Type = ($ZClientSetup);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZClientSetup_ = $ZClientSetup$Type;
}}
declare module "packages/org/violetmoon/zeta/event/play/entity/living/$ZAnimalTame" {
import {$IZetaPlayEvent, $IZetaPlayEvent$Type} from "packages/org/violetmoon/zeta/event/bus/$IZetaPlayEvent"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$Animal, $Animal$Type} from "packages/net/minecraft/world/entity/animal/$Animal"

export interface $ZAnimalTame extends $IZetaPlayEvent {

 "getAnimal"(): $Animal
 "getTamer"(): $Player
}

export namespace $ZAnimalTame {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZAnimalTame$Type = ($ZAnimalTame);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZAnimalTame_ = $ZAnimalTame$Type;
}}
declare module "packages/org/violetmoon/zetaimplforge/client/event/play/$ForgeZRenderGuiOverlay" {
import {$RenderGuiOverlayEvent, $RenderGuiOverlayEvent$Type} from "packages/net/minecraftforge/client/event/$RenderGuiOverlayEvent"
import {$Window, $Window$Type} from "packages/com/mojang/blaze3d/platform/$Window"
import {$ZRenderGuiOverlay, $ZRenderGuiOverlay$Type} from "packages/org/violetmoon/zeta/client/event/play/$ZRenderGuiOverlay"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $ForgeZRenderGuiOverlay implements $ZRenderGuiOverlay {

constructor(arg0: $RenderGuiOverlayEvent$Type)

public "getPartialTick"(): float
public "getWindow"(): $Window
public "shouldDrawSurvivalElements"(): boolean
public "getGuiGraphics"(): $GuiGraphics
public "getLeftHeight"(): integer
get "partialTick"(): float
get "window"(): $Window
get "guiGraphics"(): $GuiGraphics
get "leftHeight"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ForgeZRenderGuiOverlay$Type = ($ForgeZRenderGuiOverlay);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ForgeZRenderGuiOverlay_ = $ForgeZRenderGuiOverlay$Type;
}}
declare module "packages/org/violetmoon/quark/content/world/module/$NewStoneTypesModule" {
import {$BigStoneClusterConfig, $BigStoneClusterConfig$Type} from "packages/org/violetmoon/quark/content/world/config/$BigStoneClusterConfig"
import {$BooleanSupplier, $BooleanSupplier$Type} from "packages/java/util/function/$BooleanSupplier"
import {$ZCommonSetup, $ZCommonSetup$Type} from "packages/org/violetmoon/zeta/event/load/$ZCommonSetup"
import {$MapColor, $MapColor$Type} from "packages/net/minecraft/world/level/material/$MapColor"
import {$ZVillagerTrades, $ZVillagerTrades$Type} from "packages/org/violetmoon/zeta/event/play/loading/$ZVillagerTrades"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$ZetaBlock$Constructor, $ZetaBlock$Constructor$Type} from "packages/org/violetmoon/zeta/block/$ZetaBlock$Constructor"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$StoneTypeConfig, $StoneTypeConfig$Type} from "packages/org/violetmoon/quark/content/world/config/$StoneTypeConfig"
import {$ZetaBlock, $ZetaBlock$Type} from "packages/org/violetmoon/zeta/block/$ZetaBlock"
import {$ZRegister, $ZRegister$Type} from "packages/org/violetmoon/zeta/event/load/$ZRegister"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZConfigChanged, $ZConfigChanged$Type} from "packages/org/violetmoon/zeta/event/load/$ZConfigChanged"

export class $NewStoneTypesModule extends $ZetaModule {
static "enableLimestone": boolean
static "enableJasper": boolean
static "enableShale": boolean
static "enableMyalite": boolean
static "enabledWithLimestone": boolean
static "enabledWithJasper": boolean
static "enabledWithShale": boolean
static "enabledWithMyalite": boolean
static "limestone": $StoneTypeConfig
static "jasper": $StoneTypeConfig
static "shale": $StoneTypeConfig
static "myalite": $StoneTypeConfig
static "limestoneBlock": $Block
static "jasperBlock": $Block
static "shaleBlock": $Block
static "myaliteBlock": $Block
static "addNewStonesToMasonTrades": boolean
static "polishedBlocks": $Map<($Block), ($Block)>
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "register"(arg0: $ZRegister$Type): void
public "setup"(arg0: $ZCommonSetup$Type): void
public "onTradesLoaded"(arg0: $ZVillagerTrades$Type): void
public static "makeStone"(arg0: $ZRegister$Type, arg1: $ZetaModule$Type, arg2: string, arg3: $StoneTypeConfig$Type, arg4: $BigStoneClusterConfig$Type, arg5: $BooleanSupplier$Type, arg6: $MapColor$Type): $Block
public static "makeStone"(arg0: $ZRegister$Type, arg1: $ZetaModule$Type, arg2: $Block$Type, arg3: string, arg4: $StoneTypeConfig$Type, arg5: $BigStoneClusterConfig$Type, arg6: $BooleanSupplier$Type, arg7: $MapColor$Type, arg8: $ZetaBlock$Constructor$Type<($ZetaBlock$Type)>): $Block
public "configChanged"(arg0: $ZConfigChanged$Type): void
set "up"(value: $ZCommonSetup$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $NewStoneTypesModule$Type = ($NewStoneTypesModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $NewStoneTypesModule_ = $NewStoneTypesModule$Type;
}}
declare module "packages/org/violetmoon/quark/content/automation/module/$MetalButtonsModule" {
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$ZRegister, $ZRegister$Type} from "packages/org/violetmoon/zeta/event/load/$ZRegister"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $MetalButtonsModule extends $ZetaModule {
static "enableIron": boolean
static "enableGold": boolean
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "register"(arg0: $ZRegister$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MetalButtonsModule$Type = ($MetalButtonsModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MetalButtonsModule_ = $MetalButtonsModule$Type;
}}
declare module "packages/org/violetmoon/quark/base/proxy/$ClientProxy" {
import {$RegistryAccess, $RegistryAccess$Type} from "packages/net/minecraft/core/$RegistryAccess"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$CommonProxy, $CommonProxy$Type} from "packages/org/violetmoon/quark/base/proxy/$CommonProxy"

export class $ClientProxy extends $CommonProxy {
static "jingleBellsMotherfucker": boolean
static "jingleTheBells": boolean

constructor()

public "start"(): void
public "clientUseItem"(arg0: $Player$Type, arg1: $Level$Type, arg2: $InteractionHand$Type, arg3: $BlockHitResult$Type): $InteractionResult
public "getVisualTime"(): float
public "isClientPlayerHoldingShift"(): boolean
public "hackilyGetCurrentClientLevelRegistryAccess"(): $RegistryAccess
get "visualTime"(): float
get "clientPlayerHoldingShift"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ClientProxy$Type = ($ClientProxy);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ClientProxy_ = $ClientProxy$Type;
}}
declare module "packages/org/violetmoon/zeta/util/handler/$RequiredModTooltipHandler" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"

export class $RequiredModTooltipHandler {

constructor()

public "map"(arg0: $Block$Type, arg1: string): void
public "map"(arg0: $Item$Type, arg1: string): void
public "disabledItems"(): $List<($ItemStack)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RequiredModTooltipHandler$Type = ($RequiredModTooltipHandler);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RequiredModTooltipHandler_ = $RequiredModTooltipHandler$Type;
}}
declare module "packages/org/violetmoon/zeta/client/config/widget/$DefaultDiscardDone" {
import {$AbstractWidget, $AbstractWidget$Type} from "packages/net/minecraft/client/gui/components/$AbstractWidget"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$ChangeSet, $ChangeSet$Type} from "packages/org/violetmoon/zeta/config/$ChangeSet"
import {$Definition, $Definition$Type} from "packages/org/violetmoon/zeta/config/$Definition"
import {$Button, $Button$Type} from "packages/net/minecraft/client/gui/components/$Button"
import {$ZetaScreen, $ZetaScreen$Type} from "packages/org/violetmoon/zeta/client/config/screen/$ZetaScreen"

export class $DefaultDiscardDone {
readonly "resetToDefault": $Button
readonly "discard": $Button
readonly "done": $Button

constructor(arg0: $ZetaScreen$Type, arg1: $ChangeSet$Type, arg2: $Definition$Type)

public "done"(arg0: $Button$Type): void
public "resetToDefault"(arg0: $Button$Type): void
public "addWidgets"(arg0: $Consumer$Type<($AbstractWidget$Type)>): void
public "discard"(arg0: $Button$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DefaultDiscardDone$Type = ($DefaultDiscardDone);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DefaultDiscardDone_ = $DefaultDiscardDone$Type;
}}
declare module "packages/org/violetmoon/quark/content/management/module/$HotbarChangerModule" {
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $HotbarChangerModule extends $ZetaModule {
static "height": integer
static "currentHeldItem": integer
static "animating": boolean
static "keyDown": boolean
static "hotbarChangeOpen": boolean
static "shifting": boolean
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $HotbarChangerModule$Type = ($HotbarChangerModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $HotbarChangerModule_ = $HotbarChangerModule$Type;
}}
declare module "packages/org/violetmoon/quark/content/world/block/$MyaliteCrystalBlock" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$ZetaGlassBlock, $ZetaGlassBlock$Type} from "packages/org/violetmoon/zeta/block/$ZetaGlassBlock"
import {$IZetaBlockColorProvider, $IZetaBlockColorProvider$Type} from "packages/org/violetmoon/zeta/registry/$IZetaBlockColorProvider"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $MyaliteCrystalBlock extends $ZetaGlassBlock implements $IZetaBlockColorProvider {
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(arg0: $ZetaModule$Type)

public "getBlockColorProviderName"(): string
public "getItemColorProviderName"(): string
public "getBeaconColorMultiplierZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): (float)[]
public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
get "blockColorProviderName"(): string
get "itemColorProviderName"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MyaliteCrystalBlock$Type = ($MyaliteCrystalBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MyaliteCrystalBlock_ = $MyaliteCrystalBlock$Type;
}}
declare module "packages/org/violetmoon/zeta/client/config/widget/$ScrollableWidgetList" {
import {$AbstractWidget, $AbstractWidget$Type} from "packages/net/minecraft/client/gui/components/$AbstractWidget"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$ObjectSelectionList, $ObjectSelectionList$Type} from "packages/net/minecraft/client/gui/components/$ObjectSelectionList"
import {$Collection, $Collection$Type} from "packages/java/util/$Collection"
import {$AbstractSelectionList$Entry, $AbstractSelectionList$Entry$Type} from "packages/net/minecraft/client/gui/components/$AbstractSelectionList$Entry"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$ScrollableWidgetList$WidgetWrapper, $ScrollableWidgetList$WidgetWrapper$Type} from "packages/org/violetmoon/zeta/client/config/widget/$ScrollableWidgetList$WidgetWrapper"
import {$ScrollableWidgetList$Entry, $ScrollableWidgetList$Entry$Type} from "packages/org/violetmoon/zeta/client/config/widget/$ScrollableWidgetList$Entry"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $ScrollableWidgetList<S extends $Screen, E extends $ScrollableWidgetList$Entry<(E)>> extends $ObjectSelectionList<(E)> {
readonly "parent": S
 "scrolling": boolean
 "hovered": E

constructor(arg0: S)

public "forEachWidgetWrapper"(arg0: $Consumer$Type<($ScrollableWidgetList$WidgetWrapper$Type)>): void
public "addEntry"(arg0: E): integer
public "m_5988_"(arg0: $Collection$Type<(E)>): void
public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
public "scroll2"(arg0: integer): void
public "getRowWidth"(): integer
public "addChildWidgets"(arg0: $Consumer$Type<($AbstractWidget$Type)>, arg1: $Consumer$Type<($AbstractWidget$Type)>): void
public "ensureVisible2"(arg0: integer): void
public "removeChildWidgets"(arg0: $Consumer$Type<($AbstractWidget$Type)>): void
public "reenableVisibleWidgets"(): void
get "rowWidth"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ScrollableWidgetList$Type<S, E> = ($ScrollableWidgetList<(S), (E)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ScrollableWidgetList_<S, E> = $ScrollableWidgetList$Type<(S), (E)>;
}}
declare module "packages/org/violetmoon/quark/content/automation/block/$RedstoneRandomizerBlock" {
import {$RandomizerPowerState, $RandomizerPowerState$Type} from "packages/org/violetmoon/quark/content/automation/base/$RandomizerPowerState"
import {$VoxelShape, $VoxelShape$Type} from "packages/net/minecraft/world/phys/shapes/$VoxelShape"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$CollisionContext, $CollisionContext$Type} from "packages/net/minecraft/world/phys/shapes/$CollisionContext"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$EnumProperty, $EnumProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$EnumProperty"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$ZetaBlock, $ZetaBlock$Type} from "packages/org/violetmoon/zeta/block/$ZetaBlock"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$BlockPlaceContext, $BlockPlaceContext$Type} from "packages/net/minecraft/world/item/context/$BlockPlaceContext"
import {$DirectionProperty, $DirectionProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$DirectionProperty"

export class $RedstoneRandomizerBlock extends $ZetaBlock {
static readonly "FACING": $DirectionProperty
static readonly "POWERED": $EnumProperty<($RandomizerPowerState)>
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(arg0: string, arg1: $ZetaModule$Type, arg2: $BlockBehaviour$Properties$Type)

public "getStateForPlacement"(arg0: $BlockPlaceContext$Type): $BlockState
public "setPlacedBy"(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: $LivingEntity$Type, arg4: $ItemStack$Type): void
public static "notifyNeighbors"(arg0: $Block$Type, arg1: $Level$Type, arg2: $BlockPos$Type, arg3: $BlockState$Type): void
public "neighborChanged"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type, arg3: $Block$Type, arg4: $BlockPos$Type, arg5: boolean): void
public "onPlace"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type, arg3: $BlockState$Type, arg4: boolean): void
public "isSignalSource"(arg0: $BlockState$Type): boolean
public "onRemove"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type, arg3: $BlockState$Type, arg4: boolean): void
public "canSurvive"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type): boolean
public "getShape"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $CollisionContext$Type): $VoxelShape
public "tick"(arg0: $BlockState$Type, arg1: $ServerLevel$Type, arg2: $BlockPos$Type, arg3: $RandomSource$Type): void
public "getSignal"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "getDirectSignal"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "animateTick"(arg0: $BlockState$Type, arg1: $Level$Type, arg2: $BlockPos$Type, arg3: $RandomSource$Type): void
public static "breakAndDrop"(arg0: $Block$Type, arg1: $BlockState$Type, arg2: $Level$Type, arg3: $BlockPos$Type): void
public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RedstoneRandomizerBlock$Type = ($RedstoneRandomizerBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RedstoneRandomizerBlock_ = $RedstoneRandomizerBlock$Type;
}}
declare module "packages/org/violetmoon/zeta/client/key/$SortedKeyBinding" {
import {$KeyMapping, $KeyMapping$Type} from "packages/net/minecraft/client/$KeyMapping"
import {$InputConstants$Type, $InputConstants$Type$Type} from "packages/com/mojang/blaze3d/platform/$InputConstants$Type"
import {$InputConstants$Key, $InputConstants$Key$Type} from "packages/com/mojang/blaze3d/platform/$InputConstants$Key"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $SortedKeyBinding extends $KeyMapping {
static readonly "ALL": $Map<(string), ($KeyMapping)>
static readonly "CATEGORY_MOVEMENT": string
static readonly "CATEGORY_MISC": string
static readonly "CATEGORY_MULTIPLAYER": string
static readonly "CATEGORY_GAMEPLAY": string
static readonly "CATEGORY_INVENTORY": string
static readonly "CATEGORY_INTERFACE": string
static readonly "CATEGORY_CREATIVE": string
 "key": $InputConstants$Key
 "clickCount": integer

constructor(arg0: string, arg1: $InputConstants$Type$Type, arg2: integer, arg3: string, arg4: integer)

public "compareTo"(arg0: $KeyMapping$Type): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SortedKeyBinding$Type = ($SortedKeyBinding);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SortedKeyBinding_ = $SortedKeyBinding$Type;
}}
declare module "packages/org/violetmoon/quark/content/mobs/module/$CrabsModule" {
import {$EntitySpawnConfig, $EntitySpawnConfig$Type} from "packages/org/violetmoon/zeta/config/type/$EntitySpawnConfig"
import {$ZCommonSetup, $ZCommonSetup$Type} from "packages/org/violetmoon/zeta/event/load/$ZCommonSetup"
import {$ZVillagerTrades, $ZVillagerTrades$Type} from "packages/org/violetmoon/zeta/event/play/loading/$ZVillagerTrades"
import {$ZClientSetup, $ZClientSetup$Type} from "packages/org/violetmoon/zeta/client/event/load/$ZClientSetup"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Crab, $Crab$Type} from "packages/org/violetmoon/quark/content/mobs/entity/$Crab"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$ZRegister, $ZRegister$Type} from "packages/org/violetmoon/zeta/event/load/$ZRegister"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZEntityAttributeCreation, $ZEntityAttributeCreation$Type} from "packages/org/violetmoon/zeta/event/load/$ZEntityAttributeCreation"

export class $CrabsModule extends $ZetaModule {
static "crabType": $EntityType<($Crab)>
static "spawnConfig": $EntitySpawnConfig
static "crabSpawnableTag": $TagKey<($Block)>
static "resilience": $MobEffect
static "enableBrewing": boolean
static "resilienceRequiredForAllEffects": boolean
static "addCrabLegToFishermanTrades": boolean
static "crab_bucket": $Item
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "register"(arg0: $ZRegister$Type): void
public "setup"(arg0: $ZCommonSetup$Type): void
public "clientSetup"(arg0: $ZClientSetup$Type): void
public "entityAttrs"(arg0: $ZEntityAttributeCreation$Type): void
public "onTradesLoaded"(arg0: $ZVillagerTrades$Type): void
set "up"(value: $ZCommonSetup$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CrabsModule$Type = ($CrabsModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CrabsModule_ = $CrabsModule$Type;
}}
declare module "packages/org/violetmoon/quark/base/item/boat/$IQuarkBoat" {
import {$WoodSetHandler$QuarkBoatType, $WoodSetHandler$QuarkBoatType$Type} from "packages/org/violetmoon/quark/base/handler/$WoodSetHandler$QuarkBoatType"

export interface $IQuarkBoat {

 "setQuarkBoatTypeObj"(arg0: $WoodSetHandler$QuarkBoatType$Type): void
 "getQuarkBoatTypeObj"(): $WoodSetHandler$QuarkBoatType
}

export namespace $IQuarkBoat {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IQuarkBoat$Type = ($IQuarkBoat);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IQuarkBoat_ = $IQuarkBoat$Type;
}}
declare module "packages/org/violetmoon/quark/content/tools/module/$SkullPikesModule" {
import {$ZCommonSetup, $ZCommonSetup$Type} from "packages/org/violetmoon/zeta/event/load/$ZCommonSetup"
import {$ZEntityJoinLevel, $ZEntityJoinLevel$Type} from "packages/org/violetmoon/zeta/event/play/entity/$ZEntityJoinLevel"
import {$ZClientSetup, $ZClientSetup$Type} from "packages/org/violetmoon/zeta/client/event/load/$ZClientSetup"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$SkullPike, $SkullPike$Type} from "packages/org/violetmoon/quark/content/tools/entity/$SkullPike"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$ZRegister, $ZRegister$Type} from "packages/org/violetmoon/zeta/event/load/$ZRegister"
import {$ZBlock$EntityPlace, $ZBlock$EntityPlace$Type} from "packages/org/violetmoon/zeta/event/play/$ZBlock$EntityPlace"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"

export class $SkullPikesModule extends $ZetaModule {
static "skullPikeType": $EntityType<($SkullPike)>
static "pikeTrophiesTag": $TagKey<($Block)>
static "pikeRange": double
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "register"(arg0: $ZRegister$Type): void
public "setup"(arg0: $ZCommonSetup$Type): void
public "clientSetup"(arg0: $ZClientSetup$Type): void
public "onPlaceBlock"(arg0: $ZBlock$EntityPlace$Type): void
public "onMonsterAppear"(arg0: $ZEntityJoinLevel$Type): void
set "up"(value: $ZCommonSetup$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SkullPikesModule$Type = ($SkullPikesModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SkullPikesModule_ = $SkullPikesModule$Type;
}}
declare module "packages/org/violetmoon/zetaimplforge/capability/$ForgeCapabilityManager" {
import {$ZetaCapability, $ZetaCapability$Type} from "packages/org/violetmoon/zeta/capability/$ZetaCapability"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ZetaCapabilityManager, $ZetaCapabilityManager$Type} from "packages/org/violetmoon/zeta/capability/$ZetaCapabilityManager"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export class $ForgeCapabilityManager implements $ZetaCapabilityManager {

constructor()

public "hasCapability"<T>(arg0: $ZetaCapability$Type<(T)>, arg1: $BlockEntity$Type): boolean
public "hasCapability"<T>(arg0: $ZetaCapability$Type<(T)>, arg1: $Level$Type): boolean
public "hasCapability"<T>(arg0: $ZetaCapability$Type<(T)>, arg1: $ItemStack$Type): boolean
public "attachCapability"<T>(arg0: any, arg1: $ResourceLocation$Type, arg2: $ZetaCapability$Type<(T)>, arg3: T): void
public "getCapability"<T>(arg0: $ZetaCapability$Type<(T)>, arg1: $Level$Type): T
public "getCapability"<T>(arg0: $ZetaCapability$Type<(T)>, arg1: $ItemStack$Type): T
public "getCapability"<T>(arg0: $ZetaCapability$Type<(T)>, arg1: $BlockEntity$Type): T
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ForgeCapabilityManager$Type = ($ForgeCapabilityManager);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ForgeCapabilityManager_ = $ForgeCapabilityManager$Type;
}}
declare module "packages/org/violetmoon/zeta/client/$SimpleWithoutLevelRenderer" {
import {$BlockEntityWithoutLevelRenderer, $BlockEntityWithoutLevelRenderer$Type} from "packages/net/minecraft/client/renderer/$BlockEntityWithoutLevelRenderer"
import {$ItemDisplayContext, $ItemDisplayContext$Type} from "packages/net/minecraft/world/item/$ItemDisplayContext"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$EntityModelSet, $EntityModelSet$Type} from "packages/net/minecraft/client/model/geom/$EntityModelSet"
import {$BlockEntityRenderDispatcher, $BlockEntityRenderDispatcher$Type} from "packages/net/minecraft/client/renderer/blockentity/$BlockEntityRenderDispatcher"
import {$BlockEntityType, $BlockEntityType$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntityType"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$MultiBufferSource, $MultiBufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource"

export class $SimpleWithoutLevelRenderer extends $BlockEntityWithoutLevelRenderer {

constructor(arg0: $BlockEntityRenderDispatcher$Type, arg1: $EntityModelSet$Type, arg2: $BlockEntityType$Type<(any)>, arg3: $BlockState$Type)
constructor(arg0: $BlockEntityType$Type<(any)>, arg1: $BlockState$Type)

public "renderByItem"(arg0: $ItemStack$Type, arg1: $ItemDisplayContext$Type, arg2: $PoseStack$Type, arg3: $MultiBufferSource$Type, arg4: integer, arg5: integer): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SimpleWithoutLevelRenderer$Type = ($SimpleWithoutLevelRenderer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SimpleWithoutLevelRenderer_ = $SimpleWithoutLevelRenderer$Type;
}}
declare module "packages/org/violetmoon/zeta/event/load/$ZTagsUpdated" {
import {$IZetaLoadEvent, $IZetaLoadEvent$Type} from "packages/org/violetmoon/zeta/event/bus/$IZetaLoadEvent"

export class $ZTagsUpdated implements $IZetaLoadEvent {

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZTagsUpdated$Type = ($ZTagsUpdated);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZTagsUpdated_ = $ZTagsUpdated$Type;
}}
declare module "packages/org/violetmoon/zetaimplforge/event/play/$ForgeZItemTooltip" {
import {$TooltipFlag, $TooltipFlag$Type} from "packages/net/minecraft/world/item/$TooltipFlag"
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ZItemTooltip, $ZItemTooltip$Type} from "packages/org/violetmoon/zeta/event/play/$ZItemTooltip"
import {$ItemTooltipEvent, $ItemTooltipEvent$Type} from "packages/net/minecraftforge/event/entity/player/$ItemTooltipEvent"

export class $ForgeZItemTooltip implements $ZItemTooltip {

constructor(arg0: $ItemTooltipEvent$Type)

public "getFlags"(): $TooltipFlag
public "getEntity"(): $Player
public "getItemStack"(): $ItemStack
public "getToolTip"(): $List<($Component)>
get "flags"(): $TooltipFlag
get "entity"(): $Player
get "itemStack"(): $ItemStack
get "toolTip"(): $List<($Component)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ForgeZItemTooltip$Type = ($ForgeZItemTooltip);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ForgeZItemTooltip_ = $ForgeZItemTooltip$Type;
}}
declare module "packages/org/violetmoon/quark/addons/oddities/client/particle/$MagnetParticleRenderType" {
import {$ParticleRenderType, $ParticleRenderType$Type} from "packages/net/minecraft/client/particle/$ParticleRenderType"
import {$RegisterShadersEvent, $RegisterShadersEvent$Type} from "packages/net/minecraftforge/client/event/$RegisterShadersEvent"
import {$RegisterParticleProvidersEvent, $RegisterParticleProvidersEvent$Type} from "packages/net/minecraftforge/client/event/$RegisterParticleProvidersEvent"

export class $MagnetParticleRenderType {
static readonly "ADDITIVE_TRANSLUCENCY": $ParticleRenderType

constructor()

public static "registerParticleProviders"(arg0: $RegisterParticleProvidersEvent$Type): void
public static "registerShader"(arg0: $RegisterShadersEvent$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MagnetParticleRenderType$Type = ($MagnetParticleRenderType);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MagnetParticleRenderType_ = $MagnetParticleRenderType$Type;
}}
declare module "packages/org/violetmoon/quark/content/mobs/client/model/$ShibaModel" {
import {$VertexConsumer, $VertexConsumer$Type} from "packages/com/mojang/blaze3d/vertex/$VertexConsumer"
import {$PoseStack, $PoseStack$Type} from "packages/com/mojang/blaze3d/vertex/$PoseStack"
import {$EntityModel, $EntityModel$Type} from "packages/net/minecraft/client/model/$EntityModel"
import {$Shiba, $Shiba$Type} from "packages/org/violetmoon/quark/content/mobs/entity/$Shiba"
import {$ModelPart, $ModelPart$Type} from "packages/net/minecraft/client/model/geom/$ModelPart"
import {$LayerDefinition, $LayerDefinition$Type} from "packages/net/minecraft/client/model/geom/builders/$LayerDefinition"

export class $ShibaModel extends $EntityModel<($Shiba)> {
 "attackTime": float
 "riding": boolean
 "young": boolean

constructor(arg0: $ModelPart$Type)

public "transformToHead"(arg0: $PoseStack$Type): void
public "setRotationAngle"(arg0: $ModelPart$Type, arg1: float, arg2: float, arg3: float): void
public "setupAnim"(arg0: $Shiba$Type, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float): void
public static "createBodyLayer"(): $LayerDefinition
public "prepareMobModel"(arg0: $Shiba$Type, arg1: float, arg2: float, arg3: float): void
public "renderToBuffer"(arg0: $PoseStack$Type, arg1: $VertexConsumer$Type, arg2: integer, arg3: integer, arg4: float, arg5: float, arg6: float, arg7: float): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ShibaModel$Type = ($ShibaModel);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ShibaModel_ = $ShibaModel$Type;
}}
declare module "packages/org/violetmoon/quark/base/config/definition/$ConvulsionMatrixClientDefinition" {
import {$AbstractWidget, $AbstractWidget$Type} from "packages/net/minecraft/client/gui/components/$AbstractWidget"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$ChangeSet, $ChangeSet$Type} from "packages/org/violetmoon/zeta/config/$ChangeSet"
import {$ZetaClient, $ZetaClient$Type} from "packages/org/violetmoon/zeta/client/$ZetaClient"
import {$ConvulsionMatrixConfig, $ConvulsionMatrixConfig$Type} from "packages/org/violetmoon/quark/base/config/type/$ConvulsionMatrixConfig"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$SectionDefinition, $SectionDefinition$Type} from "packages/org/violetmoon/zeta/config/$SectionDefinition"
import {$ClientDefinitionExt, $ClientDefinitionExt$Type} from "packages/org/violetmoon/zeta/client/config/definition/$ClientDefinitionExt"

export class $ConvulsionMatrixClientDefinition implements $ClientDefinitionExt<($SectionDefinition)> {

constructor(arg0: $ConvulsionMatrixConfig$Type, arg1: $SectionDefinition$Type)

public "addWidgets"(arg0: $ZetaClient$Type, arg1: $Screen$Type, arg2: $ChangeSet$Type, arg3: $SectionDefinition$Type, arg4: $Consumer$Type<($AbstractWidget$Type)>): void
public "getSubtitle"(arg0: $ChangeSet$Type, arg1: $SectionDefinition$Type): string
public "truncate"(arg0: string): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ConvulsionMatrixClientDefinition$Type = ($ConvulsionMatrixClientDefinition);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ConvulsionMatrixClientDefinition_ = $ConvulsionMatrixClientDefinition$Type;
}}
declare module "packages/org/violetmoon/quark/content/client/tooltip/$AttributeTooltips" {
import {$AttributeIconEntry, $AttributeIconEntry$Type} from "packages/org/violetmoon/quark/content/client/resources/$AttributeIconEntry"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$ZGatherTooltipComponents, $ZGatherTooltipComponents$Type} from "packages/org/violetmoon/zeta/client/event/play/$ZGatherTooltipComponents"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $AttributeTooltips {
static readonly "TEXTURE_UPGRADE": $ResourceLocation
static readonly "TEXTURE_DOWNGRADE": $ResourceLocation

constructor()

public static "receiveAttributes"(arg0: $Map$Type<(string), ($AttributeIconEntry$Type)>): void
public static "makeTooltip"(arg0: $ZGatherTooltipComponents$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $AttributeTooltips$Type = ($AttributeTooltips);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $AttributeTooltips_ = $AttributeTooltips$Type;
}}
declare module "packages/org/violetmoon/zeta/$Zeta" {
import {$IZetaPlayEvent, $IZetaPlayEvent$Type} from "packages/org/violetmoon/zeta/event/bus/$IZetaPlayEvent"
import {$ZetaModuleManager, $ZetaModuleManager$Type} from "packages/org/violetmoon/zeta/module/$ZetaModuleManager"
import {$RaytracingUtil, $RaytracingUtil$Type} from "packages/org/violetmoon/zeta/util/$RaytracingUtil"
import {$RenderLayerRegistry, $RenderLayerRegistry$Type} from "packages/org/violetmoon/zeta/registry/$RenderLayerRegistry"
import {$EntitySpawnHandler, $EntitySpawnHandler$Type} from "packages/org/violetmoon/zeta/world/$EntitySpawnHandler"
import {$ZetaNetworkHandler, $ZetaNetworkHandler$Type} from "packages/org/violetmoon/zeta/network/$ZetaNetworkHandler"
import {$Iterable, $Iterable$Type} from "packages/java/lang/$Iterable"
import {$NameChanger, $NameChanger$Type} from "packages/org/violetmoon/zeta/util/$NameChanger"
import {$AdvancementModifierRegistry, $AdvancementModifierRegistry$Type} from "packages/org/violetmoon/zeta/advancement/$AdvancementModifierRegistry"
import {$IZetaLoadEvent, $IZetaLoadEvent$Type} from "packages/org/violetmoon/zeta/event/bus/$IZetaLoadEvent"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$ZetaEventBus, $ZetaEventBus$Type} from "packages/org/violetmoon/zeta/event/bus/$ZetaEventBus"
import {$BlockHitResult, $BlockHitResult$Type} from "packages/net/minecraft/world/phys/$BlockHitResult"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"
import {$SectionDefinition, $SectionDefinition$Type} from "packages/org/violetmoon/zeta/config/$SectionDefinition"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ModuleFinder, $ModuleFinder$Type} from "packages/org/violetmoon/zeta/module/$ModuleFinder"
import {$RequiredModTooltipHandler, $RequiredModTooltipHandler$Type} from "packages/org/violetmoon/zeta/util/handler/$RequiredModTooltipHandler"
import {$ConfigManager, $ConfigManager$Type} from "packages/org/violetmoon/zeta/config/$ConfigManager"
import {$ZetaRegistry, $ZetaRegistry$Type} from "packages/org/violetmoon/zeta/registry/$ZetaRegistry"
import {$PottedPlantRegistry, $PottedPlantRegistry$Type} from "packages/org/violetmoon/zeta/registry/$PottedPlantRegistry"
import {$FuelHandler, $FuelHandler$Type} from "packages/org/violetmoon/zeta/util/handler/$FuelHandler"
import {$ZetaCapabilityManager, $ZetaCapabilityManager$Type} from "packages/org/violetmoon/zeta/capability/$ZetaCapabilityManager"
import {$VariantRegistry, $VariantRegistry$Type} from "packages/org/violetmoon/zeta/registry/$VariantRegistry"
import {$BlockExtensionFactory, $BlockExtensionFactory$Type} from "packages/org/violetmoon/zeta/block/ext/$BlockExtensionFactory"
import {$IZetaConfigInternals, $IZetaConfigInternals$Type} from "packages/org/violetmoon/zeta/config/$IZetaConfigInternals"
import {$CraftingExtensionsRegistry, $CraftingExtensionsRegistry$Type} from "packages/org/violetmoon/zeta/registry/$CraftingExtensionsRegistry"
import {$IZeta, $IZeta$Type} from "packages/org/violetmoon/zeta/util/zetalist/$IZeta"
import {$BrewingRegistry, $BrewingRegistry$Type} from "packages/org/violetmoon/zeta/registry/$BrewingRegistry"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$Logger, $Logger$Type} from "packages/org/apache/logging/log4j/$Logger"
import {$ZetaSide, $ZetaSide$Type} from "packages/org/violetmoon/zeta/util/$ZetaSide"
import {$DyeablesRegistry, $DyeablesRegistry$Type} from "packages/org/violetmoon/zeta/registry/$DyeablesRegistry"
import {$ItemExtensionFactory, $ItemExtensionFactory$Type} from "packages/org/violetmoon/zeta/item/ext/$ItemExtensionFactory"
import {$RegistryUtil, $RegistryUtil$Type} from "packages/org/violetmoon/zeta/util/$RegistryUtil"

export class $Zeta implements $IZeta {
static readonly "ZETA_ID": string
static readonly "GLOBAL_LOG": $Logger
readonly "log": $Logger
readonly "modid": string
readonly "side": $ZetaSide
readonly "loadBus": $ZetaEventBus<($IZetaLoadEvent)>
readonly "playBus": $ZetaEventBus<($IZetaPlayEvent)>
readonly "modules": $ZetaModuleManager
readonly "registry": $ZetaRegistry
readonly "registryUtil": $RegistryUtil
readonly "renderLayerRegistry": $RenderLayerRegistry
readonly "dyeables": $DyeablesRegistry
readonly "craftingExtensions": $CraftingExtensionsRegistry
readonly "brewingRegistry": $BrewingRegistry
readonly "advancementModifierRegistry": $AdvancementModifierRegistry
readonly "pottedPlantRegistry": $PottedPlantRegistry
readonly "requiredModTooltipHandler": $RequiredModTooltipHandler
readonly "variantRegistry": $VariantRegistry
readonly "capabilityManager": $ZetaCapabilityManager
readonly "blockExtensions": $BlockExtensionFactory
readonly "itemExtensions": $ItemExtensionFactory
readonly "raytracingUtil": $RaytracingUtil
readonly "nameChanger": $NameChanger
readonly "fuel": $FuelHandler
 "configManager": $ConfigManager
 "configInternals": $IZetaConfigInternals
 "network": $ZetaNetworkHandler
 "entitySpawn": $EntitySpawnHandler

constructor(arg0: string, arg1: $Logger$Type, arg2: $ZetaSide$Type)

public "start"(): void
public "loadModules"(arg0: $Iterable$Type<($ZetaCategory$Type)>, arg1: $ModuleFinder$Type, arg2: any): void
public "createNameChanger"(): $NameChanger
public "createFuelHandler"(): $FuelHandler
public "fireExternalEvent"<E, T extends E>(arg0: T): T
public "asZeta"(): $Zeta
public "getModDisplayName"(arg0: string): string
public "modIntegration"<T>(arg0: string, arg1: $Supplier$Type<($Supplier$Type<(T)>)>, arg2: $Supplier$Type<($Supplier$Type<(T)>)>): T
public "createItemExtensionFactory"(): $ItemExtensionFactory
public "createCraftingExtensionsRegistry"(): $CraftingExtensionsRegistry
public "createBrewingRegistry"(): $BrewingRegistry
public "createDyeablesRegistry"(): $DyeablesRegistry
public "createNetworkHandler"(arg0: integer): $ZetaNetworkHandler
public "createPottedPlantRegistry"(): $PottedPlantRegistry
public "createCapabilityManager"(): $ZetaCapabilityManager
public "createAdvancementModifierRegistry"(): $AdvancementModifierRegistry
public "makeConfigInternals"(arg0: $SectionDefinition$Type): $IZetaConfigInternals
public "createRaytracingUtil"(): $RaytracingUtil
public "fireRightClickBlock"(arg0: $Player$Type, arg1: $InteractionHand$Type, arg2: $BlockPos$Type, arg3: $BlockHitResult$Type): boolean
public "createModuleManager"(): $ZetaModuleManager
public "createEntitySpawnHandler"(): $EntitySpawnHandler
public "createRenderLayerRegistry"(): $RenderLayerRegistry
public "createBlockExtensionFactory"(): $BlockExtensionFactory
public "isModLoaded"(arg0: string): boolean
public "createRegistry"(): $ZetaRegistry
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Zeta$Type = ($Zeta);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Zeta_ = $Zeta$Type;
}}
declare module "packages/org/violetmoon/quark/addons/oddities/block/be/$PipeBlockEntity" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Packet, $Packet$Type} from "packages/net/minecraft/network/protocol/$Packet"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$PipeBlockEntity$ConnectionType, $PipeBlockEntity$ConnectionType$Type} from "packages/org/violetmoon/quark/addons/oddities/block/be/$PipeBlockEntity$ConnectionType"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$PipeBlockEntity$PipeItem, $PipeBlockEntity$PipeItem$Type} from "packages/org/violetmoon/quark/addons/oddities/block/be/$PipeBlockEntity$PipeItem"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$ClientGamePacketListener, $ClientGamePacketListener$Type} from "packages/net/minecraft/network/protocol/game/$ClientGamePacketListener"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$SimpleInventoryBlockEntity, $SimpleInventoryBlockEntity$Type} from "packages/org/violetmoon/zeta/util/$SimpleInventoryBlockEntity"
import {$List, $List$Type} from "packages/java/util/$List"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Iterator, $Iterator$Type} from "packages/java/util/$Iterator"

export class $PipeBlockEntity extends $SimpleInventoryBlockEntity {
readonly "pipeItems": $List<($PipeBlockEntity$PipeItem)>
readonly "queuedItems": $List<($PipeBlockEntity$PipeItem)>
 "blockState": $BlockState

constructor(arg0: $BlockPos$Type, arg1: $BlockState$Type)

public "sync"(): void
public "tick"(): void
public static "tick"(arg0: $Level$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type, arg3: $PipeBlockEntity$Type): void
public "getComparatorOutput"(): integer
public "getContainerSize"(): integer
public "canPlaceItemThroughFace"(arg0: integer, arg1: $ItemStack$Type, arg2: $Direction$Type): boolean
public "writeSharedNBT"(arg0: $CompoundTag$Type): void
public "readSharedNBT"(arg0: $CompoundTag$Type): void
public "passIn"(arg0: $ItemStack$Type, arg1: $Direction$Type, arg2: $Direction$Type, arg3: long, arg4: integer): boolean
public "passIn"(arg0: $ItemStack$Type, arg1: $Direction$Type): boolean
public static "isTheGoodDay"(): boolean
public "updateConnection"(arg0: $Direction$Type): $PipeBlockEntity$ConnectionType
public "getConnectionTo"(arg0: $Direction$Type): $PipeBlockEntity$ConnectionType
public "getItemIterator"(): $Iterator<($PipeBlockEntity$PipeItem)>
public "allowsFullConnection"(arg0: $PipeBlockEntity$ConnectionType$Type): boolean
public static "computeConnectionTo"(arg0: $BlockGetter$Type, arg1: $BlockPos$Type, arg2: $Direction$Type): $PipeBlockEntity$ConnectionType
public "refreshVisualConnections"(): void
public "dropAllItems"(): void
public "dropItem"(arg0: $ItemStack$Type, arg1: $Direction$Type, arg2: boolean): void
public "dropItem"(arg0: $ItemStack$Type): void
public "setItem"(arg0: integer, arg1: $ItemStack$Type): void
public "getUpdatePacket"(): $Packet<($ClientGamePacketListener)>
public "setChanged"(): void
public static "stillValidBlockEntity"(arg0: $BlockEntity$Type, arg1: $Player$Type, arg2: integer): boolean
public static "stillValidBlockEntity"(arg0: $BlockEntity$Type, arg1: $Player$Type): boolean
public static "tryClear"(arg0: any): void
get "comparatorOutput"(): integer
get "containerSize"(): integer
get "theGoodDay"(): boolean
get "itemIterator"(): $Iterator<($PipeBlockEntity$PipeItem)>
get "updatePacket"(): $Packet<($ClientGamePacketListener)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PipeBlockEntity$Type = ($PipeBlockEntity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PipeBlockEntity_ = $PipeBlockEntity$Type;
}}
declare module "packages/org/violetmoon/quark/content/building/module/$VerticalSlabsModule" {
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$ZCommonSetup, $ZCommonSetup$Type} from "packages/org/violetmoon/zeta/event/load/$ZCommonSetup"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$ZRegister$Post, $ZRegister$Post$Type} from "packages/org/violetmoon/zeta/event/load/$ZRegister$Post"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZConfigChanged, $ZConfigChanged$Type} from "packages/org/violetmoon/zeta/event/load/$ZConfigChanged"

export class $VerticalSlabsModule extends $ZetaModule {
static "allowSideConnections": boolean
static "staticEnabled": boolean
static "verticalSlabTag": $TagKey<($Block)>
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "setup"(arg0: $ZCommonSetup$Type): void
public "postRegister"(arg0: $ZRegister$Post$Type): void
public "configChanged"(arg0: $ZConfigChanged$Type): void
public static "messWithPaneState"(arg0: $LevelAccessor$Type, arg1: $BlockPos$Type, arg2: $BlockState$Type): $BlockState
public static "shouldWallConnect"(arg0: $BlockState$Type, arg1: $Direction$Type, arg2: boolean): boolean
set "up"(value: $ZCommonSetup$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $VerticalSlabsModule$Type = ($VerticalSlabsModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $VerticalSlabsModule_ = $VerticalSlabsModule$Type;
}}
declare module "packages/org/violetmoon/zeta/block/$ZetaVineBlock" {
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$VineBlock, $VineBlock$Type} from "packages/net/minecraft/world/level/block/$VineBlock"
import {$BooleanSupplier, $BooleanSupplier$Type} from "packages/java/util/function/$BooleanSupplier"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"
import {$FluidState, $FluidState$Type} from "packages/net/minecraft/world/level/material/$FluidState"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$ToolAction, $ToolAction$Type} from "packages/net/minecraftforge/common/$ToolAction"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$IForgeBlock, $IForgeBlock$Type} from "packages/net/minecraftforge/common/extensions/$IForgeBlock"
import {$ServerLevel, $ServerLevel$Type} from "packages/net/minecraft/server/level/$ServerLevel"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$CreativeModeTab, $CreativeModeTab$Type} from "packages/net/minecraft/world/item/$CreativeModeTab"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$IZetaBlock, $IZetaBlock$Type} from "packages/org/violetmoon/zeta/block/$IZetaBlock"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$UseOnContext, $UseOnContext$Type} from "packages/net/minecraft/world/item/context/$UseOnContext"
import {$SoundType, $SoundType$Type} from "packages/net/minecraft/world/level/block/$SoundType"
import {$IPlantable, $IPlantable$Type} from "packages/net/minecraftforge/common/$IPlantable"
import {$IZetaBlockExtensions, $IZetaBlockExtensions$Type} from "packages/org/violetmoon/zeta/block/ext/$IZetaBlockExtensions"
import {$ResourceKey, $ResourceKey$Type} from "packages/net/minecraft/resources/$ResourceKey"
import {$ItemLike, $ItemLike$Type} from "packages/net/minecraft/world/level/$ItemLike"
import {$BlockAndTintGetter, $BlockAndTintGetter$Type} from "packages/net/minecraft/world/level/$BlockAndTintGetter"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $ZetaVineBlock extends $VineBlock implements $IZetaBlock, $IZetaBlockExtensions, $IForgeBlock {
static readonly "UP": $BooleanProperty
static readonly "NORTH": $BooleanProperty
static readonly "EAST": $BooleanProperty
static readonly "SOUTH": $BooleanProperty
static readonly "WEST": $BooleanProperty
static readonly "PROPERTY_BY_DIRECTION": $Map<($Direction), ($BooleanProperty)>
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(arg0: $ZetaModule$Type, arg1: string, arg2: boolean)

public "getModule"(): $ZetaModule
public "isFlammableZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): boolean
public "canSustainPlant"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type, arg4: $IPlantable$Type): boolean
public "isLadder"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "isConduitFrame"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): boolean
public "doesConditionApply"(): boolean
public "setCondition"(arg0: $BooleanSupplier$Type): $ZetaVineBlock
public "getEnchantPowerBonus"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type): float
public "shouldDisplayFluidOverlay"(arg0: $BlockState$Type, arg1: $BlockAndTintGetter$Type, arg2: $BlockPos$Type, arg3: $FluidState$Type): boolean
public "getToolModifiedState"(arg0: $BlockState$Type, arg1: $UseOnContext$Type, arg2: $ToolAction$Type, arg3: boolean): $BlockState
public "getBeaconColorMultiplier"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): (float)[]
public "makesOpenTrapdoorAboveClimbable"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockState$Type): boolean
public "getSoundType"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): $SoundType
public "isScaffolding"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "getLightEmission"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type): integer
public "getFlammabilityZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "isFlammable"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): boolean
public "canStickTo"(arg0: $BlockState$Type, arg1: $BlockState$Type): boolean
public "getFireSpreadSpeed"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "getFlammability"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "isStickyBlock"(arg0: $BlockState$Type): boolean
public "randomTick"(arg0: $BlockState$Type, arg1: $ServerLevel$Type, arg2: $BlockPos$Type, arg3: $RandomSource$Type): void
public "collisionExtendsVertically"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): boolean
public "getBlock"(): $Block
public "getFireSpreadSpeedZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public "setCreativeTab"(arg0: $ResourceKey$Type<($CreativeModeTab$Type)>): $Block
public "setCreativeTab"(arg0: $ResourceKey$Type<($CreativeModeTab$Type)>, arg1: $ItemLike$Type, arg2: boolean): $Block
public "isConduitFrameZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): boolean
public "isLadderZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "isStickyBlockZeta"(arg0: $BlockState$Type): boolean
public "isScaffoldingZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $LivingEntity$Type): boolean
public "canStickToZeta"(arg0: $BlockState$Type, arg1: $BlockState$Type): boolean
public "getSoundTypeZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): $SoundType
public "makesOpenTrapdoorAboveClimbableZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockState$Type): boolean
public "canSustainPlantZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type, arg4: string): boolean
public "getToolModifiedStateZeta"(arg0: $BlockState$Type, arg1: $UseOnContext$Type, arg2: string, arg3: boolean): $BlockState
public "collisionExtendsVerticallyZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Entity$Type): boolean
public "shouldDisplayFluidOverlayZeta"(arg0: $BlockState$Type, arg1: $BlockAndTintGetter$Type, arg2: $BlockPos$Type, arg3: $FluidState$Type): boolean
public "getEnchantPowerBonusZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type): float
public "getBeaconColorMultiplierZeta"(arg0: $BlockState$Type, arg1: $LevelReader$Type, arg2: $BlockPos$Type, arg3: $BlockPos$Type): (float)[]
public "getLightEmissionZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type): integer
public "isEnabled"(): boolean
public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
get "module"(): $ZetaModule
set "condition"(value: $BooleanSupplier$Type)
get "block"(): $Block
set "creativeTab"(value: $ResourceKey$Type<($CreativeModeTab$Type)>)
get "enabled"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZetaVineBlock$Type = ($ZetaVineBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZetaVineBlock_ = $ZetaVineBlock$Type;
}}
declare module "packages/org/violetmoon/quark/content/world/block/$MyaliteColorLogic" {
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $MyaliteColorLogic {

constructor()

public static "getColor"(arg0: $BlockPos$Type): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MyaliteColorLogic$Type = ($MyaliteColorLogic);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MyaliteColorLogic_ = $MyaliteColorLogic$Type;
}}
declare module "packages/org/violetmoon/zeta/registry/$RenderLayerRegistry" {
import {$BiConsumer, $BiConsumer$Type} from "packages/java/util/function/$BiConsumer"
import {$RenderLayerRegistry$Layer, $RenderLayerRegistry$Layer$Type} from "packages/org/violetmoon/zeta/registry/$RenderLayerRegistry$Layer"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"

export class $RenderLayerRegistry {

constructor()

public "finalize"(arg0: $BiConsumer$Type<($Block$Type), ($RenderLayerRegistry$Layer$Type)>): void
public "put"(arg0: $Block$Type, arg1: $RenderLayerRegistry$Layer$Type): void
public "mock"(arg0: $Block$Type, arg1: $Block$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $RenderLayerRegistry$Type = ($RenderLayerRegistry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $RenderLayerRegistry_ = $RenderLayerRegistry$Type;
}}
declare module "packages/org/violetmoon/quark/content/building/block/be/$VariantTrappedChestBlockEntity" {
import {$LithiumStackList, $LithiumStackList$Type} from "packages/me/jellysquid/mods/lithium/common/hopper/$LithiumStackList"
import {$NonNullList, $NonNullList$Type} from "packages/net/minecraft/core/$NonNullList"
import {$InventoryChangeTracker, $InventoryChangeTracker$Type} from "packages/me/jellysquid/mods/lithium/common/block/entity/inventory_change_tracking/$InventoryChangeTracker"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$InventoryChangeListener, $InventoryChangeListener$Type} from "packages/me/jellysquid/mods/lithium/common/block/entity/inventory_change_tracking/$InventoryChangeListener"
import {$LockCode, $LockCode$Type} from "packages/net/minecraft/world/$LockCode"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$VariantChestBlockEntity, $VariantChestBlockEntity$Type} from "packages/org/violetmoon/quark/content/building/block/be/$VariantChestBlockEntity"

export class $VariantTrappedChestBlockEntity extends $VariantChestBlockEntity {
 "items": $NonNullList<($ItemStack)>
static readonly "LOOT_TABLE_TAG": string
static readonly "LOOT_TABLE_SEED_TAG": string
 "lootTable": $ResourceLocation
 "lootTableSeed": long
 "lockKey": $LockCode
 "blockState": $BlockState

constructor(arg0: $BlockPos$Type, arg1: $BlockState$Type)

public "stopForwardingMajorInventoryChanges"(arg0: $InventoryChangeListener$Type): void
public "emitFirstComparatorAdded"(): void
public "forwardMajorInventoryChanges"(arg0: $InventoryChangeListener$Type): void
public "emitContentModified"(): void
public "emitStackListReplaced"(): void
public "forwardContentChangeOnce"(arg0: $InventoryChangeListener$Type, arg1: $LithiumStackList$Type, arg2: $InventoryChangeTracker$Type): void
public "emitRemoved"(): void
public "setChanged"(): void
public static "stillValidBlockEntity"(arg0: $BlockEntity$Type, arg1: $Player$Type, arg2: integer): boolean
public static "stillValidBlockEntity"(arg0: $BlockEntity$Type, arg1: $Player$Type): boolean
public static "tryClear"(arg0: any): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $VariantTrappedChestBlockEntity$Type = ($VariantTrappedChestBlockEntity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $VariantTrappedChestBlockEntity_ = $VariantTrappedChestBlockEntity$Type;
}}
declare module "packages/org/violetmoon/quark/content/experimental/client/tooltip/$VariantsComponent" {
import {$TooltipComponent, $TooltipComponent$Type} from "packages/net/minecraft/world/inventory/tooltip/$TooltipComponent"
import {$FormattedCharSequence, $FormattedCharSequence$Type} from "packages/net/minecraft/util/$FormattedCharSequence"
import {$Font, $Font$Type} from "packages/net/minecraft/client/gui/$Font"
import {$MultiBufferSource$BufferSource, $MultiBufferSource$BufferSource$Type} from "packages/net/minecraft/client/renderer/$MultiBufferSource$BufferSource"
import {$Matrix4f, $Matrix4f$Type} from "packages/org/joml/$Matrix4f"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$ClientTooltipComponent, $ClientTooltipComponent$Type} from "packages/net/minecraft/client/gui/screens/inventory/tooltip/$ClientTooltipComponent"

export class $VariantsComponent implements $ClientTooltipComponent, $TooltipComponent {

constructor(arg0: $ItemStack$Type)

public "getWidth"(arg0: $Font$Type): integer
public "getHeight"(): integer
public "renderImage"(arg0: $Font$Type, arg1: integer, arg2: integer, arg3: $GuiGraphics$Type): void
public static "create"(arg0: $TooltipComponent$Type): $ClientTooltipComponent
public "renderText"(arg0: $Font$Type, arg1: integer, arg2: integer, arg3: $Matrix4f$Type, arg4: $MultiBufferSource$BufferSource$Type): void
public static "create"(arg0: $FormattedCharSequence$Type): $ClientTooltipComponent
get "height"(): integer
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $VariantsComponent$Type = ($VariantsComponent);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $VariantsComponent_ = $VariantsComponent$Type;
}}
declare module "packages/org/violetmoon/quark/mixin/mixins/$IForgeItemMixin" {
export {} // Mark the file as a module, do not remove unless there are other import/exports!
export interface $IForgeItemMixin {

}

export namespace $IForgeItemMixin {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IForgeItemMixin$Type = ($IForgeItemMixin);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IForgeItemMixin_ = $IForgeItemMixin$Type;
}}
declare module "packages/org/violetmoon/zeta/registry/$IZetaBlockColorProvider" {
import {$IZetaItemColorProvider, $IZetaItemColorProvider$Type} from "packages/org/violetmoon/zeta/registry/$IZetaItemColorProvider"

export interface $IZetaBlockColorProvider extends $IZetaItemColorProvider {

 "getBlockColorProviderName"(): string
 "getItemColorProviderName"(): string
}

export namespace $IZetaBlockColorProvider {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IZetaBlockColorProvider$Type = ($IZetaBlockColorProvider);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IZetaBlockColorProvider_ = $IZetaBlockColorProvider$Type;
}}
declare module "packages/org/violetmoon/quark/content/building/module/$DuskboundBlocksModule" {
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$ZRegister, $ZRegister$Type} from "packages/org/violetmoon/zeta/event/load/$ZRegister"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $DuskboundBlocksModule extends $ZetaModule {
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "register"(arg0: $ZRegister$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $DuskboundBlocksModule$Type = ($DuskboundBlocksModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $DuskboundBlocksModule_ = $DuskboundBlocksModule$Type;
}}
declare module "packages/org/violetmoon/zeta/config/$ConfigFlagManager" {
import {$FlagIngredient$Serializer, $FlagIngredient$Serializer$Type} from "packages/org/violetmoon/zeta/recipe/$FlagIngredient$Serializer"
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$ZRegister, $ZRegister$Type} from "packages/org/violetmoon/zeta/event/load/$ZRegister"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $ConfigFlagManager {
readonly "zeta": $Zeta
readonly "flagIngredientSerializer": $FlagIngredient$Serializer

constructor(arg0: $Zeta$Type)

public "clear"(): void
public "putModuleFlag"(arg0: $ZetaModule$Type): void
public "putFlag"(arg0: $ZetaModule$Type, arg1: string, arg2: boolean): void
public "isValidFlag"(arg0: string): boolean
public "onRegister"(arg0: $ZRegister$Type): void
public "getAllFlags"(): $Set<(string)>
public "getFlag"(arg0: string): boolean
get "allFlags"(): $Set<(string)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ConfigFlagManager$Type = ($ConfigFlagManager);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ConfigFlagManager_ = $ConfigFlagManager$Type;
}}
declare module "packages/org/violetmoon/zetaimplforge/mod/$ZetaForgeMod" {
import {$FMLCommonSetupEvent, $FMLCommonSetupEvent$Type} from "packages/net/minecraftforge/fml/event/lifecycle/$FMLCommonSetupEvent"

export class $ZetaForgeMod {

constructor()

public "setup"(arg0: $FMLCommonSetupEvent$Type): void
set "up"(value: $FMLCommonSetupEvent$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZetaForgeMod$Type = ($ZetaForgeMod);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZetaForgeMod_ = $ZetaForgeMod$Type;
}}
declare module "packages/org/violetmoon/zetaimplforge/config/$ForgeBackedConfig" {
import {$ValueDefinition, $ValueDefinition$Type} from "packages/org/violetmoon/zeta/config/$ValueDefinition"
import {$ForgeConfigSpec$Builder, $ForgeConfigSpec$Builder$Type} from "packages/net/minecraftforge/common/$ForgeConfigSpec$Builder"
import {$SectionDefinition, $SectionDefinition$Type} from "packages/org/violetmoon/zeta/config/$SectionDefinition"
import {$IZetaConfigInternals, $IZetaConfigInternals$Type} from "packages/org/violetmoon/zeta/config/$IZetaConfigInternals"

export class $ForgeBackedConfig implements $IZetaConfigInternals {

constructor(arg0: $SectionDefinition$Type, arg1: $ForgeConfigSpec$Builder$Type)

public "get"<T>(arg0: $ValueDefinition$Type<(T)>): T
public "flush"(): void
public "set"<T>(arg0: $ValueDefinition$Type<(T)>, arg1: T): void
public "debounceTime"(): long
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ForgeBackedConfig$Type = ($ForgeBackedConfig);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ForgeBackedConfig_ = $ForgeBackedConfig$Type;
}}
declare module "packages/org/violetmoon/zeta/event/bus/$ZPhase" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"

export class $ZPhase extends $Enum<($ZPhase)> {
static readonly "START": $ZPhase
static readonly "END": $ZPhase


public static "values"(): ($ZPhase)[]
public static "valueOf"(arg0: string): $ZPhase
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZPhase$Type = (("start") | ("end")) | ($ZPhase);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZPhase_ = $ZPhase$Type;
}}
declare module "packages/org/violetmoon/quark/content/automation/module/$IronRodModule" {
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$ZCommonSetup, $ZCommonSetup$Type} from "packages/org/violetmoon/zeta/event/load/$ZCommonSetup"
import {$ZRegister, $ZRegister$Type} from "packages/org/violetmoon/zeta/event/load/$ZRegister"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$TagKey, $TagKey$Type} from "packages/net/minecraft/tags/$TagKey"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $IronRodModule extends $ZetaModule {
static "ironRodImmuneTag": $TagKey<($Block)>
static "usePreEndRecipe": boolean
static "iron_rod": $Block
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "register"(arg0: $ZRegister$Type): void
public "setup"(arg0: $ZCommonSetup$Type): void
set "up"(value: $ZCommonSetup$Type)
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IronRodModule$Type = ($IronRodModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IronRodModule_ = $IronRodModule$Type;
}}
declare module "packages/org/violetmoon/quark/content/mobs/entity/$Stoneling" {
import {$LevelAccessor, $LevelAccessor$Type} from "packages/net/minecraft/world/level/$LevelAccessor"
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$WalkAnimationState, $WalkAnimationState$Type} from "packages/net/minecraft/world/entity/$WalkAnimationState"
import {$DamageSource, $DamageSource$Type} from "packages/net/minecraft/world/damagesource/$DamageSource"
import {$MobSpawnType, $MobSpawnType$Type} from "packages/net/minecraft/world/entity/$MobSpawnType"
import {$PathNavigation, $PathNavigation$Type} from "packages/net/minecraft/world/entity/ai/navigation/$PathNavigation"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$EntityDataAccessor, $EntityDataAccessor$Type} from "packages/net/minecraft/network/syncher/$EntityDataAccessor"
import {$AttributeMap, $AttributeMap$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeMap"
import {$ClientGamePacketListener, $ClientGamePacketListener$Type} from "packages/net/minecraft/network/protocol/game/$ClientGamePacketListener"
import {$EntityType, $EntityType$Type} from "packages/net/minecraft/world/entity/$EntityType"
import {$Entity$RemovalReason, $Entity$RemovalReason$Type} from "packages/net/minecraft/world/entity/$Entity$RemovalReason"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$ServerLevelAccessor, $ServerLevelAccessor$Type} from "packages/net/minecraft/world/level/$ServerLevelAccessor"
import {$PathfinderMob, $PathfinderMob$Type} from "packages/net/minecraft/world/entity/$PathfinderMob"
import {$EntityInLevelCallback, $EntityInLevelCallback$Type} from "packages/net/minecraft/world/level/entity/$EntityInLevelCallback"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$MobCategory, $MobCategory$Type} from "packages/net/minecraft/world/entity/$MobCategory"
import {$LevelRenderer, $LevelRenderer$Type} from "packages/net/minecraft/client/renderer/$LevelRenderer"
import {$MobEffect, $MobEffect$Type} from "packages/net/minecraft/world/effect/$MobEffect"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"
import {$DifficultyInstance, $DifficultyInstance$Type} from "packages/net/minecraft/world/$DifficultyInstance"
import {$GoalSelector, $GoalSelector$Type} from "packages/net/minecraft/world/entity/ai/goal/$GoalSelector"
import {$Packet, $Packet$Type} from "packages/net/minecraft/network/protocol/$Packet"
import {$InteractionResult, $InteractionResult$Type} from "packages/net/minecraft/world/$InteractionResult"
import {$MobEffectInstance, $MobEffectInstance$Type} from "packages/net/minecraft/world/effect/$MobEffectInstance"
import {$Level, $Level$Type} from "packages/net/minecraft/world/level/$Level"
import {$Vec3, $Vec3$Type} from "packages/net/minecraft/world/phys/$Vec3"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$AttributeSupplier$Builder, $AttributeSupplier$Builder$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeSupplier$Builder"
import {$LevelReader, $LevelReader$Type} from "packages/net/minecraft/world/level/$LevelReader"
import {$SpawnGroupData, $SpawnGroupData$Type} from "packages/net/minecraft/world/entity/$SpawnGroupData"
import {$InteractionHand, $InteractionHand$Type} from "packages/net/minecraft/world/$InteractionHand"
import {$Optional, $Optional$Type} from "packages/java/util/$Optional"
import {$EntityDimensions, $EntityDimensions$Type} from "packages/net/minecraft/world/entity/$EntityDimensions"
import {$Stoneling$StonelingVariant, $Stoneling$StonelingVariant$Type} from "packages/org/violetmoon/quark/content/mobs/entity/$Stoneling$StonelingVariant"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $Stoneling extends $PathfinderMob {
static readonly "CARRY_LOOT_TABLE": $ResourceLocation
static readonly "HAS_LICHEN": $EntityDataAccessor<(boolean)>
 "entityJs$builder": any
static readonly "MAX_WEARING_ARMOR_CHANCE": float
static readonly "MAX_PICKUP_LOOT_CHANCE": float
static readonly "MAX_ENCHANTED_ARMOR_CHANCE": float
static readonly "MAX_ENCHANTED_WEAPON_CHANCE": float
static readonly "LEASH_TAG": string
static readonly "DEFAULT_EQUIPMENT_DROP_CHANCE": float
static readonly "PRESERVE_ITEM_DROP_CHANCE": integer
static readonly "UPDATE_GOAL_SELECTOR_EVERY_N_TICKS": integer
 "ambientSoundTime": integer
 "navigation": $PathNavigation
readonly "goalSelector": $GoalSelector
readonly "targetSelector": $GoalSelector
 "leashInfoTag": $CompoundTag
static readonly "HAND_SLOTS": integer
static readonly "ARMOR_SLOTS": integer
static readonly "EQUIPMENT_SLOT_OFFSET": integer
static readonly "ARMOR_SLOT_OFFSET": integer
static readonly "SWING_DURATION": integer
static readonly "PLAYER_HURT_EXPERIENCE_TIME": integer
static readonly "MIN_MOVEMENT_DISTANCE": double
static readonly "DEFAULT_BASE_GRAVITY": double
static readonly "DEATH_DURATION": integer
static readonly "USE_ITEM_INTERVAL": integer
static readonly "EXTRA_RENDER_CULLING_SIZE_WITH_BIG_HAT": float
 "attributes": $AttributeMap
readonly "activeEffects": $Map<($MobEffect), ($MobEffectInstance)>
 "swinging": boolean
 "swingingArm": $InteractionHand
 "swingTime": integer
 "removeArrowTime": integer
 "removeStingerTime": integer
 "hurtTime": integer
 "hurtDuration": integer
 "deathTime": integer
 "oAttackAnim": float
 "attackAnim": float
 "attackStrengthTicker": integer
readonly "walkAnimation": $WalkAnimationState
readonly "invulnerableDuration": integer
readonly "timeOffs": float
readonly "rotA": float
 "yBodyRot": float
 "yBodyRotO": float
 "yHeadRot": float
 "yHeadRotO": float
 "dead": boolean
 "jumping": boolean
 "xxa": float
 "yya": float
 "zza": float
 "effectsDirty": boolean
 "noJumpDelay": integer
static readonly "ID_TAG": string
static readonly "PASSENGERS_TAG": string
static readonly "BOARDING_COOLDOWN": integer
static readonly "TOTAL_AIR_SUPPLY": integer
static readonly "MAX_ENTITY_TAG_COUNT": integer
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2": float
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5": double
static readonly "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0": double
static readonly "BREATHING_DISTANCE_BELOW_EYES": float
static readonly "BASE_TICKS_REQUIRED_TO_FREEZE": integer
static readonly "FREEZE_HURT_FREQUENCY": integer
static readonly "UUID_TAG": string
 "blocksBuilding": boolean
 "level": $Level
 "xo": double
 "yo": double
 "zo": double
 "blockPosition": $BlockPos
 "yRot": float
 "xRot": float
 "yRotO": float
 "xRotO": float
 "horizontalCollision": boolean
 "verticalCollision": boolean
 "verticalCollisionBelow": boolean
 "minorHorizontalCollision": boolean
 "hurtMarked": boolean
 "removalReason": $Entity$RemovalReason
static readonly "DEFAULT_BB_WIDTH": float
static readonly "DEFAULT_BB_HEIGHT": float
 "walkDistO": float
 "walkDist": float
 "moveDist": float
 "flyDist": float
 "fallDistance": float
 "xOld": double
 "yOld": double
 "zOld": double
 "noPhysics": boolean
 "age": integer
 "wasTouchingWater": boolean
 "wasEyeInWater": boolean
 "invulnerableTime": integer
 "levelCallback": $EntityInLevelCallback
 "noCulling": boolean
 "hasImpulse": boolean
 "portalCooldown": integer
 "isInsidePortal": boolean
 "dimensions": $EntityDimensions
 "eyeHeight": float
 "isInPowderSnow": boolean
 "wasInPowderSnow": boolean
 "wasOnFire": boolean
 "mainSupportingBlockPos": $Optional<($BlockPos)>

constructor(arg0: $EntityType$Type<(any)>, arg1: $Level$Type)

public "getVariant"(): $Stoneling$StonelingVariant
public "isPushedByFluid"(): boolean
public "canBreatheUnderwater"(): boolean
public static "prepareAttributes"(): $AttributeSupplier$Builder
public "tick"(): void
public "readAdditionalSaveData"(arg0: $CompoundTag$Type): void
public "addAdditionalSaveData"(arg0: $CompoundTag$Type): void
public "isInvulnerableTo"(arg0: $DamageSource$Type): boolean
public "causeFallDamage"(arg0: float, arg1: float, arg2: $DamageSource$Type): boolean
public "hasLineOfSight"(arg0: $Entity$Type): boolean
public "getWalkTargetValue"(arg0: $BlockPos$Type, arg1: $LevelReader$Type): float
public static "spawnPredicate"(arg0: $EntityType$Type<(any)>, arg1: $ServerLevelAccessor$Type, arg2: $MobSpawnType$Type, arg3: $BlockPos$Type, arg4: $RandomSource$Type): boolean
public "checkDespawn"(): void
public "getAddEntityPacket"(): $Packet<($ClientGamePacketListener)>
public "getAmbientSoundInterval"(): integer
public "removeWhenFarAway"(arg0: double): boolean
public "checkSpawnRules"(arg0: $LevelAccessor$Type, arg1: $MobSpawnType$Type): boolean
public "checkSpawnObstruction"(arg0: $LevelReader$Type): boolean
public "m_6071_"(arg0: $Player$Type, arg1: $InteractionHand$Type): $InteractionResult
public "isPlayerMade"(): boolean
public "isStartled"(): boolean
public "getCarryingItem"(): $ItemStack
public "startle"(): void
public "getItemAngle"(): float
public "finalizeSpawn"(arg0: $ServerLevelAccessor$Type, arg1: $DifficultyInstance$Type, arg2: $MobSpawnType$Type, arg3: $SpawnGroupData$Type, arg4: $CompoundTag$Type): $SpawnGroupData
public "interactAt"(arg0: $Player$Type, arg1: $Vec3$Type, arg2: $InteractionHand$Type): $InteractionResult
public "setPlayerMade"(arg0: boolean): void
public "getClassification"(arg0: boolean): $MobCategory
public "getPassengersRidingOffset"(): double
public "playAmbientSound"(): void
public "lithiumOnEquipmentChanged"(): void
public "tdv$getDynamicLightX"(): double
public "tdv$getDynamicLightZ"(): double
public "tdv$getDynamicLightWorld"(): $Level
public "tdv$shouldUpdateDynamicLight"(): boolean
public "tdv$resetDynamicLight"(): void
public "tdv$getDynamicLightY"(): double
public "tdv$lambdynlights$scheduleTrackedChunksRebuild"(arg0: $LevelRenderer$Type): void
public "tdv$lambdynlights$updateDynamicLight"(arg0: $LevelRenderer$Type): boolean
public "getCachedFeetBlockState"(): $BlockState
get "variant"(): $Stoneling$StonelingVariant
get "pushedByFluid"(): boolean
get "addEntityPacket"(): $Packet<($ClientGamePacketListener)>
get "ambientSoundInterval"(): integer
get "playerMade"(): boolean
get "startled"(): boolean
get "carryingItem"(): $ItemStack
get "itemAngle"(): float
set "playerMade"(value: boolean)
get "passengersRidingOffset"(): double
get "cachedFeetBlockState"(): $BlockState
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Stoneling$Type = ($Stoneling);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Stoneling_ = $Stoneling$Type;
}}
declare module "packages/org/violetmoon/zeta/util/zetalist/$IZeta" {
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"

export interface $IZeta {

 "asZeta"(): $Zeta

(): $Zeta
}

export namespace $IZeta {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IZeta$Type = ($IZeta);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IZeta_ = $IZeta$Type;
}}
declare module "packages/org/violetmoon/quark/content/world/gen/$BlossomTreeGenerator" {
import {$ChunkGenerator, $ChunkGenerator$Type} from "packages/net/minecraft/world/level/chunk/$ChunkGenerator"
import {$Generator, $Generator$Type} from "packages/org/violetmoon/zeta/world/generator/$Generator"
import {$ConfiguredFeature, $ConfiguredFeature$Type} from "packages/net/minecraft/world/level/levelgen/feature/$ConfiguredFeature"
import {$DimensionConfig, $DimensionConfig$Type} from "packages/org/violetmoon/zeta/config/type/$DimensionConfig"
import {$BlossomTreeConfig, $BlossomTreeConfig$Type} from "packages/org/violetmoon/quark/content/world/config/$BlossomTreeConfig"
import {$WorldGenRegion, $WorldGenRegion$Type} from "packages/net/minecraft/server/level/$WorldGenRegion"
import {$RandomSource, $RandomSource$Type} from "packages/net/minecraft/util/$RandomSource"
import {$ResourceKey, $ResourceKey$Type} from "packages/net/minecraft/resources/$ResourceKey"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $BlossomTreeGenerator extends $Generator {
readonly "dimConfig": $DimensionConfig

constructor(arg0: $BlossomTreeConfig$Type, arg1: $ResourceKey$Type<($ConfiguredFeature$Type<(any), (any)>)>)

public "generateChunk"(arg0: $WorldGenRegion$Type, arg1: $ChunkGenerator$Type, arg2: $RandomSource$Type, arg3: $BlockPos$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BlossomTreeGenerator$Type = ($BlossomTreeGenerator);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BlossomTreeGenerator_ = $BlossomTreeGenerator$Type;
}}
declare module "packages/org/violetmoon/quark/content/automation/block/be/$FeedingTroughBlockEntity" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Ingredient, $Ingredient$Type} from "packages/net/minecraft/world/item/crafting/$Ingredient"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$FeedingTroughBlockEntity$FeedResult, $FeedingTroughBlockEntity$FeedResult$Type} from "packages/org/violetmoon/quark/content/automation/block/be/$FeedingTroughBlockEntity$FeedResult"
import {$FakePlayer, $FakePlayer$Type} from "packages/net/minecraftforge/common/util/$FakePlayer"
import {$Player, $Player$Type} from "packages/net/minecraft/world/entity/player/$Player"
import {$BlockEntity, $BlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$BlockEntity"
import {$Animal, $Animal$Type} from "packages/net/minecraft/world/entity/animal/$Animal"
import {$LockCode, $LockCode$Type} from "packages/net/minecraft/world/$LockCode"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$RandomizableContainerBlockEntity, $RandomizableContainerBlockEntity$Type} from "packages/net/minecraft/world/level/block/entity/$RandomizableContainerBlockEntity"

export class $FeedingTroughBlockEntity extends $RandomizableContainerBlockEntity {
static readonly "LOOT_TABLE_TAG": string
static readonly "LOOT_TABLE_SEED_TAG": string
 "lootTable": $ResourceLocation
 "lootTableSeed": long
 "lockKey": $LockCode
 "blockState": $BlockState

constructor(arg0: $BlockPos$Type, arg1: $BlockState$Type)

public "setChanged"(): void
public "getContainerSize"(): integer
public "load"(arg0: $CompoundTag$Type): void
public "isEmpty"(): boolean
public "tryFeedingAnimal"(arg0: $Animal$Type): $FeedingTroughBlockEntity$FeedResult
public "updateFoodHolder"(arg0: $Animal$Type, arg1: $Ingredient$Type, arg2: $FakePlayer$Type): void
public static "stillValidBlockEntity"(arg0: $BlockEntity$Type, arg1: $Player$Type, arg2: integer): boolean
public static "stillValidBlockEntity"(arg0: $BlockEntity$Type, arg1: $Player$Type): boolean
public static "tryClear"(arg0: any): void
get "containerSize"(): integer
get "empty"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $FeedingTroughBlockEntity$Type = ($FeedingTroughBlockEntity);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $FeedingTroughBlockEntity_ = $FeedingTroughBlockEntity$Type;
}}
declare module "packages/org/violetmoon/zeta/client/config/widget/$CheckboxButton" {
import {$ChangeSet, $ChangeSet$Type} from "packages/org/violetmoon/zeta/config/$ChangeSet"
import {$ZetaClient, $ZetaClient$Type} from "packages/org/violetmoon/zeta/client/$ZetaClient"
import {$Button, $Button$Type} from "packages/net/minecraft/client/gui/components/$Button"
import {$ValueDefinition, $ValueDefinition$Type} from "packages/org/violetmoon/zeta/config/$ValueDefinition"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Button$OnPress, $Button$OnPress$Type} from "packages/net/minecraft/client/gui/components/$Button$OnPress"

export class $CheckboxButton extends $Button {
static readonly "SMALL_WIDTH": integer
static readonly "DEFAULT_WIDTH": integer
static readonly "DEFAULT_HEIGHT": integer
 "onPress": $Button$OnPress
static readonly "WIDGETS_LOCATION": $ResourceLocation
static readonly "ACCESSIBILITY_TEXTURE": $ResourceLocation
 "height": integer
 "x": integer
 "y": integer
 "active": boolean
 "visible": boolean
static readonly "UNSET_FG_COLOR": integer

constructor(arg0: $ResourceLocation$Type, arg1: integer, arg2: integer, arg3: $ChangeSet$Type, arg4: $ValueDefinition$Type<(boolean)>)
constructor(arg0: $ZetaClient$Type, arg1: integer, arg2: integer, arg3: $ChangeSet$Type, arg4: $ValueDefinition$Type<(boolean)>)

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CheckboxButton$Type = ($CheckboxButton);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CheckboxButton_ = $CheckboxButton$Type;
}}
declare module "packages/org/violetmoon/zeta/client/config/screen/$SectionScreen" {
import {$Component, $Component$Type} from "packages/net/minecraft/network/chat/$Component"
import {$NarratableEntry, $NarratableEntry$Type} from "packages/net/minecraft/client/gui/narration/$NarratableEntry"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"
import {$GuiEventListener, $GuiEventListener$Type} from "packages/net/minecraft/client/gui/components/events/$GuiEventListener"
import {$Screen$DeferredTooltipRendering, $Screen$DeferredTooltipRendering$Type} from "packages/net/minecraft/client/gui/screens/$Screen$DeferredTooltipRendering"
import {$ChangeSet, $ChangeSet$Type} from "packages/org/violetmoon/zeta/config/$ChangeSet"
import {$Renderable, $Renderable$Type} from "packages/net/minecraft/client/gui/components/$Renderable"
import {$ZetaClient, $ZetaClient$Type} from "packages/org/violetmoon/zeta/client/$ZetaClient"
import {$ZetaScreen, $ZetaScreen$Type} from "packages/org/violetmoon/zeta/client/config/screen/$ZetaScreen"
import {$List, $List$Type} from "packages/java/util/$List"
import {$SectionDefinition, $SectionDefinition$Type} from "packages/org/violetmoon/zeta/config/$SectionDefinition"

export class $SectionScreen extends $ZetaScreen {
static readonly "BACKGROUND_LOCATION": $ResourceLocation
 "title": $Component
readonly "children": $List<($GuiEventListener)>
readonly "narratables": $List<($NarratableEntry)>
 "width": integer
 "height": integer
readonly "renderables": $List<($Renderable)>
 "deferredTooltipRendering": $Screen$DeferredTooltipRendering

constructor(arg0: $ZetaClient$Type, arg1: $Screen$Type, arg2: $ChangeSet$Type, arg3: $SectionDefinition$Type)

public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: float): void
public "tick"(): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SectionScreen$Type = ($SectionScreen);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SectionScreen_ = $SectionScreen$Type;
}}
declare module "packages/org/violetmoon/zetaimplforge/event/play/entity/living/$ForgeZLivingConversion" {
import {$ZLivingConversion, $ZLivingConversion$Type} from "packages/org/violetmoon/zeta/event/play/entity/living/$ZLivingConversion"
import {$LivingConversionEvent, $LivingConversionEvent$Type} from "packages/net/minecraftforge/event/entity/living/$LivingConversionEvent"
import {$LivingEntity, $LivingEntity$Type} from "packages/net/minecraft/world/entity/$LivingEntity"

export class $ForgeZLivingConversion implements $ZLivingConversion {

constructor(arg0: $LivingConversionEvent$Type)

public "setCanceled"(arg0: boolean): void
public "isCanceled"(): boolean
public "getEntity"(): $LivingEntity
public "cancel"(): void
set "canceled"(value: boolean)
get "canceled"(): boolean
get "entity"(): $LivingEntity
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ForgeZLivingConversion$Type = ($ForgeZLivingConversion);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ForgeZLivingConversion_ = $ForgeZLivingConversion$Type;
}}
declare module "packages/org/violetmoon/quark/content/world/undergroundstyle/base/$UndergroundStyleGenerator$Context" {
import {$ClusterBasedGenerator$IGenerationContext, $ClusterBasedGenerator$IGenerationContext$Type} from "packages/org/violetmoon/zeta/world/generator/multichunk/$ClusterBasedGenerator$IGenerationContext"
import {$ChunkGenerator, $ChunkGenerator$Type} from "packages/net/minecraft/world/level/chunk/$ChunkGenerator"
import {$WorldGenRegion, $WorldGenRegion$Type} from "packages/net/minecraft/server/level/$WorldGenRegion"
import {$UndergroundStyleConfig, $UndergroundStyleConfig$Type} from "packages/org/violetmoon/quark/content/world/undergroundstyle/base/$UndergroundStyleConfig"
import {$Random, $Random$Type} from "packages/java/util/$Random"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"

export class $UndergroundStyleGenerator$Context implements $ClusterBasedGenerator$IGenerationContext {
readonly "world": $WorldGenRegion
readonly "source": $BlockPos
readonly "generator": $ChunkGenerator
readonly "random": $Random
readonly "info": $UndergroundStyleConfig

constructor(arg0: $WorldGenRegion$Type, arg1: $BlockPos$Type, arg2: $ChunkGenerator$Type, arg3: $Random$Type, arg4: $UndergroundStyleConfig$Type)

public "consume"(arg0: $BlockPos$Type): void
public "canPlaceAt"(arg0: $BlockPos$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $UndergroundStyleGenerator$Context$Type = ($UndergroundStyleGenerator$Context);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $UndergroundStyleGenerator$Context_ = $UndergroundStyleGenerator$Context$Type;
}}
declare module "packages/org/violetmoon/zeta/recipe/$IZetaCondition" {
import {$IZetaCondition$IContext, $IZetaCondition$IContext$Type} from "packages/org/violetmoon/zeta/recipe/$IZetaCondition$IContext"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export interface $IZetaCondition {

 "test"(arg0: $IZetaCondition$IContext$Type): boolean
 "getID"(): $ResourceLocation
}

export namespace $IZetaCondition {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IZetaCondition$Type = ($IZetaCondition);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IZetaCondition_ = $IZetaCondition$Type;
}}
declare module "packages/org/violetmoon/quark/addons/oddities/util/$Influence" {
import {$Record, $Record$Type} from "packages/java/lang/$Record"
import {$Enchantment, $Enchantment$Type} from "packages/net/minecraft/world/item/enchantment/$Enchantment"
import {$List, $List$Type} from "packages/java/util/$List"

export class $Influence extends $Record {

constructor(boost: $List$Type<($Enchantment$Type)>, dampen: $List$Type<($Enchantment$Type)>)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "boost"(): $List<($Enchantment)>
public "dampen"(): $List<($Enchantment)>
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $Influence$Type = ($Influence);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $Influence_ = $Influence$Type;
}}
declare module "packages/org/violetmoon/zeta/util/zetalist/$ZetaClientList" {
import {$ZetaList, $ZetaList$Type} from "packages/org/violetmoon/zeta/util/zetalist/$ZetaList"
import {$ZetaClient, $ZetaClient$Type} from "packages/org/violetmoon/zeta/client/$ZetaClient"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"

export class $ZetaClientList extends $ZetaList<($ZetaClient)> {
static "INSTANCE": $ZetaClientList

constructor()

public "register"(arg0: $ZetaClient$Type): void
public "getClientForZeta"(arg0: $Zeta$Type): $ZetaClient
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZetaClientList$Type = ($ZetaClientList);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZetaClientList_ = $ZetaClientList$Type;
}}
declare module "packages/org/violetmoon/zeta/registry/$CraftingExtensionsRegistry" {
import {$IZetaConditionSerializer, $IZetaConditionSerializer$Type} from "packages/org/violetmoon/zeta/recipe/$IZetaConditionSerializer"
import {$Ingredient, $Ingredient$Type} from "packages/net/minecraft/world/item/crafting/$Ingredient"
import {$IZetaIngredientSerializer, $IZetaIngredientSerializer$Type} from "packages/org/violetmoon/zeta/recipe/$IZetaIngredientSerializer"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$IZetaCondition, $IZetaCondition$Type} from "packages/org/violetmoon/zeta/recipe/$IZetaCondition"

export interface $CraftingExtensionsRegistry {

 "getID"(arg0: $IZetaIngredientSerializer$Type<(any)>): $ResourceLocation
 "registerIngredientSerializer"<T extends $Ingredient>(arg0: $ResourceLocation$Type, arg1: $IZetaIngredientSerializer$Type<(T)>): $IZetaIngredientSerializer<(T)>
 "registerConditionSerializer"<T extends $IZetaCondition>(arg0: $IZetaConditionSerializer$Type<(T)>): $IZetaConditionSerializer<(T)>
}

export namespace $CraftingExtensionsRegistry {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $CraftingExtensionsRegistry$Type = ($CraftingExtensionsRegistry);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $CraftingExtensionsRegistry_ = $CraftingExtensionsRegistry$Type;
}}
declare module "packages/org/violetmoon/zeta/block/$ZetaFlammableBlock" {
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$BlockGetter, $BlockGetter$Type} from "packages/net/minecraft/world/level/$BlockGetter"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$ZetaBlock, $ZetaBlock$Type} from "packages/org/violetmoon/zeta/block/$ZetaBlock"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$BlockPos, $BlockPos$Type} from "packages/net/minecraft/core/$BlockPos"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $ZetaFlammableBlock extends $ZetaBlock {
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(arg0: string, arg1: $ZetaModule$Type, arg2: integer, arg3: $BlockBehaviour$Properties$Type)

public "isFlammableZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): boolean
public "getFlammabilityZeta"(arg0: $BlockState$Type, arg1: $BlockGetter$Type, arg2: $BlockPos$Type, arg3: $Direction$Type): integer
public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZetaFlammableBlock$Type = ($ZetaFlammableBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZetaFlammableBlock_ = $ZetaFlammableBlock$Type;
}}
declare module "packages/org/violetmoon/quark/content/automation/block/$MetalButtonBlock" {
import {$BooleanProperty, $BooleanProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$BooleanProperty"
import {$BlockBehaviour$Properties, $BlockBehaviour$Properties$Type} from "packages/net/minecraft/world/level/block/state/$BlockBehaviour$Properties"
import {$ZetaButtonBlock, $ZetaButtonBlock$Type} from "packages/org/violetmoon/zeta/block/$ZetaButtonBlock"
import {$BlockState, $BlockState$Type} from "packages/net/minecraft/world/level/block/state/$BlockState"
import {$IdMapper, $IdMapper$Type} from "packages/net/minecraft/core/$IdMapper"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$EnumProperty, $EnumProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$EnumProperty"
import {$AttachFace, $AttachFace$Type} from "packages/net/minecraft/world/level/block/state/properties/$AttachFace"
import {$DirectionProperty, $DirectionProperty$Type} from "packages/net/minecraft/world/level/block/state/properties/$DirectionProperty"

export class $MetalButtonBlock extends $ZetaButtonBlock {
static readonly "POWERED": $BooleanProperty
static readonly "FACE": $EnumProperty<($AttachFace)>
static readonly "FACING": $DirectionProperty
/**
 * 
 * @deprecated
 */
static readonly "BLOCK_STATE_REGISTRY": $IdMapper<($BlockState)>
static readonly "UPDATE_NEIGHBORS": integer
static readonly "UPDATE_CLIENTS": integer
static readonly "UPDATE_INVISIBLE": integer
static readonly "UPDATE_IMMEDIATE": integer
static readonly "UPDATE_KNOWN_SHAPE": integer
static readonly "UPDATE_SUPPRESS_DROPS": integer
static readonly "UPDATE_MOVE_BY_PISTON": integer
static readonly "UPDATE_NONE": integer
static readonly "UPDATE_ALL": integer
static readonly "UPDATE_ALL_IMMEDIATE": integer
static readonly "INDESTRUCTIBLE": float
static readonly "INSTANT": float
static readonly "UPDATE_LIMIT": integer
 "descriptionId": string
 "properties": $BlockBehaviour$Properties
 "drops": $ResourceLocation

constructor(arg0: string, arg1: $ZetaModule$Type, arg2: integer)

public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $MetalButtonBlock$Type = ($MetalButtonBlock);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $MetalButtonBlock_ = $MetalButtonBlock$Type;
}}
declare module "packages/org/violetmoon/zeta/client/config/widget/$ScrollableWidgetList$Entry" {
import {$AbstractWidget, $AbstractWidget$Type} from "packages/net/minecraft/client/gui/components/$AbstractWidget"
import {$ObjectSelectionList$Entry, $ObjectSelectionList$Entry$Type} from "packages/net/minecraft/client/gui/components/$ObjectSelectionList$Entry"
import {$List, $List$Type} from "packages/java/util/$List"
import {$ScrollableWidgetList$WidgetWrapper, $ScrollableWidgetList$WidgetWrapper$Type} from "packages/org/violetmoon/zeta/client/config/widget/$ScrollableWidgetList$WidgetWrapper"
import {$GuiGraphics, $GuiGraphics$Type} from "packages/net/minecraft/client/gui/$GuiGraphics"

export class $ScrollableWidgetList$Entry<E extends $ScrollableWidgetList$Entry<(E)>> extends $ObjectSelectionList$Entry<(E)> {
 "children": $List<($ScrollableWidgetList$WidgetWrapper)>

constructor()

public "render"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: integer, arg4: integer, arg5: integer, arg6: integer, arg7: integer, arg8: boolean, arg9: float): void
public "drawBackground"(arg0: $GuiGraphics$Type, arg1: integer, arg2: integer, arg3: integer, arg4: integer, arg5: integer, arg6: integer, arg7: integer, arg8: boolean): void
public "addScrollingWidget"(arg0: $AbstractWidget$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ScrollableWidgetList$Entry$Type<E> = ($ScrollableWidgetList$Entry<(E)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ScrollableWidgetList$Entry_<E> = $ScrollableWidgetList$Entry$Type<(E)>;
}}
declare module "packages/org/violetmoon/quark/addons/oddities/block/be/$PipeBlockEntity$PipeItem" {
import {$CompoundTag, $CompoundTag$Type} from "packages/net/minecraft/nbt/$CompoundTag"
import {$Direction, $Direction$Type} from "packages/net/minecraft/core/$Direction"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"

export class $PipeBlockEntity$PipeItem {
readonly "stack": $ItemStack
 "ticksInPipe": integer
readonly "incomingFace": $Direction
 "outgoingFace": $Direction
 "backloggedFace": $Direction
 "rngSeed": long
 "timeInWorld": integer
 "valid": boolean

constructor(arg0: $ItemStack$Type, arg1: $Direction$Type, arg2: long)

public static "readFromNBT"(arg0: $CompoundTag$Type): $PipeBlockEntity$PipeItem
public "getTimeFract"(arg0: float): float
public "writeToNBT"(arg0: $CompoundTag$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $PipeBlockEntity$PipeItem$Type = ($PipeBlockEntity$PipeItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $PipeBlockEntity$PipeItem_ = $PipeBlockEntity$PipeItem$Type;
}}
declare module "packages/org/violetmoon/quark/integration/lootr/client/$LootrVariantChestRenderer" {
import {$Material, $Material$Type} from "packages/net/minecraft/client/resources/model/$Material"
import {$BlockEntityRendererProvider$Context, $BlockEntityRendererProvider$Context$Type} from "packages/net/minecraft/client/renderer/blockentity/$BlockEntityRendererProvider$Context"
import {$LootrVariantChestBlockEntity, $LootrVariantChestBlockEntity$Type} from "packages/org/violetmoon/quark/integration/lootr/$LootrVariantChestBlockEntity"
import {$ChestType, $ChestType$Type} from "packages/net/minecraft/world/level/block/state/properties/$ChestType"
import {$ChestRenderer, $ChestRenderer$Type} from "packages/net/minecraft/client/renderer/blockentity/$ChestRenderer"

export class $LootrVariantChestRenderer<T extends $LootrVariantChestBlockEntity> extends $ChestRenderer<(T)> {

constructor(arg0: $BlockEntityRendererProvider$Context$Type, arg1: boolean)

public "getMaterial"(arg0: T, arg1: $ChestType$Type): $Material
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $LootrVariantChestRenderer$Type<T> = ($LootrVariantChestRenderer<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $LootrVariantChestRenderer_<T> = $LootrVariantChestRenderer$Type<(T)>;
}}
declare module "packages/org/violetmoon/quark/content/building/module/$NetherBrickFenceGateModule" {
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$ZRegister, $ZRegister$Type} from "packages/org/violetmoon/zeta/event/load/$ZRegister"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $NetherBrickFenceGateModule extends $ZetaModule {
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "register"(arg0: $ZRegister$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $NetherBrickFenceGateModule$Type = ($NetherBrickFenceGateModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $NetherBrickFenceGateModule_ = $NetherBrickFenceGateModule$Type;
}}
declare module "packages/org/violetmoon/quark/content/mobs/item/$ForgottenHatItem" {
import {$Multimap, $Multimap$Type} from "packages/com/google/common/collect/$Multimap"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$CreativeModeTab, $CreativeModeTab$Type} from "packages/net/minecraft/world/item/$CreativeModeTab"
import {$EquipmentSlot, $EquipmentSlot$Type} from "packages/net/minecraft/world/entity/$EquipmentSlot"
import {$ItemStack, $ItemStack$Type} from "packages/net/minecraft/world/item/$ItemStack"
import {$Equipable, $Equipable$Type} from "packages/net/minecraft/world/item/$Equipable"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$ZetaArmorItem, $ZetaArmorItem$Type} from "packages/org/violetmoon/zeta/item/$ZetaArmorItem"
import {$Attribute, $Attribute$Type} from "packages/net/minecraft/world/entity/ai/attributes/$Attribute"
import {$AttributeModifier, $AttributeModifier$Type} from "packages/net/minecraft/world/entity/ai/attributes/$AttributeModifier"
import {$IZetaItem, $IZetaItem$Type} from "packages/org/violetmoon/zeta/item/$IZetaItem"
import {$ResourceKey, $ResourceKey$Type} from "packages/net/minecraft/resources/$ResourceKey"
import {$ItemLike, $ItemLike$Type} from "packages/net/minecraft/world/level/$ItemLike"
import {$DispenseItemBehavior, $DispenseItemBehavior$Type} from "packages/net/minecraft/core/dispenser/$DispenseItemBehavior"
import {$Map, $Map$Type} from "packages/java/util/$Map"
import {$Entity, $Entity$Type} from "packages/net/minecraft/world/entity/$Entity"

export class $ForgottenHatItem extends $ZetaArmorItem implements $IZetaItem {
static readonly "DISPENSE_ITEM_BEHAVIOR": $DispenseItemBehavior
 "defaultModifiers": $Multimap<($Attribute), ($AttributeModifier)>
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $ZetaModule$Type)

public "getModule"(): $ZetaModule
public "canEquipZeta"(arg0: $ItemStack$Type, arg1: $EquipmentSlot$Type, arg2: $Entity$Type): boolean
public "doesConditionApply"(): boolean
public "getDefaultAttributeModifiers"(arg0: $EquipmentSlot$Type): $Multimap<($Attribute), ($AttributeModifier)>
public "isEnchantable"(arg0: $ItemStack$Type): boolean
public "getArmorTextureZeta"(arg0: $ItemStack$Type, arg1: $Entity$Type, arg2: $EquipmentSlot$Type, arg3: string): string
public "getItem"(): $Item
public "setCreativeTab"(arg0: $ResourceKey$Type<($CreativeModeTab$Type)>): $Item
public "setCreativeTab"(arg0: $ResourceKey$Type<($CreativeModeTab$Type)>, arg1: $ItemLike$Type, arg2: boolean): $Item
public "isEnabled"(): boolean
public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
public static "get"(arg0: $ItemStack$Type): $Equipable
get "module"(): $ZetaModule
get "item"(): $Item
set "creativeTab"(value: $ResourceKey$Type<($CreativeModeTab$Type)>)
get "enabled"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ForgottenHatItem$Type = ($ForgottenHatItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ForgottenHatItem_ = $ForgottenHatItem$Type;
}}
declare module "packages/org/violetmoon/quark/base/client/handler/$InventoryButtonHandler$ButtonTargetType" {
import {$Enum, $Enum$Type} from "packages/java/lang/$Enum"
import {$Supplier, $Supplier$Type} from "packages/java/util/function/$Supplier"

export class $InventoryButtonHandler$ButtonTargetType extends $Enum<($InventoryButtonHandler$ButtonTargetType)> {
static readonly "PLAYER_INVENTORY": $InventoryButtonHandler$ButtonTargetType
static readonly "CONTAINER_INVENTORY": $InventoryButtonHandler$ButtonTargetType
static readonly "CONTAINER_PLAYER_INVENTORY": $InventoryButtonHandler$ButtonTargetType
readonly "offX": $Supplier<(integer)>
readonly "offY": $Supplier<(integer)>


public static "values"(): ($InventoryButtonHandler$ButtonTargetType)[]
public static "valueOf"(arg0: string): $InventoryButtonHandler$ButtonTargetType
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $InventoryButtonHandler$ButtonTargetType$Type = (("player_inventory") | ("container_player_inventory") | ("container_inventory")) | ($InventoryButtonHandler$ButtonTargetType);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $InventoryButtonHandler$ButtonTargetType_ = $InventoryButtonHandler$ButtonTargetType$Type;
}}
declare module "packages/org/violetmoon/quark/content/tweaks/module/$BetterElytraRocketModule" {
import {$Set, $Set$Type} from "packages/java/util/$Set"
import {$Zeta, $Zeta$Type} from "packages/org/violetmoon/zeta/$Zeta"
import {$ZRightClickItem, $ZRightClickItem$Type} from "packages/org/violetmoon/zeta/event/play/entity/player/$ZRightClickItem"
import {$ZetaCategory, $ZetaCategory$Type} from "packages/org/violetmoon/zeta/module/$ZetaCategory"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"

export class $BetterElytraRocketModule extends $ZetaModule {
 "zeta": $Zeta
 "category": $ZetaCategory
 "displayName": string
 "lowercaseName": string
 "description": string
 "antiOverlap": $Set<(string)>
 "enabled": boolean
 "enabledByDefault": boolean
 "disabledByOverlap": boolean
 "ignoreAntiOverlap": boolean

constructor()

public "onUseRocket"(arg0: $ZRightClickItem$Type): void
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BetterElytraRocketModule$Type = ($BetterElytraRocketModule);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BetterElytraRocketModule_ = $BetterElytraRocketModule$Type;
}}
declare module "packages/org/violetmoon/zeta/item/$ZetaHangingSignItem" {
import {$HangingSignItem, $HangingSignItem$Type} from "packages/net/minecraft/world/item/$HangingSignItem"
import {$BooleanSupplier, $BooleanSupplier$Type} from "packages/java/util/function/$BooleanSupplier"
import {$UUID, $UUID$Type} from "packages/java/util/$UUID"
import {$CreativeModeTab, $CreativeModeTab$Type} from "packages/net/minecraft/world/item/$CreativeModeTab"
import {$Block, $Block$Type} from "packages/net/minecraft/world/level/block/$Block"
import {$ZetaModule, $ZetaModule$Type} from "packages/org/violetmoon/zeta/module/$ZetaModule"
import {$Item, $Item$Type} from "packages/net/minecraft/world/item/$Item"
import {$AdditionalItemPlacement, $AdditionalItemPlacement$Type} from "packages/net/mehvahdjukaar/moonlight/api/item/additional_placements/$AdditionalItemPlacement"
import {$IZetaItem, $IZetaItem$Type} from "packages/org/violetmoon/zeta/item/$IZetaItem"
import {$ResourceKey, $ResourceKey$Type} from "packages/net/minecraft/resources/$ResourceKey"
import {$ItemLike, $ItemLike$Type} from "packages/net/minecraft/world/level/$ItemLike"
import {$Map, $Map$Type} from "packages/java/util/$Map"

export class $ZetaHangingSignItem extends $HangingSignItem implements $IZetaItem {
static readonly "BLOCK_ENTITY_TAG": string
static readonly "BLOCK_STATE_TAG": string
static readonly "BY_BLOCK": $Map<($Block), ($Item)>
static readonly "BASE_ATTACK_DAMAGE_UUID": $UUID
static readonly "MAX_STACK_SIZE": integer
static readonly "EAT_DURATION": integer
static readonly "MAX_BAR_WIDTH": integer
 "craftingRemainingItem": $Item
 "descriptionId": string
 "renderProperties": any

constructor(arg0: $ZetaModule$Type, arg1: $Block$Type, arg2: $Block$Type)

public "getModule"(): $ZetaModule
public "doesConditionApply"(): boolean
public "setCondition"(arg0: $BooleanSupplier$Type): $ZetaHangingSignItem
public "getItem"(): $Item
public "setCreativeTab"(arg0: $ResourceKey$Type<($CreativeModeTab$Type)>): $Item
public "setCreativeTab"(arg0: $ResourceKey$Type<($CreativeModeTab$Type)>, arg1: $ItemLike$Type, arg2: boolean): $Item
public "isEnabled"(): boolean
public static "isEnabled"(arg0: $Item$Type): boolean
public static "isEnabled"(arg0: $Block$Type): boolean
public "moonlight$addAdditionalBehavior"(arg0: $AdditionalItemPlacement$Type): void
public "moonlight$getAdditionalBehavior"(): $AdditionalItemPlacement
public "moonlight$getClientAnimationExtension"(): any
public "moonlight$setClientAnimationExtension"(arg0: any): void
get "module"(): $ZetaModule
set "condition"(value: $BooleanSupplier$Type)
get "item"(): $Item
set "creativeTab"(value: $ResourceKey$Type<($CreativeModeTab$Type)>)
get "enabled"(): boolean
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZetaHangingSignItem$Type = ($ZetaHangingSignItem);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZetaHangingSignItem_ = $ZetaHangingSignItem$Type;
}}
declare module "packages/org/violetmoon/quark/content/tools/recipe/$SmithingRuneRecipe$Serializer" {
import {$JsonObject, $JsonObject$Type} from "packages/com/google/gson/$JsonObject"
import {$RecipeSerializer, $RecipeSerializer$Type} from "packages/net/minecraft/world/item/crafting/$RecipeSerializer"
import {$FriendlyByteBuf, $FriendlyByteBuf$Type} from "packages/net/minecraft/network/$FriendlyByteBuf"
import {$SmithingRuneRecipe, $SmithingRuneRecipe$Type} from "packages/org/violetmoon/quark/content/tools/recipe/$SmithingRuneRecipe"
import {$ICondition$IContext, $ICondition$IContext$Type} from "packages/net/minecraftforge/common/crafting/conditions/$ICondition$IContext"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"
import {$Recipe, $Recipe$Type} from "packages/net/minecraft/world/item/crafting/$Recipe"

export class $SmithingRuneRecipe$Serializer implements $RecipeSerializer<($SmithingRuneRecipe)> {

constructor()

public "fromJson"(arg0: $ResourceLocation$Type, arg1: $JsonObject$Type): $SmithingRuneRecipe
public "fromNetwork"(arg0: $ResourceLocation$Type, arg1: $FriendlyByteBuf$Type): $SmithingRuneRecipe
public "toNetwork"(arg0: $FriendlyByteBuf$Type, arg1: $SmithingRuneRecipe$Type): void
public static "register"<S extends $RecipeSerializer<(T)>, T extends $Recipe<(any)>>(arg0: string, arg1: S): S
public "fromJson"(arg0: $ResourceLocation$Type, arg1: $JsonObject$Type, arg2: $ICondition$IContext$Type): $SmithingRuneRecipe
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $SmithingRuneRecipe$Serializer$Type = ($SmithingRuneRecipe$Serializer);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $SmithingRuneRecipe$Serializer_ = $SmithingRuneRecipe$Serializer$Type;
}}
declare module "packages/org/violetmoon/zeta/client/config/definition/$BooleanClientDefinition" {
import {$AbstractWidget, $AbstractWidget$Type} from "packages/net/minecraft/client/gui/components/$AbstractWidget"
import {$Consumer, $Consumer$Type} from "packages/java/util/function/$Consumer"
import {$ChangeSet, $ChangeSet$Type} from "packages/org/violetmoon/zeta/config/$ChangeSet"
import {$ZetaClient, $ZetaClient$Type} from "packages/org/violetmoon/zeta/client/$ZetaClient"
import {$ValueDefinition, $ValueDefinition$Type} from "packages/org/violetmoon/zeta/config/$ValueDefinition"
import {$Screen, $Screen$Type} from "packages/net/minecraft/client/gui/screens/$Screen"
import {$ClientDefinitionExt, $ClientDefinitionExt$Type} from "packages/org/violetmoon/zeta/client/config/definition/$ClientDefinitionExt"

export class $BooleanClientDefinition implements $ClientDefinitionExt<($ValueDefinition<(boolean)>)> {

constructor()

public "addWidgets"(arg0: $ZetaClient$Type, arg1: $Screen$Type, arg2: $ChangeSet$Type, arg3: $ValueDefinition$Type<(boolean)>, arg4: $Consumer$Type<($AbstractWidget$Type)>): void
public "getSubtitle"(arg0: $ChangeSet$Type, arg1: $ValueDefinition$Type<(boolean)>): string
public "truncate"(arg0: string): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $BooleanClientDefinition$Type = ($BooleanClientDefinition);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $BooleanClientDefinition_ = $BooleanClientDefinition$Type;
}}
declare module "packages/org/violetmoon/zeta/util/handler/$StructureBlockReplacementHandler$StructureHolder" {
import {$Structure, $Structure$Type} from "packages/net/minecraft/world/level/levelgen/structure/$Structure"
import {$List, $List$Type} from "packages/java/util/$List"
import {$StructurePiece, $StructurePiece$Type} from "packages/net/minecraft/world/level/levelgen/structure/$StructurePiece"

export class $StructureBlockReplacementHandler$StructureHolder {
 "currentStructure": $Structure
 "currentComponents": $List<($StructurePiece)>

constructor()

}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $StructureBlockReplacementHandler$StructureHolder$Type = ($StructureBlockReplacementHandler$StructureHolder);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $StructureBlockReplacementHandler$StructureHolder_ = $StructureBlockReplacementHandler$StructureHolder$Type;
}}
declare module "packages/org/violetmoon/zeta/client/event/load/$ZAddModels" {
import {$IZetaLoadEvent, $IZetaLoadEvent$Type} from "packages/org/violetmoon/zeta/event/bus/$IZetaLoadEvent"
import {$ResourceLocation, $ResourceLocation$Type} from "packages/net/minecraft/resources/$ResourceLocation"

export interface $ZAddModels extends $IZetaLoadEvent {

 "register"(arg0: $ResourceLocation$Type): void

(arg0: $ResourceLocation$Type): void
}

export namespace $ZAddModels {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZAddModels$Type = ($ZAddModels);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZAddModels_ = $ZAddModels$Type;
}}
declare module "packages/org/violetmoon/zeta/capability/$ZetaCapability" {
import {$Record, $Record$Type} from "packages/java/lang/$Record"

export class $ZetaCapability<T> extends $Record {

constructor(id: string)

public "equals"(arg0: any): boolean
public "toString"(): string
public "hashCode"(): integer
public "id"(): string
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $ZetaCapability$Type<T> = ($ZetaCapability<(T)>);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $ZetaCapability_<T> = $ZetaCapability$Type<(T)>;
}}
declare module "packages/org/violetmoon/zeta/client/config/definition/$IConfigDefinitionProvider" {
import {$ClientDefinitionExt, $ClientDefinitionExt$Type} from "packages/org/violetmoon/zeta/client/config/definition/$ClientDefinitionExt"
import {$SectionDefinition, $SectionDefinition$Type} from "packages/org/violetmoon/zeta/config/$SectionDefinition"

export interface $IConfigDefinitionProvider {

 "getClientConfigDefinition"(arg0: $SectionDefinition$Type): $ClientDefinitionExt<($SectionDefinition)>

(arg0: $SectionDefinition$Type): $ClientDefinitionExt<($SectionDefinition)>
}

export namespace $IConfigDefinitionProvider {
const probejs$$marker: never
}
/**
 * Class-specific type exported by ProbeJS, use global Type_
 * types for convenience unless there's a naming conflict.
 */
export type $IConfigDefinitionProvider$Type = ($IConfigDefinitionProvider);
/**
 * Global type exported for convenience, use class-specific
 * types if there's a naming conflict.
 */
declare global {
export type $IConfigDefinitionProvider_ = $IConfigDefinitionProvider$Type;
}}
